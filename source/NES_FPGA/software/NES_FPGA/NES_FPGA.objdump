
NES_FPGA.elf:     file format elf32-littlenios2
NES_FPGA.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00017840 memsz 0x00017840 flags r-x
    LOAD off    0x00018860 vaddr 0x08017860 paddr 0x0801933c align 2**12
         filesz 0x00001adc memsz 0x00001adc flags rw-
    LOAD off    0x0001ae18 vaddr 0x0801ae18 paddr 0x0801ae18 align 2**12
         filesz 0x00000000 memsz 0x000008b4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016e50  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000085c  08017004  08017004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001adc  08017860  0801933c  00018860  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000008b4  0801ae18  0801ae18  0001ae18  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0001a33c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd8  00000000  00000000  0001a360  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002117  00000000  00000000  0001b138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002cc92  00000000  00000000  0001d24f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008a91  00000000  00000000  00049ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001889b  00000000  00000000  00052972  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002308  00000000  00000000  0006b210  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002673  00000000  00000000  0006d518  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d2d6  00000000  00000000  0006fb8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0007ce64  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0007ce98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00081835  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00081838  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008183b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008183c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008183d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00081841  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00081845  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00081849  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00081852  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0008185b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00081864  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000030  00000000  00000000  0008186f  2**0
                  CONTENTS, READONLY
 29 .jdi          00004cc6  00000000  00000000  0008189f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00047750  00000000  00000000  00086565  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b4 l    d  .text	00000000 .text
08017004 l    d  .rodata	00000000 .rodata
08017860 l    d  .rwdata	00000000 .rwdata
0801ae18 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
080001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 ppu.c
00000000 l    df *ABS*	00000000 sdcard.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
08004e50 l     F .text	00000058 std
08004f5c l     F .text	00000008 __fp_lock
08004f64 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08017860 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
08005f28 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08006174 l     F .text	00000058 __sprint_r
08017556 l     O .rodata	00000010 blanks.3452
08017546 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
080082c0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08019310 l     O .rwdata	00000004 charset
08017588 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
080176d0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0800d254 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800e380 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0800ebf4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800ec54 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800ed54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800ee74 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800ef54 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800f0b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800f2dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801932c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800f578 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0801821c l     O .rwdata	00001060 jtag_uart
0801927c l     O .rwdata	00000054 Pixel_Buffer_DMA
080192d0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0800f854 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800fa94 l     F .text	00000228 altera_avalon_jtag_uart_irq
0800fcbc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08015f14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080163cc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08016508 l     F .text	000000dc alt_file_locked
0801676c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08016dec l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
08016fa0 l     F .text	00000040 alt_sim_halt
0801ae74 g     O .bss	00000004 aux_status_register
08005c8c g     F .text	0000001c putchar
08000200 g     F .text	000000b0 prg_test
0800ae78 g     F .text	00000094 _mprec_log10
08003350 g     F .text	00000048 cpu_read
0800af64 g     F .text	00000088 __any_on
0800c658 g     F .text	00000070 _isatty_r
080176a8 g     O .rodata	00000028 __mprec_tinytens
08003504 g     F .text	000000c8 cpu_join_flags
080045b0 g     F .text	00000058 ppu_render
0800f110 g     F .text	0000006c alt_main
08010fa4 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
08005cb0 g     F .text	000000a0 _puts_r
0801ae18 g     O .bss	00000004 CPU
0801b43c g     O .bss	00000100 alt_irq
0800a780 g     F .text	00000078 _lseek_r
08003a2c g     F .text	00000080 AND
0801933c g       *ABS*	00000000 __flash_rwdata_start
0800dd74 g     F .text	00000088 __eqdf2
08011c54 g     F .text	000001b0 Check_for_Master_Boot_Record
0801b6cc g       *ABS*	00000000 __alt_heap_start
08015afc g     F .text	000001cc alt_up_sd_card_fclose
08005c14 g     F .text	00000044 printf
08005fbc g     F .text	00000068 __sseek
08004eb8 g     F .text	000000a4 __sinit
0800c3e4 g     F .text	00000130 __swbuf_r
08003b54 g     F .text	00000088 CMP
080038cc g     F .text	0000002c IMM
0800a6e0 g     F .text	00000084 _setlocale_r
08004fb8 g     F .text	00000068 __sfmoreglue
0800f19c g     F .text	00000020 __malloc_unlock
08004228 g     F .text	000000e8 SBC
08003978 g     F .text	000000b4 ADC
0801ae98 g     O .bss	00000004 current_sector_modified
08003aac g     F .text	000000a8 ASL
0801ae1c g     O .bss	00000001 trainer
0800a98c g     F .text	000000e0 memmove
08004fa8 g     F .text	00000010 _cleanup
0800afec g     F .text	000000bc _Balloc
08003104 g     F .text	00000088 cpu_init
080146bc g     F .text	000000c8 alt_up_sd_card_is_Present
0801196c g     F .text	00000050 Save_Modified_Sector
08010378 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0800de84 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
08010338 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08000000 g     F .entry	0000001c __reset
0801ae90 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800c5e4 g     F .text	00000074 _fstat_r
0801ae50 g     O .bss	00000004 errno
08003e00 g     F .text	00000078 LDA
0801ae64 g     O .bss	00000004 alt_argv
080212fc g       *ABS*	00000000 _gp
08014c7c g     F .text	000003a8 alt_up_sd_card_fopen
080147f8 g     F .text	000000d4 alt_up_sd_card_find_first
0801ae84 g     O .bss	00000004 command_argument_register
08010518 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
08004608 g     F .text	00000410 load_rom
08004e2c g     F .text	00000024 fgets
0801ae1d g     O .bss	00000001 cpu_sram_batt
0801809c g     O .rwdata	00000180 alt_fd_list
08005ca8 g     F .text	00000008 _putchar_r
08013eec g     F .text	0000012c find_first_empty_record_in_root_directory
0801603c g     F .text	00000094 alt_find_dev
08005adc g     F .text	000000a0 memcpy
08004f9c g     F .text	0000000c _cleanup_r
0800e01c g     F .text	000000f8 __floatsidf
08016490 g     F .text	00000078 alt_io_redirect
0800df94 g     F .text	00000088 __ltdf2
08017004 g       *ABS*	00000000 __DTOR_END__
08005d50 g     F .text	00000014 puts
080038f8 g     F .text	00000034 ZP
08013afc g     F .text	000001a4 find_first_empty_cluster
0800adc8 g     F .text	000000b0 __ratio
080145f8 g     F .text	000000c4 alt_up_sd_card_open_dev
080105c8 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0800fed4 g     F .text	00000224 altera_avalon_jtag_uart_read
080052a4 g     F .text	00000014 malloc
08005c58 g     F .text	00000034 _printf_r
08004508 g     F .text	000000a8 ppu_exec
0800e4bc g     F .text	00000008 __udivsi3
0800edb4 g     F .text	000000c0 isatty
080175b8 g     O .rodata	000000c8 __mprec_tens
08010c54 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0800a6bc g     F .text	00000008 __locale_charset
0801ae1e g     O .bss	00000001 prg_size
08016b68 g     F .text	00000090 alt_icache_flush
0801ae44 g     O .bss	00000004 __malloc_top_pad
0801930c g     O .rwdata	00000004 __mb_cur_max
0800a6c4 g     F .text	0000000c _localeconv_r
0800b6e4 g     F .text	0000003c __i2b
0800a220 g     F .text	0000049c __sfvwrite_r
08012dd8 g     F .text	000000c0 get_dir_divider_location
08005f44 g     F .text	00000070 _sbrk_r
08011438 g     F .text	000000d0 helper_plot_pixel
08003828 g     F .text	000000a4 INDY
08012a78 g     F .text	000000d0 filename_to_upper_case
08015024 g     F .text	00000090 alt_up_sd_card_set_attributes
08003c64 g     F .text	00000088 CPY
08011e04 g     F .text	00000284 Read_File_Record_At_Offset
0800bc4c g     F .text	00000078 _read_r
08018068 g     O .rwdata	0000000c __lc_ctype
08019324 g     O .rwdata	00000004 alt_max_fd
0800e8f8 g     F .text	00000138 __unpack_d
08013698 g     F .text	00000464 find_file_in_directory
08009a8c g     F .text	00000110 _fclose_r
0801ae20 g     O .bss	00000002 t2
08009dac g     F .text	00000034 fflush
0801ae48 g     O .bss	00000004 __malloc_max_sbrked_mem
08014784 g     F .text	00000074 alt_up_sd_card_is_FAT16
0800d6e4 g     F .text	00000074 __adddf3
0800aca8 g     F .text	00000120 __b2d
080105fc g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0800cca4 g     F .text	000005b0 __umoddi3
0800efc0 g     F .text	000000f0 lseek
08019300 g     O .rwdata	00000004 _global_impure_ptr
08013184 g     F .text	00000514 get_home_directory_cluster_for_file
0800bcc4 g     F .text	000005f4 _realloc_r
0801b6cc g       *ABS*	00000000 __bss_end
080162d4 g     F .text	000000f8 alt_iic_isr_register
08010760 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
08016864 g     F .text	0000010c alt_tick
0800c6c8 g     F .text	000005dc __udivdi3
08017680 g     O .rodata	00000028 __mprec_bigtens
0800b940 g     F .text	00000120 __s2b
0800e1ec g     F .text	00000194 __floatunsidf
0800abc8 g     F .text	00000060 __mcmp
0801ae9c g     O .bss	00000004 current_sector_index
08004f84 g     F .text	00000018 __fp_lock_all
0801628c g     F .text	00000048 alt_ic_irq_enabled
08003bdc g     F .text	00000088 CPX
080167cc g     F .text	00000098 alt_alarm_stop
08011b70 g     F .text	000000e4 mark_cluster
0801aea0 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000c8 alt_irq_handler
08018074 g     O .rwdata	00000028 alt_dev_null
08004a18 g     F .text	000002cc vga_test
08014018 g     F .text	000001b8 convert_filename_to_name_extension
08015e1c g     F .text	00000044 alt_dcache_flush_all
0800aa94 g     F .text	00000070 __hi0bits
0801ae70 g     O .bss	00000004 is_sd_card_formated_as_FAT16
08011374 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0801ae24 g     O .bss	00000004 file_name
0800e114 g     F .text	000000d8 __fixdfsi
08013ca0 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0801933c g       *ABS*	00000000 __ram_rwdata_end
0801931c g     O .rwdata	00000008 alt_dev_list
0800f458 g     F .text	00000120 write
0800bb64 g     F .text	000000e8 _putc_r
0801ae94 g     O .bss	00000004 device_pointer
08011508 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
08017860 g       *ABS*	00000000 __ram_rodata_end
0800ec80 g     F .text	000000d4 fstat
0800364c g     F .text	0000005c ABS
0800b820 g     F .text	00000120 __pow5mult
0801ae54 g     O .bss	00000004 __nlocale_changed
0800e4c4 g     F .text	00000008 __umodsi3
0801b6cc g       *ABS*	00000000 end
08002d40 g     F .text	000000f4 cpu_reset
0800f9d4 g     F .text	000000c0 altera_avalon_jtag_uart_init
08017000 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800e564 g     F .text	00000080 __clzsi2
080100f8 g     F .text	00000240 altera_avalon_jtag_uart_write
08002e34 g     F .text	0000016c cpu_nmi
08004ea8 g     F .text	00000004 __sfp_lock_acquire
080059f8 g     F .text	000000e4 memchr
080061cc g     F .text	00001eac ___vfprintf_internal_r
08009f0c g     F .text	00000314 _free_r
08016df0 g     F .text	000001b0 __call_exitprocs
08003788 g     F .text	000000a0 XIND
0801ae58 g     O .bss	00000004 __mlocale_changed
08019308 g     O .rwdata	00000004 __malloc_sbrk_base
080001b4 g     F .text	0000004c _start
0801aea4 g     O .bss	00000004 _alt_tick_rate
0800b3b0 g     F .text	0000014c __lshift
0801aea8 g     O .bss	00000004 _alt_nticks
0800f1bc g     F .text	00000120 read
0800f60c g     F .text	00000248 alt_sys_init
08003454 g     F .text	000000b0 cpu_mem_write
08016cb8 g     F .text	00000134 __register_exitproc
0801ae28 g     O .bss	00000001 mirroring
0800b4fc g     F .text	000001e8 __multiply
0800fd6c g     F .text	00000074 altera_avalon_jtag_uart_close
08017860 g       *ABS*	00000000 __ram_rwdata_start
08017004 g       *ABS*	00000000 __ram_rodata_start
0801aeac g     O .bss	00000028 __malloc_current_mallinfo
0800b0a8 g     F .text	0000017c __d2b
0801ae6c g     O .bss	00000004 initialized
08003718 g     F .text	00000070 ABSY
0800318c g     F .text	000001c4 cpu_status
0800f88c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08016ab0 g     F .text	000000b8 alt_get_fd
0801aed4 g     O .bss	00000014 search_data
0800ea30 g     F .text	000000c8 __fpcmp_parts_d
08008250 g     F .text	00000070 _close_r
08016c44 g     F .text	00000074 memcmp
0800f93c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0801b6cc g       *ABS*	00000000 __alt_stack_base
0800f984 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08008114 g     F .text	0000013c __swsetup_r
0800db1c g     F .text	00000258 __divdf3
08005020 g     F .text	000000f0 __sfp
0801aee8 g     O .bss	00000054 boot_sector_data
0800af0c g     F .text	00000058 __copybits
08017c60 g     O .rwdata	00000408 __malloc_av_
08004eb4 g     F .text	00000004 __sinit_lock_release
0801ae29 g     O .bss	00000001 tv_system
0800d758 g     F .text	000003c4 __muldf3
080060a0 g     F .text	00000060 __sread
08016990 g     F .text	00000120 alt_find_file
08015e60 g     F .text	000000b4 alt_dev_llist_insert
0800f17c g     F .text	00000020 __malloc_lock
0800f39c g     F .text	000000bc sbrk
08009bb0 g     F .text	000001fc _fflush_r
0800c530 g     F .text	000000b4 _calloc_r
08003eec g     F .text	00000074 LDY
0801ae2a g     O .bss	00000002 t1
0801ae18 g       *ABS*	00000000 __bss_start
08005b7c g     F .text	00000098 memset
08004310 g     F .text	00000110 main
0801ae68 g     O .bss	00000004 alt_envp
0801ae4c g     O .bss	00000004 __malloc_max_total_mem
08010570 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0800f8e4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
08003e78 g     F .text	00000074 LDX
0800c514 g     F .text	0000001c __swbuf
0801ae2c g     O .bss	00000004 PPU
080150b4 g     F .text	0000008c alt_up_sd_card_get_attributes
080118a4 g     F .text	000000c8 Write_Sector_Data
080154dc g     F .text	00000620 alt_up_sd_card_write
08005fb4 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08009b9c g     F .text	00000014 fclose
0801b53c g     O .bss	00000190 _atexit0
080084d8 g     F .text	000015b4 _dtoa_r
080052b8 g     F .text	00000740 _malloc_r
08019328 g     O .rwdata	00000004 alt_errno
0801ae30 g     O .bss	00000001 mapper
080051d8 g     F .text	000000b8 _fwalk
08004ce4 g     F .text	00000148 _fgets_r
0800ba60 g     F .text	00000104 putc
0800e3fc g     F .text	00000060 __divsi3
080176dc g     O .rodata	00000014 __thenan_df
08009de0 g     F .text	0000012c _malloc_trim_r
08017004 g       *ABS*	00000000 __CTOR_END__
0801ae78 g     O .bss	00000004 status_register
0800c328 g     F .text	000000bc strcmp
0801ae80 g     O .bss	00000004 command_register
08003cec g     F .text	00000088 DEC
08017004 g       *ABS*	00000000 __flash_rodata_start
08017004 g       *ABS*	00000000 __DTOR_LIST__
0800ddfc g     F .text	00000088 __nedf2
0800f5d8 g     F .text	00000034 alt_irq_init
0800f33c g     F .text	00000060 alt_release_fd
08011ab8 g     F .text	000000b8 get_cluster_flag
08003fe8 g     F .text	00000080 ORA
080176f0 g     O .rodata	00000100 __clz_tab
08012088 g     F .text	000002b8 Write_File_Record_At_Offset
0801ae5c g     O .bss	00000004 _PathLocale
08016bf8 g     F .text	00000014 atexit
0800809c g     F .text	00000078 _write_r
0800a764 g     F .text	0000001c setlocale
08003f60 g     F .text	00000088 LSR
080035cc g     F .text	00000080 cpu_split_flags
08012340 g     F .text	00000640 Check_for_DOS_FAT
080141d0 g     F .text	000002d4 create_file
080192fc g     O .rwdata	00000004 _impure_ptr
0801ae7c g     O .bss	00000004 CSD_register_w0
0801ae60 g     O .bss	00000004 alt_argc
08015fd8 g     F .text	00000064 _do_dtors
08005d64 g     F .text	000001c4 __srefill_r
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08004068 g     F .text	000000d4 ROL
08000020 g       .exceptions	00000000 alt_irq_entry
0800ac28 g     F .text	00000080 __ulp
0800c2b8 g     F .text	00000040 __isinfd
08004f6c g     F .text	00000018 __fp_unlock_all
0801ae31 g     O .bss	00000001 chr_size
08019314 g     O .rwdata	00000008 alt_fs_list
08012b48 g     F .text	00000290 check_file_name_for_FAT16_compliance
080002b0 g     F .text	00002a90 cpu_exec
0801ae88 g     O .bss	00000004 buffer_memory
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800a6d0 g     F .text	00000010 localeconv
0801ae34 g     O .bss	00000004 pix_buffer
08016100 g     F .text	00000050 alt_ic_isr_register
0801ae8c g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
08004420 g     F .text	000000e8 ppu_init
0801933c g       *ABS*	00000000 _edata
0801b6cc g       *ABS*	00000000 _end
0801ae38 g     O .bss	00000001 prg_ram_size
0801af3c g     O .bss	00000500 active_files
080001b4 g       *ABS*	00000000 __ram_exceptions_end
080144a4 g     F .text	00000154 copy_file_record_name_to_string
0800fde0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08012980 g     F .text	000000f8 Look_for_FAT16
080161ec g     F .text	000000a0 alt_ic_irq_disable
08006024 g     F .text	0000007c __swrite
08019304 g     O .rwdata	00000004 __malloc_trim_threshold
08016970 g     F .text	00000020 altera_nios2_qsys_irq_init
08016c0c g     F .text	00000038 exit
080148cc g     F .text	000003b0 alt_up_sd_card_find_next
08005110 g     F .text	000000c8 _fwalk_reent
0800b224 g     F .text	0000018c __mdiff
0800e45c g     F .text	00000060 __modsi3
080119bc g     F .text	000000fc Read_Sector_Data
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004eac g     F .text	00000004 __sfp_lock_release
0800392c g     F .text	0000004c ZPX
08016fe0 g     F .text	00000020 _exit
0800c2f8 g     F .text	00000030 __isnand
08015cc8 g     F .text	00000154 alt_alarm_start
0800e4cc g     F .text	00000098 __muldi3
08015140 g     F .text	0000039c alt_up_sd_card_read
0800a7f8 g     F .text	00000194 __smakebuf_r
08006100 g     F .text	00000074 strlen
08003d74 g     F .text	0000008c INC
080165e4 g     F .text	00000188 open
0800df0c g     F .text	00000088 __gedf2
08002fa0 g     F .text	00000164 cpu_irq
080036a8 g     F .text	00000070 ABSX
080160d0 g     F .text	00000030 alt_icache_flush_all
08019330 g     O .rwdata	00000004 alt_priority_mask
08016150 g     F .text	0000009c alt_ic_irq_enable
08008078 g     F .text	00000024 __vfprintf_internal
0800413c g     F .text	000000ec ROR
0800d664 g     F .text	00000080 __subdf3
0801ae3c g     O .bss	00000004 CHR_ROM
0800ab04 g     F .text	000000c4 __lo0bits
08019334 g     O .rwdata	00000008 alt_alarm_list
08015f74 g     F .text	00000064 _do_ctors
0800eaf8 g     F .text	000000fc close
0801ae40 g     O .bss	00000001 cpu_sram
0800eed4 g     F .text	00000080 alt_load
0800e5e4 g     F .text	00000314 __pack_d
08012e98 g     F .text	000002ec match_file_record_to_name_ext
08005290 g     F .text	00000014 free
08004eb0 g     F .text	00000004 __sinit_lock_acquire
08003398 g     F .text	000000bc cpu_mem_read
0800b720 g     F .text	00000100 __multadd
0800aa6c g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406d14 	ori	at,at,436
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__reset-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80000fc:	0005313a 	rdctl	r2,ipending
 8000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000110:	00800044 	movi	r2,1
 8000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8000118:	e0ffff17 	ldw	r3,-4(fp)
 800011c:	e0bffe17 	ldw	r2,-8(fp)
 8000120:	1884703a 	and	r2,r3,r2
 8000124:	1005003a 	cmpeq	r2,r2,zero
 8000128:	1000161e 	bne	r2,zero,8000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	e0bffd17 	ldw	r2,-12(fp)
 8000130:	00c200b4 	movhi	r3,2050
 8000134:	18ed0f04 	addi	r3,r3,-19396
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	11400017 	ldw	r5,0(r2)
 8000144:	e0bffd17 	ldw	r2,-12(fp)
 8000148:	00c200b4 	movhi	r3,2050
 800014c:	18ed0f04 	addi	r3,r3,-19396
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	10c5883a 	add	r2,r2,r3
 8000158:	10800104 	addi	r2,r2,4
 800015c:	11000017 	ldw	r4,0(r2)
 8000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000164:	0005313a 	rdctl	r2,ipending
 8000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	1004c03a 	cmpne	r2,r2,zero
 800017c:	103fe31e 	bne	r2,zero,800010c <alt_irq_handler+0x20>
 8000180:	00000706 	br	80001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000184:	e0bffe17 	ldw	r2,-8(fp)
 8000188:	1085883a 	add	r2,r2,r2
 800018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8000190:	e0bffd17 	ldw	r2,-12(fp)
 8000194:	10800044 	addi	r2,r2,1
 8000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800019c:	003fde06 	br	8000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a0:	e037883a 	mov	sp,fp
 80001a4:	dfc00117 	ldw	ra,4(sp)
 80001a8:	df000017 	ldw	fp,0(sp)
 80001ac:	dec00204 	addi	sp,sp,8
 80001b0:	f800283a 	ret

Disassembly of section .text:

080001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 80001b4:	00880014 	movui	r2,8192
#endif

0:
    initd 0(r2)
 80001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 80001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 80001c0:	00bffd16 	blt	zero,r2,80001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001c4:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 80001cc:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001d0:	d684bf14 	ori	gp,gp,4860
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001d4:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d8:	10ab8614 	ori	r2,r2,44568

    movhi r3, %hi(__bss_end)
 80001dc:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001e0:	18edb314 	ori	r3,r3,46796

    beq r2, r3, 1f
 80001e4:	10c00326 	beq	r2,r3,80001f4 <_start+0x40>

0:
    stw zero, (r2)
 80001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001f0:	10fffd36 	bltu	r2,r3,80001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001f4:	800eed40 	call	800eed4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f8:	800f1100 	call	800f110 <alt_main>

080001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001fc:	003fff06 	br	80001fc <alt_after_alt_main>

08000200 <prg_test>:
#include "sdcard.h"



void prg_test()
{
 8000200:	defffc04 	addi	sp,sp,-16
 8000204:	dfc00315 	stw	ra,12(sp)
 8000208:	df000215 	stw	fp,8(sp)
 800020c:	df000204 	addi	fp,sp,8
	cpu_status();
 8000210:	800318c0 	call	800318c <cpu_status>
	int i = 0;
 8000214:	e03fff15 	stw	zero,-4(fp)
	int c = 0;
 8000218:	e03ffe15 	stw	zero,-8(fp)
	for(i = 0; i < 0x8000; ++i)
 800021c:	e03fff15 	stw	zero,-4(fp)
 8000220:	00001806 	br	8000284 <prg_test+0x84>
	{
	printf("%x ", CPU->MEM[PRG + i ]);
 8000224:	d0a6c717 	ldw	r2,-25828(gp)
 8000228:	10c00617 	ldw	r3,24(r2)
 800022c:	e0bfff17 	ldw	r2,-4(fp)
 8000230:	1887883a 	add	r3,r3,r2
 8000234:	00a00014 	movui	r2,32768
 8000238:	1885883a 	add	r2,r3,r2
 800023c:	10800003 	ldbu	r2,0(r2)
 8000240:	11403fcc 	andi	r5,r2,255
 8000244:	01020074 	movhi	r4,2049
 8000248:	211c0104 	addi	r4,r4,28676
 800024c:	8005c140 	call	8005c14 <printf>
	if(c >= 50)
 8000250:	e0bffe17 	ldw	r2,-8(fp)
 8000254:	10800c90 	cmplti	r2,r2,50
 8000258:	1000041e 	bne	r2,zero,800026c <prg_test+0x6c>
	{
		printf("\n");
 800025c:	01000284 	movi	r4,10
 8000260:	8005c8c0 	call	8005c8c <putchar>
		c = 0;
 8000264:	e03ffe15 	stw	zero,-8(fp)
 8000268:	00000306 	br	8000278 <prg_test+0x78>
	}
	else
		++c;
 800026c:	e0bffe17 	ldw	r2,-8(fp)
 8000270:	10800044 	addi	r2,r2,1
 8000274:	e0bffe15 	stw	r2,-8(fp)
void prg_test()
{
	cpu_status();
	int i = 0;
	int c = 0;
	for(i = 0; i < 0x8000; ++i)
 8000278:	e0bfff17 	ldw	r2,-4(fp)
 800027c:	10800044 	addi	r2,r2,1
 8000280:	e0bfff15 	stw	r2,-4(fp)
 8000284:	e0ffff17 	ldw	r3,-4(fp)
 8000288:	009fffc4 	movi	r2,32767
 800028c:	10ffe50e 	bge	r2,r3,8000224 <prg_test+0x24>
		c = 0;
	}
	else
		++c;
	}
	printf("\n\n");
 8000290:	01020074 	movhi	r4,2049
 8000294:	211c0204 	addi	r4,r4,28680
 8000298:	8005d500 	call	8005d50 <puts>

	return;
}
 800029c:	e037883a 	mov	sp,fp
 80002a0:	dfc00117 	ldw	ra,4(sp)
 80002a4:	df000017 	ldw	fp,0(sp)
 80002a8:	dec00204 	addi	sp,sp,8
 80002ac:	f800283a 	ret

080002b0 <cpu_exec>:
   Function: decode_instruction( byte )
   Description: Reads in byte to decode into corresponding
	  	instruction with addressing mode.
*/
void cpu_exec()
{
 80002b0:	defff804 	addi	sp,sp,-32
 80002b4:	dfc00715 	stw	ra,28(sp)
 80002b8:	df000615 	stw	fp,24(sp)
 80002bc:	dc400515 	stw	r17,20(sp)
 80002c0:	dc000415 	stw	r16,16(sp)
 80002c4:	df000404 	addi	fp,sp,16
  word temp2;
  word temp_addr;
  byte operand;

  // Execute OPCODE. Note: BCD-related actions are ignored.
  switch(CPU->IR)
 80002c8:	d0a6c717 	ldw	r2,-25828(gp)
 80002cc:	10800443 	ldbu	r2,17(r2)
 80002d0:	10803fcc 	andi	r2,r2,255
 80002d4:	e0bfff15 	stw	r2,-4(fp)
 80002d8:	e0ffff17 	ldw	r3,-4(fp)
 80002dc:	18803fe8 	cmpgeui	r2,r3,255
 80002e0:	100a8d1e 	bne	r2,zero,8002d18 <cpu_exec+0x2a68>
 80002e4:	e13fff17 	ldw	r4,-4(fp)
 80002e8:	e13fff17 	ldw	r4,-4(fp)
 80002ec:	2105883a 	add	r2,r4,r4
 80002f0:	1087883a 	add	r3,r2,r2
 80002f4:	00820034 	movhi	r2,2048
 80002f8:	1080c204 	addi	r2,r2,776
 80002fc:	1885883a 	add	r2,r3,r2
 8000300:	10800017 	ldw	r2,0(r2)
 8000304:	1000683a 	jmp	r2
 8000308:	08000dcc 	andi	zero,at,55
 800030c:	08001ee4 	muli	zero,at,123
 8000310:	08002d18 	cmpnei	zero,at,180
 8000314:	08002d18 	cmpnei	zero,at,180
 8000318:	08002d18 	cmpnei	zero,at,180
 800031c:	08001f04 	addi	zero,at,124
 8000320:	080009c8 	cmpgei	zero,at,39
 8000324:	08002d18 	cmpnei	zero,at,180
 8000328:	08001f94 	ori	zero,at,126
 800032c:	08001ea8 	cmpgeui	zero,at,122
 8000330:	080009ac 	andhi	zero,at,38
 8000334:	08002d18 	cmpnei	zero,at,180
 8000338:	08002d18 	cmpnei	zero,at,180
 800033c:	08001e48 	cmpgei	zero,at,121
 8000340:	08000904 	addi	zero,at,36
 8000344:	08002d18 	cmpnei	zero,at,180
 8000348:	08000d3c 	xorhi	zero,at,52
 800034c:	08001ec4 	addi	zero,at,123
 8000350:	08002d18 	cmpnei	zero,at,180
 8000354:	08002d18 	cmpnei	zero,at,180
 8000358:	08002d18 	cmpnei	zero,at,180
 800035c:	08001f24 	muli	zero,at,124
 8000360:	08000a10 	cmplti	zero,at,40
 8000364:	08002d18 	cmpnei	zero,at,180
 8000368:	08001010 	cmplti	zero,at,64
 800036c:	08001e88 	cmpgei	zero,at,122
 8000370:	08002d18 	cmpnei	zero,at,180
 8000374:	08002d18 	cmpnei	zero,at,180
 8000378:	08002d18 	cmpnei	zero,at,180
 800037c:	08001e68 	cmpgeui	zero,at,121
 8000380:	08000950 	cmplti	zero,at,37
 8000384:	08002d18 	cmpnei	zero,at,180
 8000388:	0800199c 	xori	zero,at,102
 800038c:	080008a4 	muli	zero,at,34
 8000390:	08002d18 	cmpnei	zero,at,180
 8000394:	08002d18 	cmpnei	zero,at,180
 8000398:	080010a0 	cmpeqi	zero,at,66
 800039c:	080008c4 	addi	zero,at,35
 80003a0:	08002178 	rdprs	zero,at,133
 80003a4:	08002d18 	cmpnei	zero,at,180
 80003a8:	08002064 	muli	zero,at,129
 80003ac:	08000864 	muli	zero,at,33
 80003b0:	0800215c 	xori	zero,at,133
 80003b4:	08002d18 	cmpnei	zero,at,180
 80003b8:	08001114 	ori	zero,at,68
 80003bc:	08000804 	addi	zero,at,32
 80003c0:	080020b0 	cmpltui	zero,at,130
 80003c4:	08002d18 	cmpnei	zero,at,180
 80003c8:	08000c1c 	xori	zero,at,48
 80003cc:	08000884 	addi	zero,at,34
 80003d0:	08002d18 	cmpnei	zero,at,180
 80003d4:	08002d18 	cmpnei	zero,at,180
 80003d8:	08002d18 	cmpnei	zero,at,180
 80003dc:	080008e4 	muli	zero,at,35
 80003e0:	080021a0 	cmpeqi	zero,at,134
 80003e4:	08002d18 	cmpnei	zero,at,180
 80003e8:	080025b0 	cmpltui	zero,at,150
 80003ec:	08000844 	addi	zero,at,33
 80003f0:	08002d18 	cmpnei	zero,at,180
 80003f4:	08002d18 	cmpnei	zero,at,180
 80003f8:	08002d18 	cmpnei	zero,at,180
 80003fc:	08000824 	muli	zero,at,32
 8000400:	080020fc 	xorhi	zero,at,131
 8000404:	08002d18 	cmpnei	zero,at,180
 8000408:	08002314 	ori	zero,at,140
 800040c:	0800164c 	andi	zero,at,89
 8000410:	08002d18 	cmpnei	zero,at,180
 8000414:	08002d18 	cmpnei	zero,at,180
 8000418:	08002d18 	cmpnei	zero,at,180
 800041c:	08001680 	call	800168 <__reset-0x77ffe98>
 8000420:	08001dc8 	cmpgei	zero,at,119
 8000424:	08002d18 	cmpnei	zero,at,180
 8000428:	08001f44 	addi	zero,at,125
 800042c:	080015e4 	muli	zero,at,87
 8000430:	08001dac 	andhi	zero,at,118
 8000434:	08002d18 	cmpnei	zero,at,180
 8000438:	080018f8 	rdprs	zero,at,99
 800043c:	08001548 	cmpgei	zero,at,85
 8000440:	08001d00 	call	8001d0 <__reset-0x77ffe30>
 8000444:	08002d18 	cmpnei	zero,at,180
 8000448:	08000ef0 	cmpltui	zero,at,59
 800044c:	08001618 	cmpnei	zero,at,88
 8000450:	08002d18 	cmpnei	zero,at,180
 8000454:	08002d18 	cmpnei	zero,at,180
 8000458:	08002d18 	cmpnei	zero,at,180
 800045c:	080016f4 	orhi	zero,at,91
 8000460:	08001df0 	cmpltui	zero,at,119
 8000464:	08002d18 	cmpnei	zero,at,180
 8000468:	08001058 	cmpnei	zero,at,65
 800046c:	080015b0 	cmpltui	zero,at,86
 8000470:	08002d18 	cmpnei	zero,at,180
 8000474:	08002d18 	cmpnei	zero,at,180
 8000478:	08002d18 	cmpnei	zero,at,180
 800047c:	0800157c 	xorhi	zero,at,85
 8000480:	08001d4c 	andi	zero,at,117
 8000484:	08002d18 	cmpnei	zero,at,180
 8000488:	080023f4 	orhi	zero,at,143
 800048c:	080007a4 	muli	zero,at,30
 8000490:	08002d18 	cmpnei	zero,at,180
 8000494:	08002d18 	cmpnei	zero,at,180
 8000498:	08002d18 	cmpnei	zero,at,180
 800049c:	080007c4 	addi	zero,at,31
 80004a0:	080022b0 	cmpltui	zero,at,138
 80004a4:	08002d18 	cmpnei	zero,at,180
 80004a8:	08001fe4 	muli	zero,at,127
 80004ac:	08000764 	muli	zero,at,29
 80004b0:	08002288 	cmpgei	zero,at,138
 80004b4:	08002d18 	cmpnei	zero,at,180
 80004b8:	08001944 	addi	zero,at,101
 80004bc:	08000704 	addi	zero,at,28
 80004c0:	080021dc 	xori	zero,at,135
 80004c4:	08002d18 	cmpnei	zero,at,180
 80004c8:	08000f80 	call	8000f8 <__reset-0x77fff08>
 80004cc:	08000784 	addi	zero,at,30
 80004d0:	08002d18 	cmpnei	zero,at,180
 80004d4:	08002d18 	cmpnei	zero,at,180
 80004d8:	08002d18 	cmpnei	zero,at,180
 80004dc:	080007e4 	muli	zero,at,31
 80004e0:	080022d8 	cmpnei	zero,at,139
 80004e4:	08002d18 	cmpnei	zero,at,180
 80004e8:	08002600 	call	800260 <__reset-0x77ffda0>
 80004ec:	08000744 	addi	zero,at,29
 80004f0:	08002d18 	cmpnei	zero,at,180
 80004f4:	08002d18 	cmpnei	zero,at,180
 80004f8:	08002d18 	cmpnei	zero,at,180
 80004fc:	08000724 	muli	zero,at,28
 8000500:	08002228 	cmpgeui	zero,at,136
 8000504:	08002d18 	cmpnei	zero,at,180
 8000508:	08002d18 	cmpnei	zero,at,180
 800050c:	080027f8 	rdprs	zero,at,159
 8000510:	08002d18 	cmpnei	zero,at,180
 8000514:	08002d18 	cmpnei	zero,at,180
 8000518:	08002a80 	call	8002a8 <__reset-0x77ffd58>
 800051c:	08002878 	rdprs	zero,at,161
 8000520:	0800299c 	xori	zero,at,166
 8000524:	08002d18 	cmpnei	zero,at,180
 8000528:	080014e8 	cmpgeui	zero,at,83
 800052c:	08002d18 	cmpnei	zero,at,180
 8000530:	08002c2c 	andhi	zero,at,176
 8000534:	08002d18 	cmpnei	zero,at,180
 8000538:	08002a28 	cmpgeui	zero,at,168
 800053c:	08002628 	cmpgeui	zero,at,152
 8000540:	08002944 	addi	zero,at,165
 8000544:	08002d18 	cmpnei	zero,at,180
 8000548:	08000a6c 	andhi	zero,at,41
 800054c:	08002784 	addi	zero,at,158
 8000550:	08002d18 	cmpnei	zero,at,180
 8000554:	08002d18 	cmpnei	zero,at,180
 8000558:	08002abc 	xorhi	zero,at,170
 800055c:	080028d4 	ori	zero,at,163
 8000560:	080029d8 	cmpnei	zero,at,167
 8000564:	08002d18 	cmpnei	zero,at,180
 8000568:	08002cb8 	rdprs	zero,at,178
 800056c:	08002718 	cmpnei	zero,at,156
 8000570:	08002c8c 	andi	zero,at,178
 8000574:	08002d18 	cmpnei	zero,at,180
 8000578:	08002d18 	cmpnei	zero,at,180
 800057c:	080026ac 	andhi	zero,at,154
 8000580:	08002d18 	cmpnei	zero,at,180
 8000584:	08002d18 	cmpnei	zero,at,180
 8000588:	08001ca4 	muli	zero,at,114
 800058c:	08001b1c 	xori	zero,at,108
 8000590:	08001bbc 	xorhi	zero,at,110
 8000594:	08002d18 	cmpnei	zero,at,180
 8000598:	08001cc0 	call	8001cc <__reset-0x77ffe34>
 800059c:	08001b3c 	xorhi	zero,at,108
 80005a0:	08001bfc 	xorhi	zero,at,111
 80005a4:	08002d18 	cmpnei	zero,at,180
 80005a8:	08002b6c 	andhi	zero,at,173
 80005ac:	08001abc 	xorhi	zero,at,106
 80005b0:	08002b0c 	andi	zero,at,172
 80005b4:	08002d18 	cmpnei	zero,at,180
 80005b8:	08001c64 	muli	zero,at,113
 80005bc:	08001a5c 	xori	zero,at,105
 80005c0:	08001b7c 	xorhi	zero,at,109
 80005c4:	08002d18 	cmpnei	zero,at,180
 80005c8:	08000afc 	xorhi	zero,at,43
 80005cc:	08001afc 	xorhi	zero,at,107
 80005d0:	08002d18 	cmpnei	zero,at,180
 80005d4:	08002d18 	cmpnei	zero,at,180
 80005d8:	08001ce0 	cmpeqi	zero,at,115
 80005dc:	08001b5c 	xori	zero,at,109
 80005e0:	08001c1c 	xori	zero,at,112
 80005e4:	08002d18 	cmpnei	zero,at,180
 80005e8:	0800107c 	xorhi	zero,at,65
 80005ec:	08001a9c 	xori	zero,at,106
 80005f0:	08002bcc 	andi	zero,at,175
 80005f4:	08002d18 	cmpnei	zero,at,180
 80005f8:	08001c84 	addi	zero,at,114
 80005fc:	08001a7c 	xorhi	zero,at,105
 8000600:	08001b9c 	xori	zero,at,110
 8000604:	08002d18 	cmpnei	zero,at,180
 8000608:	08001338 	rdprs	zero,at,76
 800060c:	08001258 	cmpnei	zero,at,73
 8000610:	08002d18 	cmpnei	zero,at,180
 8000614:	08002d18 	cmpnei	zero,at,180
 8000618:	08001358 	cmpnei	zero,at,77
 800061c:	08001278 	rdprs	zero,at,73
 8000620:	08001424 	muli	zero,at,80
 8000624:	08002d18 	cmpnei	zero,at,180
 8000628:	08001898 	cmpnei	zero,at,98
 800062c:	08001218 	cmpnei	zero,at,72
 8000630:	08001488 	cmpgei	zero,at,82
 8000634:	08002d18 	cmpnei	zero,at,180
 8000638:	08001318 	cmpnei	zero,at,76
 800063c:	080011b8 	rdprs	zero,at,70
 8000640:	08001378 	rdprs	zero,at,77
 8000644:	08002d18 	cmpnei	zero,at,180
 8000648:	08000cac 	andhi	zero,at,50
 800064c:	08001238 	rdprs	zero,at,72
 8000650:	08002d18 	cmpnei	zero,at,180
 8000654:	08002d18 	cmpnei	zero,at,180
 8000658:	08002d18 	cmpnei	zero,at,180
 800065c:	08001298 	cmpnei	zero,at,74
 8000660:	0800144c 	andi	zero,at,81
 8000664:	08002d18 	cmpnei	zero,at,180
 8000668:	08001034 	orhi	zero,at,64
 800066c:	080011f8 	rdprs	zero,at,71
 8000670:	08002d18 	cmpnei	zero,at,180
 8000674:	08002d18 	cmpnei	zero,at,180
 8000678:	08002d18 	cmpnei	zero,at,180
 800067c:	080011d8 	cmpnei	zero,at,71
 8000680:	080013c4 	addi	zero,at,79
 8000684:	08002d18 	cmpnei	zero,at,180
 8000688:	080012d8 	cmpnei	zero,at,75
 800068c:	08002550 	cmplti	zero,at,149
 8000690:	08002d18 	cmpnei	zero,at,180
 8000694:	08002d18 	cmpnei	zero,at,180
 8000698:	080012f8 	rdprs	zero,at,75
 800069c:	08002570 	cmpltui	zero,at,149
 80006a0:	080017d4 	ori	zero,at,95
 80006a4:	08002d18 	cmpnei	zero,at,180
 80006a8:	08001838 	rdprs	zero,at,96
 80006ac:	080024f0 	cmpltui	zero,at,147
 80006b0:	08001e2c 	andhi	zero,at,120
 80006b4:	08002d18 	cmpnei	zero,at,180
 80006b8:	080012b8 	rdprs	zero,at,74
 80006bc:	08002490 	cmplti	zero,at,146
 80006c0:	08001728 	cmpgeui	zero,at,92
 80006c4:	08002d18 	cmpnei	zero,at,180
 80006c8:	08000b8c 	andi	zero,at,46
 80006cc:	08002530 	cmpltui	zero,at,148
 80006d0:	08002d18 	cmpnei	zero,at,180
 80006d4:	08002d18 	cmpnei	zero,at,180
 80006d8:	08002d18 	cmpnei	zero,at,180
 80006dc:	08002590 	cmplti	zero,at,150
 80006e0:	080017fc 	xorhi	zero,at,95
 80006e4:	08002d18 	cmpnei	zero,at,180
 80006e8:	080025d8 	cmpnei	zero,at,151
 80006ec:	080024d0 	cmplti	zero,at,147
 80006f0:	08002d18 	cmpnei	zero,at,180
 80006f4:	08002d18 	cmpnei	zero,at,180
 80006f8:	08002d18 	cmpnei	zero,at,180
 80006fc:	080024b0 	cmpltui	zero,at,146
 8000700:	08001774 	orhi	zero,at,93
  {
    // ###################### ADC #########################
  case 0x6D: // ABS
      operand = ABS(); ADC(operand); CPU->T = 2; break;
 8000704:	800364c0 	call	800364c <ABS>
 8000708:	e0bffd05 	stb	r2,-12(fp)
 800070c:	e13ffd03 	ldbu	r4,-12(fp)
 8000710:	80039780 	call	8003978 <ADC>
 8000714:	d0e6c717 	ldw	r3,-25828(gp)
 8000718:	00800084 	movi	r2,2
 800071c:	18800485 	stb	r2,18(r3)
 8000720:	00098006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x7D: // ABSX
      operand = ABSX(); ADC( operand ); CPU->T = 4; break;
 8000724:	80036a80 	call	80036a8 <ABSX>
 8000728:	e0bffd05 	stb	r2,-12(fp)
 800072c:	e13ffd03 	ldbu	r4,-12(fp)
 8000730:	80039780 	call	8003978 <ADC>
 8000734:	d0e6c717 	ldw	r3,-25828(gp)
 8000738:	00800104 	movi	r2,4
 800073c:	18800485 	stb	r2,18(r3)
 8000740:	00097806 	br	8002d24 <cpu_exec+0x2a74>
  case 0x79: // ABSY
      operand = ABSY(); ADC(operand); CPU->T = 4; break;
 8000744:	80037180 	call	8003718 <ABSY>
 8000748:	e0bffd05 	stb	r2,-12(fp)
 800074c:	e13ffd03 	ldbu	r4,-12(fp)
 8000750:	80039780 	call	8003978 <ADC>
 8000754:	d0e6c717 	ldw	r3,-25828(gp)
 8000758:	00800104 	movi	r2,4
 800075c:	18800485 	stb	r2,18(r3)
 8000760:	00097006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x69: // IMM
    operand = IMM(); ADC(operand); CPU->T = 2; break;
 8000764:	80038cc0 	call	80038cc <IMM>
 8000768:	e0bffd05 	stb	r2,-12(fp)
 800076c:	e13ffd03 	ldbu	r4,-12(fp)
 8000770:	80039780 	call	8003978 <ADC>
 8000774:	d0e6c717 	ldw	r3,-25828(gp)
 8000778:	00800084 	movi	r2,2
 800077c:	18800485 	stb	r2,18(r3)
 8000780:	00096806 	br	8002d24 <cpu_exec+0x2a74>
  case 0x71: // INDY
    operand = INDY(); ADC(operand);  CPU->T = 5; break;
 8000784:	80038280 	call	8003828 <INDY>
 8000788:	e0bffd05 	stb	r2,-12(fp)
 800078c:	e13ffd03 	ldbu	r4,-12(fp)
 8000790:	80039780 	call	8003978 <ADC>
 8000794:	d0e6c717 	ldw	r3,-25828(gp)
 8000798:	00800144 	movi	r2,5
 800079c:	18800485 	stb	r2,18(r3)
 80007a0:	00096006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x61: // XIND
    operand = XIND(); ADC(operand); CPU->T = 6; break;
 80007a4:	80037880 	call	8003788 <XIND>
 80007a8:	e0bffd05 	stb	r2,-12(fp)
 80007ac:	e13ffd03 	ldbu	r4,-12(fp)
 80007b0:	80039780 	call	8003978 <ADC>
 80007b4:	d0e6c717 	ldw	r3,-25828(gp)
 80007b8:	00800184 	movi	r2,6
 80007bc:	18800485 	stb	r2,18(r3)
 80007c0:	00095806 	br	8002d24 <cpu_exec+0x2a74>
  case 0x65: // ZP
    operand = ZP(); ADC(operand); CPU->T = 3; break;
 80007c4:	80038f80 	call	80038f8 <ZP>
 80007c8:	e0bffd05 	stb	r2,-12(fp)
 80007cc:	e13ffd03 	ldbu	r4,-12(fp)
 80007d0:	80039780 	call	8003978 <ADC>
 80007d4:	d0e6c717 	ldw	r3,-25828(gp)
 80007d8:	008000c4 	movi	r2,3
 80007dc:	18800485 	stb	r2,18(r3)
 80007e0:	00095006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x75: // ZPX
    operand = ZPX(); ADC(operand); CPU->T = 4; break;
 80007e4:	800392c0 	call	800392c <ZPX>
 80007e8:	e0bffd05 	stb	r2,-12(fp)
 80007ec:	e13ffd03 	ldbu	r4,-12(fp)
 80007f0:	80039780 	call	8003978 <ADC>
 80007f4:	d0e6c717 	ldw	r3,-25828(gp)
 80007f8:	00800104 	movi	r2,4
 80007fc:	18800485 	stb	r2,18(r3)
 8000800:	00094806 	br	8002d24 <cpu_exec+0x2a74>

    // ###################### AND #########################
  case 0x2D: // ABS
    operand = ABS(); AND(operand); CPU->T = 4; break;
 8000804:	800364c0 	call	800364c <ABS>
 8000808:	e0bffd05 	stb	r2,-12(fp)
 800080c:	e13ffd03 	ldbu	r4,-12(fp)
 8000810:	8003a2c0 	call	8003a2c <AND>
 8000814:	d0e6c717 	ldw	r3,-25828(gp)
 8000818:	00800104 	movi	r2,4
 800081c:	18800485 	stb	r2,18(r3)
 8000820:	00094006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x3D: // ABSX
    operand = ABSX(); AND(operand); CPU->T = 4; break;
 8000824:	80036a80 	call	80036a8 <ABSX>
 8000828:	e0bffd05 	stb	r2,-12(fp)
 800082c:	e13ffd03 	ldbu	r4,-12(fp)
 8000830:	8003a2c0 	call	8003a2c <AND>
 8000834:	d0e6c717 	ldw	r3,-25828(gp)
 8000838:	00800104 	movi	r2,4
 800083c:	18800485 	stb	r2,18(r3)
 8000840:	00093806 	br	8002d24 <cpu_exec+0x2a74>
  case 0x39: // ABSY
    operand = ABSY(); AND(operand); CPU->T = 4; break;
 8000844:	80037180 	call	8003718 <ABSY>
 8000848:	e0bffd05 	stb	r2,-12(fp)
 800084c:	e13ffd03 	ldbu	r4,-12(fp)
 8000850:	8003a2c0 	call	8003a2c <AND>
 8000854:	d0e6c717 	ldw	r3,-25828(gp)
 8000858:	00800104 	movi	r2,4
 800085c:	18800485 	stb	r2,18(r3)
 8000860:	00093006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x29: // IMM
    operand = IMM(); AND(operand); CPU->T = 2; break;
 8000864:	80038cc0 	call	80038cc <IMM>
 8000868:	e0bffd05 	stb	r2,-12(fp)
 800086c:	e13ffd03 	ldbu	r4,-12(fp)
 8000870:	8003a2c0 	call	8003a2c <AND>
 8000874:	d0e6c717 	ldw	r3,-25828(gp)
 8000878:	00800084 	movi	r2,2
 800087c:	18800485 	stb	r2,18(r3)
 8000880:	00092806 	br	8002d24 <cpu_exec+0x2a74>
  case 0x31: // INDY
    operand = INDY(); AND(operand); CPU->T = 5; break;
 8000884:	80038280 	call	8003828 <INDY>
 8000888:	e0bffd05 	stb	r2,-12(fp)
 800088c:	e13ffd03 	ldbu	r4,-12(fp)
 8000890:	8003a2c0 	call	8003a2c <AND>
 8000894:	d0e6c717 	ldw	r3,-25828(gp)
 8000898:	00800144 	movi	r2,5
 800089c:	18800485 	stb	r2,18(r3)
 80008a0:	00092006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x21: // XIND
    operand = XIND(); AND(operand); CPU->T = 6; break;
 80008a4:	80037880 	call	8003788 <XIND>
 80008a8:	e0bffd05 	stb	r2,-12(fp)
 80008ac:	e13ffd03 	ldbu	r4,-12(fp)
 80008b0:	8003a2c0 	call	8003a2c <AND>
 80008b4:	d0e6c717 	ldw	r3,-25828(gp)
 80008b8:	00800184 	movi	r2,6
 80008bc:	18800485 	stb	r2,18(r3)
 80008c0:	00091806 	br	8002d24 <cpu_exec+0x2a74>
  case 0x25: // ZP
    operand = ZP(); AND(operand); CPU->T = 2; break;
 80008c4:	80038f80 	call	80038f8 <ZP>
 80008c8:	e0bffd05 	stb	r2,-12(fp)
 80008cc:	e13ffd03 	ldbu	r4,-12(fp)
 80008d0:	8003a2c0 	call	8003a2c <AND>
 80008d4:	d0e6c717 	ldw	r3,-25828(gp)
 80008d8:	00800084 	movi	r2,2
 80008dc:	18800485 	stb	r2,18(r3)
 80008e0:	00091006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x35: // ZPX
    operand = ZPX(); AND(operand); CPU->T = 3; break;
 80008e4:	800392c0 	call	800392c <ZPX>
 80008e8:	e0bffd05 	stb	r2,-12(fp)
 80008ec:	e13ffd03 	ldbu	r4,-12(fp)
 80008f0:	8003a2c0 	call	8003a2c <AND>
 80008f4:	d0e6c717 	ldw	r3,-25828(gp)
 80008f8:	008000c4 	movi	r2,3
 80008fc:	18800485 	stb	r2,18(r3)
 8000900:	00090806 	br	8002d24 <cpu_exec+0x2a74>

    // ###################### ASL #########################
    // TODO: Add memory-mirror checking for ASL. Get rid of & operators.
  case 0x0E: // ABS
	temp = (cpu_read());
 8000904:	80033500 	call	8003350 <cpu_read>
 8000908:	10803fcc 	andi	r2,r2,255
 800090c:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8000910:	80033500 	call	8003350 <cpu_read>
 8000914:	10803fcc 	andi	r2,r2,255
 8000918:	1004923a 	slli	r2,r2,8
 800091c:	e0bffe0d 	sth	r2,-8(fp)
    ASL( &CPU->MEM[( temp | temp2 )]); CPU->T = 6; break;
 8000920:	d0a6c717 	ldw	r2,-25828(gp)
 8000924:	11000617 	ldw	r4,24(r2)
 8000928:	e0fffe8b 	ldhu	r3,-6(fp)
 800092c:	e0bffe0b 	ldhu	r2,-8(fp)
 8000930:	1884b03a 	or	r2,r3,r2
 8000934:	10bfffcc 	andi	r2,r2,65535
 8000938:	2089883a 	add	r4,r4,r2
 800093c:	8003aac0 	call	8003aac <ASL>
 8000940:	d0e6c717 	ldw	r3,-25828(gp)
 8000944:	00800184 	movi	r2,6
 8000948:	18800485 	stb	r2,18(r3)
 800094c:	0008f506 	br	8002d24 <cpu_exec+0x2a74>
  case 0x1E: // ABSX
	temp = (cpu_read());
 8000950:	80033500 	call	8003350 <cpu_read>
 8000954:	10803fcc 	andi	r2,r2,255
 8000958:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 800095c:	80033500 	call	8003350 <cpu_read>
 8000960:	10803fcc 	andi	r2,r2,255
 8000964:	1004923a 	slli	r2,r2,8
 8000968:	e0bffe0d 	sth	r2,-8(fp)
    ASL( &CPU->MEM[( ( temp | temp2 ) + CPU->X)]); CPU->T = 7; break;
 800096c:	d0a6c717 	ldw	r2,-25828(gp)
 8000970:	11000617 	ldw	r4,24(r2)
 8000974:	e0fffe8b 	ldhu	r3,-6(fp)
 8000978:	e0bffe0b 	ldhu	r2,-8(fp)
 800097c:	1884b03a 	or	r2,r3,r2
 8000980:	10ffffcc 	andi	r3,r2,65535
 8000984:	d0a6c717 	ldw	r2,-25828(gp)
 8000988:	108002c3 	ldbu	r2,11(r2)
 800098c:	10803fcc 	andi	r2,r2,255
 8000990:	1885883a 	add	r2,r3,r2
 8000994:	2089883a 	add	r4,r4,r2
 8000998:	8003aac0 	call	8003aac <ASL>
 800099c:	d0e6c717 	ldw	r3,-25828(gp)
 80009a0:	008001c4 	movi	r2,7
 80009a4:	18800485 	stb	r2,18(r3)
 80009a8:	0008de06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x0A: // ACC
    ASL( &CPU->A ); CPU->T = 2; break;
 80009ac:	d0a6c717 	ldw	r2,-25828(gp)
 80009b0:	11000284 	addi	r4,r2,10
 80009b4:	8003aac0 	call	8003aac <ASL>
 80009b8:	d0e6c717 	ldw	r3,-25828(gp)
 80009bc:	00800084 	movi	r2,2
 80009c0:	18800485 	stb	r2,18(r3)
 80009c4:	0008d706 	br	8002d24 <cpu_exec+0x2a74>
  case 0x06: // ZP
    ASL( &CPU->MEM[ CPU->MEM[ CPU->PC++] ] ); CPU->T = 5; break;
 80009c8:	d0a6c717 	ldw	r2,-25828(gp)
 80009cc:	11000617 	ldw	r4,24(r2)
 80009d0:	d0a6c717 	ldw	r2,-25828(gp)
 80009d4:	10c00617 	ldw	r3,24(r2)
 80009d8:	d166c717 	ldw	r5,-25828(gp)
 80009dc:	2980000b 	ldhu	r6,0(r5)
 80009e0:	30bfffcc 	andi	r2,r6,65535
 80009e4:	1885883a 	add	r2,r3,r2
 80009e8:	10800003 	ldbu	r2,0(r2)
 80009ec:	10803fcc 	andi	r2,r2,255
 80009f0:	2089883a 	add	r4,r4,r2
 80009f4:	30800044 	addi	r2,r6,1
 80009f8:	2880000d 	sth	r2,0(r5)
 80009fc:	8003aac0 	call	8003aac <ASL>
 8000a00:	d0e6c717 	ldw	r3,-25828(gp)
 8000a04:	00800144 	movi	r2,5
 8000a08:	18800485 	stb	r2,18(r3)
 8000a0c:	0008c506 	br	8002d24 <cpu_exec+0x2a74>
  case 0x16: // ZPX
    ASL( &CPU->MEM[ (CPU->MEM[ CPU->PC++] + CPU->X) & 0xFF] ); CPU->T = 6; break;
 8000a10:	d0a6c717 	ldw	r2,-25828(gp)
 8000a14:	11000617 	ldw	r4,24(r2)
 8000a18:	d0a6c717 	ldw	r2,-25828(gp)
 8000a1c:	10c00617 	ldw	r3,24(r2)
 8000a20:	d1a6c717 	ldw	r6,-25828(gp)
 8000a24:	3140000b 	ldhu	r5,0(r6)
 8000a28:	28bfffcc 	andi	r2,r5,65535
 8000a2c:	1885883a 	add	r2,r3,r2
 8000a30:	10800003 	ldbu	r2,0(r2)
 8000a34:	10c03fcc 	andi	r3,r2,255
 8000a38:	d0a6c717 	ldw	r2,-25828(gp)
 8000a3c:	108002c3 	ldbu	r2,11(r2)
 8000a40:	10803fcc 	andi	r2,r2,255
 8000a44:	1885883a 	add	r2,r3,r2
 8000a48:	10803fcc 	andi	r2,r2,255
 8000a4c:	2089883a 	add	r4,r4,r2
 8000a50:	28800044 	addi	r2,r5,1
 8000a54:	3080000d 	sth	r2,0(r6)
 8000a58:	8003aac0 	call	8003aac <ASL>
 8000a5c:	d0e6c717 	ldw	r3,-25828(gp)
 8000a60:	00800184 	movi	r2,6
 8000a64:	18800485 	stb	r2,18(r3)
 8000a68:	0008ae06 	br	8002d24 <cpu_exec+0x2a74>
    break;

    // ########################## BCC #####################
  case 0x90: // REL
    if(CPU->P.C == 0)
 8000a6c:	d0a6c717 	ldw	r2,-25828(gp)
 8000a70:	108000c3 	ldbu	r2,3(r2)
 8000a74:	10803fcc 	andi	r2,r2,255
 8000a78:	1004c03a 	cmpne	r2,r2,zero
 8000a7c:	1000141e 	bne	r2,zero,8000ad0 <cpu_exec+0x820>
    {
      CPU->PC += (signed char)CPU->MEM[CPU->PC] + 1;
 8000a80:	d126c717 	ldw	r4,-25828(gp)
 8000a84:	d0a6c717 	ldw	r2,-25828(gp)
 8000a88:	1140000b 	ldhu	r5,0(r2)
 8000a8c:	d0a6c717 	ldw	r2,-25828(gp)
 8000a90:	10c00617 	ldw	r3,24(r2)
 8000a94:	d0a6c717 	ldw	r2,-25828(gp)
 8000a98:	1080000b 	ldhu	r2,0(r2)
 8000a9c:	10bfffcc 	andi	r2,r2,65535
 8000aa0:	1885883a 	add	r2,r3,r2
 8000aa4:	10800003 	ldbu	r2,0(r2)
 8000aa8:	10803fcc 	andi	r2,r2,255
 8000aac:	1080201c 	xori	r2,r2,128
 8000ab0:	10bfe004 	addi	r2,r2,-128
 8000ab4:	2885883a 	add	r2,r5,r2
 8000ab8:	10800044 	addi	r2,r2,1
 8000abc:	2080000d 	sth	r2,0(r4)
      CPU->T = 3;
 8000ac0:	d0e6c717 	ldw	r3,-25828(gp)
 8000ac4:	008000c4 	movi	r2,3
 8000ac8:	18800485 	stb	r2,18(r3)
 8000acc:	00000706 	br	8000aec <cpu_exec+0x83c>
    }
    else
    {
      ++CPU->PC;
 8000ad0:	d0e6c717 	ldw	r3,-25828(gp)
 8000ad4:	1880000b 	ldhu	r2,0(r3)
 8000ad8:	10800044 	addi	r2,r2,1
 8000adc:	1880000d 	sth	r2,0(r3)
      CPU->T = 2;
 8000ae0:	d0e6c717 	ldw	r3,-25828(gp)
 8000ae4:	00800084 	movi	r2,2
 8000ae8:	18800485 	stb	r2,18(r3)
    }
     printf("BCC!\n");
 8000aec:	01020074 	movhi	r4,2049
 8000af0:	211c0304 	addi	r4,r4,28684
 8000af4:	8005d500 	call	8005d50 <puts>
    break;
 8000af8:	00088a06 	br	8002d24 <cpu_exec+0x2a74>

    // ####################### BCS ########################
  case 0xB0: // REL
    if(CPU->P.C == 1)
 8000afc:	d0a6c717 	ldw	r2,-25828(gp)
 8000b00:	108000c3 	ldbu	r2,3(r2)
 8000b04:	10803fcc 	andi	r2,r2,255
 8000b08:	10800058 	cmpnei	r2,r2,1
 8000b0c:	1000141e 	bne	r2,zero,8000b60 <cpu_exec+0x8b0>
    {
      CPU->PC += (signed char)CPU->MEM[CPU->PC] + 1; // Added 1 because PC increments
 8000b10:	d126c717 	ldw	r4,-25828(gp)
 8000b14:	d0a6c717 	ldw	r2,-25828(gp)
 8000b18:	1140000b 	ldhu	r5,0(r2)
 8000b1c:	d0a6c717 	ldw	r2,-25828(gp)
 8000b20:	10c00617 	ldw	r3,24(r2)
 8000b24:	d0a6c717 	ldw	r2,-25828(gp)
 8000b28:	1080000b 	ldhu	r2,0(r2)
 8000b2c:	10bfffcc 	andi	r2,r2,65535
 8000b30:	1885883a 	add	r2,r3,r2
 8000b34:	10800003 	ldbu	r2,0(r2)
 8000b38:	10803fcc 	andi	r2,r2,255
 8000b3c:	1080201c 	xori	r2,r2,128
 8000b40:	10bfe004 	addi	r2,r2,-128
 8000b44:	2885883a 	add	r2,r5,r2
 8000b48:	10800044 	addi	r2,r2,1
 8000b4c:	2080000d 	sth	r2,0(r4)
      CPU->T = 3;
 8000b50:	d0e6c717 	ldw	r3,-25828(gp)
 8000b54:	008000c4 	movi	r2,3
 8000b58:	18800485 	stb	r2,18(r3)
 8000b5c:	00000706 	br	8000b7c <cpu_exec+0x8cc>
    }
     else
     {
      ++CPU->PC;
 8000b60:	d0e6c717 	ldw	r3,-25828(gp)
 8000b64:	1880000b 	ldhu	r2,0(r3)
 8000b68:	10800044 	addi	r2,r2,1
 8000b6c:	1880000d 	sth	r2,0(r3)
      CPU->T = 2;
 8000b70:	d0e6c717 	ldw	r3,-25828(gp)
 8000b74:	00800084 	movi	r2,2
 8000b78:	18800485 	stb	r2,18(r3)
     }
    printf("BCS!\n");
 8000b7c:	01020074 	movhi	r4,2049
 8000b80:	211c0504 	addi	r4,r4,28692
 8000b84:	8005d500 	call	8005d50 <puts>
    break;
 8000b88:	00086606 	br	8002d24 <cpu_exec+0x2a74>

    // ######################## BEQ #######################
  case 0xF0: // REL
    if(CPU->P.Z == 1)
 8000b8c:	d0a6c717 	ldw	r2,-25828(gp)
 8000b90:	10800103 	ldbu	r2,4(r2)
 8000b94:	10803fcc 	andi	r2,r2,255
 8000b98:	10800058 	cmpnei	r2,r2,1
 8000b9c:	1000141e 	bne	r2,zero,8000bf0 <cpu_exec+0x940>
    {
      CPU->PC += (signed char)CPU->MEM[CPU->PC] + 1;
 8000ba0:	d126c717 	ldw	r4,-25828(gp)
 8000ba4:	d0a6c717 	ldw	r2,-25828(gp)
 8000ba8:	1140000b 	ldhu	r5,0(r2)
 8000bac:	d0a6c717 	ldw	r2,-25828(gp)
 8000bb0:	10c00617 	ldw	r3,24(r2)
 8000bb4:	d0a6c717 	ldw	r2,-25828(gp)
 8000bb8:	1080000b 	ldhu	r2,0(r2)
 8000bbc:	10bfffcc 	andi	r2,r2,65535
 8000bc0:	1885883a 	add	r2,r3,r2
 8000bc4:	10800003 	ldbu	r2,0(r2)
 8000bc8:	10803fcc 	andi	r2,r2,255
 8000bcc:	1080201c 	xori	r2,r2,128
 8000bd0:	10bfe004 	addi	r2,r2,-128
 8000bd4:	2885883a 	add	r2,r5,r2
 8000bd8:	10800044 	addi	r2,r2,1
 8000bdc:	2080000d 	sth	r2,0(r4)
      CPU->T = 3;
 8000be0:	d0e6c717 	ldw	r3,-25828(gp)
 8000be4:	008000c4 	movi	r2,3
 8000be8:	18800485 	stb	r2,18(r3)
 8000bec:	00000706 	br	8000c0c <cpu_exec+0x95c>
    }
    else
    {
    	++CPU->PC;
 8000bf0:	d0e6c717 	ldw	r3,-25828(gp)
 8000bf4:	1880000b 	ldhu	r2,0(r3)
 8000bf8:	10800044 	addi	r2,r2,1
 8000bfc:	1880000d 	sth	r2,0(r3)
    	CPU->T = 2;
 8000c00:	d0e6c717 	ldw	r3,-25828(gp)
 8000c04:	00800084 	movi	r2,2
 8000c08:	18800485 	stb	r2,18(r3)
    }
    printf("BEQ!\n");
 8000c0c:	01020074 	movhi	r4,2049
 8000c10:	211c0704 	addi	r4,r4,28700
 8000c14:	8005d500 	call	8005d50 <puts>
    break;
 8000c18:	00084206 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## BMI #####################
  case 0x30: // REL
    if(CPU->P.N == 1)
 8000c1c:	d0a6c717 	ldw	r2,-25828(gp)
 8000c20:	10800243 	ldbu	r2,9(r2)
 8000c24:	10803fcc 	andi	r2,r2,255
 8000c28:	10800058 	cmpnei	r2,r2,1
 8000c2c:	1000141e 	bne	r2,zero,8000c80 <cpu_exec+0x9d0>
    {
      CPU->PC += (signed char)CPU->MEM[CPU->PC] + 1;
 8000c30:	d126c717 	ldw	r4,-25828(gp)
 8000c34:	d0a6c717 	ldw	r2,-25828(gp)
 8000c38:	1140000b 	ldhu	r5,0(r2)
 8000c3c:	d0a6c717 	ldw	r2,-25828(gp)
 8000c40:	10c00617 	ldw	r3,24(r2)
 8000c44:	d0a6c717 	ldw	r2,-25828(gp)
 8000c48:	1080000b 	ldhu	r2,0(r2)
 8000c4c:	10bfffcc 	andi	r2,r2,65535
 8000c50:	1885883a 	add	r2,r3,r2
 8000c54:	10800003 	ldbu	r2,0(r2)
 8000c58:	10803fcc 	andi	r2,r2,255
 8000c5c:	1080201c 	xori	r2,r2,128
 8000c60:	10bfe004 	addi	r2,r2,-128
 8000c64:	2885883a 	add	r2,r5,r2
 8000c68:	10800044 	addi	r2,r2,1
 8000c6c:	2080000d 	sth	r2,0(r4)
      CPU->T = 3;
 8000c70:	d0e6c717 	ldw	r3,-25828(gp)
 8000c74:	008000c4 	movi	r2,3
 8000c78:	18800485 	stb	r2,18(r3)
 8000c7c:	00000706 	br	8000c9c <cpu_exec+0x9ec>
    }
    else
    {
      ++CPU->PC;
 8000c80:	d0e6c717 	ldw	r3,-25828(gp)
 8000c84:	1880000b 	ldhu	r2,0(r3)
 8000c88:	10800044 	addi	r2,r2,1
 8000c8c:	1880000d 	sth	r2,0(r3)
      CPU->T = 2;
 8000c90:	d0e6c717 	ldw	r3,-25828(gp)
 8000c94:	00800084 	movi	r2,2
 8000c98:	18800485 	stb	r2,18(r3)
    }
    printf("BMI!\n");
 8000c9c:	01020074 	movhi	r4,2049
 8000ca0:	211c0904 	addi	r4,r4,28708
 8000ca4:	8005d500 	call	8005d50 <puts>
    break;
 8000ca8:	00081e06 	br	8002d24 <cpu_exec+0x2a74>

    // ######################## BNE #######################
  case 0xD0: // REL
    if(CPU->P.Z == 0)
 8000cac:	d0a6c717 	ldw	r2,-25828(gp)
 8000cb0:	10800103 	ldbu	r2,4(r2)
 8000cb4:	10803fcc 	andi	r2,r2,255
 8000cb8:	1004c03a 	cmpne	r2,r2,zero
 8000cbc:	1000141e 	bne	r2,zero,8000d10 <cpu_exec+0xa60>
    {
      CPU->PC += (signed char)CPU->MEM[CPU->PC] + 1;
 8000cc0:	d126c717 	ldw	r4,-25828(gp)
 8000cc4:	d0a6c717 	ldw	r2,-25828(gp)
 8000cc8:	1140000b 	ldhu	r5,0(r2)
 8000ccc:	d0a6c717 	ldw	r2,-25828(gp)
 8000cd0:	10c00617 	ldw	r3,24(r2)
 8000cd4:	d0a6c717 	ldw	r2,-25828(gp)
 8000cd8:	1080000b 	ldhu	r2,0(r2)
 8000cdc:	10bfffcc 	andi	r2,r2,65535
 8000ce0:	1885883a 	add	r2,r3,r2
 8000ce4:	10800003 	ldbu	r2,0(r2)
 8000ce8:	10803fcc 	andi	r2,r2,255
 8000cec:	1080201c 	xori	r2,r2,128
 8000cf0:	10bfe004 	addi	r2,r2,-128
 8000cf4:	2885883a 	add	r2,r5,r2
 8000cf8:	10800044 	addi	r2,r2,1
 8000cfc:	2080000d 	sth	r2,0(r4)
      CPU->T = 3;
 8000d00:	d0e6c717 	ldw	r3,-25828(gp)
 8000d04:	008000c4 	movi	r2,3
 8000d08:	18800485 	stb	r2,18(r3)
 8000d0c:	00000706 	br	8000d2c <cpu_exec+0xa7c>
    }
    else
    {
      ++CPU->PC;
 8000d10:	d0e6c717 	ldw	r3,-25828(gp)
 8000d14:	1880000b 	ldhu	r2,0(r3)
 8000d18:	10800044 	addi	r2,r2,1
 8000d1c:	1880000d 	sth	r2,0(r3)
      CPU->T = 2;
 8000d20:	d0e6c717 	ldw	r3,-25828(gp)
 8000d24:	00800084 	movi	r2,2
 8000d28:	18800485 	stb	r2,18(r3)
    }
    printf("BNE!\n");
 8000d2c:	01020074 	movhi	r4,2049
 8000d30:	211c0b04 	addi	r4,r4,28716
 8000d34:	8005d500 	call	8005d50 <puts>
    break;
 8000d38:	0007fa06 	br	8002d24 <cpu_exec+0x2a74>

    // ####################### BPL ########################
  case 0x10: // REL
    if(CPU->P.N == 0)
 8000d3c:	d0a6c717 	ldw	r2,-25828(gp)
 8000d40:	10800243 	ldbu	r2,9(r2)
 8000d44:	10803fcc 	andi	r2,r2,255
 8000d48:	1004c03a 	cmpne	r2,r2,zero
 8000d4c:	1000141e 	bne	r2,zero,8000da0 <cpu_exec+0xaf0>
    {
      CPU->PC += (signed char)CPU->MEM[CPU->PC]+1;
 8000d50:	d126c717 	ldw	r4,-25828(gp)
 8000d54:	d0a6c717 	ldw	r2,-25828(gp)
 8000d58:	1140000b 	ldhu	r5,0(r2)
 8000d5c:	d0a6c717 	ldw	r2,-25828(gp)
 8000d60:	10c00617 	ldw	r3,24(r2)
 8000d64:	d0a6c717 	ldw	r2,-25828(gp)
 8000d68:	1080000b 	ldhu	r2,0(r2)
 8000d6c:	10bfffcc 	andi	r2,r2,65535
 8000d70:	1885883a 	add	r2,r3,r2
 8000d74:	10800003 	ldbu	r2,0(r2)
 8000d78:	10803fcc 	andi	r2,r2,255
 8000d7c:	1080201c 	xori	r2,r2,128
 8000d80:	10bfe004 	addi	r2,r2,-128
 8000d84:	2885883a 	add	r2,r5,r2
 8000d88:	10800044 	addi	r2,r2,1
 8000d8c:	2080000d 	sth	r2,0(r4)
      CPU->T = 3;
 8000d90:	d0e6c717 	ldw	r3,-25828(gp)
 8000d94:	008000c4 	movi	r2,3
 8000d98:	18800485 	stb	r2,18(r3)
 8000d9c:	00000706 	br	8000dbc <cpu_exec+0xb0c>
    }
    else
    {
      ++CPU->PC;
 8000da0:	d0e6c717 	ldw	r3,-25828(gp)
 8000da4:	1880000b 	ldhu	r2,0(r3)
 8000da8:	10800044 	addi	r2,r2,1
 8000dac:	1880000d 	sth	r2,0(r3)
      CPU->T = 2;
 8000db0:	d0e6c717 	ldw	r3,-25828(gp)
 8000db4:	00800084 	movi	r2,2
 8000db8:	18800485 	stb	r2,18(r3)
    }
    printf("BPL!\n");
 8000dbc:	01020074 	movhi	r4,2049
 8000dc0:	211c0d04 	addi	r4,r4,28724
 8000dc4:	8005d500 	call	8005d50 <puts>
    break;
 8000dc8:	0007d606 	br	8002d24 <cpu_exec+0x2a74>
    // ######################### BRK ######################
    // TODO: Confirm that we are storing the right value of PC onto Stack
  case 0x00: // IMP
    /* Simulate Interrupt ReQuest (IRQ)
       Note: Do we increment PC at first? */
    ++CPU->PC; // This matters because we're saving PC in Stack
 8000dcc:	d0e6c717 	ldw	r3,-25828(gp)
 8000dd0:	1880000b 	ldhu	r2,0(r3)
 8000dd4:	10800044 	addi	r2,r2,1
 8000dd8:	1880000d 	sth	r2,0(r3)
    cpu_mem_write( CPU->PC & 0xFF, STACK + CPU->S );
 8000ddc:	d0a6c717 	ldw	r2,-25828(gp)
 8000de0:	1080000b 	ldhu	r2,0(r2)
 8000de4:	11003fcc 	andi	r4,r2,255
 8000de8:	d0a6c717 	ldw	r2,-25828(gp)
 8000dec:	10800083 	ldbu	r2,2(r2)
 8000df0:	10803fcc 	andi	r2,r2,255
 8000df4:	10804004 	addi	r2,r2,256
 8000df8:	117fffcc 	andi	r5,r2,65535
 8000dfc:	80034540 	call	8003454 <cpu_mem_write>
    --CPU->S;
 8000e00:	d0e6c717 	ldw	r3,-25828(gp)
 8000e04:	18800083 	ldbu	r2,2(r3)
 8000e08:	10bfffc4 	addi	r2,r2,-1
 8000e0c:	18800085 	stb	r2,2(r3)

    cpu_mem_write( (CPU->PC >> 8) & 0xFF, STACK + CPU->S );
 8000e10:	d0a6c717 	ldw	r2,-25828(gp)
 8000e14:	1080000b 	ldhu	r2,0(r2)
 8000e18:	10bfffcc 	andi	r2,r2,65535
 8000e1c:	1004d23a 	srli	r2,r2,8
 8000e20:	11003fcc 	andi	r4,r2,255
 8000e24:	d0a6c717 	ldw	r2,-25828(gp)
 8000e28:	10800083 	ldbu	r2,2(r2)
 8000e2c:	10803fcc 	andi	r2,r2,255
 8000e30:	10804004 	addi	r2,r2,256
 8000e34:	117fffcc 	andi	r5,r2,65535
 8000e38:	80034540 	call	8003454 <cpu_mem_write>
    --CPU->S;
 8000e3c:	d0e6c717 	ldw	r3,-25828(gp)
 8000e40:	18800083 	ldbu	r2,2(r3)
 8000e44:	10bfffc4 	addi	r2,r2,-1
 8000e48:	18800085 	stb	r2,2(r3)

    cpu_mem_write( cpu_join_flags(), STACK + CPU->S );
 8000e4c:	80035040 	call	8003504 <cpu_join_flags>
 8000e50:	11003fcc 	andi	r4,r2,255
 8000e54:	d0a6c717 	ldw	r2,-25828(gp)
 8000e58:	10800083 	ldbu	r2,2(r2)
 8000e5c:	10803fcc 	andi	r2,r2,255
 8000e60:	10804004 	addi	r2,r2,256
 8000e64:	117fffcc 	andi	r5,r2,65535
 8000e68:	80034540 	call	8003454 <cpu_mem_write>
    --CPU->S;
 8000e6c:	d0e6c717 	ldw	r3,-25828(gp)
 8000e70:	18800083 	ldbu	r2,2(r3)
 8000e74:	10bfffc4 	addi	r2,r2,-1
 8000e78:	18800085 	stb	r2,2(r3)

    CPU->PC = (CPU->MEM[0xFFFE]) | (CPU->MEM[0xFFFF] << 8);
 8000e7c:	d166c717 	ldw	r5,-25828(gp)
 8000e80:	d0a6c717 	ldw	r2,-25828(gp)
 8000e84:	10c00617 	ldw	r3,24(r2)
 8000e88:	00bfff94 	movui	r2,65534
 8000e8c:	1885883a 	add	r2,r3,r2
 8000e90:	10800003 	ldbu	r2,0(r2)
 8000e94:	11003fcc 	andi	r4,r2,255
 8000e98:	d0a6c717 	ldw	r2,-25828(gp)
 8000e9c:	10c00617 	ldw	r3,24(r2)
 8000ea0:	00bfffd4 	movui	r2,65535
 8000ea4:	1885883a 	add	r2,r3,r2
 8000ea8:	10800003 	ldbu	r2,0(r2)
 8000eac:	10803fcc 	andi	r2,r2,255
 8000eb0:	1004923a 	slli	r2,r2,8
 8000eb4:	2084b03a 	or	r2,r4,r2
 8000eb8:	2880000d 	sth	r2,0(r5)
    printf("Breaking into reset vector: %x ", CPU->PC);
 8000ebc:	d0a6c717 	ldw	r2,-25828(gp)
 8000ec0:	1080000b 	ldhu	r2,0(r2)
 8000ec4:	117fffcc 	andi	r5,r2,65535
 8000ec8:	01020074 	movhi	r4,2049
 8000ecc:	211c0f04 	addi	r4,r4,28732
 8000ed0:	8005c140 	call	8005c14 <printf>
    printf("BRK!\n");
 8000ed4:	01020074 	movhi	r4,2049
 8000ed8:	211c1704 	addi	r4,r4,28764
 8000edc:	8005d500 	call	8005d50 <puts>
    CPU->T = 7;
 8000ee0:	d0e6c717 	ldw	r3,-25828(gp)
 8000ee4:	008001c4 	movi	r2,7
 8000ee8:	18800485 	stb	r2,18(r3)
    break;
 8000eec:	00078d06 	br	8002d24 <cpu_exec+0x2a74>

    // ######################## BVC #######################
  case 0x50: // REL
    if(CPU->P.V == 0)
 8000ef0:	d0a6c717 	ldw	r2,-25828(gp)
 8000ef4:	10800203 	ldbu	r2,8(r2)
 8000ef8:	10803fcc 	andi	r2,r2,255
 8000efc:	1004c03a 	cmpne	r2,r2,zero
 8000f00:	1000141e 	bne	r2,zero,8000f54 <cpu_exec+0xca4>
    {
      CPU->PC += (signed char)CPU->MEM[CPU->PC] + 1;
 8000f04:	d126c717 	ldw	r4,-25828(gp)
 8000f08:	d0a6c717 	ldw	r2,-25828(gp)
 8000f0c:	1140000b 	ldhu	r5,0(r2)
 8000f10:	d0a6c717 	ldw	r2,-25828(gp)
 8000f14:	10c00617 	ldw	r3,24(r2)
 8000f18:	d0a6c717 	ldw	r2,-25828(gp)
 8000f1c:	1080000b 	ldhu	r2,0(r2)
 8000f20:	10bfffcc 	andi	r2,r2,65535
 8000f24:	1885883a 	add	r2,r3,r2
 8000f28:	10800003 	ldbu	r2,0(r2)
 8000f2c:	10803fcc 	andi	r2,r2,255
 8000f30:	1080201c 	xori	r2,r2,128
 8000f34:	10bfe004 	addi	r2,r2,-128
 8000f38:	2885883a 	add	r2,r5,r2
 8000f3c:	10800044 	addi	r2,r2,1
 8000f40:	2080000d 	sth	r2,0(r4)
      CPU->T = 3;
 8000f44:	d0e6c717 	ldw	r3,-25828(gp)
 8000f48:	008000c4 	movi	r2,3
 8000f4c:	18800485 	stb	r2,18(r3)
 8000f50:	00000706 	br	8000f70 <cpu_exec+0xcc0>
    }
    else
    {
      ++CPU->PC;
 8000f54:	d0e6c717 	ldw	r3,-25828(gp)
 8000f58:	1880000b 	ldhu	r2,0(r3)
 8000f5c:	10800044 	addi	r2,r2,1
 8000f60:	1880000d 	sth	r2,0(r3)
      CPU->T = 2;
 8000f64:	d0e6c717 	ldw	r3,-25828(gp)
 8000f68:	00800084 	movi	r2,2
 8000f6c:	18800485 	stb	r2,18(r3)
    }
    printf("BCV!\n");
 8000f70:	01020074 	movhi	r4,2049
 8000f74:	211c1904 	addi	r4,r4,28772
 8000f78:	8005d500 	call	8005d50 <puts>
    break;
 8000f7c:	00076906 	br	8002d24 <cpu_exec+0x2a74>

    // ######################## BVS #######################
  case 0x70: // REL
    if(CPU->P.V == 1)
 8000f80:	d0a6c717 	ldw	r2,-25828(gp)
 8000f84:	10800203 	ldbu	r2,8(r2)
 8000f88:	10803fcc 	andi	r2,r2,255
 8000f8c:	10800058 	cmpnei	r2,r2,1
 8000f90:	1000141e 	bne	r2,zero,8000fe4 <cpu_exec+0xd34>
    {
      CPU->PC += (signed char)CPU->MEM[CPU->PC] + 1;
 8000f94:	d126c717 	ldw	r4,-25828(gp)
 8000f98:	d0a6c717 	ldw	r2,-25828(gp)
 8000f9c:	1140000b 	ldhu	r5,0(r2)
 8000fa0:	d0a6c717 	ldw	r2,-25828(gp)
 8000fa4:	10c00617 	ldw	r3,24(r2)
 8000fa8:	d0a6c717 	ldw	r2,-25828(gp)
 8000fac:	1080000b 	ldhu	r2,0(r2)
 8000fb0:	10bfffcc 	andi	r2,r2,65535
 8000fb4:	1885883a 	add	r2,r3,r2
 8000fb8:	10800003 	ldbu	r2,0(r2)
 8000fbc:	10803fcc 	andi	r2,r2,255
 8000fc0:	1080201c 	xori	r2,r2,128
 8000fc4:	10bfe004 	addi	r2,r2,-128
 8000fc8:	2885883a 	add	r2,r5,r2
 8000fcc:	10800044 	addi	r2,r2,1
 8000fd0:	2080000d 	sth	r2,0(r4)
      CPU->T = 3;
 8000fd4:	d0e6c717 	ldw	r3,-25828(gp)
 8000fd8:	008000c4 	movi	r2,3
 8000fdc:	18800485 	stb	r2,18(r3)
 8000fe0:	00000706 	br	8001000 <cpu_exec+0xd50>
    }
    else
    {
      ++CPU->PC;
 8000fe4:	d0e6c717 	ldw	r3,-25828(gp)
 8000fe8:	1880000b 	ldhu	r2,0(r3)
 8000fec:	10800044 	addi	r2,r2,1
 8000ff0:	1880000d 	sth	r2,0(r3)
      CPU->T = 2;
 8000ff4:	d0e6c717 	ldw	r3,-25828(gp)
 8000ff8:	00800084 	movi	r2,2
 8000ffc:	18800485 	stb	r2,18(r3)
    }
    printf("BVS!\n");
 8001000:	01020074 	movhi	r4,2049
 8001004:	211c1b04 	addi	r4,r4,28780
 8001008:	8005d500 	call	8005d50 <puts>
    break;
 800100c:	00074506 	br	8002d24 <cpu_exec+0x2a74>

    // ######################### CLC ######################
  case 0x18: // IMP
    CPU->P.C = 0;
 8001010:	d0a6c717 	ldw	r2,-25828(gp)
 8001014:	100000c5 	stb	zero,3(r2)
    //++CPU->PC;
    printf("CLC!\n");
 8001018:	01020074 	movhi	r4,2049
 800101c:	211c1d04 	addi	r4,r4,28788
 8001020:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 8001024:	d0e6c717 	ldw	r3,-25828(gp)
 8001028:	00800084 	movi	r2,2
 800102c:	18800485 	stb	r2,18(r3)
    break;
 8001030:	00073c06 	br	8002d24 <cpu_exec+0x2a74>

    // ######################### CLD ######################
  case 0xD8: // IMP
    CPU->P.D = 0;
 8001034:	d0a6c717 	ldw	r2,-25828(gp)
 8001038:	10000185 	stb	zero,6(r2)
    //++CPU->PC;
    printf("CLD!\n");
 800103c:	01020074 	movhi	r4,2049
 8001040:	211c1f04 	addi	r4,r4,28796
 8001044:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 8001048:	d0e6c717 	ldw	r3,-25828(gp)
 800104c:	00800084 	movi	r2,2
 8001050:	18800485 	stb	r2,18(r3)
    break;
 8001054:	00073306 	br	8002d24 <cpu_exec+0x2a74>

    // ####################### CLI ########################
  case 0x58: // IMP
    CPU->P.I = 0;
 8001058:	d0a6c717 	ldw	r2,-25828(gp)
 800105c:	10000145 	stb	zero,5(r2)
    //++CPU->PC;
    printf("CLI!\n");
 8001060:	01020074 	movhi	r4,2049
 8001064:	211c2104 	addi	r4,r4,28804
 8001068:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 800106c:	d0e6c717 	ldw	r3,-25828(gp)
 8001070:	00800084 	movi	r2,2
 8001074:	18800485 	stb	r2,18(r3)
    break;
 8001078:	00072a06 	br	8002d24 <cpu_exec+0x2a74>

    // ######################### CLV ######################
  case 0xB8: // IMP
    CPU->P.V = 0;
 800107c:	d0a6c717 	ldw	r2,-25828(gp)
 8001080:	10000205 	stb	zero,8(r2)
    //++CPU->PC;
    printf("CLV!\n");
 8001084:	01020074 	movhi	r4,2049
 8001088:	211c2304 	addi	r4,r4,28812
 800108c:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 8001090:	d0e6c717 	ldw	r3,-25828(gp)
 8001094:	00800084 	movi	r2,2
 8001098:	18800485 	stb	r2,18(r3)
    break;
 800109c:	00072106 	br	8002d24 <cpu_exec+0x2a74>

    // ######################### BIT ######################
  case 0x24: // ZP
    //printf("BIT on %x and %x ", CPU->A, CPU->MEM[ CPU->MEM[ CPU->PC  ] ] );

    temp = CPU->A & cpu_mem_read( cpu_read() );
 80010a0:	d0a6c717 	ldw	r2,-25828(gp)
 80010a4:	14000283 	ldbu	r16,10(r2)
 80010a8:	80033500 	call	8003350 <cpu_read>
 80010ac:	11003fcc 	andi	r4,r2,255
 80010b0:	80033980 	call	8003398 <cpu_mem_read>
 80010b4:	8084703a 	and	r2,r16,r2
 80010b8:	10803fcc 	andi	r2,r2,255
 80010bc:	e0bffe8d 	sth	r2,-6(fp)
    CPU->P.N = ((temp & 0x80) > 0) ? 1 : 0;
 80010c0:	d0e6c717 	ldw	r3,-25828(gp)
 80010c4:	e0bffe8b 	ldhu	r2,-6(fp)
 80010c8:	1080200c 	andi	r2,r2,128
 80010cc:	10800048 	cmpgei	r2,r2,1
 80010d0:	18800245 	stb	r2,9(r3)
    CPU->P.V = ((temp & 0x40) > 0) ? 1 : 0;
 80010d4:	d0e6c717 	ldw	r3,-25828(gp)
 80010d8:	e0bffe8b 	ldhu	r2,-6(fp)
 80010dc:	1080100c 	andi	r2,r2,64
 80010e0:	10800048 	cmpgei	r2,r2,1
 80010e4:	18800205 	stb	r2,8(r3)
    CPU->P.Z = (temp == 0) ? 1 : 0;
 80010e8:	d0e6c717 	ldw	r3,-25828(gp)
 80010ec:	e0bffe8b 	ldhu	r2,-6(fp)
 80010f0:	1005003a 	cmpeq	r2,r2,zero
 80010f4:	18800105 	stb	r2,4(r3)
    printf("BIT!\n");
 80010f8:	01020074 	movhi	r4,2049
 80010fc:	211c2504 	addi	r4,r4,28820
 8001100:	8005d500 	call	8005d50 <puts>
    CPU->T = 3;
 8001104:	d0e6c717 	ldw	r3,-25828(gp)
 8001108:	008000c4 	movi	r2,3
 800110c:	18800485 	stb	r2,18(r3)
    break;
 8001110:	00070406 	br	8002d24 <cpu_exec+0x2a74>
  case 0x2C: // ABS
	temp = cpu_read();
 8001114:	80033500 	call	8003350 <cpu_read>
 8001118:	10803fcc 	andi	r2,r2,255
 800111c:	e0bffe8d 	sth	r2,-6(fp)
	temp2 =  cpu_read() << 8;
 8001120:	80033500 	call	8003350 <cpu_read>
 8001124:	10803fcc 	andi	r2,r2,255
 8001128:	1004923a 	slli	r2,r2,8
 800112c:	e0bffe0d 	sth	r2,-8(fp)
	temp2 =  cpu_mem_read( (temp2 | temp) );
 8001130:	e0fffe0b 	ldhu	r3,-8(fp)
 8001134:	e0bffe8b 	ldhu	r2,-6(fp)
 8001138:	1884b03a 	or	r2,r3,r2
 800113c:	113fffcc 	andi	r4,r2,65535
 8001140:	80033980 	call	8003398 <cpu_mem_read>
 8001144:	10803fcc 	andi	r2,r2,255
 8001148:	e0bffe0d 	sth	r2,-8(fp)
    temp = CPU->A & temp2;
 800114c:	d0a6c717 	ldw	r2,-25828(gp)
 8001150:	10800283 	ldbu	r2,10(r2)
 8001154:	10c03fcc 	andi	r3,r2,255
 8001158:	e0bffe0b 	ldhu	r2,-8(fp)
 800115c:	1884703a 	and	r2,r3,r2
 8001160:	e0bffe8d 	sth	r2,-6(fp)
    CPU->P.N = ((temp & 0x80) > 0) ? 1 : 0;
 8001164:	d0e6c717 	ldw	r3,-25828(gp)
 8001168:	e0bffe8b 	ldhu	r2,-6(fp)
 800116c:	1080200c 	andi	r2,r2,128
 8001170:	10800048 	cmpgei	r2,r2,1
 8001174:	18800245 	stb	r2,9(r3)
    CPU->P.V = ((temp & 0x40) > 0) ? 1 : 0;
 8001178:	d0e6c717 	ldw	r3,-25828(gp)
 800117c:	e0bffe8b 	ldhu	r2,-6(fp)
 8001180:	1080100c 	andi	r2,r2,64
 8001184:	10800048 	cmpgei	r2,r2,1
 8001188:	18800205 	stb	r2,8(r3)
    CPU->P.Z = (temp == 0) ? 1 : 0;
 800118c:	d0e6c717 	ldw	r3,-25828(gp)
 8001190:	e0bffe8b 	ldhu	r2,-6(fp)
 8001194:	1005003a 	cmpeq	r2,r2,zero
 8001198:	18800105 	stb	r2,4(r3)
    printf("BIT!\n");
 800119c:	01020074 	movhi	r4,2049
 80011a0:	211c2504 	addi	r4,r4,28820
 80011a4:	8005d500 	call	8005d50 <puts>
    CPU->T = 4;
 80011a8:	d0e6c717 	ldw	r3,-25828(gp)
 80011ac:	00800104 	movi	r2,4
 80011b0:	18800485 	stb	r2,18(r3)
    break;
 80011b4:	0006db06 	br	8002d24 <cpu_exec+0x2a74>

    // ######################### CMP ######################
  case 0xCD: // ABS
    operand = ABS(); CMP(operand); CPU->T = 4; break;
 80011b8:	800364c0 	call	800364c <ABS>
 80011bc:	e0bffd05 	stb	r2,-12(fp)
 80011c0:	e13ffd03 	ldbu	r4,-12(fp)
 80011c4:	8003b540 	call	8003b54 <CMP>
 80011c8:	d0e6c717 	ldw	r3,-25828(gp)
 80011cc:	00800104 	movi	r2,4
 80011d0:	18800485 	stb	r2,18(r3)
 80011d4:	0006d306 	br	8002d24 <cpu_exec+0x2a74>
  case 0xDD: // ABSX
    operand = ABSX(); CMP(operand); CPU->T = 4; break;
 80011d8:	80036a80 	call	80036a8 <ABSX>
 80011dc:	e0bffd05 	stb	r2,-12(fp)
 80011e0:	e13ffd03 	ldbu	r4,-12(fp)
 80011e4:	8003b540 	call	8003b54 <CMP>
 80011e8:	d0e6c717 	ldw	r3,-25828(gp)
 80011ec:	00800104 	movi	r2,4
 80011f0:	18800485 	stb	r2,18(r3)
 80011f4:	0006cb06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xD9: // ABSY
    operand = ABSY(); CMP(operand); CPU->T = 4; break;
 80011f8:	80037180 	call	8003718 <ABSY>
 80011fc:	e0bffd05 	stb	r2,-12(fp)
 8001200:	e13ffd03 	ldbu	r4,-12(fp)
 8001204:	8003b540 	call	8003b54 <CMP>
 8001208:	d0e6c717 	ldw	r3,-25828(gp)
 800120c:	00800104 	movi	r2,4
 8001210:	18800485 	stb	r2,18(r3)
 8001214:	0006c306 	br	8002d24 <cpu_exec+0x2a74>
  case 0xC9: // IMM
    operand = IMM(); CMP(operand); CPU->T = 2; break;
 8001218:	80038cc0 	call	80038cc <IMM>
 800121c:	e0bffd05 	stb	r2,-12(fp)
 8001220:	e13ffd03 	ldbu	r4,-12(fp)
 8001224:	8003b540 	call	8003b54 <CMP>
 8001228:	d0e6c717 	ldw	r3,-25828(gp)
 800122c:	00800084 	movi	r2,2
 8001230:	18800485 	stb	r2,18(r3)
 8001234:	0006bb06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xD1: // INDY
    operand = INDY(); CMP(operand); CPU->T = 5; break;
 8001238:	80038280 	call	8003828 <INDY>
 800123c:	e0bffd05 	stb	r2,-12(fp)
 8001240:	e13ffd03 	ldbu	r4,-12(fp)
 8001244:	8003b540 	call	8003b54 <CMP>
 8001248:	d0e6c717 	ldw	r3,-25828(gp)
 800124c:	00800144 	movi	r2,5
 8001250:	18800485 	stb	r2,18(r3)
 8001254:	0006b306 	br	8002d24 <cpu_exec+0x2a74>
  case 0xC1: // XIND
    operand = XIND(); CMP(operand); CPU->T = 6; break;
 8001258:	80037880 	call	8003788 <XIND>
 800125c:	e0bffd05 	stb	r2,-12(fp)
 8001260:	e13ffd03 	ldbu	r4,-12(fp)
 8001264:	8003b540 	call	8003b54 <CMP>
 8001268:	d0e6c717 	ldw	r3,-25828(gp)
 800126c:	00800184 	movi	r2,6
 8001270:	18800485 	stb	r2,18(r3)
 8001274:	0006ab06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xC5: // ZP
    operand = ZP(); CMP(operand); CPU->T = 3; break;
 8001278:	80038f80 	call	80038f8 <ZP>
 800127c:	e0bffd05 	stb	r2,-12(fp)
 8001280:	e13ffd03 	ldbu	r4,-12(fp)
 8001284:	8003b540 	call	8003b54 <CMP>
 8001288:	d0e6c717 	ldw	r3,-25828(gp)
 800128c:	008000c4 	movi	r2,3
 8001290:	18800485 	stb	r2,18(r3)
 8001294:	0006a306 	br	8002d24 <cpu_exec+0x2a74>
  case 0xD5: // ZPX
    operand = ZPX(); CMP(operand); CPU->T = 4; break;
 8001298:	800392c0 	call	800392c <ZPX>
 800129c:	e0bffd05 	stb	r2,-12(fp)
 80012a0:	e13ffd03 	ldbu	r4,-12(fp)
 80012a4:	8003b540 	call	8003b54 <CMP>
 80012a8:	d0e6c717 	ldw	r3,-25828(gp)
 80012ac:	00800104 	movi	r2,4
 80012b0:	18800485 	stb	r2,18(r3)
 80012b4:	00069b06 	br	8002d24 <cpu_exec+0x2a74>

    // ####################### CPX ########################
  case 0xEC: // ABS
    operand = ABS(); CPX(operand); CPU->T = 4; break;
 80012b8:	800364c0 	call	800364c <ABS>
 80012bc:	e0bffd05 	stb	r2,-12(fp)
 80012c0:	e13ffd03 	ldbu	r4,-12(fp)
 80012c4:	8003bdc0 	call	8003bdc <CPX>
 80012c8:	d0e6c717 	ldw	r3,-25828(gp)
 80012cc:	00800104 	movi	r2,4
 80012d0:	18800485 	stb	r2,18(r3)
 80012d4:	00069306 	br	8002d24 <cpu_exec+0x2a74>
  case 0xE0: // IMM
    operand = IMM(); CPX(operand); CPU->T = 2; break;
 80012d8:	80038cc0 	call	80038cc <IMM>
 80012dc:	e0bffd05 	stb	r2,-12(fp)
 80012e0:	e13ffd03 	ldbu	r4,-12(fp)
 80012e4:	8003bdc0 	call	8003bdc <CPX>
 80012e8:	d0e6c717 	ldw	r3,-25828(gp)
 80012ec:	00800084 	movi	r2,2
 80012f0:	18800485 	stb	r2,18(r3)
 80012f4:	00068b06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xE4: // ZP
    operand = ZP(); CPX(operand); CPU->T = 3; break;
 80012f8:	80038f80 	call	80038f8 <ZP>
 80012fc:	e0bffd05 	stb	r2,-12(fp)
 8001300:	e13ffd03 	ldbu	r4,-12(fp)
 8001304:	8003bdc0 	call	8003bdc <CPX>
 8001308:	d0e6c717 	ldw	r3,-25828(gp)
 800130c:	008000c4 	movi	r2,3
 8001310:	18800485 	stb	r2,18(r3)
 8001314:	00068306 	br	8002d24 <cpu_exec+0x2a74>

    // ###################### CPY #########################
  case 0xCC: // ABS
    operand = ABS(); CPY(operand); CPU->T = 4; break;
 8001318:	800364c0 	call	800364c <ABS>
 800131c:	e0bffd05 	stb	r2,-12(fp)
 8001320:	e13ffd03 	ldbu	r4,-12(fp)
 8001324:	8003c640 	call	8003c64 <CPY>
 8001328:	d0e6c717 	ldw	r3,-25828(gp)
 800132c:	00800104 	movi	r2,4
 8001330:	18800485 	stb	r2,18(r3)
 8001334:	00067b06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xC0: // IMM
    operand = IMM(); CPY(operand); CPU->T = 2; break;
 8001338:	80038cc0 	call	80038cc <IMM>
 800133c:	e0bffd05 	stb	r2,-12(fp)
 8001340:	e13ffd03 	ldbu	r4,-12(fp)
 8001344:	8003c640 	call	8003c64 <CPY>
 8001348:	d0e6c717 	ldw	r3,-25828(gp)
 800134c:	00800084 	movi	r2,2
 8001350:	18800485 	stb	r2,18(r3)
 8001354:	00067306 	br	8002d24 <cpu_exec+0x2a74>
  case 0xC4: // ZP
    operand = ZP(); CPY(operand); CPU->T = 3; break;
 8001358:	80038f80 	call	80038f8 <ZP>
 800135c:	e0bffd05 	stb	r2,-12(fp)
 8001360:	e13ffd03 	ldbu	r4,-12(fp)
 8001364:	8003c640 	call	8003c64 <CPY>
 8001368:	d0e6c717 	ldw	r3,-25828(gp)
 800136c:	008000c4 	movi	r2,3
 8001370:	18800485 	stb	r2,18(r3)
 8001374:	00066b06 	br	8002d24 <cpu_exec+0x2a74>

    // ########################### DEC ####################
    // TODO: Implement memory-mirroring for DEC. Get rid of & operator
  case 0xCE: // ABS
	temp = cpu_read();
 8001378:	80033500 	call	8003350 <cpu_read>
 800137c:	10803fcc 	andi	r2,r2,255
 8001380:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8001384:	80033500 	call	8003350 <cpu_read>
 8001388:	10803fcc 	andi	r2,r2,255
 800138c:	1004923a 	slli	r2,r2,8
 8001390:	e0bffe0d 	sth	r2,-8(fp)
    DEC( &CPU->MEM[ temp | temp2 ] );  CPU->T = 6; break;
 8001394:	d0a6c717 	ldw	r2,-25828(gp)
 8001398:	11000617 	ldw	r4,24(r2)
 800139c:	e0fffe8b 	ldhu	r3,-6(fp)
 80013a0:	e0bffe0b 	ldhu	r2,-8(fp)
 80013a4:	1884b03a 	or	r2,r3,r2
 80013a8:	10bfffcc 	andi	r2,r2,65535
 80013ac:	2089883a 	add	r4,r4,r2
 80013b0:	8003cec0 	call	8003cec <DEC>
 80013b4:	d0e6c717 	ldw	r3,-25828(gp)
 80013b8:	00800184 	movi	r2,6
 80013bc:	18800485 	stb	r2,18(r3)
 80013c0:	00065806 	br	8002d24 <cpu_exec+0x2a74>
  case 0xDE: // ABSX
	temp = cpu_read();
 80013c4:	80033500 	call	8003350 <cpu_read>
 80013c8:	10803fcc 	andi	r2,r2,255
 80013cc:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 80013d0:	80033500 	call	8003350 <cpu_read>
 80013d4:	10803fcc 	andi	r2,r2,255
 80013d8:	1004923a 	slli	r2,r2,8
 80013dc:	e0bffe0d 	sth	r2,-8(fp)
    DEC( &CPU->MEM[ ((temp | temp2 ) + CPU->X) & 0xFFFF ]); CPU->T = 7; break;
 80013e0:	d0a6c717 	ldw	r2,-25828(gp)
 80013e4:	11000617 	ldw	r4,24(r2)
 80013e8:	e0fffe8b 	ldhu	r3,-6(fp)
 80013ec:	e0bffe0b 	ldhu	r2,-8(fp)
 80013f0:	1884b03a 	or	r2,r3,r2
 80013f4:	10ffffcc 	andi	r3,r2,65535
 80013f8:	d0a6c717 	ldw	r2,-25828(gp)
 80013fc:	108002c3 	ldbu	r2,11(r2)
 8001400:	10803fcc 	andi	r2,r2,255
 8001404:	1885883a 	add	r2,r3,r2
 8001408:	10bfffcc 	andi	r2,r2,65535
 800140c:	2089883a 	add	r4,r4,r2
 8001410:	8003cec0 	call	8003cec <DEC>
 8001414:	d0e6c717 	ldw	r3,-25828(gp)
 8001418:	008001c4 	movi	r2,7
 800141c:	18800485 	stb	r2,18(r3)
 8001420:	00064006 	br	8002d24 <cpu_exec+0x2a74>
  case 0xC6: // ZP
    DEC( &CPU->MEM[ cpu_read() ] ); CPU->T = 5; break;
 8001424:	d0a6c717 	ldw	r2,-25828(gp)
 8001428:	14000617 	ldw	r16,24(r2)
 800142c:	80033500 	call	8003350 <cpu_read>
 8001430:	10803fcc 	andi	r2,r2,255
 8001434:	8089883a 	add	r4,r16,r2
 8001438:	8003cec0 	call	8003cec <DEC>
 800143c:	d0e6c717 	ldw	r3,-25828(gp)
 8001440:	00800144 	movi	r2,5
 8001444:	18800485 	stb	r2,18(r3)
 8001448:	00063606 	br	8002d24 <cpu_exec+0x2a74>
  case 0xD6: // ZPX
    DEC( &CPU->MEM[ (cpu_read() + CPU->X) & 0xFF] ); CPU->T = 6; break;
 800144c:	d0a6c717 	ldw	r2,-25828(gp)
 8001450:	14000617 	ldw	r16,24(r2)
 8001454:	80033500 	call	8003350 <cpu_read>
 8001458:	10c03fcc 	andi	r3,r2,255
 800145c:	d0a6c717 	ldw	r2,-25828(gp)
 8001460:	108002c3 	ldbu	r2,11(r2)
 8001464:	10803fcc 	andi	r2,r2,255
 8001468:	1885883a 	add	r2,r3,r2
 800146c:	10803fcc 	andi	r2,r2,255
 8001470:	8089883a 	add	r4,r16,r2
 8001474:	8003cec0 	call	8003cec <DEC>
 8001478:	d0e6c717 	ldw	r3,-25828(gp)
 800147c:	00800184 	movi	r2,6
 8001480:	18800485 	stb	r2,18(r3)
 8001484:	00062706 	br	8002d24 <cpu_exec+0x2a74>

    // ############################ DEX ###################
  case 0xCA: // IMP
    --CPU->X;
 8001488:	d0e6c717 	ldw	r3,-25828(gp)
 800148c:	188002c3 	ldbu	r2,11(r3)
 8001490:	10bfffc4 	addi	r2,r2,-1
 8001494:	188002c5 	stb	r2,11(r3)
    CPU->P.Z = (CPU->X == 0) ? 1 : 0;
 8001498:	d0e6c717 	ldw	r3,-25828(gp)
 800149c:	d0a6c717 	ldw	r2,-25828(gp)
 80014a0:	108002c3 	ldbu	r2,11(r2)
 80014a4:	10803fcc 	andi	r2,r2,255
 80014a8:	1005003a 	cmpeq	r2,r2,zero
 80014ac:	18800105 	stb	r2,4(r3)
    CPU->P.N = ((CPU->X & 0x80) > 0) ? 1 : 0;
 80014b0:	d0e6c717 	ldw	r3,-25828(gp)
 80014b4:	d0a6c717 	ldw	r2,-25828(gp)
 80014b8:	108002c3 	ldbu	r2,11(r2)
 80014bc:	10803fcc 	andi	r2,r2,255
 80014c0:	1080200c 	andi	r2,r2,128
 80014c4:	10800048 	cmpgei	r2,r2,1
 80014c8:	18800245 	stb	r2,9(r3)
    printf("DEX!\n");
 80014cc:	01020074 	movhi	r4,2049
 80014d0:	211c2704 	addi	r4,r4,28828
 80014d4:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 80014d8:	d0e6c717 	ldw	r3,-25828(gp)
 80014dc:	00800084 	movi	r2,2
 80014e0:	18800485 	stb	r2,18(r3)
    break;
 80014e4:	00060f06 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## DEY #####################
  case 0x88:
    --CPU->Y;
 80014e8:	d0e6c717 	ldw	r3,-25828(gp)
 80014ec:	18800303 	ldbu	r2,12(r3)
 80014f0:	10bfffc4 	addi	r2,r2,-1
 80014f4:	18800305 	stb	r2,12(r3)
    CPU->P.Z = (CPU->Y == 0) ? 1 : 0;
 80014f8:	d0e6c717 	ldw	r3,-25828(gp)
 80014fc:	d0a6c717 	ldw	r2,-25828(gp)
 8001500:	10800303 	ldbu	r2,12(r2)
 8001504:	10803fcc 	andi	r2,r2,255
 8001508:	1005003a 	cmpeq	r2,r2,zero
 800150c:	18800105 	stb	r2,4(r3)
    CPU->P.N = ((CPU->Y & 0x80) > 0) ? 1 : 0;
 8001510:	d0e6c717 	ldw	r3,-25828(gp)
 8001514:	d0a6c717 	ldw	r2,-25828(gp)
 8001518:	10800303 	ldbu	r2,12(r2)
 800151c:	10803fcc 	andi	r2,r2,255
 8001520:	1080200c 	andi	r2,r2,128
 8001524:	10800048 	cmpgei	r2,r2,1
 8001528:	18800245 	stb	r2,9(r3)
    printf("DEY!\n");
 800152c:	01020074 	movhi	r4,2049
 8001530:	211c2904 	addi	r4,r4,28836
 8001534:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 8001538:	d0e6c717 	ldw	r3,-25828(gp)
 800153c:	00800084 	movi	r2,2
 8001540:	18800485 	stb	r2,18(r3)
    break;
 8001544:	0005f706 	br	8002d24 <cpu_exec+0x2a74>

    // ######################## EOR #######################
  case 0x4D: // ABS
    CPU->A = CPU->A ^ ABS(); printf("EOR!\n"); CPU->T = 4; break;
 8001548:	d466c717 	ldw	r17,-25828(gp)
 800154c:	d0a6c717 	ldw	r2,-25828(gp)
 8001550:	14000283 	ldbu	r16,10(r2)
 8001554:	800364c0 	call	800364c <ABS>
 8001558:	8084f03a 	xor	r2,r16,r2
 800155c:	88800285 	stb	r2,10(r17)
 8001560:	01020074 	movhi	r4,2049
 8001564:	211c2b04 	addi	r4,r4,28844
 8001568:	8005d500 	call	8005d50 <puts>
 800156c:	d0e6c717 	ldw	r3,-25828(gp)
 8001570:	00800104 	movi	r2,4
 8001574:	18800485 	stb	r2,18(r3)
 8001578:	0005ea06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x5D: // ABSX
    CPU->A = CPU->A ^ ABSX(); printf("EOR!\n"); CPU->T = 4; break;
 800157c:	d466c717 	ldw	r17,-25828(gp)
 8001580:	d0a6c717 	ldw	r2,-25828(gp)
 8001584:	14000283 	ldbu	r16,10(r2)
 8001588:	80036a80 	call	80036a8 <ABSX>
 800158c:	8084f03a 	xor	r2,r16,r2
 8001590:	88800285 	stb	r2,10(r17)
 8001594:	01020074 	movhi	r4,2049
 8001598:	211c2b04 	addi	r4,r4,28844
 800159c:	8005d500 	call	8005d50 <puts>
 80015a0:	d0e6c717 	ldw	r3,-25828(gp)
 80015a4:	00800104 	movi	r2,4
 80015a8:	18800485 	stb	r2,18(r3)
 80015ac:	0005dd06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x59: // ABSY
    CPU->A = CPU->A ^ ABSY(); printf("EOR!\n"); CPU->T = 4; break;
 80015b0:	d466c717 	ldw	r17,-25828(gp)
 80015b4:	d0a6c717 	ldw	r2,-25828(gp)
 80015b8:	14000283 	ldbu	r16,10(r2)
 80015bc:	80037180 	call	8003718 <ABSY>
 80015c0:	8084f03a 	xor	r2,r16,r2
 80015c4:	88800285 	stb	r2,10(r17)
 80015c8:	01020074 	movhi	r4,2049
 80015cc:	211c2b04 	addi	r4,r4,28844
 80015d0:	8005d500 	call	8005d50 <puts>
 80015d4:	d0e6c717 	ldw	r3,-25828(gp)
 80015d8:	00800104 	movi	r2,4
 80015dc:	18800485 	stb	r2,18(r3)
 80015e0:	0005d006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x49: // IMM
    CPU->A = CPU->A ^ IMM(); printf("EOR!\n"); CPU->T = 2; break;
 80015e4:	d466c717 	ldw	r17,-25828(gp)
 80015e8:	d0a6c717 	ldw	r2,-25828(gp)
 80015ec:	14000283 	ldbu	r16,10(r2)
 80015f0:	80038cc0 	call	80038cc <IMM>
 80015f4:	8084f03a 	xor	r2,r16,r2
 80015f8:	88800285 	stb	r2,10(r17)
 80015fc:	01020074 	movhi	r4,2049
 8001600:	211c2b04 	addi	r4,r4,28844
 8001604:	8005d500 	call	8005d50 <puts>
 8001608:	d0e6c717 	ldw	r3,-25828(gp)
 800160c:	00800084 	movi	r2,2
 8001610:	18800485 	stb	r2,18(r3)
 8001614:	0005c306 	br	8002d24 <cpu_exec+0x2a74>
  case 0x51: // INDY
    CPU->A = CPU->A ^ INDY(); printf("EOR!\n"); CPU->T = 5; break;
 8001618:	d466c717 	ldw	r17,-25828(gp)
 800161c:	d0a6c717 	ldw	r2,-25828(gp)
 8001620:	14000283 	ldbu	r16,10(r2)
 8001624:	80038280 	call	8003828 <INDY>
 8001628:	8084f03a 	xor	r2,r16,r2
 800162c:	88800285 	stb	r2,10(r17)
 8001630:	01020074 	movhi	r4,2049
 8001634:	211c2b04 	addi	r4,r4,28844
 8001638:	8005d500 	call	8005d50 <puts>
 800163c:	d0e6c717 	ldw	r3,-25828(gp)
 8001640:	00800144 	movi	r2,5
 8001644:	18800485 	stb	r2,18(r3)
 8001648:	0005b606 	br	8002d24 <cpu_exec+0x2a74>
  case 0x41: // XIND
    CPU->A = CPU->A ^ XIND(); printf("EOR!\n"); CPU->T = 6; break;
 800164c:	d466c717 	ldw	r17,-25828(gp)
 8001650:	d0a6c717 	ldw	r2,-25828(gp)
 8001654:	14000283 	ldbu	r16,10(r2)
 8001658:	80037880 	call	8003788 <XIND>
 800165c:	8084f03a 	xor	r2,r16,r2
 8001660:	88800285 	stb	r2,10(r17)
 8001664:	01020074 	movhi	r4,2049
 8001668:	211c2b04 	addi	r4,r4,28844
 800166c:	8005d500 	call	8005d50 <puts>
 8001670:	d0e6c717 	ldw	r3,-25828(gp)
 8001674:	00800184 	movi	r2,6
 8001678:	18800485 	stb	r2,18(r3)
 800167c:	0005a906 	br	8002d24 <cpu_exec+0x2a74>
  case 0x45: // ZP
    temp = ZP();
 8001680:	80038f80 	call	80038f8 <ZP>
 8001684:	10803fcc 	andi	r2,r2,255
 8001688:	e0bffe8d 	sth	r2,-6(fp)
    CPU->A = CPU->A ^ temp; printf("EOR with %x and %x = %x, at PC: %x!\n", CPU->A, temp, CPU->A ^ temp, CPU->PC); CPU->T = 3; break;
 800168c:	d126c717 	ldw	r4,-25828(gp)
 8001690:	d0a6c717 	ldw	r2,-25828(gp)
 8001694:	10c00283 	ldbu	r3,10(r2)
 8001698:	e0bffe8b 	ldhu	r2,-6(fp)
 800169c:	1884f03a 	xor	r2,r3,r2
 80016a0:	20800285 	stb	r2,10(r4)
 80016a4:	d0a6c717 	ldw	r2,-25828(gp)
 80016a8:	10800283 	ldbu	r2,10(r2)
 80016ac:	11403fcc 	andi	r5,r2,255
 80016b0:	e1bffe8b 	ldhu	r6,-6(fp)
 80016b4:	d0a6c717 	ldw	r2,-25828(gp)
 80016b8:	10800283 	ldbu	r2,10(r2)
 80016bc:	10c03fcc 	andi	r3,r2,255
 80016c0:	e0bffe8b 	ldhu	r2,-6(fp)
 80016c4:	188ef03a 	xor	r7,r3,r2
 80016c8:	d0a6c717 	ldw	r2,-25828(gp)
 80016cc:	1080000b 	ldhu	r2,0(r2)
 80016d0:	10bfffcc 	andi	r2,r2,65535
 80016d4:	d8800015 	stw	r2,0(sp)
 80016d8:	01020074 	movhi	r4,2049
 80016dc:	211c2d04 	addi	r4,r4,28852
 80016e0:	8005c140 	call	8005c14 <printf>
 80016e4:	d0e6c717 	ldw	r3,-25828(gp)
 80016e8:	008000c4 	movi	r2,3
 80016ec:	18800485 	stb	r2,18(r3)
 80016f0:	00058c06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x55: // ZPX
    CPU->A = CPU->A ^ ZPX(); printf("EOR!\n"); CPU->T = 4; break;
 80016f4:	d466c717 	ldw	r17,-25828(gp)
 80016f8:	d0a6c717 	ldw	r2,-25828(gp)
 80016fc:	14000283 	ldbu	r16,10(r2)
 8001700:	800392c0 	call	800392c <ZPX>
 8001704:	8084f03a 	xor	r2,r16,r2
 8001708:	88800285 	stb	r2,10(r17)
 800170c:	01020074 	movhi	r4,2049
 8001710:	211c2b04 	addi	r4,r4,28844
 8001714:	8005d500 	call	8005d50 <puts>
 8001718:	d0e6c717 	ldw	r3,-25828(gp)
 800171c:	00800104 	movi	r2,4
 8001720:	18800485 	stb	r2,18(r3)
 8001724:	00057f06 	br	8002d24 <cpu_exec+0x2a74>

    // ######################## INC #######################
  case 0xEE: // ABS
	temp = cpu_read();
 8001728:	80033500 	call	8003350 <cpu_read>
 800172c:	10803fcc 	andi	r2,r2,255
 8001730:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8001734:	80033500 	call	8003350 <cpu_read>
 8001738:	10803fcc 	andi	r2,r2,255
 800173c:	1004923a 	slli	r2,r2,8
 8001740:	e0bffe0d 	sth	r2,-8(fp)
    INC( &CPU->MEM[ temp | temp2 ] ); CPU->T = 6; break;
 8001744:	d0a6c717 	ldw	r2,-25828(gp)
 8001748:	11000617 	ldw	r4,24(r2)
 800174c:	e0fffe8b 	ldhu	r3,-6(fp)
 8001750:	e0bffe0b 	ldhu	r2,-8(fp)
 8001754:	1884b03a 	or	r2,r3,r2
 8001758:	10bfffcc 	andi	r2,r2,65535
 800175c:	2089883a 	add	r4,r4,r2
 8001760:	8003d740 	call	8003d74 <INC>
 8001764:	d0e6c717 	ldw	r3,-25828(gp)
 8001768:	00800184 	movi	r2,6
 800176c:	18800485 	stb	r2,18(r3)
 8001770:	00056c06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xFE: // ABSX
	temp = cpu_read();
 8001774:	80033500 	call	8003350 <cpu_read>
 8001778:	10803fcc 	andi	r2,r2,255
 800177c:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8001780:	80033500 	call	8003350 <cpu_read>
 8001784:	10803fcc 	andi	r2,r2,255
 8001788:	1004923a 	slli	r2,r2,8
 800178c:	e0bffe0d 	sth	r2,-8(fp)
    INC( &CPU->MEM[ ( ( temp | temp2 ) + CPU->X) & 0xFFFF ] ); CPU->T = 7; break;
 8001790:	d0a6c717 	ldw	r2,-25828(gp)
 8001794:	11000617 	ldw	r4,24(r2)
 8001798:	e0fffe8b 	ldhu	r3,-6(fp)
 800179c:	e0bffe0b 	ldhu	r2,-8(fp)
 80017a0:	1884b03a 	or	r2,r3,r2
 80017a4:	10ffffcc 	andi	r3,r2,65535
 80017a8:	d0a6c717 	ldw	r2,-25828(gp)
 80017ac:	108002c3 	ldbu	r2,11(r2)
 80017b0:	10803fcc 	andi	r2,r2,255
 80017b4:	1885883a 	add	r2,r3,r2
 80017b8:	10bfffcc 	andi	r2,r2,65535
 80017bc:	2089883a 	add	r4,r4,r2
 80017c0:	8003d740 	call	8003d74 <INC>
 80017c4:	d0e6c717 	ldw	r3,-25828(gp)
 80017c8:	008001c4 	movi	r2,7
 80017cc:	18800485 	stb	r2,18(r3)
 80017d0:	00055406 	br	8002d24 <cpu_exec+0x2a74>
  case 0xE6: // ZP
    INC( &CPU->MEM[ cpu_read() ] ); CPU->T = 5; break;
 80017d4:	d0a6c717 	ldw	r2,-25828(gp)
 80017d8:	14000617 	ldw	r16,24(r2)
 80017dc:	80033500 	call	8003350 <cpu_read>
 80017e0:	10803fcc 	andi	r2,r2,255
 80017e4:	8089883a 	add	r4,r16,r2
 80017e8:	8003d740 	call	8003d74 <INC>
 80017ec:	d0e6c717 	ldw	r3,-25828(gp)
 80017f0:	00800144 	movi	r2,5
 80017f4:	18800485 	stb	r2,18(r3)
 80017f8:	00054a06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xF6: // ZPX
    INC( &CPU->MEM[ (cpu_read() + CPU->X) & 0xFF ] ); CPU->T = 6; break;
 80017fc:	d0a6c717 	ldw	r2,-25828(gp)
 8001800:	14000617 	ldw	r16,24(r2)
 8001804:	80033500 	call	8003350 <cpu_read>
 8001808:	10c03fcc 	andi	r3,r2,255
 800180c:	d0a6c717 	ldw	r2,-25828(gp)
 8001810:	108002c3 	ldbu	r2,11(r2)
 8001814:	10803fcc 	andi	r2,r2,255
 8001818:	1885883a 	add	r2,r3,r2
 800181c:	10803fcc 	andi	r2,r2,255
 8001820:	8089883a 	add	r4,r16,r2
 8001824:	8003d740 	call	8003d74 <INC>
 8001828:	d0e6c717 	ldw	r3,-25828(gp)
 800182c:	00800184 	movi	r2,6
 8001830:	18800485 	stb	r2,18(r3)
 8001834:	00053b06 	br	8002d24 <cpu_exec+0x2a74>

    // ########################### INX #####################
  case 0xE8:
    ++CPU->X;
 8001838:	d0e6c717 	ldw	r3,-25828(gp)
 800183c:	188002c3 	ldbu	r2,11(r3)
 8001840:	10800044 	addi	r2,r2,1
 8001844:	188002c5 	stb	r2,11(r3)
    CPU->P.Z = (CPU->X == 0) ? 1 : 0;
 8001848:	d0e6c717 	ldw	r3,-25828(gp)
 800184c:	d0a6c717 	ldw	r2,-25828(gp)
 8001850:	108002c3 	ldbu	r2,11(r2)
 8001854:	10803fcc 	andi	r2,r2,255
 8001858:	1005003a 	cmpeq	r2,r2,zero
 800185c:	18800105 	stb	r2,4(r3)
    CPU->P.N = ((CPU->X & 0x80) > 0) ? 1 : 0;
 8001860:	d0e6c717 	ldw	r3,-25828(gp)
 8001864:	d0a6c717 	ldw	r2,-25828(gp)
 8001868:	108002c3 	ldbu	r2,11(r2)
 800186c:	10803fcc 	andi	r2,r2,255
 8001870:	1080200c 	andi	r2,r2,128
 8001874:	10800048 	cmpgei	r2,r2,1
 8001878:	18800245 	stb	r2,9(r3)
    printf("INX!\n");
 800187c:	01020074 	movhi	r4,2049
 8001880:	211c3704 	addi	r4,r4,28892
 8001884:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 8001888:	d0e6c717 	ldw	r3,-25828(gp)
 800188c:	00800084 	movi	r2,2
 8001890:	18800485 	stb	r2,18(r3)
    break;
 8001894:	00052306 	br	8002d24 <cpu_exec+0x2a74>

    // ############################### INY ###################
  case 0xC8:
    ++CPU->Y;
 8001898:	d0e6c717 	ldw	r3,-25828(gp)
 800189c:	18800303 	ldbu	r2,12(r3)
 80018a0:	10800044 	addi	r2,r2,1
 80018a4:	18800305 	stb	r2,12(r3)
    CPU->P.Z = (CPU->Y == 0) ? 1 : 0;
 80018a8:	d0e6c717 	ldw	r3,-25828(gp)
 80018ac:	d0a6c717 	ldw	r2,-25828(gp)
 80018b0:	10800303 	ldbu	r2,12(r2)
 80018b4:	10803fcc 	andi	r2,r2,255
 80018b8:	1005003a 	cmpeq	r2,r2,zero
 80018bc:	18800105 	stb	r2,4(r3)
    CPU->P.N = ((CPU->Y & 0x80) > 0) ? 1 : 0;
 80018c0:	d0e6c717 	ldw	r3,-25828(gp)
 80018c4:	d0a6c717 	ldw	r2,-25828(gp)
 80018c8:	10800303 	ldbu	r2,12(r2)
 80018cc:	10803fcc 	andi	r2,r2,255
 80018d0:	1080200c 	andi	r2,r2,128
 80018d4:	10800048 	cmpgei	r2,r2,1
 80018d8:	18800245 	stb	r2,9(r3)
    printf("INY!\n");
 80018dc:	01020074 	movhi	r4,2049
 80018e0:	211c3904 	addi	r4,r4,28900
 80018e4:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 80018e8:	d0e6c717 	ldw	r3,-25828(gp)
 80018ec:	00800084 	movi	r2,2
 80018f0:	18800485 	stb	r2,18(r3)
    break;
 80018f4:	00050b06 	br	8002d24 <cpu_exec+0x2a74>

    // ############################## JMP #####################
  case 0x4C: // ABS
	temp = cpu_read();
 80018f8:	80033500 	call	8003350 <cpu_read>
 80018fc:	10803fcc 	andi	r2,r2,255
 8001900:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8001904:	80033500 	call	8003350 <cpu_read>
 8001908:	10803fcc 	andi	r2,r2,255
 800190c:	1004923a 	slli	r2,r2,8
 8001910:	e0bffe0d 	sth	r2,-8(fp)
    CPU->PC = temp | temp2; printf("JMP!\n"); CPU->T = 3; break;
 8001914:	d126c717 	ldw	r4,-25828(gp)
 8001918:	e0fffe8b 	ldhu	r3,-6(fp)
 800191c:	e0bffe0b 	ldhu	r2,-8(fp)
 8001920:	1884b03a 	or	r2,r3,r2
 8001924:	2080000d 	sth	r2,0(r4)
 8001928:	01020074 	movhi	r4,2049
 800192c:	211c3b04 	addi	r4,r4,28908
 8001930:	8005d500 	call	8005d50 <puts>
 8001934:	d0e6c717 	ldw	r3,-25828(gp)
 8001938:	008000c4 	movi	r2,3
 800193c:	18800485 	stb	r2,18(r3)
 8001940:	0004f806 	br	8002d24 <cpu_exec+0x2a74>
  case 0x6C: // IND
    temp = cpu_read();
 8001944:	80033500 	call	8003350 <cpu_read>
 8001948:	10803fcc 	andi	r2,r2,255
 800194c:	e0bffe8d 	sth	r2,-6(fp)
    CPU->PC = CPU->MEM[ temp | ((temp+1) << 8) ]; printf("JMP!\n"); CPU->T = 5; break;
 8001950:	d166c717 	ldw	r5,-25828(gp)
 8001954:	d0a6c717 	ldw	r2,-25828(gp)
 8001958:	11000617 	ldw	r4,24(r2)
 800195c:	e0fffe8b 	ldhu	r3,-6(fp)
 8001960:	e0bffe8b 	ldhu	r2,-6(fp)
 8001964:	10800044 	addi	r2,r2,1
 8001968:	1004923a 	slli	r2,r2,8
 800196c:	1884b03a 	or	r2,r3,r2
 8001970:	2085883a 	add	r2,r4,r2
 8001974:	10800003 	ldbu	r2,0(r2)
 8001978:	10803fcc 	andi	r2,r2,255
 800197c:	2880000d 	sth	r2,0(r5)
 8001980:	01020074 	movhi	r4,2049
 8001984:	211c3b04 	addi	r4,r4,28908
 8001988:	8005d500 	call	8005d50 <puts>
 800198c:	d0e6c717 	ldw	r3,-25828(gp)
 8001990:	00800144 	movi	r2,5
 8001994:	18800485 	stb	r2,18(r3)
 8001998:	0004e206 	br	8002d24 <cpu_exec+0x2a74>
       Push PC +1 to stack and set the PC to the operand. PC + 1
       is pushed to the STACK becuase and previous two bytes are
       from the operands of JSR, and we wish to return to the next
       opcode when we Return from Subroutine (RTS)*/

    temp_addr = CPU->PC + 1;  // The address to be pushed to Stack
 800199c:	d0a6c717 	ldw	r2,-25828(gp)
 80019a0:	1080000b 	ldhu	r2,0(r2)
 80019a4:	10800044 	addi	r2,r2,1
 80019a8:	e0bffd8d 	sth	r2,-10(fp)
    cpu_mem_write( (temp_addr >> 8) & 0xFF, STACK + CPU->S); // Push PCh
 80019ac:	e0bffd8b 	ldhu	r2,-10(fp)
 80019b0:	1004d23a 	srli	r2,r2,8
 80019b4:	11003fcc 	andi	r4,r2,255
 80019b8:	d0a6c717 	ldw	r2,-25828(gp)
 80019bc:	10800083 	ldbu	r2,2(r2)
 80019c0:	10803fcc 	andi	r2,r2,255
 80019c4:	10804004 	addi	r2,r2,256
 80019c8:	117fffcc 	andi	r5,r2,65535
 80019cc:	80034540 	call	8003454 <cpu_mem_write>
    --CPU->S;
 80019d0:	d0e6c717 	ldw	r3,-25828(gp)
 80019d4:	18800083 	ldbu	r2,2(r3)
 80019d8:	10bfffc4 	addi	r2,r2,-1
 80019dc:	18800085 	stb	r2,2(r3)
    cpu_mem_write( (temp_addr & 0xFF), STACK + CPU->S);      // Push PCl
 80019e0:	e0bffd8b 	ldhu	r2,-10(fp)
 80019e4:	11003fcc 	andi	r4,r2,255
 80019e8:	d0a6c717 	ldw	r2,-25828(gp)
 80019ec:	10800083 	ldbu	r2,2(r2)
 80019f0:	10803fcc 	andi	r2,r2,255
 80019f4:	10804004 	addi	r2,r2,256
 80019f8:	117fffcc 	andi	r5,r2,65535
 80019fc:	80034540 	call	8003454 <cpu_mem_write>
    --CPU->S;
 8001a00:	d0e6c717 	ldw	r3,-25828(gp)
 8001a04:	18800083 	ldbu	r2,2(r3)
 8001a08:	10bfffc4 	addi	r2,r2,-1
 8001a0c:	18800085 	stb	r2,2(r3)
	temp = cpu_read();
 8001a10:	80033500 	call	8003350 <cpu_read>
 8001a14:	10803fcc 	andi	r2,r2,255
 8001a18:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8001a1c:	80033500 	call	8003350 <cpu_read>
 8001a20:	10803fcc 	andi	r2,r2,255
 8001a24:	1004923a 	slli	r2,r2,8
 8001a28:	e0bffe0d 	sth	r2,-8(fp)
    CPU->PC = temp | temp2;
 8001a2c:	d126c717 	ldw	r4,-25828(gp)
 8001a30:	e0fffe8b 	ldhu	r3,-6(fp)
 8001a34:	e0bffe0b 	ldhu	r2,-8(fp)
 8001a38:	1884b03a 	or	r2,r3,r2
 8001a3c:	2080000d 	sth	r2,0(r4)
    printf("JSR!\n");
 8001a40:	01020074 	movhi	r4,2049
 8001a44:	211c3d04 	addi	r4,r4,28916
 8001a48:	8005d500 	call	8005d50 <puts>
    CPU->T = 6;
 8001a4c:	d0e6c717 	ldw	r3,-25828(gp)
 8001a50:	00800184 	movi	r2,6
 8001a54:	18800485 	stb	r2,18(r3)
    break;
 8001a58:	0004b206 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## LDA #######################
  case 0xAD: // ABS
    operand = ABS(); LDA( operand ); CPU->T = 4; break;
 8001a5c:	800364c0 	call	800364c <ABS>
 8001a60:	e0bffd05 	stb	r2,-12(fp)
 8001a64:	e13ffd03 	ldbu	r4,-12(fp)
 8001a68:	8003e000 	call	8003e00 <LDA>
 8001a6c:	d0e6c717 	ldw	r3,-25828(gp)
 8001a70:	00800104 	movi	r2,4
 8001a74:	18800485 	stb	r2,18(r3)
 8001a78:	0004aa06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xBD: // ABSX
    operand = ABSX(); LDA( operand ); CPU->T = 4; break;
 8001a7c:	80036a80 	call	80036a8 <ABSX>
 8001a80:	e0bffd05 	stb	r2,-12(fp)
 8001a84:	e13ffd03 	ldbu	r4,-12(fp)
 8001a88:	8003e000 	call	8003e00 <LDA>
 8001a8c:	d0e6c717 	ldw	r3,-25828(gp)
 8001a90:	00800104 	movi	r2,4
 8001a94:	18800485 	stb	r2,18(r3)
 8001a98:	0004a206 	br	8002d24 <cpu_exec+0x2a74>
  case 0xB9: // ABSY
    operand = ABSY(); LDA( operand ); CPU->T = 4; break;
 8001a9c:	80037180 	call	8003718 <ABSY>
 8001aa0:	e0bffd05 	stb	r2,-12(fp)
 8001aa4:	e13ffd03 	ldbu	r4,-12(fp)
 8001aa8:	8003e000 	call	8003e00 <LDA>
 8001aac:	d0e6c717 	ldw	r3,-25828(gp)
 8001ab0:	00800104 	movi	r2,4
 8001ab4:	18800485 	stb	r2,18(r3)
 8001ab8:	00049a06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xA9: // IMM
    LDA ( CPU->MEM[ CPU->PC++] ); CPU->T = 2; break;
 8001abc:	d0a6c717 	ldw	r2,-25828(gp)
 8001ac0:	10c00617 	ldw	r3,24(r2)
 8001ac4:	d166c717 	ldw	r5,-25828(gp)
 8001ac8:	2900000b 	ldhu	r4,0(r5)
 8001acc:	20bfffcc 	andi	r2,r4,65535
 8001ad0:	1885883a 	add	r2,r3,r2
 8001ad4:	10800003 	ldbu	r2,0(r2)
 8001ad8:	10c03fcc 	andi	r3,r2,255
 8001adc:	20800044 	addi	r2,r4,1
 8001ae0:	2880000d 	sth	r2,0(r5)
 8001ae4:	1809883a 	mov	r4,r3
 8001ae8:	8003e000 	call	8003e00 <LDA>
 8001aec:	d0e6c717 	ldw	r3,-25828(gp)
 8001af0:	00800084 	movi	r2,2
 8001af4:	18800485 	stb	r2,18(r3)
 8001af8:	00048a06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xB1: // INDY
    operand = INDY(); LDA( operand ); CPU->T = 5; break;
 8001afc:	80038280 	call	8003828 <INDY>
 8001b00:	e0bffd05 	stb	r2,-12(fp)
 8001b04:	e13ffd03 	ldbu	r4,-12(fp)
 8001b08:	8003e000 	call	8003e00 <LDA>
 8001b0c:	d0e6c717 	ldw	r3,-25828(gp)
 8001b10:	00800144 	movi	r2,5
 8001b14:	18800485 	stb	r2,18(r3)
 8001b18:	00048206 	br	8002d24 <cpu_exec+0x2a74>
  case 0xA1: // XIND
    operand = XIND(); LDA( operand ); CPU->T = 6; break;
 8001b1c:	80037880 	call	8003788 <XIND>
 8001b20:	e0bffd05 	stb	r2,-12(fp)
 8001b24:	e13ffd03 	ldbu	r4,-12(fp)
 8001b28:	8003e000 	call	8003e00 <LDA>
 8001b2c:	d0e6c717 	ldw	r3,-25828(gp)
 8001b30:	00800184 	movi	r2,6
 8001b34:	18800485 	stb	r2,18(r3)
 8001b38:	00047a06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xA5: // ZP
    operand = ZP(); LDA( operand ); CPU->T = 3; break;
 8001b3c:	80038f80 	call	80038f8 <ZP>
 8001b40:	e0bffd05 	stb	r2,-12(fp)
 8001b44:	e13ffd03 	ldbu	r4,-12(fp)
 8001b48:	8003e000 	call	8003e00 <LDA>
 8001b4c:	d0e6c717 	ldw	r3,-25828(gp)
 8001b50:	008000c4 	movi	r2,3
 8001b54:	18800485 	stb	r2,18(r3)
 8001b58:	00047206 	br	8002d24 <cpu_exec+0x2a74>
  case 0xB5: // ZPX
    operand = ZPX(); LDA( operand ); CPU->T = 4; break;
 8001b5c:	800392c0 	call	800392c <ZPX>
 8001b60:	e0bffd05 	stb	r2,-12(fp)
 8001b64:	e13ffd03 	ldbu	r4,-12(fp)
 8001b68:	8003e000 	call	8003e00 <LDA>
 8001b6c:	d0e6c717 	ldw	r3,-25828(gp)
 8001b70:	00800104 	movi	r2,4
 8001b74:	18800485 	stb	r2,18(r3)
 8001b78:	00046a06 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## LDX #######################
  case 0xAE: // ABS
    operand = ABS(); LDX( operand ); CPU->T = 4; break;
 8001b7c:	800364c0 	call	800364c <ABS>
 8001b80:	e0bffd05 	stb	r2,-12(fp)
 8001b84:	e13ffd03 	ldbu	r4,-12(fp)
 8001b88:	8003e780 	call	8003e78 <LDX>
 8001b8c:	d0e6c717 	ldw	r3,-25828(gp)
 8001b90:	00800104 	movi	r2,4
 8001b94:	18800485 	stb	r2,18(r3)
 8001b98:	00046206 	br	8002d24 <cpu_exec+0x2a74>
  case 0xBE: // ABSY
    operand = ABS(); LDX( operand ); CPU->T = 4; break;
 8001b9c:	800364c0 	call	800364c <ABS>
 8001ba0:	e0bffd05 	stb	r2,-12(fp)
 8001ba4:	e13ffd03 	ldbu	r4,-12(fp)
 8001ba8:	8003e780 	call	8003e78 <LDX>
 8001bac:	d0e6c717 	ldw	r3,-25828(gp)
 8001bb0:	00800104 	movi	r2,4
 8001bb4:	18800485 	stb	r2,18(r3)
 8001bb8:	00045a06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xA2: // IMM
    LDX( CPU->MEM[ CPU->PC++ ] ); CPU->T = 2; break;
 8001bbc:	d0a6c717 	ldw	r2,-25828(gp)
 8001bc0:	10c00617 	ldw	r3,24(r2)
 8001bc4:	d166c717 	ldw	r5,-25828(gp)
 8001bc8:	2900000b 	ldhu	r4,0(r5)
 8001bcc:	20bfffcc 	andi	r2,r4,65535
 8001bd0:	1885883a 	add	r2,r3,r2
 8001bd4:	10800003 	ldbu	r2,0(r2)
 8001bd8:	10c03fcc 	andi	r3,r2,255
 8001bdc:	20800044 	addi	r2,r4,1
 8001be0:	2880000d 	sth	r2,0(r5)
 8001be4:	1809883a 	mov	r4,r3
 8001be8:	8003e780 	call	8003e78 <LDX>
 8001bec:	d0e6c717 	ldw	r3,-25828(gp)
 8001bf0:	00800084 	movi	r2,2
 8001bf4:	18800485 	stb	r2,18(r3)
 8001bf8:	00044a06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xA6: // ZP
    operand = ZP(); LDX( operand ); CPU->T = 3; break;
 8001bfc:	80038f80 	call	80038f8 <ZP>
 8001c00:	e0bffd05 	stb	r2,-12(fp)
 8001c04:	e13ffd03 	ldbu	r4,-12(fp)
 8001c08:	8003e780 	call	8003e78 <LDX>
 8001c0c:	d0e6c717 	ldw	r3,-25828(gp)
 8001c10:	008000c4 	movi	r2,3
 8001c14:	18800485 	stb	r2,18(r3)
 8001c18:	00044206 	br	8002d24 <cpu_exec+0x2a74>
  case 0xB6: // ZPY
    operand = CPU->MEM[ ( cpu_read() + CPU->Y) & 0xFF ]; LDX( operand ); CPU->T = 4; break;
 8001c1c:	d0a6c717 	ldw	r2,-25828(gp)
 8001c20:	14000617 	ldw	r16,24(r2)
 8001c24:	80033500 	call	8003350 <cpu_read>
 8001c28:	10c03fcc 	andi	r3,r2,255
 8001c2c:	d0a6c717 	ldw	r2,-25828(gp)
 8001c30:	10800303 	ldbu	r2,12(r2)
 8001c34:	10803fcc 	andi	r2,r2,255
 8001c38:	1885883a 	add	r2,r3,r2
 8001c3c:	10803fcc 	andi	r2,r2,255
 8001c40:	8085883a 	add	r2,r16,r2
 8001c44:	10800003 	ldbu	r2,0(r2)
 8001c48:	e0bffd05 	stb	r2,-12(fp)
 8001c4c:	e13ffd03 	ldbu	r4,-12(fp)
 8001c50:	8003e780 	call	8003e78 <LDX>
 8001c54:	d0e6c717 	ldw	r3,-25828(gp)
 8001c58:	00800104 	movi	r2,4
 8001c5c:	18800485 	stb	r2,18(r3)
 8001c60:	00043006 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## LDY ######################
  case 0xAC: // ABS
    operand = ABS(); LDY( operand ); CPU->T = 4; break;
 8001c64:	800364c0 	call	800364c <ABS>
 8001c68:	e0bffd05 	stb	r2,-12(fp)
 8001c6c:	e13ffd03 	ldbu	r4,-12(fp)
 8001c70:	8003eec0 	call	8003eec <LDY>
 8001c74:	d0e6c717 	ldw	r3,-25828(gp)
 8001c78:	00800104 	movi	r2,4
 8001c7c:	18800485 	stb	r2,18(r3)
 8001c80:	00042806 	br	8002d24 <cpu_exec+0x2a74>
  case 0xBC: // ABSX
    operand = ABSX(); LDY( operand ); CPU->T = 4; break;
 8001c84:	80036a80 	call	80036a8 <ABSX>
 8001c88:	e0bffd05 	stb	r2,-12(fp)
 8001c8c:	e13ffd03 	ldbu	r4,-12(fp)
 8001c90:	8003eec0 	call	8003eec <LDY>
 8001c94:	d0e6c717 	ldw	r3,-25828(gp)
 8001c98:	00800104 	movi	r2,4
 8001c9c:	18800485 	stb	r2,18(r3)
 8001ca0:	00042006 	br	8002d24 <cpu_exec+0x2a74>
  case 0xA0: // IMM
    LDY( cpu_read() ); CPU->T = 2; break;
 8001ca4:	80033500 	call	8003350 <cpu_read>
 8001ca8:	11003fcc 	andi	r4,r2,255
 8001cac:	8003eec0 	call	8003eec <LDY>
 8001cb0:	d0e6c717 	ldw	r3,-25828(gp)
 8001cb4:	00800084 	movi	r2,2
 8001cb8:	18800485 	stb	r2,18(r3)
 8001cbc:	00041906 	br	8002d24 <cpu_exec+0x2a74>
  case 0xA4: // ZP
    operand = ZP(); LDY( operand ); CPU->T = 3; break;
 8001cc0:	80038f80 	call	80038f8 <ZP>
 8001cc4:	e0bffd05 	stb	r2,-12(fp)
 8001cc8:	e13ffd03 	ldbu	r4,-12(fp)
 8001ccc:	8003eec0 	call	8003eec <LDY>
 8001cd0:	d0e6c717 	ldw	r3,-25828(gp)
 8001cd4:	008000c4 	movi	r2,3
 8001cd8:	18800485 	stb	r2,18(r3)
 8001cdc:	00041106 	br	8002d24 <cpu_exec+0x2a74>
  case 0xB4: // ZPX
    operand = ZPX(); LDY( operand ); CPU->T = 4; break;
 8001ce0:	800392c0 	call	800392c <ZPX>
 8001ce4:	e0bffd05 	stb	r2,-12(fp)
 8001ce8:	e13ffd03 	ldbu	r4,-12(fp)
 8001cec:	8003eec0 	call	8003eec <LDY>
 8001cf0:	d0e6c717 	ldw	r3,-25828(gp)
 8001cf4:	00800104 	movi	r2,4
 8001cf8:	18800485 	stb	r2,18(r3)
 8001cfc:	00040906 	br	8002d24 <cpu_exec+0x2a74>

    // ####################### LSR #########################
    // TODO: Update LSR to check for memory mirroring and remove & operator
  case 0x4E: // ABS
	temp = cpu_read();
 8001d00:	80033500 	call	8003350 <cpu_read>
 8001d04:	10803fcc 	andi	r2,r2,255
 8001d08:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8001d0c:	80033500 	call	8003350 <cpu_read>
 8001d10:	10803fcc 	andi	r2,r2,255
 8001d14:	1004923a 	slli	r2,r2,8
 8001d18:	e0bffe0d 	sth	r2,-8(fp)
    LSR( &CPU->MEM[  ( temp | temp2 ) ]); CPU->T = 6; break;
 8001d1c:	d0a6c717 	ldw	r2,-25828(gp)
 8001d20:	11000617 	ldw	r4,24(r2)
 8001d24:	e0fffe8b 	ldhu	r3,-6(fp)
 8001d28:	e0bffe0b 	ldhu	r2,-8(fp)
 8001d2c:	1884b03a 	or	r2,r3,r2
 8001d30:	10bfffcc 	andi	r2,r2,65535
 8001d34:	2089883a 	add	r4,r4,r2
 8001d38:	8003f600 	call	8003f60 <LSR>
 8001d3c:	d0e6c717 	ldw	r3,-25828(gp)
 8001d40:	00800184 	movi	r2,6
 8001d44:	18800485 	stb	r2,18(r3)
 8001d48:	0003f606 	br	8002d24 <cpu_exec+0x2a74>
  case 0x5E: // ABSX
	temp = cpu_read();
 8001d4c:	80033500 	call	8003350 <cpu_read>
 8001d50:	10803fcc 	andi	r2,r2,255
 8001d54:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8001d58:	80033500 	call	8003350 <cpu_read>
 8001d5c:	10803fcc 	andi	r2,r2,255
 8001d60:	1004923a 	slli	r2,r2,8
 8001d64:	e0bffe0d 	sth	r2,-8(fp)
    LSR( &CPU->MEM[  (( temp | temp2) + CPU->X ) & 0xFFFF  ] );
 8001d68:	d0a6c717 	ldw	r2,-25828(gp)
 8001d6c:	11000617 	ldw	r4,24(r2)
 8001d70:	e0fffe8b 	ldhu	r3,-6(fp)
 8001d74:	e0bffe0b 	ldhu	r2,-8(fp)
 8001d78:	1884b03a 	or	r2,r3,r2
 8001d7c:	10ffffcc 	andi	r3,r2,65535
 8001d80:	d0a6c717 	ldw	r2,-25828(gp)
 8001d84:	108002c3 	ldbu	r2,11(r2)
 8001d88:	10803fcc 	andi	r2,r2,255
 8001d8c:	1885883a 	add	r2,r3,r2
 8001d90:	10bfffcc 	andi	r2,r2,65535
 8001d94:	2089883a 	add	r4,r4,r2
 8001d98:	8003f600 	call	8003f60 <LSR>
    CPU->T = 7;
 8001d9c:	d0e6c717 	ldw	r3,-25828(gp)
 8001da0:	008001c4 	movi	r2,7
 8001da4:	18800485 	stb	r2,18(r3)
    break;
 8001da8:	0003de06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x4A: // ACC
    LSR( &CPU->A ); CPU->T = 2; break;
 8001dac:	d0a6c717 	ldw	r2,-25828(gp)
 8001db0:	11000284 	addi	r4,r2,10
 8001db4:	8003f600 	call	8003f60 <LSR>
 8001db8:	d0e6c717 	ldw	r3,-25828(gp)
 8001dbc:	00800084 	movi	r2,2
 8001dc0:	18800485 	stb	r2,18(r3)
 8001dc4:	0003d706 	br	8002d24 <cpu_exec+0x2a74>
  case 0x46: // ZP
    LSR( &CPU->MEM[ cpu_read() ] ); CPU->T = 5; break;
 8001dc8:	d0a6c717 	ldw	r2,-25828(gp)
 8001dcc:	14000617 	ldw	r16,24(r2)
 8001dd0:	80033500 	call	8003350 <cpu_read>
 8001dd4:	10803fcc 	andi	r2,r2,255
 8001dd8:	8089883a 	add	r4,r16,r2
 8001ddc:	8003f600 	call	8003f60 <LSR>
 8001de0:	d0e6c717 	ldw	r3,-25828(gp)
 8001de4:	00800144 	movi	r2,5
 8001de8:	18800485 	stb	r2,18(r3)
 8001dec:	0003cd06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x56: // ZPX
    LSR( &CPU->MEM[ (cpu_read() + CPU->X) & 0xFF ] ); CPU->T = 6; break;
 8001df0:	d0a6c717 	ldw	r2,-25828(gp)
 8001df4:	14000617 	ldw	r16,24(r2)
 8001df8:	80033500 	call	8003350 <cpu_read>
 8001dfc:	10c03fcc 	andi	r3,r2,255
 8001e00:	d0a6c717 	ldw	r2,-25828(gp)
 8001e04:	108002c3 	ldbu	r2,11(r2)
 8001e08:	10803fcc 	andi	r2,r2,255
 8001e0c:	1885883a 	add	r2,r3,r2
 8001e10:	10803fcc 	andi	r2,r2,255
 8001e14:	8089883a 	add	r4,r16,r2
 8001e18:	8003f600 	call	8003f60 <LSR>
 8001e1c:	d0e6c717 	ldw	r3,-25828(gp)
 8001e20:	00800184 	movi	r2,6
 8001e24:	18800485 	stb	r2,18(r3)
 8001e28:	0003be06 	br	8002d24 <cpu_exec+0x2a74>

    // ######################### NOP #######################
  case 0xEA:
    printf("NOP!\n");
 8001e2c:	01020074 	movhi	r4,2049
 8001e30:	211c3f04 	addi	r4,r4,28924
 8001e34:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 8001e38:	d0e6c717 	ldw	r3,-25828(gp)
 8001e3c:	00800084 	movi	r2,2
 8001e40:	18800485 	stb	r2,18(r3)
    break;
 8001e44:	0003b706 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## ORA ######################
  case 0x0D: // ABS
    operand = ABS(); ORA( operand ); CPU->T = 4; break;
 8001e48:	800364c0 	call	800364c <ABS>
 8001e4c:	e0bffd05 	stb	r2,-12(fp)
 8001e50:	e13ffd03 	ldbu	r4,-12(fp)
 8001e54:	8003fe80 	call	8003fe8 <ORA>
 8001e58:	d0e6c717 	ldw	r3,-25828(gp)
 8001e5c:	00800104 	movi	r2,4
 8001e60:	18800485 	stb	r2,18(r3)
 8001e64:	0003af06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x1D: // ABSX
    operand = ABSX(); ORA( operand ); CPU->T = 4; break;
 8001e68:	80036a80 	call	80036a8 <ABSX>
 8001e6c:	e0bffd05 	stb	r2,-12(fp)
 8001e70:	e13ffd03 	ldbu	r4,-12(fp)
 8001e74:	8003fe80 	call	8003fe8 <ORA>
 8001e78:	d0e6c717 	ldw	r3,-25828(gp)
 8001e7c:	00800104 	movi	r2,4
 8001e80:	18800485 	stb	r2,18(r3)
 8001e84:	0003a706 	br	8002d24 <cpu_exec+0x2a74>
  case 0x19: // ABSY
    operand = ABSY(); ORA( operand ); CPU->T = 4; break;
 8001e88:	80037180 	call	8003718 <ABSY>
 8001e8c:	e0bffd05 	stb	r2,-12(fp)
 8001e90:	e13ffd03 	ldbu	r4,-12(fp)
 8001e94:	8003fe80 	call	8003fe8 <ORA>
 8001e98:	d0e6c717 	ldw	r3,-25828(gp)
 8001e9c:	00800104 	movi	r2,4
 8001ea0:	18800485 	stb	r2,18(r3)
 8001ea4:	00039f06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x09: // IMM
   ORA( cpu_read() ); CPU->T = 2; break;
 8001ea8:	80033500 	call	8003350 <cpu_read>
 8001eac:	11003fcc 	andi	r4,r2,255
 8001eb0:	8003fe80 	call	8003fe8 <ORA>
 8001eb4:	d0e6c717 	ldw	r3,-25828(gp)
 8001eb8:	00800084 	movi	r2,2
 8001ebc:	18800485 	stb	r2,18(r3)
 8001ec0:	00039806 	br	8002d24 <cpu_exec+0x2a74>
  case 0x11: // INDY
    operand = INDY(); ORA( operand ); CPU->T = 5; break;
 8001ec4:	80038280 	call	8003828 <INDY>
 8001ec8:	e0bffd05 	stb	r2,-12(fp)
 8001ecc:	e13ffd03 	ldbu	r4,-12(fp)
 8001ed0:	8003fe80 	call	8003fe8 <ORA>
 8001ed4:	d0e6c717 	ldw	r3,-25828(gp)
 8001ed8:	00800144 	movi	r2,5
 8001edc:	18800485 	stb	r2,18(r3)
 8001ee0:	00039006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x01: // XIND
    operand = XIND(); ORA( operand ); CPU->T = 6; break;
 8001ee4:	80037880 	call	8003788 <XIND>
 8001ee8:	e0bffd05 	stb	r2,-12(fp)
 8001eec:	e13ffd03 	ldbu	r4,-12(fp)
 8001ef0:	8003fe80 	call	8003fe8 <ORA>
 8001ef4:	d0e6c717 	ldw	r3,-25828(gp)
 8001ef8:	00800184 	movi	r2,6
 8001efc:	18800485 	stb	r2,18(r3)
 8001f00:	00038806 	br	8002d24 <cpu_exec+0x2a74>
  case 0x05: // ZP
    operand = ZP(); ORA( operand ); CPU->T = 2; break;
 8001f04:	80038f80 	call	80038f8 <ZP>
 8001f08:	e0bffd05 	stb	r2,-12(fp)
 8001f0c:	e13ffd03 	ldbu	r4,-12(fp)
 8001f10:	8003fe80 	call	8003fe8 <ORA>
 8001f14:	d0e6c717 	ldw	r3,-25828(gp)
 8001f18:	00800084 	movi	r2,2
 8001f1c:	18800485 	stb	r2,18(r3)
 8001f20:	00038006 	br	8002d24 <cpu_exec+0x2a74>
  case 0x15: // ZPX
    operand = ZPX(); ORA( operand ); CPU->T = 3; break;
 8001f24:	800392c0 	call	800392c <ZPX>
 8001f28:	e0bffd05 	stb	r2,-12(fp)
 8001f2c:	e13ffd03 	ldbu	r4,-12(fp)
 8001f30:	8003fe80 	call	8003fe8 <ORA>
 8001f34:	d0e6c717 	ldw	r3,-25828(gp)
 8001f38:	008000c4 	movi	r2,3
 8001f3c:	18800485 	stb	r2,18(r3)
 8001f40:	00037806 	br	8002d24 <cpu_exec+0x2a74>

    // ######################### PHA #######################
  case 0x48: // IMP
	cpu_mem_write( CPU->A, STACK + CPU->S );
 8001f44:	d0a6c717 	ldw	r2,-25828(gp)
 8001f48:	10800283 	ldbu	r2,10(r2)
 8001f4c:	11003fcc 	andi	r4,r2,255
 8001f50:	d0a6c717 	ldw	r2,-25828(gp)
 8001f54:	10800083 	ldbu	r2,2(r2)
 8001f58:	10803fcc 	andi	r2,r2,255
 8001f5c:	10804004 	addi	r2,r2,256
 8001f60:	117fffcc 	andi	r5,r2,65535
 8001f64:	80034540 	call	8003454 <cpu_mem_write>
    --CPU->S;
 8001f68:	d0e6c717 	ldw	r3,-25828(gp)
 8001f6c:	18800083 	ldbu	r2,2(r3)
 8001f70:	10bfffc4 	addi	r2,r2,-1
 8001f74:	18800085 	stb	r2,2(r3)
    CPU->T = 3;
 8001f78:	d0e6c717 	ldw	r3,-25828(gp)
 8001f7c:	008000c4 	movi	r2,3
 8001f80:	18800485 	stb	r2,18(r3)
    printf("PHA!\n");
 8001f84:	01020074 	movhi	r4,2049
 8001f88:	211c4104 	addi	r4,r4,28932
 8001f8c:	8005d500 	call	8005d50 <puts>
    break;
 8001f90:	00036406 	br	8002d24 <cpu_exec+0x2a74>

    // ########################### PHP #####################
  case 0x08: // IMP
    /* Pushes P (Status Register) onto the Stack, thus decremented it after. Fixed wrong push bug. */
    CPU->MEM[ STACK + CPU->S ] = cpu_join_flags();
 8001f94:	d0a6c717 	ldw	r2,-25828(gp)
 8001f98:	10c00617 	ldw	r3,24(r2)
 8001f9c:	d0a6c717 	ldw	r2,-25828(gp)
 8001fa0:	10800083 	ldbu	r2,2(r2)
 8001fa4:	10803fcc 	andi	r2,r2,255
 8001fa8:	1885883a 	add	r2,r3,r2
 8001fac:	14004004 	addi	r16,r2,256
 8001fb0:	80035040 	call	8003504 <cpu_join_flags>
 8001fb4:	80800005 	stb	r2,0(r16)
    --CPU->S;
 8001fb8:	d0e6c717 	ldw	r3,-25828(gp)
 8001fbc:	18800083 	ldbu	r2,2(r3)
 8001fc0:	10bfffc4 	addi	r2,r2,-1
 8001fc4:	18800085 	stb	r2,2(r3)
    CPU->T = 3;
 8001fc8:	d0e6c717 	ldw	r3,-25828(gp)
 8001fcc:	008000c4 	movi	r2,3
 8001fd0:	18800485 	stb	r2,18(r3)
    printf("PHP!\n");
 8001fd4:	01020074 	movhi	r4,2049
 8001fd8:	211c4304 	addi	r4,r4,28940
 8001fdc:	8005d500 	call	8005d50 <puts>
    break;
 8001fe0:	00035006 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## PLA ######################
  case 0x68: // IMP
    /* Pulls Accumulator from the stack, which is incremented after. Fixed wrong pulling bug. */
    ++CPU->S;
 8001fe4:	d0e6c717 	ldw	r3,-25828(gp)
 8001fe8:	18800083 	ldbu	r2,2(r3)
 8001fec:	10800044 	addi	r2,r2,1
 8001ff0:	18800085 	stb	r2,2(r3)
    CPU->A = cpu_mem_read( STACK + CPU->S );
 8001ff4:	d426c717 	ldw	r16,-25828(gp)
 8001ff8:	d0a6c717 	ldw	r2,-25828(gp)
 8001ffc:	10800083 	ldbu	r2,2(r2)
 8002000:	10803fcc 	andi	r2,r2,255
 8002004:	10804004 	addi	r2,r2,256
 8002008:	113fffcc 	andi	r4,r2,65535
 800200c:	80033980 	call	8003398 <cpu_mem_read>
 8002010:	80800285 	stb	r2,10(r16)
    CPU->P.N = ((CPU->A & 0x80) > 0) ? 1 : 0;
 8002014:	d0e6c717 	ldw	r3,-25828(gp)
 8002018:	d0a6c717 	ldw	r2,-25828(gp)
 800201c:	10800283 	ldbu	r2,10(r2)
 8002020:	10803fcc 	andi	r2,r2,255
 8002024:	1080200c 	andi	r2,r2,128
 8002028:	10800048 	cmpgei	r2,r2,1
 800202c:	18800245 	stb	r2,9(r3)
    CPU->P.Z = (CPU->A == 0) ? 1 : 0;
 8002030:	d0e6c717 	ldw	r3,-25828(gp)
 8002034:	d0a6c717 	ldw	r2,-25828(gp)
 8002038:	10800283 	ldbu	r2,10(r2)
 800203c:	10803fcc 	andi	r2,r2,255
 8002040:	1005003a 	cmpeq	r2,r2,zero
 8002044:	18800105 	stb	r2,4(r3)
    CPU->T = 4;
 8002048:	d0e6c717 	ldw	r3,-25828(gp)
 800204c:	00800104 	movi	r2,4
 8002050:	18800485 	stb	r2,18(r3)
    printf("PLA!\n");
 8002054:	01020074 	movhi	r4,2049
 8002058:	211c4504 	addi	r4,r4,28948
 800205c:	8005d500 	call	8005d50 <puts>
    break;
 8002060:	00033006 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## PLP ########################
  case 0x28:
    /* Pulls P (Status Register) from the Stack. Note B flag is not
       copied after, since it only exists on Stack. Fixed wrong flag pulling bug. */
    ++CPU->S;
 8002064:	d0e6c717 	ldw	r3,-25828(gp)
 8002068:	18800083 	ldbu	r2,2(r3)
 800206c:	10800044 	addi	r2,r2,1
 8002070:	18800085 	stb	r2,2(r3)
    cpu_split_flags( cpu_mem_read( STACK + CPU->S ) );
 8002074:	d0a6c717 	ldw	r2,-25828(gp)
 8002078:	10800083 	ldbu	r2,2(r2)
 800207c:	10803fcc 	andi	r2,r2,255
 8002080:	10804004 	addi	r2,r2,256
 8002084:	113fffcc 	andi	r4,r2,65535
 8002088:	80033980 	call	8003398 <cpu_mem_read>
 800208c:	11003fcc 	andi	r4,r2,255
 8002090:	80035cc0 	call	80035cc <cpu_split_flags>
    CPU->T = 4;
 8002094:	d0e6c717 	ldw	r3,-25828(gp)
 8002098:	00800104 	movi	r2,4
 800209c:	18800485 	stb	r2,18(r3)
    printf("PLP!\n");
 80020a0:	01020074 	movhi	r4,2049
 80020a4:	211c4704 	addi	r4,r4,28956
 80020a8:	8005d500 	call	8005d50 <puts>
    break;
 80020ac:	00031d06 	br	8002d24 <cpu_exec+0x2a74>

    // ######################## ROL #######################
    // TODO: Remove need of & and use memory mirroring...
  case 0x2E: // ABS
	temp = cpu_read();
 80020b0:	80033500 	call	8003350 <cpu_read>
 80020b4:	10803fcc 	andi	r2,r2,255
 80020b8:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 80020bc:	80033500 	call	8003350 <cpu_read>
 80020c0:	10803fcc 	andi	r2,r2,255
 80020c4:	1004923a 	slli	r2,r2,8
 80020c8:	e0bffe0d 	sth	r2,-8(fp)
    ROL( &CPU->MEM[ ( temp | temp2 ) ] ); CPU->T = 6; break;
 80020cc:	d0a6c717 	ldw	r2,-25828(gp)
 80020d0:	11000617 	ldw	r4,24(r2)
 80020d4:	e0fffe8b 	ldhu	r3,-6(fp)
 80020d8:	e0bffe0b 	ldhu	r2,-8(fp)
 80020dc:	1884b03a 	or	r2,r3,r2
 80020e0:	10bfffcc 	andi	r2,r2,65535
 80020e4:	2089883a 	add	r4,r4,r2
 80020e8:	80040680 	call	8004068 <ROL>
 80020ec:	d0e6c717 	ldw	r3,-25828(gp)
 80020f0:	00800184 	movi	r2,6
 80020f4:	18800485 	stb	r2,18(r3)
 80020f8:	00030a06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x3E: // ABSX
	temp = cpu_read();
 80020fc:	80033500 	call	8003350 <cpu_read>
 8002100:	10803fcc 	andi	r2,r2,255
 8002104:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8002108:	80033500 	call	8003350 <cpu_read>
 800210c:	10803fcc 	andi	r2,r2,255
 8002110:	1004923a 	slli	r2,r2,8
 8002114:	e0bffe0d 	sth	r2,-8(fp)
    ROL( &CPU->MEM[ ( ( temp | temp2 ) + CPU->X) & 0xFFFF] ); CPU->T = 7; break;
 8002118:	d0a6c717 	ldw	r2,-25828(gp)
 800211c:	11000617 	ldw	r4,24(r2)
 8002120:	e0fffe8b 	ldhu	r3,-6(fp)
 8002124:	e0bffe0b 	ldhu	r2,-8(fp)
 8002128:	1884b03a 	or	r2,r3,r2
 800212c:	10ffffcc 	andi	r3,r2,65535
 8002130:	d0a6c717 	ldw	r2,-25828(gp)
 8002134:	108002c3 	ldbu	r2,11(r2)
 8002138:	10803fcc 	andi	r2,r2,255
 800213c:	1885883a 	add	r2,r3,r2
 8002140:	10bfffcc 	andi	r2,r2,65535
 8002144:	2089883a 	add	r4,r4,r2
 8002148:	80040680 	call	8004068 <ROL>
 800214c:	d0e6c717 	ldw	r3,-25828(gp)
 8002150:	008001c4 	movi	r2,7
 8002154:	18800485 	stb	r2,18(r3)
 8002158:	0002f206 	br	8002d24 <cpu_exec+0x2a74>
  case 0x2A: // ACC
    ROL( &CPU->A ); CPU->T = 2; break;
 800215c:	d0a6c717 	ldw	r2,-25828(gp)
 8002160:	11000284 	addi	r4,r2,10
 8002164:	80040680 	call	8004068 <ROL>
 8002168:	d0e6c717 	ldw	r3,-25828(gp)
 800216c:	00800084 	movi	r2,2
 8002170:	18800485 	stb	r2,18(r3)
 8002174:	0002eb06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x26: // ZP
    ROL( &CPU->MEM[ cpu_read() ] ); CPU->T = 5; break;
 8002178:	d0a6c717 	ldw	r2,-25828(gp)
 800217c:	14000617 	ldw	r16,24(r2)
 8002180:	80033500 	call	8003350 <cpu_read>
 8002184:	10803fcc 	andi	r2,r2,255
 8002188:	8089883a 	add	r4,r16,r2
 800218c:	80040680 	call	8004068 <ROL>
 8002190:	d0e6c717 	ldw	r3,-25828(gp)
 8002194:	00800144 	movi	r2,5
 8002198:	18800485 	stb	r2,18(r3)
 800219c:	0002e106 	br	8002d24 <cpu_exec+0x2a74>
  case 0x36: // ZPX
    ROL( &CPU->MEM[ (cpu_read() + CPU->X) & 0xFF ] ); CPU->T = 6; break;
 80021a0:	d0a6c717 	ldw	r2,-25828(gp)
 80021a4:	14000617 	ldw	r16,24(r2)
 80021a8:	80033500 	call	8003350 <cpu_read>
 80021ac:	10c03fcc 	andi	r3,r2,255
 80021b0:	d0a6c717 	ldw	r2,-25828(gp)
 80021b4:	108002c3 	ldbu	r2,11(r2)
 80021b8:	10803fcc 	andi	r2,r2,255
 80021bc:	1885883a 	add	r2,r3,r2
 80021c0:	10803fcc 	andi	r2,r2,255
 80021c4:	8089883a 	add	r4,r16,r2
 80021c8:	80040680 	call	8004068 <ROL>
 80021cc:	d0e6c717 	ldw	r3,-25828(gp)
 80021d0:	00800184 	movi	r2,6
 80021d4:	18800485 	stb	r2,18(r3)
 80021d8:	0002d206 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## ROR ########################
    // TODO: Remove & operator need and implement mirroring
  case 0x6E: // ABS
	temp = cpu_read();
 80021dc:	80033500 	call	8003350 <cpu_read>
 80021e0:	10803fcc 	andi	r2,r2,255
 80021e4:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 80021e8:	80033500 	call	8003350 <cpu_read>
 80021ec:	10803fcc 	andi	r2,r2,255
 80021f0:	1004923a 	slli	r2,r2,8
 80021f4:	e0bffe0d 	sth	r2,-8(fp)
    ROR( &CPU->MEM[ ( temp | temp2 ) ] ); CPU->T = 6; break;
 80021f8:	d0a6c717 	ldw	r2,-25828(gp)
 80021fc:	11000617 	ldw	r4,24(r2)
 8002200:	e0fffe8b 	ldhu	r3,-6(fp)
 8002204:	e0bffe0b 	ldhu	r2,-8(fp)
 8002208:	1884b03a 	or	r2,r3,r2
 800220c:	10bfffcc 	andi	r2,r2,65535
 8002210:	2089883a 	add	r4,r4,r2
 8002214:	800413c0 	call	800413c <ROR>
 8002218:	d0e6c717 	ldw	r3,-25828(gp)
 800221c:	00800184 	movi	r2,6
 8002220:	18800485 	stb	r2,18(r3)
 8002224:	0002bf06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x7E: // ABSX
	temp = cpu_read();
 8002228:	80033500 	call	8003350 <cpu_read>
 800222c:	10803fcc 	andi	r2,r2,255
 8002230:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8002234:	80033500 	call	8003350 <cpu_read>
 8002238:	10803fcc 	andi	r2,r2,255
 800223c:	1004923a 	slli	r2,r2,8
 8002240:	e0bffe0d 	sth	r2,-8(fp)
    ROR( &CPU->MEM[ ( ( temp | temp2 ) + CPU->X) & 0xFFFF] ); CPU->T = 7; break;
 8002244:	d0a6c717 	ldw	r2,-25828(gp)
 8002248:	11000617 	ldw	r4,24(r2)
 800224c:	e0fffe8b 	ldhu	r3,-6(fp)
 8002250:	e0bffe0b 	ldhu	r2,-8(fp)
 8002254:	1884b03a 	or	r2,r3,r2
 8002258:	10ffffcc 	andi	r3,r2,65535
 800225c:	d0a6c717 	ldw	r2,-25828(gp)
 8002260:	108002c3 	ldbu	r2,11(r2)
 8002264:	10803fcc 	andi	r2,r2,255
 8002268:	1885883a 	add	r2,r3,r2
 800226c:	10bfffcc 	andi	r2,r2,65535
 8002270:	2089883a 	add	r4,r4,r2
 8002274:	800413c0 	call	800413c <ROR>
 8002278:	d0e6c717 	ldw	r3,-25828(gp)
 800227c:	008001c4 	movi	r2,7
 8002280:	18800485 	stb	r2,18(r3)
 8002284:	0002a706 	br	8002d24 <cpu_exec+0x2a74>
  case 0x6A: // ACC
    ROR( &CPU->A ); CPU->T = 2; CPU->T = 2; break;
 8002288:	d0a6c717 	ldw	r2,-25828(gp)
 800228c:	11000284 	addi	r4,r2,10
 8002290:	800413c0 	call	800413c <ROR>
 8002294:	d0e6c717 	ldw	r3,-25828(gp)
 8002298:	00800084 	movi	r2,2
 800229c:	18800485 	stb	r2,18(r3)
 80022a0:	d0e6c717 	ldw	r3,-25828(gp)
 80022a4:	00800084 	movi	r2,2
 80022a8:	18800485 	stb	r2,18(r3)
 80022ac:	00029d06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x66: // ZP
    ROR( &CPU->MEM[ cpu_read() ]) ; CPU->T = 5; break;
 80022b0:	d0a6c717 	ldw	r2,-25828(gp)
 80022b4:	14000617 	ldw	r16,24(r2)
 80022b8:	80033500 	call	8003350 <cpu_read>
 80022bc:	10803fcc 	andi	r2,r2,255
 80022c0:	8089883a 	add	r4,r16,r2
 80022c4:	800413c0 	call	800413c <ROR>
 80022c8:	d0e6c717 	ldw	r3,-25828(gp)
 80022cc:	00800144 	movi	r2,5
 80022d0:	18800485 	stb	r2,18(r3)
 80022d4:	00029306 	br	8002d24 <cpu_exec+0x2a74>
  case 0x76: // ZPX
    ROR( &CPU->MEM[ (cpu_read() + CPU->X) & 0xFF ] ); CPU->T = 6; break;
 80022d8:	d0a6c717 	ldw	r2,-25828(gp)
 80022dc:	14000617 	ldw	r16,24(r2)
 80022e0:	80033500 	call	8003350 <cpu_read>
 80022e4:	10c03fcc 	andi	r3,r2,255
 80022e8:	d0a6c717 	ldw	r2,-25828(gp)
 80022ec:	108002c3 	ldbu	r2,11(r2)
 80022f0:	10803fcc 	andi	r2,r2,255
 80022f4:	1885883a 	add	r2,r3,r2
 80022f8:	10803fcc 	andi	r2,r2,255
 80022fc:	8089883a 	add	r4,r16,r2
 8002300:	800413c0 	call	800413c <ROR>
 8002304:	d0e6c717 	ldw	r3,-25828(gp)
 8002308:	00800184 	movi	r2,6
 800230c:	18800485 	stb	r2,18(r3)
 8002310:	00028406 	br	8002d24 <cpu_exec+0x2a74>


    // ######################## RTI ##########################
  case 0x40:
    ++CPU->S;
 8002314:	d0e6c717 	ldw	r3,-25828(gp)
 8002318:	18800083 	ldbu	r2,2(r3)
 800231c:	10800044 	addi	r2,r2,1
 8002320:	18800085 	stb	r2,2(r3)
    cpu_split_flags( cpu_mem_read( STACK + CPU->S ) );
 8002324:	d0a6c717 	ldw	r2,-25828(gp)
 8002328:	10800083 	ldbu	r2,2(r2)
 800232c:	10803fcc 	andi	r2,r2,255
 8002330:	10804004 	addi	r2,r2,256
 8002334:	113fffcc 	andi	r4,r2,65535
 8002338:	80033980 	call	8003398 <cpu_mem_read>
 800233c:	11003fcc 	andi	r4,r2,255
 8002340:	80035cc0 	call	80035cc <cpu_split_flags>

    ++CPU->S;
 8002344:	d0e6c717 	ldw	r3,-25828(gp)
 8002348:	18800083 	ldbu	r2,2(r3)
 800234c:	10800044 	addi	r2,r2,1
 8002350:	18800085 	stb	r2,2(r3)
    CPU->PC = cpu_mem_read( STACK + CPU->S );
 8002354:	d426c717 	ldw	r16,-25828(gp)
 8002358:	d0a6c717 	ldw	r2,-25828(gp)
 800235c:	10800083 	ldbu	r2,2(r2)
 8002360:	10803fcc 	andi	r2,r2,255
 8002364:	10804004 	addi	r2,r2,256
 8002368:	113fffcc 	andi	r4,r2,65535
 800236c:	80033980 	call	8003398 <cpu_mem_read>
 8002370:	10803fcc 	andi	r2,r2,255
 8002374:	8080000d 	sth	r2,0(r16)

    ++CPU->S;
 8002378:	d0e6c717 	ldw	r3,-25828(gp)
 800237c:	18800083 	ldbu	r2,2(r3)
 8002380:	10800044 	addi	r2,r2,1
 8002384:	18800085 	stb	r2,2(r3)
    CPU->PC = CPU->PC | (cpu_mem_read( STACK + CPU->S ) << 8);
 8002388:	d426c717 	ldw	r16,-25828(gp)
 800238c:	d0a6c717 	ldw	r2,-25828(gp)
 8002390:	1080000b 	ldhu	r2,0(r2)
 8002394:	1023883a 	mov	r17,r2
 8002398:	d0a6c717 	ldw	r2,-25828(gp)
 800239c:	10800083 	ldbu	r2,2(r2)
 80023a0:	10803fcc 	andi	r2,r2,255
 80023a4:	10804004 	addi	r2,r2,256
 80023a8:	113fffcc 	andi	r4,r2,65535
 80023ac:	80033980 	call	8003398 <cpu_mem_read>
 80023b0:	10803fcc 	andi	r2,r2,255
 80023b4:	1004923a 	slli	r2,r2,8
 80023b8:	8884b03a 	or	r2,r17,r2
 80023bc:	8080000d 	sth	r2,0(r16)
    printf("Pushed %x to PC! ", CPU->PC);
 80023c0:	d0a6c717 	ldw	r2,-25828(gp)
 80023c4:	1080000b 	ldhu	r2,0(r2)
 80023c8:	117fffcc 	andi	r5,r2,65535
 80023cc:	01020074 	movhi	r4,2049
 80023d0:	211c4904 	addi	r4,r4,28964
 80023d4:	8005c140 	call	8005c14 <printf>
    printf("RTI!\n");
 80023d8:	01020074 	movhi	r4,2049
 80023dc:	211c4e04 	addi	r4,r4,28984
 80023e0:	8005d500 	call	8005d50 <puts>
    CPU->T = 6;
 80023e4:	d0e6c717 	ldw	r3,-25828(gp)
 80023e8:	00800184 	movi	r2,6
 80023ec:	18800485 	stb	r2,18(r3)
    break;
 80023f0:	00024c06 	br	8002d24 <cpu_exec+0x2a74>

    // ############################# RTS #######################
  case 0x60:
    ++CPU->S;
 80023f4:	d0e6c717 	ldw	r3,-25828(gp)
 80023f8:	18800083 	ldbu	r2,2(r3)
 80023fc:	10800044 	addi	r2,r2,1
 8002400:	18800085 	stb	r2,2(r3)
    CPU->PC = cpu_mem_read( STACK + CPU->S );
 8002404:	d426c717 	ldw	r16,-25828(gp)
 8002408:	d0a6c717 	ldw	r2,-25828(gp)
 800240c:	10800083 	ldbu	r2,2(r2)
 8002410:	10803fcc 	andi	r2,r2,255
 8002414:	10804004 	addi	r2,r2,256
 8002418:	113fffcc 	andi	r4,r2,65535
 800241c:	80033980 	call	8003398 <cpu_mem_read>
 8002420:	10803fcc 	andi	r2,r2,255
 8002424:	8080000d 	sth	r2,0(r16)

    ++CPU->S;
 8002428:	d0e6c717 	ldw	r3,-25828(gp)
 800242c:	18800083 	ldbu	r2,2(r3)
 8002430:	10800044 	addi	r2,r2,1
 8002434:	18800085 	stb	r2,2(r3)
    CPU->PC = (CPU->PC | ( cpu_mem_read( STACK + CPU->S ) << 8 )) + 1;
 8002438:	d426c717 	ldw	r16,-25828(gp)
 800243c:	d0a6c717 	ldw	r2,-25828(gp)
 8002440:	1080000b 	ldhu	r2,0(r2)
 8002444:	1023883a 	mov	r17,r2
 8002448:	d0a6c717 	ldw	r2,-25828(gp)
 800244c:	10800083 	ldbu	r2,2(r2)
 8002450:	10803fcc 	andi	r2,r2,255
 8002454:	10804004 	addi	r2,r2,256
 8002458:	113fffcc 	andi	r4,r2,65535
 800245c:	80033980 	call	8003398 <cpu_mem_read>
 8002460:	10803fcc 	andi	r2,r2,255
 8002464:	1004923a 	slli	r2,r2,8
 8002468:	8884b03a 	or	r2,r17,r2
 800246c:	10800044 	addi	r2,r2,1
 8002470:	8080000d 	sth	r2,0(r16)
    printf("RTS!\n");
 8002474:	01020074 	movhi	r4,2049
 8002478:	211c5004 	addi	r4,r4,28992
 800247c:	8005d500 	call	8005d50 <puts>
    CPU->T = 6;
 8002480:	d0e6c717 	ldw	r3,-25828(gp)
 8002484:	00800184 	movi	r2,6
 8002488:	18800485 	stb	r2,18(r3)
    break;
 800248c:	00022506 	br	8002d24 <cpu_exec+0x2a74>

    // ####################### SBC ############################
  case 0xED: // ABS
    operand = ABS(); SBC( operand ); CPU->T = 4; break;
 8002490:	800364c0 	call	800364c <ABS>
 8002494:	e0bffd05 	stb	r2,-12(fp)
 8002498:	e13ffd03 	ldbu	r4,-12(fp)
 800249c:	80042280 	call	8004228 <SBC>
 80024a0:	d0e6c717 	ldw	r3,-25828(gp)
 80024a4:	00800104 	movi	r2,4
 80024a8:	18800485 	stb	r2,18(r3)
 80024ac:	00021d06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xFD: // ABSX
    operand = ABSX(); SBC( operand ); CPU->T = 4; break;
 80024b0:	80036a80 	call	80036a8 <ABSX>
 80024b4:	e0bffd05 	stb	r2,-12(fp)
 80024b8:	e13ffd03 	ldbu	r4,-12(fp)
 80024bc:	80042280 	call	8004228 <SBC>
 80024c0:	d0e6c717 	ldw	r3,-25828(gp)
 80024c4:	00800104 	movi	r2,4
 80024c8:	18800485 	stb	r2,18(r3)
 80024cc:	00021506 	br	8002d24 <cpu_exec+0x2a74>
  case 0xF9: // ABSY
    operand = ABSY(); SBC( operand ); CPU->T = 4; break;
 80024d0:	80037180 	call	8003718 <ABSY>
 80024d4:	e0bffd05 	stb	r2,-12(fp)
 80024d8:	e13ffd03 	ldbu	r4,-12(fp)
 80024dc:	80042280 	call	8004228 <SBC>
 80024e0:	d0e6c717 	ldw	r3,-25828(gp)
 80024e4:	00800104 	movi	r2,4
 80024e8:	18800485 	stb	r2,18(r3)
 80024ec:	00020d06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xE9: // IMM
    SBC( CPU->MEM[ CPU->PC++ ] ); CPU->T = 2; break;
 80024f0:	d0a6c717 	ldw	r2,-25828(gp)
 80024f4:	10c00617 	ldw	r3,24(r2)
 80024f8:	d166c717 	ldw	r5,-25828(gp)
 80024fc:	2900000b 	ldhu	r4,0(r5)
 8002500:	20bfffcc 	andi	r2,r4,65535
 8002504:	1885883a 	add	r2,r3,r2
 8002508:	10800003 	ldbu	r2,0(r2)
 800250c:	10c03fcc 	andi	r3,r2,255
 8002510:	20800044 	addi	r2,r4,1
 8002514:	2880000d 	sth	r2,0(r5)
 8002518:	1809883a 	mov	r4,r3
 800251c:	80042280 	call	8004228 <SBC>
 8002520:	d0e6c717 	ldw	r3,-25828(gp)
 8002524:	00800084 	movi	r2,2
 8002528:	18800485 	stb	r2,18(r3)
 800252c:	0001fd06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xF1: // INDY
    operand = INDY(); SBC( operand ); CPU->T = 5; break;
 8002530:	80038280 	call	8003828 <INDY>
 8002534:	e0bffd05 	stb	r2,-12(fp)
 8002538:	e13ffd03 	ldbu	r4,-12(fp)
 800253c:	80042280 	call	8004228 <SBC>
 8002540:	d0e6c717 	ldw	r3,-25828(gp)
 8002544:	00800144 	movi	r2,5
 8002548:	18800485 	stb	r2,18(r3)
 800254c:	0001f506 	br	8002d24 <cpu_exec+0x2a74>
  case 0xE1: // XIND
    operand = XIND(); SBC( operand ); CPU->T = 6; break;
 8002550:	80037880 	call	8003788 <XIND>
 8002554:	e0bffd05 	stb	r2,-12(fp)
 8002558:	e13ffd03 	ldbu	r4,-12(fp)
 800255c:	80042280 	call	8004228 <SBC>
 8002560:	d0e6c717 	ldw	r3,-25828(gp)
 8002564:	00800184 	movi	r2,6
 8002568:	18800485 	stb	r2,18(r3)
 800256c:	0001ed06 	br	8002d24 <cpu_exec+0x2a74>
  case 0xE5: // ZP
    operand = ZP(); SBC( operand ); CPU->T = 3; break;
 8002570:	80038f80 	call	80038f8 <ZP>
 8002574:	e0bffd05 	stb	r2,-12(fp)
 8002578:	e13ffd03 	ldbu	r4,-12(fp)
 800257c:	80042280 	call	8004228 <SBC>
 8002580:	d0e6c717 	ldw	r3,-25828(gp)
 8002584:	008000c4 	movi	r2,3
 8002588:	18800485 	stb	r2,18(r3)
 800258c:	0001e506 	br	8002d24 <cpu_exec+0x2a74>
  case 0xF5: // ZPX
    operand = ZPX(); SBC( operand ); CPU->T = 4; break;
 8002590:	800392c0 	call	800392c <ZPX>
 8002594:	e0bffd05 	stb	r2,-12(fp)
 8002598:	e13ffd03 	ldbu	r4,-12(fp)
 800259c:	80042280 	call	8004228 <SBC>
 80025a0:	d0e6c717 	ldw	r3,-25828(gp)
 80025a4:	00800104 	movi	r2,4
 80025a8:	18800485 	stb	r2,18(r3)
 80025ac:	0001dd06 	br	8002d24 <cpu_exec+0x2a74>

    // ############################ SEC ########################
  case 0x38: // IMP
    CPU->P.C = 1;
 80025b0:	d0e6c717 	ldw	r3,-25828(gp)
 80025b4:	00800044 	movi	r2,1
 80025b8:	188000c5 	stb	r2,3(r3)
    printf("SEC!\n");
 80025bc:	01020074 	movhi	r4,2049
 80025c0:	211c5204 	addi	r4,r4,29000
 80025c4:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 80025c8:	d0e6c717 	ldw	r3,-25828(gp)
 80025cc:	00800084 	movi	r2,2
 80025d0:	18800485 	stb	r2,18(r3)
    break;
 80025d4:	0001d306 	br	8002d24 <cpu_exec+0x2a74>

    // ############################ SED ########################
  case 0xF8: // IMP
    CPU->P.D = 1;
 80025d8:	d0e6c717 	ldw	r3,-25828(gp)
 80025dc:	00800044 	movi	r2,1
 80025e0:	18800185 	stb	r2,6(r3)
    printf("SED!\n");
 80025e4:	01020074 	movhi	r4,2049
 80025e8:	211c5404 	addi	r4,r4,29008
 80025ec:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 80025f0:	d0e6c717 	ldw	r3,-25828(gp)
 80025f4:	00800084 	movi	r2,2
 80025f8:	18800485 	stb	r2,18(r3)
    break;
 80025fc:	0001c906 	br	8002d24 <cpu_exec+0x2a74>

    // ############################ SEI #########################
  case 0x78:
    CPU->P.I = 1;
 8002600:	d0e6c717 	ldw	r3,-25828(gp)
 8002604:	00800044 	movi	r2,1
 8002608:	18800145 	stb	r2,5(r3)
    printf("SEI!\n");
 800260c:	01020074 	movhi	r4,2049
 8002610:	211c5604 	addi	r4,r4,29016
 8002614:	8005d500 	call	8005d50 <puts>
    CPU->T = 2;
 8002618:	d0e6c717 	ldw	r3,-25828(gp)
 800261c:	00800084 	movi	r2,2
 8002620:	18800485 	stb	r2,18(r3)
    break;
 8002624:	0001bf06 	br	8002d24 <cpu_exec+0x2a74>

    // ############################## STA ########################
  case 0x8D: // ABS
	temp = cpu_read();
 8002628:	80033500 	call	8003350 <cpu_read>
 800262c:	10803fcc 	andi	r2,r2,255
 8002630:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8002634:	80033500 	call	8003350 <cpu_read>
 8002638:	10803fcc 	andi	r2,r2,255
 800263c:	1004923a 	slli	r2,r2,8
 8002640:	e0bffe0d 	sth	r2,-8(fp)
	cpu_mem_write( CPU->A, (temp | temp2) );
 8002644:	d0a6c717 	ldw	r2,-25828(gp)
 8002648:	10800283 	ldbu	r2,10(r2)
 800264c:	11003fcc 	andi	r4,r2,255
 8002650:	e0fffe8b 	ldhu	r3,-6(fp)
 8002654:	e0bffe0b 	ldhu	r2,-8(fp)
 8002658:	1884b03a 	or	r2,r3,r2
 800265c:	117fffcc 	andi	r5,r2,65535
 8002660:	80034540 	call	8003454 <cpu_mem_write>
    printf("STA! Storing %x into %x%x\n", CPU->MEM[ temp | temp2], temp2, temp); CPU->T = 4; break;
 8002664:	d0a6c717 	ldw	r2,-25828(gp)
 8002668:	11000617 	ldw	r4,24(r2)
 800266c:	e0fffe8b 	ldhu	r3,-6(fp)
 8002670:	e0bffe0b 	ldhu	r2,-8(fp)
 8002674:	1884b03a 	or	r2,r3,r2
 8002678:	10bfffcc 	andi	r2,r2,65535
 800267c:	2085883a 	add	r2,r4,r2
 8002680:	10800003 	ldbu	r2,0(r2)
 8002684:	11403fcc 	andi	r5,r2,255
 8002688:	e1bffe0b 	ldhu	r6,-8(fp)
 800268c:	e1fffe8b 	ldhu	r7,-6(fp)
 8002690:	01020074 	movhi	r4,2049
 8002694:	211c5804 	addi	r4,r4,29024
 8002698:	8005c140 	call	8005c14 <printf>
 800269c:	d0e6c717 	ldw	r3,-25828(gp)
 80026a0:	00800104 	movi	r2,4
 80026a4:	18800485 	stb	r2,18(r3)
 80026a8:	00019e06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x9D: // ABSX
	temp = cpu_read();
 80026ac:	80033500 	call	8003350 <cpu_read>
 80026b0:	10803fcc 	andi	r2,r2,255
 80026b4:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 80026b8:	80033500 	call	8003350 <cpu_read>
 80026bc:	10803fcc 	andi	r2,r2,255
 80026c0:	1004923a 	slli	r2,r2,8
 80026c4:	e0bffe0d 	sth	r2,-8(fp)
	cpu_mem_write( CPU->A, (( temp | temp2) + CPU->X) & 0xFFFF );
 80026c8:	d0a6c717 	ldw	r2,-25828(gp)
 80026cc:	10800283 	ldbu	r2,10(r2)
 80026d0:	11003fcc 	andi	r4,r2,255
 80026d4:	e0fffe8b 	ldhu	r3,-6(fp)
 80026d8:	e0bffe0b 	ldhu	r2,-8(fp)
 80026dc:	1884b03a 	or	r2,r3,r2
 80026e0:	1007883a 	mov	r3,r2
 80026e4:	d0a6c717 	ldw	r2,-25828(gp)
 80026e8:	108002c3 	ldbu	r2,11(r2)
 80026ec:	10803fcc 	andi	r2,r2,255
 80026f0:	1885883a 	add	r2,r3,r2
 80026f4:	117fffcc 	andi	r5,r2,65535
 80026f8:	80034540 	call	8003454 <cpu_mem_write>
    printf("STA!\n"); CPU->T = 5; break;
 80026fc:	01020074 	movhi	r4,2049
 8002700:	211c5f04 	addi	r4,r4,29052
 8002704:	8005d500 	call	8005d50 <puts>
 8002708:	d0e6c717 	ldw	r3,-25828(gp)
 800270c:	00800144 	movi	r2,5
 8002710:	18800485 	stb	r2,18(r3)
 8002714:	00018306 	br	8002d24 <cpu_exec+0x2a74>
  case 0x99: // ABSY
	temp = cpu_read();
 8002718:	80033500 	call	8003350 <cpu_read>
 800271c:	10803fcc 	andi	r2,r2,255
 8002720:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8002724:	80033500 	call	8003350 <cpu_read>
 8002728:	10803fcc 	andi	r2,r2,255
 800272c:	1004923a 	slli	r2,r2,8
 8002730:	e0bffe0d 	sth	r2,-8(fp)
	cpu_mem_write( CPU->A,  (( temp | temp2 ) + CPU->Y) & 0xFFFF );
 8002734:	d0a6c717 	ldw	r2,-25828(gp)
 8002738:	10800283 	ldbu	r2,10(r2)
 800273c:	11003fcc 	andi	r4,r2,255
 8002740:	e0fffe8b 	ldhu	r3,-6(fp)
 8002744:	e0bffe0b 	ldhu	r2,-8(fp)
 8002748:	1884b03a 	or	r2,r3,r2
 800274c:	1007883a 	mov	r3,r2
 8002750:	d0a6c717 	ldw	r2,-25828(gp)
 8002754:	10800303 	ldbu	r2,12(r2)
 8002758:	10803fcc 	andi	r2,r2,255
 800275c:	1885883a 	add	r2,r3,r2
 8002760:	117fffcc 	andi	r5,r2,65535
 8002764:	80034540 	call	8003454 <cpu_mem_write>
    printf("STA!\n"); CPU->T = 5; break;
 8002768:	01020074 	movhi	r4,2049
 800276c:	211c5f04 	addi	r4,r4,29052
 8002770:	8005d500 	call	8005d50 <puts>
 8002774:	d0e6c717 	ldw	r3,-25828(gp)
 8002778:	00800144 	movi	r2,5
 800277c:	18800485 	stb	r2,18(r3)
 8002780:	00016806 	br	8002d24 <cpu_exec+0x2a74>
  case 0x91: // INDY
    temp_addr = cpu_mem_read( cpu_read() );
 8002784:	80033500 	call	8003350 <cpu_read>
 8002788:	11003fcc 	andi	r4,r2,255
 800278c:	80033980 	call	8003398 <cpu_mem_read>
 8002790:	10803fcc 	andi	r2,r2,255
 8002794:	e0bffd8d 	sth	r2,-10(fp)
    temp_addr = temp_addr | ((temp_addr+1) << 8);
 8002798:	e0bffd8b 	ldhu	r2,-10(fp)
 800279c:	10800044 	addi	r2,r2,1
 80027a0:	1004923a 	slli	r2,r2,8
 80027a4:	1007883a 	mov	r3,r2
 80027a8:	e0bffd8b 	ldhu	r2,-10(fp)
 80027ac:	1884b03a 	or	r2,r3,r2
 80027b0:	e0bffd8d 	sth	r2,-10(fp)
    cpu_mem_write( CPU->A,  (temp_addr + CPU->Y) & 0xFFFF );
 80027b4:	d0a6c717 	ldw	r2,-25828(gp)
 80027b8:	10800283 	ldbu	r2,10(r2)
 80027bc:	11003fcc 	andi	r4,r2,255
 80027c0:	d0a6c717 	ldw	r2,-25828(gp)
 80027c4:	10800303 	ldbu	r2,12(r2)
 80027c8:	10c03fcc 	andi	r3,r2,255
 80027cc:	e0bffd8b 	ldhu	r2,-10(fp)
 80027d0:	1885883a 	add	r2,r3,r2
 80027d4:	117fffcc 	andi	r5,r2,65535
 80027d8:	80034540 	call	8003454 <cpu_mem_write>
    printf("STA!\n"); CPU->T = 6; break;
 80027dc:	01020074 	movhi	r4,2049
 80027e0:	211c5f04 	addi	r4,r4,29052
 80027e4:	8005d500 	call	8005d50 <puts>
 80027e8:	d0e6c717 	ldw	r3,-25828(gp)
 80027ec:	00800184 	movi	r2,6
 80027f0:	18800485 	stb	r2,18(r3)
 80027f4:	00014b06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x81: // XIND
    temp_addr = CPU->MEM[ (cpu_read() + CPU->X) & 0xFF ];
 80027f8:	d0a6c717 	ldw	r2,-25828(gp)
 80027fc:	14000617 	ldw	r16,24(r2)
 8002800:	80033500 	call	8003350 <cpu_read>
 8002804:	10c03fcc 	andi	r3,r2,255
 8002808:	d0a6c717 	ldw	r2,-25828(gp)
 800280c:	108002c3 	ldbu	r2,11(r2)
 8002810:	10803fcc 	andi	r2,r2,255
 8002814:	1885883a 	add	r2,r3,r2
 8002818:	10803fcc 	andi	r2,r2,255
 800281c:	8085883a 	add	r2,r16,r2
 8002820:	10800003 	ldbu	r2,0(r2)
 8002824:	10803fcc 	andi	r2,r2,255
 8002828:	e0bffd8d 	sth	r2,-10(fp)
    temp_addr = temp_addr | ((temp_addr+1) << 8);
 800282c:	e0bffd8b 	ldhu	r2,-10(fp)
 8002830:	10800044 	addi	r2,r2,1
 8002834:	1004923a 	slli	r2,r2,8
 8002838:	1007883a 	mov	r3,r2
 800283c:	e0bffd8b 	ldhu	r2,-10(fp)
 8002840:	1884b03a 	or	r2,r3,r2
 8002844:	e0bffd8d 	sth	r2,-10(fp)
    cpu_mem_write( CPU->A, temp_addr );
 8002848:	d0a6c717 	ldw	r2,-25828(gp)
 800284c:	10800283 	ldbu	r2,10(r2)
 8002850:	11003fcc 	andi	r4,r2,255
 8002854:	e17ffd8b 	ldhu	r5,-10(fp)
 8002858:	80034540 	call	8003454 <cpu_mem_write>
    printf("STA!\n"); CPU->T = 6; break;
 800285c:	01020074 	movhi	r4,2049
 8002860:	211c5f04 	addi	r4,r4,29052
 8002864:	8005d500 	call	8005d50 <puts>
 8002868:	d0e6c717 	ldw	r3,-25828(gp)
 800286c:	00800184 	movi	r2,6
 8002870:	18800485 	stb	r2,18(r3)
 8002874:	00012b06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x85: // ZP
    CPU->MEM[ (CPU->MEM[CPU->PC++]) ] = CPU->A;
 8002878:	d0a6c717 	ldw	r2,-25828(gp)
 800287c:	11800617 	ldw	r6,24(r2)
 8002880:	d0a6c717 	ldw	r2,-25828(gp)
 8002884:	10c00617 	ldw	r3,24(r2)
 8002888:	d126c717 	ldw	r4,-25828(gp)
 800288c:	2140000b 	ldhu	r5,0(r4)
 8002890:	28bfffcc 	andi	r2,r5,65535
 8002894:	1885883a 	add	r2,r3,r2
 8002898:	10800003 	ldbu	r2,0(r2)
 800289c:	10803fcc 	andi	r2,r2,255
 80028a0:	3087883a 	add	r3,r6,r2
 80028a4:	d0a6c717 	ldw	r2,-25828(gp)
 80028a8:	10800283 	ldbu	r2,10(r2)
 80028ac:	18800005 	stb	r2,0(r3)
 80028b0:	28800044 	addi	r2,r5,1
 80028b4:	2080000d 	sth	r2,0(r4)
    printf("STA!\n"); CPU->T = 3; break;
 80028b8:	01020074 	movhi	r4,2049
 80028bc:	211c5f04 	addi	r4,r4,29052
 80028c0:	8005d500 	call	8005d50 <puts>
 80028c4:	d0e6c717 	ldw	r3,-25828(gp)
 80028c8:	008000c4 	movi	r2,3
 80028cc:	18800485 	stb	r2,18(r3)
 80028d0:	00011406 	br	8002d24 <cpu_exec+0x2a74>
  case 0x95: // ZPX
    CPU->MEM[ (CPU->MEM[CPU->PC++] + CPU->X) & 0xFF ] = CPU->A;
 80028d4:	d0a6c717 	ldw	r2,-25828(gp)
 80028d8:	11000617 	ldw	r4,24(r2)
 80028dc:	d0a6c717 	ldw	r2,-25828(gp)
 80028e0:	10c00617 	ldw	r3,24(r2)
 80028e4:	d166c717 	ldw	r5,-25828(gp)
 80028e8:	2980000b 	ldhu	r6,0(r5)
 80028ec:	30bfffcc 	andi	r2,r6,65535
 80028f0:	1885883a 	add	r2,r3,r2
 80028f4:	10800003 	ldbu	r2,0(r2)
 80028f8:	10c03fcc 	andi	r3,r2,255
 80028fc:	d0a6c717 	ldw	r2,-25828(gp)
 8002900:	108002c3 	ldbu	r2,11(r2)
 8002904:	10803fcc 	andi	r2,r2,255
 8002908:	1885883a 	add	r2,r3,r2
 800290c:	10803fcc 	andi	r2,r2,255
 8002910:	2087883a 	add	r3,r4,r2
 8002914:	d0a6c717 	ldw	r2,-25828(gp)
 8002918:	10800283 	ldbu	r2,10(r2)
 800291c:	18800005 	stb	r2,0(r3)
 8002920:	30800044 	addi	r2,r6,1
 8002924:	2880000d 	sth	r2,0(r5)
    printf("STA!\n"); CPU->T = 4; break;
 8002928:	01020074 	movhi	r4,2049
 800292c:	211c5f04 	addi	r4,r4,29052
 8002930:	8005d500 	call	8005d50 <puts>
 8002934:	d0e6c717 	ldw	r3,-25828(gp)
 8002938:	00800104 	movi	r2,4
 800293c:	18800485 	stb	r2,18(r3)
 8002940:	0000f806 	br	8002d24 <cpu_exec+0x2a74>

    // ############################### STX ###########################
  case 0x8E: // ABS
	temp = cpu_read();
 8002944:	80033500 	call	8003350 <cpu_read>
 8002948:	10803fcc 	andi	r2,r2,255
 800294c:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8002950:	80033500 	call	8003350 <cpu_read>
 8002954:	10803fcc 	andi	r2,r2,255
 8002958:	1004923a 	slli	r2,r2,8
 800295c:	e0bffe0d 	sth	r2,-8(fp)
    cpu_mem_write( CPU->X, ( temp | temp2 ) );
 8002960:	d0a6c717 	ldw	r2,-25828(gp)
 8002964:	108002c3 	ldbu	r2,11(r2)
 8002968:	11003fcc 	andi	r4,r2,255
 800296c:	e0fffe8b 	ldhu	r3,-6(fp)
 8002970:	e0bffe0b 	ldhu	r2,-8(fp)
 8002974:	1884b03a 	or	r2,r3,r2
 8002978:	117fffcc 	andi	r5,r2,65535
 800297c:	80034540 	call	8003454 <cpu_mem_write>
    printf("STX!\n"); CPU->T = 4; break;
 8002980:	01020074 	movhi	r4,2049
 8002984:	211c6104 	addi	r4,r4,29060
 8002988:	8005d500 	call	8005d50 <puts>
 800298c:	d0e6c717 	ldw	r3,-25828(gp)
 8002990:	00800104 	movi	r2,4
 8002994:	18800485 	stb	r2,18(r3)
 8002998:	0000e206 	br	8002d24 <cpu_exec+0x2a74>
  case 0x86: // ZP
    CPU->MEM[ cpu_read() ] = CPU->X;
 800299c:	d0a6c717 	ldw	r2,-25828(gp)
 80029a0:	14000617 	ldw	r16,24(r2)
 80029a4:	80033500 	call	8003350 <cpu_read>
 80029a8:	10803fcc 	andi	r2,r2,255
 80029ac:	8087883a 	add	r3,r16,r2
 80029b0:	d0a6c717 	ldw	r2,-25828(gp)
 80029b4:	108002c3 	ldbu	r2,11(r2)
 80029b8:	18800005 	stb	r2,0(r3)
    printf("STX!\n"); CPU->T = 3; break;
 80029bc:	01020074 	movhi	r4,2049
 80029c0:	211c6104 	addi	r4,r4,29060
 80029c4:	8005d500 	call	8005d50 <puts>
 80029c8:	d0e6c717 	ldw	r3,-25828(gp)
 80029cc:	008000c4 	movi	r2,3
 80029d0:	18800485 	stb	r2,18(r3)
 80029d4:	0000d306 	br	8002d24 <cpu_exec+0x2a74>
  case 0x96: // ZPY
    CPU->MEM[ (cpu_read() + CPU->Y) & 0xFF ] = CPU->X;
 80029d8:	d0a6c717 	ldw	r2,-25828(gp)
 80029dc:	14000617 	ldw	r16,24(r2)
 80029e0:	80033500 	call	8003350 <cpu_read>
 80029e4:	10c03fcc 	andi	r3,r2,255
 80029e8:	d0a6c717 	ldw	r2,-25828(gp)
 80029ec:	10800303 	ldbu	r2,12(r2)
 80029f0:	10803fcc 	andi	r2,r2,255
 80029f4:	1885883a 	add	r2,r3,r2
 80029f8:	10803fcc 	andi	r2,r2,255
 80029fc:	8087883a 	add	r3,r16,r2
 8002a00:	d0a6c717 	ldw	r2,-25828(gp)
 8002a04:	108002c3 	ldbu	r2,11(r2)
 8002a08:	18800005 	stb	r2,0(r3)
    printf("STX!\n"); CPU->T = 4; break;
 8002a0c:	01020074 	movhi	r4,2049
 8002a10:	211c6104 	addi	r4,r4,29060
 8002a14:	8005d500 	call	8005d50 <puts>
 8002a18:	d0e6c717 	ldw	r3,-25828(gp)
 8002a1c:	00800104 	movi	r2,4
 8002a20:	18800485 	stb	r2,18(r3)
 8002a24:	0000bf06 	br	8002d24 <cpu_exec+0x2a74>

    // ############################ STY ################################
  case 0x8C: // ABS
	temp = cpu_read();
 8002a28:	80033500 	call	8003350 <cpu_read>
 8002a2c:	10803fcc 	andi	r2,r2,255
 8002a30:	e0bffe8d 	sth	r2,-6(fp)
	temp2 = (cpu_read()) << 8;
 8002a34:	80033500 	call	8003350 <cpu_read>
 8002a38:	10803fcc 	andi	r2,r2,255
 8002a3c:	1004923a 	slli	r2,r2,8
 8002a40:	e0bffe0d 	sth	r2,-8(fp)
	cpu_mem_write( CPU->Y, ( temp | temp2 ) );
 8002a44:	d0a6c717 	ldw	r2,-25828(gp)
 8002a48:	10800303 	ldbu	r2,12(r2)
 8002a4c:	11003fcc 	andi	r4,r2,255
 8002a50:	e0fffe8b 	ldhu	r3,-6(fp)
 8002a54:	e0bffe0b 	ldhu	r2,-8(fp)
 8002a58:	1884b03a 	or	r2,r3,r2
 8002a5c:	117fffcc 	andi	r5,r2,65535
 8002a60:	80034540 	call	8003454 <cpu_mem_write>
    printf("STY!\n"); CPU->T = 4; break;
 8002a64:	01020074 	movhi	r4,2049
 8002a68:	211c6304 	addi	r4,r4,29068
 8002a6c:	8005d500 	call	8005d50 <puts>
 8002a70:	d0e6c717 	ldw	r3,-25828(gp)
 8002a74:	00800104 	movi	r2,4
 8002a78:	18800485 	stb	r2,18(r3)
 8002a7c:	0000a906 	br	8002d24 <cpu_exec+0x2a74>
  case 0x84: // ZP
    CPU->MEM[ cpu_read() ] = CPU->Y;
 8002a80:	d0a6c717 	ldw	r2,-25828(gp)
 8002a84:	14000617 	ldw	r16,24(r2)
 8002a88:	80033500 	call	8003350 <cpu_read>
 8002a8c:	10803fcc 	andi	r2,r2,255
 8002a90:	8087883a 	add	r3,r16,r2
 8002a94:	d0a6c717 	ldw	r2,-25828(gp)
 8002a98:	10800303 	ldbu	r2,12(r2)
 8002a9c:	18800005 	stb	r2,0(r3)
    printf("STY!\n"); CPU->T = 3; break;
 8002aa0:	01020074 	movhi	r4,2049
 8002aa4:	211c6304 	addi	r4,r4,29068
 8002aa8:	8005d500 	call	8005d50 <puts>
 8002aac:	d0e6c717 	ldw	r3,-25828(gp)
 8002ab0:	008000c4 	movi	r2,3
 8002ab4:	18800485 	stb	r2,18(r3)
 8002ab8:	00009a06 	br	8002d24 <cpu_exec+0x2a74>
  case 0x94: // ZPX
    CPU->MEM[ (cpu_read() + CPU->X) & 0xFF ] = CPU->Y;
 8002abc:	d0a6c717 	ldw	r2,-25828(gp)
 8002ac0:	14000617 	ldw	r16,24(r2)
 8002ac4:	80033500 	call	8003350 <cpu_read>
 8002ac8:	10c03fcc 	andi	r3,r2,255
 8002acc:	d0a6c717 	ldw	r2,-25828(gp)
 8002ad0:	108002c3 	ldbu	r2,11(r2)
 8002ad4:	10803fcc 	andi	r2,r2,255
 8002ad8:	1885883a 	add	r2,r3,r2
 8002adc:	10803fcc 	andi	r2,r2,255
 8002ae0:	8087883a 	add	r3,r16,r2
 8002ae4:	d0a6c717 	ldw	r2,-25828(gp)
 8002ae8:	10800303 	ldbu	r2,12(r2)
 8002aec:	18800005 	stb	r2,0(r3)
    printf("STY!\n"); CPU->T = 4; break;
 8002af0:	01020074 	movhi	r4,2049
 8002af4:	211c6304 	addi	r4,r4,29068
 8002af8:	8005d500 	call	8005d50 <puts>
 8002afc:	d0e6c717 	ldw	r3,-25828(gp)
 8002b00:	00800104 	movi	r2,4
 8002b04:	18800485 	stb	r2,18(r3)
 8002b08:	00008606 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## TAX #################################
  case 0xAA: // IMP
    CPU->X = CPU->A;
 8002b0c:	d0e6c717 	ldw	r3,-25828(gp)
 8002b10:	d0a6c717 	ldw	r2,-25828(gp)
 8002b14:	10800283 	ldbu	r2,10(r2)
 8002b18:	188002c5 	stb	r2,11(r3)
    CPU->P.N = ((CPU->X & 0x80) > 0) ? 1 : 0;
 8002b1c:	d0e6c717 	ldw	r3,-25828(gp)
 8002b20:	d0a6c717 	ldw	r2,-25828(gp)
 8002b24:	108002c3 	ldbu	r2,11(r2)
 8002b28:	10803fcc 	andi	r2,r2,255
 8002b2c:	1080200c 	andi	r2,r2,128
 8002b30:	10800048 	cmpgei	r2,r2,1
 8002b34:	18800245 	stb	r2,9(r3)
    CPU->P.Z = (CPU->X == 0) ? 1 : 0;
 8002b38:	d0e6c717 	ldw	r3,-25828(gp)
 8002b3c:	d0a6c717 	ldw	r2,-25828(gp)
 8002b40:	108002c3 	ldbu	r2,11(r2)
 8002b44:	10803fcc 	andi	r2,r2,255
 8002b48:	1005003a 	cmpeq	r2,r2,zero
 8002b4c:	18800105 	stb	r2,4(r3)
    printf("TAX!\n"); CPU->T = 2; break;
 8002b50:	01020074 	movhi	r4,2049
 8002b54:	211c6504 	addi	r4,r4,29076
 8002b58:	8005d500 	call	8005d50 <puts>
 8002b5c:	d0e6c717 	ldw	r3,-25828(gp)
 8002b60:	00800084 	movi	r2,2
 8002b64:	18800485 	stb	r2,18(r3)
 8002b68:	00006e06 	br	8002d24 <cpu_exec+0x2a74>

    // ########################### TAY ################################
  case 0xA8: // IMP
    CPU->Y = CPU->A;
 8002b6c:	d0e6c717 	ldw	r3,-25828(gp)
 8002b70:	d0a6c717 	ldw	r2,-25828(gp)
 8002b74:	10800283 	ldbu	r2,10(r2)
 8002b78:	18800305 	stb	r2,12(r3)
    CPU->P.N = ((CPU->Y & 0x80) > 0) ? 1 : 0;
 8002b7c:	d0e6c717 	ldw	r3,-25828(gp)
 8002b80:	d0a6c717 	ldw	r2,-25828(gp)
 8002b84:	10800303 	ldbu	r2,12(r2)
 8002b88:	10803fcc 	andi	r2,r2,255
 8002b8c:	1080200c 	andi	r2,r2,128
 8002b90:	10800048 	cmpgei	r2,r2,1
 8002b94:	18800245 	stb	r2,9(r3)
    CPU->P.Z = (CPU->Y == 0) ? 1 : 0;
 8002b98:	d0e6c717 	ldw	r3,-25828(gp)
 8002b9c:	d0a6c717 	ldw	r2,-25828(gp)
 8002ba0:	10800303 	ldbu	r2,12(r2)
 8002ba4:	10803fcc 	andi	r2,r2,255
 8002ba8:	1005003a 	cmpeq	r2,r2,zero
 8002bac:	18800105 	stb	r2,4(r3)
    printf("TAY!\n"); CPU->T = 2; break;
 8002bb0:	01020074 	movhi	r4,2049
 8002bb4:	211c6704 	addi	r4,r4,29084
 8002bb8:	8005d500 	call	8005d50 <puts>
 8002bbc:	d0e6c717 	ldw	r3,-25828(gp)
 8002bc0:	00800084 	movi	r2,2
 8002bc4:	18800485 	stb	r2,18(r3)
 8002bc8:	00005606 	br	8002d24 <cpu_exec+0x2a74>


    // ############################# TSX ##############################
  case 0xBA:
    CPU->X = CPU->S;
 8002bcc:	d0e6c717 	ldw	r3,-25828(gp)
 8002bd0:	d0a6c717 	ldw	r2,-25828(gp)
 8002bd4:	10800083 	ldbu	r2,2(r2)
 8002bd8:	188002c5 	stb	r2,11(r3)
    CPU->P.N = ((CPU->X & 0x80) > 0) ? 1 : 0;
 8002bdc:	d0e6c717 	ldw	r3,-25828(gp)
 8002be0:	d0a6c717 	ldw	r2,-25828(gp)
 8002be4:	108002c3 	ldbu	r2,11(r2)
 8002be8:	10803fcc 	andi	r2,r2,255
 8002bec:	1080200c 	andi	r2,r2,128
 8002bf0:	10800048 	cmpgei	r2,r2,1
 8002bf4:	18800245 	stb	r2,9(r3)
    CPU->P.Z = (CPU->X == 0) ? 1 : 0;
 8002bf8:	d0e6c717 	ldw	r3,-25828(gp)
 8002bfc:	d0a6c717 	ldw	r2,-25828(gp)
 8002c00:	108002c3 	ldbu	r2,11(r2)
 8002c04:	10803fcc 	andi	r2,r2,255
 8002c08:	1005003a 	cmpeq	r2,r2,zero
 8002c0c:	18800105 	stb	r2,4(r3)
    printf("TSX!\n"); CPU->T = 2; break;
 8002c10:	01020074 	movhi	r4,2049
 8002c14:	211c6904 	addi	r4,r4,29092
 8002c18:	8005d500 	call	8005d50 <puts>
 8002c1c:	d0e6c717 	ldw	r3,-25828(gp)
 8002c20:	00800084 	movi	r2,2
 8002c24:	18800485 	stb	r2,18(r3)
 8002c28:	00003e06 	br	8002d24 <cpu_exec+0x2a74>

    // ########################## TXA ################################
  case 0x8A:
    CPU->A = CPU->X;
 8002c2c:	d0e6c717 	ldw	r3,-25828(gp)
 8002c30:	d0a6c717 	ldw	r2,-25828(gp)
 8002c34:	108002c3 	ldbu	r2,11(r2)
 8002c38:	18800285 	stb	r2,10(r3)
    CPU->P.N = ((CPU->A & 0x80) > 0) ? 1 : 0;
 8002c3c:	d0e6c717 	ldw	r3,-25828(gp)
 8002c40:	d0a6c717 	ldw	r2,-25828(gp)
 8002c44:	10800283 	ldbu	r2,10(r2)
 8002c48:	10803fcc 	andi	r2,r2,255
 8002c4c:	1080200c 	andi	r2,r2,128
 8002c50:	10800048 	cmpgei	r2,r2,1
 8002c54:	18800245 	stb	r2,9(r3)
    CPU->P.Z = (CPU->A == 0) ? 1 : 0;
 8002c58:	d0e6c717 	ldw	r3,-25828(gp)
 8002c5c:	d0a6c717 	ldw	r2,-25828(gp)
 8002c60:	10800283 	ldbu	r2,10(r2)
 8002c64:	10803fcc 	andi	r2,r2,255
 8002c68:	1005003a 	cmpeq	r2,r2,zero
 8002c6c:	18800105 	stb	r2,4(r3)
    printf("TXA!\n"); CPU->T = 2; break;
 8002c70:	01020074 	movhi	r4,2049
 8002c74:	211c6b04 	addi	r4,r4,29100
 8002c78:	8005d500 	call	8005d50 <puts>
 8002c7c:	d0e6c717 	ldw	r3,-25828(gp)
 8002c80:	00800084 	movi	r2,2
 8002c84:	18800485 	stb	r2,18(r3)
 8002c88:	00002606 	br	8002d24 <cpu_exec+0x2a74>

    // ############################# TXS ################################
  case 0x9A:
    CPU->S = CPU->X;
 8002c8c:	d0e6c717 	ldw	r3,-25828(gp)
 8002c90:	d0a6c717 	ldw	r2,-25828(gp)
 8002c94:	108002c3 	ldbu	r2,11(r2)
 8002c98:	18800085 	stb	r2,2(r3)
    printf("TXS!\n"); CPU->T = 2; break;
 8002c9c:	01020074 	movhi	r4,2049
 8002ca0:	211c6d04 	addi	r4,r4,29108
 8002ca4:	8005d500 	call	8005d50 <puts>
 8002ca8:	d0e6c717 	ldw	r3,-25828(gp)
 8002cac:	00800084 	movi	r2,2
 8002cb0:	18800485 	stb	r2,18(r3)
 8002cb4:	00001b06 	br	8002d24 <cpu_exec+0x2a74>

    // ############################### TYA ##############################
  case 0x98:
    /* Transfer Y register to Accumulator. Fixed opcode bug. */
    CPU->A = CPU->Y;
 8002cb8:	d0e6c717 	ldw	r3,-25828(gp)
 8002cbc:	d0a6c717 	ldw	r2,-25828(gp)
 8002cc0:	10800303 	ldbu	r2,12(r2)
 8002cc4:	18800285 	stb	r2,10(r3)
    CPU->P.N = ((CPU->A & 0x80) > 0) ? 1 : 0;
 8002cc8:	d0e6c717 	ldw	r3,-25828(gp)
 8002ccc:	d0a6c717 	ldw	r2,-25828(gp)
 8002cd0:	10800283 	ldbu	r2,10(r2)
 8002cd4:	10803fcc 	andi	r2,r2,255
 8002cd8:	1080200c 	andi	r2,r2,128
 8002cdc:	10800048 	cmpgei	r2,r2,1
 8002ce0:	18800245 	stb	r2,9(r3)
    CPU->P.Z = (CPU->A == 0) ? 1 : 0;
 8002ce4:	d0e6c717 	ldw	r3,-25828(gp)
 8002ce8:	d0a6c717 	ldw	r2,-25828(gp)
 8002cec:	10800283 	ldbu	r2,10(r2)
 8002cf0:	10803fcc 	andi	r2,r2,255
 8002cf4:	1005003a 	cmpeq	r2,r2,zero
 8002cf8:	18800105 	stb	r2,4(r3)
    printf("TYA!\n"); CPU->T = 2; break;
 8002cfc:	01020074 	movhi	r4,2049
 8002d00:	211c6f04 	addi	r4,r4,29116
 8002d04:	8005d500 	call	8005d50 <puts>
 8002d08:	d0e6c717 	ldw	r3,-25828(gp)
 8002d0c:	00800084 	movi	r2,2
 8002d10:	18800485 	stb	r2,18(r3)
 8002d14:	00000306 	br	8002d24 <cpu_exec+0x2a74>


  default:
    printf("Invalid opcode!\n");
 8002d18:	01020074 	movhi	r4,2049
 8002d1c:	211c7104 	addi	r4,r4,29124
 8002d20:	8005d500 	call	8005d50 <puts>
    break;
  }

  return;
}
 8002d24:	e037883a 	mov	sp,fp
 8002d28:	dfc00317 	ldw	ra,12(sp)
 8002d2c:	df000217 	ldw	fp,8(sp)
 8002d30:	dc400117 	ldw	r17,4(sp)
 8002d34:	dc000017 	ldw	r16,0(sp)
 8002d38:	dec00404 	addi	sp,sp,16
 8002d3c:	f800283a 	ret

08002d40 <cpu_reset>:

/* CPU Reset interrupt handler */
inline void cpu_reset()
{
 8002d40:	deffff04 	addi	sp,sp,-4
 8002d44:	df000015 	stw	fp,0(sp)
 8002d48:	d839883a 	mov	fp,sp
	// Set all registers to initial states
	CPU->S = 0xFD;
 8002d4c:	d0e6c717 	ldw	r3,-25828(gp)
 8002d50:	00bfff44 	movi	r2,-3
 8002d54:	18800085 	stb	r2,2(r3)
	CPU->P.N = 0x00;
 8002d58:	d0a6c717 	ldw	r2,-25828(gp)
 8002d5c:	10000245 	stb	zero,9(r2)
	CPU->P.V = 0x00;
 8002d60:	d0a6c717 	ldw	r2,-25828(gp)
 8002d64:	10000205 	stb	zero,8(r2)
	CPU->P.B = 0x00;
 8002d68:	d0a6c717 	ldw	r2,-25828(gp)
 8002d6c:	100001c5 	stb	zero,7(r2)
	CPU->P.D = 0x00;
 8002d70:	d0a6c717 	ldw	r2,-25828(gp)
 8002d74:	10000185 	stb	zero,6(r2)
	CPU->P.I = 0x01; // Interrupt Disable is on
 8002d78:	d0e6c717 	ldw	r3,-25828(gp)
 8002d7c:	00800044 	movi	r2,1
 8002d80:	18800145 	stb	r2,5(r3)
	CPU->P.C = 0x00;
 8002d84:	d0a6c717 	ldw	r2,-25828(gp)
 8002d88:	100000c5 	stb	zero,3(r2)
	CPU->P.Z = 0x00;
 8002d8c:	d0a6c717 	ldw	r2,-25828(gp)
 8002d90:	10000105 	stb	zero,4(r2)
	CPU->A = 0x00;
 8002d94:	d0a6c717 	ldw	r2,-25828(gp)
 8002d98:	10000285 	stb	zero,10(r2)
	CPU->X = 0x00;
 8002d9c:	d0a6c717 	ldw	r2,-25828(gp)
 8002da0:	100002c5 	stb	zero,11(r2)
	CPU->Y = 0x00;
 8002da4:	d0a6c717 	ldw	r2,-25828(gp)
 8002da8:	10000305 	stb	zero,12(r2)
	CPU->AB = 0x0000;
 8002dac:	d0a6c717 	ldw	r2,-25828(gp)
 8002db0:	1000038d 	sth	zero,14(r2)
	CPU->DB = 0x00;
 8002db4:	d0a6c717 	ldw	r2,-25828(gp)
 8002db8:	10000405 	stb	zero,16(r2)
	CPU->IR = 0x00;
 8002dbc:	d0a6c717 	ldw	r2,-25828(gp)
 8002dc0:	10000445 	stb	zero,17(r2)
	CPU->RES = 0;
 8002dc4:	d0a6c717 	ldw	r2,-25828(gp)
 8002dc8:	10000505 	stb	zero,20(r2)
	CPU->NMI = 0;
 8002dcc:	d0a6c717 	ldw	r2,-25828(gp)
 8002dd0:	100004c5 	stb	zero,19(r2)
	CPU->IRQ = 0;
 8002dd4:	d0a6c717 	ldw	r2,-25828(gp)
 8002dd8:	10000545 	stb	zero,21(r2)
	CPU->T = 0;
 8002ddc:	d0a6c717 	ldw	r2,-25828(gp)
 8002de0:	10000485 	stb	zero,18(r2)

	// Finally, push RESET vector to PC to start Reset handler (AKA when you 'turn on' the NES)
	CPU->PC = CPU->MEM[RESL] | (CPU->MEM[ RESH ] << 8);
 8002de4:	d166c717 	ldw	r5,-25828(gp)
 8002de8:	d0a6c717 	ldw	r2,-25828(gp)
 8002dec:	10c00617 	ldw	r3,24(r2)
 8002df0:	00bfff14 	movui	r2,65532
 8002df4:	1885883a 	add	r2,r3,r2
 8002df8:	10800003 	ldbu	r2,0(r2)
 8002dfc:	11003fcc 	andi	r4,r2,255
 8002e00:	d0a6c717 	ldw	r2,-25828(gp)
 8002e04:	10c00617 	ldw	r3,24(r2)
 8002e08:	00bfff54 	movui	r2,65533
 8002e0c:	1885883a 	add	r2,r3,r2
 8002e10:	10800003 	ldbu	r2,0(r2)
 8002e14:	10803fcc 	andi	r2,r2,255
 8002e18:	1004923a 	slli	r2,r2,8
 8002e1c:	2084b03a 	or	r2,r4,r2
 8002e20:	2880000d 	sth	r2,0(r5)
	return;
}
 8002e24:	e037883a 	mov	sp,fp
 8002e28:	df000017 	ldw	fp,0(sp)
 8002e2c:	dec00104 	addi	sp,sp,4
 8002e30:	f800283a 	ret

08002e34 <cpu_nmi>:

/* CPU Non-maskable Interrupt handler */
inline void cpu_nmi()
{
 8002e34:	defffd04 	addi	sp,sp,-12
 8002e38:	dfc00215 	stw	ra,8(sp)
 8002e3c:	df000115 	stw	fp,4(sp)
 8002e40:	dc000015 	stw	r16,0(sp)
 8002e44:	d839883a 	mov	fp,sp
	// Throw away next opcodes
	++CPU->PC; ++CPU->PC;
 8002e48:	d0e6c717 	ldw	r3,-25828(gp)
 8002e4c:	1880000b 	ldhu	r2,0(r3)
 8002e50:	10800044 	addi	r2,r2,1
 8002e54:	1880000d 	sth	r2,0(r3)
 8002e58:	d0e6c717 	ldw	r3,-25828(gp)
 8002e5c:	1880000b 	ldhu	r2,0(r3)
 8002e60:	10800044 	addi	r2,r2,1
 8002e64:	1880000d 	sth	r2,0(r3)
	CPU->P.B = 0;
 8002e68:	d0a6c717 	ldw	r2,-25828(gp)
 8002e6c:	100001c5 	stb	zero,7(r2)

	// Push PC onto Stack
	cpu_mem_write( CPU->PC >> 8, STACK + CPU->S );
 8002e70:	d0a6c717 	ldw	r2,-25828(gp)
 8002e74:	1080000b 	ldhu	r2,0(r2)
 8002e78:	10bfffcc 	andi	r2,r2,65535
 8002e7c:	1004d23a 	srli	r2,r2,8
 8002e80:	11003fcc 	andi	r4,r2,255
 8002e84:	d0a6c717 	ldw	r2,-25828(gp)
 8002e88:	10800083 	ldbu	r2,2(r2)
 8002e8c:	10803fcc 	andi	r2,r2,255
 8002e90:	10804004 	addi	r2,r2,256
 8002e94:	117fffcc 	andi	r5,r2,65535
 8002e98:	80034540 	call	8003454 <cpu_mem_write>
	--CPU->S;
 8002e9c:	d0e6c717 	ldw	r3,-25828(gp)
 8002ea0:	18800083 	ldbu	r2,2(r3)
 8002ea4:	10bfffc4 	addi	r2,r2,-1
 8002ea8:	18800085 	stb	r2,2(r3)
	cpu_mem_write( CPU->PC & 0xFF, STACK + CPU->S );
 8002eac:	d0a6c717 	ldw	r2,-25828(gp)
 8002eb0:	1080000b 	ldhu	r2,0(r2)
 8002eb4:	11003fcc 	andi	r4,r2,255
 8002eb8:	d0a6c717 	ldw	r2,-25828(gp)
 8002ebc:	10800083 	ldbu	r2,2(r2)
 8002ec0:	10803fcc 	andi	r2,r2,255
 8002ec4:	10804004 	addi	r2,r2,256
 8002ec8:	117fffcc 	andi	r5,r2,65535
 8002ecc:	80034540 	call	8003454 <cpu_mem_write>
	--CPU->S;
 8002ed0:	d0e6c717 	ldw	r3,-25828(gp)
 8002ed4:	18800083 	ldbu	r2,2(r3)
 8002ed8:	10bfffc4 	addi	r2,r2,-1
 8002edc:	18800085 	stb	r2,2(r3)

	// Push P onto Stack
    CPU->MEM[ STACK + CPU->S ] = cpu_join_flags();
 8002ee0:	d0a6c717 	ldw	r2,-25828(gp)
 8002ee4:	10c00617 	ldw	r3,24(r2)
 8002ee8:	d0a6c717 	ldw	r2,-25828(gp)
 8002eec:	10800083 	ldbu	r2,2(r2)
 8002ef0:	10803fcc 	andi	r2,r2,255
 8002ef4:	1885883a 	add	r2,r3,r2
 8002ef8:	14004004 	addi	r16,r2,256
 8002efc:	80035040 	call	8003504 <cpu_join_flags>
 8002f00:	80800005 	stb	r2,0(r16)
    --CPU->S;
 8002f04:	d0e6c717 	ldw	r3,-25828(gp)
 8002f08:	18800083 	ldbu	r2,2(r3)
 8002f0c:	10bfffc4 	addi	r2,r2,-1
 8002f10:	18800085 	stb	r2,2(r3)

    // Interrupt
    CPU->P.I = 1;
 8002f14:	d0e6c717 	ldw	r3,-25828(gp)
 8002f18:	00800044 	movi	r2,1
 8002f1c:	18800145 	stb	r2,5(r3)
    CPU->PC = CPU->MEM[ NMIL ];
 8002f20:	d126c717 	ldw	r4,-25828(gp)
 8002f24:	d0a6c717 	ldw	r2,-25828(gp)
 8002f28:	10c00617 	ldw	r3,24(r2)
 8002f2c:	00bfff94 	movui	r2,65534
 8002f30:	1885883a 	add	r2,r3,r2
 8002f34:	10800003 	ldbu	r2,0(r2)
 8002f38:	10803fcc 	andi	r2,r2,255
 8002f3c:	2080000d 	sth	r2,0(r4)
    CPU->PC = CPU->PC | (CPU->MEM[ NMIH] << 8);
 8002f40:	d166c717 	ldw	r5,-25828(gp)
 8002f44:	d0a6c717 	ldw	r2,-25828(gp)
 8002f48:	1080000b 	ldhu	r2,0(r2)
 8002f4c:	1009883a 	mov	r4,r2
 8002f50:	d0a6c717 	ldw	r2,-25828(gp)
 8002f54:	10c00617 	ldw	r3,24(r2)
 8002f58:	00bfffd4 	movui	r2,65535
 8002f5c:	1885883a 	add	r2,r3,r2
 8002f60:	10800003 	ldbu	r2,0(r2)
 8002f64:	10803fcc 	andi	r2,r2,255
 8002f68:	1004923a 	slli	r2,r2,8
 8002f6c:	2084b03a 	or	r2,r4,r2
 8002f70:	2880000d 	sth	r2,0(r5)

    // Turn off NMI after, as the system is supposed to automatically flip NMI off.
    CPU->NMI = 0;
 8002f74:	d0a6c717 	ldw	r2,-25828(gp)
 8002f78:	100004c5 	stb	zero,19(r2)

    printf("NMI!\n");
 8002f7c:	01020074 	movhi	r4,2049
 8002f80:	211c7504 	addi	r4,r4,29140
 8002f84:	8005d500 	call	8005d50 <puts>
}
 8002f88:	e037883a 	mov	sp,fp
 8002f8c:	dfc00217 	ldw	ra,8(sp)
 8002f90:	df000117 	ldw	fp,4(sp)
 8002f94:	dc000017 	ldw	r16,0(sp)
 8002f98:	dec00304 	addi	sp,sp,12
 8002f9c:	f800283a 	ret

08002fa0 <cpu_irq>:

/* CPU Interrupt Request handler */
inline void cpu_irq()
{
 8002fa0:	defffd04 	addi	sp,sp,-12
 8002fa4:	dfc00215 	stw	ra,8(sp)
 8002fa8:	df000115 	stw	fp,4(sp)
 8002fac:	dc000015 	stw	r16,0(sp)
 8002fb0:	d839883a 	mov	fp,sp
	// Note: Similar process to NMI, except that it's up to the
	//		 game to disable IRQ themselves. Else, IRQ will continue
	//		 to be called.
	// Throw away next opcodes
	++CPU->PC; ++CPU->PC;
 8002fb4:	d0e6c717 	ldw	r3,-25828(gp)
 8002fb8:	1880000b 	ldhu	r2,0(r3)
 8002fbc:	10800044 	addi	r2,r2,1
 8002fc0:	1880000d 	sth	r2,0(r3)
 8002fc4:	d0e6c717 	ldw	r3,-25828(gp)
 8002fc8:	1880000b 	ldhu	r2,0(r3)
 8002fcc:	10800044 	addi	r2,r2,1
 8002fd0:	1880000d 	sth	r2,0(r3)
	CPU->P.B = 0;
 8002fd4:	d0a6c717 	ldw	r2,-25828(gp)
 8002fd8:	100001c5 	stb	zero,7(r2)

	// Push PC onto Stack
	cpu_mem_write( CPU->PC >> 8, STACK + CPU->S );
 8002fdc:	d0a6c717 	ldw	r2,-25828(gp)
 8002fe0:	1080000b 	ldhu	r2,0(r2)
 8002fe4:	10bfffcc 	andi	r2,r2,65535
 8002fe8:	1004d23a 	srli	r2,r2,8
 8002fec:	11003fcc 	andi	r4,r2,255
 8002ff0:	d0a6c717 	ldw	r2,-25828(gp)
 8002ff4:	10800083 	ldbu	r2,2(r2)
 8002ff8:	10803fcc 	andi	r2,r2,255
 8002ffc:	10804004 	addi	r2,r2,256
 8003000:	117fffcc 	andi	r5,r2,65535
 8003004:	80034540 	call	8003454 <cpu_mem_write>
	--CPU->S;
 8003008:	d0e6c717 	ldw	r3,-25828(gp)
 800300c:	18800083 	ldbu	r2,2(r3)
 8003010:	10bfffc4 	addi	r2,r2,-1
 8003014:	18800085 	stb	r2,2(r3)
	cpu_mem_write( CPU->PC & 0xFF, STACK + CPU->S );
 8003018:	d0a6c717 	ldw	r2,-25828(gp)
 800301c:	1080000b 	ldhu	r2,0(r2)
 8003020:	11003fcc 	andi	r4,r2,255
 8003024:	d0a6c717 	ldw	r2,-25828(gp)
 8003028:	10800083 	ldbu	r2,2(r2)
 800302c:	10803fcc 	andi	r2,r2,255
 8003030:	10804004 	addi	r2,r2,256
 8003034:	117fffcc 	andi	r5,r2,65535
 8003038:	80034540 	call	8003454 <cpu_mem_write>
	--CPU->S;
 800303c:	d0e6c717 	ldw	r3,-25828(gp)
 8003040:	18800083 	ldbu	r2,2(r3)
 8003044:	10bfffc4 	addi	r2,r2,-1
 8003048:	18800085 	stb	r2,2(r3)

	// Push P onto Stack
    CPU->MEM[ STACK + CPU->S ] = cpu_join_flags();
 800304c:	d0a6c717 	ldw	r2,-25828(gp)
 8003050:	10c00617 	ldw	r3,24(r2)
 8003054:	d0a6c717 	ldw	r2,-25828(gp)
 8003058:	10800083 	ldbu	r2,2(r2)
 800305c:	10803fcc 	andi	r2,r2,255
 8003060:	1885883a 	add	r2,r3,r2
 8003064:	14004004 	addi	r16,r2,256
 8003068:	80035040 	call	8003504 <cpu_join_flags>
 800306c:	80800005 	stb	r2,0(r16)
    --CPU->S;
 8003070:	d0e6c717 	ldw	r3,-25828(gp)
 8003074:	18800083 	ldbu	r2,2(r3)
 8003078:	10bfffc4 	addi	r2,r2,-1
 800307c:	18800085 	stb	r2,2(r3)

    // Interrupt
    CPU->P.I = 1;
 8003080:	d0e6c717 	ldw	r3,-25828(gp)
 8003084:	00800044 	movi	r2,1
 8003088:	18800145 	stb	r2,5(r3)
    CPU->PC = CPU->MEM[ NMIL ];
 800308c:	d126c717 	ldw	r4,-25828(gp)
 8003090:	d0a6c717 	ldw	r2,-25828(gp)
 8003094:	10c00617 	ldw	r3,24(r2)
 8003098:	00bfff94 	movui	r2,65534
 800309c:	1885883a 	add	r2,r3,r2
 80030a0:	10800003 	ldbu	r2,0(r2)
 80030a4:	10803fcc 	andi	r2,r2,255
 80030a8:	2080000d 	sth	r2,0(r4)
    CPU->PC = CPU->PC | (CPU->MEM[ NMIH] << 8);
 80030ac:	d166c717 	ldw	r5,-25828(gp)
 80030b0:	d0a6c717 	ldw	r2,-25828(gp)
 80030b4:	1080000b 	ldhu	r2,0(r2)
 80030b8:	1009883a 	mov	r4,r2
 80030bc:	d0a6c717 	ldw	r2,-25828(gp)
 80030c0:	10c00617 	ldw	r3,24(r2)
 80030c4:	00bfffd4 	movui	r2,65535
 80030c8:	1885883a 	add	r2,r3,r2
 80030cc:	10800003 	ldbu	r2,0(r2)
 80030d0:	10803fcc 	andi	r2,r2,255
 80030d4:	1004923a 	slli	r2,r2,8
 80030d8:	2084b03a 	or	r2,r4,r2
 80030dc:	2880000d 	sth	r2,0(r5)

    printf("IRQ!\n");
 80030e0:	01020074 	movhi	r4,2049
 80030e4:	211c7704 	addi	r4,r4,29148
 80030e8:	8005d500 	call	8005d50 <puts>
}
 80030ec:	e037883a 	mov	sp,fp
 80030f0:	dfc00217 	ldw	ra,8(sp)
 80030f4:	df000117 	ldw	fp,4(sp)
 80030f8:	dc000017 	ldw	r16,0(sp)
 80030fc:	dec00304 	addi	sp,sp,12
 8003100:	f800283a 	ret

08003104 <cpu_init>:


/* Initializes all registers and memory. */
inline void cpu_init()
{
 8003104:	defffc04 	addi	sp,sp,-16
 8003108:	dfc00315 	stw	ra,12(sp)
 800310c:	df000215 	stw	fp,8(sp)
 8003110:	dc000115 	stw	r16,4(sp)
 8003114:	df000104 	addi	fp,sp,4
  CPU = (RP2A03*) malloc(sizeof(RP2A03));
 8003118:	01000704 	movi	r4,28
 800311c:	80052a40 	call	80052a4 <malloc>
 8003120:	d0a6c715 	stw	r2,-25828(gp)
  CPU->MEM = (byte*) malloc(sizeof(byte)*64*1024); // Allocate memory
 8003124:	d426c717 	ldw	r16,-25828(gp)
 8003128:	01000074 	movhi	r4,1
 800312c:	80052a40 	call	80052a4 <malloc>
 8003130:	80800615 	stw	r2,24(r16)
  CPU->RES = 1;
 8003134:	d0e6c717 	ldw	r3,-25828(gp)
 8003138:	00800044 	movi	r2,1
 800313c:	18800505 	stb	r2,20(r3)

  // Initialize CPU Memory
  int i;
  for(i = 0; i < 0xFFFF+1; ++i)
 8003140:	e03fff15 	stw	zero,-4(fp)
 8003144:	00000806 	br	8003168 <cpu_init+0x64>
	  CPU->MEM[i] = 0;
 8003148:	d0a6c717 	ldw	r2,-25828(gp)
 800314c:	10c00617 	ldw	r3,24(r2)
 8003150:	e0bfff17 	ldw	r2,-4(fp)
 8003154:	1885883a 	add	r2,r3,r2
 8003158:	10000005 	stb	zero,0(r2)
  CPU->MEM = (byte*) malloc(sizeof(byte)*64*1024); // Allocate memory
  CPU->RES = 1;

  // Initialize CPU Memory
  int i;
  for(i = 0; i < 0xFFFF+1; ++i)
 800315c:	e0bfff17 	ldw	r2,-4(fp)
 8003160:	10800044 	addi	r2,r2,1
 8003164:	e0bfff15 	stw	r2,-4(fp)
 8003168:	e0ffff17 	ldw	r3,-4(fp)
 800316c:	00bfffd4 	movui	r2,65535
 8003170:	10fff50e 	bge	r2,r3,8003148 <cpu_init+0x44>
	  CPU->MEM[i] = 0;

  return;
}
 8003174:	e037883a 	mov	sp,fp
 8003178:	dfc00217 	ldw	ra,8(sp)
 800317c:	df000117 	ldw	fp,4(sp)
 8003180:	dc000017 	ldw	r16,0(sp)
 8003184:	dec00304 	addi	sp,sp,12
 8003188:	f800283a 	ret

0800318c <cpu_status>:
/* Prints out the following: (left-right)
 	   Accumulator, X, Y, Processor Flags, Stack Pointer, T/Cycle Count, Instruction Register,
	   and PPU Registers. Note IR is for the instruction to be execute for the next CPU tick.
*/
inline void cpu_status()
{
 800318c:	defff304 	addi	sp,sp,-52
 8003190:	dfc00c15 	stw	ra,48(sp)
 8003194:	df000b15 	stw	fp,44(sp)
 8003198:	df000b04 	addi	fp,sp,44
  printf("A: %x X: %x Y: %x P: %x%x1%x %x%x%x%x SP: %x PC: %x T: %x IR: %x [Next Instruction] ",
 800319c:	d0a6c717 	ldw	r2,-25828(gp)
 80031a0:	10800283 	ldbu	r2,10(r2)
 80031a4:	11403fcc 	andi	r5,r2,255
 80031a8:	d0a6c717 	ldw	r2,-25828(gp)
 80031ac:	108002c3 	ldbu	r2,11(r2)
 80031b0:	11803fcc 	andi	r6,r2,255
 80031b4:	d0a6c717 	ldw	r2,-25828(gp)
 80031b8:	10800303 	ldbu	r2,12(r2)
 80031bc:	11c03fcc 	andi	r7,r2,255
 80031c0:	d0a6c717 	ldw	r2,-25828(gp)
 80031c4:	10800243 	ldbu	r2,9(r2)
 80031c8:	10c03fcc 	andi	r3,r2,255
 80031cc:	d0a6c717 	ldw	r2,-25828(gp)
 80031d0:	10800203 	ldbu	r2,8(r2)
 80031d4:	11003fcc 	andi	r4,r2,255
 80031d8:	d0a6c717 	ldw	r2,-25828(gp)
 80031dc:	108001c3 	ldbu	r2,7(r2)
 80031e0:	12003fcc 	andi	r8,r2,255
 80031e4:	d0a6c717 	ldw	r2,-25828(gp)
 80031e8:	10800183 	ldbu	r2,6(r2)
 80031ec:	12403fcc 	andi	r9,r2,255
 80031f0:	d0a6c717 	ldw	r2,-25828(gp)
 80031f4:	10800143 	ldbu	r2,5(r2)
 80031f8:	12803fcc 	andi	r10,r2,255
 80031fc:	d0a6c717 	ldw	r2,-25828(gp)
 8003200:	10800103 	ldbu	r2,4(r2)
 8003204:	12c03fcc 	andi	r11,r2,255
 8003208:	d0a6c717 	ldw	r2,-25828(gp)
 800320c:	108000c3 	ldbu	r2,3(r2)
 8003210:	13003fcc 	andi	r12,r2,255
 8003214:	d0a6c717 	ldw	r2,-25828(gp)
 8003218:	10800083 	ldbu	r2,2(r2)
 800321c:	13403fcc 	andi	r13,r2,255
 8003220:	d0a6c717 	ldw	r2,-25828(gp)
 8003224:	1080000b 	ldhu	r2,0(r2)
 8003228:	13bfffcc 	andi	r14,r2,65535
 800322c:	d0a6c717 	ldw	r2,-25828(gp)
 8003230:	10800483 	ldbu	r2,18(r2)
 8003234:	13c03fcc 	andi	r15,r2,255
 8003238:	d0a6c717 	ldw	r2,-25828(gp)
 800323c:	10800443 	ldbu	r2,17(r2)
 8003240:	10803fcc 	andi	r2,r2,255
 8003244:	d8c00015 	stw	r3,0(sp)
 8003248:	d9000115 	stw	r4,4(sp)
 800324c:	da000215 	stw	r8,8(sp)
 8003250:	da400315 	stw	r9,12(sp)
 8003254:	da800415 	stw	r10,16(sp)
 8003258:	dac00515 	stw	r11,20(sp)
 800325c:	db000615 	stw	r12,24(sp)
 8003260:	db400715 	stw	r13,28(sp)
 8003264:	db800815 	stw	r14,32(sp)
 8003268:	dbc00915 	stw	r15,36(sp)
 800326c:	d8800a15 	stw	r2,40(sp)
 8003270:	01020074 	movhi	r4,2049
 8003274:	211c7904 	addi	r4,r4,29156
 8003278:	8005c140 	call	8005c14 <printf>
	 CPU->A, CPU->X, CPU->Y, CPU->P.N, CPU->P.V, CPU->P.B, CPU->P.D, CPU->P.I,
	 CPU->P.Z, CPU->P.C, CPU->S, CPU->PC, CPU->T, CPU->IR);

  printf("\n$2000: %x $2001: %x  $2002: %x $2003: %x $2004: %x  $2005: %x  $2006: %x  $2007: %x ",
 800327c:	d0a6c717 	ldw	r2,-25828(gp)
 8003280:	10800617 	ldw	r2,24(r2)
 8003284:	10880004 	addi	r2,r2,8192
 8003288:	10800003 	ldbu	r2,0(r2)
 800328c:	11403fcc 	andi	r5,r2,255
 8003290:	d0a6c717 	ldw	r2,-25828(gp)
 8003294:	10800617 	ldw	r2,24(r2)
 8003298:	10880044 	addi	r2,r2,8193
 800329c:	10800003 	ldbu	r2,0(r2)
 80032a0:	11803fcc 	andi	r6,r2,255
 80032a4:	d0a6c717 	ldw	r2,-25828(gp)
 80032a8:	10800617 	ldw	r2,24(r2)
 80032ac:	10880084 	addi	r2,r2,8194
 80032b0:	10800003 	ldbu	r2,0(r2)
 80032b4:	11c03fcc 	andi	r7,r2,255
 80032b8:	d0a6c717 	ldw	r2,-25828(gp)
 80032bc:	10800617 	ldw	r2,24(r2)
 80032c0:	108800c4 	addi	r2,r2,8195
 80032c4:	10800003 	ldbu	r2,0(r2)
 80032c8:	11003fcc 	andi	r4,r2,255
 80032cc:	d0a6c717 	ldw	r2,-25828(gp)
 80032d0:	10800617 	ldw	r2,24(r2)
 80032d4:	10880104 	addi	r2,r2,8196
 80032d8:	10800003 	ldbu	r2,0(r2)
 80032dc:	12003fcc 	andi	r8,r2,255
 80032e0:	d0a6c717 	ldw	r2,-25828(gp)
 80032e4:	10800617 	ldw	r2,24(r2)
 80032e8:	10880144 	addi	r2,r2,8197
 80032ec:	10800003 	ldbu	r2,0(r2)
 80032f0:	12403fcc 	andi	r9,r2,255
 80032f4:	d0a6c717 	ldw	r2,-25828(gp)
 80032f8:	10800617 	ldw	r2,24(r2)
 80032fc:	10880184 	addi	r2,r2,8198
 8003300:	10800003 	ldbu	r2,0(r2)
 8003304:	10c03fcc 	andi	r3,r2,255
 8003308:	d0a6c717 	ldw	r2,-25828(gp)
 800330c:	10800617 	ldw	r2,24(r2)
 8003310:	108801c4 	addi	r2,r2,8199
 8003314:	10800003 	ldbu	r2,0(r2)
 8003318:	10803fcc 	andi	r2,r2,255
 800331c:	d9000015 	stw	r4,0(sp)
 8003320:	da000115 	stw	r8,4(sp)
 8003324:	da400215 	stw	r9,8(sp)
 8003328:	d8c00315 	stw	r3,12(sp)
 800332c:	d8800415 	stw	r2,16(sp)
 8003330:	01020074 	movhi	r4,2049
 8003334:	211c8f04 	addi	r4,r4,29244
 8003338:	8005c140 	call	8005c14 <printf>
  	  CPU->MEM[0x2000], CPU->MEM[0x2001], CPU->MEM[0x2002], CPU->MEM[0x2003], CPU->MEM[0x2004],
  	  CPU->MEM[0x2005], CPU->MEM[0x2006], CPU->MEM[0x2007] );
  return;
}
 800333c:	e037883a 	mov	sp,fp
 8003340:	dfc00117 	ldw	ra,4(sp)
 8003344:	df000017 	ldw	fp,0(sp)
 8003348:	dec00204 	addi	sp,sp,8
 800334c:	f800283a 	ret

08003350 <cpu_read>:


/* Read the contents of PC, then increment it */
inline byte cpu_read()
{
 8003350:	deffff04 	addi	sp,sp,-4
 8003354:	df000015 	stw	fp,0(sp)
 8003358:	d839883a 	mov	fp,sp
	return (CPU->MEM[CPU->PC++]);
 800335c:	d0a6c717 	ldw	r2,-25828(gp)
 8003360:	10c00617 	ldw	r3,24(r2)
 8003364:	d166c717 	ldw	r5,-25828(gp)
 8003368:	2900000b 	ldhu	r4,0(r5)
 800336c:	20bfffcc 	andi	r2,r4,65535
 8003370:	1885883a 	add	r2,r3,r2
 8003374:	10800003 	ldbu	r2,0(r2)
 8003378:	10c03fcc 	andi	r3,r2,255
 800337c:	20800044 	addi	r2,r4,1
 8003380:	2880000d 	sth	r2,0(r5)
 8003384:	1805883a 	mov	r2,r3
}
 8003388:	e037883a 	mov	sp,fp
 800338c:	df000017 	ldw	fp,0(sp)
 8003390:	dec00104 	addi	sp,sp,4
 8003394:	f800283a 	ret

08003398 <cpu_mem_read>:

/* Read the contents of the address in CPU memory */
inline byte cpu_mem_read( word addr )
{
 8003398:	defffd04 	addi	sp,sp,-12
 800339c:	df000215 	stw	fp,8(sp)
 80033a0:	df000204 	addi	fp,sp,8
 80033a4:	e13ffe0d 	sth	r4,-8(fp)
	// Addresses within $0800 - $1FFF are RAM mirrors
	if( (addr > 0x07FF) && ( addr < 0x2000))
 80033a8:	e0bffe0b 	ldhu	r2,-8(fp)
 80033ac:	10820030 	cmpltui	r2,r2,2048
 80033b0:	10000c1e 	bne	r2,zero,80033e4 <cpu_mem_read+0x4c>
 80033b4:	e0bffe0b 	ldhu	r2,-8(fp)
 80033b8:	10880028 	cmpgeui	r2,r2,8192
 80033bc:	1000091e 	bne	r2,zero,80033e4 <cpu_mem_read+0x4c>
		return (CPU->MEM[ (addr & 0x07FF) ]);
 80033c0:	d0a6c717 	ldw	r2,-25828(gp)
 80033c4:	10c00617 	ldw	r3,24(r2)
 80033c8:	e0bffe0b 	ldhu	r2,-8(fp)
 80033cc:	1081ffcc 	andi	r2,r2,2047
 80033d0:	1885883a 	add	r2,r3,r2
 80033d4:	10800003 	ldbu	r2,0(r2)
 80033d8:	10803fcc 	andi	r2,r2,255
 80033dc:	e0bfff15 	stw	r2,-4(fp)
 80033e0:	00001706 	br	8003440 <cpu_mem_read+0xa8>

	// Addresses within $2008 - $4000 are PPU Register mirrors
	else if( (addr > 0x2007) && ( addr < 0x4000) )
 80033e4:	e0bffe0b 	ldhu	r2,-8(fp)
 80033e8:	10880230 	cmpltui	r2,r2,8200
 80033ec:	10000d1e 	bne	r2,zero,8003424 <cpu_mem_read+0x8c>
 80033f0:	e0bffe0b 	ldhu	r2,-8(fp)
 80033f4:	10900028 	cmpgeui	r2,r2,16384
 80033f8:	10000a1e 	bne	r2,zero,8003424 <cpu_mem_read+0x8c>
		return (CPU->MEM[ PPUREG + (addr & 0x07) ] );
 80033fc:	d0a6c717 	ldw	r2,-25828(gp)
 8003400:	10c00617 	ldw	r3,24(r2)
 8003404:	e0bffe0b 	ldhu	r2,-8(fp)
 8003408:	108001cc 	andi	r2,r2,7
 800340c:	1885883a 	add	r2,r3,r2
 8003410:	10880004 	addi	r2,r2,8192
 8003414:	10800003 	ldbu	r2,0(r2)
 8003418:	10803fcc 	andi	r2,r2,255
 800341c:	e0bfff15 	stw	r2,-4(fp)
 8003420:	00000706 	br	8003440 <cpu_mem_read+0xa8>

	// Regular, non-mirrored memory read
	else
		return (CPU->MEM[ addr ]);
 8003424:	d0a6c717 	ldw	r2,-25828(gp)
 8003428:	10c00617 	ldw	r3,24(r2)
 800342c:	e0bffe0b 	ldhu	r2,-8(fp)
 8003430:	1885883a 	add	r2,r3,r2
 8003434:	10800003 	ldbu	r2,0(r2)
 8003438:	10803fcc 	andi	r2,r2,255
 800343c:	e0bfff15 	stw	r2,-4(fp)
 8003440:	e0bfff17 	ldw	r2,-4(fp)
}
 8003444:	e037883a 	mov	sp,fp
 8003448:	df000017 	ldw	fp,0(sp)
 800344c:	dec00104 	addi	sp,sp,4
 8003450:	f800283a 	ret

08003454 <cpu_mem_write>:

/* Write contents to address in CPU memory */
inline void cpu_mem_write( byte data, word addr )
{
 8003454:	defffd04 	addi	sp,sp,-12
 8003458:	df000215 	stw	fp,8(sp)
 800345c:	df000204 	addi	fp,sp,8
 8003460:	e13ffe05 	stb	r4,-8(fp)
 8003464:	e17fff0d 	sth	r5,-4(fp)
	// Addresses within $0800 - $1FFF are RAM mirrors
	if( (addr > 0x07FF) && ( addr < 0x2000) )
 8003468:	e0bfff0b 	ldhu	r2,-4(fp)
 800346c:	10820030 	cmpltui	r2,r2,2048
 8003470:	10000b1e 	bne	r2,zero,80034a0 <cpu_mem_write+0x4c>
 8003474:	e0bfff0b 	ldhu	r2,-4(fp)
 8003478:	10880028 	cmpgeui	r2,r2,8192
 800347c:	1000081e 	bne	r2,zero,80034a0 <cpu_mem_write+0x4c>
	{
		CPU->MEM[ (addr & 0x07FF) ] = data;
 8003480:	d0a6c717 	ldw	r2,-25828(gp)
 8003484:	10c00617 	ldw	r3,24(r2)
 8003488:	e0bfff0b 	ldhu	r2,-4(fp)
 800348c:	1081ffcc 	andi	r2,r2,2047
 8003490:	1887883a 	add	r3,r3,r2
 8003494:	e0bffe03 	ldbu	r2,-8(fp)
 8003498:	18800005 	stb	r2,0(r3)

/* Write contents to address in CPU memory */
inline void cpu_mem_write( byte data, word addr )
{
	// Addresses within $0800 - $1FFF are RAM mirrors
	if( (addr > 0x07FF) && ( addr < 0x2000) )
 800349c:	00001506 	br	80034f4 <cpu_mem_write+0xa0>
	{
		CPU->MEM[ (addr & 0x07FF) ] = data;
	}
	// Addresses within $2008 - $4000 are PPU Register mirrors
	else if( (addr > 0x2007) && ( addr < 0x4000) )
 80034a0:	e0bfff0b 	ldhu	r2,-4(fp)
 80034a4:	10880230 	cmpltui	r2,r2,8200
 80034a8:	10000c1e 	bne	r2,zero,80034dc <cpu_mem_write+0x88>
 80034ac:	e0bfff0b 	ldhu	r2,-4(fp)
 80034b0:	10900028 	cmpgeui	r2,r2,16384
 80034b4:	1000091e 	bne	r2,zero,80034dc <cpu_mem_write+0x88>
		CPU->MEM[ PPUREG + (addr & 0x07) ] = data;
 80034b8:	d0a6c717 	ldw	r2,-25828(gp)
 80034bc:	10c00617 	ldw	r3,24(r2)
 80034c0:	e0bfff0b 	ldhu	r2,-4(fp)
 80034c4:	108001cc 	andi	r2,r2,7
 80034c8:	1885883a 	add	r2,r3,r2
 80034cc:	10c80004 	addi	r3,r2,8192
 80034d0:	e0bffe03 	ldbu	r2,-8(fp)
 80034d4:	18800005 	stb	r2,0(r3)
	if( (addr > 0x07FF) && ( addr < 0x2000) )
	{
		CPU->MEM[ (addr & 0x07FF) ] = data;
	}
	// Addresses within $2008 - $4000 are PPU Register mirrors
	else if( (addr > 0x2007) && ( addr < 0x4000) )
 80034d8:	00000606 	br	80034f4 <cpu_mem_write+0xa0>
		CPU->MEM[ PPUREG + (addr & 0x07) ] = data;

	// Regular, non-mirrored memory write
	else
		CPU->MEM[ addr ] = data;
 80034dc:	d0a6c717 	ldw	r2,-25828(gp)
 80034e0:	10c00617 	ldw	r3,24(r2)
 80034e4:	e0bfff0b 	ldhu	r2,-4(fp)
 80034e8:	1887883a 	add	r3,r3,r2
 80034ec:	e0bffe03 	ldbu	r2,-8(fp)
 80034f0:	18800005 	stb	r2,0(r3)

	return;
}
 80034f4:	e037883a 	mov	sp,fp
 80034f8:	df000017 	ldw	fp,0(sp)
 80034fc:	dec00104 	addi	sp,sp,4
 8003500:	f800283a 	ret

08003504 <cpu_join_flags>:

/* Returns P/Status registers as one byte */
inline byte cpu_join_flags()
{
 8003504:	deffff04 	addi	sp,sp,-4
 8003508:	df000015 	stw	fp,0(sp)
 800350c:	d839883a 	mov	fp,sp
	return (((CPU->P.N << 7) & 0x80) | ((CPU->P.V << 6) & 0x40) |
 8003510:	d0a6c717 	ldw	r2,-25828(gp)
 8003514:	10800243 	ldbu	r2,9(r2)
 8003518:	10803fcc 	andi	r2,r2,255
 800351c:	100491fa 	slli	r2,r2,7
 8003520:	1007883a 	mov	r3,r2
 8003524:	00bfe004 	movi	r2,-128
 8003528:	1884703a 	and	r2,r3,r2
 800352c:	1007883a 	mov	r3,r2
 8003530:	d0a6c717 	ldw	r2,-25828(gp)
 8003534:	10800203 	ldbu	r2,8(r2)
 8003538:	10803fcc 	andi	r2,r2,255
 800353c:	100491ba 	slli	r2,r2,6
 8003540:	1080100c 	andi	r2,r2,64
 8003544:	1884b03a 	or	r2,r3,r2
 8003548:	1007883a 	mov	r3,r2
 800354c:	d0a6c717 	ldw	r2,-25828(gp)
 8003550:	10800183 	ldbu	r2,6(r2)
 8003554:	10803fcc 	andi	r2,r2,255
 8003558:	100490fa 	slli	r2,r2,3
 800355c:	1080020c 	andi	r2,r2,8
 8003560:	1884b03a 	or	r2,r3,r2
 8003564:	1007883a 	mov	r3,r2
 8003568:	d0a6c717 	ldw	r2,-25828(gp)
 800356c:	10800143 	ldbu	r2,5(r2)
 8003570:	10803fcc 	andi	r2,r2,255
 8003574:	1085883a 	add	r2,r2,r2
 8003578:	1085883a 	add	r2,r2,r2
 800357c:	1080010c 	andi	r2,r2,4
 8003580:	1884b03a 	or	r2,r3,r2
 8003584:	1007883a 	mov	r3,r2
 8003588:	d0a6c717 	ldw	r2,-25828(gp)
 800358c:	10800103 	ldbu	r2,4(r2)
 8003590:	10803fcc 	andi	r2,r2,255
 8003594:	1085883a 	add	r2,r2,r2
 8003598:	1080008c 	andi	r2,r2,2
 800359c:	1884b03a 	or	r2,r3,r2
 80035a0:	1007883a 	mov	r3,r2
 80035a4:	d0a6c717 	ldw	r2,-25828(gp)
 80035a8:	108000c3 	ldbu	r2,3(r2)
 80035ac:	1080004c 	andi	r2,r2,1
 80035b0:	1884b03a 	or	r2,r3,r2
 80035b4:	10800c14 	ori	r2,r2,48
 80035b8:	10803fcc 	andi	r2,r2,255
			((0x01 << 5)) | ((0x01 << 4) & 0x10) | ((CPU->P.D << 3) & 0x08) |
			((CPU->P.I << 2) & 0x04) | ((CPU->P.Z << 1) & 0x02) | ((CPU->P.C) & 0x01));
}
 80035bc:	e037883a 	mov	sp,fp
 80035c0:	df000017 	ldw	fp,0(sp)
 80035c4:	dec00104 	addi	sp,sp,4
 80035c8:	f800283a 	ret

080035cc <cpu_split_flags>:


/* Retrieves flags as a byte, splits them, and returns to flag registers. */
inline void cpu_split_flags( byte operand )
{
 80035cc:	defffe04 	addi	sp,sp,-8
 80035d0:	df000115 	stw	fp,4(sp)
 80035d4:	df000104 	addi	fp,sp,4
 80035d8:	e13fff05 	stb	r4,-4(fp)
    CPU->P.N = (operand >> 7) & 0x01;
 80035dc:	d0e6c717 	ldw	r3,-25828(gp)
 80035e0:	e0bfff03 	ldbu	r2,-4(fp)
 80035e4:	1004d1fa 	srli	r2,r2,7
 80035e8:	1080004c 	andi	r2,r2,1
 80035ec:	18800245 	stb	r2,9(r3)
    CPU->P.V = (operand >> 6) & 0x01;
 80035f0:	d0e6c717 	ldw	r3,-25828(gp)
 80035f4:	e0bfff03 	ldbu	r2,-4(fp)
 80035f8:	1004d1ba 	srli	r2,r2,6
 80035fc:	1080004c 	andi	r2,r2,1
 8003600:	18800205 	stb	r2,8(r3)
    // Note: 5th bit doesn't exist.
    //CPU->P.B = (operand >> 4) & 0x01;
    //CPU->P.D = (operand >> 3) & 0x01;
    CPU->P.I = (operand >> 2) & 0x01;
 8003604:	d0e6c717 	ldw	r3,-25828(gp)
 8003608:	e0bfff03 	ldbu	r2,-4(fp)
 800360c:	1004d0ba 	srli	r2,r2,2
 8003610:	1080004c 	andi	r2,r2,1
 8003614:	18800145 	stb	r2,5(r3)
    CPU->P.Z = (operand >> 1) & 0x01;
 8003618:	d0e6c717 	ldw	r3,-25828(gp)
 800361c:	e0bfff03 	ldbu	r2,-4(fp)
 8003620:	1004d07a 	srli	r2,r2,1
 8003624:	1080004c 	andi	r2,r2,1
 8003628:	18800105 	stb	r2,4(r3)
    CPU->P.C = (operand) & 0x01;
 800362c:	d0e6c717 	ldw	r3,-25828(gp)
 8003630:	e0bfff03 	ldbu	r2,-4(fp)
 8003634:	1080004c 	andi	r2,r2,1
 8003638:	188000c5 	stb	r2,3(r3)

    return;
}
 800363c:	e037883a 	mov	sp,fp
 8003640:	df000017 	ldw	fp,0(sp)
 8003644:	dec00104 	addi	sp,sp,4
 8003648:	f800283a 	ret

0800364c <ABS>:

/* Addressing Mode and Instruction Functions */
byte ABS()	// Absolute
{
 800364c:	defffd04 	addi	sp,sp,-12
 8003650:	dfc00215 	stw	ra,8(sp)
 8003654:	df000115 	stw	fp,4(sp)
 8003658:	df000104 	addi	fp,sp,4
  t1 = (cpu_read());
 800365c:	80033500 	call	8003350 <cpu_read>
 8003660:	10803fcc 	andi	r2,r2,255
 8003664:	d0a6cb8d 	sth	r2,-25810(gp)
  t2 = (cpu_read()) << 8;
 8003668:	80033500 	call	8003350 <cpu_read>
 800366c:	10803fcc 	andi	r2,r2,255
 8003670:	1004923a 	slli	r2,r2,8
 8003674:	d0a6c90d 	sth	r2,-25820(gp)
  word temp_addr = t1 | t2;  // Grab lower and upper byte
 8003678:	d0e6cb8b 	ldhu	r3,-25810(gp)
 800367c:	d0a6c90b 	ldhu	r2,-25820(gp)
 8003680:	1884b03a 	or	r2,r3,r2
 8003684:	e0bfff0d 	sth	r2,-4(fp)
  return cpu_mem_read( temp_addr );
 8003688:	e13fff0b 	ldhu	r4,-4(fp)
 800368c:	80033980 	call	8003398 <cpu_mem_read>
 8003690:	10803fcc 	andi	r2,r2,255
}
 8003694:	e037883a 	mov	sp,fp
 8003698:	dfc00117 	ldw	ra,4(sp)
 800369c:	df000017 	ldw	fp,0(sp)
 80036a0:	dec00204 	addi	sp,sp,8
 80036a4:	f800283a 	ret

080036a8 <ABSX>:

byte ABSX() // Absolute X
{
 80036a8:	defffd04 	addi	sp,sp,-12
 80036ac:	dfc00215 	stw	ra,8(sp)
 80036b0:	df000115 	stw	fp,4(sp)
 80036b4:	df000104 	addi	fp,sp,4
  t1 = (cpu_read());
 80036b8:	80033500 	call	8003350 <cpu_read>
 80036bc:	10803fcc 	andi	r2,r2,255
 80036c0:	d0a6cb8d 	sth	r2,-25810(gp)
  t2 = (cpu_read()) << 8;
 80036c4:	80033500 	call	8003350 <cpu_read>
 80036c8:	10803fcc 	andi	r2,r2,255
 80036cc:	1004923a 	slli	r2,r2,8
 80036d0:	d0a6c90d 	sth	r2,-25820(gp)
  word temp_addr = t1 | t2;  // Grab lower and upper byte
 80036d4:	d0e6cb8b 	ldhu	r3,-25810(gp)
 80036d8:	d0a6c90b 	ldhu	r2,-25820(gp)
 80036dc:	1884b03a 	or	r2,r3,r2
 80036e0:	e0bfff0d 	sth	r2,-4(fp)
  return cpu_mem_read( (temp_addr + CPU->X) & 0xFFFF ); // Wrap occurs if base + X > 0xFFFF
 80036e4:	d0a6c717 	ldw	r2,-25828(gp)
 80036e8:	108002c3 	ldbu	r2,11(r2)
 80036ec:	10c03fcc 	andi	r3,r2,255
 80036f0:	e0bfff0b 	ldhu	r2,-4(fp)
 80036f4:	1885883a 	add	r2,r3,r2
 80036f8:	113fffcc 	andi	r4,r2,65535
 80036fc:	80033980 	call	8003398 <cpu_mem_read>
 8003700:	10803fcc 	andi	r2,r2,255
}
 8003704:	e037883a 	mov	sp,fp
 8003708:	dfc00117 	ldw	ra,4(sp)
 800370c:	df000017 	ldw	fp,0(sp)
 8003710:	dec00204 	addi	sp,sp,8
 8003714:	f800283a 	ret

08003718 <ABSY>:

byte ABSY() // Absolute Y
{
 8003718:	defffd04 	addi	sp,sp,-12
 800371c:	dfc00215 	stw	ra,8(sp)
 8003720:	df000115 	stw	fp,4(sp)
 8003724:	df000104 	addi	fp,sp,4
  t1 = (cpu_read());
 8003728:	80033500 	call	8003350 <cpu_read>
 800372c:	10803fcc 	andi	r2,r2,255
 8003730:	d0a6cb8d 	sth	r2,-25810(gp)
  t2 = (cpu_read()) << 8;
 8003734:	80033500 	call	8003350 <cpu_read>
 8003738:	10803fcc 	andi	r2,r2,255
 800373c:	1004923a 	slli	r2,r2,8
 8003740:	d0a6c90d 	sth	r2,-25820(gp)
  word temp_addr = t1 | t2;  // Grab lower and upper byte
 8003744:	d0e6cb8b 	ldhu	r3,-25810(gp)
 8003748:	d0a6c90b 	ldhu	r2,-25820(gp)
 800374c:	1884b03a 	or	r2,r3,r2
 8003750:	e0bfff0d 	sth	r2,-4(fp)
  return cpu_mem_read( (temp_addr + CPU->Y) & 0xFFFF );
 8003754:	d0a6c717 	ldw	r2,-25828(gp)
 8003758:	10800303 	ldbu	r2,12(r2)
 800375c:	10c03fcc 	andi	r3,r2,255
 8003760:	e0bfff0b 	ldhu	r2,-4(fp)
 8003764:	1885883a 	add	r2,r3,r2
 8003768:	113fffcc 	andi	r4,r2,65535
 800376c:	80033980 	call	8003398 <cpu_mem_read>
 8003770:	10803fcc 	andi	r2,r2,255
}
 8003774:	e037883a 	mov	sp,fp
 8003778:	dfc00117 	ldw	ra,4(sp)
 800377c:	df000017 	ldw	fp,0(sp)
 8003780:	dec00204 	addi	sp,sp,8
 8003784:	f800283a 	ret

08003788 <XIND>:

byte XIND() // [ Indirect, x ]
{
 8003788:	defffd04 	addi	sp,sp,-12
 800378c:	dfc00215 	stw	ra,8(sp)
 8003790:	df000115 	stw	fp,4(sp)
 8003794:	df000104 	addi	fp,sp,4
  word temp_addr = (CPU->MEM[ CPU->PC++ ] + CPU->X);  // Fetch low byte from ZP+X
 8003798:	d0a6c717 	ldw	r2,-25828(gp)
 800379c:	10c00617 	ldw	r3,24(r2)
 80037a0:	d126c717 	ldw	r4,-25828(gp)
 80037a4:	2140000b 	ldhu	r5,0(r4)
 80037a8:	28bfffcc 	andi	r2,r5,65535
 80037ac:	1885883a 	add	r2,r3,r2
 80037b0:	10800003 	ldbu	r2,0(r2)
 80037b4:	10c03fcc 	andi	r3,r2,255
 80037b8:	d0a6c717 	ldw	r2,-25828(gp)
 80037bc:	108002c3 	ldbu	r2,11(r2)
 80037c0:	10803fcc 	andi	r2,r2,255
 80037c4:	1885883a 	add	r2,r3,r2
 80037c8:	e0bfff0d 	sth	r2,-4(fp)
 80037cc:	28800044 	addi	r2,r5,1
 80037d0:	2080000d 	sth	r2,0(r4)
  temp_addr = (temp_addr | (CPU->MEM[ (temp_addr+1) & 0xFF ] << 8)); // Fetch high byte from ZP+1+X
 80037d4:	d0a6c717 	ldw	r2,-25828(gp)
 80037d8:	10c00617 	ldw	r3,24(r2)
 80037dc:	e0bfff0b 	ldhu	r2,-4(fp)
 80037e0:	10800044 	addi	r2,r2,1
 80037e4:	10803fcc 	andi	r2,r2,255
 80037e8:	1885883a 	add	r2,r3,r2
 80037ec:	10800003 	ldbu	r2,0(r2)
 80037f0:	10803fcc 	andi	r2,r2,255
 80037f4:	1004923a 	slli	r2,r2,8
 80037f8:	1007883a 	mov	r3,r2
 80037fc:	e0bfff0b 	ldhu	r2,-4(fp)
 8003800:	1884b03a 	or	r2,r3,r2
 8003804:	e0bfff0d 	sth	r2,-4(fp)
  return cpu_mem_read( temp_addr & 0xFFFF );
 8003808:	e13fff0b 	ldhu	r4,-4(fp)
 800380c:	80033980 	call	8003398 <cpu_mem_read>
 8003810:	10803fcc 	andi	r2,r2,255
}
 8003814:	e037883a 	mov	sp,fp
 8003818:	dfc00117 	ldw	ra,4(sp)
 800381c:	df000017 	ldw	fp,0(sp)
 8003820:	dec00204 	addi	sp,sp,8
 8003824:	f800283a 	ret

08003828 <INDY>:

byte INDY() // [ Indirect ], Y
{
 8003828:	defffd04 	addi	sp,sp,-12
 800382c:	dfc00215 	stw	ra,8(sp)
 8003830:	df000115 	stw	fp,4(sp)
 8003834:	df000104 	addi	fp,sp,4
  word temp_addr = (CPU->MEM[ CPU->PC++ ]);  // Fetch low byte from ZP
 8003838:	d0a6c717 	ldw	r2,-25828(gp)
 800383c:	10c00617 	ldw	r3,24(r2)
 8003840:	d166c717 	ldw	r5,-25828(gp)
 8003844:	2900000b 	ldhu	r4,0(r5)
 8003848:	20bfffcc 	andi	r2,r4,65535
 800384c:	1885883a 	add	r2,r3,r2
 8003850:	10800003 	ldbu	r2,0(r2)
 8003854:	10803fcc 	andi	r2,r2,255
 8003858:	e0bfff0d 	sth	r2,-4(fp)
 800385c:	20800044 	addi	r2,r4,1
 8003860:	2880000d 	sth	r2,0(r5)
  temp_addr = (temp_addr | (CPU->MEM[ (temp_addr+1) & 0xFF ] << 8)); // Fetch high byte from ZP+1. Wrap occurs if offset is > $FF
 8003864:	d0a6c717 	ldw	r2,-25828(gp)
 8003868:	10c00617 	ldw	r3,24(r2)
 800386c:	e0bfff0b 	ldhu	r2,-4(fp)
 8003870:	10800044 	addi	r2,r2,1
 8003874:	10803fcc 	andi	r2,r2,255
 8003878:	1885883a 	add	r2,r3,r2
 800387c:	10800003 	ldbu	r2,0(r2)
 8003880:	10803fcc 	andi	r2,r2,255
 8003884:	1004923a 	slli	r2,r2,8
 8003888:	1007883a 	mov	r3,r2
 800388c:	e0bfff0b 	ldhu	r2,-4(fp)
 8003890:	1884b03a 	or	r2,r3,r2
 8003894:	e0bfff0d 	sth	r2,-4(fp)
  return cpu_mem_read( (temp_addr + CPU->Y) & 0xFFFF );  // Fetch contents of ($ZP)+Y
 8003898:	d0a6c717 	ldw	r2,-25828(gp)
 800389c:	10800303 	ldbu	r2,12(r2)
 80038a0:	10c03fcc 	andi	r3,r2,255
 80038a4:	e0bfff0b 	ldhu	r2,-4(fp)
 80038a8:	1885883a 	add	r2,r3,r2
 80038ac:	113fffcc 	andi	r4,r2,65535
 80038b0:	80033980 	call	8003398 <cpu_mem_read>
 80038b4:	10803fcc 	andi	r2,r2,255
}
 80038b8:	e037883a 	mov	sp,fp
 80038bc:	dfc00117 	ldw	ra,4(sp)
 80038c0:	df000017 	ldw	fp,0(sp)
 80038c4:	dec00204 	addi	sp,sp,8
 80038c8:	f800283a 	ret

080038cc <IMM>:

byte IMM()	// Immediate
{
 80038cc:	defffe04 	addi	sp,sp,-8
 80038d0:	dfc00115 	stw	ra,4(sp)
 80038d4:	df000015 	stw	fp,0(sp)
 80038d8:	d839883a 	mov	fp,sp
  return cpu_read(); // operand = #$MEM[PC]
 80038dc:	80033500 	call	8003350 <cpu_read>
 80038e0:	10803fcc 	andi	r2,r2,255
}
 80038e4:	e037883a 	mov	sp,fp
 80038e8:	dfc00117 	ldw	ra,4(sp)
 80038ec:	df000017 	ldw	fp,0(sp)
 80038f0:	dec00204 	addi	sp,sp,8
 80038f4:	f800283a 	ret

080038f8 <ZP>:

byte ZP()	// Zeropage. Note: Only 1 byte required, since ZP is $0000 - $00FF
{
 80038f8:	defffe04 	addi	sp,sp,-8
 80038fc:	dfc00115 	stw	ra,4(sp)
 8003900:	df000015 	stw	fp,0(sp)
 8003904:	d839883a 	mov	fp,sp
  return cpu_mem_read( (cpu_read()) ); // operand = $(MEM[PC])
 8003908:	80033500 	call	8003350 <cpu_read>
 800390c:	11003fcc 	andi	r4,r2,255
 8003910:	80033980 	call	8003398 <cpu_mem_read>
 8003914:	10803fcc 	andi	r2,r2,255
}
 8003918:	e037883a 	mov	sp,fp
 800391c:	dfc00117 	ldw	ra,4(sp)
 8003920:	df000017 	ldw	fp,0(sp)
 8003924:	dec00204 	addi	sp,sp,8
 8003928:	f800283a 	ret

0800392c <ZPX>:

byte ZPX() // Zeropage, X. Note: Wrap-around occurs if +X > $00FF
{
 800392c:	defffe04 	addi	sp,sp,-8
 8003930:	dfc00115 	stw	ra,4(sp)
 8003934:	df000015 	stw	fp,0(sp)
 8003938:	d839883a 	mov	fp,sp
  return cpu_mem_read( ((cpu_read()) + CPU->X) & 0xFF ); // operand = $(MEM[PC])
 800393c:	80033500 	call	8003350 <cpu_read>
 8003940:	10c03fcc 	andi	r3,r2,255
 8003944:	d0a6c717 	ldw	r2,-25828(gp)
 8003948:	108002c3 	ldbu	r2,11(r2)
 800394c:	10803fcc 	andi	r2,r2,255
 8003950:	1885883a 	add	r2,r3,r2
 8003954:	10bfffcc 	andi	r2,r2,65535
 8003958:	11003fcc 	andi	r4,r2,255
 800395c:	80033980 	call	8003398 <cpu_mem_read>
 8003960:	10803fcc 	andi	r2,r2,255
}
 8003964:	e037883a 	mov	sp,fp
 8003968:	dfc00117 	ldw	ra,4(sp)
 800396c:	df000017 	ldw	fp,0(sp)
 8003970:	dec00204 	addi	sp,sp,8
 8003974:	f800283a 	ret

08003978 <ADC>:


/* Instructions */
void ADC(byte operand) // Add w/ Carry
{
 8003978:	defffc04 	addi	sp,sp,-16
 800397c:	dfc00315 	stw	ra,12(sp)
 8003980:	df000215 	stw	fp,8(sp)
 8003984:	df000204 	addi	fp,sp,8
 8003988:	e13fff05 	stb	r4,-4(fp)
  byte temp = CPU->A + operand + CPU->P.C;
 800398c:	d0a6c717 	ldw	r2,-25828(gp)
 8003990:	10c00283 	ldbu	r3,10(r2)
 8003994:	e0bfff03 	ldbu	r2,-4(fp)
 8003998:	1885883a 	add	r2,r3,r2
 800399c:	1007883a 	mov	r3,r2
 80039a0:	d0a6c717 	ldw	r2,-25828(gp)
 80039a4:	108000c3 	ldbu	r2,3(r2)
 80039a8:	1885883a 	add	r2,r3,r2
 80039ac:	e0bffe05 	stb	r2,-8(fp)
  CPU->P.V = ((CPU->A & 0x80) != (temp & 0x80)) ? 1 : 0;
 80039b0:	d126c717 	ldw	r4,-25828(gp)
 80039b4:	d0a6c717 	ldw	r2,-25828(gp)
 80039b8:	10800283 	ldbu	r2,10(r2)
 80039bc:	10803fcc 	andi	r2,r2,255
 80039c0:	10c0200c 	andi	r3,r2,128
 80039c4:	e0bffe03 	ldbu	r2,-8(fp)
 80039c8:	1080200c 	andi	r2,r2,128
 80039cc:	1884c03a 	cmpne	r2,r3,r2
 80039d0:	20800205 	stb	r2,8(r4)
  CPU->P.N = (((CPU->A & 0x80)) > 0) ? 1 : 0;
 80039d4:	d0e6c717 	ldw	r3,-25828(gp)
 80039d8:	d0a6c717 	ldw	r2,-25828(gp)
 80039dc:	10800283 	ldbu	r2,10(r2)
 80039e0:	10803fcc 	andi	r2,r2,255
 80039e4:	1080200c 	andi	r2,r2,128
 80039e8:	10800048 	cmpgei	r2,r2,1
 80039ec:	18800245 	stb	r2,9(r3)
  CPU->P.Z = (temp == 0) ? 1 : 0;
 80039f0:	d0e6c717 	ldw	r3,-25828(gp)
 80039f4:	e0bffe03 	ldbu	r2,-8(fp)
 80039f8:	1005003a 	cmpeq	r2,r2,zero
 80039fc:	18800105 	stb	r2,4(r3)
  CPU->A = temp & 0xFF;
 8003a00:	d0e6c717 	ldw	r3,-25828(gp)
 8003a04:	e0bffe03 	ldbu	r2,-8(fp)
 8003a08:	18800285 	stb	r2,10(r3)
  printf("ADC!\n");
 8003a0c:	01020074 	movhi	r4,2049
 8003a10:	211ca504 	addi	r4,r4,29332
 8003a14:	8005d500 	call	8005d50 <puts>
  return;
}
 8003a18:	e037883a 	mov	sp,fp
 8003a1c:	dfc00117 	ldw	ra,4(sp)
 8003a20:	df000017 	ldw	fp,0(sp)
 8003a24:	dec00204 	addi	sp,sp,8
 8003a28:	f800283a 	ret

08003a2c <AND>:

void AND(byte operand) // AND
{
 8003a2c:	defffd04 	addi	sp,sp,-12
 8003a30:	dfc00215 	stw	ra,8(sp)
 8003a34:	df000115 	stw	fp,4(sp)
 8003a38:	df000104 	addi	fp,sp,4
 8003a3c:	e13fff05 	stb	r4,-4(fp)
  //printf(" AND #%x with %x ", operand, CPU->A);
  CPU->A = CPU->A & operand;
 8003a40:	d126c717 	ldw	r4,-25828(gp)
 8003a44:	d0a6c717 	ldw	r2,-25828(gp)
 8003a48:	10c00283 	ldbu	r3,10(r2)
 8003a4c:	e0bfff03 	ldbu	r2,-4(fp)
 8003a50:	1884703a 	and	r2,r3,r2
 8003a54:	20800285 	stb	r2,10(r4)
  CPU->P.N = (((CPU->A & 0x80)) > 0) ? 1 : 0;
 8003a58:	d0e6c717 	ldw	r3,-25828(gp)
 8003a5c:	d0a6c717 	ldw	r2,-25828(gp)
 8003a60:	10800283 	ldbu	r2,10(r2)
 8003a64:	10803fcc 	andi	r2,r2,255
 8003a68:	1080200c 	andi	r2,r2,128
 8003a6c:	10800048 	cmpgei	r2,r2,1
 8003a70:	18800245 	stb	r2,9(r3)
  CPU->P.Z = (CPU->A == 0) ? 1 : 0;
 8003a74:	d0e6c717 	ldw	r3,-25828(gp)
 8003a78:	d0a6c717 	ldw	r2,-25828(gp)
 8003a7c:	10800283 	ldbu	r2,10(r2)
 8003a80:	10803fcc 	andi	r2,r2,255
 8003a84:	1005003a 	cmpeq	r2,r2,zero
 8003a88:	18800105 	stb	r2,4(r3)
  printf("AND!\n");
 8003a8c:	01020074 	movhi	r4,2049
 8003a90:	211ca704 	addi	r4,r4,29340
 8003a94:	8005d500 	call	8005d50 <puts>
  return;
}
 8003a98:	e037883a 	mov	sp,fp
 8003a9c:	dfc00117 	ldw	ra,4(sp)
 8003aa0:	df000017 	ldw	fp,0(sp)
 8003aa4:	dec00204 	addi	sp,sp,8
 8003aa8:	f800283a 	ret

08003aac <ASL>:

void ASL(byte* operand) // Arithmetic Shift Left
{
 8003aac:	defffd04 	addi	sp,sp,-12
 8003ab0:	dfc00215 	stw	ra,8(sp)
 8003ab4:	df000115 	stw	fp,4(sp)
 8003ab8:	df000104 	addi	fp,sp,4
 8003abc:	e13fff15 	stw	r4,-4(fp)
  CPU->P.C = (*operand) & 0x80;
 8003ac0:	d126c717 	ldw	r4,-25828(gp)
 8003ac4:	e0bfff17 	ldw	r2,-4(fp)
 8003ac8:	10c00003 	ldbu	r3,0(r2)
 8003acc:	00bfe004 	movi	r2,-128
 8003ad0:	1884703a 	and	r2,r3,r2
 8003ad4:	208000c5 	stb	r2,3(r4)
  (*operand) = ((*operand) << 1) & 0xFE;
 8003ad8:	e0bfff17 	ldw	r2,-4(fp)
 8003adc:	10800003 	ldbu	r2,0(r2)
 8003ae0:	10803fcc 	andi	r2,r2,255
 8003ae4:	1085883a 	add	r2,r2,r2
 8003ae8:	1007883a 	mov	r3,r2
 8003aec:	00bfff84 	movi	r2,-2
 8003af0:	1884703a 	and	r2,r3,r2
 8003af4:	1007883a 	mov	r3,r2
 8003af8:	e0bfff17 	ldw	r2,-4(fp)
 8003afc:	10c00005 	stb	r3,0(r2)
  CPU->P.N = (((*operand) & 0x80) > 0) ? 1 : 0;
 8003b00:	d0e6c717 	ldw	r3,-25828(gp)
 8003b04:	e0bfff17 	ldw	r2,-4(fp)
 8003b08:	10800003 	ldbu	r2,0(r2)
 8003b0c:	10803fcc 	andi	r2,r2,255
 8003b10:	1080200c 	andi	r2,r2,128
 8003b14:	10800048 	cmpgei	r2,r2,1
 8003b18:	18800245 	stb	r2,9(r3)
  CPU->P.Z = ((*operand) == 0) ? 1 : 0;
 8003b1c:	d0e6c717 	ldw	r3,-25828(gp)
 8003b20:	e0bfff17 	ldw	r2,-4(fp)
 8003b24:	10800003 	ldbu	r2,0(r2)
 8003b28:	10803fcc 	andi	r2,r2,255
 8003b2c:	1005003a 	cmpeq	r2,r2,zero
 8003b30:	18800105 	stb	r2,4(r3)
  printf("ASL!\n");
 8003b34:	01020074 	movhi	r4,2049
 8003b38:	211ca904 	addi	r4,r4,29348
 8003b3c:	8005d500 	call	8005d50 <puts>
  return;
}
 8003b40:	e037883a 	mov	sp,fp
 8003b44:	dfc00117 	ldw	ra,4(sp)
 8003b48:	df000017 	ldw	fp,0(sp)
 8003b4c:	dec00204 	addi	sp,sp,8
 8003b50:	f800283a 	ret

08003b54 <CMP>:

void CMP( byte operand ) // Compare bits with A
{
 8003b54:	defffc04 	addi	sp,sp,-16
 8003b58:	dfc00315 	stw	ra,12(sp)
 8003b5c:	df000215 	stw	fp,8(sp)
 8003b60:	df000204 	addi	fp,sp,8
 8003b64:	e13fff05 	stb	r4,-4(fp)
  byte temp = CPU->A - operand;
 8003b68:	d0a6c717 	ldw	r2,-25828(gp)
 8003b6c:	10c00283 	ldbu	r3,10(r2)
 8003b70:	e0bfff03 	ldbu	r2,-4(fp)
 8003b74:	1885c83a 	sub	r2,r3,r2
 8003b78:	e0bffe05 	stb	r2,-8(fp)
  CPU->P.N = ((temp & 0x80) > 0) ? 1 : 0;
 8003b7c:	d0e6c717 	ldw	r3,-25828(gp)
 8003b80:	e0bffe03 	ldbu	r2,-8(fp)
 8003b84:	1080200c 	andi	r2,r2,128
 8003b88:	10800048 	cmpgei	r2,r2,1
 8003b8c:	18800245 	stb	r2,9(r3)
  CPU->P.C = (CPU->A >= operand) ? 1 : 0;
 8003b90:	d126c717 	ldw	r4,-25828(gp)
 8003b94:	d0a6c717 	ldw	r2,-25828(gp)
 8003b98:	10800283 	ldbu	r2,10(r2)
 8003b9c:	10c03fcc 	andi	r3,r2,255
 8003ba0:	e0bfff03 	ldbu	r2,-4(fp)
 8003ba4:	1885403a 	cmpgeu	r2,r3,r2
 8003ba8:	208000c5 	stb	r2,3(r4)
  CPU->P.Z = (temp == 0) ? 1 : 0;
 8003bac:	d0e6c717 	ldw	r3,-25828(gp)
 8003bb0:	e0bffe03 	ldbu	r2,-8(fp)
 8003bb4:	1005003a 	cmpeq	r2,r2,zero
 8003bb8:	18800105 	stb	r2,4(r3)
  printf("CMP!\n");
 8003bbc:	01020074 	movhi	r4,2049
 8003bc0:	211cab04 	addi	r4,r4,29356
 8003bc4:	8005d500 	call	8005d50 <puts>
  return;
}
 8003bc8:	e037883a 	mov	sp,fp
 8003bcc:	dfc00117 	ldw	ra,4(sp)
 8003bd0:	df000017 	ldw	fp,0(sp)
 8003bd4:	dec00204 	addi	sp,sp,8
 8003bd8:	f800283a 	ret

08003bdc <CPX>:

void CPX( byte operand ) // Compare X
{
 8003bdc:	defffc04 	addi	sp,sp,-16
 8003be0:	dfc00315 	stw	ra,12(sp)
 8003be4:	df000215 	stw	fp,8(sp)
 8003be8:	df000204 	addi	fp,sp,8
 8003bec:	e13fff05 	stb	r4,-4(fp)
  byte temp = CPU->X - operand;
 8003bf0:	d0a6c717 	ldw	r2,-25828(gp)
 8003bf4:	10c002c3 	ldbu	r3,11(r2)
 8003bf8:	e0bfff03 	ldbu	r2,-4(fp)
 8003bfc:	1885c83a 	sub	r2,r3,r2
 8003c00:	e0bffe05 	stb	r2,-8(fp)
  CPU->P.N = ((temp & 0x80) > 0) ? 1 : 0;
 8003c04:	d0e6c717 	ldw	r3,-25828(gp)
 8003c08:	e0bffe03 	ldbu	r2,-8(fp)
 8003c0c:	1080200c 	andi	r2,r2,128
 8003c10:	10800048 	cmpgei	r2,r2,1
 8003c14:	18800245 	stb	r2,9(r3)
  CPU->P.C = (CPU->X >= operand) ? 1 : 0;
 8003c18:	d126c717 	ldw	r4,-25828(gp)
 8003c1c:	d0a6c717 	ldw	r2,-25828(gp)
 8003c20:	108002c3 	ldbu	r2,11(r2)
 8003c24:	10c03fcc 	andi	r3,r2,255
 8003c28:	e0bfff03 	ldbu	r2,-4(fp)
 8003c2c:	1885403a 	cmpgeu	r2,r3,r2
 8003c30:	208000c5 	stb	r2,3(r4)
  CPU->P.Z = (temp == 0) ? 1 : 0;
 8003c34:	d0e6c717 	ldw	r3,-25828(gp)
 8003c38:	e0bffe03 	ldbu	r2,-8(fp)
 8003c3c:	1005003a 	cmpeq	r2,r2,zero
 8003c40:	18800105 	stb	r2,4(r3)
  printf("CPX!\n");
 8003c44:	01020074 	movhi	r4,2049
 8003c48:	211cad04 	addi	r4,r4,29364
 8003c4c:	8005d500 	call	8005d50 <puts>
  return;
}
 8003c50:	e037883a 	mov	sp,fp
 8003c54:	dfc00117 	ldw	ra,4(sp)
 8003c58:	df000017 	ldw	fp,0(sp)
 8003c5c:	dec00204 	addi	sp,sp,8
 8003c60:	f800283a 	ret

08003c64 <CPY>:

void CPY( byte operand ) // Compare Y
{
 8003c64:	defffc04 	addi	sp,sp,-16
 8003c68:	dfc00315 	stw	ra,12(sp)
 8003c6c:	df000215 	stw	fp,8(sp)
 8003c70:	df000204 	addi	fp,sp,8
 8003c74:	e13fff05 	stb	r4,-4(fp)
  byte temp = CPU->Y - operand;
 8003c78:	d0a6c717 	ldw	r2,-25828(gp)
 8003c7c:	10c00303 	ldbu	r3,12(r2)
 8003c80:	e0bfff03 	ldbu	r2,-4(fp)
 8003c84:	1885c83a 	sub	r2,r3,r2
 8003c88:	e0bffe05 	stb	r2,-8(fp)
  CPU->P.N = ((temp & 0x80) > 0) ? 1 : 0;
 8003c8c:	d0e6c717 	ldw	r3,-25828(gp)
 8003c90:	e0bffe03 	ldbu	r2,-8(fp)
 8003c94:	1080200c 	andi	r2,r2,128
 8003c98:	10800048 	cmpgei	r2,r2,1
 8003c9c:	18800245 	stb	r2,9(r3)
  CPU->P.C = (CPU->Y >= operand) ? 1 : 0;
 8003ca0:	d126c717 	ldw	r4,-25828(gp)
 8003ca4:	d0a6c717 	ldw	r2,-25828(gp)
 8003ca8:	10800303 	ldbu	r2,12(r2)
 8003cac:	10c03fcc 	andi	r3,r2,255
 8003cb0:	e0bfff03 	ldbu	r2,-4(fp)
 8003cb4:	1885403a 	cmpgeu	r2,r3,r2
 8003cb8:	208000c5 	stb	r2,3(r4)
  CPU->P.Z = (temp == 0) ? 1 : 0;
 8003cbc:	d0e6c717 	ldw	r3,-25828(gp)
 8003cc0:	e0bffe03 	ldbu	r2,-8(fp)
 8003cc4:	1005003a 	cmpeq	r2,r2,zero
 8003cc8:	18800105 	stb	r2,4(r3)
  printf("CPY!\n");
 8003ccc:	01020074 	movhi	r4,2049
 8003cd0:	211caf04 	addi	r4,r4,29372
 8003cd4:	8005d500 	call	8005d50 <puts>
  return;
}
 8003cd8:	e037883a 	mov	sp,fp
 8003cdc:	dfc00117 	ldw	ra,4(sp)
 8003ce0:	df000017 	ldw	fp,0(sp)
 8003ce4:	dec00204 	addi	sp,sp,8
 8003ce8:	f800283a 	ret

08003cec <DEC>:


void DEC( byte* operand ) // Decrement
{
 8003cec:	defffd04 	addi	sp,sp,-12
 8003cf0:	dfc00215 	stw	ra,8(sp)
 8003cf4:	df000115 	stw	fp,4(sp)
 8003cf8:	df000104 	addi	fp,sp,4
 8003cfc:	e13fff15 	stw	r4,-4(fp)
  (*operand) = ((*operand)-1) & 0xFF;
 8003d00:	e0bfff17 	ldw	r2,-4(fp)
 8003d04:	10800003 	ldbu	r2,0(r2)
 8003d08:	10bfffc4 	addi	r2,r2,-1
 8003d0c:	1007883a 	mov	r3,r2
 8003d10:	00bfffc4 	movi	r2,-1
 8003d14:	1884703a 	and	r2,r3,r2
 8003d18:	1007883a 	mov	r3,r2
 8003d1c:	e0bfff17 	ldw	r2,-4(fp)
 8003d20:	10c00005 	stb	r3,0(r2)
  CPU->P.N = (*operand) & 0x80;
 8003d24:	d126c717 	ldw	r4,-25828(gp)
 8003d28:	e0bfff17 	ldw	r2,-4(fp)
 8003d2c:	10c00003 	ldbu	r3,0(r2)
 8003d30:	00bfe004 	movi	r2,-128
 8003d34:	1884703a 	and	r2,r3,r2
 8003d38:	20800245 	stb	r2,9(r4)
  CPU->P.Z = ((*operand) == 0) ? 1 : 0;
 8003d3c:	d0e6c717 	ldw	r3,-25828(gp)
 8003d40:	e0bfff17 	ldw	r2,-4(fp)
 8003d44:	10800003 	ldbu	r2,0(r2)
 8003d48:	10803fcc 	andi	r2,r2,255
 8003d4c:	1005003a 	cmpeq	r2,r2,zero
 8003d50:	18800105 	stb	r2,4(r3)
  printf("DEC!\n");
 8003d54:	01020074 	movhi	r4,2049
 8003d58:	211cb104 	addi	r4,r4,29380
 8003d5c:	8005d500 	call	8005d50 <puts>
  return;
}
 8003d60:	e037883a 	mov	sp,fp
 8003d64:	dfc00117 	ldw	ra,4(sp)
 8003d68:	df000017 	ldw	fp,0(sp)
 8003d6c:	dec00204 	addi	sp,sp,8
 8003d70:	f800283a 	ret

08003d74 <INC>:


void INC( byte* operand ) // Increment
{
 8003d74:	defffd04 	addi	sp,sp,-12
 8003d78:	dfc00215 	stw	ra,8(sp)
 8003d7c:	df000115 	stw	fp,4(sp)
 8003d80:	df000104 	addi	fp,sp,4
 8003d84:	e13fff15 	stw	r4,-4(fp)
  (*operand) = ((*operand)+1) & 0xFF;
 8003d88:	e0bfff17 	ldw	r2,-4(fp)
 8003d8c:	10800003 	ldbu	r2,0(r2)
 8003d90:	10800044 	addi	r2,r2,1
 8003d94:	1007883a 	mov	r3,r2
 8003d98:	00bfffc4 	movi	r2,-1
 8003d9c:	1884703a 	and	r2,r3,r2
 8003da0:	1007883a 	mov	r3,r2
 8003da4:	e0bfff17 	ldw	r2,-4(fp)
 8003da8:	10c00005 	stb	r3,0(r2)
  CPU->P.N = (((*operand) & 0x80) > 0) ? 1 :0;
 8003dac:	d0e6c717 	ldw	r3,-25828(gp)
 8003db0:	e0bfff17 	ldw	r2,-4(fp)
 8003db4:	10800003 	ldbu	r2,0(r2)
 8003db8:	10803fcc 	andi	r2,r2,255
 8003dbc:	1080200c 	andi	r2,r2,128
 8003dc0:	10800048 	cmpgei	r2,r2,1
 8003dc4:	18800245 	stb	r2,9(r3)
  CPU->P.Z = ((*operand) == 0) ? 1 : 0;
 8003dc8:	d0e6c717 	ldw	r3,-25828(gp)
 8003dcc:	e0bfff17 	ldw	r2,-4(fp)
 8003dd0:	10800003 	ldbu	r2,0(r2)
 8003dd4:	10803fcc 	andi	r2,r2,255
 8003dd8:	1005003a 	cmpeq	r2,r2,zero
 8003ddc:	18800105 	stb	r2,4(r3)
  printf("INC!\n");
 8003de0:	01020074 	movhi	r4,2049
 8003de4:	211cb304 	addi	r4,r4,29388
 8003de8:	8005d500 	call	8005d50 <puts>
  return;
}
 8003dec:	e037883a 	mov	sp,fp
 8003df0:	dfc00117 	ldw	ra,4(sp)
 8003df4:	df000017 	ldw	fp,0(sp)
 8003df8:	dec00204 	addi	sp,sp,8
 8003dfc:	f800283a 	ret

08003e00 <LDA>:

void LDA( byte operand ) // Load into A
{
 8003e00:	defffd04 	addi	sp,sp,-12
 8003e04:	dfc00215 	stw	ra,8(sp)
 8003e08:	df000115 	stw	fp,4(sp)
 8003e0c:	df000104 	addi	fp,sp,4
 8003e10:	e13fff05 	stb	r4,-4(fp)
  CPU->A = operand;
 8003e14:	d0e6c717 	ldw	r3,-25828(gp)
 8003e18:	e0bfff03 	ldbu	r2,-4(fp)
 8003e1c:	18800285 	stb	r2,10(r3)
  CPU->P.N = ((CPU->A & 0x80) > 0) ? 1 : 0;
 8003e20:	d0e6c717 	ldw	r3,-25828(gp)
 8003e24:	d0a6c717 	ldw	r2,-25828(gp)
 8003e28:	10800283 	ldbu	r2,10(r2)
 8003e2c:	10803fcc 	andi	r2,r2,255
 8003e30:	1080200c 	andi	r2,r2,128
 8003e34:	10800048 	cmpgei	r2,r2,1
 8003e38:	18800245 	stb	r2,9(r3)
  CPU->P.Z = (CPU->A == 0) ? 1 :0;
 8003e3c:	d0e6c717 	ldw	r3,-25828(gp)
 8003e40:	d0a6c717 	ldw	r2,-25828(gp)
 8003e44:	10800283 	ldbu	r2,10(r2)
 8003e48:	10803fcc 	andi	r2,r2,255
 8003e4c:	1005003a 	cmpeq	r2,r2,zero
 8003e50:	18800105 	stb	r2,4(r3)
  printf("LDA! With %x\n", operand);
 8003e54:	e17fff03 	ldbu	r5,-4(fp)
 8003e58:	01020074 	movhi	r4,2049
 8003e5c:	211cb504 	addi	r4,r4,29396
 8003e60:	8005c140 	call	8005c14 <printf>
  return;
}
 8003e64:	e037883a 	mov	sp,fp
 8003e68:	dfc00117 	ldw	ra,4(sp)
 8003e6c:	df000017 	ldw	fp,0(sp)
 8003e70:	dec00204 	addi	sp,sp,8
 8003e74:	f800283a 	ret

08003e78 <LDX>:

void LDX( byte operand ) // Load into X
{
 8003e78:	defffd04 	addi	sp,sp,-12
 8003e7c:	dfc00215 	stw	ra,8(sp)
 8003e80:	df000115 	stw	fp,4(sp)
 8003e84:	df000104 	addi	fp,sp,4
 8003e88:	e13fff05 	stb	r4,-4(fp)
  CPU->X = operand;
 8003e8c:	d0e6c717 	ldw	r3,-25828(gp)
 8003e90:	e0bfff03 	ldbu	r2,-4(fp)
 8003e94:	188002c5 	stb	r2,11(r3)
  CPU->P.N = ((CPU->X & 0x80) > 0) ? 1 : 0;
 8003e98:	d0e6c717 	ldw	r3,-25828(gp)
 8003e9c:	d0a6c717 	ldw	r2,-25828(gp)
 8003ea0:	108002c3 	ldbu	r2,11(r2)
 8003ea4:	10803fcc 	andi	r2,r2,255
 8003ea8:	1080200c 	andi	r2,r2,128
 8003eac:	10800048 	cmpgei	r2,r2,1
 8003eb0:	18800245 	stb	r2,9(r3)
  CPU->P.Z = (CPU->X == 0) ? 1 :0;
 8003eb4:	d0e6c717 	ldw	r3,-25828(gp)
 8003eb8:	d0a6c717 	ldw	r2,-25828(gp)
 8003ebc:	108002c3 	ldbu	r2,11(r2)
 8003ec0:	10803fcc 	andi	r2,r2,255
 8003ec4:	1005003a 	cmpeq	r2,r2,zero
 8003ec8:	18800105 	stb	r2,4(r3)
  printf("LDX!\n");
 8003ecc:	01020074 	movhi	r4,2049
 8003ed0:	211cb904 	addi	r4,r4,29412
 8003ed4:	8005d500 	call	8005d50 <puts>
  return;
}
 8003ed8:	e037883a 	mov	sp,fp
 8003edc:	dfc00117 	ldw	ra,4(sp)
 8003ee0:	df000017 	ldw	fp,0(sp)
 8003ee4:	dec00204 	addi	sp,sp,8
 8003ee8:	f800283a 	ret

08003eec <LDY>:

void LDY( byte operand ) // Load into Y
{
 8003eec:	defffd04 	addi	sp,sp,-12
 8003ef0:	dfc00215 	stw	ra,8(sp)
 8003ef4:	df000115 	stw	fp,4(sp)
 8003ef8:	df000104 	addi	fp,sp,4
 8003efc:	e13fff05 	stb	r4,-4(fp)
  CPU->Y = operand;
 8003f00:	d0e6c717 	ldw	r3,-25828(gp)
 8003f04:	e0bfff03 	ldbu	r2,-4(fp)
 8003f08:	18800305 	stb	r2,12(r3)
  CPU->P.N = ((CPU->Y & 0x80) > 0) ? 1 : 0;
 8003f0c:	d0e6c717 	ldw	r3,-25828(gp)
 8003f10:	d0a6c717 	ldw	r2,-25828(gp)
 8003f14:	10800303 	ldbu	r2,12(r2)
 8003f18:	10803fcc 	andi	r2,r2,255
 8003f1c:	1080200c 	andi	r2,r2,128
 8003f20:	10800048 	cmpgei	r2,r2,1
 8003f24:	18800245 	stb	r2,9(r3)
  CPU->P.Z = (CPU->Y == 0) ? 1 :0;
 8003f28:	d0e6c717 	ldw	r3,-25828(gp)
 8003f2c:	d0a6c717 	ldw	r2,-25828(gp)
 8003f30:	10800303 	ldbu	r2,12(r2)
 8003f34:	10803fcc 	andi	r2,r2,255
 8003f38:	1005003a 	cmpeq	r2,r2,zero
 8003f3c:	18800105 	stb	r2,4(r3)
  printf("LDY!\n");
 8003f40:	01020074 	movhi	r4,2049
 8003f44:	211cbb04 	addi	r4,r4,29420
 8003f48:	8005d500 	call	8005d50 <puts>
  return;
}
 8003f4c:	e037883a 	mov	sp,fp
 8003f50:	dfc00117 	ldw	ra,4(sp)
 8003f54:	df000017 	ldw	fp,0(sp)
 8003f58:	dec00204 	addi	sp,sp,8
 8003f5c:	f800283a 	ret

08003f60 <LSR>:

void LSR( byte* operand ) // Logical Shift Right
{
 8003f60:	defffd04 	addi	sp,sp,-12
 8003f64:	dfc00215 	stw	ra,8(sp)
 8003f68:	df000115 	stw	fp,4(sp)
 8003f6c:	df000104 	addi	fp,sp,4
 8003f70:	e13fff15 	stw	r4,-4(fp)
  CPU->P.N = 0x00;
 8003f74:	d0a6c717 	ldw	r2,-25828(gp)
 8003f78:	10000245 	stb	zero,9(r2)
  CPU->P.C = (*operand) & 0x01;
 8003f7c:	d0e6c717 	ldw	r3,-25828(gp)
 8003f80:	e0bfff17 	ldw	r2,-4(fp)
 8003f84:	10800003 	ldbu	r2,0(r2)
 8003f88:	1080004c 	andi	r2,r2,1
 8003f8c:	188000c5 	stb	r2,3(r3)
  (*operand) = ((*operand) >> 1) & 0x7F;
 8003f90:	e0bfff17 	ldw	r2,-4(fp)
 8003f94:	10800003 	ldbu	r2,0(r2)
 8003f98:	10803fcc 	andi	r2,r2,255
 8003f9c:	1004d07a 	srli	r2,r2,1
 8003fa0:	10801fcc 	andi	r2,r2,127
 8003fa4:	1007883a 	mov	r3,r2
 8003fa8:	e0bfff17 	ldw	r2,-4(fp)
 8003fac:	10c00005 	stb	r3,0(r2)
  CPU->P.Z = ((*operand) == 0) ? 1 : 0;
 8003fb0:	d0e6c717 	ldw	r3,-25828(gp)
 8003fb4:	e0bfff17 	ldw	r2,-4(fp)
 8003fb8:	10800003 	ldbu	r2,0(r2)
 8003fbc:	10803fcc 	andi	r2,r2,255
 8003fc0:	1005003a 	cmpeq	r2,r2,zero
 8003fc4:	18800105 	stb	r2,4(r3)
  printf("LSR!\n");
 8003fc8:	01020074 	movhi	r4,2049
 8003fcc:	211cbd04 	addi	r4,r4,29428
 8003fd0:	8005d500 	call	8005d50 <puts>
  return;
}
 8003fd4:	e037883a 	mov	sp,fp
 8003fd8:	dfc00117 	ldw	ra,4(sp)
 8003fdc:	df000017 	ldw	fp,0(sp)
 8003fe0:	dec00204 	addi	sp,sp,8
 8003fe4:	f800283a 	ret

08003fe8 <ORA>:

void ORA( byte operand ) // OR with A
{
 8003fe8:	defffd04 	addi	sp,sp,-12
 8003fec:	dfc00215 	stw	ra,8(sp)
 8003ff0:	df000115 	stw	fp,4(sp)
 8003ff4:	df000104 	addi	fp,sp,4
 8003ff8:	e13fff05 	stb	r4,-4(fp)
  CPU->A = CPU->A | (operand);
 8003ffc:	d126c717 	ldw	r4,-25828(gp)
 8004000:	d0a6c717 	ldw	r2,-25828(gp)
 8004004:	10c00283 	ldbu	r3,10(r2)
 8004008:	e0bfff03 	ldbu	r2,-4(fp)
 800400c:	1884b03a 	or	r2,r3,r2
 8004010:	20800285 	stb	r2,10(r4)
  CPU->P.N = ((CPU->A & 0x80) > 0) ? 1 : 0;
 8004014:	d0e6c717 	ldw	r3,-25828(gp)
 8004018:	d0a6c717 	ldw	r2,-25828(gp)
 800401c:	10800283 	ldbu	r2,10(r2)
 8004020:	10803fcc 	andi	r2,r2,255
 8004024:	1080200c 	andi	r2,r2,128
 8004028:	10800048 	cmpgei	r2,r2,1
 800402c:	18800245 	stb	r2,9(r3)
  CPU->P.Z = (CPU->A == 0 ) ? 1 : 0;
 8004030:	d0e6c717 	ldw	r3,-25828(gp)
 8004034:	d0a6c717 	ldw	r2,-25828(gp)
 8004038:	10800283 	ldbu	r2,10(r2)
 800403c:	10803fcc 	andi	r2,r2,255
 8004040:	1005003a 	cmpeq	r2,r2,zero
 8004044:	18800105 	stb	r2,4(r3)
  printf("ORA!\n");
 8004048:	01020074 	movhi	r4,2049
 800404c:	211cbf04 	addi	r4,r4,29436
 8004050:	8005d500 	call	8005d50 <puts>
  return;
}
 8004054:	e037883a 	mov	sp,fp
 8004058:	dfc00117 	ldw	ra,4(sp)
 800405c:	df000017 	ldw	fp,0(sp)
 8004060:	dec00204 	addi	sp,sp,8
 8004064:	f800283a 	ret

08004068 <ROL>:


void ROL( byte* operand ) // Rotate on Left
{
 8004068:	defffc04 	addi	sp,sp,-16
 800406c:	dfc00315 	stw	ra,12(sp)
 8004070:	df000215 	stw	fp,8(sp)
 8004074:	df000204 	addi	fp,sp,8
 8004078:	e13fff15 	stw	r4,-4(fp)
  byte temp = (*operand) & 0x80;
 800407c:	e0bfff17 	ldw	r2,-4(fp)
 8004080:	10c00003 	ldbu	r3,0(r2)
 8004084:	00bfe004 	movi	r2,-128
 8004088:	1884703a 	and	r2,r3,r2
 800408c:	e0bffe05 	stb	r2,-8(fp)
  (*operand) = ((*operand) << 1) & 0xFE;
 8004090:	e0bfff17 	ldw	r2,-4(fp)
 8004094:	10800003 	ldbu	r2,0(r2)
 8004098:	10803fcc 	andi	r2,r2,255
 800409c:	1085883a 	add	r2,r2,r2
 80040a0:	1007883a 	mov	r3,r2
 80040a4:	00bfff84 	movi	r2,-2
 80040a8:	1884703a 	and	r2,r3,r2
 80040ac:	1007883a 	mov	r3,r2
 80040b0:	e0bfff17 	ldw	r2,-4(fp)
 80040b4:	10c00005 	stb	r3,0(r2)
  (*operand) = (*operand) | CPU->P.C;
 80040b8:	e0bfff17 	ldw	r2,-4(fp)
 80040bc:	10c00003 	ldbu	r3,0(r2)
 80040c0:	d0a6c717 	ldw	r2,-25828(gp)
 80040c4:	108000c3 	ldbu	r2,3(r2)
 80040c8:	1884b03a 	or	r2,r3,r2
 80040cc:	1007883a 	mov	r3,r2
 80040d0:	e0bfff17 	ldw	r2,-4(fp)
 80040d4:	10c00005 	stb	r3,0(r2)
  CPU->P.C = (temp > 0) ? 1 : 0;
 80040d8:	d0e6c717 	ldw	r3,-25828(gp)
 80040dc:	e0bffe03 	ldbu	r2,-8(fp)
 80040e0:	1004c03a 	cmpne	r2,r2,zero
 80040e4:	188000c5 	stb	r2,3(r3)
  CPU->P.Z = ((*operand) == 0) ? 1 : 0;
 80040e8:	d0e6c717 	ldw	r3,-25828(gp)
 80040ec:	e0bfff17 	ldw	r2,-4(fp)
 80040f0:	10800003 	ldbu	r2,0(r2)
 80040f4:	10803fcc 	andi	r2,r2,255
 80040f8:	1005003a 	cmpeq	r2,r2,zero
 80040fc:	18800105 	stb	r2,4(r3)
  CPU->P.N = (((*operand) & 0x80) > 0) ? 1 : 0;
 8004100:	d0e6c717 	ldw	r3,-25828(gp)
 8004104:	e0bfff17 	ldw	r2,-4(fp)
 8004108:	10800003 	ldbu	r2,0(r2)
 800410c:	10803fcc 	andi	r2,r2,255
 8004110:	1080200c 	andi	r2,r2,128
 8004114:	10800048 	cmpgei	r2,r2,1
 8004118:	18800245 	stb	r2,9(r3)
  printf("ROL!\n");
 800411c:	01020074 	movhi	r4,2049
 8004120:	211cc104 	addi	r4,r4,29444
 8004124:	8005d500 	call	8005d50 <puts>
  return;
}
 8004128:	e037883a 	mov	sp,fp
 800412c:	dfc00117 	ldw	ra,4(sp)
 8004130:	df000017 	ldw	fp,0(sp)
 8004134:	dec00204 	addi	sp,sp,8
 8004138:	f800283a 	ret

0800413c <ROR>:

void ROR( byte* operand ) // Rotate on Right
{
 800413c:	defffa04 	addi	sp,sp,-24
 8004140:	dfc00515 	stw	ra,20(sp)
 8004144:	df000415 	stw	fp,16(sp)
 8004148:	df000404 	addi	fp,sp,16
 800414c:	e13ffd15 	stw	r4,-12(fp)
  byte temp = (*operand) & 0x01;
 8004150:	e0bffd17 	ldw	r2,-12(fp)
 8004154:	10800003 	ldbu	r2,0(r2)
 8004158:	1080004c 	andi	r2,r2,1
 800415c:	e0bffc05 	stb	r2,-16(fp)
  (*operand) = ((*operand) >> 1) & 0x7F;
 8004160:	e0bffd17 	ldw	r2,-12(fp)
 8004164:	10800003 	ldbu	r2,0(r2)
 8004168:	10803fcc 	andi	r2,r2,255
 800416c:	1004d07a 	srli	r2,r2,1
 8004170:	10801fcc 	andi	r2,r2,127
 8004174:	1007883a 	mov	r3,r2
 8004178:	e0bffd17 	ldw	r2,-12(fp)
 800417c:	10c00005 	stb	r3,0(r2)
  (*operand) = (*operand) | ((CPU->P.C) ? 0x80 : 0x00);
 8004180:	e0bffd17 	ldw	r2,-12(fp)
 8004184:	10800003 	ldbu	r2,0(r2)
 8004188:	e0bfff05 	stb	r2,-4(fp)
 800418c:	d0a6c717 	ldw	r2,-25828(gp)
 8004190:	108000c3 	ldbu	r2,3(r2)
 8004194:	10803fcc 	andi	r2,r2,255
 8004198:	1005003a 	cmpeq	r2,r2,zero
 800419c:	1000031e 	bne	r2,zero,80041ac <ROR+0x70>
 80041a0:	00bfe004 	movi	r2,-128
 80041a4:	e0bffe05 	stb	r2,-8(fp)
 80041a8:	00000106 	br	80041b0 <ROR+0x74>
 80041ac:	e03ffe05 	stb	zero,-8(fp)
 80041b0:	e0ffff03 	ldbu	r3,-4(fp)
 80041b4:	e13ffe03 	ldbu	r4,-8(fp)
 80041b8:	1904b03a 	or	r2,r3,r4
 80041bc:	1007883a 	mov	r3,r2
 80041c0:	e0bffd17 	ldw	r2,-12(fp)
 80041c4:	10c00005 	stb	r3,0(r2)
  CPU->P.C = temp;
 80041c8:	d0e6c717 	ldw	r3,-25828(gp)
 80041cc:	e0bffc03 	ldbu	r2,-16(fp)
 80041d0:	188000c5 	stb	r2,3(r3)
  CPU->P.Z = ((*operand) == 0) ? 1 : 0;
 80041d4:	d0e6c717 	ldw	r3,-25828(gp)
 80041d8:	e0bffd17 	ldw	r2,-12(fp)
 80041dc:	10800003 	ldbu	r2,0(r2)
 80041e0:	10803fcc 	andi	r2,r2,255
 80041e4:	1005003a 	cmpeq	r2,r2,zero
 80041e8:	18800105 	stb	r2,4(r3)
  CPU->P.N = (((*operand) & 0x80) > 0) ? 1 : 0;  printf("ROR!\n");
 80041ec:	d0e6c717 	ldw	r3,-25828(gp)
 80041f0:	e0bffd17 	ldw	r2,-12(fp)
 80041f4:	10800003 	ldbu	r2,0(r2)
 80041f8:	10803fcc 	andi	r2,r2,255
 80041fc:	1080200c 	andi	r2,r2,128
 8004200:	10800048 	cmpgei	r2,r2,1
 8004204:	18800245 	stb	r2,9(r3)
 8004208:	01020074 	movhi	r4,2049
 800420c:	211cc304 	addi	r4,r4,29452
 8004210:	8005d500 	call	8005d50 <puts>
  return;
}
 8004214:	e037883a 	mov	sp,fp
 8004218:	dfc00117 	ldw	ra,4(sp)
 800421c:	df000017 	ldw	fp,0(sp)
 8004220:	dec00204 	addi	sp,sp,8
 8004224:	f800283a 	ret

08004228 <SBC>:

void SBC( byte operand ) // Subtract with Carry
{
 8004228:	defffa04 	addi	sp,sp,-24
 800422c:	dfc00515 	stw	ra,20(sp)
 8004230:	df000415 	stw	fp,16(sp)
 8004234:	df000404 	addi	fp,sp,16
 8004238:	e13ffd05 	stb	r4,-12(fp)
  int temp = CPU->A - operand - (!CPU->P.C);
 800423c:	d0a6c717 	ldw	r2,-25828(gp)
 8004240:	10800283 	ldbu	r2,10(r2)
 8004244:	10c03fcc 	andi	r3,r2,255
 8004248:	e0bffd03 	ldbu	r2,-12(fp)
 800424c:	1887c83a 	sub	r3,r3,r2
 8004250:	d0a6c717 	ldw	r2,-25828(gp)
 8004254:	108000c3 	ldbu	r2,3(r2)
 8004258:	10803fcc 	andi	r2,r2,255
 800425c:	1005003a 	cmpeq	r2,r2,zero
 8004260:	1885c83a 	sub	r2,r3,r2
 8004264:	e0bffc15 	stw	r2,-16(fp)
  CPU->P.V = ( temp > 127 || temp < -128 )  ? 1 : 0;
 8004268:	d0a6c717 	ldw	r2,-25828(gp)
 800426c:	e0bfff15 	stw	r2,-4(fp)
 8004270:	e0bffc17 	ldw	r2,-16(fp)
 8004274:	10802008 	cmpgei	r2,r2,128
 8004278:	1000031e 	bne	r2,zero,8004288 <SBC+0x60>
 800427c:	e0bffc17 	ldw	r2,-16(fp)
 8004280:	10bfe008 	cmpgei	r2,r2,-128
 8004284:	1000031e 	bne	r2,zero,8004294 <SBC+0x6c>
 8004288:	00c00044 	movi	r3,1
 800428c:	e0fffe15 	stw	r3,-8(fp)
 8004290:	00000106 	br	8004298 <SBC+0x70>
 8004294:	e03ffe15 	stw	zero,-8(fp)
 8004298:	e0fffe17 	ldw	r3,-8(fp)
 800429c:	1805883a 	mov	r2,r3
 80042a0:	e0ffff17 	ldw	r3,-4(fp)
 80042a4:	18800205 	stb	r2,8(r3)
  CPU->P.C = ((byte)temp > 0 ) ? 1 : 0;
 80042a8:	d0e6c717 	ldw	r3,-25828(gp)
 80042ac:	e0bffc17 	ldw	r2,-16(fp)
 80042b0:	10803fcc 	andi	r2,r2,255
 80042b4:	1004c03a 	cmpne	r2,r2,zero
 80042b8:	188000c5 	stb	r2,3(r3)
  CPU->P.N = (((byte)temp & 0x80) > 0) ? 1 : 0;
 80042bc:	d0e6c717 	ldw	r3,-25828(gp)
 80042c0:	e0bffc17 	ldw	r2,-16(fp)
 80042c4:	10803fcc 	andi	r2,r2,255
 80042c8:	1080200c 	andi	r2,r2,128
 80042cc:	10800048 	cmpgei	r2,r2,1
 80042d0:	18800245 	stb	r2,9(r3)
  CPU->P.Z = (temp == 0 ) ? 1 : 0;
 80042d4:	d0e6c717 	ldw	r3,-25828(gp)
 80042d8:	e0bffc17 	ldw	r2,-16(fp)
 80042dc:	1005003a 	cmpeq	r2,r2,zero
 80042e0:	18800105 	stb	r2,4(r3)
  CPU->A = (byte)temp & 0xFF;
 80042e4:	d0e6c717 	ldw	r3,-25828(gp)
 80042e8:	e0bffc17 	ldw	r2,-16(fp)
 80042ec:	18800285 	stb	r2,10(r3)
  printf("SBC!\n");
 80042f0:	01020074 	movhi	r4,2049
 80042f4:	211cc504 	addi	r4,r4,29460
 80042f8:	8005d500 	call	8005d50 <puts>
  return;
}
 80042fc:	e037883a 	mov	sp,fp
 8004300:	dfc00117 	ldw	ra,4(sp)
 8004304:	df000017 	ldw	fp,0(sp)
 8004308:	dec00204 	addi	sp,sp,8
 800430c:	f800283a 	ret

08004310 <main>:
#include "sdcard.h"

//#define DEBUG        // Enables methods for debugging functions

int main()
{
 8004310:	defffd04 	addi	sp,sp,-12
 8004314:	dfc00215 	stw	ra,8(sp)
 8004318:	df000115 	stw	fp,4(sp)
 800431c:	df000104 	addi	fp,sp,4
  // Declare appropriate arrays and variables
  file_name = "DK.nes";
 8004320:	00820074 	movhi	r2,2049
 8004324:	109cc704 	addi	r2,r2,29468
 8004328:	d0a6ca15 	stw	r2,-25816(gp)
  char* en = (char*) malloc(sizeof(char)*2); // Used for stepping into CPU one instruction at a time
 800432c:	01000084 	movi	r4,2
 8004330:	80052a40 	call	80052a4 <malloc>
 8004334:	e0bfff15 	stw	r2,-4(fp)

  // Initialize CPU
  cpu_init();
 8004338:	80031040 	call	8003104 <cpu_init>

  // Initialize PPU
  ppu_init();
 800433c:	80044200 	call	8004420 <ppu_init>

  // Load the ROM. CPU and PPU Memory map will be populated here as well
  // TODO: bootloader();   // Not implemented yet --> Gets filename for ROM
  load_rom();
 8004340:	80046080 	call	8004608 <load_rom>

  // VGA controller test for character and pixel buffer
  vga_test();
 8004344:	8004a180 	call	8004a18 <vga_test>

  // Start NES execution
  while(1)
  {
	// Check for interrupts
	if(CPU->RES == 1) // Reset, also the power-on state
 8004348:	d0a6c717 	ldw	r2,-25828(gp)
 800434c:	10800503 	ldbu	r2,20(r2)
 8004350:	10803fcc 	andi	r2,r2,255
 8004354:	10800058 	cmpnei	r2,r2,1
 8004358:	1000081e 	bne	r2,zero,800437c <main+0x6c>
	{
		// Reset CPU
		cpu_reset();
 800435c:	8002d400 	call	8002d40 <cpu_reset>
		// Display contents of PRG_ROM
		#ifdef DEBUG
			prg_test();
		#endif

		printf("RES! Into: %x\n", CPU->PC);
 8004360:	d0a6c717 	ldw	r2,-25828(gp)
 8004364:	1080000b 	ldhu	r2,0(r2)
 8004368:	117fffcc 	andi	r5,r2,65535
 800436c:	01020074 	movhi	r4,2049
 8004370:	211cc904 	addi	r4,r4,29476
 8004374:	8005c140 	call	8005c14 <printf>
 8004378:	00001206 	br	80043c4 <main+0xb4>
	}
	else if(CPU->NMI == 1) // Non-maskable interrupt (PPU)
 800437c:	d0a6c717 	ldw	r2,-25828(gp)
 8004380:	108004c3 	ldbu	r2,19(r2)
 8004384:	10803fcc 	andi	r2,r2,255
 8004388:	10800058 	cmpnei	r2,r2,1
 800438c:	1000021e 	bne	r2,zero,8004398 <main+0x88>
		cpu_nmi();
 8004390:	8002e340 	call	8002e34 <cpu_nmi>
 8004394:	00000b06 	br	80043c4 <main+0xb4>

	// Note that IRQ will not work if interrupts are disabled
	else if((CPU->IRQ == 1) && (CPU->P.I == 0)) // Interrupt Request
 8004398:	d0a6c717 	ldw	r2,-25828(gp)
 800439c:	10800543 	ldbu	r2,21(r2)
 80043a0:	10803fcc 	andi	r2,r2,255
 80043a4:	10800058 	cmpnei	r2,r2,1
 80043a8:	1000061e 	bne	r2,zero,80043c4 <main+0xb4>
 80043ac:	d0a6c717 	ldw	r2,-25828(gp)
 80043b0:	10800143 	ldbu	r2,5(r2)
 80043b4:	10803fcc 	andi	r2,r2,255
 80043b8:	1004c03a 	cmpne	r2,r2,zero
 80043bc:	1000011e 	bne	r2,zero,80043c4 <main+0xb4>
		cpu_irq();
 80043c0:	8002fa00 	call	8002fa0 <cpu_irq>

	CPU->IR = CPU->MEM[ CPU->PC ];	// Load next instruction
 80043c4:	d126c717 	ldw	r4,-25828(gp)
 80043c8:	d0a6c717 	ldw	r2,-25828(gp)
 80043cc:	10c00617 	ldw	r3,24(r2)
 80043d0:	d0a6c717 	ldw	r2,-25828(gp)
 80043d4:	1080000b 	ldhu	r2,0(r2)
 80043d8:	10bfffcc 	andi	r2,r2,65535
 80043dc:	1885883a 	add	r2,r3,r2
 80043e0:	10800003 	ldbu	r2,0(r2)
 80043e4:	20800445 	stb	r2,17(r4)
	cpu_status(); // Debug CPU
 80043e8:	800318c0 	call	800318c <cpu_status>
	++CPU->PC;	  // Increment PC
 80043ec:	d0e6c717 	ldw	r3,-25828(gp)
 80043f0:	1880000b 	ldhu	r2,0(r3)
 80043f4:	10800044 	addi	r2,r2,1
 80043f8:	1880000d 	sth	r2,0(r3)
	cpu_exec();   // Tick CPU (Execute Instruction)
 80043fc:	80002b00 	call	80002b0 <cpu_exec>

	// Wait until enter is pressed to step-through
	fgets(en, 2, stdin);
 8004400:	008200b4 	movhi	r2,2050
 8004404:	10a4bf04 	addi	r2,r2,-27908
 8004408:	10800017 	ldw	r2,0(r2)
 800440c:	11800117 	ldw	r6,4(r2)
 8004410:	e13fff17 	ldw	r4,-4(fp)
 8004414:	01400084 	movi	r5,2
 8004418:	8004e2c0 	call	8004e2c <fgets>
  }
 800441c:	003fca06 	br	8004348 <main+0x38>

08004420 <ppu_init>:
	|   |   |   |   |
	+---+---+---+---+

 */
inline void ppu_init()
{
 8004420:	defffc04 	addi	sp,sp,-16
 8004424:	dfc00315 	stw	ra,12(sp)
 8004428:	df000215 	stw	fp,8(sp)
 800442c:	dc000115 	stw	r16,4(sp)
 8004430:	df000104 	addi	fp,sp,4
  PPU = (RP2C02*) malloc(sizeof(RP2C02));
 8004434:	01000404 	movi	r4,16
 8004438:	80052a40 	call	80052a4 <malloc>
 800443c:	d0a6cc15 	stw	r2,-25808(gp)
  PPU->MEM = (byte*) malloc(sizeof(byte)*65535);
 8004440:	d426cc17 	ldw	r16,-25808(gp)
 8004444:	013fffd4 	movui	r4,65535
 8004448:	80052a40 	call	80052a4 <malloc>
 800444c:	80800015 	stw	r2,0(r16)
  PPU->OAM = (byte*) malloc(sizeof(byte)*256);
 8004450:	d426cc17 	ldw	r16,-25808(gp)
 8004454:	01004004 	movi	r4,256
 8004458:	80052a40 	call	80052a4 <malloc>
 800445c:	80800115 	stw	r2,4(r16)
  PPU->sprite_buffer = (byte*) malloc(sizeof(byte)*32);
 8004460:	d426cc17 	ldw	r16,-25808(gp)
 8004464:	01000804 	movi	r4,32
 8004468:	80052a40 	call	80052a4 <malloc>
 800446c:	80800215 	stw	r2,8(r16)

  int i;
  for(i = 0; i < 65535; ++i)
 8004470:	e03fff15 	stw	zero,-4(fp)
 8004474:	00001806 	br	80044d8 <ppu_init+0xb8>
  {
	  PPU->MEM[i] = 0x00;
 8004478:	d0a6cc17 	ldw	r2,-25808(gp)
 800447c:	10c00017 	ldw	r3,0(r2)
 8004480:	e0bfff17 	ldw	r2,-4(fp)
 8004484:	1885883a 	add	r2,r3,r2
 8004488:	10000005 	stb	zero,0(r2)
	  if(i < 256)
 800448c:	e0bfff17 	ldw	r2,-4(fp)
 8004490:	10804008 	cmpgei	r2,r2,256
 8004494:	1000051e 	bne	r2,zero,80044ac <ppu_init+0x8c>
		  PPU->OAM[i] = 0x00;
 8004498:	d0a6cc17 	ldw	r2,-25808(gp)
 800449c:	10c00117 	ldw	r3,4(r2)
 80044a0:	e0bfff17 	ldw	r2,-4(fp)
 80044a4:	1885883a 	add	r2,r3,r2
 80044a8:	10000005 	stb	zero,0(r2)
	  if(i < 32)
 80044ac:	e0bfff17 	ldw	r2,-4(fp)
 80044b0:	10800808 	cmpgei	r2,r2,32
 80044b4:	1000051e 	bne	r2,zero,80044cc <ppu_init+0xac>
		  PPU->sprite_buffer[i] = 0x00;
 80044b8:	d0a6cc17 	ldw	r2,-25808(gp)
 80044bc:	10c00217 	ldw	r3,8(r2)
 80044c0:	e0bfff17 	ldw	r2,-4(fp)
 80044c4:	1885883a 	add	r2,r3,r2
 80044c8:	10000005 	stb	zero,0(r2)
  PPU->MEM = (byte*) malloc(sizeof(byte)*65535);
  PPU->OAM = (byte*) malloc(sizeof(byte)*256);
  PPU->sprite_buffer = (byte*) malloc(sizeof(byte)*32);

  int i;
  for(i = 0; i < 65535; ++i)
 80044cc:	e0bfff17 	ldw	r2,-4(fp)
 80044d0:	10800044 	addi	r2,r2,1
 80044d4:	e0bfff15 	stw	r2,-4(fp)
 80044d8:	e0ffff17 	ldw	r3,-4(fp)
 80044dc:	00bfff94 	movui	r2,65534
 80044e0:	10ffe50e 	bge	r2,r3,8004478 <ppu_init+0x58>
		  PPU->OAM[i] = 0x00;
	  if(i < 32)
		  PPU->sprite_buffer[i] = 0x00;
  }

  PPU->scanline = -1;
 80044e4:	d0e6cc17 	ldw	r3,-25808(gp)
 80044e8:	00bfffc4 	movi	r2,-1
 80044ec:	18800305 	stb	r2,12(r3)

  return;
}
 80044f0:	e037883a 	mov	sp,fp
 80044f4:	dfc00217 	ldw	ra,8(sp)
 80044f8:	df000117 	ldw	fp,4(sp)
 80044fc:	dc000017 	ldw	r16,0(sp)
 8004500:	dec00304 	addi	sp,sp,12
 8004504:	f800283a 	ret

08004508 <ppu_exec>:

/* PPU has 341 cycles per scanline. Therefore,

 */
inline void ppu_exec()
{
 8004508:	deffff04 	addi	sp,sp,-4
 800450c:	df000015 	stw	fp,0(sp)
 8004510:	d839883a 	mov	fp,sp

	if( PPU->cycles < 64)
 8004514:	d0a6cc17 	ldw	r2,-25808(gp)
 8004518:	1080038b 	ldhu	r2,14(r2)
 800451c:	10bfffcc 	andi	r2,r2,65535
 8004520:	10a0001c 	xori	r2,r2,32768
 8004524:	10a00004 	addi	r2,r2,-32768
 8004528:	10801010 	cmplti	r2,r2,64
 800452c:	10001c1e 	bne	r2,zero,80045a0 <ppu_exec+0x98>
	{
		// Sprite Buffer initialization. [Secondary OAM]
		// Note: all data is set to $FF to set unused sprites as hidden from frame.
		// "Attempting to read $2004 will return $FF"
	}
	else if( PPU->cycles > 63 && PPU->cycles < 256 )
 8004530:	d0a6cc17 	ldw	r2,-25808(gp)
 8004534:	1080038b 	ldhu	r2,14(r2)
 8004538:	10bfffcc 	andi	r2,r2,65535
 800453c:	10a0001c 	xori	r2,r2,32768
 8004540:	10a00004 	addi	r2,r2,-32768
 8004544:	10801010 	cmplti	r2,r2,64
 8004548:	1000151e 	bne	r2,zero,80045a0 <ppu_exec+0x98>
 800454c:	d0a6cc17 	ldw	r2,-25808(gp)
 8004550:	1080038b 	ldhu	r2,14(r2)
 8004554:	10bfffcc 	andi	r2,r2,65535
 8004558:	10a0001c 	xori	r2,r2,32768
 800455c:	10a00004 	addi	r2,r2,-32768
 8004560:	10804010 	cmplti	r2,r2,256
 8004564:	10000e1e 	bne	r2,zero,80045a0 <ppu_exec+0x98>

		// Once 8 sprites have been found, disable writes to sprite buffer. Then,
		// Grab the rest of the bytes.

	}
	else if( PPU->cycles > 255 && PPU->cycles < 320 )
 8004568:	d0a6cc17 	ldw	r2,-25808(gp)
 800456c:	1080038b 	ldhu	r2,14(r2)
 8004570:	10bfffcc 	andi	r2,r2,65535
 8004574:	10a0001c 	xori	r2,r2,32768
 8004578:	10a00004 	addi	r2,r2,-32768
 800457c:	10804010 	cmplti	r2,r2,256
 8004580:	1000071e 	bne	r2,zero,80045a0 <ppu_exec+0x98>
 8004584:	d0a6cc17 	ldw	r2,-25808(gp)
 8004588:	1080038b 	ldhu	r2,14(r2)
 800458c:	10bfffcc 	andi	r2,r2,65535
 8004590:	10a0001c 	xori	r2,r2,32768
 8004594:	10a00004 	addi	r2,r2,-32768
 8004598:	10805010 	cmplti	r2,r2,320
 800459c:	1000001e 	bne	r2,zero,80045a0 <ppu_exec+0x98>
		// Background render pipeline initialization

		// Read first byte in sprite buffer.
		// If no sprites were found, then use sprite #63
	}
}
 80045a0:	e037883a 	mov	sp,fp
 80045a4:	df000017 	ldw	fp,0(sp)
 80045a8:	dec00104 	addi	sp,sp,4
 80045ac:	f800283a 	ret

080045b0 <ppu_render>:

inline void ppu_render()
{
 80045b0:	defffe04 	addi	sp,sp,-8
 80045b4:	df000115 	stw	fp,4(sp)
 80045b8:	df000104 	addi	fp,sp,4
	// In NTSC, we have 20 scanlines of VBlank time. 262 total scanlines.
	int i = 0;
 80045bc:	e03fff15 	stw	zero,-4(fp)
	for( i = 0; i < CPU->T; ++i)
 80045c0:	e03fff15 	stw	zero,-4(fp)
 80045c4:	00000706 	br	80045e4 <ppu_render+0x34>
		}
		else if(PPU->scanline > 239 && PPU->scanline < 262 )
		{
			// This is VBlank time
		}
		++PPU->scanline;
 80045c8:	d0e6cc17 	ldw	r3,-25808(gp)
 80045cc:	18800303 	ldbu	r2,12(r3)
 80045d0:	10800044 	addi	r2,r2,1
 80045d4:	18800305 	stb	r2,12(r3)

inline void ppu_render()
{
	// In NTSC, we have 20 scanlines of VBlank time. 262 total scanlines.
	int i = 0;
	for( i = 0; i < CPU->T; ++i)
 80045d8:	e0bfff17 	ldw	r2,-4(fp)
 80045dc:	10800044 	addi	r2,r2,1
 80045e0:	e0bfff15 	stw	r2,-4(fp)
 80045e4:	d0a6c717 	ldw	r2,-25828(gp)
 80045e8:	10800483 	ldbu	r2,18(r2)
 80045ec:	10c03fcc 	andi	r3,r2,255
 80045f0:	e0bfff17 	ldw	r2,-4(fp)
 80045f4:	10fff416 	blt	r2,r3,80045c8 <ppu_render+0x18>
		{
			// This is VBlank time
		}
		++PPU->scanline;
	}
}
 80045f8:	e037883a 	mov	sp,fp
 80045fc:	df000017 	ldw	fp,0(sp)
 8004600:	dec00104 	addi	sp,sp,4
 8004604:	f800283a 	ret

08004608 <load_rom>:
#include "sdcard.h"

void load_rom()
{
 8004608:	defff904 	addi	sp,sp,-28
 800460c:	dfc00615 	stw	ra,24(sp)
 8004610:	df000515 	stw	fp,20(sp)
 8004614:	dc000415 	stw	r16,16(sp)
 8004618:	df000404 	addi	fp,sp,16
	int sd_fileh;

	// This functions links the verilog modules with C
	alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
 800461c:	01020074 	movhi	r4,2049
 8004620:	211ccd04 	addi	r4,r4,29492
 8004624:	80145f80 	call	80145f8 <alt_up_sd_card_open_dev>
 8004628:	e0bffe15 	stw	r2,-8(fp)

	// Checks if it was able to obtain the address of the SD Card Socket
	if(sd_card_dev == 0)
 800462c:	e0bffe17 	ldw	r2,-8(fp)
 8004630:	1004c03a 	cmpne	r2,r2,zero
 8004634:	1000041e 	bne	r2,zero,8004648 <load_rom+0x40>
	{
		printf("ERROR: UNABLE TO OBATIN SD SOCKET ADDRESS\n");
 8004638:	01020074 	movhi	r4,2049
 800463c:	211cd804 	addi	r4,r4,29536
 8004640:	8005d500 	call	8005d50 <puts>
		return;
 8004644:	0000ee06 	br	8004a00 <load_rom+0x3f8>
	}

	// Checks if the SD Card is Present in the Socket
	if(!alt_up_sd_card_is_Present())
 8004648:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 800464c:	1004c03a 	cmpne	r2,r2,zero
 8004650:	1000041e 	bne	r2,zero,8004664 <load_rom+0x5c>
	{
		printf("ERROR: SD CARD NOT PRESENT\n");
 8004654:	01020074 	movhi	r4,2049
 8004658:	211ce304 	addi	r4,r4,29580
 800465c:	8005d500 	call	8005d50 <puts>
		return;
 8004660:	0000e706 	br	8004a00 <load_rom+0x3f8>
	}

	// Check if the Card is Fat16
	if(alt_up_sd_card_is_FAT16())
 8004664:	80147840 	call	8014784 <alt_up_sd_card_is_FAT16>
 8004668:	1005003a 	cmpeq	r2,r2,zero
 800466c:	1000da1e 	bne	r2,zero,80049d8 <load_rom+0x3d0>
	{
		//opens the file to be read - 0 if successful
		printf("Opening %s...\n", file_name);
 8004670:	d166ca17 	ldw	r5,-25816(gp)
 8004674:	01020074 	movhi	r4,2049
 8004678:	211cea04 	addi	r4,r4,29608
 800467c:	8005c140 	call	8005c14 <printf>
		sd_fileh = alt_up_sd_card_fopen(file_name, false);
 8004680:	d126ca17 	ldw	r4,-25816(gp)
 8004684:	000b883a 	mov	r5,zero
 8004688:	8014c7c0 	call	8014c7c <alt_up_sd_card_fopen>
 800468c:	10bfffcc 	andi	r2,r2,65535
 8004690:	10a0001c 	xori	r2,r2,32768
 8004694:	10a00004 	addi	r2,r2,-32768
 8004698:	e0bfff15 	stw	r2,-4(fp)

		// Successful open
		if(sd_fileh == 0)
 800469c:	e0bfff17 	ldw	r2,-4(fp)
 80046a0:	1004c03a 	cmpne	r2,r2,zero
 80046a4:	1000c81e 	bne	r2,zero,80049c8 <load_rom+0x3c0>
		{
			char data = 0;
 80046a8:	e03ffd05 	stb	zero,-12(fp)
			int i = 0;
 80046ac:	e03ffc15 	stw	zero,-16(fp)

			// Skip 'NES' (4 bytes)
			for(i = 0; i < 4; i++)
 80046b0:	e03ffc15 	stw	zero,-16(fp)
 80046b4:	00000906 	br	80046dc <load_rom+0xd4>
			  data = alt_up_sd_card_read(sd_fileh);
 80046b8:	e0bfff17 	ldw	r2,-4(fp)
 80046bc:	113fffcc 	andi	r4,r2,65535
 80046c0:	2120001c 	xori	r4,r4,32768
 80046c4:	21200004 	addi	r4,r4,-32768
 80046c8:	80151400 	call	8015140 <alt_up_sd_card_read>
 80046cc:	e0bffd05 	stb	r2,-12(fp)
		{
			char data = 0;
			int i = 0;

			// Skip 'NES' (4 bytes)
			for(i = 0; i < 4; i++)
 80046d0:	e0bffc17 	ldw	r2,-16(fp)
 80046d4:	10800044 	addi	r2,r2,1
 80046d8:	e0bffc15 	stw	r2,-16(fp)
 80046dc:	e0bffc17 	ldw	r2,-16(fp)
 80046e0:	10800110 	cmplti	r2,r2,4
 80046e4:	103ff41e 	bne	r2,zero,80046b8 <load_rom+0xb0>
			  data = alt_up_sd_card_read(sd_fileh);

			// Get PRG and CHR size
			prg_size = alt_up_sd_card_read(sd_fileh);
 80046e8:	e0bfff17 	ldw	r2,-4(fp)
 80046ec:	113fffcc 	andi	r4,r2,65535
 80046f0:	2120001c 	xori	r4,r4,32768
 80046f4:	21200004 	addi	r4,r4,-32768
 80046f8:	80151400 	call	8015140 <alt_up_sd_card_read>
 80046fc:	d0a6c885 	stb	r2,-25822(gp)
			chr_size = alt_up_sd_card_read(sd_fileh);
 8004700:	e0bfff17 	ldw	r2,-4(fp)
 8004704:	113fffcc 	andi	r4,r2,65535
 8004708:	2120001c 	xori	r4,r4,32768
 800470c:	21200004 	addi	r4,r4,-32768
 8004710:	80151400 	call	8015140 <alt_up_sd_card_read>
 8004714:	d0a6cd45 	stb	r2,-25803(gp)
			CHR_ROM = (byte*) malloc(sizeof(byte)*8*1024*chr_size);
 8004718:	d0a6cd43 	ldbu	r2,-25803(gp)
 800471c:	10803fcc 	andi	r2,r2,255
 8004720:	1008937a 	slli	r4,r2,13
 8004724:	80052a40 	call	80052a4 <malloc>
 8004728:	d0a6d015 	stw	r2,-25792(gp)

			// Next byte handles mirroring, SRAM presence, trainer, and mapper (lower)
			data = alt_up_sd_card_read(sd_fileh);
 800472c:	e0bfff17 	ldw	r2,-4(fp)
 8004730:	113fffcc 	andi	r4,r2,65535
 8004734:	2120001c 	xori	r4,r4,32768
 8004738:	21200004 	addi	r4,r4,-32768
 800473c:	80151400 	call	8015140 <alt_up_sd_card_read>
 8004740:	e0bffd05 	stb	r2,-12(fp)

			// 0xx0 = horizontal, 0xx1 = vertical, 1xxx four-screen
			mirroring = data & 0x0F;
 8004744:	e0bffd03 	ldbu	r2,-12(fp)
 8004748:	108003cc 	andi	r2,r2,15
 800474c:	d0a6cb05 	stb	r2,-25812(gp)
			cpu_sram_batt = (data & 0x02) ? 1 : 0;
 8004750:	e0bffd03 	ldbu	r2,-12(fp)
 8004754:	10803fcc 	andi	r2,r2,255
 8004758:	1080008c 	andi	r2,r2,2
 800475c:	1004c03a 	cmpne	r2,r2,zero
 8004760:	d0a6c845 	stb	r2,-25823(gp)
			trainer = (data & 0x04) ? 1 : 0;
 8004764:	e0bffd03 	ldbu	r2,-12(fp)
 8004768:	10803fcc 	andi	r2,r2,255
 800476c:	1080010c 	andi	r2,r2,4
 8004770:	1004c03a 	cmpne	r2,r2,zero
 8004774:	d0a6c805 	stb	r2,-25824(gp)
			mapper = (data >> 4);
 8004778:	e0bffd07 	ldb	r2,-12(fp)
 800477c:	1005d13a 	srai	r2,r2,4
 8004780:	d0a6cd05 	stb	r2,-25804(gp)

			if( (mirroring & 0x09) == 1)
 8004784:	d0a6cb03 	ldbu	r2,-25812(gp)
 8004788:	10803fcc 	andi	r2,r2,255
 800478c:	1080024c 	andi	r2,r2,9
 8004790:	10800058 	cmpnei	r2,r2,1
 8004794:	1000041e 	bne	r2,zero,80047a8 <load_rom+0x1a0>
				printf("ROM uses Vertical Mirroring!\n");
 8004798:	01020074 	movhi	r4,2049
 800479c:	211cee04 	addi	r4,r4,29624
 80047a0:	8005d500 	call	8005d50 <puts>
 80047a4:	00000c06 	br	80047d8 <load_rom+0x1d0>
			else if( (mirroring & 0x09) == 0 )
 80047a8:	d0a6cb03 	ldbu	r2,-25812(gp)
 80047ac:	10803fcc 	andi	r2,r2,255
 80047b0:	1080024c 	andi	r2,r2,9
 80047b4:	1004c03a 	cmpne	r2,r2,zero
 80047b8:	1000041e 	bne	r2,zero,80047cc <load_rom+0x1c4>
				printf("ROM uses Horizontal Mirroring!\n");
 80047bc:	01020074 	movhi	r4,2049
 80047c0:	211cf604 	addi	r4,r4,29656
 80047c4:	8005d500 	call	8005d50 <puts>
 80047c8:	00000306 	br	80047d8 <load_rom+0x1d0>
			else
				printf("ROM ues 4-screen VRAM!\n");
 80047cc:	01020074 	movhi	r4,2049
 80047d0:	211cfe04 	addi	r4,r4,29688
 80047d4:	8005d500 	call	8005d50 <puts>
			// Upper nibble of mapper
			data = alt_up_sd_card_read(sd_fileh);
 80047d8:	e0bfff17 	ldw	r2,-4(fp)
 80047dc:	113fffcc 	andi	r4,r2,65535
 80047e0:	2120001c 	xori	r4,r4,32768
 80047e4:	21200004 	addi	r4,r4,-32768
 80047e8:	80151400 	call	8015140 <alt_up_sd_card_read>
 80047ec:	e0bffd05 	stb	r2,-12(fp)
			mapper = mapper | (data & 0xF0);
 80047f0:	00fffc04 	movi	r3,-16
 80047f4:	e0bffd03 	ldbu	r2,-12(fp)
 80047f8:	1884703a 	and	r2,r3,r2
 80047fc:	1007883a 	mov	r3,r2
 8004800:	d0a6cd03 	ldbu	r2,-25804(gp)
 8004804:	1884b03a 	or	r2,r3,r2
 8004808:	d0a6cd05 	stb	r2,-25804(gp)

			// Size of PRG RAM (unused)
			prg_ram_size = alt_up_sd_card_read(sd_fileh);
 800480c:	e0bfff17 	ldw	r2,-4(fp)
 8004810:	113fffcc 	andi	r4,r2,65535
 8004814:	2120001c 	xori	r4,r4,32768
 8004818:	21200004 	addi	r4,r4,-32768
 800481c:	80151400 	call	8015140 <alt_up_sd_card_read>
 8004820:	d0a6cf05 	stb	r2,-25796(gp)

			// TV System
			tv_system = alt_up_sd_card_read(sd_fileh);
 8004824:	e0bfff17 	ldw	r2,-4(fp)
 8004828:	113fffcc 	andi	r4,r2,65535
 800482c:	2120001c 	xori	r4,r4,32768
 8004830:	21200004 	addi	r4,r4,-32768
 8004834:	80151400 	call	8015140 <alt_up_sd_card_read>
 8004838:	d0a6cb45 	stb	r2,-25811(gp)

			// SRAM in CPU
			cpu_sram = (alt_up_sd_card_read(sd_fileh) & (0x10)) ? 1 : 0;
 800483c:	e0bfff17 	ldw	r2,-4(fp)
 8004840:	113fffcc 	andi	r4,r2,65535
 8004844:	2120001c 	xori	r4,r4,32768
 8004848:	21200004 	addi	r4,r4,-32768
 800484c:	80151400 	call	8015140 <alt_up_sd_card_read>
 8004850:	10bfffcc 	andi	r2,r2,65535
 8004854:	1080040c 	andi	r2,r2,16
 8004858:	1004c03a 	cmpne	r2,r2,zero
 800485c:	d0a6d105 	stb	r2,-25788(gp)

			// Skip last 5 bytes of header
			for(i = 0; i < 5; i++)
 8004860:	e03ffc15 	stw	zero,-16(fp)
 8004864:	00000906 	br	800488c <load_rom+0x284>
			  data = alt_up_sd_card_read(sd_fileh);
 8004868:	e0bfff17 	ldw	r2,-4(fp)
 800486c:	113fffcc 	andi	r4,r2,65535
 8004870:	2120001c 	xori	r4,r4,32768
 8004874:	21200004 	addi	r4,r4,-32768
 8004878:	80151400 	call	8015140 <alt_up_sd_card_read>
 800487c:	e0bffd05 	stb	r2,-12(fp)

			// SRAM in CPU
			cpu_sram = (alt_up_sd_card_read(sd_fileh) & (0x10)) ? 1 : 0;

			// Skip last 5 bytes of header
			for(i = 0; i < 5; i++)
 8004880:	e0bffc17 	ldw	r2,-16(fp)
 8004884:	10800044 	addi	r2,r2,1
 8004888:	e0bffc15 	stw	r2,-16(fp)
 800488c:	e0bffc17 	ldw	r2,-16(fp)
 8004890:	10800150 	cmplti	r2,r2,5
 8004894:	103ff41e 	bne	r2,zero,8004868 <load_rom+0x260>
			  data = alt_up_sd_card_read(sd_fileh);

			// Extract the PRG Data
			for(i = 0; i < (prg_size*16*1024); ++i)
 8004898:	e03ffc15 	stw	zero,-16(fp)
 800489c:	00001106 	br	80048e4 <load_rom+0x2dc>
			{
			  data = alt_up_sd_card_read(sd_fileh);
 80048a0:	e0bfff17 	ldw	r2,-4(fp)
 80048a4:	113fffcc 	andi	r4,r2,65535
 80048a8:	2120001c 	xori	r4,r4,32768
 80048ac:	21200004 	addi	r4,r4,-32768
 80048b0:	80151400 	call	8015140 <alt_up_sd_card_read>
 80048b4:	e0bffd05 	stb	r2,-12(fp)
			  CPU->MEM[i+PRG] = (byte)data;
 80048b8:	d0a6c717 	ldw	r2,-25828(gp)
 80048bc:	10c00617 	ldw	r3,24(r2)
 80048c0:	e0bffc17 	ldw	r2,-16(fp)
 80048c4:	1887883a 	add	r3,r3,r2
 80048c8:	00a00014 	movui	r2,32768
 80048cc:	1887883a 	add	r3,r3,r2
 80048d0:	e0bffd03 	ldbu	r2,-12(fp)
 80048d4:	18800005 	stb	r2,0(r3)
			// Skip last 5 bytes of header
			for(i = 0; i < 5; i++)
			  data = alt_up_sd_card_read(sd_fileh);

			// Extract the PRG Data
			for(i = 0; i < (prg_size*16*1024); ++i)
 80048d8:	e0bffc17 	ldw	r2,-16(fp)
 80048dc:	10800044 	addi	r2,r2,1
 80048e0:	e0bffc15 	stw	r2,-16(fp)
 80048e4:	d0a6c883 	ldbu	r2,-25822(gp)
 80048e8:	10803fcc 	andi	r2,r2,255
 80048ec:	100693ba 	slli	r3,r2,14
 80048f0:	e0bffc17 	ldw	r2,-16(fp)
 80048f4:	10ffea16 	blt	r2,r3,80048a0 <load_rom+0x298>
			{
			  data = alt_up_sd_card_read(sd_fileh);
			  CPU->MEM[i+PRG] = (byte)data;
			}
			if(prg_size == 1)	// Populate second half of PRG ROM with a copy of the first bank if prg_size is only 16kB.
 80048f8:	d0a6c883 	ldbu	r2,-25822(gp)
 80048fc:	10803fcc 	andi	r2,r2,255
 8004900:	10800058 	cmpnei	r2,r2,1
 8004904:	1000181e 	bne	r2,zero,8004968 <load_rom+0x360>
			{
				for(i = 0; i < (prg_size*16*1024); ++i)
 8004908:	e03ffc15 	stw	zero,-16(fp)
 800490c:	00001106 	br	8004954 <load_rom+0x34c>
				  CPU->MEM[i+PRG+0x4000] = CPU->MEM[i+PRG];
 8004910:	d0a6c717 	ldw	r2,-25828(gp)
 8004914:	10c00617 	ldw	r3,24(r2)
 8004918:	e0bffc17 	ldw	r2,-16(fp)
 800491c:	1887883a 	add	r3,r3,r2
 8004920:	00b00014 	movui	r2,49152
 8004924:	1889883a 	add	r4,r3,r2
 8004928:	d0a6c717 	ldw	r2,-25828(gp)
 800492c:	10c00617 	ldw	r3,24(r2)
 8004930:	e0bffc17 	ldw	r2,-16(fp)
 8004934:	1887883a 	add	r3,r3,r2
 8004938:	00a00014 	movui	r2,32768
 800493c:	1885883a 	add	r2,r3,r2
 8004940:	10800003 	ldbu	r2,0(r2)
 8004944:	20800005 	stb	r2,0(r4)
			  data = alt_up_sd_card_read(sd_fileh);
			  CPU->MEM[i+PRG] = (byte)data;
			}
			if(prg_size == 1)	// Populate second half of PRG ROM with a copy of the first bank if prg_size is only 16kB.
			{
				for(i = 0; i < (prg_size*16*1024); ++i)
 8004948:	e0bffc17 	ldw	r2,-16(fp)
 800494c:	10800044 	addi	r2,r2,1
 8004950:	e0bffc15 	stw	r2,-16(fp)
 8004954:	d0a6c883 	ldbu	r2,-25822(gp)
 8004958:	10803fcc 	andi	r2,r2,255
 800495c:	100693ba 	slli	r3,r2,14
 8004960:	e0bffc17 	ldw	r2,-16(fp)
 8004964:	10ffea16 	blt	r2,r3,8004910 <load_rom+0x308>
				  CPU->MEM[i+PRG+0x4000] = CPU->MEM[i+PRG];
			}

			// Extract CHR Data
			for(i = 0; i < (chr_size*8*1024); ++i)
 8004968:	e03ffc15 	stw	zero,-16(fp)
 800496c:	00000d06 	br	80049a4 <load_rom+0x39c>
			{
			  PPU->MEM[i] = alt_up_sd_card_read(sd_fileh);
 8004970:	d0a6cc17 	ldw	r2,-25808(gp)
 8004974:	10c00017 	ldw	r3,0(r2)
 8004978:	e0bffc17 	ldw	r2,-16(fp)
 800497c:	18a1883a 	add	r16,r3,r2
 8004980:	e0bfff17 	ldw	r2,-4(fp)
 8004984:	113fffcc 	andi	r4,r2,65535
 8004988:	2120001c 	xori	r4,r4,32768
 800498c:	21200004 	addi	r4,r4,-32768
 8004990:	80151400 	call	8015140 <alt_up_sd_card_read>
 8004994:	80800005 	stb	r2,0(r16)
				for(i = 0; i < (prg_size*16*1024); ++i)
				  CPU->MEM[i+PRG+0x4000] = CPU->MEM[i+PRG];
			}

			// Extract CHR Data
			for(i = 0; i < (chr_size*8*1024); ++i)
 8004998:	e0bffc17 	ldw	r2,-16(fp)
 800499c:	10800044 	addi	r2,r2,1
 80049a0:	e0bffc15 	stw	r2,-16(fp)
 80049a4:	d0a6cd43 	ldbu	r2,-25803(gp)
 80049a8:	10803fcc 	andi	r2,r2,255
 80049ac:	1006937a 	slli	r3,r2,13
 80049b0:	e0bffc17 	ldw	r2,-16(fp)
 80049b4:	10ffee16 	blt	r2,r3,8004970 <load_rom+0x368>
			{
			  PPU->MEM[i] = alt_up_sd_card_read(sd_fileh);
			  //CHR_ROM[i] = (byte) data;
			}

			printf("Successfully Completed\n");
 80049b8:	01020074 	movhi	r4,2049
 80049bc:	211d0404 	addi	r4,r4,29712
 80049c0:	8005d500 	call	8005d50 <puts>
 80049c4:	00000706 	br	80049e4 <load_rom+0x3dc>
		}
		else
			printf("ERROR: OPENING FILE\n");
 80049c8:	01020074 	movhi	r4,2049
 80049cc:	211d0a04 	addi	r4,r4,29736
 80049d0:	8005d500 	call	8005d50 <puts>
 80049d4:	00000306 	br	80049e4 <load_rom+0x3dc>
	}
	else
		printf("ERROR: SD CARD NOT FAT16 FORMAT\n");
 80049d8:	01020074 	movhi	r4,2049
 80049dc:	211d0f04 	addi	r4,r4,29756
 80049e0:	8005d500 	call	8005d50 <puts>


	printf("Done loading memory! prg_size, chr_size: %d %d\n", prg_size, chr_size);
 80049e4:	d0a6c883 	ldbu	r2,-25822(gp)
 80049e8:	11403fcc 	andi	r5,r2,255
 80049ec:	d0a6cd43 	ldbu	r2,-25803(gp)
 80049f0:	11803fcc 	andi	r6,r2,255
 80049f4:	01020074 	movhi	r4,2049
 80049f8:	211d1704 	addi	r4,r4,29788
 80049fc:	8005c140 	call	8005c14 <printf>
	return;
}
 8004a00:	e037883a 	mov	sp,fp
 8004a04:	dfc00217 	ldw	ra,8(sp)
 8004a08:	df000117 	ldw	fp,4(sp)
 8004a0c:	dc000017 	ldw	r16,0(sp)
 8004a10:	dec00304 	addi	sp,sp,12
 8004a14:	f800283a 	ret

08004a18 <vga_test>:
 *      Author: Sergio
 */
#include "vga.h"

void vga_test()
{
 8004a18:	deffee04 	addi	sp,sp,-72
 8004a1c:	dfc01115 	stw	ra,68(sp)
 8004a20:	df001015 	stw	fp,64(sp)
 8004a24:	df001004 	addi	fp,sp,64
	//alt_up_char_buffer_init(char_buffer); // Initialize buffer
	//alt_up_char_buffer_init(pix_buffer); // Initialize buffer
	//char_buffer = alt_up_char_buffer_open_dev("/dev/Char_Buffer_with_DMA"); // Name must be "/dev/" followed by instance name
	pix_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/Pixel_Buffer_DMA");		// Same with Pixel Buffer
 8004a28:	01020074 	movhi	r4,2049
 8004a2c:	211d2304 	addi	r4,r4,29836
 8004a30:	80103380 	call	8010338 <alt_up_pixel_buffer_dma_open_dev>
 8004a34:	d0a6ce15 	stw	r2,-25800(gp)

	if(/*!char_buffer ||*/ !pix_buffer)	// Buffer fails to load if its NULL
 8004a38:	d0a6ce17 	ldw	r2,-25800(gp)
 8004a3c:	1004c03a 	cmpne	r2,r2,zero
 8004a40:	1000041e 	bne	r2,zero,8004a54 <vga_test+0x3c>
		printf("Failed to load buffer(s)!\n");
 8004a44:	01020074 	movhi	r4,2049
 8004a48:	211d2904 	addi	r4,r4,29860
 8004a4c:	8005d500 	call	8005d50 <puts>
 8004a50:	00000306 	br	8004a60 <vga_test+0x48>
	else
		printf("Successfully loaded buffer(s)!\n");
 8004a54:	01020074 	movhi	r4,2049
 8004a58:	211d3004 	addi	r4,r4,29888
 8004a5c:	8005d500 	call	8005d50 <puts>
	alt_up_char_buffer_string(char_buffer, "//  /_/     \\__/  /_____/  /_______/          |__|  ",0,7);
	alt_up_char_buffer_string(char_buffer, "// ----------------------------------------------------------",0,8);
*/


	alt_up_pixel_buffer_dma_clear_screen( pix_buffer, 0 );
 8004a60:	d126ce17 	ldw	r4,-25800(gp)
 8004a64:	000b883a 	mov	r5,zero
 8004a68:	80105fc0 	call	80105fc <alt_up_pixel_buffer_dma_clear_screen>
	//alt_up_pixel_buffer_dma_draw( pix_buffer, 0xFFFFF, 11, 11);
	alt_up_pixel_buffer_dma_draw_box ( pix_buffer, 110, 75, 256+110, 240+75, 0x55FFF, 0);
 8004a6c:	d126ce17 	ldw	r4,-25800(gp)
 8004a70:	00804ec4 	movi	r2,315
 8004a74:	d8800015 	stw	r2,0(sp)
 8004a78:	00800174 	movhi	r2,5
 8004a7c:	1097ffc4 	addi	r2,r2,24575
 8004a80:	d8800115 	stw	r2,4(sp)
 8004a84:	d8000215 	stw	zero,8(sp)
 8004a88:	01401b84 	movi	r5,110
 8004a8c:	018012c4 	movi	r6,75
 8004a90:	01c05b84 	movi	r7,366
 8004a94:	80107600 	call	8010760 <alt_up_pixel_buffer_dma_draw_box>

	int color = 0;
 8004a98:	e03ff715 	stw	zero,-36(fp)
	int x = 0, y = 0, s = 0;
 8004a9c:	e03ff615 	stw	zero,-40(fp)
 8004aa0:	e03ff515 	stw	zero,-44(fp)
 8004aa4:	e03ff415 	stw	zero,-48(fp)
	byte mask;

	for( s = 0; s < 32*30; ++s)
 8004aa8:	e03ff415 	stw	zero,-48(fp)
 8004aac:	00008506 	br	8004cc4 <vga_test+0x2ac>
	{
		for( y = 0; y < 8; ++y )
 8004ab0:	e03ff515 	stw	zero,-44(fp)
 8004ab4:	00007d06 	br	8004cac <vga_test+0x294>
		{
			mask = 0x80;
 8004ab8:	00bfe004 	movi	r2,-128
 8004abc:	e0bff305 	stb	r2,-52(fp)
			for( x = 0; x < 8; ++x)
 8004ac0:	e03ff615 	stw	zero,-40(fp)
 8004ac4:	00007306 	br	8004c94 <vga_test+0x27c>
			{
				color = (((PPU->MEM[y+s*16] & mask) ? 1 : 0) | (((PPU->MEM[y+8+s*16] & mask) ? 1 : 0) << 1));
 8004ac8:	d0a6cc17 	ldw	r2,-25808(gp)
 8004acc:	11000017 	ldw	r4,0(r2)
 8004ad0:	e0bff417 	ldw	r2,-48(fp)
 8004ad4:	1006913a 	slli	r3,r2,4
 8004ad8:	e0bff517 	ldw	r2,-44(fp)
 8004adc:	1885883a 	add	r2,r3,r2
 8004ae0:	2085883a 	add	r2,r4,r2
 8004ae4:	10c00003 	ldbu	r3,0(r2)
 8004ae8:	e0bff303 	ldbu	r2,-52(fp)
 8004aec:	1884703a 	and	r2,r3,r2
 8004af0:	10803fcc 	andi	r2,r2,255
 8004af4:	1004c03a 	cmpne	r2,r2,zero
 8004af8:	e0bffd15 	stw	r2,-12(fp)
 8004afc:	d0a6cc17 	ldw	r2,-25808(gp)
 8004b00:	11000017 	ldw	r4,0(r2)
 8004b04:	e0bff417 	ldw	r2,-48(fp)
 8004b08:	1006913a 	slli	r3,r2,4
 8004b0c:	e0bff517 	ldw	r2,-44(fp)
 8004b10:	1885883a 	add	r2,r3,r2
 8004b14:	2085883a 	add	r2,r4,r2
 8004b18:	10800204 	addi	r2,r2,8
 8004b1c:	10c00003 	ldbu	r3,0(r2)
 8004b20:	e0bff303 	ldbu	r2,-52(fp)
 8004b24:	1884703a 	and	r2,r3,r2
 8004b28:	10803fcc 	andi	r2,r2,255
 8004b2c:	1005003a 	cmpeq	r2,r2,zero
 8004b30:	1000031e 	bne	r2,zero,8004b40 <vga_test+0x128>
 8004b34:	00800084 	movi	r2,2
 8004b38:	e0bffc15 	stw	r2,-16(fp)
 8004b3c:	00000106 	br	8004b44 <vga_test+0x12c>
 8004b40:	e03ffc15 	stw	zero,-16(fp)
 8004b44:	e0fffd17 	ldw	r3,-12(fp)
 8004b48:	e13ffc17 	ldw	r4,-16(fp)
 8004b4c:	1904b03a 	or	r2,r3,r4
 8004b50:	e0bff715 	stw	r2,-36(fp)
				if(color == 0)
 8004b54:	e0bff717 	ldw	r2,-36(fp)
 8004b58:	1004c03a 	cmpne	r2,r2,zero
 8004b5c:	1000031e 	bne	r2,zero,8004b6c <vga_test+0x154>
					color = 0xFFFFFFFF;
 8004b60:	00bfffc4 	movi	r2,-1
 8004b64:	e0bff715 	stw	r2,-36(fp)
 8004b68:	00000d06 	br	8004ba0 <vga_test+0x188>
				else if(color == 1)
 8004b6c:	e0bff717 	ldw	r2,-36(fp)
 8004b70:	10800058 	cmpnei	r2,r2,1
 8004b74:	1000031e 	bne	r2,zero,8004b84 <vga_test+0x16c>
					color = 0x0000FFFF;
 8004b78:	00bfffd4 	movui	r2,65535
 8004b7c:	e0bff715 	stw	r2,-36(fp)
 8004b80:	00000706 	br	8004ba0 <vga_test+0x188>
				else if(color == 2)
 8004b84:	e0bff717 	ldw	r2,-36(fp)
 8004b88:	10800098 	cmpnei	r2,r2,2
 8004b8c:	1000031e 	bne	r2,zero,8004b9c <vga_test+0x184>
					color = 0xFFFF0000;
 8004b90:	00bffff4 	movhi	r2,65535
 8004b94:	e0bff715 	stw	r2,-36(fp)
 8004b98:	00000106 	br	8004ba0 <vga_test+0x188>
				else
					color = 0;
 8004b9c:	e03ff715 	stw	zero,-36(fp)
				alt_up_pixel_buffer_dma_draw( pix_buffer, color, 110+x+(s%32)*8, 75+y+((s > 32) ? s/32*8+1 : 0));
 8004ba0:	d0a6ce17 	ldw	r2,-25800(gp)
 8004ba4:	e0bffb15 	stw	r2,-20(fp)
 8004ba8:	e0fff717 	ldw	r3,-36(fp)
 8004bac:	e0fffa15 	stw	r3,-24(fp)
 8004bb0:	e0bff417 	ldw	r2,-48(fp)
 8004bb4:	00e00034 	movhi	r3,32768
 8004bb8:	18c007c4 	addi	r3,r3,31
 8004bbc:	10c4703a 	and	r2,r2,r3
 8004bc0:	e0bffe15 	stw	r2,-8(fp)
 8004bc4:	e13ffe17 	ldw	r4,-8(fp)
 8004bc8:	2004403a 	cmpge	r2,r4,zero
 8004bcc:	10000a1e 	bne	r2,zero,8004bf8 <vga_test+0x1e0>
 8004bd0:	e0bffe17 	ldw	r2,-8(fp)
 8004bd4:	10bfffc4 	addi	r2,r2,-1
 8004bd8:	e0bffe15 	stw	r2,-8(fp)
 8004bdc:	00bff804 	movi	r2,-32
 8004be0:	e0fffe17 	ldw	r3,-8(fp)
 8004be4:	1886b03a 	or	r3,r3,r2
 8004be8:	e0fffe15 	stw	r3,-8(fp)
 8004bec:	e13ffe17 	ldw	r4,-8(fp)
 8004bf0:	21000044 	addi	r4,r4,1
 8004bf4:	e13ffe15 	stw	r4,-8(fp)
 8004bf8:	e0bffe17 	ldw	r2,-8(fp)
 8004bfc:	100690fa 	slli	r3,r2,3
 8004c00:	e0bff617 	ldw	r2,-40(fp)
 8004c04:	1885883a 	add	r2,r3,r2
 8004c08:	10801b84 	addi	r2,r2,110
 8004c0c:	e0bff915 	stw	r2,-28(fp)
 8004c10:	e0bff417 	ldw	r2,-48(fp)
 8004c14:	10800850 	cmplti	r2,r2,33
 8004c18:	10000e1e 	bne	r2,zero,8004c54 <vga_test+0x23c>
 8004c1c:	e0bff417 	ldw	r2,-48(fp)
 8004c20:	e0bfff15 	stw	r2,-4(fp)
 8004c24:	e0ffff17 	ldw	r3,-4(fp)
 8004c28:	1804403a 	cmpge	r2,r3,zero
 8004c2c:	1000031e 	bne	r2,zero,8004c3c <vga_test+0x224>
 8004c30:	e13fff17 	ldw	r4,-4(fp)
 8004c34:	210007c4 	addi	r4,r4,31
 8004c38:	e13fff15 	stw	r4,-4(fp)
 8004c3c:	e0ffff17 	ldw	r3,-4(fp)
 8004c40:	1805d17a 	srai	r2,r3,5
 8004c44:	100490fa 	slli	r2,r2,3
 8004c48:	10800044 	addi	r2,r2,1
 8004c4c:	e0bff815 	stw	r2,-32(fp)
 8004c50:	00000106 	br	8004c58 <vga_test+0x240>
 8004c54:	e03ff815 	stw	zero,-32(fp)
 8004c58:	e0bff517 	ldw	r2,-44(fp)
 8004c5c:	e13ff817 	ldw	r4,-32(fp)
 8004c60:	2085883a 	add	r2,r4,r2
 8004c64:	108012c4 	addi	r2,r2,75
 8004c68:	100f883a 	mov	r7,r2
 8004c6c:	e13ffb17 	ldw	r4,-20(fp)
 8004c70:	e17ffa17 	ldw	r5,-24(fp)
 8004c74:	e1bff917 	ldw	r6,-28(fp)
 8004c78:	80103780 	call	8010378 <alt_up_pixel_buffer_dma_draw>
				mask = mask >> 1;
 8004c7c:	e0bff303 	ldbu	r2,-52(fp)
 8004c80:	1004d07a 	srli	r2,r2,1
 8004c84:	e0bff305 	stb	r2,-52(fp)
	for( s = 0; s < 32*30; ++s)
	{
		for( y = 0; y < 8; ++y )
		{
			mask = 0x80;
			for( x = 0; x < 8; ++x)
 8004c88:	e0bff617 	ldw	r2,-40(fp)
 8004c8c:	10800044 	addi	r2,r2,1
 8004c90:	e0bff615 	stw	r2,-40(fp)
 8004c94:	e0bff617 	ldw	r2,-40(fp)
 8004c98:	10800210 	cmplti	r2,r2,8
 8004c9c:	103f8a1e 	bne	r2,zero,8004ac8 <vga_test+0xb0>
	int x = 0, y = 0, s = 0;
	byte mask;

	for( s = 0; s < 32*30; ++s)
	{
		for( y = 0; y < 8; ++y )
 8004ca0:	e0bff517 	ldw	r2,-44(fp)
 8004ca4:	10800044 	addi	r2,r2,1
 8004ca8:	e0bff515 	stw	r2,-44(fp)
 8004cac:	e0bff517 	ldw	r2,-44(fp)
 8004cb0:	10800210 	cmplti	r2,r2,8
 8004cb4:	103f801e 	bne	r2,zero,8004ab8 <vga_test+0xa0>

	int color = 0;
	int x = 0, y = 0, s = 0;
	byte mask;

	for( s = 0; s < 32*30; ++s)
 8004cb8:	e0bff417 	ldw	r2,-48(fp)
 8004cbc:	10800044 	addi	r2,r2,1
 8004cc0:	e0bff415 	stw	r2,-48(fp)
 8004cc4:	e0bff417 	ldw	r2,-48(fp)
 8004cc8:	1080f010 	cmplti	r2,r2,960
 8004ccc:	103f781e 	bne	r2,zero,8004ab0 <vga_test+0x98>
			mask = mask >> 1;
		}

	}*/
	return;
}
 8004cd0:	e037883a 	mov	sp,fp
 8004cd4:	dfc00117 	ldw	ra,4(sp)
 8004cd8:	df000017 	ldw	fp,0(sp)
 8004cdc:	dec00204 	addi	sp,sp,8
 8004ce0:	f800283a 	ret

08004ce4 <_fgets_r>:
 8004ce4:	defff804 	addi	sp,sp,-32
 8004ce8:	00800044 	movi	r2,1
 8004cec:	dd800615 	stw	r22,24(sp)
 8004cf0:	dd400515 	stw	r21,20(sp)
 8004cf4:	dc400115 	stw	r17,4(sp)
 8004cf8:	dc000015 	stw	r16,0(sp)
 8004cfc:	dfc00715 	stw	ra,28(sp)
 8004d00:	dd000415 	stw	r20,16(sp)
 8004d04:	dcc00315 	stw	r19,12(sp)
 8004d08:	dc800215 	stw	r18,8(sp)
 8004d0c:	3021883a 	mov	r16,r6
 8004d10:	282d883a 	mov	r22,r5
 8004d14:	3823883a 	mov	r17,r7
 8004d18:	202b883a 	mov	r21,r4
 8004d1c:	1180410e 	bge	r2,r6,8004e24 <_fgets_r+0x140>
 8004d20:	20000226 	beq	r4,zero,8004d2c <_fgets_r+0x48>
 8004d24:	20800e17 	ldw	r2,56(r4)
 8004d28:	10002e26 	beq	r2,zero,8004de4 <_fgets_r+0x100>
 8004d2c:	853fffc4 	addi	r20,r16,-1
 8004d30:	b027883a 	mov	r19,r22
 8004d34:	88800117 	ldw	r2,4(r17)
 8004d38:	a809883a 	mov	r4,r21
 8004d3c:	880b883a 	mov	r5,r17
 8004d40:	100d883a 	mov	r6,r2
 8004d44:	1000031e 	bne	r2,zero,8004d54 <_fgets_r+0x70>
 8004d48:	8005d640 	call	8005d64 <__srefill_r>
 8004d4c:	1000341e 	bne	r2,zero,8004e20 <_fgets_r+0x13c>
 8004d50:	89800117 	ldw	r6,4(r17)
 8004d54:	01400284 	movi	r5,10
 8004d58:	3021883a 	mov	r16,r6
 8004d5c:	8c800017 	ldw	r18,0(r17)
 8004d60:	a180012e 	bgeu	r20,r6,8004d68 <_fgets_r+0x84>
 8004d64:	a021883a 	mov	r16,r20
 8004d68:	9009883a 	mov	r4,r18
 8004d6c:	800d883a 	mov	r6,r16
 8004d70:	80059f80 	call	80059f8 <memchr>
 8004d74:	1007883a 	mov	r3,r2
 8004d78:	900b883a 	mov	r5,r18
 8004d7c:	9809883a 	mov	r4,r19
 8004d80:	800d883a 	mov	r6,r16
 8004d84:	1000191e 	bne	r2,zero,8004dec <_fgets_r+0x108>
 8004d88:	88800117 	ldw	r2,4(r17)
 8004d8c:	88c00017 	ldw	r3,0(r17)
 8004d90:	9c27883a 	add	r19,r19,r16
 8004d94:	1405c83a 	sub	r2,r2,r16
 8004d98:	1c07883a 	add	r3,r3,r16
 8004d9c:	88c00015 	stw	r3,0(r17)
 8004da0:	88800115 	stw	r2,4(r17)
 8004da4:	8005adc0 	call	8005adc <memcpy>
 8004da8:	a407c83a 	sub	r3,r20,r16
 8004dac:	1829883a 	mov	r20,r3
 8004db0:	183fe01e 	bne	r3,zero,8004d34 <_fgets_r+0x50>
 8004db4:	98000005 	stb	zero,0(r19)
 8004db8:	b005883a 	mov	r2,r22
 8004dbc:	dfc00717 	ldw	ra,28(sp)
 8004dc0:	dd800617 	ldw	r22,24(sp)
 8004dc4:	dd400517 	ldw	r21,20(sp)
 8004dc8:	dd000417 	ldw	r20,16(sp)
 8004dcc:	dcc00317 	ldw	r19,12(sp)
 8004dd0:	dc800217 	ldw	r18,8(sp)
 8004dd4:	dc400117 	ldw	r17,4(sp)
 8004dd8:	dc000017 	ldw	r16,0(sp)
 8004ddc:	dec00804 	addi	sp,sp,32
 8004de0:	f800283a 	ret
 8004de4:	8004eb80 	call	8004eb8 <__sinit>
 8004de8:	003fd006 	br	8004d2c <_fgets_r+0x48>
 8004dec:	88800117 	ldw	r2,4(r17)
 8004df0:	18c00044 	addi	r3,r3,1
 8004df4:	1ca1c83a 	sub	r16,r3,r18
 8004df8:	1405c83a 	sub	r2,r2,r16
 8004dfc:	800d883a 	mov	r6,r16
 8004e00:	88c00015 	stw	r3,0(r17)
 8004e04:	88800115 	stw	r2,4(r17)
 8004e08:	900b883a 	mov	r5,r18
 8004e0c:	9809883a 	mov	r4,r19
 8004e10:	8005adc0 	call	8005adc <memcpy>
 8004e14:	9c21883a 	add	r16,r19,r16
 8004e18:	80000005 	stb	zero,0(r16)
 8004e1c:	003fe606 	br	8004db8 <_fgets_r+0xd4>
 8004e20:	9dbfe41e 	bne	r19,r22,8004db4 <_fgets_r+0xd0>
 8004e24:	002d883a 	mov	r22,zero
 8004e28:	003fe306 	br	8004db8 <_fgets_r+0xd4>

08004e2c <fgets>:
 8004e2c:	008200b4 	movhi	r2,2050
 8004e30:	10a4bf04 	addi	r2,r2,-27908
 8004e34:	2013883a 	mov	r9,r4
 8004e38:	11000017 	ldw	r4,0(r2)
 8004e3c:	2805883a 	mov	r2,r5
 8004e40:	300f883a 	mov	r7,r6
 8004e44:	480b883a 	mov	r5,r9
 8004e48:	100d883a 	mov	r6,r2
 8004e4c:	8004ce41 	jmpi	8004ce4 <_fgets_r>

08004e50 <std>:
 8004e50:	00820034 	movhi	r2,2048
 8004e54:	1097ed04 	addi	r2,r2,24500
 8004e58:	20800b15 	stw	r2,44(r4)
 8004e5c:	00820034 	movhi	r2,2048
 8004e60:	10982804 	addi	r2,r2,24736
 8004e64:	20800815 	stw	r2,32(r4)
 8004e68:	00c20034 	movhi	r3,2048
 8004e6c:	18d80904 	addi	r3,r3,24612
 8004e70:	00820034 	movhi	r2,2048
 8004e74:	1097ef04 	addi	r2,r2,24508
 8004e78:	2140030d 	sth	r5,12(r4)
 8004e7c:	2180038d 	sth	r6,14(r4)
 8004e80:	20c00915 	stw	r3,36(r4)
 8004e84:	20800a15 	stw	r2,40(r4)
 8004e88:	20000015 	stw	zero,0(r4)
 8004e8c:	20000115 	stw	zero,4(r4)
 8004e90:	20000215 	stw	zero,8(r4)
 8004e94:	20000415 	stw	zero,16(r4)
 8004e98:	20000515 	stw	zero,20(r4)
 8004e9c:	20000615 	stw	zero,24(r4)
 8004ea0:	21000715 	stw	r4,28(r4)
 8004ea4:	f800283a 	ret

08004ea8 <__sfp_lock_acquire>:
 8004ea8:	f800283a 	ret

08004eac <__sfp_lock_release>:
 8004eac:	f800283a 	ret

08004eb0 <__sinit_lock_acquire>:
 8004eb0:	f800283a 	ret

08004eb4 <__sinit_lock_release>:
 8004eb4:	f800283a 	ret

08004eb8 <__sinit>:
 8004eb8:	20800e17 	ldw	r2,56(r4)
 8004ebc:	defffd04 	addi	sp,sp,-12
 8004ec0:	dc400115 	stw	r17,4(sp)
 8004ec4:	dc000015 	stw	r16,0(sp)
 8004ec8:	dfc00215 	stw	ra,8(sp)
 8004ecc:	04400044 	movi	r17,1
 8004ed0:	01400104 	movi	r5,4
 8004ed4:	000d883a 	mov	r6,zero
 8004ed8:	2021883a 	mov	r16,r4
 8004edc:	2200bb04 	addi	r8,r4,748
 8004ee0:	200f883a 	mov	r7,r4
 8004ee4:	10000526 	beq	r2,zero,8004efc <__sinit+0x44>
 8004ee8:	dfc00217 	ldw	ra,8(sp)
 8004eec:	dc400117 	ldw	r17,4(sp)
 8004ef0:	dc000017 	ldw	r16,0(sp)
 8004ef4:	dec00304 	addi	sp,sp,12
 8004ef8:	f800283a 	ret
 8004efc:	21000117 	ldw	r4,4(r4)
 8004f00:	00820034 	movhi	r2,2048
 8004f04:	1093e704 	addi	r2,r2,20380
 8004f08:	00c000c4 	movi	r3,3
 8004f0c:	80800f15 	stw	r2,60(r16)
 8004f10:	80c0b915 	stw	r3,740(r16)
 8004f14:	8200ba15 	stw	r8,744(r16)
 8004f18:	84400e15 	stw	r17,56(r16)
 8004f1c:	8000b815 	stw	zero,736(r16)
 8004f20:	8004e500 	call	8004e50 <std>
 8004f24:	81000217 	ldw	r4,8(r16)
 8004f28:	880d883a 	mov	r6,r17
 8004f2c:	800f883a 	mov	r7,r16
 8004f30:	01400284 	movi	r5,10
 8004f34:	8004e500 	call	8004e50 <std>
 8004f38:	81000317 	ldw	r4,12(r16)
 8004f3c:	800f883a 	mov	r7,r16
 8004f40:	01400484 	movi	r5,18
 8004f44:	01800084 	movi	r6,2
 8004f48:	dfc00217 	ldw	ra,8(sp)
 8004f4c:	dc400117 	ldw	r17,4(sp)
 8004f50:	dc000017 	ldw	r16,0(sp)
 8004f54:	dec00304 	addi	sp,sp,12
 8004f58:	8004e501 	jmpi	8004e50 <std>

08004f5c <__fp_lock>:
 8004f5c:	0005883a 	mov	r2,zero
 8004f60:	f800283a 	ret

08004f64 <__fp_unlock>:
 8004f64:	0005883a 	mov	r2,zero
 8004f68:	f800283a 	ret

08004f6c <__fp_unlock_all>:
 8004f6c:	008200b4 	movhi	r2,2050
 8004f70:	10a4bf04 	addi	r2,r2,-27908
 8004f74:	11000017 	ldw	r4,0(r2)
 8004f78:	01420034 	movhi	r5,2048
 8004f7c:	2953d904 	addi	r5,r5,20324
 8004f80:	80051d81 	jmpi	80051d8 <_fwalk>

08004f84 <__fp_lock_all>:
 8004f84:	008200b4 	movhi	r2,2050
 8004f88:	10a4bf04 	addi	r2,r2,-27908
 8004f8c:	11000017 	ldw	r4,0(r2)
 8004f90:	01420034 	movhi	r5,2048
 8004f94:	2953d704 	addi	r5,r5,20316
 8004f98:	80051d81 	jmpi	80051d8 <_fwalk>

08004f9c <_cleanup_r>:
 8004f9c:	01420074 	movhi	r5,2049
 8004fa0:	2966e704 	addi	r5,r5,-25700
 8004fa4:	80051d81 	jmpi	80051d8 <_fwalk>

08004fa8 <_cleanup>:
 8004fa8:	008200b4 	movhi	r2,2050
 8004fac:	10a4c004 	addi	r2,r2,-27904
 8004fb0:	11000017 	ldw	r4,0(r2)
 8004fb4:	8004f9c1 	jmpi	8004f9c <_cleanup_r>

08004fb8 <__sfmoreglue>:
 8004fb8:	defffc04 	addi	sp,sp,-16
 8004fbc:	dc400115 	stw	r17,4(sp)
 8004fc0:	2c401724 	muli	r17,r5,92
 8004fc4:	dc800215 	stw	r18,8(sp)
 8004fc8:	2825883a 	mov	r18,r5
 8004fcc:	89400304 	addi	r5,r17,12
 8004fd0:	dc000015 	stw	r16,0(sp)
 8004fd4:	dfc00315 	stw	ra,12(sp)
 8004fd8:	80052b80 	call	80052b8 <_malloc_r>
 8004fdc:	0021883a 	mov	r16,zero
 8004fe0:	880d883a 	mov	r6,r17
 8004fe4:	000b883a 	mov	r5,zero
 8004fe8:	10000626 	beq	r2,zero,8005004 <__sfmoreglue+0x4c>
 8004fec:	11000304 	addi	r4,r2,12
 8004ff0:	14800115 	stw	r18,4(r2)
 8004ff4:	10000015 	stw	zero,0(r2)
 8004ff8:	11000215 	stw	r4,8(r2)
 8004ffc:	1021883a 	mov	r16,r2
 8005000:	8005b7c0 	call	8005b7c <memset>
 8005004:	8005883a 	mov	r2,r16
 8005008:	dfc00317 	ldw	ra,12(sp)
 800500c:	dc800217 	ldw	r18,8(sp)
 8005010:	dc400117 	ldw	r17,4(sp)
 8005014:	dc000017 	ldw	r16,0(sp)
 8005018:	dec00404 	addi	sp,sp,16
 800501c:	f800283a 	ret

08005020 <__sfp>:
 8005020:	defffd04 	addi	sp,sp,-12
 8005024:	008200b4 	movhi	r2,2050
 8005028:	10a4c004 	addi	r2,r2,-27904
 800502c:	dc000015 	stw	r16,0(sp)
 8005030:	14000017 	ldw	r16,0(r2)
 8005034:	dc400115 	stw	r17,4(sp)
 8005038:	dfc00215 	stw	ra,8(sp)
 800503c:	80800e17 	ldw	r2,56(r16)
 8005040:	2023883a 	mov	r17,r4
 8005044:	10002626 	beq	r2,zero,80050e0 <__sfp+0xc0>
 8005048:	8400b804 	addi	r16,r16,736
 800504c:	80800117 	ldw	r2,4(r16)
 8005050:	81000217 	ldw	r4,8(r16)
 8005054:	10ffffc4 	addi	r3,r2,-1
 8005058:	18000916 	blt	r3,zero,8005080 <__sfp+0x60>
 800505c:	2080030f 	ldh	r2,12(r4)
 8005060:	10000b26 	beq	r2,zero,8005090 <__sfp+0x70>
 8005064:	017fffc4 	movi	r5,-1
 8005068:	00000206 	br	8005074 <__sfp+0x54>
 800506c:	2080030f 	ldh	r2,12(r4)
 8005070:	10000726 	beq	r2,zero,8005090 <__sfp+0x70>
 8005074:	18ffffc4 	addi	r3,r3,-1
 8005078:	21001704 	addi	r4,r4,92
 800507c:	197ffb1e 	bne	r3,r5,800506c <__sfp+0x4c>
 8005080:	80800017 	ldw	r2,0(r16)
 8005084:	10001926 	beq	r2,zero,80050ec <__sfp+0xcc>
 8005088:	1021883a 	mov	r16,r2
 800508c:	003fef06 	br	800504c <__sfp+0x2c>
 8005090:	00bfffc4 	movi	r2,-1
 8005094:	00c00044 	movi	r3,1
 8005098:	2080038d 	sth	r2,14(r4)
 800509c:	20c0030d 	sth	r3,12(r4)
 80050a0:	20000015 	stw	zero,0(r4)
 80050a4:	20000215 	stw	zero,8(r4)
 80050a8:	20000115 	stw	zero,4(r4)
 80050ac:	20000415 	stw	zero,16(r4)
 80050b0:	20000515 	stw	zero,20(r4)
 80050b4:	20000615 	stw	zero,24(r4)
 80050b8:	20000c15 	stw	zero,48(r4)
 80050bc:	20000d15 	stw	zero,52(r4)
 80050c0:	20001115 	stw	zero,68(r4)
 80050c4:	20001215 	stw	zero,72(r4)
 80050c8:	2005883a 	mov	r2,r4
 80050cc:	dfc00217 	ldw	ra,8(sp)
 80050d0:	dc400117 	ldw	r17,4(sp)
 80050d4:	dc000017 	ldw	r16,0(sp)
 80050d8:	dec00304 	addi	sp,sp,12
 80050dc:	f800283a 	ret
 80050e0:	8009883a 	mov	r4,r16
 80050e4:	8004eb80 	call	8004eb8 <__sinit>
 80050e8:	003fd706 	br	8005048 <__sfp+0x28>
 80050ec:	8809883a 	mov	r4,r17
 80050f0:	01400104 	movi	r5,4
 80050f4:	8004fb80 	call	8004fb8 <__sfmoreglue>
 80050f8:	80800015 	stw	r2,0(r16)
 80050fc:	103fe21e 	bne	r2,zero,8005088 <__sfp+0x68>
 8005100:	00800304 	movi	r2,12
 8005104:	0009883a 	mov	r4,zero
 8005108:	88800015 	stw	r2,0(r17)
 800510c:	003fee06 	br	80050c8 <__sfp+0xa8>

08005110 <_fwalk_reent>:
 8005110:	defff704 	addi	sp,sp,-36
 8005114:	dcc00315 	stw	r19,12(sp)
 8005118:	24c0b804 	addi	r19,r4,736
 800511c:	dd800615 	stw	r22,24(sp)
 8005120:	dd400515 	stw	r21,20(sp)
 8005124:	dfc00815 	stw	ra,32(sp)
 8005128:	ddc00715 	stw	r23,28(sp)
 800512c:	dd000415 	stw	r20,16(sp)
 8005130:	dc800215 	stw	r18,8(sp)
 8005134:	dc400115 	stw	r17,4(sp)
 8005138:	dc000015 	stw	r16,0(sp)
 800513c:	202b883a 	mov	r21,r4
 8005140:	282d883a 	mov	r22,r5
 8005144:	8004ea80 	call	8004ea8 <__sfp_lock_acquire>
 8005148:	98002126 	beq	r19,zero,80051d0 <_fwalk_reent+0xc0>
 800514c:	002f883a 	mov	r23,zero
 8005150:	9c800117 	ldw	r18,4(r19)
 8005154:	9c000217 	ldw	r16,8(r19)
 8005158:	90bfffc4 	addi	r2,r18,-1
 800515c:	10000d16 	blt	r2,zero,8005194 <_fwalk_reent+0x84>
 8005160:	0023883a 	mov	r17,zero
 8005164:	053fffc4 	movi	r20,-1
 8005168:	8080030f 	ldh	r2,12(r16)
 800516c:	8c400044 	addi	r17,r17,1
 8005170:	10000626 	beq	r2,zero,800518c <_fwalk_reent+0x7c>
 8005174:	8080038f 	ldh	r2,14(r16)
 8005178:	800b883a 	mov	r5,r16
 800517c:	a809883a 	mov	r4,r21
 8005180:	15000226 	beq	r2,r20,800518c <_fwalk_reent+0x7c>
 8005184:	b03ee83a 	callr	r22
 8005188:	b8aeb03a 	or	r23,r23,r2
 800518c:	84001704 	addi	r16,r16,92
 8005190:	947ff51e 	bne	r18,r17,8005168 <_fwalk_reent+0x58>
 8005194:	9cc00017 	ldw	r19,0(r19)
 8005198:	983fed1e 	bne	r19,zero,8005150 <_fwalk_reent+0x40>
 800519c:	8004eac0 	call	8004eac <__sfp_lock_release>
 80051a0:	b805883a 	mov	r2,r23
 80051a4:	dfc00817 	ldw	ra,32(sp)
 80051a8:	ddc00717 	ldw	r23,28(sp)
 80051ac:	dd800617 	ldw	r22,24(sp)
 80051b0:	dd400517 	ldw	r21,20(sp)
 80051b4:	dd000417 	ldw	r20,16(sp)
 80051b8:	dcc00317 	ldw	r19,12(sp)
 80051bc:	dc800217 	ldw	r18,8(sp)
 80051c0:	dc400117 	ldw	r17,4(sp)
 80051c4:	dc000017 	ldw	r16,0(sp)
 80051c8:	dec00904 	addi	sp,sp,36
 80051cc:	f800283a 	ret
 80051d0:	002f883a 	mov	r23,zero
 80051d4:	003ff106 	br	800519c <_fwalk_reent+0x8c>

080051d8 <_fwalk>:
 80051d8:	defff804 	addi	sp,sp,-32
 80051dc:	dcc00315 	stw	r19,12(sp)
 80051e0:	24c0b804 	addi	r19,r4,736
 80051e4:	dd400515 	stw	r21,20(sp)
 80051e8:	dfc00715 	stw	ra,28(sp)
 80051ec:	dd800615 	stw	r22,24(sp)
 80051f0:	dd000415 	stw	r20,16(sp)
 80051f4:	dc800215 	stw	r18,8(sp)
 80051f8:	dc400115 	stw	r17,4(sp)
 80051fc:	dc000015 	stw	r16,0(sp)
 8005200:	282b883a 	mov	r21,r5
 8005204:	8004ea80 	call	8004ea8 <__sfp_lock_acquire>
 8005208:	98001f26 	beq	r19,zero,8005288 <_fwalk+0xb0>
 800520c:	002d883a 	mov	r22,zero
 8005210:	9c800117 	ldw	r18,4(r19)
 8005214:	9c000217 	ldw	r16,8(r19)
 8005218:	90bfffc4 	addi	r2,r18,-1
 800521c:	10000c16 	blt	r2,zero,8005250 <_fwalk+0x78>
 8005220:	0023883a 	mov	r17,zero
 8005224:	053fffc4 	movi	r20,-1
 8005228:	8080030f 	ldh	r2,12(r16)
 800522c:	8c400044 	addi	r17,r17,1
 8005230:	10000526 	beq	r2,zero,8005248 <_fwalk+0x70>
 8005234:	8080038f 	ldh	r2,14(r16)
 8005238:	8009883a 	mov	r4,r16
 800523c:	15000226 	beq	r2,r20,8005248 <_fwalk+0x70>
 8005240:	a83ee83a 	callr	r21
 8005244:	b0acb03a 	or	r22,r22,r2
 8005248:	84001704 	addi	r16,r16,92
 800524c:	947ff61e 	bne	r18,r17,8005228 <_fwalk+0x50>
 8005250:	9cc00017 	ldw	r19,0(r19)
 8005254:	983fee1e 	bne	r19,zero,8005210 <_fwalk+0x38>
 8005258:	8004eac0 	call	8004eac <__sfp_lock_release>
 800525c:	b005883a 	mov	r2,r22
 8005260:	dfc00717 	ldw	ra,28(sp)
 8005264:	dd800617 	ldw	r22,24(sp)
 8005268:	dd400517 	ldw	r21,20(sp)
 800526c:	dd000417 	ldw	r20,16(sp)
 8005270:	dcc00317 	ldw	r19,12(sp)
 8005274:	dc800217 	ldw	r18,8(sp)
 8005278:	dc400117 	ldw	r17,4(sp)
 800527c:	dc000017 	ldw	r16,0(sp)
 8005280:	dec00804 	addi	sp,sp,32
 8005284:	f800283a 	ret
 8005288:	002d883a 	mov	r22,zero
 800528c:	003ff206 	br	8005258 <_fwalk+0x80>

08005290 <free>:
 8005290:	008200b4 	movhi	r2,2050
 8005294:	10a4bf04 	addi	r2,r2,-27908
 8005298:	200b883a 	mov	r5,r4
 800529c:	11000017 	ldw	r4,0(r2)
 80052a0:	8009f0c1 	jmpi	8009f0c <_free_r>

080052a4 <malloc>:
 80052a4:	008200b4 	movhi	r2,2050
 80052a8:	10a4bf04 	addi	r2,r2,-27908
 80052ac:	200b883a 	mov	r5,r4
 80052b0:	11000017 	ldw	r4,0(r2)
 80052b4:	80052b81 	jmpi	80052b8 <_malloc_r>

080052b8 <_malloc_r>:
 80052b8:	defff604 	addi	sp,sp,-40
 80052bc:	28c002c4 	addi	r3,r5,11
 80052c0:	00800584 	movi	r2,22
 80052c4:	dc800215 	stw	r18,8(sp)
 80052c8:	dfc00915 	stw	ra,36(sp)
 80052cc:	df000815 	stw	fp,32(sp)
 80052d0:	ddc00715 	stw	r23,28(sp)
 80052d4:	dd800615 	stw	r22,24(sp)
 80052d8:	dd400515 	stw	r21,20(sp)
 80052dc:	dd000415 	stw	r20,16(sp)
 80052e0:	dcc00315 	stw	r19,12(sp)
 80052e4:	dc400115 	stw	r17,4(sp)
 80052e8:	dc000015 	stw	r16,0(sp)
 80052ec:	2025883a 	mov	r18,r4
 80052f0:	10c01236 	bltu	r2,r3,800533c <_malloc_r+0x84>
 80052f4:	04400404 	movi	r17,16
 80052f8:	8940142e 	bgeu	r17,r5,800534c <_malloc_r+0x94>
 80052fc:	00800304 	movi	r2,12
 8005300:	0007883a 	mov	r3,zero
 8005304:	90800015 	stw	r2,0(r18)
 8005308:	1805883a 	mov	r2,r3
 800530c:	dfc00917 	ldw	ra,36(sp)
 8005310:	df000817 	ldw	fp,32(sp)
 8005314:	ddc00717 	ldw	r23,28(sp)
 8005318:	dd800617 	ldw	r22,24(sp)
 800531c:	dd400517 	ldw	r21,20(sp)
 8005320:	dd000417 	ldw	r20,16(sp)
 8005324:	dcc00317 	ldw	r19,12(sp)
 8005328:	dc800217 	ldw	r18,8(sp)
 800532c:	dc400117 	ldw	r17,4(sp)
 8005330:	dc000017 	ldw	r16,0(sp)
 8005334:	dec00a04 	addi	sp,sp,40
 8005338:	f800283a 	ret
 800533c:	00bffe04 	movi	r2,-8
 8005340:	18a2703a 	and	r17,r3,r2
 8005344:	883fed16 	blt	r17,zero,80052fc <_malloc_r+0x44>
 8005348:	897fec36 	bltu	r17,r5,80052fc <_malloc_r+0x44>
 800534c:	9009883a 	mov	r4,r18
 8005350:	800f17c0 	call	800f17c <__malloc_lock>
 8005354:	00807dc4 	movi	r2,503
 8005358:	14402b2e 	bgeu	r2,r17,8005408 <_malloc_r+0x150>
 800535c:	8806d27a 	srli	r3,r17,9
 8005360:	18003f1e 	bne	r3,zero,8005460 <_malloc_r+0x1a8>
 8005364:	880cd0fa 	srli	r6,r17,3
 8005368:	300490fa 	slli	r2,r6,3
 800536c:	02c20074 	movhi	r11,2049
 8005370:	5adf1804 	addi	r11,r11,31840
 8005374:	12cb883a 	add	r5,r2,r11
 8005378:	2c000317 	ldw	r16,12(r5)
 800537c:	580f883a 	mov	r7,r11
 8005380:	2c00041e 	bne	r5,r16,8005394 <_malloc_r+0xdc>
 8005384:	00000a06 	br	80053b0 <_malloc_r+0xf8>
 8005388:	1800860e 	bge	r3,zero,80055a4 <_malloc_r+0x2ec>
 800538c:	84000317 	ldw	r16,12(r16)
 8005390:	2c000726 	beq	r5,r16,80053b0 <_malloc_r+0xf8>
 8005394:	80800117 	ldw	r2,4(r16)
 8005398:	00ffff04 	movi	r3,-4
 800539c:	10c8703a 	and	r4,r2,r3
 80053a0:	2447c83a 	sub	r3,r4,r17
 80053a4:	008003c4 	movi	r2,15
 80053a8:	10fff70e 	bge	r2,r3,8005388 <_malloc_r+0xd0>
 80053ac:	31bfffc4 	addi	r6,r6,-1
 80053b0:	32400044 	addi	r9,r6,1
 80053b4:	02820074 	movhi	r10,2049
 80053b8:	529f1a04 	addi	r10,r10,31848
 80053bc:	54000217 	ldw	r16,8(r10)
 80053c0:	8280a026 	beq	r16,r10,8005644 <_malloc_r+0x38c>
 80053c4:	80800117 	ldw	r2,4(r16)
 80053c8:	00ffff04 	movi	r3,-4
 80053cc:	10ca703a 	and	r5,r2,r3
 80053d0:	2c4dc83a 	sub	r6,r5,r17
 80053d4:	008003c4 	movi	r2,15
 80053d8:	11808316 	blt	r2,r6,80055e8 <_malloc_r+0x330>
 80053dc:	52800315 	stw	r10,12(r10)
 80053e0:	52800215 	stw	r10,8(r10)
 80053e4:	30002916 	blt	r6,zero,800548c <_malloc_r+0x1d4>
 80053e8:	8147883a 	add	r3,r16,r5
 80053ec:	18800117 	ldw	r2,4(r3)
 80053f0:	9009883a 	mov	r4,r18
 80053f4:	10800054 	ori	r2,r2,1
 80053f8:	18800115 	stw	r2,4(r3)
 80053fc:	800f19c0 	call	800f19c <__malloc_unlock>
 8005400:	80c00204 	addi	r3,r16,8
 8005404:	003fc006 	br	8005308 <_malloc_r+0x50>
 8005408:	02c20074 	movhi	r11,2049
 800540c:	5adf1804 	addi	r11,r11,31840
 8005410:	8ac5883a 	add	r2,r17,r11
 8005414:	14000317 	ldw	r16,12(r2)
 8005418:	580f883a 	mov	r7,r11
 800541c:	8806d0fa 	srli	r3,r17,3
 8005420:	14006c26 	beq	r2,r16,80055d4 <_malloc_r+0x31c>
 8005424:	80c00117 	ldw	r3,4(r16)
 8005428:	00bfff04 	movi	r2,-4
 800542c:	81800317 	ldw	r6,12(r16)
 8005430:	1886703a 	and	r3,r3,r2
 8005434:	80c7883a 	add	r3,r16,r3
 8005438:	18800117 	ldw	r2,4(r3)
 800543c:	81400217 	ldw	r5,8(r16)
 8005440:	9009883a 	mov	r4,r18
 8005444:	10800054 	ori	r2,r2,1
 8005448:	18800115 	stw	r2,4(r3)
 800544c:	31400215 	stw	r5,8(r6)
 8005450:	29800315 	stw	r6,12(r5)
 8005454:	800f19c0 	call	800f19c <__malloc_unlock>
 8005458:	80c00204 	addi	r3,r16,8
 800545c:	003faa06 	br	8005308 <_malloc_r+0x50>
 8005460:	00800104 	movi	r2,4
 8005464:	10c0052e 	bgeu	r2,r3,800547c <_malloc_r+0x1c4>
 8005468:	00800504 	movi	r2,20
 800546c:	10c07836 	bltu	r2,r3,8005650 <_malloc_r+0x398>
 8005470:	198016c4 	addi	r6,r3,91
 8005474:	300490fa 	slli	r2,r6,3
 8005478:	003fbc06 	br	800536c <_malloc_r+0xb4>
 800547c:	8804d1ba 	srli	r2,r17,6
 8005480:	11800e04 	addi	r6,r2,56
 8005484:	300490fa 	slli	r2,r6,3
 8005488:	003fb806 	br	800536c <_malloc_r+0xb4>
 800548c:	00807fc4 	movi	r2,511
 8005490:	1140bb36 	bltu	r2,r5,8005780 <_malloc_r+0x4c8>
 8005494:	2806d0fa 	srli	r3,r5,3
 8005498:	573ffe04 	addi	fp,r10,-8
 800549c:	00800044 	movi	r2,1
 80054a0:	180890fa 	slli	r4,r3,3
 80054a4:	1807d0ba 	srai	r3,r3,2
 80054a8:	e1c00117 	ldw	r7,4(fp)
 80054ac:	5909883a 	add	r4,r11,r4
 80054b0:	21400217 	ldw	r5,8(r4)
 80054b4:	10c4983a 	sll	r2,r2,r3
 80054b8:	81000315 	stw	r4,12(r16)
 80054bc:	81400215 	stw	r5,8(r16)
 80054c0:	388eb03a 	or	r7,r7,r2
 80054c4:	2c000315 	stw	r16,12(r5)
 80054c8:	24000215 	stw	r16,8(r4)
 80054cc:	e1c00115 	stw	r7,4(fp)
 80054d0:	4807883a 	mov	r3,r9
 80054d4:	4800cd16 	blt	r9,zero,800580c <_malloc_r+0x554>
 80054d8:	1807d0ba 	srai	r3,r3,2
 80054dc:	00800044 	movi	r2,1
 80054e0:	10c8983a 	sll	r4,r2,r3
 80054e4:	39004436 	bltu	r7,r4,80055f8 <_malloc_r+0x340>
 80054e8:	21c4703a 	and	r2,r4,r7
 80054ec:	10000a1e 	bne	r2,zero,8005518 <_malloc_r+0x260>
 80054f0:	2109883a 	add	r4,r4,r4
 80054f4:	00bfff04 	movi	r2,-4
 80054f8:	4884703a 	and	r2,r9,r2
 80054fc:	3906703a 	and	r3,r7,r4
 8005500:	12400104 	addi	r9,r2,4
 8005504:	1800041e 	bne	r3,zero,8005518 <_malloc_r+0x260>
 8005508:	2109883a 	add	r4,r4,r4
 800550c:	3904703a 	and	r2,r7,r4
 8005510:	4a400104 	addi	r9,r9,4
 8005514:	103ffc26 	beq	r2,zero,8005508 <_malloc_r+0x250>
 8005518:	480490fa 	slli	r2,r9,3
 800551c:	4819883a 	mov	r12,r9
 8005520:	023fff04 	movi	r8,-4
 8005524:	589b883a 	add	r13,r11,r2
 8005528:	6807883a 	mov	r3,r13
 800552c:	014003c4 	movi	r5,15
 8005530:	1c000317 	ldw	r16,12(r3)
 8005534:	1c00041e 	bne	r3,r16,8005548 <_malloc_r+0x290>
 8005538:	0000a706 	br	80057d8 <_malloc_r+0x520>
 800553c:	3000ab0e 	bge	r6,zero,80057ec <_malloc_r+0x534>
 8005540:	84000317 	ldw	r16,12(r16)
 8005544:	1c00a426 	beq	r3,r16,80057d8 <_malloc_r+0x520>
 8005548:	80800117 	ldw	r2,4(r16)
 800554c:	1204703a 	and	r2,r2,r8
 8005550:	144dc83a 	sub	r6,r2,r17
 8005554:	29bff90e 	bge	r5,r6,800553c <_malloc_r+0x284>
 8005558:	81000317 	ldw	r4,12(r16)
 800555c:	80c00217 	ldw	r3,8(r16)
 8005560:	89400054 	ori	r5,r17,1
 8005564:	8445883a 	add	r2,r16,r17
 8005568:	20c00215 	stw	r3,8(r4)
 800556c:	19000315 	stw	r4,12(r3)
 8005570:	81400115 	stw	r5,4(r16)
 8005574:	1187883a 	add	r3,r2,r6
 8005578:	31000054 	ori	r4,r6,1
 800557c:	50800315 	stw	r2,12(r10)
 8005580:	50800215 	stw	r2,8(r10)
 8005584:	19800015 	stw	r6,0(r3)
 8005588:	11000115 	stw	r4,4(r2)
 800558c:	12800215 	stw	r10,8(r2)
 8005590:	12800315 	stw	r10,12(r2)
 8005594:	9009883a 	mov	r4,r18
 8005598:	800f19c0 	call	800f19c <__malloc_unlock>
 800559c:	80c00204 	addi	r3,r16,8
 80055a0:	003f5906 	br	8005308 <_malloc_r+0x50>
 80055a4:	8109883a 	add	r4,r16,r4
 80055a8:	20800117 	ldw	r2,4(r4)
 80055ac:	80c00217 	ldw	r3,8(r16)
 80055b0:	81400317 	ldw	r5,12(r16)
 80055b4:	10800054 	ori	r2,r2,1
 80055b8:	20800115 	stw	r2,4(r4)
 80055bc:	28c00215 	stw	r3,8(r5)
 80055c0:	19400315 	stw	r5,12(r3)
 80055c4:	9009883a 	mov	r4,r18
 80055c8:	800f19c0 	call	800f19c <__malloc_unlock>
 80055cc:	80c00204 	addi	r3,r16,8
 80055d0:	003f4d06 	br	8005308 <_malloc_r+0x50>
 80055d4:	80800204 	addi	r2,r16,8
 80055d8:	14000317 	ldw	r16,12(r2)
 80055dc:	143f911e 	bne	r2,r16,8005424 <_malloc_r+0x16c>
 80055e0:	1a400084 	addi	r9,r3,2
 80055e4:	003f7306 	br	80053b4 <_malloc_r+0xfc>
 80055e8:	88c00054 	ori	r3,r17,1
 80055ec:	8445883a 	add	r2,r16,r17
 80055f0:	80c00115 	stw	r3,4(r16)
 80055f4:	003fdf06 	br	8005574 <_malloc_r+0x2bc>
 80055f8:	e4000217 	ldw	r16,8(fp)
 80055fc:	00bfff04 	movi	r2,-4
 8005600:	80c00117 	ldw	r3,4(r16)
 8005604:	802d883a 	mov	r22,r16
 8005608:	18aa703a 	and	r21,r3,r2
 800560c:	ac401636 	bltu	r21,r17,8005668 <_malloc_r+0x3b0>
 8005610:	ac49c83a 	sub	r4,r21,r17
 8005614:	008003c4 	movi	r2,15
 8005618:	1100130e 	bge	r2,r4,8005668 <_malloc_r+0x3b0>
 800561c:	88800054 	ori	r2,r17,1
 8005620:	8447883a 	add	r3,r16,r17
 8005624:	80800115 	stw	r2,4(r16)
 8005628:	20800054 	ori	r2,r4,1
 800562c:	18800115 	stw	r2,4(r3)
 8005630:	e0c00215 	stw	r3,8(fp)
 8005634:	9009883a 	mov	r4,r18
 8005638:	800f19c0 	call	800f19c <__malloc_unlock>
 800563c:	80c00204 	addi	r3,r16,8
 8005640:	003f3106 	br	8005308 <_malloc_r+0x50>
 8005644:	39c00117 	ldw	r7,4(r7)
 8005648:	573ffe04 	addi	fp,r10,-8
 800564c:	003fa006 	br	80054d0 <_malloc_r+0x218>
 8005650:	00801504 	movi	r2,84
 8005654:	10c06736 	bltu	r2,r3,80057f4 <_malloc_r+0x53c>
 8005658:	8804d33a 	srli	r2,r17,12
 800565c:	11801b84 	addi	r6,r2,110
 8005660:	300490fa 	slli	r2,r6,3
 8005664:	003f4106 	br	800536c <_malloc_r+0xb4>
 8005668:	d0a6d217 	ldw	r2,-25784(gp)
 800566c:	d0e00317 	ldw	r3,-32756(gp)
 8005670:	053fffc4 	movi	r20,-1
 8005674:	10800404 	addi	r2,r2,16
 8005678:	88a7883a 	add	r19,r17,r2
 800567c:	1d000326 	beq	r3,r20,800568c <_malloc_r+0x3d4>
 8005680:	98c3ffc4 	addi	r3,r19,4095
 8005684:	00bc0004 	movi	r2,-4096
 8005688:	18a6703a 	and	r19,r3,r2
 800568c:	9009883a 	mov	r4,r18
 8005690:	980b883a 	mov	r5,r19
 8005694:	8005f440 	call	8005f44 <_sbrk_r>
 8005698:	1009883a 	mov	r4,r2
 800569c:	15000426 	beq	r2,r20,80056b0 <_malloc_r+0x3f8>
 80056a0:	854b883a 	add	r5,r16,r21
 80056a4:	1029883a 	mov	r20,r2
 80056a8:	11405a2e 	bgeu	r2,r5,8005814 <_malloc_r+0x55c>
 80056ac:	87000c26 	beq	r16,fp,80056e0 <_malloc_r+0x428>
 80056b0:	e4000217 	ldw	r16,8(fp)
 80056b4:	80c00117 	ldw	r3,4(r16)
 80056b8:	00bfff04 	movi	r2,-4
 80056bc:	1884703a 	and	r2,r3,r2
 80056c0:	14400336 	bltu	r2,r17,80056d0 <_malloc_r+0x418>
 80056c4:	1449c83a 	sub	r4,r2,r17
 80056c8:	008003c4 	movi	r2,15
 80056cc:	113fd316 	blt	r2,r4,800561c <_malloc_r+0x364>
 80056d0:	9009883a 	mov	r4,r18
 80056d4:	800f19c0 	call	800f19c <__malloc_unlock>
 80056d8:	0007883a 	mov	r3,zero
 80056dc:	003f0a06 	br	8005308 <_malloc_r+0x50>
 80056e0:	05c200b4 	movhi	r23,2050
 80056e4:	bdebab04 	addi	r23,r23,-20820
 80056e8:	b8800017 	ldw	r2,0(r23)
 80056ec:	988d883a 	add	r6,r19,r2
 80056f0:	b9800015 	stw	r6,0(r23)
 80056f4:	d0e00317 	ldw	r3,-32756(gp)
 80056f8:	00bfffc4 	movi	r2,-1
 80056fc:	18808e26 	beq	r3,r2,8005938 <_malloc_r+0x680>
 8005700:	2145c83a 	sub	r2,r4,r5
 8005704:	3085883a 	add	r2,r6,r2
 8005708:	b8800015 	stw	r2,0(r23)
 800570c:	20c001cc 	andi	r3,r4,7
 8005710:	18005f1e 	bne	r3,zero,8005890 <_malloc_r+0x5d8>
 8005714:	000b883a 	mov	r5,zero
 8005718:	a4c5883a 	add	r2,r20,r19
 800571c:	1083ffcc 	andi	r2,r2,4095
 8005720:	00c40004 	movi	r3,4096
 8005724:	1887c83a 	sub	r3,r3,r2
 8005728:	28e7883a 	add	r19,r5,r3
 800572c:	9009883a 	mov	r4,r18
 8005730:	980b883a 	mov	r5,r19
 8005734:	8005f440 	call	8005f44 <_sbrk_r>
 8005738:	1007883a 	mov	r3,r2
 800573c:	00bfffc4 	movi	r2,-1
 8005740:	18807a26 	beq	r3,r2,800592c <_malloc_r+0x674>
 8005744:	1d05c83a 	sub	r2,r3,r20
 8005748:	9885883a 	add	r2,r19,r2
 800574c:	10c00054 	ori	r3,r2,1
 8005750:	b8800017 	ldw	r2,0(r23)
 8005754:	a021883a 	mov	r16,r20
 8005758:	a0c00115 	stw	r3,4(r20)
 800575c:	9885883a 	add	r2,r19,r2
 8005760:	b8800015 	stw	r2,0(r23)
 8005764:	e5000215 	stw	r20,8(fp)
 8005768:	b7003626 	beq	r22,fp,8005844 <_malloc_r+0x58c>
 800576c:	018003c4 	movi	r6,15
 8005770:	35404b36 	bltu	r6,r21,80058a0 <_malloc_r+0x5e8>
 8005774:	00800044 	movi	r2,1
 8005778:	a0800115 	stw	r2,4(r20)
 800577c:	003fcd06 	br	80056b4 <_malloc_r+0x3fc>
 8005780:	2808d27a 	srli	r4,r5,9
 8005784:	2000371e 	bne	r4,zero,8005864 <_malloc_r+0x5ac>
 8005788:	2808d0fa 	srli	r4,r5,3
 800578c:	200690fa 	slli	r3,r4,3
 8005790:	1ad1883a 	add	r8,r3,r11
 8005794:	41800217 	ldw	r6,8(r8)
 8005798:	41805b26 	beq	r8,r6,8005908 <_malloc_r+0x650>
 800579c:	30800117 	ldw	r2,4(r6)
 80057a0:	00ffff04 	movi	r3,-4
 80057a4:	10c4703a 	and	r2,r2,r3
 80057a8:	2880022e 	bgeu	r5,r2,80057b4 <_malloc_r+0x4fc>
 80057ac:	31800217 	ldw	r6,8(r6)
 80057b0:	41bffa1e 	bne	r8,r6,800579c <_malloc_r+0x4e4>
 80057b4:	32000317 	ldw	r8,12(r6)
 80057b8:	39c00117 	ldw	r7,4(r7)
 80057bc:	82000315 	stw	r8,12(r16)
 80057c0:	81800215 	stw	r6,8(r16)
 80057c4:	07020074 	movhi	fp,2049
 80057c8:	e71f1804 	addi	fp,fp,31840
 80057cc:	34000315 	stw	r16,12(r6)
 80057d0:	44000215 	stw	r16,8(r8)
 80057d4:	003f3e06 	br	80054d0 <_malloc_r+0x218>
 80057d8:	63000044 	addi	r12,r12,1
 80057dc:	608000cc 	andi	r2,r12,3
 80057e0:	10005d26 	beq	r2,zero,8005958 <_malloc_r+0x6a0>
 80057e4:	18c00204 	addi	r3,r3,8
 80057e8:	003f5106 	br	8005530 <_malloc_r+0x278>
 80057ec:	8089883a 	add	r4,r16,r2
 80057f0:	003f6d06 	br	80055a8 <_malloc_r+0x2f0>
 80057f4:	00805504 	movi	r2,340
 80057f8:	10c02036 	bltu	r2,r3,800587c <_malloc_r+0x5c4>
 80057fc:	8804d3fa 	srli	r2,r17,15
 8005800:	11801dc4 	addi	r6,r2,119
 8005804:	300490fa 	slli	r2,r6,3
 8005808:	003ed806 	br	800536c <_malloc_r+0xb4>
 800580c:	48c000c4 	addi	r3,r9,3
 8005810:	003f3106 	br	80054d8 <_malloc_r+0x220>
 8005814:	05c200b4 	movhi	r23,2050
 8005818:	bdebab04 	addi	r23,r23,-20820
 800581c:	b8800017 	ldw	r2,0(r23)
 8005820:	988d883a 	add	r6,r19,r2
 8005824:	b9800015 	stw	r6,0(r23)
 8005828:	293fb21e 	bne	r5,r4,80056f4 <_malloc_r+0x43c>
 800582c:	2083ffcc 	andi	r2,r4,4095
 8005830:	103fb01e 	bne	r2,zero,80056f4 <_malloc_r+0x43c>
 8005834:	e4000217 	ldw	r16,8(fp)
 8005838:	9d45883a 	add	r2,r19,r21
 800583c:	10800054 	ori	r2,r2,1
 8005840:	80800115 	stw	r2,4(r16)
 8005844:	b8c00017 	ldw	r3,0(r23)
 8005848:	d0a6d317 	ldw	r2,-25780(gp)
 800584c:	10c0012e 	bgeu	r2,r3,8005854 <_malloc_r+0x59c>
 8005850:	d0e6d315 	stw	r3,-25780(gp)
 8005854:	d0a6d417 	ldw	r2,-25776(gp)
 8005858:	10ff962e 	bgeu	r2,r3,80056b4 <_malloc_r+0x3fc>
 800585c:	d0e6d415 	stw	r3,-25776(gp)
 8005860:	003f9406 	br	80056b4 <_malloc_r+0x3fc>
 8005864:	00800104 	movi	r2,4
 8005868:	11001e36 	bltu	r2,r4,80058e4 <_malloc_r+0x62c>
 800586c:	2804d1ba 	srli	r2,r5,6
 8005870:	11000e04 	addi	r4,r2,56
 8005874:	200690fa 	slli	r3,r4,3
 8005878:	003fc506 	br	8005790 <_malloc_r+0x4d8>
 800587c:	00815504 	movi	r2,1364
 8005880:	10c01d2e 	bgeu	r2,r3,80058f8 <_malloc_r+0x640>
 8005884:	01801f84 	movi	r6,126
 8005888:	0080fc04 	movi	r2,1008
 800588c:	003eb706 	br	800536c <_malloc_r+0xb4>
 8005890:	00800204 	movi	r2,8
 8005894:	10cbc83a 	sub	r5,r2,r3
 8005898:	2169883a 	add	r20,r4,r5
 800589c:	003f9e06 	br	8005718 <_malloc_r+0x460>
 80058a0:	00bffe04 	movi	r2,-8
 80058a4:	a93ffd04 	addi	r4,r21,-12
 80058a8:	2088703a 	and	r4,r4,r2
 80058ac:	b10b883a 	add	r5,r22,r4
 80058b0:	00c00144 	movi	r3,5
 80058b4:	28c00215 	stw	r3,8(r5)
 80058b8:	28c00115 	stw	r3,4(r5)
 80058bc:	b0800117 	ldw	r2,4(r22)
 80058c0:	1080004c 	andi	r2,r2,1
 80058c4:	2084b03a 	or	r2,r4,r2
 80058c8:	b0800115 	stw	r2,4(r22)
 80058cc:	313fdd2e 	bgeu	r6,r4,8005844 <_malloc_r+0x58c>
 80058d0:	b1400204 	addi	r5,r22,8
 80058d4:	9009883a 	mov	r4,r18
 80058d8:	8009f0c0 	call	8009f0c <_free_r>
 80058dc:	e4000217 	ldw	r16,8(fp)
 80058e0:	003fd806 	br	8005844 <_malloc_r+0x58c>
 80058e4:	00800504 	movi	r2,20
 80058e8:	11001536 	bltu	r2,r4,8005940 <_malloc_r+0x688>
 80058ec:	210016c4 	addi	r4,r4,91
 80058f0:	200690fa 	slli	r3,r4,3
 80058f4:	003fa606 	br	8005790 <_malloc_r+0x4d8>
 80058f8:	8804d4ba 	srli	r2,r17,18
 80058fc:	11801f04 	addi	r6,r2,124
 8005900:	300490fa 	slli	r2,r6,3
 8005904:	003e9906 	br	800536c <_malloc_r+0xb4>
 8005908:	2009d0ba 	srai	r4,r4,2
 800590c:	01420074 	movhi	r5,2049
 8005910:	295f1804 	addi	r5,r5,31840
 8005914:	00c00044 	movi	r3,1
 8005918:	28800117 	ldw	r2,4(r5)
 800591c:	1906983a 	sll	r3,r3,r4
 8005920:	10c4b03a 	or	r2,r2,r3
 8005924:	28800115 	stw	r2,4(r5)
 8005928:	003fa306 	br	80057b8 <_malloc_r+0x500>
 800592c:	0027883a 	mov	r19,zero
 8005930:	00c00044 	movi	r3,1
 8005934:	003f8606 	br	8005750 <_malloc_r+0x498>
 8005938:	d1200315 	stw	r4,-32756(gp)
 800593c:	003f7306 	br	800570c <_malloc_r+0x454>
 8005940:	00801504 	movi	r2,84
 8005944:	11001936 	bltu	r2,r4,80059ac <_malloc_r+0x6f4>
 8005948:	2804d33a 	srli	r2,r5,12
 800594c:	11001b84 	addi	r4,r2,110
 8005950:	200690fa 	slli	r3,r4,3
 8005954:	003f8e06 	br	8005790 <_malloc_r+0x4d8>
 8005958:	480b883a 	mov	r5,r9
 800595c:	6807883a 	mov	r3,r13
 8005960:	288000cc 	andi	r2,r5,3
 8005964:	18fffe04 	addi	r3,r3,-8
 8005968:	297fffc4 	addi	r5,r5,-1
 800596c:	10001526 	beq	r2,zero,80059c4 <_malloc_r+0x70c>
 8005970:	18800217 	ldw	r2,8(r3)
 8005974:	10fffa26 	beq	r2,r3,8005960 <_malloc_r+0x6a8>
 8005978:	2109883a 	add	r4,r4,r4
 800597c:	393f1e36 	bltu	r7,r4,80055f8 <_malloc_r+0x340>
 8005980:	203f1d26 	beq	r4,zero,80055f8 <_malloc_r+0x340>
 8005984:	21c4703a 	and	r2,r4,r7
 8005988:	10000226 	beq	r2,zero,8005994 <_malloc_r+0x6dc>
 800598c:	6013883a 	mov	r9,r12
 8005990:	003ee106 	br	8005518 <_malloc_r+0x260>
 8005994:	2109883a 	add	r4,r4,r4
 8005998:	3904703a 	and	r2,r7,r4
 800599c:	63000104 	addi	r12,r12,4
 80059a0:	103ffc26 	beq	r2,zero,8005994 <_malloc_r+0x6dc>
 80059a4:	6013883a 	mov	r9,r12
 80059a8:	003edb06 	br	8005518 <_malloc_r+0x260>
 80059ac:	00805504 	movi	r2,340
 80059b0:	11000836 	bltu	r2,r4,80059d4 <_malloc_r+0x71c>
 80059b4:	2804d3fa 	srli	r2,r5,15
 80059b8:	11001dc4 	addi	r4,r2,119
 80059bc:	200690fa 	slli	r3,r4,3
 80059c0:	003f7306 	br	8005790 <_malloc_r+0x4d8>
 80059c4:	0104303a 	nor	r2,zero,r4
 80059c8:	388e703a 	and	r7,r7,r2
 80059cc:	e1c00115 	stw	r7,4(fp)
 80059d0:	003fe906 	br	8005978 <_malloc_r+0x6c0>
 80059d4:	00815504 	movi	r2,1364
 80059d8:	1100032e 	bgeu	r2,r4,80059e8 <_malloc_r+0x730>
 80059dc:	01001f84 	movi	r4,126
 80059e0:	00c0fc04 	movi	r3,1008
 80059e4:	003f6a06 	br	8005790 <_malloc_r+0x4d8>
 80059e8:	2804d4ba 	srli	r2,r5,18
 80059ec:	11001f04 	addi	r4,r2,124
 80059f0:	200690fa 	slli	r3,r4,3
 80059f4:	003f6606 	br	8005790 <_malloc_r+0x4d8>

080059f8 <memchr>:
 80059f8:	008000c4 	movi	r2,3
 80059fc:	29403fcc 	andi	r5,r5,255
 8005a00:	2007883a 	mov	r3,r4
 8005a04:	1180022e 	bgeu	r2,r6,8005a10 <memchr+0x18>
 8005a08:	2084703a 	and	r2,r4,r2
 8005a0c:	10000b26 	beq	r2,zero,8005a3c <memchr+0x44>
 8005a10:	313fffc4 	addi	r4,r6,-1
 8005a14:	3000051e 	bne	r6,zero,8005a2c <memchr+0x34>
 8005a18:	00002c06 	br	8005acc <memchr+0xd4>
 8005a1c:	213fffc4 	addi	r4,r4,-1
 8005a20:	00bfffc4 	movi	r2,-1
 8005a24:	18c00044 	addi	r3,r3,1
 8005a28:	20802826 	beq	r4,r2,8005acc <memchr+0xd4>
 8005a2c:	18800003 	ldbu	r2,0(r3)
 8005a30:	28bffa1e 	bne	r5,r2,8005a1c <memchr+0x24>
 8005a34:	1805883a 	mov	r2,r3
 8005a38:	f800283a 	ret
 8005a3c:	0011883a 	mov	r8,zero
 8005a40:	0007883a 	mov	r3,zero
 8005a44:	01c00104 	movi	r7,4
 8005a48:	4004923a 	slli	r2,r8,8
 8005a4c:	18c00044 	addi	r3,r3,1
 8005a50:	1151883a 	add	r8,r2,r5
 8005a54:	19fffc1e 	bne	r3,r7,8005a48 <memchr+0x50>
 8005a58:	02bfbff4 	movhi	r10,65279
 8005a5c:	52bfbfc4 	addi	r10,r10,-257
 8005a60:	02602074 	movhi	r9,32897
 8005a64:	4a602004 	addi	r9,r9,-32640
 8005a68:	02c000c4 	movi	r11,3
 8005a6c:	20800017 	ldw	r2,0(r4)
 8005a70:	31bfff04 	addi	r6,r6,-4
 8005a74:	200f883a 	mov	r7,r4
 8005a78:	1204f03a 	xor	r2,r2,r8
 8005a7c:	1287883a 	add	r3,r2,r10
 8005a80:	1a46703a 	and	r3,r3,r9
 8005a84:	0084303a 	nor	r2,zero,r2
 8005a88:	10c4703a 	and	r2,r2,r3
 8005a8c:	10000b26 	beq	r2,zero,8005abc <memchr+0xc4>
 8005a90:	20800003 	ldbu	r2,0(r4)
 8005a94:	28800f26 	beq	r5,r2,8005ad4 <memchr+0xdc>
 8005a98:	20800043 	ldbu	r2,1(r4)
 8005a9c:	21c00044 	addi	r7,r4,1
 8005aa0:	28800c26 	beq	r5,r2,8005ad4 <memchr+0xdc>
 8005aa4:	20800083 	ldbu	r2,2(r4)
 8005aa8:	21c00084 	addi	r7,r4,2
 8005aac:	28800926 	beq	r5,r2,8005ad4 <memchr+0xdc>
 8005ab0:	208000c3 	ldbu	r2,3(r4)
 8005ab4:	21c000c4 	addi	r7,r4,3
 8005ab8:	28800626 	beq	r5,r2,8005ad4 <memchr+0xdc>
 8005abc:	21000104 	addi	r4,r4,4
 8005ac0:	59bfea36 	bltu	r11,r6,8005a6c <memchr+0x74>
 8005ac4:	2007883a 	mov	r3,r4
 8005ac8:	003fd106 	br	8005a10 <memchr+0x18>
 8005acc:	0005883a 	mov	r2,zero
 8005ad0:	f800283a 	ret
 8005ad4:	3805883a 	mov	r2,r7
 8005ad8:	f800283a 	ret

08005adc <memcpy>:
 8005adc:	01c003c4 	movi	r7,15
 8005ae0:	2007883a 	mov	r3,r4
 8005ae4:	3980032e 	bgeu	r7,r6,8005af4 <memcpy+0x18>
 8005ae8:	2904b03a 	or	r2,r5,r4
 8005aec:	108000cc 	andi	r2,r2,3
 8005af0:	10000926 	beq	r2,zero,8005b18 <memcpy+0x3c>
 8005af4:	30000626 	beq	r6,zero,8005b10 <memcpy+0x34>
 8005af8:	30cd883a 	add	r6,r6,r3
 8005afc:	28800003 	ldbu	r2,0(r5)
 8005b00:	29400044 	addi	r5,r5,1
 8005b04:	18800005 	stb	r2,0(r3)
 8005b08:	18c00044 	addi	r3,r3,1
 8005b0c:	30fffb1e 	bne	r6,r3,8005afc <memcpy+0x20>
 8005b10:	2005883a 	mov	r2,r4
 8005b14:	f800283a 	ret
 8005b18:	3811883a 	mov	r8,r7
 8005b1c:	200f883a 	mov	r7,r4
 8005b20:	28c00017 	ldw	r3,0(r5)
 8005b24:	31bffc04 	addi	r6,r6,-16
 8005b28:	38c00015 	stw	r3,0(r7)
 8005b2c:	28800117 	ldw	r2,4(r5)
 8005b30:	38800115 	stw	r2,4(r7)
 8005b34:	28c00217 	ldw	r3,8(r5)
 8005b38:	38c00215 	stw	r3,8(r7)
 8005b3c:	28800317 	ldw	r2,12(r5)
 8005b40:	29400404 	addi	r5,r5,16
 8005b44:	38800315 	stw	r2,12(r7)
 8005b48:	39c00404 	addi	r7,r7,16
 8005b4c:	41bff436 	bltu	r8,r6,8005b20 <memcpy+0x44>
 8005b50:	008000c4 	movi	r2,3
 8005b54:	1180072e 	bgeu	r2,r6,8005b74 <memcpy+0x98>
 8005b58:	1007883a 	mov	r3,r2
 8005b5c:	28800017 	ldw	r2,0(r5)
 8005b60:	31bfff04 	addi	r6,r6,-4
 8005b64:	29400104 	addi	r5,r5,4
 8005b68:	38800015 	stw	r2,0(r7)
 8005b6c:	39c00104 	addi	r7,r7,4
 8005b70:	19bffa36 	bltu	r3,r6,8005b5c <memcpy+0x80>
 8005b74:	3807883a 	mov	r3,r7
 8005b78:	003fde06 	br	8005af4 <memcpy+0x18>

08005b7c <memset>:
 8005b7c:	008000c4 	movi	r2,3
 8005b80:	29403fcc 	andi	r5,r5,255
 8005b84:	2007883a 	mov	r3,r4
 8005b88:	1180022e 	bgeu	r2,r6,8005b94 <memset+0x18>
 8005b8c:	2084703a 	and	r2,r4,r2
 8005b90:	10000826 	beq	r2,zero,8005bb4 <memset+0x38>
 8005b94:	30000526 	beq	r6,zero,8005bac <memset+0x30>
 8005b98:	2805883a 	mov	r2,r5
 8005b9c:	30cd883a 	add	r6,r6,r3
 8005ba0:	18800005 	stb	r2,0(r3)
 8005ba4:	18c00044 	addi	r3,r3,1
 8005ba8:	19bffd1e 	bne	r3,r6,8005ba0 <memset+0x24>
 8005bac:	2005883a 	mov	r2,r4
 8005bb0:	f800283a 	ret
 8005bb4:	2804923a 	slli	r2,r5,8
 8005bb8:	020003c4 	movi	r8,15
 8005bbc:	200f883a 	mov	r7,r4
 8005bc0:	2884b03a 	or	r2,r5,r2
 8005bc4:	1006943a 	slli	r3,r2,16
 8005bc8:	10c6b03a 	or	r3,r2,r3
 8005bcc:	41800a2e 	bgeu	r8,r6,8005bf8 <memset+0x7c>
 8005bd0:	4005883a 	mov	r2,r8
 8005bd4:	31bffc04 	addi	r6,r6,-16
 8005bd8:	38c00015 	stw	r3,0(r7)
 8005bdc:	38c00115 	stw	r3,4(r7)
 8005be0:	38c00215 	stw	r3,8(r7)
 8005be4:	38c00315 	stw	r3,12(r7)
 8005be8:	39c00404 	addi	r7,r7,16
 8005bec:	11bff936 	bltu	r2,r6,8005bd4 <memset+0x58>
 8005bf0:	008000c4 	movi	r2,3
 8005bf4:	1180052e 	bgeu	r2,r6,8005c0c <memset+0x90>
 8005bf8:	31bfff04 	addi	r6,r6,-4
 8005bfc:	008000c4 	movi	r2,3
 8005c00:	38c00015 	stw	r3,0(r7)
 8005c04:	39c00104 	addi	r7,r7,4
 8005c08:	11bffb36 	bltu	r2,r6,8005bf8 <memset+0x7c>
 8005c0c:	3807883a 	mov	r3,r7
 8005c10:	003fe006 	br	8005b94 <memset+0x18>

08005c14 <printf>:
 8005c14:	defffb04 	addi	sp,sp,-20
 8005c18:	dfc00115 	stw	ra,4(sp)
 8005c1c:	d9400215 	stw	r5,8(sp)
 8005c20:	d9800315 	stw	r6,12(sp)
 8005c24:	d9c00415 	stw	r7,16(sp)
 8005c28:	008200b4 	movhi	r2,2050
 8005c2c:	10a4bf04 	addi	r2,r2,-27908
 8005c30:	10c00017 	ldw	r3,0(r2)
 8005c34:	200b883a 	mov	r5,r4
 8005c38:	d8800204 	addi	r2,sp,8
 8005c3c:	19000217 	ldw	r4,8(r3)
 8005c40:	100d883a 	mov	r6,r2
 8005c44:	d8800015 	stw	r2,0(sp)
 8005c48:	80080780 	call	8008078 <__vfprintf_internal>
 8005c4c:	dfc00117 	ldw	ra,4(sp)
 8005c50:	dec00504 	addi	sp,sp,20
 8005c54:	f800283a 	ret

08005c58 <_printf_r>:
 8005c58:	defffc04 	addi	sp,sp,-16
 8005c5c:	dfc00115 	stw	ra,4(sp)
 8005c60:	d9800215 	stw	r6,8(sp)
 8005c64:	d9c00315 	stw	r7,12(sp)
 8005c68:	280d883a 	mov	r6,r5
 8005c6c:	21400217 	ldw	r5,8(r4)
 8005c70:	d8c00204 	addi	r3,sp,8
 8005c74:	180f883a 	mov	r7,r3
 8005c78:	d8c00015 	stw	r3,0(sp)
 8005c7c:	80061cc0 	call	80061cc <___vfprintf_internal_r>
 8005c80:	dfc00117 	ldw	ra,4(sp)
 8005c84:	dec00404 	addi	sp,sp,16
 8005c88:	f800283a 	ret

08005c8c <putchar>:
 8005c8c:	008200b4 	movhi	r2,2050
 8005c90:	10a4bf04 	addi	r2,r2,-27908
 8005c94:	11800017 	ldw	r6,0(r2)
 8005c98:	200b883a 	mov	r5,r4
 8005c9c:	3009883a 	mov	r4,r6
 8005ca0:	31800217 	ldw	r6,8(r6)
 8005ca4:	800bb641 	jmpi	800bb64 <_putc_r>

08005ca8 <_putchar_r>:
 8005ca8:	21800217 	ldw	r6,8(r4)
 8005cac:	800bb641 	jmpi	800bb64 <_putc_r>

08005cb0 <_puts_r>:
 8005cb0:	defff604 	addi	sp,sp,-40
 8005cb4:	dc400715 	stw	r17,28(sp)
 8005cb8:	2023883a 	mov	r17,r4
 8005cbc:	2809883a 	mov	r4,r5
 8005cc0:	dfc00915 	stw	ra,36(sp)
 8005cc4:	dcc00815 	stw	r19,32(sp)
 8005cc8:	2827883a 	mov	r19,r5
 8005ccc:	80061000 	call	8006100 <strlen>
 8005cd0:	89400217 	ldw	r5,8(r17)
 8005cd4:	00c20074 	movhi	r3,2049
 8005cd8:	18dd3904 	addi	r3,r3,29924
 8005cdc:	01c00044 	movi	r7,1
 8005ce0:	12000044 	addi	r8,r2,1
 8005ce4:	d8c00515 	stw	r3,20(sp)
 8005ce8:	d9c00615 	stw	r7,24(sp)
 8005cec:	d8c00304 	addi	r3,sp,12
 8005cf0:	01c00084 	movi	r7,2
 8005cf4:	8809883a 	mov	r4,r17
 8005cf8:	d80d883a 	mov	r6,sp
 8005cfc:	d8c00015 	stw	r3,0(sp)
 8005d00:	dcc00315 	stw	r19,12(sp)
 8005d04:	da000215 	stw	r8,8(sp)
 8005d08:	d9c00115 	stw	r7,4(sp)
 8005d0c:	d8800415 	stw	r2,16(sp)
 8005d10:	800a2200 	call	800a220 <__sfvwrite_r>
 8005d14:	00ffffc4 	movi	r3,-1
 8005d18:	10000626 	beq	r2,zero,8005d34 <_puts_r+0x84>
 8005d1c:	1805883a 	mov	r2,r3
 8005d20:	dfc00917 	ldw	ra,36(sp)
 8005d24:	dcc00817 	ldw	r19,32(sp)
 8005d28:	dc400717 	ldw	r17,28(sp)
 8005d2c:	dec00a04 	addi	sp,sp,40
 8005d30:	f800283a 	ret
 8005d34:	00c00284 	movi	r3,10
 8005d38:	1805883a 	mov	r2,r3
 8005d3c:	dfc00917 	ldw	ra,36(sp)
 8005d40:	dcc00817 	ldw	r19,32(sp)
 8005d44:	dc400717 	ldw	r17,28(sp)
 8005d48:	dec00a04 	addi	sp,sp,40
 8005d4c:	f800283a 	ret

08005d50 <puts>:
 8005d50:	008200b4 	movhi	r2,2050
 8005d54:	10a4bf04 	addi	r2,r2,-27908
 8005d58:	200b883a 	mov	r5,r4
 8005d5c:	11000017 	ldw	r4,0(r2)
 8005d60:	8005cb01 	jmpi	8005cb0 <_puts_r>

08005d64 <__srefill_r>:
 8005d64:	defffd04 	addi	sp,sp,-12
 8005d68:	dc400115 	stw	r17,4(sp)
 8005d6c:	dc000015 	stw	r16,0(sp)
 8005d70:	dfc00215 	stw	ra,8(sp)
 8005d74:	2023883a 	mov	r17,r4
 8005d78:	2821883a 	mov	r16,r5
 8005d7c:	20000226 	beq	r4,zero,8005d88 <__srefill_r+0x24>
 8005d80:	20800e17 	ldw	r2,56(r4)
 8005d84:	10004126 	beq	r2,zero,8005e8c <__srefill_r+0x128>
 8005d88:	80c0030b 	ldhu	r3,12(r16)
 8005d8c:	80000115 	stw	zero,4(r16)
 8005d90:	1880080c 	andi	r2,r3,32
 8005d94:	1000361e 	bne	r2,zero,8005e70 <__srefill_r+0x10c>
 8005d98:	1880010c 	andi	r2,r3,4
 8005d9c:	1000211e 	bne	r2,zero,8005e24 <__srefill_r+0xc0>
 8005da0:	1880040c 	andi	r2,r3,16
 8005da4:	10005026 	beq	r2,zero,8005ee8 <__srefill_r+0x184>
 8005da8:	1880020c 	andi	r2,r3,8
 8005dac:	1000541e 	bne	r2,zero,8005f00 <__srefill_r+0x19c>
 8005db0:	8080030b 	ldhu	r2,12(r16)
 8005db4:	10800114 	ori	r2,r2,4
 8005db8:	8080030d 	sth	r2,12(r16)
 8005dbc:	80800417 	ldw	r2,16(r16)
 8005dc0:	10004526 	beq	r2,zero,8005ed8 <__srefill_r+0x174>
 8005dc4:	8080030b 	ldhu	r2,12(r16)
 8005dc8:	108000cc 	andi	r2,r2,3
 8005dcc:	1000361e 	bne	r2,zero,8005ea8 <__srefill_r+0x144>
 8005dd0:	81800417 	ldw	r6,16(r16)
 8005dd4:	80c00817 	ldw	r3,32(r16)
 8005dd8:	81400717 	ldw	r5,28(r16)
 8005ddc:	81c00517 	ldw	r7,20(r16)
 8005de0:	8809883a 	mov	r4,r17
 8005de4:	81800015 	stw	r6,0(r16)
 8005de8:	183ee83a 	callr	r3
 8005dec:	80c0030b 	ldhu	r3,12(r16)
 8005df0:	1009883a 	mov	r4,r2
 8005df4:	80800115 	stw	r2,4(r16)
 8005df8:	00b7ffc4 	movi	r2,-8193
 8005dfc:	1884703a 	and	r2,r3,r2
 8005e00:	8080030d 	sth	r2,12(r16)
 8005e04:	0100230e 	bge	zero,r4,8005e94 <__srefill_r+0x130>
 8005e08:	0009883a 	mov	r4,zero
 8005e0c:	2005883a 	mov	r2,r4
 8005e10:	dfc00217 	ldw	ra,8(sp)
 8005e14:	dc400117 	ldw	r17,4(sp)
 8005e18:	dc000017 	ldw	r16,0(sp)
 8005e1c:	dec00304 	addi	sp,sp,12
 8005e20:	f800283a 	ret
 8005e24:	81400c17 	ldw	r5,48(r16)
 8005e28:	283fe426 	beq	r5,zero,8005dbc <__srefill_r+0x58>
 8005e2c:	80801004 	addi	r2,r16,64
 8005e30:	28800226 	beq	r5,r2,8005e3c <__srefill_r+0xd8>
 8005e34:	8809883a 	mov	r4,r17
 8005e38:	8009f0c0 	call	8009f0c <_free_r>
 8005e3c:	80800f17 	ldw	r2,60(r16)
 8005e40:	80000c15 	stw	zero,48(r16)
 8005e44:	80800115 	stw	r2,4(r16)
 8005e48:	103fdc26 	beq	r2,zero,8005dbc <__srefill_r+0x58>
 8005e4c:	80800e17 	ldw	r2,56(r16)
 8005e50:	0009883a 	mov	r4,zero
 8005e54:	80800015 	stw	r2,0(r16)
 8005e58:	2005883a 	mov	r2,r4
 8005e5c:	dfc00217 	ldw	ra,8(sp)
 8005e60:	dc400117 	ldw	r17,4(sp)
 8005e64:	dc000017 	ldw	r16,0(sp)
 8005e68:	dec00304 	addi	sp,sp,12
 8005e6c:	f800283a 	ret
 8005e70:	013fffc4 	movi	r4,-1
 8005e74:	2005883a 	mov	r2,r4
 8005e78:	dfc00217 	ldw	ra,8(sp)
 8005e7c:	dc400117 	ldw	r17,4(sp)
 8005e80:	dc000017 	ldw	r16,0(sp)
 8005e84:	dec00304 	addi	sp,sp,12
 8005e88:	f800283a 	ret
 8005e8c:	8004eb80 	call	8004eb8 <__sinit>
 8005e90:	003fbd06 	br	8005d88 <__srefill_r+0x24>
 8005e94:	20000b1e 	bne	r4,zero,8005ec4 <__srefill_r+0x160>
 8005e98:	10800814 	ori	r2,r2,32
 8005e9c:	013fffc4 	movi	r4,-1
 8005ea0:	8080030d 	sth	r2,12(r16)
 8005ea4:	003fd906 	br	8005e0c <__srefill_r+0xa8>
 8005ea8:	008200b4 	movhi	r2,2050
 8005eac:	10a4c004 	addi	r2,r2,-27904
 8005eb0:	11000017 	ldw	r4,0(r2)
 8005eb4:	01420034 	movhi	r5,2048
 8005eb8:	2957ca04 	addi	r5,r5,24360
 8005ebc:	80051d80 	call	80051d8 <_fwalk>
 8005ec0:	003fc306 	br	8005dd0 <__srefill_r+0x6c>
 8005ec4:	10801014 	ori	r2,r2,64
 8005ec8:	013fffc4 	movi	r4,-1
 8005ecc:	8080030d 	sth	r2,12(r16)
 8005ed0:	80000115 	stw	zero,4(r16)
 8005ed4:	003fcd06 	br	8005e0c <__srefill_r+0xa8>
 8005ed8:	8809883a 	mov	r4,r17
 8005edc:	800b883a 	mov	r5,r16
 8005ee0:	800a7f80 	call	800a7f8 <__smakebuf_r>
 8005ee4:	003fb706 	br	8005dc4 <__srefill_r+0x60>
 8005ee8:	18c01014 	ori	r3,r3,64
 8005eec:	00800244 	movi	r2,9
 8005ef0:	013fffc4 	movi	r4,-1
 8005ef4:	88800015 	stw	r2,0(r17)
 8005ef8:	80c0030d 	sth	r3,12(r16)
 8005efc:	003fc306 	br	8005e0c <__srefill_r+0xa8>
 8005f00:	8809883a 	mov	r4,r17
 8005f04:	800b883a 	mov	r5,r16
 8005f08:	8009bb00 	call	8009bb0 <_fflush_r>
 8005f0c:	103fd81e 	bne	r2,zero,8005e70 <__srefill_r+0x10c>
 8005f10:	8080030b 	ldhu	r2,12(r16)
 8005f14:	80000215 	stw	zero,8(r16)
 8005f18:	80000615 	stw	zero,24(r16)
 8005f1c:	10bffdcc 	andi	r2,r2,65527
 8005f20:	8080030d 	sth	r2,12(r16)
 8005f24:	003fa206 	br	8005db0 <__srefill_r+0x4c>

08005f28 <lflush>:
 8005f28:	20c0030b 	ldhu	r3,12(r4)
 8005f2c:	01400244 	movi	r5,9
 8005f30:	0005883a 	mov	r2,zero
 8005f34:	18c0024c 	andi	r3,r3,9
 8005f38:	19400126 	beq	r3,r5,8005f40 <lflush+0x18>
 8005f3c:	f800283a 	ret
 8005f40:	8009dac1 	jmpi	8009dac <fflush>

08005f44 <_sbrk_r>:
 8005f44:	defffd04 	addi	sp,sp,-12
 8005f48:	dc000015 	stw	r16,0(sp)
 8005f4c:	040200b4 	movhi	r16,2050
 8005f50:	842b9404 	addi	r16,r16,-20912
 8005f54:	dc400115 	stw	r17,4(sp)
 8005f58:	80000015 	stw	zero,0(r16)
 8005f5c:	2023883a 	mov	r17,r4
 8005f60:	2809883a 	mov	r4,r5
 8005f64:	dfc00215 	stw	ra,8(sp)
 8005f68:	800f39c0 	call	800f39c <sbrk>
 8005f6c:	1007883a 	mov	r3,r2
 8005f70:	00bfffc4 	movi	r2,-1
 8005f74:	18800626 	beq	r3,r2,8005f90 <_sbrk_r+0x4c>
 8005f78:	1805883a 	mov	r2,r3
 8005f7c:	dfc00217 	ldw	ra,8(sp)
 8005f80:	dc400117 	ldw	r17,4(sp)
 8005f84:	dc000017 	ldw	r16,0(sp)
 8005f88:	dec00304 	addi	sp,sp,12
 8005f8c:	f800283a 	ret
 8005f90:	80800017 	ldw	r2,0(r16)
 8005f94:	103ff826 	beq	r2,zero,8005f78 <_sbrk_r+0x34>
 8005f98:	88800015 	stw	r2,0(r17)
 8005f9c:	1805883a 	mov	r2,r3
 8005fa0:	dfc00217 	ldw	ra,8(sp)
 8005fa4:	dc400117 	ldw	r17,4(sp)
 8005fa8:	dc000017 	ldw	r16,0(sp)
 8005fac:	dec00304 	addi	sp,sp,12
 8005fb0:	f800283a 	ret

08005fb4 <__sclose>:
 8005fb4:	2940038f 	ldh	r5,14(r5)
 8005fb8:	80082501 	jmpi	8008250 <_close_r>

08005fbc <__sseek>:
 8005fbc:	defffe04 	addi	sp,sp,-8
 8005fc0:	dc000015 	stw	r16,0(sp)
 8005fc4:	2821883a 	mov	r16,r5
 8005fc8:	2940038f 	ldh	r5,14(r5)
 8005fcc:	dfc00115 	stw	ra,4(sp)
 8005fd0:	800a7800 	call	800a780 <_lseek_r>
 8005fd4:	1007883a 	mov	r3,r2
 8005fd8:	00bfffc4 	movi	r2,-1
 8005fdc:	18800926 	beq	r3,r2,8006004 <__sseek+0x48>
 8005fe0:	8080030b 	ldhu	r2,12(r16)
 8005fe4:	80c01415 	stw	r3,80(r16)
 8005fe8:	10840014 	ori	r2,r2,4096
 8005fec:	8080030d 	sth	r2,12(r16)
 8005ff0:	1805883a 	mov	r2,r3
 8005ff4:	dfc00117 	ldw	ra,4(sp)
 8005ff8:	dc000017 	ldw	r16,0(sp)
 8005ffc:	dec00204 	addi	sp,sp,8
 8006000:	f800283a 	ret
 8006004:	8080030b 	ldhu	r2,12(r16)
 8006008:	10bbffcc 	andi	r2,r2,61439
 800600c:	8080030d 	sth	r2,12(r16)
 8006010:	1805883a 	mov	r2,r3
 8006014:	dfc00117 	ldw	ra,4(sp)
 8006018:	dc000017 	ldw	r16,0(sp)
 800601c:	dec00204 	addi	sp,sp,8
 8006020:	f800283a 	ret

08006024 <__swrite>:
 8006024:	2880030b 	ldhu	r2,12(r5)
 8006028:	defffb04 	addi	sp,sp,-20
 800602c:	dcc00315 	stw	r19,12(sp)
 8006030:	1080400c 	andi	r2,r2,256
 8006034:	dc800215 	stw	r18,8(sp)
 8006038:	dc400115 	stw	r17,4(sp)
 800603c:	dc000015 	stw	r16,0(sp)
 8006040:	3027883a 	mov	r19,r6
 8006044:	3825883a 	mov	r18,r7
 8006048:	dfc00415 	stw	ra,16(sp)
 800604c:	2821883a 	mov	r16,r5
 8006050:	000d883a 	mov	r6,zero
 8006054:	01c00084 	movi	r7,2
 8006058:	2023883a 	mov	r17,r4
 800605c:	10000226 	beq	r2,zero,8006068 <__swrite+0x44>
 8006060:	2940038f 	ldh	r5,14(r5)
 8006064:	800a7800 	call	800a780 <_lseek_r>
 8006068:	8080030b 	ldhu	r2,12(r16)
 800606c:	8140038f 	ldh	r5,14(r16)
 8006070:	8809883a 	mov	r4,r17
 8006074:	10bbffcc 	andi	r2,r2,61439
 8006078:	980d883a 	mov	r6,r19
 800607c:	900f883a 	mov	r7,r18
 8006080:	8080030d 	sth	r2,12(r16)
 8006084:	dfc00417 	ldw	ra,16(sp)
 8006088:	dcc00317 	ldw	r19,12(sp)
 800608c:	dc800217 	ldw	r18,8(sp)
 8006090:	dc400117 	ldw	r17,4(sp)
 8006094:	dc000017 	ldw	r16,0(sp)
 8006098:	dec00504 	addi	sp,sp,20
 800609c:	800809c1 	jmpi	800809c <_write_r>

080060a0 <__sread>:
 80060a0:	defffe04 	addi	sp,sp,-8
 80060a4:	dc000015 	stw	r16,0(sp)
 80060a8:	2821883a 	mov	r16,r5
 80060ac:	2940038f 	ldh	r5,14(r5)
 80060b0:	dfc00115 	stw	ra,4(sp)
 80060b4:	800bc4c0 	call	800bc4c <_read_r>
 80060b8:	1007883a 	mov	r3,r2
 80060bc:	10000816 	blt	r2,zero,80060e0 <__sread+0x40>
 80060c0:	80801417 	ldw	r2,80(r16)
 80060c4:	10c5883a 	add	r2,r2,r3
 80060c8:	80801415 	stw	r2,80(r16)
 80060cc:	1805883a 	mov	r2,r3
 80060d0:	dfc00117 	ldw	ra,4(sp)
 80060d4:	dc000017 	ldw	r16,0(sp)
 80060d8:	dec00204 	addi	sp,sp,8
 80060dc:	f800283a 	ret
 80060e0:	8080030b 	ldhu	r2,12(r16)
 80060e4:	10bbffcc 	andi	r2,r2,61439
 80060e8:	8080030d 	sth	r2,12(r16)
 80060ec:	1805883a 	mov	r2,r3
 80060f0:	dfc00117 	ldw	ra,4(sp)
 80060f4:	dc000017 	ldw	r16,0(sp)
 80060f8:	dec00204 	addi	sp,sp,8
 80060fc:	f800283a 	ret

08006100 <strlen>:
 8006100:	208000cc 	andi	r2,r4,3
 8006104:	2011883a 	mov	r8,r4
 8006108:	1000161e 	bne	r2,zero,8006164 <strlen+0x64>
 800610c:	20c00017 	ldw	r3,0(r4)
 8006110:	017fbff4 	movhi	r5,65279
 8006114:	297fbfc4 	addi	r5,r5,-257
 8006118:	01e02074 	movhi	r7,32897
 800611c:	39e02004 	addi	r7,r7,-32640
 8006120:	1945883a 	add	r2,r3,r5
 8006124:	11c4703a 	and	r2,r2,r7
 8006128:	00c6303a 	nor	r3,zero,r3
 800612c:	1886703a 	and	r3,r3,r2
 8006130:	18000c1e 	bne	r3,zero,8006164 <strlen+0x64>
 8006134:	280d883a 	mov	r6,r5
 8006138:	380b883a 	mov	r5,r7
 800613c:	21000104 	addi	r4,r4,4
 8006140:	20800017 	ldw	r2,0(r4)
 8006144:	1187883a 	add	r3,r2,r6
 8006148:	1946703a 	and	r3,r3,r5
 800614c:	0084303a 	nor	r2,zero,r2
 8006150:	10c4703a 	and	r2,r2,r3
 8006154:	103ff926 	beq	r2,zero,800613c <strlen+0x3c>
 8006158:	20800007 	ldb	r2,0(r4)
 800615c:	10000326 	beq	r2,zero,800616c <strlen+0x6c>
 8006160:	21000044 	addi	r4,r4,1
 8006164:	20800007 	ldb	r2,0(r4)
 8006168:	103ffd1e 	bne	r2,zero,8006160 <strlen+0x60>
 800616c:	2205c83a 	sub	r2,r4,r8
 8006170:	f800283a 	ret

08006174 <__sprint_r>:
 8006174:	30800217 	ldw	r2,8(r6)
 8006178:	defffe04 	addi	sp,sp,-8
 800617c:	dc000015 	stw	r16,0(sp)
 8006180:	dfc00115 	stw	ra,4(sp)
 8006184:	3021883a 	mov	r16,r6
 8006188:	0007883a 	mov	r3,zero
 800618c:	1000061e 	bne	r2,zero,80061a8 <__sprint_r+0x34>
 8006190:	1805883a 	mov	r2,r3
 8006194:	30000115 	stw	zero,4(r6)
 8006198:	dfc00117 	ldw	ra,4(sp)
 800619c:	dc000017 	ldw	r16,0(sp)
 80061a0:	dec00204 	addi	sp,sp,8
 80061a4:	f800283a 	ret
 80061a8:	800a2200 	call	800a220 <__sfvwrite_r>
 80061ac:	1007883a 	mov	r3,r2
 80061b0:	1805883a 	mov	r2,r3
 80061b4:	80000115 	stw	zero,4(r16)
 80061b8:	80000215 	stw	zero,8(r16)
 80061bc:	dfc00117 	ldw	ra,4(sp)
 80061c0:	dc000017 	ldw	r16,0(sp)
 80061c4:	dec00204 	addi	sp,sp,8
 80061c8:	f800283a 	ret

080061cc <___vfprintf_internal_r>:
 80061cc:	defea404 	addi	sp,sp,-1392
 80061d0:	dd815815 	stw	r22,1376(sp)
 80061d4:	dc015215 	stw	r16,1352(sp)
 80061d8:	d9c15115 	stw	r7,1348(sp)
 80061dc:	dfc15b15 	stw	ra,1388(sp)
 80061e0:	df015a15 	stw	fp,1384(sp)
 80061e4:	ddc15915 	stw	r23,1380(sp)
 80061e8:	dd415715 	stw	r21,1372(sp)
 80061ec:	dd015615 	stw	r20,1368(sp)
 80061f0:	dcc15515 	stw	r19,1364(sp)
 80061f4:	dc815415 	stw	r18,1360(sp)
 80061f8:	dc415315 	stw	r17,1356(sp)
 80061fc:	282d883a 	mov	r22,r5
 8006200:	3021883a 	mov	r16,r6
 8006204:	d9014f15 	stw	r4,1340(sp)
 8006208:	800a6c40 	call	800a6c4 <_localeconv_r>
 800620c:	10800017 	ldw	r2,0(r2)
 8006210:	d9c15117 	ldw	r7,1348(sp)
 8006214:	d8814915 	stw	r2,1316(sp)
 8006218:	d8814f17 	ldw	r2,1340(sp)
 800621c:	10000226 	beq	r2,zero,8006228 <___vfprintf_internal_r+0x5c>
 8006220:	10800e17 	ldw	r2,56(r2)
 8006224:	10020d26 	beq	r2,zero,8006a5c <___vfprintf_internal_r+0x890>
 8006228:	b080030b 	ldhu	r2,12(r22)
 800622c:	1080020c 	andi	r2,r2,8
 8006230:	10020e26 	beq	r2,zero,8006a6c <___vfprintf_internal_r+0x8a0>
 8006234:	b0800417 	ldw	r2,16(r22)
 8006238:	10020c26 	beq	r2,zero,8006a6c <___vfprintf_internal_r+0x8a0>
 800623c:	b200030b 	ldhu	r8,12(r22)
 8006240:	00800284 	movi	r2,10
 8006244:	40c0068c 	andi	r3,r8,26
 8006248:	18802f1e 	bne	r3,r2,8006308 <___vfprintf_internal_r+0x13c>
 800624c:	b080038f 	ldh	r2,14(r22)
 8006250:	10002d16 	blt	r2,zero,8006308 <___vfprintf_internal_r+0x13c>
 8006254:	b240038b 	ldhu	r9,14(r22)
 8006258:	b2800717 	ldw	r10,28(r22)
 800625c:	b2c00917 	ldw	r11,36(r22)
 8006260:	d9014f17 	ldw	r4,1340(sp)
 8006264:	dc402904 	addi	r17,sp,164
 8006268:	d8804004 	addi	r2,sp,256
 800626c:	00c10004 	movi	r3,1024
 8006270:	423fff4c 	andi	r8,r8,65533
 8006274:	800d883a 	mov	r6,r16
 8006278:	880b883a 	mov	r5,r17
 800627c:	da002c0d 	sth	r8,176(sp)
 8006280:	da402c8d 	sth	r9,178(sp)
 8006284:	da803015 	stw	r10,192(sp)
 8006288:	dac03215 	stw	r11,200(sp)
 800628c:	d8802d15 	stw	r2,180(sp)
 8006290:	d8c02e15 	stw	r3,184(sp)
 8006294:	d8802915 	stw	r2,164(sp)
 8006298:	d8c02b15 	stw	r3,172(sp)
 800629c:	d8002f15 	stw	zero,188(sp)
 80062a0:	80061cc0 	call	80061cc <___vfprintf_internal_r>
 80062a4:	d8814b15 	stw	r2,1324(sp)
 80062a8:	10000416 	blt	r2,zero,80062bc <___vfprintf_internal_r+0xf0>
 80062ac:	d9014f17 	ldw	r4,1340(sp)
 80062b0:	880b883a 	mov	r5,r17
 80062b4:	8009bb00 	call	8009bb0 <_fflush_r>
 80062b8:	1002321e 	bne	r2,zero,8006b84 <___vfprintf_internal_r+0x9b8>
 80062bc:	d8802c0b 	ldhu	r2,176(sp)
 80062c0:	1080100c 	andi	r2,r2,64
 80062c4:	10000326 	beq	r2,zero,80062d4 <___vfprintf_internal_r+0x108>
 80062c8:	b080030b 	ldhu	r2,12(r22)
 80062cc:	10801014 	ori	r2,r2,64
 80062d0:	b080030d 	sth	r2,12(r22)
 80062d4:	d8814b17 	ldw	r2,1324(sp)
 80062d8:	dfc15b17 	ldw	ra,1388(sp)
 80062dc:	df015a17 	ldw	fp,1384(sp)
 80062e0:	ddc15917 	ldw	r23,1380(sp)
 80062e4:	dd815817 	ldw	r22,1376(sp)
 80062e8:	dd415717 	ldw	r21,1372(sp)
 80062ec:	dd015617 	ldw	r20,1368(sp)
 80062f0:	dcc15517 	ldw	r19,1364(sp)
 80062f4:	dc815417 	ldw	r18,1360(sp)
 80062f8:	dc415317 	ldw	r17,1356(sp)
 80062fc:	dc015217 	ldw	r16,1352(sp)
 8006300:	dec15c04 	addi	sp,sp,1392
 8006304:	f800283a 	ret
 8006308:	0005883a 	mov	r2,zero
 800630c:	0007883a 	mov	r3,zero
 8006310:	dd401904 	addi	r21,sp,100
 8006314:	d8814215 	stw	r2,1288(sp)
 8006318:	802f883a 	mov	r23,r16
 800631c:	d8c14315 	stw	r3,1292(sp)
 8006320:	d8014b15 	stw	zero,1324(sp)
 8006324:	d8014815 	stw	zero,1312(sp)
 8006328:	d8014415 	stw	zero,1296(sp)
 800632c:	d8014715 	stw	zero,1308(sp)
 8006330:	dd400c15 	stw	r21,48(sp)
 8006334:	d8000e15 	stw	zero,56(sp)
 8006338:	d8000d15 	stw	zero,52(sp)
 800633c:	b8800007 	ldb	r2,0(r23)
 8006340:	10001926 	beq	r2,zero,80063a8 <___vfprintf_internal_r+0x1dc>
 8006344:	00c00944 	movi	r3,37
 8006348:	10c01726 	beq	r2,r3,80063a8 <___vfprintf_internal_r+0x1dc>
 800634c:	b821883a 	mov	r16,r23
 8006350:	00000106 	br	8006358 <___vfprintf_internal_r+0x18c>
 8006354:	10c00326 	beq	r2,r3,8006364 <___vfprintf_internal_r+0x198>
 8006358:	84000044 	addi	r16,r16,1
 800635c:	80800007 	ldb	r2,0(r16)
 8006360:	103ffc1e 	bne	r2,zero,8006354 <___vfprintf_internal_r+0x188>
 8006364:	85e7c83a 	sub	r19,r16,r23
 8006368:	98000e26 	beq	r19,zero,80063a4 <___vfprintf_internal_r+0x1d8>
 800636c:	dc800e17 	ldw	r18,56(sp)
 8006370:	dc400d17 	ldw	r17,52(sp)
 8006374:	008001c4 	movi	r2,7
 8006378:	94e5883a 	add	r18,r18,r19
 800637c:	8c400044 	addi	r17,r17,1
 8006380:	adc00015 	stw	r23,0(r21)
 8006384:	dc800e15 	stw	r18,56(sp)
 8006388:	acc00115 	stw	r19,4(r21)
 800638c:	dc400d15 	stw	r17,52(sp)
 8006390:	14428b16 	blt	r2,r17,8006dc0 <___vfprintf_internal_r+0xbf4>
 8006394:	ad400204 	addi	r21,r21,8
 8006398:	d9014b17 	ldw	r4,1324(sp)
 800639c:	24c9883a 	add	r4,r4,r19
 80063a0:	d9014b15 	stw	r4,1324(sp)
 80063a4:	802f883a 	mov	r23,r16
 80063a8:	b8800007 	ldb	r2,0(r23)
 80063ac:	10013c26 	beq	r2,zero,80068a0 <___vfprintf_internal_r+0x6d4>
 80063b0:	bdc00044 	addi	r23,r23,1
 80063b4:	d8000405 	stb	zero,16(sp)
 80063b8:	b8c00007 	ldb	r3,0(r23)
 80063bc:	04ffffc4 	movi	r19,-1
 80063c0:	d8014c15 	stw	zero,1328(sp)
 80063c4:	d8014a15 	stw	zero,1320(sp)
 80063c8:	d8c14d15 	stw	r3,1332(sp)
 80063cc:	bdc00044 	addi	r23,r23,1
 80063d0:	d9414d17 	ldw	r5,1332(sp)
 80063d4:	00801604 	movi	r2,88
 80063d8:	28fff804 	addi	r3,r5,-32
 80063dc:	10c06036 	bltu	r2,r3,8006560 <___vfprintf_internal_r+0x394>
 80063e0:	18c5883a 	add	r2,r3,r3
 80063e4:	1085883a 	add	r2,r2,r2
 80063e8:	00c20034 	movhi	r3,2048
 80063ec:	18d8ff04 	addi	r3,r3,25596
 80063f0:	10c5883a 	add	r2,r2,r3
 80063f4:	11000017 	ldw	r4,0(r2)
 80063f8:	2000683a 	jmp	r4
 80063fc:	08007370 	cmpltui	zero,at,461
 8006400:	08006560 	cmpeqi	zero,at,405
 8006404:	08006560 	cmpeqi	zero,at,405
 8006408:	0800735c 	xori	zero,at,461
 800640c:	08006560 	cmpeqi	zero,at,405
 8006410:	08006560 	cmpeqi	zero,at,405
 8006414:	08006560 	cmpeqi	zero,at,405
 8006418:	08006560 	cmpeqi	zero,at,405
 800641c:	08006560 	cmpeqi	zero,at,405
 8006420:	08006560 	cmpeqi	zero,at,405
 8006424:	0800713c 	xorhi	zero,at,452
 8006428:	0800734c 	andi	zero,at,461
 800642c:	08006560 	cmpeqi	zero,at,405
 8006430:	08007154 	ori	zero,at,453
 8006434:	080073e8 	cmpgeui	zero,at,463
 8006438:	08006560 	cmpeqi	zero,at,405
 800643c:	080073d4 	ori	zero,at,463
 8006440:	0800739c 	xori	zero,at,462
 8006444:	0800739c 	xori	zero,at,462
 8006448:	0800739c 	xori	zero,at,462
 800644c:	0800739c 	xori	zero,at,462
 8006450:	0800739c 	xori	zero,at,462
 8006454:	0800739c 	xori	zero,at,462
 8006458:	0800739c 	xori	zero,at,462
 800645c:	0800739c 	xori	zero,at,462
 8006460:	0800739c 	xori	zero,at,462
 8006464:	08006560 	cmpeqi	zero,at,405
 8006468:	08006560 	cmpeqi	zero,at,405
 800646c:	08006560 	cmpeqi	zero,at,405
 8006470:	08006560 	cmpeqi	zero,at,405
 8006474:	08006560 	cmpeqi	zero,at,405
 8006478:	08006560 	cmpeqi	zero,at,405
 800647c:	08006560 	cmpeqi	zero,at,405
 8006480:	08006560 	cmpeqi	zero,at,405
 8006484:	08006560 	cmpeqi	zero,at,405
 8006488:	08006560 	cmpeqi	zero,at,405
 800648c:	08006bb8 	rdprs	zero,at,430
 8006490:	08007224 	muli	zero,at,456
 8006494:	08006560 	cmpeqi	zero,at,405
 8006498:	08007224 	muli	zero,at,456
 800649c:	08006560 	cmpeqi	zero,at,405
 80064a0:	08006560 	cmpeqi	zero,at,405
 80064a4:	08006560 	cmpeqi	zero,at,405
 80064a8:	08006560 	cmpeqi	zero,at,405
 80064ac:	08007388 	cmpgei	zero,at,462
 80064b0:	08006560 	cmpeqi	zero,at,405
 80064b4:	08006560 	cmpeqi	zero,at,405
 80064b8:	08006c6c 	andhi	zero,at,433
 80064bc:	08006560 	cmpeqi	zero,at,405
 80064c0:	08006560 	cmpeqi	zero,at,405
 80064c4:	08006560 	cmpeqi	zero,at,405
 80064c8:	08006560 	cmpeqi	zero,at,405
 80064cc:	08006560 	cmpeqi	zero,at,405
 80064d0:	08006cb8 	rdprs	zero,at,434
 80064d4:	08006560 	cmpeqi	zero,at,405
 80064d8:	08006560 	cmpeqi	zero,at,405
 80064dc:	080072d8 	cmpnei	zero,at,459
 80064e0:	08006560 	cmpeqi	zero,at,405
 80064e4:	08006560 	cmpeqi	zero,at,405
 80064e8:	08006560 	cmpeqi	zero,at,405
 80064ec:	08006560 	cmpeqi	zero,at,405
 80064f0:	08006560 	cmpeqi	zero,at,405
 80064f4:	08006560 	cmpeqi	zero,at,405
 80064f8:	08006560 	cmpeqi	zero,at,405
 80064fc:	08006560 	cmpeqi	zero,at,405
 8006500:	08006560 	cmpeqi	zero,at,405
 8006504:	08006560 	cmpeqi	zero,at,405
 8006508:	080072ac 	andhi	zero,at,458
 800650c:	08006bc4 	addi	zero,at,431
 8006510:	08007224 	muli	zero,at,456
 8006514:	08007224 	muli	zero,at,456
 8006518:	08007224 	muli	zero,at,456
 800651c:	08007210 	cmplti	zero,at,456
 8006520:	08006bc4 	addi	zero,at,431
 8006524:	08006560 	cmpeqi	zero,at,405
 8006528:	08006560 	cmpeqi	zero,at,405
 800652c:	08007198 	cmpnei	zero,at,454
 8006530:	08006560 	cmpeqi	zero,at,405
 8006534:	08007168 	cmpgeui	zero,at,453
 8006538:	08006c78 	rdprs	zero,at,433
 800653c:	080071c8 	cmpgei	zero,at,455
 8006540:	080071b4 	orhi	zero,at,454
 8006544:	08006560 	cmpeqi	zero,at,405
 8006548:	08007444 	addi	zero,at,465
 800654c:	08006560 	cmpeqi	zero,at,405
 8006550:	08006cc4 	addi	zero,at,435
 8006554:	08006560 	cmpeqi	zero,at,405
 8006558:	08006560 	cmpeqi	zero,at,405
 800655c:	0800733c 	xorhi	zero,at,460
 8006560:	d9014d17 	ldw	r4,1332(sp)
 8006564:	2000ce26 	beq	r4,zero,80068a0 <___vfprintf_internal_r+0x6d4>
 8006568:	01400044 	movi	r5,1
 800656c:	d9800f04 	addi	r6,sp,60
 8006570:	d9c14015 	stw	r7,1280(sp)
 8006574:	d9414515 	stw	r5,1300(sp)
 8006578:	d9814115 	stw	r6,1284(sp)
 800657c:	280f883a 	mov	r7,r5
 8006580:	d9000f05 	stb	r4,60(sp)
 8006584:	d8000405 	stb	zero,16(sp)
 8006588:	d8014615 	stw	zero,1304(sp)
 800658c:	d8c14c17 	ldw	r3,1328(sp)
 8006590:	1880008c 	andi	r2,r3,2
 8006594:	1005003a 	cmpeq	r2,r2,zero
 8006598:	d8815015 	stw	r2,1344(sp)
 800659c:	1000031e 	bne	r2,zero,80065ac <___vfprintf_internal_r+0x3e0>
 80065a0:	d9014517 	ldw	r4,1300(sp)
 80065a4:	21000084 	addi	r4,r4,2
 80065a8:	d9014515 	stw	r4,1300(sp)
 80065ac:	d9414c17 	ldw	r5,1328(sp)
 80065b0:	2940210c 	andi	r5,r5,132
 80065b4:	d9414e15 	stw	r5,1336(sp)
 80065b8:	28002d1e 	bne	r5,zero,8006670 <___vfprintf_internal_r+0x4a4>
 80065bc:	d9814a17 	ldw	r6,1320(sp)
 80065c0:	d8814517 	ldw	r2,1300(sp)
 80065c4:	30a1c83a 	sub	r16,r6,r2
 80065c8:	0400290e 	bge	zero,r16,8006670 <___vfprintf_internal_r+0x4a4>
 80065cc:	00800404 	movi	r2,16
 80065d0:	1404580e 	bge	r2,r16,8007734 <___vfprintf_internal_r+0x1568>
 80065d4:	dc800e17 	ldw	r18,56(sp)
 80065d8:	dc400d17 	ldw	r17,52(sp)
 80065dc:	1027883a 	mov	r19,r2
 80065e0:	07020074 	movhi	fp,2049
 80065e4:	e71d5584 	addi	fp,fp,30038
 80065e8:	050001c4 	movi	r20,7
 80065ec:	00000306 	br	80065fc <___vfprintf_internal_r+0x430>
 80065f0:	843ffc04 	addi	r16,r16,-16
 80065f4:	ad400204 	addi	r21,r21,8
 80065f8:	9c00130e 	bge	r19,r16,8006648 <___vfprintf_internal_r+0x47c>
 80065fc:	94800404 	addi	r18,r18,16
 8006600:	8c400044 	addi	r17,r17,1
 8006604:	af000015 	stw	fp,0(r21)
 8006608:	acc00115 	stw	r19,4(r21)
 800660c:	dc800e15 	stw	r18,56(sp)
 8006610:	dc400d15 	stw	r17,52(sp)
 8006614:	a47ff60e 	bge	r20,r17,80065f0 <___vfprintf_internal_r+0x424>
 8006618:	d9014f17 	ldw	r4,1340(sp)
 800661c:	b00b883a 	mov	r5,r22
 8006620:	d9800c04 	addi	r6,sp,48
 8006624:	d9c15115 	stw	r7,1348(sp)
 8006628:	80061740 	call	8006174 <__sprint_r>
 800662c:	d9c15117 	ldw	r7,1348(sp)
 8006630:	10009e1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006634:	843ffc04 	addi	r16,r16,-16
 8006638:	dc800e17 	ldw	r18,56(sp)
 800663c:	dc400d17 	ldw	r17,52(sp)
 8006640:	dd401904 	addi	r21,sp,100
 8006644:	9c3fed16 	blt	r19,r16,80065fc <___vfprintf_internal_r+0x430>
 8006648:	9425883a 	add	r18,r18,r16
 800664c:	8c400044 	addi	r17,r17,1
 8006650:	008001c4 	movi	r2,7
 8006654:	af000015 	stw	fp,0(r21)
 8006658:	ac000115 	stw	r16,4(r21)
 800665c:	dc800e15 	stw	r18,56(sp)
 8006660:	dc400d15 	stw	r17,52(sp)
 8006664:	1441f516 	blt	r2,r17,8006e3c <___vfprintf_internal_r+0xc70>
 8006668:	ad400204 	addi	r21,r21,8
 800666c:	00000206 	br	8006678 <___vfprintf_internal_r+0x4ac>
 8006670:	dc800e17 	ldw	r18,56(sp)
 8006674:	dc400d17 	ldw	r17,52(sp)
 8006678:	d8800407 	ldb	r2,16(sp)
 800667c:	10000b26 	beq	r2,zero,80066ac <___vfprintf_internal_r+0x4e0>
 8006680:	00800044 	movi	r2,1
 8006684:	94800044 	addi	r18,r18,1
 8006688:	8c400044 	addi	r17,r17,1
 800668c:	a8800115 	stw	r2,4(r21)
 8006690:	d8c00404 	addi	r3,sp,16
 8006694:	008001c4 	movi	r2,7
 8006698:	a8c00015 	stw	r3,0(r21)
 800669c:	dc800e15 	stw	r18,56(sp)
 80066a0:	dc400d15 	stw	r17,52(sp)
 80066a4:	1441da16 	blt	r2,r17,8006e10 <___vfprintf_internal_r+0xc44>
 80066a8:	ad400204 	addi	r21,r21,8
 80066ac:	d9015017 	ldw	r4,1344(sp)
 80066b0:	20000b1e 	bne	r4,zero,80066e0 <___vfprintf_internal_r+0x514>
 80066b4:	d8800444 	addi	r2,sp,17
 80066b8:	94800084 	addi	r18,r18,2
 80066bc:	8c400044 	addi	r17,r17,1
 80066c0:	a8800015 	stw	r2,0(r21)
 80066c4:	00c00084 	movi	r3,2
 80066c8:	008001c4 	movi	r2,7
 80066cc:	a8c00115 	stw	r3,4(r21)
 80066d0:	dc800e15 	stw	r18,56(sp)
 80066d4:	dc400d15 	stw	r17,52(sp)
 80066d8:	1441c216 	blt	r2,r17,8006de4 <___vfprintf_internal_r+0xc18>
 80066dc:	ad400204 	addi	r21,r21,8
 80066e0:	d9414e17 	ldw	r5,1336(sp)
 80066e4:	00802004 	movi	r2,128
 80066e8:	2880b126 	beq	r5,r2,80069b0 <___vfprintf_internal_r+0x7e4>
 80066ec:	d8c14617 	ldw	r3,1304(sp)
 80066f0:	19e1c83a 	sub	r16,r3,r7
 80066f4:	0400260e 	bge	zero,r16,8006790 <___vfprintf_internal_r+0x5c4>
 80066f8:	00800404 	movi	r2,16
 80066fc:	1403c90e 	bge	r2,r16,8007624 <___vfprintf_internal_r+0x1458>
 8006700:	1027883a 	mov	r19,r2
 8006704:	07020074 	movhi	fp,2049
 8006708:	e71d5184 	addi	fp,fp,30022
 800670c:	050001c4 	movi	r20,7
 8006710:	00000306 	br	8006720 <___vfprintf_internal_r+0x554>
 8006714:	843ffc04 	addi	r16,r16,-16
 8006718:	ad400204 	addi	r21,r21,8
 800671c:	9c00130e 	bge	r19,r16,800676c <___vfprintf_internal_r+0x5a0>
 8006720:	94800404 	addi	r18,r18,16
 8006724:	8c400044 	addi	r17,r17,1
 8006728:	af000015 	stw	fp,0(r21)
 800672c:	acc00115 	stw	r19,4(r21)
 8006730:	dc800e15 	stw	r18,56(sp)
 8006734:	dc400d15 	stw	r17,52(sp)
 8006738:	a47ff60e 	bge	r20,r17,8006714 <___vfprintf_internal_r+0x548>
 800673c:	d9014f17 	ldw	r4,1340(sp)
 8006740:	b00b883a 	mov	r5,r22
 8006744:	d9800c04 	addi	r6,sp,48
 8006748:	d9c15115 	stw	r7,1348(sp)
 800674c:	80061740 	call	8006174 <__sprint_r>
 8006750:	d9c15117 	ldw	r7,1348(sp)
 8006754:	1000551e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006758:	843ffc04 	addi	r16,r16,-16
 800675c:	dc800e17 	ldw	r18,56(sp)
 8006760:	dc400d17 	ldw	r17,52(sp)
 8006764:	dd401904 	addi	r21,sp,100
 8006768:	9c3fed16 	blt	r19,r16,8006720 <___vfprintf_internal_r+0x554>
 800676c:	9425883a 	add	r18,r18,r16
 8006770:	8c400044 	addi	r17,r17,1
 8006774:	008001c4 	movi	r2,7
 8006778:	af000015 	stw	fp,0(r21)
 800677c:	ac000115 	stw	r16,4(r21)
 8006780:	dc800e15 	stw	r18,56(sp)
 8006784:	dc400d15 	stw	r17,52(sp)
 8006788:	14418216 	blt	r2,r17,8006d94 <___vfprintf_internal_r+0xbc8>
 800678c:	ad400204 	addi	r21,r21,8
 8006790:	d9014c17 	ldw	r4,1328(sp)
 8006794:	2080400c 	andi	r2,r4,256
 8006798:	10004a1e 	bne	r2,zero,80068c4 <___vfprintf_internal_r+0x6f8>
 800679c:	d9414117 	ldw	r5,1284(sp)
 80067a0:	91e5883a 	add	r18,r18,r7
 80067a4:	8c400044 	addi	r17,r17,1
 80067a8:	008001c4 	movi	r2,7
 80067ac:	a9400015 	stw	r5,0(r21)
 80067b0:	a9c00115 	stw	r7,4(r21)
 80067b4:	dc800e15 	stw	r18,56(sp)
 80067b8:	dc400d15 	stw	r17,52(sp)
 80067bc:	14416716 	blt	r2,r17,8006d5c <___vfprintf_internal_r+0xb90>
 80067c0:	a8c00204 	addi	r3,r21,8
 80067c4:	d9814c17 	ldw	r6,1328(sp)
 80067c8:	3080010c 	andi	r2,r6,4
 80067cc:	10002826 	beq	r2,zero,8006870 <___vfprintf_internal_r+0x6a4>
 80067d0:	d8814a17 	ldw	r2,1320(sp)
 80067d4:	d9014517 	ldw	r4,1300(sp)
 80067d8:	1121c83a 	sub	r16,r2,r4
 80067dc:	0400240e 	bge	zero,r16,8006870 <___vfprintf_internal_r+0x6a4>
 80067e0:	00800404 	movi	r2,16
 80067e4:	14044f0e 	bge	r2,r16,8007924 <___vfprintf_internal_r+0x1758>
 80067e8:	dc400d17 	ldw	r17,52(sp)
 80067ec:	1027883a 	mov	r19,r2
 80067f0:	07020074 	movhi	fp,2049
 80067f4:	e71d5584 	addi	fp,fp,30038
 80067f8:	050001c4 	movi	r20,7
 80067fc:	00000306 	br	800680c <___vfprintf_internal_r+0x640>
 8006800:	843ffc04 	addi	r16,r16,-16
 8006804:	18c00204 	addi	r3,r3,8
 8006808:	9c00110e 	bge	r19,r16,8006850 <___vfprintf_internal_r+0x684>
 800680c:	94800404 	addi	r18,r18,16
 8006810:	8c400044 	addi	r17,r17,1
 8006814:	1f000015 	stw	fp,0(r3)
 8006818:	1cc00115 	stw	r19,4(r3)
 800681c:	dc800e15 	stw	r18,56(sp)
 8006820:	dc400d15 	stw	r17,52(sp)
 8006824:	a47ff60e 	bge	r20,r17,8006800 <___vfprintf_internal_r+0x634>
 8006828:	d9014f17 	ldw	r4,1340(sp)
 800682c:	b00b883a 	mov	r5,r22
 8006830:	d9800c04 	addi	r6,sp,48
 8006834:	80061740 	call	8006174 <__sprint_r>
 8006838:	10001c1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 800683c:	843ffc04 	addi	r16,r16,-16
 8006840:	dc800e17 	ldw	r18,56(sp)
 8006844:	dc400d17 	ldw	r17,52(sp)
 8006848:	d8c01904 	addi	r3,sp,100
 800684c:	9c3fef16 	blt	r19,r16,800680c <___vfprintf_internal_r+0x640>
 8006850:	9425883a 	add	r18,r18,r16
 8006854:	8c400044 	addi	r17,r17,1
 8006858:	008001c4 	movi	r2,7
 800685c:	1f000015 	stw	fp,0(r3)
 8006860:	1c000115 	stw	r16,4(r3)
 8006864:	dc800e15 	stw	r18,56(sp)
 8006868:	dc400d15 	stw	r17,52(sp)
 800686c:	1440cb16 	blt	r2,r17,8006b9c <___vfprintf_internal_r+0x9d0>
 8006870:	d8814a17 	ldw	r2,1320(sp)
 8006874:	d9414517 	ldw	r5,1300(sp)
 8006878:	1140010e 	bge	r2,r5,8006880 <___vfprintf_internal_r+0x6b4>
 800687c:	2805883a 	mov	r2,r5
 8006880:	d9814b17 	ldw	r6,1324(sp)
 8006884:	308d883a 	add	r6,r6,r2
 8006888:	d9814b15 	stw	r6,1324(sp)
 800688c:	90013b1e 	bne	r18,zero,8006d7c <___vfprintf_internal_r+0xbb0>
 8006890:	d9c14017 	ldw	r7,1280(sp)
 8006894:	dd401904 	addi	r21,sp,100
 8006898:	d8000d15 	stw	zero,52(sp)
 800689c:	003ea706 	br	800633c <___vfprintf_internal_r+0x170>
 80068a0:	d8800e17 	ldw	r2,56(sp)
 80068a4:	10053f1e 	bne	r2,zero,8007da4 <___vfprintf_internal_r+0x1bd8>
 80068a8:	d8000d15 	stw	zero,52(sp)
 80068ac:	b080030b 	ldhu	r2,12(r22)
 80068b0:	1080100c 	andi	r2,r2,64
 80068b4:	103e8726 	beq	r2,zero,80062d4 <___vfprintf_internal_r+0x108>
 80068b8:	00bfffc4 	movi	r2,-1
 80068bc:	d8814b15 	stw	r2,1324(sp)
 80068c0:	003e8406 	br	80062d4 <___vfprintf_internal_r+0x108>
 80068c4:	d9814d17 	ldw	r6,1332(sp)
 80068c8:	00801944 	movi	r2,101
 80068cc:	11806e16 	blt	r2,r6,8006a88 <___vfprintf_internal_r+0x8bc>
 80068d0:	d9414717 	ldw	r5,1308(sp)
 80068d4:	00c00044 	movi	r3,1
 80068d8:	1943430e 	bge	r3,r5,80075e8 <___vfprintf_internal_r+0x141c>
 80068dc:	d8814117 	ldw	r2,1284(sp)
 80068e0:	94800044 	addi	r18,r18,1
 80068e4:	8c400044 	addi	r17,r17,1
 80068e8:	a8800015 	stw	r2,0(r21)
 80068ec:	008001c4 	movi	r2,7
 80068f0:	a8c00115 	stw	r3,4(r21)
 80068f4:	dc800e15 	stw	r18,56(sp)
 80068f8:	dc400d15 	stw	r17,52(sp)
 80068fc:	1441ca16 	blt	r2,r17,8007028 <___vfprintf_internal_r+0xe5c>
 8006900:	a8c00204 	addi	r3,r21,8
 8006904:	d9014917 	ldw	r4,1316(sp)
 8006908:	00800044 	movi	r2,1
 800690c:	94800044 	addi	r18,r18,1
 8006910:	8c400044 	addi	r17,r17,1
 8006914:	18800115 	stw	r2,4(r3)
 8006918:	008001c4 	movi	r2,7
 800691c:	19000015 	stw	r4,0(r3)
 8006920:	dc800e15 	stw	r18,56(sp)
 8006924:	dc400d15 	stw	r17,52(sp)
 8006928:	1441b616 	blt	r2,r17,8007004 <___vfprintf_internal_r+0xe38>
 800692c:	1cc00204 	addi	r19,r3,8
 8006930:	d9014217 	ldw	r4,1288(sp)
 8006934:	d9414317 	ldw	r5,1292(sp)
 8006938:	000d883a 	mov	r6,zero
 800693c:	000f883a 	mov	r7,zero
 8006940:	800ddfc0 	call	800ddfc <__nedf2>
 8006944:	10017426 	beq	r2,zero,8006f18 <___vfprintf_internal_r+0xd4c>
 8006948:	d9414717 	ldw	r5,1308(sp)
 800694c:	d9814117 	ldw	r6,1284(sp)
 8006950:	8c400044 	addi	r17,r17,1
 8006954:	2c85883a 	add	r2,r5,r18
 8006958:	14bfffc4 	addi	r18,r2,-1
 800695c:	28bfffc4 	addi	r2,r5,-1
 8006960:	30c00044 	addi	r3,r6,1
 8006964:	98800115 	stw	r2,4(r19)
 8006968:	008001c4 	movi	r2,7
 800696c:	98c00015 	stw	r3,0(r19)
 8006970:	dc800e15 	stw	r18,56(sp)
 8006974:	dc400d15 	stw	r17,52(sp)
 8006978:	14418e16 	blt	r2,r17,8006fb4 <___vfprintf_internal_r+0xde8>
 800697c:	9cc00204 	addi	r19,r19,8
 8006980:	d9414817 	ldw	r5,1312(sp)
 8006984:	d8800804 	addi	r2,sp,32
 8006988:	8c400044 	addi	r17,r17,1
 800698c:	9165883a 	add	r18,r18,r5
 8006990:	98800015 	stw	r2,0(r19)
 8006994:	008001c4 	movi	r2,7
 8006998:	99400115 	stw	r5,4(r19)
 800699c:	dc800e15 	stw	r18,56(sp)
 80069a0:	dc400d15 	stw	r17,52(sp)
 80069a4:	1440ed16 	blt	r2,r17,8006d5c <___vfprintf_internal_r+0xb90>
 80069a8:	98c00204 	addi	r3,r19,8
 80069ac:	003f8506 	br	80067c4 <___vfprintf_internal_r+0x5f8>
 80069b0:	d9814a17 	ldw	r6,1320(sp)
 80069b4:	d8814517 	ldw	r2,1300(sp)
 80069b8:	30a1c83a 	sub	r16,r6,r2
 80069bc:	043f4b0e 	bge	zero,r16,80066ec <___vfprintf_internal_r+0x520>
 80069c0:	00800404 	movi	r2,16
 80069c4:	1404340e 	bge	r2,r16,8007a98 <___vfprintf_internal_r+0x18cc>
 80069c8:	1027883a 	mov	r19,r2
 80069cc:	07020074 	movhi	fp,2049
 80069d0:	e71d5184 	addi	fp,fp,30022
 80069d4:	050001c4 	movi	r20,7
 80069d8:	00000306 	br	80069e8 <___vfprintf_internal_r+0x81c>
 80069dc:	843ffc04 	addi	r16,r16,-16
 80069e0:	ad400204 	addi	r21,r21,8
 80069e4:	9c00130e 	bge	r19,r16,8006a34 <___vfprintf_internal_r+0x868>
 80069e8:	94800404 	addi	r18,r18,16
 80069ec:	8c400044 	addi	r17,r17,1
 80069f0:	af000015 	stw	fp,0(r21)
 80069f4:	acc00115 	stw	r19,4(r21)
 80069f8:	dc800e15 	stw	r18,56(sp)
 80069fc:	dc400d15 	stw	r17,52(sp)
 8006a00:	a47ff60e 	bge	r20,r17,80069dc <___vfprintf_internal_r+0x810>
 8006a04:	d9014f17 	ldw	r4,1340(sp)
 8006a08:	b00b883a 	mov	r5,r22
 8006a0c:	d9800c04 	addi	r6,sp,48
 8006a10:	d9c15115 	stw	r7,1348(sp)
 8006a14:	80061740 	call	8006174 <__sprint_r>
 8006a18:	d9c15117 	ldw	r7,1348(sp)
 8006a1c:	103fa31e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006a20:	843ffc04 	addi	r16,r16,-16
 8006a24:	dc800e17 	ldw	r18,56(sp)
 8006a28:	dc400d17 	ldw	r17,52(sp)
 8006a2c:	dd401904 	addi	r21,sp,100
 8006a30:	9c3fed16 	blt	r19,r16,80069e8 <___vfprintf_internal_r+0x81c>
 8006a34:	9425883a 	add	r18,r18,r16
 8006a38:	8c400044 	addi	r17,r17,1
 8006a3c:	008001c4 	movi	r2,7
 8006a40:	af000015 	stw	fp,0(r21)
 8006a44:	ac000115 	stw	r16,4(r21)
 8006a48:	dc800e15 	stw	r18,56(sp)
 8006a4c:	dc400d15 	stw	r17,52(sp)
 8006a50:	14416116 	blt	r2,r17,8006fd8 <___vfprintf_internal_r+0xe0c>
 8006a54:	ad400204 	addi	r21,r21,8
 8006a58:	003f2406 	br	80066ec <___vfprintf_internal_r+0x520>
 8006a5c:	d9014f17 	ldw	r4,1340(sp)
 8006a60:	8004eb80 	call	8004eb8 <__sinit>
 8006a64:	d9c15117 	ldw	r7,1348(sp)
 8006a68:	003def06 	br	8006228 <___vfprintf_internal_r+0x5c>
 8006a6c:	d9014f17 	ldw	r4,1340(sp)
 8006a70:	b00b883a 	mov	r5,r22
 8006a74:	d9c15115 	stw	r7,1348(sp)
 8006a78:	80081140 	call	8008114 <__swsetup_r>
 8006a7c:	d9c15117 	ldw	r7,1348(sp)
 8006a80:	103dee26 	beq	r2,zero,800623c <___vfprintf_internal_r+0x70>
 8006a84:	003f8c06 	br	80068b8 <___vfprintf_internal_r+0x6ec>
 8006a88:	d9014217 	ldw	r4,1288(sp)
 8006a8c:	d9414317 	ldw	r5,1292(sp)
 8006a90:	000d883a 	mov	r6,zero
 8006a94:	000f883a 	mov	r7,zero
 8006a98:	800dd740 	call	800dd74 <__eqdf2>
 8006a9c:	1000f21e 	bne	r2,zero,8006e68 <___vfprintf_internal_r+0xc9c>
 8006aa0:	00820074 	movhi	r2,2049
 8006aa4:	109d5104 	addi	r2,r2,30020
 8006aa8:	94800044 	addi	r18,r18,1
 8006aac:	8c400044 	addi	r17,r17,1
 8006ab0:	a8800015 	stw	r2,0(r21)
 8006ab4:	00c00044 	movi	r3,1
 8006ab8:	008001c4 	movi	r2,7
 8006abc:	a8c00115 	stw	r3,4(r21)
 8006ac0:	dc800e15 	stw	r18,56(sp)
 8006ac4:	dc400d15 	stw	r17,52(sp)
 8006ac8:	1442fa16 	blt	r2,r17,80076b4 <___vfprintf_internal_r+0x14e8>
 8006acc:	a8c00204 	addi	r3,r21,8
 8006ad0:	d8800517 	ldw	r2,20(sp)
 8006ad4:	d9014717 	ldw	r4,1308(sp)
 8006ad8:	11015c0e 	bge	r2,r4,800704c <___vfprintf_internal_r+0xe80>
 8006adc:	dc400d17 	ldw	r17,52(sp)
 8006ae0:	d9814917 	ldw	r6,1316(sp)
 8006ae4:	00800044 	movi	r2,1
 8006ae8:	94800044 	addi	r18,r18,1
 8006aec:	8c400044 	addi	r17,r17,1
 8006af0:	18800115 	stw	r2,4(r3)
 8006af4:	008001c4 	movi	r2,7
 8006af8:	19800015 	stw	r6,0(r3)
 8006afc:	dc800e15 	stw	r18,56(sp)
 8006b00:	dc400d15 	stw	r17,52(sp)
 8006b04:	14431016 	blt	r2,r17,8007748 <___vfprintf_internal_r+0x157c>
 8006b08:	18c00204 	addi	r3,r3,8
 8006b0c:	d8814717 	ldw	r2,1308(sp)
 8006b10:	143fffc4 	addi	r16,r2,-1
 8006b14:	043f2b0e 	bge	zero,r16,80067c4 <___vfprintf_internal_r+0x5f8>
 8006b18:	00800404 	movi	r2,16
 8006b1c:	1402a20e 	bge	r2,r16,80075a8 <___vfprintf_internal_r+0x13dc>
 8006b20:	dc400d17 	ldw	r17,52(sp)
 8006b24:	1027883a 	mov	r19,r2
 8006b28:	07020074 	movhi	fp,2049
 8006b2c:	e71d5184 	addi	fp,fp,30022
 8006b30:	050001c4 	movi	r20,7
 8006b34:	00000306 	br	8006b44 <___vfprintf_internal_r+0x978>
 8006b38:	18c00204 	addi	r3,r3,8
 8006b3c:	843ffc04 	addi	r16,r16,-16
 8006b40:	9c029c0e 	bge	r19,r16,80075b4 <___vfprintf_internal_r+0x13e8>
 8006b44:	94800404 	addi	r18,r18,16
 8006b48:	8c400044 	addi	r17,r17,1
 8006b4c:	1f000015 	stw	fp,0(r3)
 8006b50:	1cc00115 	stw	r19,4(r3)
 8006b54:	dc800e15 	stw	r18,56(sp)
 8006b58:	dc400d15 	stw	r17,52(sp)
 8006b5c:	a47ff60e 	bge	r20,r17,8006b38 <___vfprintf_internal_r+0x96c>
 8006b60:	d9014f17 	ldw	r4,1340(sp)
 8006b64:	b00b883a 	mov	r5,r22
 8006b68:	d9800c04 	addi	r6,sp,48
 8006b6c:	80061740 	call	8006174 <__sprint_r>
 8006b70:	103f4e1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006b74:	dc800e17 	ldw	r18,56(sp)
 8006b78:	dc400d17 	ldw	r17,52(sp)
 8006b7c:	d8c01904 	addi	r3,sp,100
 8006b80:	003fee06 	br	8006b3c <___vfprintf_internal_r+0x970>
 8006b84:	d8802c0b 	ldhu	r2,176(sp)
 8006b88:	00ffffc4 	movi	r3,-1
 8006b8c:	d8c14b15 	stw	r3,1324(sp)
 8006b90:	1080100c 	andi	r2,r2,64
 8006b94:	103dcc1e 	bne	r2,zero,80062c8 <___vfprintf_internal_r+0xfc>
 8006b98:	003dce06 	br	80062d4 <___vfprintf_internal_r+0x108>
 8006b9c:	d9014f17 	ldw	r4,1340(sp)
 8006ba0:	b00b883a 	mov	r5,r22
 8006ba4:	d9800c04 	addi	r6,sp,48
 8006ba8:	80061740 	call	8006174 <__sprint_r>
 8006bac:	103f3f1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006bb0:	dc800e17 	ldw	r18,56(sp)
 8006bb4:	003f2e06 	br	8006870 <___vfprintf_internal_r+0x6a4>
 8006bb8:	d9414c17 	ldw	r5,1328(sp)
 8006bbc:	29400414 	ori	r5,r5,16
 8006bc0:	d9414c15 	stw	r5,1328(sp)
 8006bc4:	d9814c17 	ldw	r6,1328(sp)
 8006bc8:	3080080c 	andi	r2,r6,32
 8006bcc:	10014f1e 	bne	r2,zero,800710c <___vfprintf_internal_r+0xf40>
 8006bd0:	d8c14c17 	ldw	r3,1328(sp)
 8006bd4:	1880040c 	andi	r2,r3,16
 8006bd8:	1002ea1e 	bne	r2,zero,8007784 <___vfprintf_internal_r+0x15b8>
 8006bdc:	d9014c17 	ldw	r4,1328(sp)
 8006be0:	2080100c 	andi	r2,r4,64
 8006be4:	1002e726 	beq	r2,zero,8007784 <___vfprintf_internal_r+0x15b8>
 8006be8:	3880000f 	ldh	r2,0(r7)
 8006bec:	39c00104 	addi	r7,r7,4
 8006bf0:	d9c14015 	stw	r7,1280(sp)
 8006bf4:	1023d7fa 	srai	r17,r2,31
 8006bf8:	1021883a 	mov	r16,r2
 8006bfc:	88037216 	blt	r17,zero,80079c8 <___vfprintf_internal_r+0x17fc>
 8006c00:	01000044 	movi	r4,1
 8006c04:	98000416 	blt	r19,zero,8006c18 <___vfprintf_internal_r+0xa4c>
 8006c08:	d8c14c17 	ldw	r3,1328(sp)
 8006c0c:	00bfdfc4 	movi	r2,-129
 8006c10:	1886703a 	and	r3,r3,r2
 8006c14:	d8c14c15 	stw	r3,1328(sp)
 8006c18:	8444b03a 	or	r2,r16,r17
 8006c1c:	1002261e 	bne	r2,zero,80074b8 <___vfprintf_internal_r+0x12ec>
 8006c20:	9802251e 	bne	r19,zero,80074b8 <___vfprintf_internal_r+0x12ec>
 8006c24:	20803fcc 	andi	r2,r4,255
 8006c28:	10029b26 	beq	r2,zero,8007698 <___vfprintf_internal_r+0x14cc>
 8006c2c:	d8c01904 	addi	r3,sp,100
 8006c30:	dd000f04 	addi	r20,sp,60
 8006c34:	d8c14115 	stw	r3,1284(sp)
 8006c38:	d8c14117 	ldw	r3,1284(sp)
 8006c3c:	dcc14515 	stw	r19,1300(sp)
 8006c40:	a0c5c83a 	sub	r2,r20,r3
 8006c44:	11c00a04 	addi	r7,r2,40
 8006c48:	99c0010e 	bge	r19,r7,8006c50 <___vfprintf_internal_r+0xa84>
 8006c4c:	d9c14515 	stw	r7,1300(sp)
 8006c50:	dcc14615 	stw	r19,1304(sp)
 8006c54:	d8800407 	ldb	r2,16(sp)
 8006c58:	103e4c26 	beq	r2,zero,800658c <___vfprintf_internal_r+0x3c0>
 8006c5c:	d8814517 	ldw	r2,1300(sp)
 8006c60:	10800044 	addi	r2,r2,1
 8006c64:	d8814515 	stw	r2,1300(sp)
 8006c68:	003e4806 	br	800658c <___vfprintf_internal_r+0x3c0>
 8006c6c:	d9814c17 	ldw	r6,1328(sp)
 8006c70:	31800414 	ori	r6,r6,16
 8006c74:	d9814c15 	stw	r6,1328(sp)
 8006c78:	d8c14c17 	ldw	r3,1328(sp)
 8006c7c:	1880080c 	andi	r2,r3,32
 8006c80:	1001271e 	bne	r2,zero,8007120 <___vfprintf_internal_r+0xf54>
 8006c84:	d9414c17 	ldw	r5,1328(sp)
 8006c88:	2880040c 	andi	r2,r5,16
 8006c8c:	1002b61e 	bne	r2,zero,8007768 <___vfprintf_internal_r+0x159c>
 8006c90:	d9814c17 	ldw	r6,1328(sp)
 8006c94:	3080100c 	andi	r2,r6,64
 8006c98:	1002b326 	beq	r2,zero,8007768 <___vfprintf_internal_r+0x159c>
 8006c9c:	3c00000b 	ldhu	r16,0(r7)
 8006ca0:	0009883a 	mov	r4,zero
 8006ca4:	39c00104 	addi	r7,r7,4
 8006ca8:	0023883a 	mov	r17,zero
 8006cac:	d9c14015 	stw	r7,1280(sp)
 8006cb0:	d8000405 	stb	zero,16(sp)
 8006cb4:	003fd306 	br	8006c04 <___vfprintf_internal_r+0xa38>
 8006cb8:	d9014c17 	ldw	r4,1328(sp)
 8006cbc:	21000414 	ori	r4,r4,16
 8006cc0:	d9014c15 	stw	r4,1328(sp)
 8006cc4:	d9414c17 	ldw	r5,1328(sp)
 8006cc8:	2880080c 	andi	r2,r5,32
 8006ccc:	1001081e 	bne	r2,zero,80070f0 <___vfprintf_internal_r+0xf24>
 8006cd0:	d8c14c17 	ldw	r3,1328(sp)
 8006cd4:	1880040c 	andi	r2,r3,16
 8006cd8:	1002b01e 	bne	r2,zero,800779c <___vfprintf_internal_r+0x15d0>
 8006cdc:	d9014c17 	ldw	r4,1328(sp)
 8006ce0:	2080100c 	andi	r2,r4,64
 8006ce4:	1002ad26 	beq	r2,zero,800779c <___vfprintf_internal_r+0x15d0>
 8006ce8:	3c00000b 	ldhu	r16,0(r7)
 8006cec:	01000044 	movi	r4,1
 8006cf0:	39c00104 	addi	r7,r7,4
 8006cf4:	0023883a 	mov	r17,zero
 8006cf8:	d9c14015 	stw	r7,1280(sp)
 8006cfc:	d8000405 	stb	zero,16(sp)
 8006d00:	003fc006 	br	8006c04 <___vfprintf_internal_r+0xa38>
 8006d04:	d9014f17 	ldw	r4,1340(sp)
 8006d08:	b00b883a 	mov	r5,r22
 8006d0c:	d9800c04 	addi	r6,sp,48
 8006d10:	80061740 	call	8006174 <__sprint_r>
 8006d14:	103ee51e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006d18:	dc800e17 	ldw	r18,56(sp)
 8006d1c:	d8c01904 	addi	r3,sp,100
 8006d20:	d9814c17 	ldw	r6,1328(sp)
 8006d24:	3080004c 	andi	r2,r6,1
 8006d28:	1005003a 	cmpeq	r2,r2,zero
 8006d2c:	103ea51e 	bne	r2,zero,80067c4 <___vfprintf_internal_r+0x5f8>
 8006d30:	00800044 	movi	r2,1
 8006d34:	dc400d17 	ldw	r17,52(sp)
 8006d38:	18800115 	stw	r2,4(r3)
 8006d3c:	d8814917 	ldw	r2,1316(sp)
 8006d40:	94800044 	addi	r18,r18,1
 8006d44:	8c400044 	addi	r17,r17,1
 8006d48:	18800015 	stw	r2,0(r3)
 8006d4c:	008001c4 	movi	r2,7
 8006d50:	dc800e15 	stw	r18,56(sp)
 8006d54:	dc400d15 	stw	r17,52(sp)
 8006d58:	14421e0e 	bge	r2,r17,80075d4 <___vfprintf_internal_r+0x1408>
 8006d5c:	d9014f17 	ldw	r4,1340(sp)
 8006d60:	b00b883a 	mov	r5,r22
 8006d64:	d9800c04 	addi	r6,sp,48
 8006d68:	80061740 	call	8006174 <__sprint_r>
 8006d6c:	103ecf1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006d70:	dc800e17 	ldw	r18,56(sp)
 8006d74:	d8c01904 	addi	r3,sp,100
 8006d78:	003e9206 	br	80067c4 <___vfprintf_internal_r+0x5f8>
 8006d7c:	d9014f17 	ldw	r4,1340(sp)
 8006d80:	b00b883a 	mov	r5,r22
 8006d84:	d9800c04 	addi	r6,sp,48
 8006d88:	80061740 	call	8006174 <__sprint_r>
 8006d8c:	103ec026 	beq	r2,zero,8006890 <___vfprintf_internal_r+0x6c4>
 8006d90:	003ec606 	br	80068ac <___vfprintf_internal_r+0x6e0>
 8006d94:	d9014f17 	ldw	r4,1340(sp)
 8006d98:	b00b883a 	mov	r5,r22
 8006d9c:	d9800c04 	addi	r6,sp,48
 8006da0:	d9c15115 	stw	r7,1348(sp)
 8006da4:	80061740 	call	8006174 <__sprint_r>
 8006da8:	d9c15117 	ldw	r7,1348(sp)
 8006dac:	103ebf1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006db0:	dc800e17 	ldw	r18,56(sp)
 8006db4:	dc400d17 	ldw	r17,52(sp)
 8006db8:	dd401904 	addi	r21,sp,100
 8006dbc:	003e7406 	br	8006790 <___vfprintf_internal_r+0x5c4>
 8006dc0:	d9014f17 	ldw	r4,1340(sp)
 8006dc4:	b00b883a 	mov	r5,r22
 8006dc8:	d9800c04 	addi	r6,sp,48
 8006dcc:	d9c15115 	stw	r7,1348(sp)
 8006dd0:	80061740 	call	8006174 <__sprint_r>
 8006dd4:	d9c15117 	ldw	r7,1348(sp)
 8006dd8:	103eb41e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006ddc:	dd401904 	addi	r21,sp,100
 8006de0:	003d6d06 	br	8006398 <___vfprintf_internal_r+0x1cc>
 8006de4:	d9014f17 	ldw	r4,1340(sp)
 8006de8:	b00b883a 	mov	r5,r22
 8006dec:	d9800c04 	addi	r6,sp,48
 8006df0:	d9c15115 	stw	r7,1348(sp)
 8006df4:	80061740 	call	8006174 <__sprint_r>
 8006df8:	d9c15117 	ldw	r7,1348(sp)
 8006dfc:	103eab1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006e00:	dc800e17 	ldw	r18,56(sp)
 8006e04:	dc400d17 	ldw	r17,52(sp)
 8006e08:	dd401904 	addi	r21,sp,100
 8006e0c:	003e3406 	br	80066e0 <___vfprintf_internal_r+0x514>
 8006e10:	d9014f17 	ldw	r4,1340(sp)
 8006e14:	b00b883a 	mov	r5,r22
 8006e18:	d9800c04 	addi	r6,sp,48
 8006e1c:	d9c15115 	stw	r7,1348(sp)
 8006e20:	80061740 	call	8006174 <__sprint_r>
 8006e24:	d9c15117 	ldw	r7,1348(sp)
 8006e28:	103ea01e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006e2c:	dc800e17 	ldw	r18,56(sp)
 8006e30:	dc400d17 	ldw	r17,52(sp)
 8006e34:	dd401904 	addi	r21,sp,100
 8006e38:	003e1c06 	br	80066ac <___vfprintf_internal_r+0x4e0>
 8006e3c:	d9014f17 	ldw	r4,1340(sp)
 8006e40:	b00b883a 	mov	r5,r22
 8006e44:	d9800c04 	addi	r6,sp,48
 8006e48:	d9c15115 	stw	r7,1348(sp)
 8006e4c:	80061740 	call	8006174 <__sprint_r>
 8006e50:	d9c15117 	ldw	r7,1348(sp)
 8006e54:	103e951e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006e58:	dc800e17 	ldw	r18,56(sp)
 8006e5c:	dc400d17 	ldw	r17,52(sp)
 8006e60:	dd401904 	addi	r21,sp,100
 8006e64:	003e0406 	br	8006678 <___vfprintf_internal_r+0x4ac>
 8006e68:	d9000517 	ldw	r4,20(sp)
 8006e6c:	0102520e 	bge	zero,r4,80077b8 <___vfprintf_internal_r+0x15ec>
 8006e70:	d9814717 	ldw	r6,1308(sp)
 8006e74:	21807a16 	blt	r4,r6,8007060 <___vfprintf_internal_r+0xe94>
 8006e78:	d8814117 	ldw	r2,1284(sp)
 8006e7c:	91a5883a 	add	r18,r18,r6
 8006e80:	8c400044 	addi	r17,r17,1
 8006e84:	a8800015 	stw	r2,0(r21)
 8006e88:	008001c4 	movi	r2,7
 8006e8c:	a9800115 	stw	r6,4(r21)
 8006e90:	dc800e15 	stw	r18,56(sp)
 8006e94:	dc400d15 	stw	r17,52(sp)
 8006e98:	1442f616 	blt	r2,r17,8007a74 <___vfprintf_internal_r+0x18a8>
 8006e9c:	a8c00204 	addi	r3,r21,8
 8006ea0:	d9414717 	ldw	r5,1308(sp)
 8006ea4:	2161c83a 	sub	r16,r4,r5
 8006ea8:	043f9d0e 	bge	zero,r16,8006d20 <___vfprintf_internal_r+0xb54>
 8006eac:	00800404 	movi	r2,16
 8006eb0:	1402130e 	bge	r2,r16,8007700 <___vfprintf_internal_r+0x1534>
 8006eb4:	dc400d17 	ldw	r17,52(sp)
 8006eb8:	1027883a 	mov	r19,r2
 8006ebc:	07020074 	movhi	fp,2049
 8006ec0:	e71d5184 	addi	fp,fp,30022
 8006ec4:	050001c4 	movi	r20,7
 8006ec8:	00000306 	br	8006ed8 <___vfprintf_internal_r+0xd0c>
 8006ecc:	18c00204 	addi	r3,r3,8
 8006ed0:	843ffc04 	addi	r16,r16,-16
 8006ed4:	9c020d0e 	bge	r19,r16,800770c <___vfprintf_internal_r+0x1540>
 8006ed8:	94800404 	addi	r18,r18,16
 8006edc:	8c400044 	addi	r17,r17,1
 8006ee0:	1f000015 	stw	fp,0(r3)
 8006ee4:	1cc00115 	stw	r19,4(r3)
 8006ee8:	dc800e15 	stw	r18,56(sp)
 8006eec:	dc400d15 	stw	r17,52(sp)
 8006ef0:	a47ff60e 	bge	r20,r17,8006ecc <___vfprintf_internal_r+0xd00>
 8006ef4:	d9014f17 	ldw	r4,1340(sp)
 8006ef8:	b00b883a 	mov	r5,r22
 8006efc:	d9800c04 	addi	r6,sp,48
 8006f00:	80061740 	call	8006174 <__sprint_r>
 8006f04:	103e691e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006f08:	dc800e17 	ldw	r18,56(sp)
 8006f0c:	dc400d17 	ldw	r17,52(sp)
 8006f10:	d8c01904 	addi	r3,sp,100
 8006f14:	003fee06 	br	8006ed0 <___vfprintf_internal_r+0xd04>
 8006f18:	d8814717 	ldw	r2,1308(sp)
 8006f1c:	143fffc4 	addi	r16,r2,-1
 8006f20:	043e970e 	bge	zero,r16,8006980 <___vfprintf_internal_r+0x7b4>
 8006f24:	00800404 	movi	r2,16
 8006f28:	1400180e 	bge	r2,r16,8006f8c <___vfprintf_internal_r+0xdc0>
 8006f2c:	1029883a 	mov	r20,r2
 8006f30:	07020074 	movhi	fp,2049
 8006f34:	e71d5184 	addi	fp,fp,30022
 8006f38:	054001c4 	movi	r21,7
 8006f3c:	00000306 	br	8006f4c <___vfprintf_internal_r+0xd80>
 8006f40:	9cc00204 	addi	r19,r19,8
 8006f44:	843ffc04 	addi	r16,r16,-16
 8006f48:	a400120e 	bge	r20,r16,8006f94 <___vfprintf_internal_r+0xdc8>
 8006f4c:	94800404 	addi	r18,r18,16
 8006f50:	8c400044 	addi	r17,r17,1
 8006f54:	9f000015 	stw	fp,0(r19)
 8006f58:	9d000115 	stw	r20,4(r19)
 8006f5c:	dc800e15 	stw	r18,56(sp)
 8006f60:	dc400d15 	stw	r17,52(sp)
 8006f64:	ac7ff60e 	bge	r21,r17,8006f40 <___vfprintf_internal_r+0xd74>
 8006f68:	d9014f17 	ldw	r4,1340(sp)
 8006f6c:	b00b883a 	mov	r5,r22
 8006f70:	d9800c04 	addi	r6,sp,48
 8006f74:	80061740 	call	8006174 <__sprint_r>
 8006f78:	103e4c1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006f7c:	dc800e17 	ldw	r18,56(sp)
 8006f80:	dc400d17 	ldw	r17,52(sp)
 8006f84:	dcc01904 	addi	r19,sp,100
 8006f88:	003fee06 	br	8006f44 <___vfprintf_internal_r+0xd78>
 8006f8c:	07020074 	movhi	fp,2049
 8006f90:	e71d5184 	addi	fp,fp,30022
 8006f94:	9425883a 	add	r18,r18,r16
 8006f98:	8c400044 	addi	r17,r17,1
 8006f9c:	008001c4 	movi	r2,7
 8006fa0:	9f000015 	stw	fp,0(r19)
 8006fa4:	9c000115 	stw	r16,4(r19)
 8006fa8:	dc800e15 	stw	r18,56(sp)
 8006fac:	dc400d15 	stw	r17,52(sp)
 8006fb0:	147e720e 	bge	r2,r17,800697c <___vfprintf_internal_r+0x7b0>
 8006fb4:	d9014f17 	ldw	r4,1340(sp)
 8006fb8:	b00b883a 	mov	r5,r22
 8006fbc:	d9800c04 	addi	r6,sp,48
 8006fc0:	80061740 	call	8006174 <__sprint_r>
 8006fc4:	103e391e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006fc8:	dc800e17 	ldw	r18,56(sp)
 8006fcc:	dc400d17 	ldw	r17,52(sp)
 8006fd0:	dcc01904 	addi	r19,sp,100
 8006fd4:	003e6a06 	br	8006980 <___vfprintf_internal_r+0x7b4>
 8006fd8:	d9014f17 	ldw	r4,1340(sp)
 8006fdc:	b00b883a 	mov	r5,r22
 8006fe0:	d9800c04 	addi	r6,sp,48
 8006fe4:	d9c15115 	stw	r7,1348(sp)
 8006fe8:	80061740 	call	8006174 <__sprint_r>
 8006fec:	d9c15117 	ldw	r7,1348(sp)
 8006ff0:	103e2e1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8006ff4:	dc800e17 	ldw	r18,56(sp)
 8006ff8:	dc400d17 	ldw	r17,52(sp)
 8006ffc:	dd401904 	addi	r21,sp,100
 8007000:	003dba06 	br	80066ec <___vfprintf_internal_r+0x520>
 8007004:	d9014f17 	ldw	r4,1340(sp)
 8007008:	b00b883a 	mov	r5,r22
 800700c:	d9800c04 	addi	r6,sp,48
 8007010:	80061740 	call	8006174 <__sprint_r>
 8007014:	103e251e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8007018:	dc800e17 	ldw	r18,56(sp)
 800701c:	dc400d17 	ldw	r17,52(sp)
 8007020:	dcc01904 	addi	r19,sp,100
 8007024:	003e4206 	br	8006930 <___vfprintf_internal_r+0x764>
 8007028:	d9014f17 	ldw	r4,1340(sp)
 800702c:	b00b883a 	mov	r5,r22
 8007030:	d9800c04 	addi	r6,sp,48
 8007034:	80061740 	call	8006174 <__sprint_r>
 8007038:	103e1c1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 800703c:	dc800e17 	ldw	r18,56(sp)
 8007040:	dc400d17 	ldw	r17,52(sp)
 8007044:	d8c01904 	addi	r3,sp,100
 8007048:	003e2e06 	br	8006904 <___vfprintf_internal_r+0x738>
 800704c:	d9414c17 	ldw	r5,1328(sp)
 8007050:	2880004c 	andi	r2,r5,1
 8007054:	1005003a 	cmpeq	r2,r2,zero
 8007058:	103dda1e 	bne	r2,zero,80067c4 <___vfprintf_internal_r+0x5f8>
 800705c:	003e9f06 	br	8006adc <___vfprintf_internal_r+0x910>
 8007060:	d8c14117 	ldw	r3,1284(sp)
 8007064:	9125883a 	add	r18,r18,r4
 8007068:	8c400044 	addi	r17,r17,1
 800706c:	008001c4 	movi	r2,7
 8007070:	a8c00015 	stw	r3,0(r21)
 8007074:	a9000115 	stw	r4,4(r21)
 8007078:	dc800e15 	stw	r18,56(sp)
 800707c:	dc400d15 	stw	r17,52(sp)
 8007080:	14426616 	blt	r2,r17,8007a1c <___vfprintf_internal_r+0x1850>
 8007084:	a8c00204 	addi	r3,r21,8
 8007088:	d9414917 	ldw	r5,1316(sp)
 800708c:	00800044 	movi	r2,1
 8007090:	94800044 	addi	r18,r18,1
 8007094:	8c400044 	addi	r17,r17,1
 8007098:	18800115 	stw	r2,4(r3)
 800709c:	008001c4 	movi	r2,7
 80070a0:	19400015 	stw	r5,0(r3)
 80070a4:	dc800e15 	stw	r18,56(sp)
 80070a8:	dc400d15 	stw	r17,52(sp)
 80070ac:	2021883a 	mov	r16,r4
 80070b0:	14425016 	blt	r2,r17,80079f4 <___vfprintf_internal_r+0x1828>
 80070b4:	19400204 	addi	r5,r3,8
 80070b8:	d9814717 	ldw	r6,1308(sp)
 80070bc:	8c400044 	addi	r17,r17,1
 80070c0:	dc400d15 	stw	r17,52(sp)
 80070c4:	3107c83a 	sub	r3,r6,r4
 80070c8:	d9014117 	ldw	r4,1284(sp)
 80070cc:	90e5883a 	add	r18,r18,r3
 80070d0:	28c00115 	stw	r3,4(r5)
 80070d4:	8105883a 	add	r2,r16,r4
 80070d8:	28800015 	stw	r2,0(r5)
 80070dc:	008001c4 	movi	r2,7
 80070e0:	dc800e15 	stw	r18,56(sp)
 80070e4:	147f1d16 	blt	r2,r17,8006d5c <___vfprintf_internal_r+0xb90>
 80070e8:	28c00204 	addi	r3,r5,8
 80070ec:	003db506 	br	80067c4 <___vfprintf_internal_r+0x5f8>
 80070f0:	3c000017 	ldw	r16,0(r7)
 80070f4:	3c400117 	ldw	r17,4(r7)
 80070f8:	39800204 	addi	r6,r7,8
 80070fc:	01000044 	movi	r4,1
 8007100:	d9814015 	stw	r6,1280(sp)
 8007104:	d8000405 	stb	zero,16(sp)
 8007108:	003ebe06 	br	8006c04 <___vfprintf_internal_r+0xa38>
 800710c:	3c000017 	ldw	r16,0(r7)
 8007110:	3c400117 	ldw	r17,4(r7)
 8007114:	38800204 	addi	r2,r7,8
 8007118:	d8814015 	stw	r2,1280(sp)
 800711c:	003eb706 	br	8006bfc <___vfprintf_internal_r+0xa30>
 8007120:	3c000017 	ldw	r16,0(r7)
 8007124:	3c400117 	ldw	r17,4(r7)
 8007128:	39000204 	addi	r4,r7,8
 800712c:	d9014015 	stw	r4,1280(sp)
 8007130:	0009883a 	mov	r4,zero
 8007134:	d8000405 	stb	zero,16(sp)
 8007138:	003eb206 	br	8006c04 <___vfprintf_internal_r+0xa38>
 800713c:	38c00017 	ldw	r3,0(r7)
 8007140:	39c00104 	addi	r7,r7,4
 8007144:	d8c14a15 	stw	r3,1320(sp)
 8007148:	1800d10e 	bge	r3,zero,8007490 <___vfprintf_internal_r+0x12c4>
 800714c:	00c7c83a 	sub	r3,zero,r3
 8007150:	d8c14a15 	stw	r3,1320(sp)
 8007154:	d9014c17 	ldw	r4,1328(sp)
 8007158:	b8c00007 	ldb	r3,0(r23)
 800715c:	21000114 	ori	r4,r4,4
 8007160:	d9014c15 	stw	r4,1328(sp)
 8007164:	003c9806 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 8007168:	d9814c17 	ldw	r6,1328(sp)
 800716c:	3080080c 	andi	r2,r6,32
 8007170:	1001f026 	beq	r2,zero,8007934 <___vfprintf_internal_r+0x1768>
 8007174:	d9014b17 	ldw	r4,1324(sp)
 8007178:	38800017 	ldw	r2,0(r7)
 800717c:	39c00104 	addi	r7,r7,4
 8007180:	d9c14015 	stw	r7,1280(sp)
 8007184:	2007d7fa 	srai	r3,r4,31
 8007188:	d9c14017 	ldw	r7,1280(sp)
 800718c:	11000015 	stw	r4,0(r2)
 8007190:	10c00115 	stw	r3,4(r2)
 8007194:	003c6906 	br	800633c <___vfprintf_internal_r+0x170>
 8007198:	b8c00007 	ldb	r3,0(r23)
 800719c:	00801b04 	movi	r2,108
 80071a0:	18824f26 	beq	r3,r2,8007ae0 <___vfprintf_internal_r+0x1914>
 80071a4:	d9414c17 	ldw	r5,1328(sp)
 80071a8:	29400414 	ori	r5,r5,16
 80071ac:	d9414c15 	stw	r5,1328(sp)
 80071b0:	003c8506 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 80071b4:	d9814c17 	ldw	r6,1328(sp)
 80071b8:	b8c00007 	ldb	r3,0(r23)
 80071bc:	31800814 	ori	r6,r6,32
 80071c0:	d9814c15 	stw	r6,1328(sp)
 80071c4:	003c8006 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 80071c8:	d8814c17 	ldw	r2,1328(sp)
 80071cc:	3c000017 	ldw	r16,0(r7)
 80071d0:	00c01e04 	movi	r3,120
 80071d4:	10800094 	ori	r2,r2,2
 80071d8:	d8814c15 	stw	r2,1328(sp)
 80071dc:	39c00104 	addi	r7,r7,4
 80071e0:	01420074 	movhi	r5,2049
 80071e4:	295d3a04 	addi	r5,r5,29928
 80071e8:	00800c04 	movi	r2,48
 80071ec:	0023883a 	mov	r17,zero
 80071f0:	01000084 	movi	r4,2
 80071f4:	d9c14015 	stw	r7,1280(sp)
 80071f8:	d8c14d15 	stw	r3,1332(sp)
 80071fc:	d9414415 	stw	r5,1296(sp)
 8007200:	d8800445 	stb	r2,17(sp)
 8007204:	d8c00485 	stb	r3,18(sp)
 8007208:	d8000405 	stb	zero,16(sp)
 800720c:	003e7d06 	br	8006c04 <___vfprintf_internal_r+0xa38>
 8007210:	d8814c17 	ldw	r2,1328(sp)
 8007214:	b8c00007 	ldb	r3,0(r23)
 8007218:	10801014 	ori	r2,r2,64
 800721c:	d8814c15 	stw	r2,1328(sp)
 8007220:	003c6906 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 8007224:	d9414c17 	ldw	r5,1328(sp)
 8007228:	2880020c 	andi	r2,r5,8
 800722c:	1001df26 	beq	r2,zero,80079ac <___vfprintf_internal_r+0x17e0>
 8007230:	39800017 	ldw	r6,0(r7)
 8007234:	38800204 	addi	r2,r7,8
 8007238:	d8814015 	stw	r2,1280(sp)
 800723c:	d9814215 	stw	r6,1288(sp)
 8007240:	39c00117 	ldw	r7,4(r7)
 8007244:	d9c14315 	stw	r7,1292(sp)
 8007248:	d9014217 	ldw	r4,1288(sp)
 800724c:	d9414317 	ldw	r5,1292(sp)
 8007250:	800c2b80 	call	800c2b8 <__isinfd>
 8007254:	10021726 	beq	r2,zero,8007ab4 <___vfprintf_internal_r+0x18e8>
 8007258:	d9014217 	ldw	r4,1288(sp)
 800725c:	d9414317 	ldw	r5,1292(sp)
 8007260:	000d883a 	mov	r6,zero
 8007264:	000f883a 	mov	r7,zero
 8007268:	800df940 	call	800df94 <__ltdf2>
 800726c:	1002ca16 	blt	r2,zero,8007d98 <___vfprintf_internal_r+0x1bcc>
 8007270:	d9414d17 	ldw	r5,1332(sp)
 8007274:	008011c4 	movi	r2,71
 8007278:	11420a16 	blt	r2,r5,8007aa4 <___vfprintf_internal_r+0x18d8>
 800727c:	01820074 	movhi	r6,2049
 8007280:	319d3f04 	addi	r6,r6,29948
 8007284:	d9814115 	stw	r6,1284(sp)
 8007288:	d9014c17 	ldw	r4,1328(sp)
 800728c:	00c000c4 	movi	r3,3
 8007290:	00bfdfc4 	movi	r2,-129
 8007294:	2088703a 	and	r4,r4,r2
 8007298:	180f883a 	mov	r7,r3
 800729c:	d8c14515 	stw	r3,1300(sp)
 80072a0:	d9014c15 	stw	r4,1328(sp)
 80072a4:	d8014615 	stw	zero,1304(sp)
 80072a8:	003e6a06 	br	8006c54 <___vfprintf_internal_r+0xa88>
 80072ac:	38800017 	ldw	r2,0(r7)
 80072b0:	00c00044 	movi	r3,1
 80072b4:	39c00104 	addi	r7,r7,4
 80072b8:	d9c14015 	stw	r7,1280(sp)
 80072bc:	d9000f04 	addi	r4,sp,60
 80072c0:	180f883a 	mov	r7,r3
 80072c4:	d8c14515 	stw	r3,1300(sp)
 80072c8:	d9014115 	stw	r4,1284(sp)
 80072cc:	d8800f05 	stb	r2,60(sp)
 80072d0:	d8000405 	stb	zero,16(sp)
 80072d4:	003cac06 	br	8006588 <___vfprintf_internal_r+0x3bc>
 80072d8:	01420074 	movhi	r5,2049
 80072dc:	295d4504 	addi	r5,r5,29972
 80072e0:	d9414415 	stw	r5,1296(sp)
 80072e4:	d9814c17 	ldw	r6,1328(sp)
 80072e8:	3080080c 	andi	r2,r6,32
 80072ec:	1000f926 	beq	r2,zero,80076d4 <___vfprintf_internal_r+0x1508>
 80072f0:	3c000017 	ldw	r16,0(r7)
 80072f4:	3c400117 	ldw	r17,4(r7)
 80072f8:	38800204 	addi	r2,r7,8
 80072fc:	d8814015 	stw	r2,1280(sp)
 8007300:	d9414c17 	ldw	r5,1328(sp)
 8007304:	2880004c 	andi	r2,r5,1
 8007308:	1005003a 	cmpeq	r2,r2,zero
 800730c:	1000b31e 	bne	r2,zero,80075dc <___vfprintf_internal_r+0x1410>
 8007310:	8444b03a 	or	r2,r16,r17
 8007314:	1000b126 	beq	r2,zero,80075dc <___vfprintf_internal_r+0x1410>
 8007318:	d9814d17 	ldw	r6,1332(sp)
 800731c:	29400094 	ori	r5,r5,2
 8007320:	00800c04 	movi	r2,48
 8007324:	01000084 	movi	r4,2
 8007328:	d9414c15 	stw	r5,1328(sp)
 800732c:	d8800445 	stb	r2,17(sp)
 8007330:	d9800485 	stb	r6,18(sp)
 8007334:	d8000405 	stb	zero,16(sp)
 8007338:	003e3206 	br	8006c04 <___vfprintf_internal_r+0xa38>
 800733c:	01820074 	movhi	r6,2049
 8007340:	319d3a04 	addi	r6,r6,29928
 8007344:	d9814415 	stw	r6,1296(sp)
 8007348:	003fe606 	br	80072e4 <___vfprintf_internal_r+0x1118>
 800734c:	00800ac4 	movi	r2,43
 8007350:	d8800405 	stb	r2,16(sp)
 8007354:	b8c00007 	ldb	r3,0(r23)
 8007358:	003c1b06 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 800735c:	d8814c17 	ldw	r2,1328(sp)
 8007360:	b8c00007 	ldb	r3,0(r23)
 8007364:	10800054 	ori	r2,r2,1
 8007368:	d8814c15 	stw	r2,1328(sp)
 800736c:	003c1606 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 8007370:	d8800407 	ldb	r2,16(sp)
 8007374:	1000461e 	bne	r2,zero,8007490 <___vfprintf_internal_r+0x12c4>
 8007378:	00800804 	movi	r2,32
 800737c:	d8800405 	stb	r2,16(sp)
 8007380:	b8c00007 	ldb	r3,0(r23)
 8007384:	003c1006 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 8007388:	d9814c17 	ldw	r6,1328(sp)
 800738c:	b8c00007 	ldb	r3,0(r23)
 8007390:	31800214 	ori	r6,r6,8
 8007394:	d9814c15 	stw	r6,1328(sp)
 8007398:	003c0b06 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 800739c:	0007883a 	mov	r3,zero
 80073a0:	01000244 	movi	r4,9
 80073a4:	188002a4 	muli	r2,r3,10
 80073a8:	b8c00007 	ldb	r3,0(r23)
 80073ac:	d9814d17 	ldw	r6,1332(sp)
 80073b0:	bdc00044 	addi	r23,r23,1
 80073b4:	d8c14d15 	stw	r3,1332(sp)
 80073b8:	d9414d17 	ldw	r5,1332(sp)
 80073bc:	3085883a 	add	r2,r6,r2
 80073c0:	10fff404 	addi	r3,r2,-48
 80073c4:	28bff404 	addi	r2,r5,-48
 80073c8:	20bff62e 	bgeu	r4,r2,80073a4 <___vfprintf_internal_r+0x11d8>
 80073cc:	d8c14a15 	stw	r3,1320(sp)
 80073d0:	003bff06 	br	80063d0 <___vfprintf_internal_r+0x204>
 80073d4:	d9414c17 	ldw	r5,1328(sp)
 80073d8:	b8c00007 	ldb	r3,0(r23)
 80073dc:	29402014 	ori	r5,r5,128
 80073e0:	d9414c15 	stw	r5,1328(sp)
 80073e4:	003bf806 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 80073e8:	b8c00007 	ldb	r3,0(r23)
 80073ec:	00800a84 	movi	r2,42
 80073f0:	bdc00044 	addi	r23,r23,1
 80073f4:	18831526 	beq	r3,r2,800804c <___vfprintf_internal_r+0x1e80>
 80073f8:	d8c14d15 	stw	r3,1332(sp)
 80073fc:	18bff404 	addi	r2,r3,-48
 8007400:	00c00244 	movi	r3,9
 8007404:	18827836 	bltu	r3,r2,8007de8 <___vfprintf_internal_r+0x1c1c>
 8007408:	000d883a 	mov	r6,zero
 800740c:	308002a4 	muli	r2,r6,10
 8007410:	b9800007 	ldb	r6,0(r23)
 8007414:	d9414d17 	ldw	r5,1332(sp)
 8007418:	bdc00044 	addi	r23,r23,1
 800741c:	d9814d15 	stw	r6,1332(sp)
 8007420:	d9014d17 	ldw	r4,1332(sp)
 8007424:	1145883a 	add	r2,r2,r5
 8007428:	11bff404 	addi	r6,r2,-48
 800742c:	20bff404 	addi	r2,r4,-48
 8007430:	18bff62e 	bgeu	r3,r2,800740c <___vfprintf_internal_r+0x1240>
 8007434:	3027883a 	mov	r19,r6
 8007438:	303be50e 	bge	r6,zero,80063d0 <___vfprintf_internal_r+0x204>
 800743c:	04ffffc4 	movi	r19,-1
 8007440:	003be306 	br	80063d0 <___vfprintf_internal_r+0x204>
 8007444:	d8000405 	stb	zero,16(sp)
 8007448:	39800017 	ldw	r6,0(r7)
 800744c:	39c00104 	addi	r7,r7,4
 8007450:	d9c14015 	stw	r7,1280(sp)
 8007454:	d9814115 	stw	r6,1284(sp)
 8007458:	3001c926 	beq	r6,zero,8007b80 <___vfprintf_internal_r+0x19b4>
 800745c:	98000e16 	blt	r19,zero,8007498 <___vfprintf_internal_r+0x12cc>
 8007460:	d9014117 	ldw	r4,1284(sp)
 8007464:	000b883a 	mov	r5,zero
 8007468:	980d883a 	mov	r6,r19
 800746c:	80059f80 	call	80059f8 <memchr>
 8007470:	10025926 	beq	r2,zero,8007dd8 <___vfprintf_internal_r+0x1c0c>
 8007474:	d8c14117 	ldw	r3,1284(sp)
 8007478:	10cfc83a 	sub	r7,r2,r3
 800747c:	99c19e16 	blt	r19,r7,8007af8 <___vfprintf_internal_r+0x192c>
 8007480:	d9c14515 	stw	r7,1300(sp)
 8007484:	38000916 	blt	r7,zero,80074ac <___vfprintf_internal_r+0x12e0>
 8007488:	d8014615 	stw	zero,1304(sp)
 800748c:	003df106 	br	8006c54 <___vfprintf_internal_r+0xa88>
 8007490:	b8c00007 	ldb	r3,0(r23)
 8007494:	003bcc06 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 8007498:	d9014117 	ldw	r4,1284(sp)
 800749c:	80061000 	call	8006100 <strlen>
 80074a0:	d8814515 	stw	r2,1300(sp)
 80074a4:	100f883a 	mov	r7,r2
 80074a8:	103ff70e 	bge	r2,zero,8007488 <___vfprintf_internal_r+0x12bc>
 80074ac:	d8014515 	stw	zero,1300(sp)
 80074b0:	d8014615 	stw	zero,1304(sp)
 80074b4:	003de706 	br	8006c54 <___vfprintf_internal_r+0xa88>
 80074b8:	20c03fcc 	andi	r3,r4,255
 80074bc:	00800044 	movi	r2,1
 80074c0:	18802d26 	beq	r3,r2,8007578 <___vfprintf_internal_r+0x13ac>
 80074c4:	18800e36 	bltu	r3,r2,8007500 <___vfprintf_internal_r+0x1334>
 80074c8:	00800084 	movi	r2,2
 80074cc:	1880fa26 	beq	r3,r2,80078b8 <___vfprintf_internal_r+0x16ec>
 80074d0:	01020074 	movhi	r4,2049
 80074d4:	211d4a04 	addi	r4,r4,29992
 80074d8:	80061000 	call	8006100 <strlen>
 80074dc:	100f883a 	mov	r7,r2
 80074e0:	dcc14515 	stw	r19,1300(sp)
 80074e4:	9880010e 	bge	r19,r2,80074ec <___vfprintf_internal_r+0x1320>
 80074e8:	d8814515 	stw	r2,1300(sp)
 80074ec:	00820074 	movhi	r2,2049
 80074f0:	109d4a04 	addi	r2,r2,29992
 80074f4:	dcc14615 	stw	r19,1304(sp)
 80074f8:	d8814115 	stw	r2,1284(sp)
 80074fc:	003dd506 	br	8006c54 <___vfprintf_internal_r+0xa88>
 8007500:	d9401904 	addi	r5,sp,100
 8007504:	dd000f04 	addi	r20,sp,60
 8007508:	d9414115 	stw	r5,1284(sp)
 800750c:	880a977a 	slli	r5,r17,29
 8007510:	d9814117 	ldw	r6,1284(sp)
 8007514:	8004d0fa 	srli	r2,r16,3
 8007518:	8806d0fa 	srli	r3,r17,3
 800751c:	810001cc 	andi	r4,r16,7
 8007520:	2884b03a 	or	r2,r5,r2
 8007524:	31bfffc4 	addi	r6,r6,-1
 8007528:	21000c04 	addi	r4,r4,48
 800752c:	d9814115 	stw	r6,1284(sp)
 8007530:	10cab03a 	or	r5,r2,r3
 8007534:	31000005 	stb	r4,0(r6)
 8007538:	1021883a 	mov	r16,r2
 800753c:	1823883a 	mov	r17,r3
 8007540:	283ff21e 	bne	r5,zero,800750c <___vfprintf_internal_r+0x1340>
 8007544:	d8c14c17 	ldw	r3,1328(sp)
 8007548:	1880004c 	andi	r2,r3,1
 800754c:	1005003a 	cmpeq	r2,r2,zero
 8007550:	103db91e 	bne	r2,zero,8006c38 <___vfprintf_internal_r+0xa6c>
 8007554:	20803fcc 	andi	r2,r4,255
 8007558:	1080201c 	xori	r2,r2,128
 800755c:	10bfe004 	addi	r2,r2,-128
 8007560:	00c00c04 	movi	r3,48
 8007564:	10fdb426 	beq	r2,r3,8006c38 <___vfprintf_internal_r+0xa6c>
 8007568:	31bfffc4 	addi	r6,r6,-1
 800756c:	d9814115 	stw	r6,1284(sp)
 8007570:	30c00005 	stb	r3,0(r6)
 8007574:	003db006 	br	8006c38 <___vfprintf_internal_r+0xa6c>
 8007578:	88800068 	cmpgeui	r2,r17,1
 800757c:	10002c1e 	bne	r2,zero,8007630 <___vfprintf_internal_r+0x1464>
 8007580:	8800021e 	bne	r17,zero,800758c <___vfprintf_internal_r+0x13c0>
 8007584:	00800244 	movi	r2,9
 8007588:	14002936 	bltu	r2,r16,8007630 <___vfprintf_internal_r+0x1464>
 800758c:	d90018c4 	addi	r4,sp,99
 8007590:	dd000f04 	addi	r20,sp,60
 8007594:	d9014115 	stw	r4,1284(sp)
 8007598:	d9014117 	ldw	r4,1284(sp)
 800759c:	80800c04 	addi	r2,r16,48
 80075a0:	20800005 	stb	r2,0(r4)
 80075a4:	003da406 	br	8006c38 <___vfprintf_internal_r+0xa6c>
 80075a8:	dc400d17 	ldw	r17,52(sp)
 80075ac:	07020074 	movhi	fp,2049
 80075b0:	e71d5184 	addi	fp,fp,30022
 80075b4:	9425883a 	add	r18,r18,r16
 80075b8:	8c400044 	addi	r17,r17,1
 80075bc:	008001c4 	movi	r2,7
 80075c0:	1f000015 	stw	fp,0(r3)
 80075c4:	1c000115 	stw	r16,4(r3)
 80075c8:	dc800e15 	stw	r18,56(sp)
 80075cc:	dc400d15 	stw	r17,52(sp)
 80075d0:	147de216 	blt	r2,r17,8006d5c <___vfprintf_internal_r+0xb90>
 80075d4:	18c00204 	addi	r3,r3,8
 80075d8:	003c7a06 	br	80067c4 <___vfprintf_internal_r+0x5f8>
 80075dc:	01000084 	movi	r4,2
 80075e0:	d8000405 	stb	zero,16(sp)
 80075e4:	003d8706 	br	8006c04 <___vfprintf_internal_r+0xa38>
 80075e8:	d9814c17 	ldw	r6,1328(sp)
 80075ec:	30c4703a 	and	r2,r6,r3
 80075f0:	1005003a 	cmpeq	r2,r2,zero
 80075f4:	103cb926 	beq	r2,zero,80068dc <___vfprintf_internal_r+0x710>
 80075f8:	d9014117 	ldw	r4,1284(sp)
 80075fc:	94800044 	addi	r18,r18,1
 8007600:	8c400044 	addi	r17,r17,1
 8007604:	008001c4 	movi	r2,7
 8007608:	a9000015 	stw	r4,0(r21)
 800760c:	a8c00115 	stw	r3,4(r21)
 8007610:	dc800e15 	stw	r18,56(sp)
 8007614:	dc400d15 	stw	r17,52(sp)
 8007618:	147e6616 	blt	r2,r17,8006fb4 <___vfprintf_internal_r+0xde8>
 800761c:	acc00204 	addi	r19,r21,8
 8007620:	003cd706 	br	8006980 <___vfprintf_internal_r+0x7b4>
 8007624:	07020074 	movhi	fp,2049
 8007628:	e71d5184 	addi	fp,fp,30022
 800762c:	003c4f06 	br	800676c <___vfprintf_internal_r+0x5a0>
 8007630:	dd000f04 	addi	r20,sp,60
 8007634:	dc801904 	addi	r18,sp,100
 8007638:	8009883a 	mov	r4,r16
 800763c:	880b883a 	mov	r5,r17
 8007640:	01800284 	movi	r6,10
 8007644:	000f883a 	mov	r7,zero
 8007648:	800cca40 	call	800cca4 <__umoddi3>
 800764c:	12000c04 	addi	r8,r2,48
 8007650:	94bfffc4 	addi	r18,r18,-1
 8007654:	8009883a 	mov	r4,r16
 8007658:	880b883a 	mov	r5,r17
 800765c:	01800284 	movi	r6,10
 8007660:	000f883a 	mov	r7,zero
 8007664:	92000005 	stb	r8,0(r18)
 8007668:	800c6c80 	call	800c6c8 <__udivdi3>
 800766c:	1009883a 	mov	r4,r2
 8007670:	1021883a 	mov	r16,r2
 8007674:	18800068 	cmpgeui	r2,r3,1
 8007678:	1823883a 	mov	r17,r3
 800767c:	103fee1e 	bne	r2,zero,8007638 <___vfprintf_internal_r+0x146c>
 8007680:	1800021e 	bne	r3,zero,800768c <___vfprintf_internal_r+0x14c0>
 8007684:	00800244 	movi	r2,9
 8007688:	113feb36 	bltu	r2,r4,8007638 <___vfprintf_internal_r+0x146c>
 800768c:	94bfffc4 	addi	r18,r18,-1
 8007690:	dc814115 	stw	r18,1284(sp)
 8007694:	003fc006 	br	8007598 <___vfprintf_internal_r+0x13cc>
 8007698:	d9014c17 	ldw	r4,1328(sp)
 800769c:	2080004c 	andi	r2,r4,1
 80076a0:	10009a1e 	bne	r2,zero,800790c <___vfprintf_internal_r+0x1740>
 80076a4:	d9401904 	addi	r5,sp,100
 80076a8:	dd000f04 	addi	r20,sp,60
 80076ac:	d9414115 	stw	r5,1284(sp)
 80076b0:	003d6106 	br	8006c38 <___vfprintf_internal_r+0xa6c>
 80076b4:	d9014f17 	ldw	r4,1340(sp)
 80076b8:	b00b883a 	mov	r5,r22
 80076bc:	d9800c04 	addi	r6,sp,48
 80076c0:	80061740 	call	8006174 <__sprint_r>
 80076c4:	103c791e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 80076c8:	dc800e17 	ldw	r18,56(sp)
 80076cc:	d8c01904 	addi	r3,sp,100
 80076d0:	003cff06 	br	8006ad0 <___vfprintf_internal_r+0x904>
 80076d4:	d8c14c17 	ldw	r3,1328(sp)
 80076d8:	1880040c 	andi	r2,r3,16
 80076dc:	1000711e 	bne	r2,zero,80078a4 <___vfprintf_internal_r+0x16d8>
 80076e0:	d9014c17 	ldw	r4,1328(sp)
 80076e4:	2080100c 	andi	r2,r4,64
 80076e8:	10006e26 	beq	r2,zero,80078a4 <___vfprintf_internal_r+0x16d8>
 80076ec:	3c00000b 	ldhu	r16,0(r7)
 80076f0:	0023883a 	mov	r17,zero
 80076f4:	39c00104 	addi	r7,r7,4
 80076f8:	d9c14015 	stw	r7,1280(sp)
 80076fc:	003f0006 	br	8007300 <___vfprintf_internal_r+0x1134>
 8007700:	dc400d17 	ldw	r17,52(sp)
 8007704:	07020074 	movhi	fp,2049
 8007708:	e71d5184 	addi	fp,fp,30022
 800770c:	9425883a 	add	r18,r18,r16
 8007710:	8c400044 	addi	r17,r17,1
 8007714:	008001c4 	movi	r2,7
 8007718:	1f000015 	stw	fp,0(r3)
 800771c:	1c000115 	stw	r16,4(r3)
 8007720:	dc800e15 	stw	r18,56(sp)
 8007724:	dc400d15 	stw	r17,52(sp)
 8007728:	147d7616 	blt	r2,r17,8006d04 <___vfprintf_internal_r+0xb38>
 800772c:	18c00204 	addi	r3,r3,8
 8007730:	003d7b06 	br	8006d20 <___vfprintf_internal_r+0xb54>
 8007734:	dc800e17 	ldw	r18,56(sp)
 8007738:	dc400d17 	ldw	r17,52(sp)
 800773c:	07020074 	movhi	fp,2049
 8007740:	e71d5584 	addi	fp,fp,30038
 8007744:	003bc006 	br	8006648 <___vfprintf_internal_r+0x47c>
 8007748:	d9014f17 	ldw	r4,1340(sp)
 800774c:	b00b883a 	mov	r5,r22
 8007750:	d9800c04 	addi	r6,sp,48
 8007754:	80061740 	call	8006174 <__sprint_r>
 8007758:	103c541e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 800775c:	dc800e17 	ldw	r18,56(sp)
 8007760:	d8c01904 	addi	r3,sp,100
 8007764:	003ce906 	br	8006b0c <___vfprintf_internal_r+0x940>
 8007768:	3c000017 	ldw	r16,0(r7)
 800776c:	0009883a 	mov	r4,zero
 8007770:	39c00104 	addi	r7,r7,4
 8007774:	0023883a 	mov	r17,zero
 8007778:	d9c14015 	stw	r7,1280(sp)
 800777c:	d8000405 	stb	zero,16(sp)
 8007780:	003d2006 	br	8006c04 <___vfprintf_internal_r+0xa38>
 8007784:	38800017 	ldw	r2,0(r7)
 8007788:	39c00104 	addi	r7,r7,4
 800778c:	d9c14015 	stw	r7,1280(sp)
 8007790:	1023d7fa 	srai	r17,r2,31
 8007794:	1021883a 	mov	r16,r2
 8007798:	003d1806 	br	8006bfc <___vfprintf_internal_r+0xa30>
 800779c:	3c000017 	ldw	r16,0(r7)
 80077a0:	01000044 	movi	r4,1
 80077a4:	39c00104 	addi	r7,r7,4
 80077a8:	0023883a 	mov	r17,zero
 80077ac:	d9c14015 	stw	r7,1280(sp)
 80077b0:	d8000405 	stb	zero,16(sp)
 80077b4:	003d1306 	br	8006c04 <___vfprintf_internal_r+0xa38>
 80077b8:	00820074 	movhi	r2,2049
 80077bc:	109d5104 	addi	r2,r2,30020
 80077c0:	94800044 	addi	r18,r18,1
 80077c4:	8c400044 	addi	r17,r17,1
 80077c8:	a8800015 	stw	r2,0(r21)
 80077cc:	00c00044 	movi	r3,1
 80077d0:	008001c4 	movi	r2,7
 80077d4:	a8c00115 	stw	r3,4(r21)
 80077d8:	dc800e15 	stw	r18,56(sp)
 80077dc:	dc400d15 	stw	r17,52(sp)
 80077e0:	1440ca16 	blt	r2,r17,8007b0c <___vfprintf_internal_r+0x1940>
 80077e4:	a8c00204 	addi	r3,r21,8
 80077e8:	2000061e 	bne	r4,zero,8007804 <___vfprintf_internal_r+0x1638>
 80077ec:	d9414717 	ldw	r5,1308(sp)
 80077f0:	2800041e 	bne	r5,zero,8007804 <___vfprintf_internal_r+0x1638>
 80077f4:	d9814c17 	ldw	r6,1328(sp)
 80077f8:	3080004c 	andi	r2,r6,1
 80077fc:	1005003a 	cmpeq	r2,r2,zero
 8007800:	103bf01e 	bne	r2,zero,80067c4 <___vfprintf_internal_r+0x5f8>
 8007804:	00800044 	movi	r2,1
 8007808:	dc400d17 	ldw	r17,52(sp)
 800780c:	18800115 	stw	r2,4(r3)
 8007810:	d8814917 	ldw	r2,1316(sp)
 8007814:	94800044 	addi	r18,r18,1
 8007818:	8c400044 	addi	r17,r17,1
 800781c:	18800015 	stw	r2,0(r3)
 8007820:	008001c4 	movi	r2,7
 8007824:	dc800e15 	stw	r18,56(sp)
 8007828:	dc400d15 	stw	r17,52(sp)
 800782c:	1440ca16 	blt	r2,r17,8007b58 <___vfprintf_internal_r+0x198c>
 8007830:	18c00204 	addi	r3,r3,8
 8007834:	0121c83a 	sub	r16,zero,r4
 8007838:	0400500e 	bge	zero,r16,800797c <___vfprintf_internal_r+0x17b0>
 800783c:	00800404 	movi	r2,16
 8007840:	1400800e 	bge	r2,r16,8007a44 <___vfprintf_internal_r+0x1878>
 8007844:	1027883a 	mov	r19,r2
 8007848:	07020074 	movhi	fp,2049
 800784c:	e71d5184 	addi	fp,fp,30022
 8007850:	050001c4 	movi	r20,7
 8007854:	00000306 	br	8007864 <___vfprintf_internal_r+0x1698>
 8007858:	18c00204 	addi	r3,r3,8
 800785c:	843ffc04 	addi	r16,r16,-16
 8007860:	9c007a0e 	bge	r19,r16,8007a4c <___vfprintf_internal_r+0x1880>
 8007864:	94800404 	addi	r18,r18,16
 8007868:	8c400044 	addi	r17,r17,1
 800786c:	1f000015 	stw	fp,0(r3)
 8007870:	1cc00115 	stw	r19,4(r3)
 8007874:	dc800e15 	stw	r18,56(sp)
 8007878:	dc400d15 	stw	r17,52(sp)
 800787c:	a47ff60e 	bge	r20,r17,8007858 <___vfprintf_internal_r+0x168c>
 8007880:	d9014f17 	ldw	r4,1340(sp)
 8007884:	b00b883a 	mov	r5,r22
 8007888:	d9800c04 	addi	r6,sp,48
 800788c:	80061740 	call	8006174 <__sprint_r>
 8007890:	103c061e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8007894:	dc800e17 	ldw	r18,56(sp)
 8007898:	dc400d17 	ldw	r17,52(sp)
 800789c:	d8c01904 	addi	r3,sp,100
 80078a0:	003fee06 	br	800785c <___vfprintf_internal_r+0x1690>
 80078a4:	3c000017 	ldw	r16,0(r7)
 80078a8:	0023883a 	mov	r17,zero
 80078ac:	39c00104 	addi	r7,r7,4
 80078b0:	d9c14015 	stw	r7,1280(sp)
 80078b4:	003e9206 	br	8007300 <___vfprintf_internal_r+0x1134>
 80078b8:	d9401904 	addi	r5,sp,100
 80078bc:	dd000f04 	addi	r20,sp,60
 80078c0:	d9414115 	stw	r5,1284(sp)
 80078c4:	d9814417 	ldw	r6,1296(sp)
 80078c8:	880a973a 	slli	r5,r17,28
 80078cc:	8004d13a 	srli	r2,r16,4
 80078d0:	810003cc 	andi	r4,r16,15
 80078d4:	3109883a 	add	r4,r6,r4
 80078d8:	2884b03a 	or	r2,r5,r2
 80078dc:	21400003 	ldbu	r5,0(r4)
 80078e0:	d9014117 	ldw	r4,1284(sp)
 80078e4:	8806d13a 	srli	r3,r17,4
 80078e8:	1021883a 	mov	r16,r2
 80078ec:	213fffc4 	addi	r4,r4,-1
 80078f0:	d9014115 	stw	r4,1284(sp)
 80078f4:	d9814117 	ldw	r6,1284(sp)
 80078f8:	10c8b03a 	or	r4,r2,r3
 80078fc:	1823883a 	mov	r17,r3
 8007900:	31400005 	stb	r5,0(r6)
 8007904:	203fef1e 	bne	r4,zero,80078c4 <___vfprintf_internal_r+0x16f8>
 8007908:	003ccb06 	br	8006c38 <___vfprintf_internal_r+0xa6c>
 800790c:	00800c04 	movi	r2,48
 8007910:	d98018c4 	addi	r6,sp,99
 8007914:	dd000f04 	addi	r20,sp,60
 8007918:	d88018c5 	stb	r2,99(sp)
 800791c:	d9814115 	stw	r6,1284(sp)
 8007920:	003cc506 	br	8006c38 <___vfprintf_internal_r+0xa6c>
 8007924:	dc400d17 	ldw	r17,52(sp)
 8007928:	07020074 	movhi	fp,2049
 800792c:	e71d5584 	addi	fp,fp,30038
 8007930:	003bc706 	br	8006850 <___vfprintf_internal_r+0x684>
 8007934:	d9414c17 	ldw	r5,1328(sp)
 8007938:	2880040c 	andi	r2,r5,16
 800793c:	10007c26 	beq	r2,zero,8007b30 <___vfprintf_internal_r+0x1964>
 8007940:	38800017 	ldw	r2,0(r7)
 8007944:	39c00104 	addi	r7,r7,4
 8007948:	d9c14015 	stw	r7,1280(sp)
 800794c:	d9814b17 	ldw	r6,1324(sp)
 8007950:	d9c14017 	ldw	r7,1280(sp)
 8007954:	11800015 	stw	r6,0(r2)
 8007958:	003a7806 	br	800633c <___vfprintf_internal_r+0x170>
 800795c:	d9014f17 	ldw	r4,1340(sp)
 8007960:	b00b883a 	mov	r5,r22
 8007964:	d9800c04 	addi	r6,sp,48
 8007968:	80061740 	call	8006174 <__sprint_r>
 800796c:	103bcf1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8007970:	dc800e17 	ldw	r18,56(sp)
 8007974:	dc400d17 	ldw	r17,52(sp)
 8007978:	d8c01904 	addi	r3,sp,100
 800797c:	d9014717 	ldw	r4,1308(sp)
 8007980:	d9414117 	ldw	r5,1284(sp)
 8007984:	8c400044 	addi	r17,r17,1
 8007988:	9125883a 	add	r18,r18,r4
 800798c:	008001c4 	movi	r2,7
 8007990:	19400015 	stw	r5,0(r3)
 8007994:	19000115 	stw	r4,4(r3)
 8007998:	dc800e15 	stw	r18,56(sp)
 800799c:	dc400d15 	stw	r17,52(sp)
 80079a0:	147cee16 	blt	r2,r17,8006d5c <___vfprintf_internal_r+0xb90>
 80079a4:	18c00204 	addi	r3,r3,8
 80079a8:	003b8606 	br	80067c4 <___vfprintf_internal_r+0x5f8>
 80079ac:	38c00017 	ldw	r3,0(r7)
 80079b0:	39000204 	addi	r4,r7,8
 80079b4:	d9014015 	stw	r4,1280(sp)
 80079b8:	d8c14215 	stw	r3,1288(sp)
 80079bc:	39c00117 	ldw	r7,4(r7)
 80079c0:	d9c14315 	stw	r7,1292(sp)
 80079c4:	003e2006 	br	8007248 <___vfprintf_internal_r+0x107c>
 80079c8:	0005883a 	mov	r2,zero
 80079cc:	1409c83a 	sub	r4,r2,r16
 80079d0:	1105803a 	cmpltu	r2,r2,r4
 80079d4:	044bc83a 	sub	r5,zero,r17
 80079d8:	2885c83a 	sub	r2,r5,r2
 80079dc:	2021883a 	mov	r16,r4
 80079e0:	1023883a 	mov	r17,r2
 80079e4:	01000044 	movi	r4,1
 80079e8:	00800b44 	movi	r2,45
 80079ec:	d8800405 	stb	r2,16(sp)
 80079f0:	003c8406 	br	8006c04 <___vfprintf_internal_r+0xa38>
 80079f4:	d9014f17 	ldw	r4,1340(sp)
 80079f8:	b00b883a 	mov	r5,r22
 80079fc:	d9800c04 	addi	r6,sp,48
 8007a00:	80061740 	call	8006174 <__sprint_r>
 8007a04:	103ba91e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8007a08:	dc800e17 	ldw	r18,56(sp)
 8007a0c:	dc400d17 	ldw	r17,52(sp)
 8007a10:	d9000517 	ldw	r4,20(sp)
 8007a14:	d9401904 	addi	r5,sp,100
 8007a18:	003da706 	br	80070b8 <___vfprintf_internal_r+0xeec>
 8007a1c:	d9014f17 	ldw	r4,1340(sp)
 8007a20:	b00b883a 	mov	r5,r22
 8007a24:	d9800c04 	addi	r6,sp,48
 8007a28:	80061740 	call	8006174 <__sprint_r>
 8007a2c:	103b9f1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8007a30:	dc800e17 	ldw	r18,56(sp)
 8007a34:	dc400d17 	ldw	r17,52(sp)
 8007a38:	d9000517 	ldw	r4,20(sp)
 8007a3c:	d8c01904 	addi	r3,sp,100
 8007a40:	003d9106 	br	8007088 <___vfprintf_internal_r+0xebc>
 8007a44:	07020074 	movhi	fp,2049
 8007a48:	e71d5184 	addi	fp,fp,30022
 8007a4c:	9425883a 	add	r18,r18,r16
 8007a50:	8c400044 	addi	r17,r17,1
 8007a54:	008001c4 	movi	r2,7
 8007a58:	1f000015 	stw	fp,0(r3)
 8007a5c:	1c000115 	stw	r16,4(r3)
 8007a60:	dc800e15 	stw	r18,56(sp)
 8007a64:	dc400d15 	stw	r17,52(sp)
 8007a68:	147fbc16 	blt	r2,r17,800795c <___vfprintf_internal_r+0x1790>
 8007a6c:	18c00204 	addi	r3,r3,8
 8007a70:	003fc206 	br	800797c <___vfprintf_internal_r+0x17b0>
 8007a74:	d9014f17 	ldw	r4,1340(sp)
 8007a78:	b00b883a 	mov	r5,r22
 8007a7c:	d9800c04 	addi	r6,sp,48
 8007a80:	80061740 	call	8006174 <__sprint_r>
 8007a84:	103b891e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8007a88:	dc800e17 	ldw	r18,56(sp)
 8007a8c:	d9000517 	ldw	r4,20(sp)
 8007a90:	d8c01904 	addi	r3,sp,100
 8007a94:	003d0206 	br	8006ea0 <___vfprintf_internal_r+0xcd4>
 8007a98:	07020074 	movhi	fp,2049
 8007a9c:	e71d5184 	addi	fp,fp,30022
 8007aa0:	003be406 	br	8006a34 <___vfprintf_internal_r+0x868>
 8007aa4:	00820074 	movhi	r2,2049
 8007aa8:	109d4004 	addi	r2,r2,29952
 8007aac:	d8814115 	stw	r2,1284(sp)
 8007ab0:	003df506 	br	8007288 <___vfprintf_internal_r+0x10bc>
 8007ab4:	d9014217 	ldw	r4,1288(sp)
 8007ab8:	d9414317 	ldw	r5,1292(sp)
 8007abc:	800c2f80 	call	800c2f8 <__isnand>
 8007ac0:	10003926 	beq	r2,zero,8007ba8 <___vfprintf_internal_r+0x19dc>
 8007ac4:	d9414d17 	ldw	r5,1332(sp)
 8007ac8:	008011c4 	movi	r2,71
 8007acc:	1140ce16 	blt	r2,r5,8007e08 <___vfprintf_internal_r+0x1c3c>
 8007ad0:	01820074 	movhi	r6,2049
 8007ad4:	319d4104 	addi	r6,r6,29956
 8007ad8:	d9814115 	stw	r6,1284(sp)
 8007adc:	003dea06 	br	8007288 <___vfprintf_internal_r+0x10bc>
 8007ae0:	d9014c17 	ldw	r4,1328(sp)
 8007ae4:	bdc00044 	addi	r23,r23,1
 8007ae8:	b8c00007 	ldb	r3,0(r23)
 8007aec:	21000814 	ori	r4,r4,32
 8007af0:	d9014c15 	stw	r4,1328(sp)
 8007af4:	003a3406 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 8007af8:	dcc14515 	stw	r19,1300(sp)
 8007afc:	98011016 	blt	r19,zero,8007f40 <___vfprintf_internal_r+0x1d74>
 8007b00:	980f883a 	mov	r7,r19
 8007b04:	d8014615 	stw	zero,1304(sp)
 8007b08:	003c5206 	br	8006c54 <___vfprintf_internal_r+0xa88>
 8007b0c:	d9014f17 	ldw	r4,1340(sp)
 8007b10:	b00b883a 	mov	r5,r22
 8007b14:	d9800c04 	addi	r6,sp,48
 8007b18:	80061740 	call	8006174 <__sprint_r>
 8007b1c:	103b631e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8007b20:	dc800e17 	ldw	r18,56(sp)
 8007b24:	d9000517 	ldw	r4,20(sp)
 8007b28:	d8c01904 	addi	r3,sp,100
 8007b2c:	003f2e06 	br	80077e8 <___vfprintf_internal_r+0x161c>
 8007b30:	d8c14c17 	ldw	r3,1328(sp)
 8007b34:	1880100c 	andi	r2,r3,64
 8007b38:	1000a026 	beq	r2,zero,8007dbc <___vfprintf_internal_r+0x1bf0>
 8007b3c:	38800017 	ldw	r2,0(r7)
 8007b40:	39c00104 	addi	r7,r7,4
 8007b44:	d9c14015 	stw	r7,1280(sp)
 8007b48:	d9014b17 	ldw	r4,1324(sp)
 8007b4c:	d9c14017 	ldw	r7,1280(sp)
 8007b50:	1100000d 	sth	r4,0(r2)
 8007b54:	0039f906 	br	800633c <___vfprintf_internal_r+0x170>
 8007b58:	d9014f17 	ldw	r4,1340(sp)
 8007b5c:	b00b883a 	mov	r5,r22
 8007b60:	d9800c04 	addi	r6,sp,48
 8007b64:	80061740 	call	8006174 <__sprint_r>
 8007b68:	103b501e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8007b6c:	dc800e17 	ldw	r18,56(sp)
 8007b70:	dc400d17 	ldw	r17,52(sp)
 8007b74:	d9000517 	ldw	r4,20(sp)
 8007b78:	d8c01904 	addi	r3,sp,100
 8007b7c:	003f2d06 	br	8007834 <___vfprintf_internal_r+0x1668>
 8007b80:	00800184 	movi	r2,6
 8007b84:	14c09a36 	bltu	r2,r19,8007df0 <___vfprintf_internal_r+0x1c24>
 8007b88:	dcc14515 	stw	r19,1300(sp)
 8007b8c:	9800010e 	bge	r19,zero,8007b94 <___vfprintf_internal_r+0x19c8>
 8007b90:	d8014515 	stw	zero,1300(sp)
 8007b94:	00820074 	movhi	r2,2049
 8007b98:	109d4304 	addi	r2,r2,29964
 8007b9c:	980f883a 	mov	r7,r19
 8007ba0:	d8814115 	stw	r2,1284(sp)
 8007ba4:	003a7806 	br	8006588 <___vfprintf_internal_r+0x3bc>
 8007ba8:	00bfffc4 	movi	r2,-1
 8007bac:	9880e226 	beq	r19,r2,8007f38 <___vfprintf_internal_r+0x1d6c>
 8007bb0:	d9414d17 	ldw	r5,1332(sp)
 8007bb4:	008019c4 	movi	r2,103
 8007bb8:	2880dc26 	beq	r5,r2,8007f2c <___vfprintf_internal_r+0x1d60>
 8007bbc:	008011c4 	movi	r2,71
 8007bc0:	2880da26 	beq	r5,r2,8007f2c <___vfprintf_internal_r+0x1d60>
 8007bc4:	d9414c17 	ldw	r5,1328(sp)
 8007bc8:	d9014317 	ldw	r4,1292(sp)
 8007bcc:	d9814217 	ldw	r6,1288(sp)
 8007bd0:	29404014 	ori	r5,r5,256
 8007bd4:	d9414c15 	stw	r5,1328(sp)
 8007bd8:	2000cc16 	blt	r4,zero,8007f0c <___vfprintf_internal_r+0x1d40>
 8007bdc:	3021883a 	mov	r16,r6
 8007be0:	2023883a 	mov	r17,r4
 8007be4:	0039883a 	mov	fp,zero
 8007be8:	d9414d17 	ldw	r5,1332(sp)
 8007bec:	00801984 	movi	r2,102
 8007bf0:	2880b726 	beq	r5,r2,8007ed0 <___vfprintf_internal_r+0x1d04>
 8007bf4:	00801184 	movi	r2,70
 8007bf8:	2880b526 	beq	r5,r2,8007ed0 <___vfprintf_internal_r+0x1d04>
 8007bfc:	00801944 	movi	r2,101
 8007c00:	2880c826 	beq	r5,r2,8007f24 <___vfprintf_internal_r+0x1d58>
 8007c04:	00801144 	movi	r2,69
 8007c08:	2880c626 	beq	r5,r2,8007f24 <___vfprintf_internal_r+0x1d58>
 8007c0c:	9829883a 	mov	r20,r19
 8007c10:	d9014f17 	ldw	r4,1340(sp)
 8007c14:	d8800504 	addi	r2,sp,20
 8007c18:	880d883a 	mov	r6,r17
 8007c1c:	d8800115 	stw	r2,4(sp)
 8007c20:	d8c00604 	addi	r3,sp,24
 8007c24:	d8800704 	addi	r2,sp,28
 8007c28:	800b883a 	mov	r5,r16
 8007c2c:	01c00084 	movi	r7,2
 8007c30:	d8c00215 	stw	r3,8(sp)
 8007c34:	d8800315 	stw	r2,12(sp)
 8007c38:	dd000015 	stw	r20,0(sp)
 8007c3c:	80084d80 	call	80084d8 <_dtoa_r>
 8007c40:	d9814d17 	ldw	r6,1332(sp)
 8007c44:	d8814115 	stw	r2,1284(sp)
 8007c48:	008019c4 	movi	r2,103
 8007c4c:	30809526 	beq	r6,r2,8007ea4 <___vfprintf_internal_r+0x1cd8>
 8007c50:	d8c14d17 	ldw	r3,1332(sp)
 8007c54:	008011c4 	movi	r2,71
 8007c58:	18809226 	beq	r3,r2,8007ea4 <___vfprintf_internal_r+0x1cd8>
 8007c5c:	d9414117 	ldw	r5,1284(sp)
 8007c60:	d9814d17 	ldw	r6,1332(sp)
 8007c64:	00801984 	movi	r2,102
 8007c68:	2d25883a 	add	r18,r5,r20
 8007c6c:	30808626 	beq	r6,r2,8007e88 <___vfprintf_internal_r+0x1cbc>
 8007c70:	00801184 	movi	r2,70
 8007c74:	30808426 	beq	r6,r2,8007e88 <___vfprintf_internal_r+0x1cbc>
 8007c78:	000d883a 	mov	r6,zero
 8007c7c:	000f883a 	mov	r7,zero
 8007c80:	880b883a 	mov	r5,r17
 8007c84:	8009883a 	mov	r4,r16
 8007c88:	800dd740 	call	800dd74 <__eqdf2>
 8007c8c:	1000751e 	bne	r2,zero,8007e64 <___vfprintf_internal_r+0x1c98>
 8007c90:	9005883a 	mov	r2,r18
 8007c94:	dc800715 	stw	r18,28(sp)
 8007c98:	d9014117 	ldw	r4,1284(sp)
 8007c9c:	d9414d17 	ldw	r5,1332(sp)
 8007ca0:	00c019c4 	movi	r3,103
 8007ca4:	1125c83a 	sub	r18,r2,r4
 8007ca8:	28c06826 	beq	r5,r3,8007e4c <___vfprintf_internal_r+0x1c80>
 8007cac:	008011c4 	movi	r2,71
 8007cb0:	28806626 	beq	r5,r2,8007e4c <___vfprintf_internal_r+0x1c80>
 8007cb4:	d9000517 	ldw	r4,20(sp)
 8007cb8:	d8c14d17 	ldw	r3,1332(sp)
 8007cbc:	00801944 	movi	r2,101
 8007cc0:	10c05516 	blt	r2,r3,8007e18 <___vfprintf_internal_r+0x1c4c>
 8007cc4:	213fffc4 	addi	r4,r4,-1
 8007cc8:	d9000515 	stw	r4,20(sp)
 8007ccc:	d8c00805 	stb	r3,32(sp)
 8007cd0:	2021883a 	mov	r16,r4
 8007cd4:	2000c116 	blt	r4,zero,8007fdc <___vfprintf_internal_r+0x1e10>
 8007cd8:	00800ac4 	movi	r2,43
 8007cdc:	d8800845 	stb	r2,33(sp)
 8007ce0:	00800244 	movi	r2,9
 8007ce4:	1400af0e 	bge	r2,r16,8007fa4 <___vfprintf_internal_r+0x1dd8>
 8007ce8:	1027883a 	mov	r19,r2
 8007cec:	dc400b84 	addi	r17,sp,46
 8007cf0:	8009883a 	mov	r4,r16
 8007cf4:	01400284 	movi	r5,10
 8007cf8:	800e45c0 	call	800e45c <__modsi3>
 8007cfc:	10800c04 	addi	r2,r2,48
 8007d00:	8c7fffc4 	addi	r17,r17,-1
 8007d04:	8009883a 	mov	r4,r16
 8007d08:	01400284 	movi	r5,10
 8007d0c:	88800005 	stb	r2,0(r17)
 8007d10:	800e3fc0 	call	800e3fc <__divsi3>
 8007d14:	1021883a 	mov	r16,r2
 8007d18:	98bff516 	blt	r19,r2,8007cf0 <___vfprintf_internal_r+0x1b24>
 8007d1c:	10c00c04 	addi	r3,r2,48
 8007d20:	d88009c4 	addi	r2,sp,39
 8007d24:	108001c4 	addi	r2,r2,7
 8007d28:	897fffc4 	addi	r5,r17,-1
 8007d2c:	88ffffc5 	stb	r3,-1(r17)
 8007d30:	2880a72e 	bgeu	r5,r2,8007fd0 <___vfprintf_internal_r+0x1e04>
 8007d34:	1009883a 	mov	r4,r2
 8007d38:	d9800804 	addi	r6,sp,32
 8007d3c:	d8c00884 	addi	r3,sp,34
 8007d40:	28800003 	ldbu	r2,0(r5)
 8007d44:	29400044 	addi	r5,r5,1
 8007d48:	18800005 	stb	r2,0(r3)
 8007d4c:	18c00044 	addi	r3,r3,1
 8007d50:	293ffb36 	bltu	r5,r4,8007d40 <___vfprintf_internal_r+0x1b74>
 8007d54:	1987c83a 	sub	r3,r3,r6
 8007d58:	00800044 	movi	r2,1
 8007d5c:	d8c14815 	stw	r3,1312(sp)
 8007d60:	90cf883a 	add	r7,r18,r3
 8007d64:	1480960e 	bge	r2,r18,8007fc0 <___vfprintf_internal_r+0x1df4>
 8007d68:	39c00044 	addi	r7,r7,1
 8007d6c:	d9c14515 	stw	r7,1300(sp)
 8007d70:	38003416 	blt	r7,zero,8007e44 <___vfprintf_internal_r+0x1c78>
 8007d74:	e0803fcc 	andi	r2,fp,255
 8007d78:	1080201c 	xori	r2,r2,128
 8007d7c:	10bfe004 	addi	r2,r2,-128
 8007d80:	10004e26 	beq	r2,zero,8007ebc <___vfprintf_internal_r+0x1cf0>
 8007d84:	00800b44 	movi	r2,45
 8007d88:	dc814715 	stw	r18,1308(sp)
 8007d8c:	d8014615 	stw	zero,1304(sp)
 8007d90:	d8800405 	stb	r2,16(sp)
 8007d94:	003bb106 	br	8006c5c <___vfprintf_internal_r+0xa90>
 8007d98:	00800b44 	movi	r2,45
 8007d9c:	d8800405 	stb	r2,16(sp)
 8007da0:	003d3306 	br	8007270 <___vfprintf_internal_r+0x10a4>
 8007da4:	d9014f17 	ldw	r4,1340(sp)
 8007da8:	b00b883a 	mov	r5,r22
 8007dac:	d9800c04 	addi	r6,sp,48
 8007db0:	80061740 	call	8006174 <__sprint_r>
 8007db4:	103abd1e 	bne	r2,zero,80068ac <___vfprintf_internal_r+0x6e0>
 8007db8:	003abb06 	br	80068a8 <___vfprintf_internal_r+0x6dc>
 8007dbc:	38800017 	ldw	r2,0(r7)
 8007dc0:	39c00104 	addi	r7,r7,4
 8007dc4:	d9c14015 	stw	r7,1280(sp)
 8007dc8:	d9414b17 	ldw	r5,1324(sp)
 8007dcc:	d9c14017 	ldw	r7,1280(sp)
 8007dd0:	11400015 	stw	r5,0(r2)
 8007dd4:	00395906 	br	800633c <___vfprintf_internal_r+0x170>
 8007dd8:	980f883a 	mov	r7,r19
 8007ddc:	dcc14515 	stw	r19,1300(sp)
 8007de0:	d8014615 	stw	zero,1304(sp)
 8007de4:	003b9b06 	br	8006c54 <___vfprintf_internal_r+0xa88>
 8007de8:	0027883a 	mov	r19,zero
 8007dec:	00397806 	br	80063d0 <___vfprintf_internal_r+0x204>
 8007df0:	00c20074 	movhi	r3,2049
 8007df4:	18dd4304 	addi	r3,r3,29964
 8007df8:	100f883a 	mov	r7,r2
 8007dfc:	d8814515 	stw	r2,1300(sp)
 8007e00:	d8c14115 	stw	r3,1284(sp)
 8007e04:	0039e006 	br	8006588 <___vfprintf_internal_r+0x3bc>
 8007e08:	00820074 	movhi	r2,2049
 8007e0c:	109d4204 	addi	r2,r2,29960
 8007e10:	d8814115 	stw	r2,1284(sp)
 8007e14:	003d1c06 	br	8007288 <___vfprintf_internal_r+0x10bc>
 8007e18:	d9414d17 	ldw	r5,1332(sp)
 8007e1c:	00801984 	movi	r2,102
 8007e20:	28804926 	beq	r5,r2,8007f48 <___vfprintf_internal_r+0x1d7c>
 8007e24:	200f883a 	mov	r7,r4
 8007e28:	24805716 	blt	r4,r18,8007f88 <___vfprintf_internal_r+0x1dbc>
 8007e2c:	d9414c17 	ldw	r5,1328(sp)
 8007e30:	2880004c 	andi	r2,r5,1
 8007e34:	10000126 	beq	r2,zero,8007e3c <___vfprintf_internal_r+0x1c70>
 8007e38:	21c00044 	addi	r7,r4,1
 8007e3c:	d9c14515 	stw	r7,1300(sp)
 8007e40:	383fcc0e 	bge	r7,zero,8007d74 <___vfprintf_internal_r+0x1ba8>
 8007e44:	d8014515 	stw	zero,1300(sp)
 8007e48:	003fca06 	br	8007d74 <___vfprintf_internal_r+0x1ba8>
 8007e4c:	d9000517 	ldw	r4,20(sp)
 8007e50:	00bfff04 	movi	r2,-4
 8007e54:	1100480e 	bge	r2,r4,8007f78 <___vfprintf_internal_r+0x1dac>
 8007e58:	99004716 	blt	r19,r4,8007f78 <___vfprintf_internal_r+0x1dac>
 8007e5c:	d8c14d15 	stw	r3,1332(sp)
 8007e60:	003ff006 	br	8007e24 <___vfprintf_internal_r+0x1c58>
 8007e64:	d8800717 	ldw	r2,28(sp)
 8007e68:	14bf8b2e 	bgeu	r2,r18,8007c98 <___vfprintf_internal_r+0x1acc>
 8007e6c:	9007883a 	mov	r3,r18
 8007e70:	01000c04 	movi	r4,48
 8007e74:	11000005 	stb	r4,0(r2)
 8007e78:	10800044 	addi	r2,r2,1
 8007e7c:	d8800715 	stw	r2,28(sp)
 8007e80:	18bffc1e 	bne	r3,r2,8007e74 <___vfprintf_internal_r+0x1ca8>
 8007e84:	003f8406 	br	8007c98 <___vfprintf_internal_r+0x1acc>
 8007e88:	d8814117 	ldw	r2,1284(sp)
 8007e8c:	10c00007 	ldb	r3,0(r2)
 8007e90:	00800c04 	movi	r2,48
 8007e94:	18805b26 	beq	r3,r2,8008004 <___vfprintf_internal_r+0x1e38>
 8007e98:	d9000517 	ldw	r4,20(sp)
 8007e9c:	9125883a 	add	r18,r18,r4
 8007ea0:	003f7506 	br	8007c78 <___vfprintf_internal_r+0x1aac>
 8007ea4:	d9014c17 	ldw	r4,1328(sp)
 8007ea8:	2080004c 	andi	r2,r4,1
 8007eac:	1005003a 	cmpeq	r2,r2,zero
 8007eb0:	103f6a26 	beq	r2,zero,8007c5c <___vfprintf_internal_r+0x1a90>
 8007eb4:	d8800717 	ldw	r2,28(sp)
 8007eb8:	003f7706 	br	8007c98 <___vfprintf_internal_r+0x1acc>
 8007ebc:	d9c14515 	stw	r7,1300(sp)
 8007ec0:	38004d16 	blt	r7,zero,8007ff8 <___vfprintf_internal_r+0x1e2c>
 8007ec4:	dc814715 	stw	r18,1308(sp)
 8007ec8:	d8014615 	stw	zero,1304(sp)
 8007ecc:	003b6106 	br	8006c54 <___vfprintf_internal_r+0xa88>
 8007ed0:	d9014f17 	ldw	r4,1340(sp)
 8007ed4:	d8800504 	addi	r2,sp,20
 8007ed8:	d8800115 	stw	r2,4(sp)
 8007edc:	d8c00604 	addi	r3,sp,24
 8007ee0:	d8800704 	addi	r2,sp,28
 8007ee4:	800b883a 	mov	r5,r16
 8007ee8:	880d883a 	mov	r6,r17
 8007eec:	01c000c4 	movi	r7,3
 8007ef0:	d8c00215 	stw	r3,8(sp)
 8007ef4:	d8800315 	stw	r2,12(sp)
 8007ef8:	dcc00015 	stw	r19,0(sp)
 8007efc:	9829883a 	mov	r20,r19
 8007f00:	80084d80 	call	80084d8 <_dtoa_r>
 8007f04:	d8814115 	stw	r2,1284(sp)
 8007f08:	003f5106 	br	8007c50 <___vfprintf_internal_r+0x1a84>
 8007f0c:	d8c14217 	ldw	r3,1288(sp)
 8007f10:	d9014317 	ldw	r4,1292(sp)
 8007f14:	07000b44 	movi	fp,45
 8007f18:	1821883a 	mov	r16,r3
 8007f1c:	2460003c 	xorhi	r17,r4,32768
 8007f20:	003f3106 	br	8007be8 <___vfprintf_internal_r+0x1a1c>
 8007f24:	9d000044 	addi	r20,r19,1
 8007f28:	003f3906 	br	8007c10 <___vfprintf_internal_r+0x1a44>
 8007f2c:	983f251e 	bne	r19,zero,8007bc4 <___vfprintf_internal_r+0x19f8>
 8007f30:	04c00044 	movi	r19,1
 8007f34:	003f2306 	br	8007bc4 <___vfprintf_internal_r+0x19f8>
 8007f38:	04c00184 	movi	r19,6
 8007f3c:	003f2106 	br	8007bc4 <___vfprintf_internal_r+0x19f8>
 8007f40:	d8014515 	stw	zero,1300(sp)
 8007f44:	003eee06 	br	8007b00 <___vfprintf_internal_r+0x1934>
 8007f48:	200f883a 	mov	r7,r4
 8007f4c:	0100370e 	bge	zero,r4,800802c <___vfprintf_internal_r+0x1e60>
 8007f50:	9800031e 	bne	r19,zero,8007f60 <___vfprintf_internal_r+0x1d94>
 8007f54:	d9814c17 	ldw	r6,1328(sp)
 8007f58:	3080004c 	andi	r2,r6,1
 8007f5c:	103fb726 	beq	r2,zero,8007e3c <___vfprintf_internal_r+0x1c70>
 8007f60:	20800044 	addi	r2,r4,1
 8007f64:	98a7883a 	add	r19,r19,r2
 8007f68:	dcc14515 	stw	r19,1300(sp)
 8007f6c:	980f883a 	mov	r7,r19
 8007f70:	983f800e 	bge	r19,zero,8007d74 <___vfprintf_internal_r+0x1ba8>
 8007f74:	003fb306 	br	8007e44 <___vfprintf_internal_r+0x1c78>
 8007f78:	d9814d17 	ldw	r6,1332(sp)
 8007f7c:	31bfff84 	addi	r6,r6,-2
 8007f80:	d9814d15 	stw	r6,1332(sp)
 8007f84:	003f4c06 	br	8007cb8 <___vfprintf_internal_r+0x1aec>
 8007f88:	0100180e 	bge	zero,r4,8007fec <___vfprintf_internal_r+0x1e20>
 8007f8c:	00800044 	movi	r2,1
 8007f90:	1485883a 	add	r2,r2,r18
 8007f94:	d8814515 	stw	r2,1300(sp)
 8007f98:	100f883a 	mov	r7,r2
 8007f9c:	103f750e 	bge	r2,zero,8007d74 <___vfprintf_internal_r+0x1ba8>
 8007fa0:	003fa806 	br	8007e44 <___vfprintf_internal_r+0x1c78>
 8007fa4:	80c00c04 	addi	r3,r16,48
 8007fa8:	00800c04 	movi	r2,48
 8007fac:	d8c008c5 	stb	r3,35(sp)
 8007fb0:	d9800804 	addi	r6,sp,32
 8007fb4:	d8c00904 	addi	r3,sp,36
 8007fb8:	d8800885 	stb	r2,34(sp)
 8007fbc:	003f6506 	br	8007d54 <___vfprintf_internal_r+0x1b88>
 8007fc0:	d9014c17 	ldw	r4,1328(sp)
 8007fc4:	2084703a 	and	r2,r4,r2
 8007fc8:	103f9c26 	beq	r2,zero,8007e3c <___vfprintf_internal_r+0x1c70>
 8007fcc:	003f6606 	br	8007d68 <___vfprintf_internal_r+0x1b9c>
 8007fd0:	d9800804 	addi	r6,sp,32
 8007fd4:	d8c00884 	addi	r3,sp,34
 8007fd8:	003f5e06 	br	8007d54 <___vfprintf_internal_r+0x1b88>
 8007fdc:	00800b44 	movi	r2,45
 8007fe0:	0121c83a 	sub	r16,zero,r4
 8007fe4:	d8800845 	stb	r2,33(sp)
 8007fe8:	003f3d06 	br	8007ce0 <___vfprintf_internal_r+0x1b14>
 8007fec:	00800084 	movi	r2,2
 8007ff0:	1105c83a 	sub	r2,r2,r4
 8007ff4:	003fe606 	br	8007f90 <___vfprintf_internal_r+0x1dc4>
 8007ff8:	d8014515 	stw	zero,1300(sp)
 8007ffc:	dc814715 	stw	r18,1308(sp)
 8008000:	003fb106 	br	8007ec8 <___vfprintf_internal_r+0x1cfc>
 8008004:	000d883a 	mov	r6,zero
 8008008:	000f883a 	mov	r7,zero
 800800c:	8009883a 	mov	r4,r16
 8008010:	880b883a 	mov	r5,r17
 8008014:	800ddfc0 	call	800ddfc <__nedf2>
 8008018:	103f9f26 	beq	r2,zero,8007e98 <___vfprintf_internal_r+0x1ccc>
 800801c:	00800044 	movi	r2,1
 8008020:	1509c83a 	sub	r4,r2,r20
 8008024:	d9000515 	stw	r4,20(sp)
 8008028:	003f9b06 	br	8007e98 <___vfprintf_internal_r+0x1ccc>
 800802c:	98000d1e 	bne	r19,zero,8008064 <___vfprintf_internal_r+0x1e98>
 8008030:	d8c14c17 	ldw	r3,1328(sp)
 8008034:	1880004c 	andi	r2,r3,1
 8008038:	10000a1e 	bne	r2,zero,8008064 <___vfprintf_internal_r+0x1e98>
 800803c:	01000044 	movi	r4,1
 8008040:	200f883a 	mov	r7,r4
 8008044:	d9014515 	stw	r4,1300(sp)
 8008048:	003f4a06 	br	8007d74 <___vfprintf_internal_r+0x1ba8>
 800804c:	3cc00017 	ldw	r19,0(r7)
 8008050:	39c00104 	addi	r7,r7,4
 8008054:	983d0e0e 	bge	r19,zero,8007490 <___vfprintf_internal_r+0x12c4>
 8008058:	b8c00007 	ldb	r3,0(r23)
 800805c:	04ffffc4 	movi	r19,-1
 8008060:	0038d906 	br	80063c8 <___vfprintf_internal_r+0x1fc>
 8008064:	9cc00084 	addi	r19,r19,2
 8008068:	dcc14515 	stw	r19,1300(sp)
 800806c:	980f883a 	mov	r7,r19
 8008070:	983f400e 	bge	r19,zero,8007d74 <___vfprintf_internal_r+0x1ba8>
 8008074:	003f7306 	br	8007e44 <___vfprintf_internal_r+0x1c78>

08008078 <__vfprintf_internal>:
 8008078:	008200b4 	movhi	r2,2050
 800807c:	10a4bf04 	addi	r2,r2,-27908
 8008080:	2013883a 	mov	r9,r4
 8008084:	11000017 	ldw	r4,0(r2)
 8008088:	2805883a 	mov	r2,r5
 800808c:	300f883a 	mov	r7,r6
 8008090:	480b883a 	mov	r5,r9
 8008094:	100d883a 	mov	r6,r2
 8008098:	80061cc1 	jmpi	80061cc <___vfprintf_internal_r>

0800809c <_write_r>:
 800809c:	defffd04 	addi	sp,sp,-12
 80080a0:	dc000015 	stw	r16,0(sp)
 80080a4:	040200b4 	movhi	r16,2050
 80080a8:	842b9404 	addi	r16,r16,-20912
 80080ac:	dc400115 	stw	r17,4(sp)
 80080b0:	80000015 	stw	zero,0(r16)
 80080b4:	2023883a 	mov	r17,r4
 80080b8:	2809883a 	mov	r4,r5
 80080bc:	300b883a 	mov	r5,r6
 80080c0:	380d883a 	mov	r6,r7
 80080c4:	dfc00215 	stw	ra,8(sp)
 80080c8:	800f4580 	call	800f458 <write>
 80080cc:	1007883a 	mov	r3,r2
 80080d0:	00bfffc4 	movi	r2,-1
 80080d4:	18800626 	beq	r3,r2,80080f0 <_write_r+0x54>
 80080d8:	1805883a 	mov	r2,r3
 80080dc:	dfc00217 	ldw	ra,8(sp)
 80080e0:	dc400117 	ldw	r17,4(sp)
 80080e4:	dc000017 	ldw	r16,0(sp)
 80080e8:	dec00304 	addi	sp,sp,12
 80080ec:	f800283a 	ret
 80080f0:	80800017 	ldw	r2,0(r16)
 80080f4:	103ff826 	beq	r2,zero,80080d8 <_write_r+0x3c>
 80080f8:	88800015 	stw	r2,0(r17)
 80080fc:	1805883a 	mov	r2,r3
 8008100:	dfc00217 	ldw	ra,8(sp)
 8008104:	dc400117 	ldw	r17,4(sp)
 8008108:	dc000017 	ldw	r16,0(sp)
 800810c:	dec00304 	addi	sp,sp,12
 8008110:	f800283a 	ret

08008114 <__swsetup_r>:
 8008114:	008200b4 	movhi	r2,2050
 8008118:	10a4bf04 	addi	r2,r2,-27908
 800811c:	10c00017 	ldw	r3,0(r2)
 8008120:	defffd04 	addi	sp,sp,-12
 8008124:	dc400115 	stw	r17,4(sp)
 8008128:	dc000015 	stw	r16,0(sp)
 800812c:	dfc00215 	stw	ra,8(sp)
 8008130:	2023883a 	mov	r17,r4
 8008134:	2821883a 	mov	r16,r5
 8008138:	18000226 	beq	r3,zero,8008144 <__swsetup_r+0x30>
 800813c:	18800e17 	ldw	r2,56(r3)
 8008140:	10001f26 	beq	r2,zero,80081c0 <__swsetup_r+0xac>
 8008144:	8100030b 	ldhu	r4,12(r16)
 8008148:	2080020c 	andi	r2,r4,8
 800814c:	10002826 	beq	r2,zero,80081f0 <__swsetup_r+0xdc>
 8008150:	81400417 	ldw	r5,16(r16)
 8008154:	28001d26 	beq	r5,zero,80081cc <__swsetup_r+0xb8>
 8008158:	2080004c 	andi	r2,r4,1
 800815c:	1005003a 	cmpeq	r2,r2,zero
 8008160:	10000b26 	beq	r2,zero,8008190 <__swsetup_r+0x7c>
 8008164:	2080008c 	andi	r2,r4,2
 8008168:	10001226 	beq	r2,zero,80081b4 <__swsetup_r+0xa0>
 800816c:	0005883a 	mov	r2,zero
 8008170:	80800215 	stw	r2,8(r16)
 8008174:	28000b26 	beq	r5,zero,80081a4 <__swsetup_r+0x90>
 8008178:	0005883a 	mov	r2,zero
 800817c:	dfc00217 	ldw	ra,8(sp)
 8008180:	dc400117 	ldw	r17,4(sp)
 8008184:	dc000017 	ldw	r16,0(sp)
 8008188:	dec00304 	addi	sp,sp,12
 800818c:	f800283a 	ret
 8008190:	80800517 	ldw	r2,20(r16)
 8008194:	80000215 	stw	zero,8(r16)
 8008198:	0085c83a 	sub	r2,zero,r2
 800819c:	80800615 	stw	r2,24(r16)
 80081a0:	283ff51e 	bne	r5,zero,8008178 <__swsetup_r+0x64>
 80081a4:	2080200c 	andi	r2,r4,128
 80081a8:	103ff326 	beq	r2,zero,8008178 <__swsetup_r+0x64>
 80081ac:	00bfffc4 	movi	r2,-1
 80081b0:	003ff206 	br	800817c <__swsetup_r+0x68>
 80081b4:	80800517 	ldw	r2,20(r16)
 80081b8:	80800215 	stw	r2,8(r16)
 80081bc:	003fed06 	br	8008174 <__swsetup_r+0x60>
 80081c0:	1809883a 	mov	r4,r3
 80081c4:	8004eb80 	call	8004eb8 <__sinit>
 80081c8:	003fde06 	br	8008144 <__swsetup_r+0x30>
 80081cc:	20c0a00c 	andi	r3,r4,640
 80081d0:	00808004 	movi	r2,512
 80081d4:	18bfe026 	beq	r3,r2,8008158 <__swsetup_r+0x44>
 80081d8:	8809883a 	mov	r4,r17
 80081dc:	800b883a 	mov	r5,r16
 80081e0:	800a7f80 	call	800a7f8 <__smakebuf_r>
 80081e4:	8100030b 	ldhu	r4,12(r16)
 80081e8:	81400417 	ldw	r5,16(r16)
 80081ec:	003fda06 	br	8008158 <__swsetup_r+0x44>
 80081f0:	2080040c 	andi	r2,r4,16
 80081f4:	103fed26 	beq	r2,zero,80081ac <__swsetup_r+0x98>
 80081f8:	2080010c 	andi	r2,r4,4
 80081fc:	10001226 	beq	r2,zero,8008248 <__swsetup_r+0x134>
 8008200:	81400c17 	ldw	r5,48(r16)
 8008204:	28000526 	beq	r5,zero,800821c <__swsetup_r+0x108>
 8008208:	80801004 	addi	r2,r16,64
 800820c:	28800226 	beq	r5,r2,8008218 <__swsetup_r+0x104>
 8008210:	8809883a 	mov	r4,r17
 8008214:	8009f0c0 	call	8009f0c <_free_r>
 8008218:	80000c15 	stw	zero,48(r16)
 800821c:	8080030b 	ldhu	r2,12(r16)
 8008220:	81400417 	ldw	r5,16(r16)
 8008224:	80000115 	stw	zero,4(r16)
 8008228:	10bff6cc 	andi	r2,r2,65499
 800822c:	8080030d 	sth	r2,12(r16)
 8008230:	81400015 	stw	r5,0(r16)
 8008234:	8080030b 	ldhu	r2,12(r16)
 8008238:	10800214 	ori	r2,r2,8
 800823c:	113fffcc 	andi	r4,r2,65535
 8008240:	8080030d 	sth	r2,12(r16)
 8008244:	003fc306 	br	8008154 <__swsetup_r+0x40>
 8008248:	81400417 	ldw	r5,16(r16)
 800824c:	003ff906 	br	8008234 <__swsetup_r+0x120>

08008250 <_close_r>:
 8008250:	defffd04 	addi	sp,sp,-12
 8008254:	dc000015 	stw	r16,0(sp)
 8008258:	040200b4 	movhi	r16,2050
 800825c:	842b9404 	addi	r16,r16,-20912
 8008260:	dc400115 	stw	r17,4(sp)
 8008264:	80000015 	stw	zero,0(r16)
 8008268:	2023883a 	mov	r17,r4
 800826c:	2809883a 	mov	r4,r5
 8008270:	dfc00215 	stw	ra,8(sp)
 8008274:	800eaf80 	call	800eaf8 <close>
 8008278:	1007883a 	mov	r3,r2
 800827c:	00bfffc4 	movi	r2,-1
 8008280:	18800626 	beq	r3,r2,800829c <_close_r+0x4c>
 8008284:	1805883a 	mov	r2,r3
 8008288:	dfc00217 	ldw	ra,8(sp)
 800828c:	dc400117 	ldw	r17,4(sp)
 8008290:	dc000017 	ldw	r16,0(sp)
 8008294:	dec00304 	addi	sp,sp,12
 8008298:	f800283a 	ret
 800829c:	80800017 	ldw	r2,0(r16)
 80082a0:	103ff826 	beq	r2,zero,8008284 <_close_r+0x34>
 80082a4:	88800015 	stw	r2,0(r17)
 80082a8:	1805883a 	mov	r2,r3
 80082ac:	dfc00217 	ldw	ra,8(sp)
 80082b0:	dc400117 	ldw	r17,4(sp)
 80082b4:	dc000017 	ldw	r16,0(sp)
 80082b8:	dec00304 	addi	sp,sp,12
 80082bc:	f800283a 	ret

080082c0 <quorem>:
 80082c0:	28c00417 	ldw	r3,16(r5)
 80082c4:	20800417 	ldw	r2,16(r4)
 80082c8:	defff604 	addi	sp,sp,-40
 80082cc:	ddc00715 	stw	r23,28(sp)
 80082d0:	dd400515 	stw	r21,20(sp)
 80082d4:	dfc00915 	stw	ra,36(sp)
 80082d8:	df000815 	stw	fp,32(sp)
 80082dc:	dd800615 	stw	r22,24(sp)
 80082e0:	dd000415 	stw	r20,16(sp)
 80082e4:	dcc00315 	stw	r19,12(sp)
 80082e8:	dc800215 	stw	r18,8(sp)
 80082ec:	dc400115 	stw	r17,4(sp)
 80082f0:	dc000015 	stw	r16,0(sp)
 80082f4:	202f883a 	mov	r23,r4
 80082f8:	282b883a 	mov	r21,r5
 80082fc:	10c07416 	blt	r2,r3,80084d0 <quorem+0x210>
 8008300:	1c7fffc4 	addi	r17,r3,-1
 8008304:	8c45883a 	add	r2,r17,r17
 8008308:	1085883a 	add	r2,r2,r2
 800830c:	2c000504 	addi	r16,r5,20
 8008310:	24c00504 	addi	r19,r4,20
 8008314:	14ed883a 	add	r22,r2,r19
 8008318:	80a5883a 	add	r18,r16,r2
 800831c:	b7000017 	ldw	fp,0(r22)
 8008320:	91400017 	ldw	r5,0(r18)
 8008324:	e009883a 	mov	r4,fp
 8008328:	29400044 	addi	r5,r5,1
 800832c:	800e4bc0 	call	800e4bc <__udivsi3>
 8008330:	1029883a 	mov	r20,r2
 8008334:	10003c1e 	bne	r2,zero,8008428 <quorem+0x168>
 8008338:	a80b883a 	mov	r5,r21
 800833c:	b809883a 	mov	r4,r23
 8008340:	800abc80 	call	800abc8 <__mcmp>
 8008344:	10002b16 	blt	r2,zero,80083f4 <quorem+0x134>
 8008348:	a5000044 	addi	r20,r20,1
 800834c:	980f883a 	mov	r7,r19
 8008350:	0011883a 	mov	r8,zero
 8008354:	0009883a 	mov	r4,zero
 8008358:	81400017 	ldw	r5,0(r16)
 800835c:	38c00017 	ldw	r3,0(r7)
 8008360:	84000104 	addi	r16,r16,4
 8008364:	28bfffcc 	andi	r2,r5,65535
 8008368:	2085883a 	add	r2,r4,r2
 800836c:	11bfffcc 	andi	r6,r2,65535
 8008370:	193fffcc 	andi	r4,r3,65535
 8008374:	1004d43a 	srli	r2,r2,16
 8008378:	280ad43a 	srli	r5,r5,16
 800837c:	2189c83a 	sub	r4,r4,r6
 8008380:	2209883a 	add	r4,r4,r8
 8008384:	1806d43a 	srli	r3,r3,16
 8008388:	288b883a 	add	r5,r5,r2
 800838c:	200dd43a 	srai	r6,r4,16
 8008390:	28bfffcc 	andi	r2,r5,65535
 8008394:	1887c83a 	sub	r3,r3,r2
 8008398:	1987883a 	add	r3,r3,r6
 800839c:	3900000d 	sth	r4,0(r7)
 80083a0:	38c0008d 	sth	r3,2(r7)
 80083a4:	2808d43a 	srli	r4,r5,16
 80083a8:	39c00104 	addi	r7,r7,4
 80083ac:	1811d43a 	srai	r8,r3,16
 80083b0:	943fe92e 	bgeu	r18,r16,8008358 <quorem+0x98>
 80083b4:	8c45883a 	add	r2,r17,r17
 80083b8:	1085883a 	add	r2,r2,r2
 80083bc:	9885883a 	add	r2,r19,r2
 80083c0:	10c00017 	ldw	r3,0(r2)
 80083c4:	18000b1e 	bne	r3,zero,80083f4 <quorem+0x134>
 80083c8:	113fff04 	addi	r4,r2,-4
 80083cc:	9900082e 	bgeu	r19,r4,80083f0 <quorem+0x130>
 80083d0:	10bfff17 	ldw	r2,-4(r2)
 80083d4:	10000326 	beq	r2,zero,80083e4 <quorem+0x124>
 80083d8:	00000506 	br	80083f0 <quorem+0x130>
 80083dc:	20800017 	ldw	r2,0(r4)
 80083e0:	1000031e 	bne	r2,zero,80083f0 <quorem+0x130>
 80083e4:	213fff04 	addi	r4,r4,-4
 80083e8:	8c7fffc4 	addi	r17,r17,-1
 80083ec:	993ffb36 	bltu	r19,r4,80083dc <quorem+0x11c>
 80083f0:	bc400415 	stw	r17,16(r23)
 80083f4:	a005883a 	mov	r2,r20
 80083f8:	dfc00917 	ldw	ra,36(sp)
 80083fc:	df000817 	ldw	fp,32(sp)
 8008400:	ddc00717 	ldw	r23,28(sp)
 8008404:	dd800617 	ldw	r22,24(sp)
 8008408:	dd400517 	ldw	r21,20(sp)
 800840c:	dd000417 	ldw	r20,16(sp)
 8008410:	dcc00317 	ldw	r19,12(sp)
 8008414:	dc800217 	ldw	r18,8(sp)
 8008418:	dc400117 	ldw	r17,4(sp)
 800841c:	dc000017 	ldw	r16,0(sp)
 8008420:	dec00a04 	addi	sp,sp,40
 8008424:	f800283a 	ret
 8008428:	980f883a 	mov	r7,r19
 800842c:	8011883a 	mov	r8,r16
 8008430:	0013883a 	mov	r9,zero
 8008434:	000d883a 	mov	r6,zero
 8008438:	40c00017 	ldw	r3,0(r8)
 800843c:	39000017 	ldw	r4,0(r7)
 8008440:	42000104 	addi	r8,r8,4
 8008444:	18bfffcc 	andi	r2,r3,65535
 8008448:	a085383a 	mul	r2,r20,r2
 800844c:	1806d43a 	srli	r3,r3,16
 8008450:	217fffcc 	andi	r5,r4,65535
 8008454:	3085883a 	add	r2,r6,r2
 8008458:	11bfffcc 	andi	r6,r2,65535
 800845c:	a0c7383a 	mul	r3,r20,r3
 8008460:	1004d43a 	srli	r2,r2,16
 8008464:	298bc83a 	sub	r5,r5,r6
 8008468:	2a4b883a 	add	r5,r5,r9
 800846c:	2008d43a 	srli	r4,r4,16
 8008470:	1887883a 	add	r3,r3,r2
 8008474:	280dd43a 	srai	r6,r5,16
 8008478:	18bfffcc 	andi	r2,r3,65535
 800847c:	2089c83a 	sub	r4,r4,r2
 8008480:	2189883a 	add	r4,r4,r6
 8008484:	3900008d 	sth	r4,2(r7)
 8008488:	3940000d 	sth	r5,0(r7)
 800848c:	180cd43a 	srli	r6,r3,16
 8008490:	39c00104 	addi	r7,r7,4
 8008494:	2013d43a 	srai	r9,r4,16
 8008498:	923fe72e 	bgeu	r18,r8,8008438 <quorem+0x178>
 800849c:	e03fa61e 	bne	fp,zero,8008338 <quorem+0x78>
 80084a0:	b0ffff04 	addi	r3,r22,-4
 80084a4:	98c0082e 	bgeu	r19,r3,80084c8 <quorem+0x208>
 80084a8:	b0bfff17 	ldw	r2,-4(r22)
 80084ac:	10000326 	beq	r2,zero,80084bc <quorem+0x1fc>
 80084b0:	00000506 	br	80084c8 <quorem+0x208>
 80084b4:	18800017 	ldw	r2,0(r3)
 80084b8:	1000031e 	bne	r2,zero,80084c8 <quorem+0x208>
 80084bc:	18ffff04 	addi	r3,r3,-4
 80084c0:	8c7fffc4 	addi	r17,r17,-1
 80084c4:	98fffb36 	bltu	r19,r3,80084b4 <quorem+0x1f4>
 80084c8:	bc400415 	stw	r17,16(r23)
 80084cc:	003f9a06 	br	8008338 <quorem+0x78>
 80084d0:	0005883a 	mov	r2,zero
 80084d4:	003fc806 	br	80083f8 <quorem+0x138>

080084d8 <_dtoa_r>:
 80084d8:	22001017 	ldw	r8,64(r4)
 80084dc:	deffda04 	addi	sp,sp,-152
 80084e0:	dd402115 	stw	r21,132(sp)
 80084e4:	dd002015 	stw	r20,128(sp)
 80084e8:	dc801e15 	stw	r18,120(sp)
 80084ec:	dc401d15 	stw	r17,116(sp)
 80084f0:	dfc02515 	stw	ra,148(sp)
 80084f4:	df002415 	stw	fp,144(sp)
 80084f8:	ddc02315 	stw	r23,140(sp)
 80084fc:	dd802215 	stw	r22,136(sp)
 8008500:	dcc01f15 	stw	r19,124(sp)
 8008504:	dc001c15 	stw	r16,112(sp)
 8008508:	d9001615 	stw	r4,88(sp)
 800850c:	3023883a 	mov	r17,r6
 8008510:	2829883a 	mov	r20,r5
 8008514:	d9c01715 	stw	r7,92(sp)
 8008518:	dc802817 	ldw	r18,160(sp)
 800851c:	302b883a 	mov	r21,r6
 8008520:	40000a26 	beq	r8,zero,800854c <_dtoa_r+0x74>
 8008524:	20801117 	ldw	r2,68(r4)
 8008528:	400b883a 	mov	r5,r8
 800852c:	40800115 	stw	r2,4(r8)
 8008530:	20c01117 	ldw	r3,68(r4)
 8008534:	00800044 	movi	r2,1
 8008538:	10c4983a 	sll	r2,r2,r3
 800853c:	40800215 	stw	r2,8(r8)
 8008540:	800aa6c0 	call	800aa6c <_Bfree>
 8008544:	d8c01617 	ldw	r3,88(sp)
 8008548:	18001015 	stw	zero,64(r3)
 800854c:	8800a316 	blt	r17,zero,80087dc <_dtoa_r+0x304>
 8008550:	90000015 	stw	zero,0(r18)
 8008554:	a8dffc2c 	andhi	r3,r21,32752
 8008558:	009ffc34 	movhi	r2,32752
 800855c:	18809126 	beq	r3,r2,80087a4 <_dtoa_r+0x2cc>
 8008560:	000d883a 	mov	r6,zero
 8008564:	000f883a 	mov	r7,zero
 8008568:	a009883a 	mov	r4,r20
 800856c:	a80b883a 	mov	r5,r21
 8008570:	dd001215 	stw	r20,72(sp)
 8008574:	dd401315 	stw	r21,76(sp)
 8008578:	800ddfc0 	call	800ddfc <__nedf2>
 800857c:	1000171e 	bne	r2,zero,80085dc <_dtoa_r+0x104>
 8008580:	d9802717 	ldw	r6,156(sp)
 8008584:	00800044 	movi	r2,1
 8008588:	30800015 	stw	r2,0(r6)
 800858c:	d8802917 	ldw	r2,164(sp)
 8008590:	10029b26 	beq	r2,zero,8009000 <_dtoa_r+0xb28>
 8008594:	d9002917 	ldw	r4,164(sp)
 8008598:	00820074 	movhi	r2,2049
 800859c:	109d5144 	addi	r2,r2,30021
 80085a0:	10ffffc4 	addi	r3,r2,-1
 80085a4:	20800015 	stw	r2,0(r4)
 80085a8:	1805883a 	mov	r2,r3
 80085ac:	dfc02517 	ldw	ra,148(sp)
 80085b0:	df002417 	ldw	fp,144(sp)
 80085b4:	ddc02317 	ldw	r23,140(sp)
 80085b8:	dd802217 	ldw	r22,136(sp)
 80085bc:	dd402117 	ldw	r21,132(sp)
 80085c0:	dd002017 	ldw	r20,128(sp)
 80085c4:	dcc01f17 	ldw	r19,124(sp)
 80085c8:	dc801e17 	ldw	r18,120(sp)
 80085cc:	dc401d17 	ldw	r17,116(sp)
 80085d0:	dc001c17 	ldw	r16,112(sp)
 80085d4:	dec02604 	addi	sp,sp,152
 80085d8:	f800283a 	ret
 80085dc:	d9001617 	ldw	r4,88(sp)
 80085e0:	d9401217 	ldw	r5,72(sp)
 80085e4:	d8800104 	addi	r2,sp,4
 80085e8:	a80d883a 	mov	r6,r21
 80085ec:	d9c00204 	addi	r7,sp,8
 80085f0:	d8800015 	stw	r2,0(sp)
 80085f4:	800b0a80 	call	800b0a8 <__d2b>
 80085f8:	d8800715 	stw	r2,28(sp)
 80085fc:	a804d53a 	srli	r2,r21,20
 8008600:	1101ffcc 	andi	r4,r2,2047
 8008604:	20008626 	beq	r4,zero,8008820 <_dtoa_r+0x348>
 8008608:	d8c01217 	ldw	r3,72(sp)
 800860c:	00800434 	movhi	r2,16
 8008610:	10bfffc4 	addi	r2,r2,-1
 8008614:	ddc00117 	ldw	r23,4(sp)
 8008618:	a884703a 	and	r2,r21,r2
 800861c:	1811883a 	mov	r8,r3
 8008620:	124ffc34 	orhi	r9,r2,16368
 8008624:	25bf0044 	addi	r22,r4,-1023
 8008628:	d8000815 	stw	zero,32(sp)
 800862c:	0005883a 	mov	r2,zero
 8008630:	00cffe34 	movhi	r3,16376
 8008634:	480b883a 	mov	r5,r9
 8008638:	4009883a 	mov	r4,r8
 800863c:	180f883a 	mov	r7,r3
 8008640:	100d883a 	mov	r6,r2
 8008644:	800d6640 	call	800d664 <__subdf3>
 8008648:	0218dbf4 	movhi	r8,25455
 800864c:	4210d844 	addi	r8,r8,17249
 8008650:	024ff4f4 	movhi	r9,16339
 8008654:	4a61e9c4 	addi	r9,r9,-30809
 8008658:	480f883a 	mov	r7,r9
 800865c:	400d883a 	mov	r6,r8
 8008660:	180b883a 	mov	r5,r3
 8008664:	1009883a 	mov	r4,r2
 8008668:	800d7580 	call	800d758 <__muldf3>
 800866c:	0222d874 	movhi	r8,35681
 8008670:	42322cc4 	addi	r8,r8,-14157
 8008674:	024ff1f4 	movhi	r9,16327
 8008678:	4a628a04 	addi	r9,r9,-30168
 800867c:	480f883a 	mov	r7,r9
 8008680:	400d883a 	mov	r6,r8
 8008684:	180b883a 	mov	r5,r3
 8008688:	1009883a 	mov	r4,r2
 800868c:	800d6e40 	call	800d6e4 <__adddf3>
 8008690:	b009883a 	mov	r4,r22
 8008694:	1021883a 	mov	r16,r2
 8008698:	1823883a 	mov	r17,r3
 800869c:	800e01c0 	call	800e01c <__floatsidf>
 80086a0:	021427f4 	movhi	r8,20639
 80086a4:	421e7ec4 	addi	r8,r8,31227
 80086a8:	024ff4f4 	movhi	r9,16339
 80086ac:	4a5104c4 	addi	r9,r9,17427
 80086b0:	480f883a 	mov	r7,r9
 80086b4:	400d883a 	mov	r6,r8
 80086b8:	180b883a 	mov	r5,r3
 80086bc:	1009883a 	mov	r4,r2
 80086c0:	800d7580 	call	800d758 <__muldf3>
 80086c4:	180f883a 	mov	r7,r3
 80086c8:	880b883a 	mov	r5,r17
 80086cc:	100d883a 	mov	r6,r2
 80086d0:	8009883a 	mov	r4,r16
 80086d4:	800d6e40 	call	800d6e4 <__adddf3>
 80086d8:	1009883a 	mov	r4,r2
 80086dc:	180b883a 	mov	r5,r3
 80086e0:	1021883a 	mov	r16,r2
 80086e4:	1823883a 	mov	r17,r3
 80086e8:	800e1140 	call	800e114 <__fixdfsi>
 80086ec:	000d883a 	mov	r6,zero
 80086f0:	000f883a 	mov	r7,zero
 80086f4:	8009883a 	mov	r4,r16
 80086f8:	880b883a 	mov	r5,r17
 80086fc:	d8800d15 	stw	r2,52(sp)
 8008700:	800df940 	call	800df94 <__ltdf2>
 8008704:	10031716 	blt	r2,zero,8009364 <_dtoa_r+0xe8c>
 8008708:	d8c00d17 	ldw	r3,52(sp)
 800870c:	00800584 	movi	r2,22
 8008710:	10c1482e 	bgeu	r2,r3,8008c34 <_dtoa_r+0x75c>
 8008714:	01000044 	movi	r4,1
 8008718:	d9000c15 	stw	r4,48(sp)
 800871c:	bd85c83a 	sub	r2,r23,r22
 8008720:	11bfffc4 	addi	r6,r2,-1
 8008724:	30030b16 	blt	r6,zero,8009354 <_dtoa_r+0xe7c>
 8008728:	d9800a15 	stw	r6,40(sp)
 800872c:	d8001115 	stw	zero,68(sp)
 8008730:	d8c00d17 	ldw	r3,52(sp)
 8008734:	1802ff16 	blt	r3,zero,8009334 <_dtoa_r+0xe5c>
 8008738:	d9000a17 	ldw	r4,40(sp)
 800873c:	d8c00915 	stw	r3,36(sp)
 8008740:	d8001015 	stw	zero,64(sp)
 8008744:	20c9883a 	add	r4,r4,r3
 8008748:	d9000a15 	stw	r4,40(sp)
 800874c:	d9001717 	ldw	r4,92(sp)
 8008750:	00800244 	movi	r2,9
 8008754:	11004636 	bltu	r2,r4,8008870 <_dtoa_r+0x398>
 8008758:	00800144 	movi	r2,5
 800875c:	11020416 	blt	r2,r4,8008f70 <_dtoa_r+0xa98>
 8008760:	04400044 	movi	r17,1
 8008764:	d8c01717 	ldw	r3,92(sp)
 8008768:	00800144 	movi	r2,5
 800876c:	10c1ed36 	bltu	r2,r3,8008f24 <_dtoa_r+0xa4c>
 8008770:	18c5883a 	add	r2,r3,r3
 8008774:	1085883a 	add	r2,r2,r2
 8008778:	00c20074 	movhi	r3,2049
 800877c:	18e1e304 	addi	r3,r3,-30836
 8008780:	10c5883a 	add	r2,r2,r3
 8008784:	11000017 	ldw	r4,0(r2)
 8008788:	2000683a 	jmp	r4
 800878c:	08008878 	rdprs	zero,at,545
 8008790:	08008878 	rdprs	zero,at,545
 8008794:	08009278 	rdprs	zero,at,585
 8008798:	08009250 	cmplti	zero,at,585
 800879c:	08009294 	ori	zero,at,586
 80087a0:	080092a0 	cmpeqi	zero,at,586
 80087a4:	d9002717 	ldw	r4,156(sp)
 80087a8:	0089c3c4 	movi	r2,9999
 80087ac:	20800015 	stw	r2,0(r4)
 80087b0:	a0001026 	beq	r20,zero,80087f4 <_dtoa_r+0x31c>
 80087b4:	00c20074 	movhi	r3,2049
 80087b8:	18dd5d04 	addi	r3,r3,30068
 80087bc:	d9802917 	ldw	r6,164(sp)
 80087c0:	303f7926 	beq	r6,zero,80085a8 <_dtoa_r+0xd0>
 80087c4:	188000c7 	ldb	r2,3(r3)
 80087c8:	190000c4 	addi	r4,r3,3
 80087cc:	1000101e 	bne	r2,zero,8008810 <_dtoa_r+0x338>
 80087d0:	d8802917 	ldw	r2,164(sp)
 80087d4:	11000015 	stw	r4,0(r2)
 80087d8:	003f7306 	br	80085a8 <_dtoa_r+0xd0>
 80087dc:	00a00034 	movhi	r2,32768
 80087e0:	10bfffc4 	addi	r2,r2,-1
 80087e4:	00c00044 	movi	r3,1
 80087e8:	88aa703a 	and	r21,r17,r2
 80087ec:	90c00015 	stw	r3,0(r18)
 80087f0:	003f5806 	br	8008554 <_dtoa_r+0x7c>
 80087f4:	00800434 	movhi	r2,16
 80087f8:	10bfffc4 	addi	r2,r2,-1
 80087fc:	a884703a 	and	r2,r21,r2
 8008800:	103fec1e 	bne	r2,zero,80087b4 <_dtoa_r+0x2dc>
 8008804:	00c20074 	movhi	r3,2049
 8008808:	18dd5a04 	addi	r3,r3,30056
 800880c:	003feb06 	br	80087bc <_dtoa_r+0x2e4>
 8008810:	d8802917 	ldw	r2,164(sp)
 8008814:	19000204 	addi	r4,r3,8
 8008818:	11000015 	stw	r4,0(r2)
 800881c:	003f6206 	br	80085a8 <_dtoa_r+0xd0>
 8008820:	ddc00117 	ldw	r23,4(sp)
 8008824:	d8800217 	ldw	r2,8(sp)
 8008828:	01000804 	movi	r4,32
 800882c:	b8c10c84 	addi	r3,r23,1074
 8008830:	18a3883a 	add	r17,r3,r2
 8008834:	2441b80e 	bge	r4,r17,8008f18 <_dtoa_r+0xa40>
 8008838:	00c01004 	movi	r3,64
 800883c:	1c47c83a 	sub	r3,r3,r17
 8008840:	88bff804 	addi	r2,r17,-32
 8008844:	a8c6983a 	sll	r3,r21,r3
 8008848:	a084d83a 	srl	r2,r20,r2
 800884c:	1888b03a 	or	r4,r3,r2
 8008850:	800e1ec0 	call	800e1ec <__floatunsidf>
 8008854:	1011883a 	mov	r8,r2
 8008858:	00bf8434 	movhi	r2,65040
 800885c:	01000044 	movi	r4,1
 8008860:	10d3883a 	add	r9,r2,r3
 8008864:	8dbef344 	addi	r22,r17,-1075
 8008868:	d9000815 	stw	r4,32(sp)
 800886c:	003f6f06 	br	800862c <_dtoa_r+0x154>
 8008870:	d8001715 	stw	zero,92(sp)
 8008874:	04400044 	movi	r17,1
 8008878:	00bfffc4 	movi	r2,-1
 800887c:	00c00044 	movi	r3,1
 8008880:	d8800e15 	stw	r2,56(sp)
 8008884:	d8002615 	stw	zero,152(sp)
 8008888:	d8800f15 	stw	r2,60(sp)
 800888c:	d8c00b15 	stw	r3,44(sp)
 8008890:	1021883a 	mov	r16,r2
 8008894:	d8801617 	ldw	r2,88(sp)
 8008898:	10001115 	stw	zero,68(r2)
 800889c:	d8801617 	ldw	r2,88(sp)
 80088a0:	11401117 	ldw	r5,68(r2)
 80088a4:	1009883a 	mov	r4,r2
 80088a8:	800afec0 	call	800afec <_Balloc>
 80088ac:	d8c01617 	ldw	r3,88(sp)
 80088b0:	d8800515 	stw	r2,20(sp)
 80088b4:	18801015 	stw	r2,64(r3)
 80088b8:	00800384 	movi	r2,14
 80088bc:	14006836 	bltu	r2,r16,8008a60 <_dtoa_r+0x588>
 80088c0:	8805003a 	cmpeq	r2,r17,zero
 80088c4:	1000661e 	bne	r2,zero,8008a60 <_dtoa_r+0x588>
 80088c8:	d9000d17 	ldw	r4,52(sp)
 80088cc:	0102300e 	bge	zero,r4,8009190 <_dtoa_r+0xcb8>
 80088d0:	208003cc 	andi	r2,r4,15
 80088d4:	100490fa 	slli	r2,r2,3
 80088d8:	2025d13a 	srai	r18,r4,4
 80088dc:	00c20074 	movhi	r3,2049
 80088e0:	18dd6e04 	addi	r3,r3,30136
 80088e4:	10c5883a 	add	r2,r2,r3
 80088e8:	90c0040c 	andi	r3,r18,16
 80088ec:	14000017 	ldw	r16,0(r2)
 80088f0:	14400117 	ldw	r17,4(r2)
 80088f4:	18036a1e 	bne	r3,zero,80096a0 <_dtoa_r+0x11c8>
 80088f8:	05800084 	movi	r22,2
 80088fc:	90001026 	beq	r18,zero,8008940 <_dtoa_r+0x468>
 8008900:	04c20074 	movhi	r19,2049
 8008904:	9cdda004 	addi	r19,r19,30336
 8008908:	9080004c 	andi	r2,r18,1
 800890c:	1005003a 	cmpeq	r2,r2,zero
 8008910:	1000081e 	bne	r2,zero,8008934 <_dtoa_r+0x45c>
 8008914:	99800017 	ldw	r6,0(r19)
 8008918:	99c00117 	ldw	r7,4(r19)
 800891c:	880b883a 	mov	r5,r17
 8008920:	8009883a 	mov	r4,r16
 8008924:	800d7580 	call	800d758 <__muldf3>
 8008928:	1021883a 	mov	r16,r2
 800892c:	b5800044 	addi	r22,r22,1
 8008930:	1823883a 	mov	r17,r3
 8008934:	9025d07a 	srai	r18,r18,1
 8008938:	9cc00204 	addi	r19,r19,8
 800893c:	903ff21e 	bne	r18,zero,8008908 <_dtoa_r+0x430>
 8008940:	a80b883a 	mov	r5,r21
 8008944:	a009883a 	mov	r4,r20
 8008948:	880f883a 	mov	r7,r17
 800894c:	800d883a 	mov	r6,r16
 8008950:	800db1c0 	call	800db1c <__divdf3>
 8008954:	1029883a 	mov	r20,r2
 8008958:	182b883a 	mov	r21,r3
 800895c:	d8c00c17 	ldw	r3,48(sp)
 8008960:	1805003a 	cmpeq	r2,r3,zero
 8008964:	1000081e 	bne	r2,zero,8008988 <_dtoa_r+0x4b0>
 8008968:	0005883a 	mov	r2,zero
 800896c:	00cffc34 	movhi	r3,16368
 8008970:	180f883a 	mov	r7,r3
 8008974:	a009883a 	mov	r4,r20
 8008978:	a80b883a 	mov	r5,r21
 800897c:	100d883a 	mov	r6,r2
 8008980:	800df940 	call	800df94 <__ltdf2>
 8008984:	1003fe16 	blt	r2,zero,8009980 <_dtoa_r+0x14a8>
 8008988:	b009883a 	mov	r4,r22
 800898c:	800e01c0 	call	800e01c <__floatsidf>
 8008990:	180b883a 	mov	r5,r3
 8008994:	1009883a 	mov	r4,r2
 8008998:	a00d883a 	mov	r6,r20
 800899c:	a80f883a 	mov	r7,r21
 80089a0:	800d7580 	call	800d758 <__muldf3>
 80089a4:	0011883a 	mov	r8,zero
 80089a8:	02500734 	movhi	r9,16412
 80089ac:	1009883a 	mov	r4,r2
 80089b0:	180b883a 	mov	r5,r3
 80089b4:	480f883a 	mov	r7,r9
 80089b8:	400d883a 	mov	r6,r8
 80089bc:	800d6e40 	call	800d6e4 <__adddf3>
 80089c0:	d9000f17 	ldw	r4,60(sp)
 80089c4:	102d883a 	mov	r22,r2
 80089c8:	00bf3034 	movhi	r2,64704
 80089cc:	18b9883a 	add	fp,r3,r2
 80089d0:	e02f883a 	mov	r23,fp
 80089d4:	20028f1e 	bne	r4,zero,8009414 <_dtoa_r+0xf3c>
 80089d8:	0005883a 	mov	r2,zero
 80089dc:	00d00534 	movhi	r3,16404
 80089e0:	a009883a 	mov	r4,r20
 80089e4:	a80b883a 	mov	r5,r21
 80089e8:	180f883a 	mov	r7,r3
 80089ec:	100d883a 	mov	r6,r2
 80089f0:	800d6640 	call	800d664 <__subdf3>
 80089f4:	1009883a 	mov	r4,r2
 80089f8:	e00f883a 	mov	r7,fp
 80089fc:	180b883a 	mov	r5,r3
 8008a00:	b00d883a 	mov	r6,r22
 8008a04:	1025883a 	mov	r18,r2
 8008a08:	1827883a 	mov	r19,r3
 8008a0c:	800de840 	call	800de84 <__gtdf2>
 8008a10:	00834f16 	blt	zero,r2,8009750 <_dtoa_r+0x1278>
 8008a14:	e0e0003c 	xorhi	r3,fp,32768
 8008a18:	9009883a 	mov	r4,r18
 8008a1c:	980b883a 	mov	r5,r19
 8008a20:	180f883a 	mov	r7,r3
 8008a24:	b00d883a 	mov	r6,r22
 8008a28:	800df940 	call	800df94 <__ltdf2>
 8008a2c:	1000080e 	bge	r2,zero,8008a50 <_dtoa_r+0x578>
 8008a30:	0027883a 	mov	r19,zero
 8008a34:	0025883a 	mov	r18,zero
 8008a38:	d8802617 	ldw	r2,152(sp)
 8008a3c:	df000517 	ldw	fp,20(sp)
 8008a40:	d8000615 	stw	zero,24(sp)
 8008a44:	0084303a 	nor	r2,zero,r2
 8008a48:	d8800d15 	stw	r2,52(sp)
 8008a4c:	00019b06 	br	80090bc <_dtoa_r+0xbe4>
 8008a50:	d9801217 	ldw	r6,72(sp)
 8008a54:	d8801317 	ldw	r2,76(sp)
 8008a58:	3029883a 	mov	r20,r6
 8008a5c:	102b883a 	mov	r21,r2
 8008a60:	d8c00217 	ldw	r3,8(sp)
 8008a64:	18008516 	blt	r3,zero,8008c7c <_dtoa_r+0x7a4>
 8008a68:	d9000d17 	ldw	r4,52(sp)
 8008a6c:	00800384 	movi	r2,14
 8008a70:	11008216 	blt	r2,r4,8008c7c <_dtoa_r+0x7a4>
 8008a74:	200490fa 	slli	r2,r4,3
 8008a78:	d9802617 	ldw	r6,152(sp)
 8008a7c:	00c20074 	movhi	r3,2049
 8008a80:	18dd6e04 	addi	r3,r3,30136
 8008a84:	10c5883a 	add	r2,r2,r3
 8008a88:	14800017 	ldw	r18,0(r2)
 8008a8c:	14c00117 	ldw	r19,4(r2)
 8008a90:	30031e16 	blt	r6,zero,800970c <_dtoa_r+0x1234>
 8008a94:	d9000517 	ldw	r4,20(sp)
 8008a98:	d8c00f17 	ldw	r3,60(sp)
 8008a9c:	a823883a 	mov	r17,r21
 8008aa0:	a021883a 	mov	r16,r20
 8008aa4:	192b883a 	add	r21,r3,r4
 8008aa8:	2039883a 	mov	fp,r4
 8008aac:	00000f06 	br	8008aec <_dtoa_r+0x614>
 8008ab0:	0005883a 	mov	r2,zero
 8008ab4:	00d00934 	movhi	r3,16420
 8008ab8:	5009883a 	mov	r4,r10
 8008abc:	580b883a 	mov	r5,r11
 8008ac0:	180f883a 	mov	r7,r3
 8008ac4:	100d883a 	mov	r6,r2
 8008ac8:	800d7580 	call	800d758 <__muldf3>
 8008acc:	180b883a 	mov	r5,r3
 8008ad0:	000d883a 	mov	r6,zero
 8008ad4:	000f883a 	mov	r7,zero
 8008ad8:	1009883a 	mov	r4,r2
 8008adc:	1021883a 	mov	r16,r2
 8008ae0:	1823883a 	mov	r17,r3
 8008ae4:	800ddfc0 	call	800ddfc <__nedf2>
 8008ae8:	10004526 	beq	r2,zero,8008c00 <_dtoa_r+0x728>
 8008aec:	900d883a 	mov	r6,r18
 8008af0:	980f883a 	mov	r7,r19
 8008af4:	8009883a 	mov	r4,r16
 8008af8:	880b883a 	mov	r5,r17
 8008afc:	800db1c0 	call	800db1c <__divdf3>
 8008b00:	180b883a 	mov	r5,r3
 8008b04:	1009883a 	mov	r4,r2
 8008b08:	800e1140 	call	800e114 <__fixdfsi>
 8008b0c:	1009883a 	mov	r4,r2
 8008b10:	1029883a 	mov	r20,r2
 8008b14:	800e01c0 	call	800e01c <__floatsidf>
 8008b18:	180f883a 	mov	r7,r3
 8008b1c:	9009883a 	mov	r4,r18
 8008b20:	980b883a 	mov	r5,r19
 8008b24:	100d883a 	mov	r6,r2
 8008b28:	800d7580 	call	800d758 <__muldf3>
 8008b2c:	180f883a 	mov	r7,r3
 8008b30:	880b883a 	mov	r5,r17
 8008b34:	8009883a 	mov	r4,r16
 8008b38:	100d883a 	mov	r6,r2
 8008b3c:	800d6640 	call	800d664 <__subdf3>
 8008b40:	1015883a 	mov	r10,r2
 8008b44:	a0800c04 	addi	r2,r20,48
 8008b48:	e0800005 	stb	r2,0(fp)
 8008b4c:	e7000044 	addi	fp,fp,1
 8008b50:	1817883a 	mov	r11,r3
 8008b54:	e57fd61e 	bne	fp,r21,8008ab0 <_dtoa_r+0x5d8>
 8008b58:	500d883a 	mov	r6,r10
 8008b5c:	180f883a 	mov	r7,r3
 8008b60:	5009883a 	mov	r4,r10
 8008b64:	180b883a 	mov	r5,r3
 8008b68:	800d6e40 	call	800d6e4 <__adddf3>
 8008b6c:	100d883a 	mov	r6,r2
 8008b70:	9009883a 	mov	r4,r18
 8008b74:	980b883a 	mov	r5,r19
 8008b78:	180f883a 	mov	r7,r3
 8008b7c:	1021883a 	mov	r16,r2
 8008b80:	1823883a 	mov	r17,r3
 8008b84:	800df940 	call	800df94 <__ltdf2>
 8008b88:	10000816 	blt	r2,zero,8008bac <_dtoa_r+0x6d4>
 8008b8c:	980b883a 	mov	r5,r19
 8008b90:	800d883a 	mov	r6,r16
 8008b94:	880f883a 	mov	r7,r17
 8008b98:	9009883a 	mov	r4,r18
 8008b9c:	800dd740 	call	800dd74 <__eqdf2>
 8008ba0:	1000171e 	bne	r2,zero,8008c00 <_dtoa_r+0x728>
 8008ba4:	a080004c 	andi	r2,r20,1
 8008ba8:	10001526 	beq	r2,zero,8008c00 <_dtoa_r+0x728>
 8008bac:	d8800d17 	ldw	r2,52(sp)
 8008bb0:	d8800415 	stw	r2,16(sp)
 8008bb4:	e009883a 	mov	r4,fp
 8008bb8:	213fffc4 	addi	r4,r4,-1
 8008bbc:	20c00007 	ldb	r3,0(r4)
 8008bc0:	00800e44 	movi	r2,57
 8008bc4:	1880081e 	bne	r3,r2,8008be8 <_dtoa_r+0x710>
 8008bc8:	d8800517 	ldw	r2,20(sp)
 8008bcc:	113ffa1e 	bne	r2,r4,8008bb8 <_dtoa_r+0x6e0>
 8008bd0:	d8c00417 	ldw	r3,16(sp)
 8008bd4:	d9800517 	ldw	r6,20(sp)
 8008bd8:	00800c04 	movi	r2,48
 8008bdc:	18c00044 	addi	r3,r3,1
 8008be0:	d8c00415 	stw	r3,16(sp)
 8008be4:	30800005 	stb	r2,0(r6)
 8008be8:	20800003 	ldbu	r2,0(r4)
 8008bec:	d8c00417 	ldw	r3,16(sp)
 8008bf0:	27000044 	addi	fp,r4,1
 8008bf4:	10800044 	addi	r2,r2,1
 8008bf8:	d8c00d15 	stw	r3,52(sp)
 8008bfc:	20800005 	stb	r2,0(r4)
 8008c00:	d9001617 	ldw	r4,88(sp)
 8008c04:	d9400717 	ldw	r5,28(sp)
 8008c08:	800aa6c0 	call	800aa6c <_Bfree>
 8008c0c:	e0000005 	stb	zero,0(fp)
 8008c10:	d9800d17 	ldw	r6,52(sp)
 8008c14:	d8c02717 	ldw	r3,156(sp)
 8008c18:	d9002917 	ldw	r4,164(sp)
 8008c1c:	30800044 	addi	r2,r6,1
 8008c20:	18800015 	stw	r2,0(r3)
 8008c24:	20029c26 	beq	r4,zero,8009698 <_dtoa_r+0x11c0>
 8008c28:	d8c00517 	ldw	r3,20(sp)
 8008c2c:	27000015 	stw	fp,0(r4)
 8008c30:	003e5d06 	br	80085a8 <_dtoa_r+0xd0>
 8008c34:	d9800d17 	ldw	r6,52(sp)
 8008c38:	00c20074 	movhi	r3,2049
 8008c3c:	18dd6e04 	addi	r3,r3,30136
 8008c40:	d9001217 	ldw	r4,72(sp)
 8008c44:	300490fa 	slli	r2,r6,3
 8008c48:	d9401317 	ldw	r5,76(sp)
 8008c4c:	10c5883a 	add	r2,r2,r3
 8008c50:	12000017 	ldw	r8,0(r2)
 8008c54:	12400117 	ldw	r9,4(r2)
 8008c58:	400d883a 	mov	r6,r8
 8008c5c:	480f883a 	mov	r7,r9
 8008c60:	800df940 	call	800df94 <__ltdf2>
 8008c64:	1000030e 	bge	r2,zero,8008c74 <_dtoa_r+0x79c>
 8008c68:	d8800d17 	ldw	r2,52(sp)
 8008c6c:	10bfffc4 	addi	r2,r2,-1
 8008c70:	d8800d15 	stw	r2,52(sp)
 8008c74:	d8000c15 	stw	zero,48(sp)
 8008c78:	003ea806 	br	800871c <_dtoa_r+0x244>
 8008c7c:	d9000b17 	ldw	r4,44(sp)
 8008c80:	202cc03a 	cmpne	r22,r4,zero
 8008c84:	b000c71e 	bne	r22,zero,8008fa4 <_dtoa_r+0xacc>
 8008c88:	dc001117 	ldw	r16,68(sp)
 8008c8c:	dc801017 	ldw	r18,64(sp)
 8008c90:	0027883a 	mov	r19,zero
 8008c94:	04000b0e 	bge	zero,r16,8008cc4 <_dtoa_r+0x7ec>
 8008c98:	d8c00a17 	ldw	r3,40(sp)
 8008c9c:	00c0090e 	bge	zero,r3,8008cc4 <_dtoa_r+0x7ec>
 8008ca0:	8005883a 	mov	r2,r16
 8008ca4:	1c011316 	blt	r3,r16,80090f4 <_dtoa_r+0xc1c>
 8008ca8:	d9000a17 	ldw	r4,40(sp)
 8008cac:	d9801117 	ldw	r6,68(sp)
 8008cb0:	80a1c83a 	sub	r16,r16,r2
 8008cb4:	2089c83a 	sub	r4,r4,r2
 8008cb8:	308dc83a 	sub	r6,r6,r2
 8008cbc:	d9000a15 	stw	r4,40(sp)
 8008cc0:	d9801115 	stw	r6,68(sp)
 8008cc4:	d8801017 	ldw	r2,64(sp)
 8008cc8:	0080150e 	bge	zero,r2,8008d20 <_dtoa_r+0x848>
 8008ccc:	d8c00b17 	ldw	r3,44(sp)
 8008cd0:	1805003a 	cmpeq	r2,r3,zero
 8008cd4:	1001c91e 	bne	r2,zero,80093fc <_dtoa_r+0xf24>
 8008cd8:	04800e0e 	bge	zero,r18,8008d14 <_dtoa_r+0x83c>
 8008cdc:	d9001617 	ldw	r4,88(sp)
 8008ce0:	980b883a 	mov	r5,r19
 8008ce4:	900d883a 	mov	r6,r18
 8008ce8:	800b8200 	call	800b820 <__pow5mult>
 8008cec:	d9001617 	ldw	r4,88(sp)
 8008cf0:	d9800717 	ldw	r6,28(sp)
 8008cf4:	100b883a 	mov	r5,r2
 8008cf8:	1027883a 	mov	r19,r2
 8008cfc:	800b4fc0 	call	800b4fc <__multiply>
 8008d00:	d9001617 	ldw	r4,88(sp)
 8008d04:	d9400717 	ldw	r5,28(sp)
 8008d08:	1023883a 	mov	r17,r2
 8008d0c:	800aa6c0 	call	800aa6c <_Bfree>
 8008d10:	dc400715 	stw	r17,28(sp)
 8008d14:	d9001017 	ldw	r4,64(sp)
 8008d18:	248dc83a 	sub	r6,r4,r18
 8008d1c:	30010e1e 	bne	r6,zero,8009158 <_dtoa_r+0xc80>
 8008d20:	d9001617 	ldw	r4,88(sp)
 8008d24:	04400044 	movi	r17,1
 8008d28:	880b883a 	mov	r5,r17
 8008d2c:	800b6e40 	call	800b6e4 <__i2b>
 8008d30:	d9800917 	ldw	r6,36(sp)
 8008d34:	1025883a 	mov	r18,r2
 8008d38:	0180040e 	bge	zero,r6,8008d4c <_dtoa_r+0x874>
 8008d3c:	d9001617 	ldw	r4,88(sp)
 8008d40:	100b883a 	mov	r5,r2
 8008d44:	800b8200 	call	800b820 <__pow5mult>
 8008d48:	1025883a 	mov	r18,r2
 8008d4c:	d8801717 	ldw	r2,92(sp)
 8008d50:	8880f30e 	bge	r17,r2,8009120 <_dtoa_r+0xc48>
 8008d54:	0023883a 	mov	r17,zero
 8008d58:	d9800917 	ldw	r6,36(sp)
 8008d5c:	30019e1e 	bne	r6,zero,80093d8 <_dtoa_r+0xf00>
 8008d60:	00c00044 	movi	r3,1
 8008d64:	d9000a17 	ldw	r4,40(sp)
 8008d68:	20c5883a 	add	r2,r4,r3
 8008d6c:	10c007cc 	andi	r3,r2,31
 8008d70:	1800841e 	bne	r3,zero,8008f84 <_dtoa_r+0xaac>
 8008d74:	00800704 	movi	r2,28
 8008d78:	d9000a17 	ldw	r4,40(sp)
 8008d7c:	d9801117 	ldw	r6,68(sp)
 8008d80:	80a1883a 	add	r16,r16,r2
 8008d84:	2089883a 	add	r4,r4,r2
 8008d88:	308d883a 	add	r6,r6,r2
 8008d8c:	d9000a15 	stw	r4,40(sp)
 8008d90:	d9801115 	stw	r6,68(sp)
 8008d94:	d8801117 	ldw	r2,68(sp)
 8008d98:	0080050e 	bge	zero,r2,8008db0 <_dtoa_r+0x8d8>
 8008d9c:	d9400717 	ldw	r5,28(sp)
 8008da0:	d9001617 	ldw	r4,88(sp)
 8008da4:	100d883a 	mov	r6,r2
 8008da8:	800b3b00 	call	800b3b0 <__lshift>
 8008dac:	d8800715 	stw	r2,28(sp)
 8008db0:	d8c00a17 	ldw	r3,40(sp)
 8008db4:	00c0050e 	bge	zero,r3,8008dcc <_dtoa_r+0x8f4>
 8008db8:	d9001617 	ldw	r4,88(sp)
 8008dbc:	900b883a 	mov	r5,r18
 8008dc0:	180d883a 	mov	r6,r3
 8008dc4:	800b3b00 	call	800b3b0 <__lshift>
 8008dc8:	1025883a 	mov	r18,r2
 8008dcc:	d9000c17 	ldw	r4,48(sp)
 8008dd0:	2005003a 	cmpeq	r2,r4,zero
 8008dd4:	10016f26 	beq	r2,zero,8009394 <_dtoa_r+0xebc>
 8008dd8:	d9000f17 	ldw	r4,60(sp)
 8008ddc:	0102170e 	bge	zero,r4,800963c <_dtoa_r+0x1164>
 8008de0:	d9800b17 	ldw	r6,44(sp)
 8008de4:	3005003a 	cmpeq	r2,r6,zero
 8008de8:	1000881e 	bne	r2,zero,800900c <_dtoa_r+0xb34>
 8008dec:	0400050e 	bge	zero,r16,8008e04 <_dtoa_r+0x92c>
 8008df0:	d9001617 	ldw	r4,88(sp)
 8008df4:	980b883a 	mov	r5,r19
 8008df8:	800d883a 	mov	r6,r16
 8008dfc:	800b3b00 	call	800b3b0 <__lshift>
 8008e00:	1027883a 	mov	r19,r2
 8008e04:	8804c03a 	cmpne	r2,r17,zero
 8008e08:	1002541e 	bne	r2,zero,800975c <_dtoa_r+0x1284>
 8008e0c:	980b883a 	mov	r5,r19
 8008e10:	dd800517 	ldw	r22,20(sp)
 8008e14:	dcc00615 	stw	r19,24(sp)
 8008e18:	a700004c 	andi	fp,r20,1
 8008e1c:	2827883a 	mov	r19,r5
 8008e20:	d9000717 	ldw	r4,28(sp)
 8008e24:	900b883a 	mov	r5,r18
 8008e28:	80082c00 	call	80082c0 <quorem>
 8008e2c:	d9000717 	ldw	r4,28(sp)
 8008e30:	d9400617 	ldw	r5,24(sp)
 8008e34:	1023883a 	mov	r17,r2
 8008e38:	8dc00c04 	addi	r23,r17,48
 8008e3c:	800abc80 	call	800abc8 <__mcmp>
 8008e40:	d9001617 	ldw	r4,88(sp)
 8008e44:	900b883a 	mov	r5,r18
 8008e48:	980d883a 	mov	r6,r19
 8008e4c:	1029883a 	mov	r20,r2
 8008e50:	800b2240 	call	800b224 <__mdiff>
 8008e54:	102b883a 	mov	r21,r2
 8008e58:	10800317 	ldw	r2,12(r2)
 8008e5c:	1001281e 	bne	r2,zero,8009300 <_dtoa_r+0xe28>
 8008e60:	d9000717 	ldw	r4,28(sp)
 8008e64:	a80b883a 	mov	r5,r21
 8008e68:	800abc80 	call	800abc8 <__mcmp>
 8008e6c:	d9001617 	ldw	r4,88(sp)
 8008e70:	1021883a 	mov	r16,r2
 8008e74:	a80b883a 	mov	r5,r21
 8008e78:	800aa6c0 	call	800aa6c <_Bfree>
 8008e7c:	8000041e 	bne	r16,zero,8008e90 <_dtoa_r+0x9b8>
 8008e80:	d8801717 	ldw	r2,92(sp)
 8008e84:	1000021e 	bne	r2,zero,8008e90 <_dtoa_r+0x9b8>
 8008e88:	e004c03a 	cmpne	r2,fp,zero
 8008e8c:	10011726 	beq	r2,zero,80092ec <_dtoa_r+0xe14>
 8008e90:	a0010616 	blt	r20,zero,80092ac <_dtoa_r+0xdd4>
 8008e94:	a000041e 	bne	r20,zero,8008ea8 <_dtoa_r+0x9d0>
 8008e98:	d8c01717 	ldw	r3,92(sp)
 8008e9c:	1800021e 	bne	r3,zero,8008ea8 <_dtoa_r+0x9d0>
 8008ea0:	e004c03a 	cmpne	r2,fp,zero
 8008ea4:	10010126 	beq	r2,zero,80092ac <_dtoa_r+0xdd4>
 8008ea8:	04023d16 	blt	zero,r16,80097a0 <_dtoa_r+0x12c8>
 8008eac:	b5c00005 	stb	r23,0(r22)
 8008eb0:	d9800517 	ldw	r6,20(sp)
 8008eb4:	d9000f17 	ldw	r4,60(sp)
 8008eb8:	b5800044 	addi	r22,r22,1
 8008ebc:	3105883a 	add	r2,r6,r4
 8008ec0:	b0806526 	beq	r22,r2,8009058 <_dtoa_r+0xb80>
 8008ec4:	d9400717 	ldw	r5,28(sp)
 8008ec8:	d9001617 	ldw	r4,88(sp)
 8008ecc:	01800284 	movi	r6,10
 8008ed0:	000f883a 	mov	r7,zero
 8008ed4:	800b7200 	call	800b720 <__multadd>
 8008ed8:	d8800715 	stw	r2,28(sp)
 8008edc:	d8800617 	ldw	r2,24(sp)
 8008ee0:	14c10c26 	beq	r2,r19,8009314 <_dtoa_r+0xe3c>
 8008ee4:	d9400617 	ldw	r5,24(sp)
 8008ee8:	d9001617 	ldw	r4,88(sp)
 8008eec:	01800284 	movi	r6,10
 8008ef0:	000f883a 	mov	r7,zero
 8008ef4:	800b7200 	call	800b720 <__multadd>
 8008ef8:	d9001617 	ldw	r4,88(sp)
 8008efc:	980b883a 	mov	r5,r19
 8008f00:	01800284 	movi	r6,10
 8008f04:	000f883a 	mov	r7,zero
 8008f08:	d8800615 	stw	r2,24(sp)
 8008f0c:	800b7200 	call	800b720 <__multadd>
 8008f10:	1027883a 	mov	r19,r2
 8008f14:	003fc206 	br	8008e20 <_dtoa_r+0x948>
 8008f18:	2445c83a 	sub	r2,r4,r17
 8008f1c:	a088983a 	sll	r4,r20,r2
 8008f20:	003e4b06 	br	8008850 <_dtoa_r+0x378>
 8008f24:	01bfffc4 	movi	r6,-1
 8008f28:	00800044 	movi	r2,1
 8008f2c:	d9800e15 	stw	r6,56(sp)
 8008f30:	d9800f15 	stw	r6,60(sp)
 8008f34:	d8800b15 	stw	r2,44(sp)
 8008f38:	d8c01617 	ldw	r3,88(sp)
 8008f3c:	008005c4 	movi	r2,23
 8008f40:	18001115 	stw	zero,68(r3)
 8008f44:	1580082e 	bgeu	r2,r22,8008f68 <_dtoa_r+0xa90>
 8008f48:	00c00104 	movi	r3,4
 8008f4c:	0009883a 	mov	r4,zero
 8008f50:	18c7883a 	add	r3,r3,r3
 8008f54:	18800504 	addi	r2,r3,20
 8008f58:	21000044 	addi	r4,r4,1
 8008f5c:	b0bffc2e 	bgeu	r22,r2,8008f50 <_dtoa_r+0xa78>
 8008f60:	d9801617 	ldw	r6,88(sp)
 8008f64:	31001115 	stw	r4,68(r6)
 8008f68:	dc000f17 	ldw	r16,60(sp)
 8008f6c:	003e4b06 	br	800889c <_dtoa_r+0x3c4>
 8008f70:	d9801717 	ldw	r6,92(sp)
 8008f74:	0023883a 	mov	r17,zero
 8008f78:	31bfff04 	addi	r6,r6,-4
 8008f7c:	d9801715 	stw	r6,92(sp)
 8008f80:	003df806 	br	8008764 <_dtoa_r+0x28c>
 8008f84:	00800804 	movi	r2,32
 8008f88:	10c9c83a 	sub	r4,r2,r3
 8008f8c:	00c00104 	movi	r3,4
 8008f90:	19005a16 	blt	r3,r4,80090fc <_dtoa_r+0xc24>
 8008f94:	008000c4 	movi	r2,3
 8008f98:	113f7e16 	blt	r2,r4,8008d94 <_dtoa_r+0x8bc>
 8008f9c:	20800704 	addi	r2,r4,28
 8008fa0:	003f7506 	br	8008d78 <_dtoa_r+0x8a0>
 8008fa4:	d9801717 	ldw	r6,92(sp)
 8008fa8:	00800044 	movi	r2,1
 8008fac:	1180a10e 	bge	r2,r6,8009234 <_dtoa_r+0xd5c>
 8008fb0:	d9800f17 	ldw	r6,60(sp)
 8008fb4:	d8c01017 	ldw	r3,64(sp)
 8008fb8:	30bfffc4 	addi	r2,r6,-1
 8008fbc:	1881c616 	blt	r3,r2,80096d8 <_dtoa_r+0x1200>
 8008fc0:	18a5c83a 	sub	r18,r3,r2
 8008fc4:	d8800f17 	ldw	r2,60(sp)
 8008fc8:	10026216 	blt	r2,zero,8009954 <_dtoa_r+0x147c>
 8008fcc:	dc001117 	ldw	r16,68(sp)
 8008fd0:	1007883a 	mov	r3,r2
 8008fd4:	d9800a17 	ldw	r6,40(sp)
 8008fd8:	d8801117 	ldw	r2,68(sp)
 8008fdc:	d9001617 	ldw	r4,88(sp)
 8008fe0:	30cd883a 	add	r6,r6,r3
 8008fe4:	10c5883a 	add	r2,r2,r3
 8008fe8:	01400044 	movi	r5,1
 8008fec:	d9800a15 	stw	r6,40(sp)
 8008ff0:	d8801115 	stw	r2,68(sp)
 8008ff4:	800b6e40 	call	800b6e4 <__i2b>
 8008ff8:	1027883a 	mov	r19,r2
 8008ffc:	003f2506 	br	8008c94 <_dtoa_r+0x7bc>
 8009000:	00c20074 	movhi	r3,2049
 8009004:	18dd5104 	addi	r3,r3,30020
 8009008:	003d6706 	br	80085a8 <_dtoa_r+0xd0>
 800900c:	dd800517 	ldw	r22,20(sp)
 8009010:	04000044 	movi	r16,1
 8009014:	00000706 	br	8009034 <_dtoa_r+0xb5c>
 8009018:	d9400717 	ldw	r5,28(sp)
 800901c:	d9001617 	ldw	r4,88(sp)
 8009020:	01800284 	movi	r6,10
 8009024:	000f883a 	mov	r7,zero
 8009028:	800b7200 	call	800b720 <__multadd>
 800902c:	d8800715 	stw	r2,28(sp)
 8009030:	84000044 	addi	r16,r16,1
 8009034:	d9000717 	ldw	r4,28(sp)
 8009038:	900b883a 	mov	r5,r18
 800903c:	80082c00 	call	80082c0 <quorem>
 8009040:	15c00c04 	addi	r23,r2,48
 8009044:	b5c00005 	stb	r23,0(r22)
 8009048:	d8c00f17 	ldw	r3,60(sp)
 800904c:	b5800044 	addi	r22,r22,1
 8009050:	80fff116 	blt	r16,r3,8009018 <_dtoa_r+0xb40>
 8009054:	d8000615 	stw	zero,24(sp)
 8009058:	d9400717 	ldw	r5,28(sp)
 800905c:	d9001617 	ldw	r4,88(sp)
 8009060:	01800044 	movi	r6,1
 8009064:	800b3b00 	call	800b3b0 <__lshift>
 8009068:	1009883a 	mov	r4,r2
 800906c:	900b883a 	mov	r5,r18
 8009070:	d8800715 	stw	r2,28(sp)
 8009074:	800abc80 	call	800abc8 <__mcmp>
 8009078:	00803c0e 	bge	zero,r2,800916c <_dtoa_r+0xc94>
 800907c:	b009883a 	mov	r4,r22
 8009080:	213fffc4 	addi	r4,r4,-1
 8009084:	21400003 	ldbu	r5,0(r4)
 8009088:	00800e44 	movi	r2,57
 800908c:	28c03fcc 	andi	r3,r5,255
 8009090:	18c0201c 	xori	r3,r3,128
 8009094:	18ffe004 	addi	r3,r3,-128
 8009098:	1881981e 	bne	r3,r2,80096fc <_dtoa_r+0x1224>
 800909c:	d9800517 	ldw	r6,20(sp)
 80090a0:	21bff71e 	bne	r4,r6,8009080 <_dtoa_r+0xba8>
 80090a4:	d8800d17 	ldw	r2,52(sp)
 80090a8:	37000044 	addi	fp,r6,1
 80090ac:	10800044 	addi	r2,r2,1
 80090b0:	d8800d15 	stw	r2,52(sp)
 80090b4:	00800c44 	movi	r2,49
 80090b8:	30800005 	stb	r2,0(r6)
 80090bc:	d9001617 	ldw	r4,88(sp)
 80090c0:	900b883a 	mov	r5,r18
 80090c4:	800aa6c0 	call	800aa6c <_Bfree>
 80090c8:	983ecd26 	beq	r19,zero,8008c00 <_dtoa_r+0x728>
 80090cc:	d8c00617 	ldw	r3,24(sp)
 80090d0:	18000426 	beq	r3,zero,80090e4 <_dtoa_r+0xc0c>
 80090d4:	1cc00326 	beq	r3,r19,80090e4 <_dtoa_r+0xc0c>
 80090d8:	d9001617 	ldw	r4,88(sp)
 80090dc:	180b883a 	mov	r5,r3
 80090e0:	800aa6c0 	call	800aa6c <_Bfree>
 80090e4:	d9001617 	ldw	r4,88(sp)
 80090e8:	980b883a 	mov	r5,r19
 80090ec:	800aa6c0 	call	800aa6c <_Bfree>
 80090f0:	003ec306 	br	8008c00 <_dtoa_r+0x728>
 80090f4:	1805883a 	mov	r2,r3
 80090f8:	003eeb06 	br	8008ca8 <_dtoa_r+0x7d0>
 80090fc:	d9800a17 	ldw	r6,40(sp)
 8009100:	d8c01117 	ldw	r3,68(sp)
 8009104:	20bfff04 	addi	r2,r4,-4
 8009108:	308d883a 	add	r6,r6,r2
 800910c:	1887883a 	add	r3,r3,r2
 8009110:	80a1883a 	add	r16,r16,r2
 8009114:	d9800a15 	stw	r6,40(sp)
 8009118:	d8c01115 	stw	r3,68(sp)
 800911c:	003f1d06 	br	8008d94 <_dtoa_r+0x8bc>
 8009120:	a03f0c1e 	bne	r20,zero,8008d54 <_dtoa_r+0x87c>
 8009124:	00800434 	movhi	r2,16
 8009128:	10bfffc4 	addi	r2,r2,-1
 800912c:	a884703a 	and	r2,r21,r2
 8009130:	103f081e 	bne	r2,zero,8008d54 <_dtoa_r+0x87c>
 8009134:	a89ffc2c 	andhi	r2,r21,32752
 8009138:	103f0626 	beq	r2,zero,8008d54 <_dtoa_r+0x87c>
 800913c:	d8c01117 	ldw	r3,68(sp)
 8009140:	d9000a17 	ldw	r4,40(sp)
 8009144:	18c00044 	addi	r3,r3,1
 8009148:	21000044 	addi	r4,r4,1
 800914c:	d8c01115 	stw	r3,68(sp)
 8009150:	d9000a15 	stw	r4,40(sp)
 8009154:	003f0006 	br	8008d58 <_dtoa_r+0x880>
 8009158:	d9400717 	ldw	r5,28(sp)
 800915c:	d9001617 	ldw	r4,88(sp)
 8009160:	800b8200 	call	800b820 <__pow5mult>
 8009164:	d8800715 	stw	r2,28(sp)
 8009168:	003eed06 	br	8008d20 <_dtoa_r+0x848>
 800916c:	1000021e 	bne	r2,zero,8009178 <_dtoa_r+0xca0>
 8009170:	b880004c 	andi	r2,r23,1
 8009174:	103fc11e 	bne	r2,zero,800907c <_dtoa_r+0xba4>
 8009178:	b5bfffc4 	addi	r22,r22,-1
 800917c:	b0c00007 	ldb	r3,0(r22)
 8009180:	00800c04 	movi	r2,48
 8009184:	18bffc26 	beq	r3,r2,8009178 <_dtoa_r+0xca0>
 8009188:	b7000044 	addi	fp,r22,1
 800918c:	003fcb06 	br	80090bc <_dtoa_r+0xbe4>
 8009190:	d9800d17 	ldw	r6,52(sp)
 8009194:	018fc83a 	sub	r7,zero,r6
 8009198:	3801f726 	beq	r7,zero,8009978 <_dtoa_r+0x14a0>
 800919c:	398003cc 	andi	r6,r7,15
 80091a0:	300c90fa 	slli	r6,r6,3
 80091a4:	01420074 	movhi	r5,2049
 80091a8:	295d6e04 	addi	r5,r5,30136
 80091ac:	d9001217 	ldw	r4,72(sp)
 80091b0:	314d883a 	add	r6,r6,r5
 80091b4:	30c00117 	ldw	r3,4(r6)
 80091b8:	30800017 	ldw	r2,0(r6)
 80091bc:	d9401317 	ldw	r5,76(sp)
 80091c0:	3821d13a 	srai	r16,r7,4
 80091c4:	100d883a 	mov	r6,r2
 80091c8:	180f883a 	mov	r7,r3
 80091cc:	800d7580 	call	800d758 <__muldf3>
 80091d0:	1011883a 	mov	r8,r2
 80091d4:	1813883a 	mov	r9,r3
 80091d8:	1029883a 	mov	r20,r2
 80091dc:	182b883a 	mov	r21,r3
 80091e0:	8001e526 	beq	r16,zero,8009978 <_dtoa_r+0x14a0>
 80091e4:	05800084 	movi	r22,2
 80091e8:	04420074 	movhi	r17,2049
 80091ec:	8c5da004 	addi	r17,r17,30336
 80091f0:	8080004c 	andi	r2,r16,1
 80091f4:	1005003a 	cmpeq	r2,r2,zero
 80091f8:	1000081e 	bne	r2,zero,800921c <_dtoa_r+0xd44>
 80091fc:	89800017 	ldw	r6,0(r17)
 8009200:	89c00117 	ldw	r7,4(r17)
 8009204:	480b883a 	mov	r5,r9
 8009208:	4009883a 	mov	r4,r8
 800920c:	800d7580 	call	800d758 <__muldf3>
 8009210:	1011883a 	mov	r8,r2
 8009214:	b5800044 	addi	r22,r22,1
 8009218:	1813883a 	mov	r9,r3
 800921c:	8021d07a 	srai	r16,r16,1
 8009220:	8c400204 	addi	r17,r17,8
 8009224:	803ff21e 	bne	r16,zero,80091f0 <_dtoa_r+0xd18>
 8009228:	4029883a 	mov	r20,r8
 800922c:	482b883a 	mov	r21,r9
 8009230:	003dca06 	br	800895c <_dtoa_r+0x484>
 8009234:	d9000817 	ldw	r4,32(sp)
 8009238:	2005003a 	cmpeq	r2,r4,zero
 800923c:	1001f61e 	bne	r2,zero,8009a18 <_dtoa_r+0x1540>
 8009240:	dc001117 	ldw	r16,68(sp)
 8009244:	dc801017 	ldw	r18,64(sp)
 8009248:	18c10cc4 	addi	r3,r3,1075
 800924c:	003f6106 	br	8008fd4 <_dtoa_r+0xafc>
 8009250:	d8000b15 	stw	zero,44(sp)
 8009254:	d9802617 	ldw	r6,152(sp)
 8009258:	d8c00d17 	ldw	r3,52(sp)
 800925c:	30800044 	addi	r2,r6,1
 8009260:	18ad883a 	add	r22,r3,r2
 8009264:	b13fffc4 	addi	r4,r22,-1
 8009268:	d9000e15 	stw	r4,56(sp)
 800926c:	0581f60e 	bge	zero,r22,8009a48 <_dtoa_r+0x1570>
 8009270:	dd800f15 	stw	r22,60(sp)
 8009274:	003f3006 	br	8008f38 <_dtoa_r+0xa60>
 8009278:	d8000b15 	stw	zero,44(sp)
 800927c:	d9002617 	ldw	r4,152(sp)
 8009280:	0101eb0e 	bge	zero,r4,8009a30 <_dtoa_r+0x1558>
 8009284:	202d883a 	mov	r22,r4
 8009288:	d9000e15 	stw	r4,56(sp)
 800928c:	d9000f15 	stw	r4,60(sp)
 8009290:	003f2906 	br	8008f38 <_dtoa_r+0xa60>
 8009294:	01800044 	movi	r6,1
 8009298:	d9800b15 	stw	r6,44(sp)
 800929c:	003ff706 	br	800927c <_dtoa_r+0xda4>
 80092a0:	01000044 	movi	r4,1
 80092a4:	d9000b15 	stw	r4,44(sp)
 80092a8:	003fea06 	br	8009254 <_dtoa_r+0xd7c>
 80092ac:	04000c0e 	bge	zero,r16,80092e0 <_dtoa_r+0xe08>
 80092b0:	d9400717 	ldw	r5,28(sp)
 80092b4:	d9001617 	ldw	r4,88(sp)
 80092b8:	01800044 	movi	r6,1
 80092bc:	800b3b00 	call	800b3b0 <__lshift>
 80092c0:	1009883a 	mov	r4,r2
 80092c4:	900b883a 	mov	r5,r18
 80092c8:	d8800715 	stw	r2,28(sp)
 80092cc:	800abc80 	call	800abc8 <__mcmp>
 80092d0:	0081e00e 	bge	zero,r2,8009a54 <_dtoa_r+0x157c>
 80092d4:	bdc00044 	addi	r23,r23,1
 80092d8:	00800e84 	movi	r2,58
 80092dc:	b881a226 	beq	r23,r2,8009968 <_dtoa_r+0x1490>
 80092e0:	b7000044 	addi	fp,r22,1
 80092e4:	b5c00005 	stb	r23,0(r22)
 80092e8:	003f7406 	br	80090bc <_dtoa_r+0xbe4>
 80092ec:	00800e44 	movi	r2,57
 80092f0:	b8819d26 	beq	r23,r2,8009968 <_dtoa_r+0x1490>
 80092f4:	053ffa0e 	bge	zero,r20,80092e0 <_dtoa_r+0xe08>
 80092f8:	8dc00c44 	addi	r23,r17,49
 80092fc:	003ff806 	br	80092e0 <_dtoa_r+0xe08>
 8009300:	d9001617 	ldw	r4,88(sp)
 8009304:	a80b883a 	mov	r5,r21
 8009308:	04000044 	movi	r16,1
 800930c:	800aa6c0 	call	800aa6c <_Bfree>
 8009310:	003edf06 	br	8008e90 <_dtoa_r+0x9b8>
 8009314:	d9001617 	ldw	r4,88(sp)
 8009318:	980b883a 	mov	r5,r19
 800931c:	01800284 	movi	r6,10
 8009320:	000f883a 	mov	r7,zero
 8009324:	800b7200 	call	800b720 <__multadd>
 8009328:	1027883a 	mov	r19,r2
 800932c:	d8800615 	stw	r2,24(sp)
 8009330:	003ebb06 	br	8008e20 <_dtoa_r+0x948>
 8009334:	d9801117 	ldw	r6,68(sp)
 8009338:	d8800d17 	ldw	r2,52(sp)
 800933c:	d8000915 	stw	zero,36(sp)
 8009340:	308dc83a 	sub	r6,r6,r2
 8009344:	0087c83a 	sub	r3,zero,r2
 8009348:	d9801115 	stw	r6,68(sp)
 800934c:	d8c01015 	stw	r3,64(sp)
 8009350:	003cfe06 	br	800874c <_dtoa_r+0x274>
 8009354:	018dc83a 	sub	r6,zero,r6
 8009358:	d9801115 	stw	r6,68(sp)
 800935c:	d8000a15 	stw	zero,40(sp)
 8009360:	003cf306 	br	8008730 <_dtoa_r+0x258>
 8009364:	d9000d17 	ldw	r4,52(sp)
 8009368:	800e01c0 	call	800e01c <__floatsidf>
 800936c:	880b883a 	mov	r5,r17
 8009370:	8009883a 	mov	r4,r16
 8009374:	180f883a 	mov	r7,r3
 8009378:	100d883a 	mov	r6,r2
 800937c:	800ddfc0 	call	800ddfc <__nedf2>
 8009380:	103ce126 	beq	r2,zero,8008708 <_dtoa_r+0x230>
 8009384:	d9800d17 	ldw	r6,52(sp)
 8009388:	31bfffc4 	addi	r6,r6,-1
 800938c:	d9800d15 	stw	r6,52(sp)
 8009390:	003cdd06 	br	8008708 <_dtoa_r+0x230>
 8009394:	d9000717 	ldw	r4,28(sp)
 8009398:	900b883a 	mov	r5,r18
 800939c:	800abc80 	call	800abc8 <__mcmp>
 80093a0:	103e8d0e 	bge	r2,zero,8008dd8 <_dtoa_r+0x900>
 80093a4:	d9400717 	ldw	r5,28(sp)
 80093a8:	d9001617 	ldw	r4,88(sp)
 80093ac:	01800284 	movi	r6,10
 80093b0:	000f883a 	mov	r7,zero
 80093b4:	800b7200 	call	800b720 <__multadd>
 80093b8:	d9800d17 	ldw	r6,52(sp)
 80093bc:	d8800715 	stw	r2,28(sp)
 80093c0:	31bfffc4 	addi	r6,r6,-1
 80093c4:	d9800d15 	stw	r6,52(sp)
 80093c8:	b001a71e 	bne	r22,zero,8009a68 <_dtoa_r+0x1590>
 80093cc:	d8800e17 	ldw	r2,56(sp)
 80093d0:	d8800f15 	stw	r2,60(sp)
 80093d4:	003e8006 	br	8008dd8 <_dtoa_r+0x900>
 80093d8:	90800417 	ldw	r2,16(r18)
 80093dc:	1085883a 	add	r2,r2,r2
 80093e0:	1085883a 	add	r2,r2,r2
 80093e4:	1485883a 	add	r2,r2,r18
 80093e8:	11000417 	ldw	r4,16(r2)
 80093ec:	800aa940 	call	800aa94 <__hi0bits>
 80093f0:	00c00804 	movi	r3,32
 80093f4:	1887c83a 	sub	r3,r3,r2
 80093f8:	003e5a06 	br	8008d64 <_dtoa_r+0x88c>
 80093fc:	d9400717 	ldw	r5,28(sp)
 8009400:	d9801017 	ldw	r6,64(sp)
 8009404:	d9001617 	ldw	r4,88(sp)
 8009408:	800b8200 	call	800b820 <__pow5mult>
 800940c:	d8800715 	stw	r2,28(sp)
 8009410:	003e4306 	br	8008d20 <_dtoa_r+0x848>
 8009414:	d9800f17 	ldw	r6,60(sp)
 8009418:	d8800d17 	ldw	r2,52(sp)
 800941c:	d9800315 	stw	r6,12(sp)
 8009420:	d8800415 	stw	r2,16(sp)
 8009424:	d8c00b17 	ldw	r3,44(sp)
 8009428:	1805003a 	cmpeq	r2,r3,zero
 800942c:	1000e21e 	bne	r2,zero,80097b8 <_dtoa_r+0x12e0>
 8009430:	d9000317 	ldw	r4,12(sp)
 8009434:	0005883a 	mov	r2,zero
 8009438:	00cff834 	movhi	r3,16352
 800943c:	200c90fa 	slli	r6,r4,3
 8009440:	01020074 	movhi	r4,2049
 8009444:	211d6e04 	addi	r4,r4,30136
 8009448:	180b883a 	mov	r5,r3
 800944c:	310d883a 	add	r6,r6,r4
 8009450:	327fff17 	ldw	r9,-4(r6)
 8009454:	323ffe17 	ldw	r8,-8(r6)
 8009458:	1009883a 	mov	r4,r2
 800945c:	480f883a 	mov	r7,r9
 8009460:	400d883a 	mov	r6,r8
 8009464:	800db1c0 	call	800db1c <__divdf3>
 8009468:	180b883a 	mov	r5,r3
 800946c:	b00d883a 	mov	r6,r22
 8009470:	b80f883a 	mov	r7,r23
 8009474:	1009883a 	mov	r4,r2
 8009478:	800d6640 	call	800d664 <__subdf3>
 800947c:	a80b883a 	mov	r5,r21
 8009480:	a009883a 	mov	r4,r20
 8009484:	d8c01915 	stw	r3,100(sp)
 8009488:	d8801815 	stw	r2,96(sp)
 800948c:	800e1140 	call	800e114 <__fixdfsi>
 8009490:	1009883a 	mov	r4,r2
 8009494:	1027883a 	mov	r19,r2
 8009498:	800e01c0 	call	800e01c <__floatsidf>
 800949c:	a80b883a 	mov	r5,r21
 80094a0:	a009883a 	mov	r4,r20
 80094a4:	180f883a 	mov	r7,r3
 80094a8:	100d883a 	mov	r6,r2
 80094ac:	800d6640 	call	800d664 <__subdf3>
 80094b0:	d9801817 	ldw	r6,96(sp)
 80094b4:	1823883a 	mov	r17,r3
 80094b8:	d8801415 	stw	r2,80(sp)
 80094bc:	302d883a 	mov	r22,r6
 80094c0:	d9800517 	ldw	r6,20(sp)
 80094c4:	9cc00c04 	addi	r19,r19,48
 80094c8:	dc401515 	stw	r17,84(sp)
 80094cc:	d8c01917 	ldw	r3,100(sp)
 80094d0:	34c00005 	stb	r19,0(r6)
 80094d4:	d8800517 	ldw	r2,20(sp)
 80094d8:	d9401917 	ldw	r5,100(sp)
 80094dc:	d9801417 	ldw	r6,80(sp)
 80094e0:	b009883a 	mov	r4,r22
 80094e4:	880f883a 	mov	r7,r17
 80094e8:	182f883a 	mov	r23,r3
 80094ec:	17000044 	addi	fp,r2,1
 80094f0:	800de840 	call	800de84 <__gtdf2>
 80094f4:	00804e16 	blt	zero,r2,8009630 <_dtoa_r+0x1158>
 80094f8:	d9801417 	ldw	r6,80(sp)
 80094fc:	0005883a 	mov	r2,zero
 8009500:	00cffc34 	movhi	r3,16368
 8009504:	180b883a 	mov	r5,r3
 8009508:	880f883a 	mov	r7,r17
 800950c:	1009883a 	mov	r4,r2
 8009510:	800d6640 	call	800d664 <__subdf3>
 8009514:	d9401917 	ldw	r5,100(sp)
 8009518:	180f883a 	mov	r7,r3
 800951c:	b009883a 	mov	r4,r22
 8009520:	100d883a 	mov	r6,r2
 8009524:	800de840 	call	800de84 <__gtdf2>
 8009528:	00bda216 	blt	zero,r2,8008bb4 <_dtoa_r+0x6dc>
 800952c:	d8c00317 	ldw	r3,12(sp)
 8009530:	00800044 	movi	r2,1
 8009534:	10c01216 	blt	r2,r3,8009580 <_dtoa_r+0x10a8>
 8009538:	003d4506 	br	8008a50 <_dtoa_r+0x578>
 800953c:	d9801417 	ldw	r6,80(sp)
 8009540:	0005883a 	mov	r2,zero
 8009544:	00cffc34 	movhi	r3,16368
 8009548:	180b883a 	mov	r5,r3
 800954c:	880f883a 	mov	r7,r17
 8009550:	1009883a 	mov	r4,r2
 8009554:	800d6640 	call	800d664 <__subdf3>
 8009558:	d9c01b17 	ldw	r7,108(sp)
 800955c:	180b883a 	mov	r5,r3
 8009560:	1009883a 	mov	r4,r2
 8009564:	b00d883a 	mov	r6,r22
 8009568:	800df940 	call	800df94 <__ltdf2>
 800956c:	103d9116 	blt	r2,zero,8008bb4 <_dtoa_r+0x6dc>
 8009570:	d9800517 	ldw	r6,20(sp)
 8009574:	d9000317 	ldw	r4,12(sp)
 8009578:	3105883a 	add	r2,r6,r4
 800957c:	e0bd3426 	beq	fp,r2,8008a50 <_dtoa_r+0x578>
 8009580:	04500934 	movhi	r17,16420
 8009584:	0021883a 	mov	r16,zero
 8009588:	b80b883a 	mov	r5,r23
 800958c:	b009883a 	mov	r4,r22
 8009590:	800d883a 	mov	r6,r16
 8009594:	880f883a 	mov	r7,r17
 8009598:	800d7580 	call	800d758 <__muldf3>
 800959c:	d9401517 	ldw	r5,84(sp)
 80095a0:	d9001417 	ldw	r4,80(sp)
 80095a4:	880f883a 	mov	r7,r17
 80095a8:	000d883a 	mov	r6,zero
 80095ac:	d8801a15 	stw	r2,104(sp)
 80095b0:	d8c01b15 	stw	r3,108(sp)
 80095b4:	800d7580 	call	800d758 <__muldf3>
 80095b8:	180b883a 	mov	r5,r3
 80095bc:	1009883a 	mov	r4,r2
 80095c0:	1823883a 	mov	r17,r3
 80095c4:	1021883a 	mov	r16,r2
 80095c8:	800e1140 	call	800e114 <__fixdfsi>
 80095cc:	1009883a 	mov	r4,r2
 80095d0:	102b883a 	mov	r21,r2
 80095d4:	800e01c0 	call	800e01c <__floatsidf>
 80095d8:	880b883a 	mov	r5,r17
 80095dc:	8009883a 	mov	r4,r16
 80095e0:	180f883a 	mov	r7,r3
 80095e4:	100d883a 	mov	r6,r2
 80095e8:	800d6640 	call	800d664 <__subdf3>
 80095ec:	1021883a 	mov	r16,r2
 80095f0:	d9001b17 	ldw	r4,108(sp)
 80095f4:	1823883a 	mov	r17,r3
 80095f8:	dc001415 	stw	r16,80(sp)
 80095fc:	ad400c04 	addi	r21,r21,48
 8009600:	dc401515 	stw	r17,84(sp)
 8009604:	d8801a17 	ldw	r2,104(sp)
 8009608:	e5400005 	stb	r21,0(fp)
 800960c:	202f883a 	mov	r23,r4
 8009610:	d9c01b17 	ldw	r7,108(sp)
 8009614:	d9001417 	ldw	r4,80(sp)
 8009618:	880b883a 	mov	r5,r17
 800961c:	100d883a 	mov	r6,r2
 8009620:	102d883a 	mov	r22,r2
 8009624:	e7000044 	addi	fp,fp,1
 8009628:	800df940 	call	800df94 <__ltdf2>
 800962c:	103fc30e 	bge	r2,zero,800953c <_dtoa_r+0x1064>
 8009630:	d9000417 	ldw	r4,16(sp)
 8009634:	d9000d15 	stw	r4,52(sp)
 8009638:	003d7106 	br	8008c00 <_dtoa_r+0x728>
 800963c:	d9801717 	ldw	r6,92(sp)
 8009640:	00800084 	movi	r2,2
 8009644:	11bde60e 	bge	r2,r6,8008de0 <_dtoa_r+0x908>
 8009648:	203cfb1e 	bne	r4,zero,8008a38 <_dtoa_r+0x560>
 800964c:	d9001617 	ldw	r4,88(sp)
 8009650:	900b883a 	mov	r5,r18
 8009654:	01800144 	movi	r6,5
 8009658:	000f883a 	mov	r7,zero
 800965c:	800b7200 	call	800b720 <__multadd>
 8009660:	d9000717 	ldw	r4,28(sp)
 8009664:	100b883a 	mov	r5,r2
 8009668:	1025883a 	mov	r18,r2
 800966c:	800abc80 	call	800abc8 <__mcmp>
 8009670:	00bcf10e 	bge	zero,r2,8008a38 <_dtoa_r+0x560>
 8009674:	d8c00d17 	ldw	r3,52(sp)
 8009678:	d9000517 	ldw	r4,20(sp)
 800967c:	d8000615 	stw	zero,24(sp)
 8009680:	18c00044 	addi	r3,r3,1
 8009684:	d8c00d15 	stw	r3,52(sp)
 8009688:	00800c44 	movi	r2,49
 800968c:	27000044 	addi	fp,r4,1
 8009690:	20800005 	stb	r2,0(r4)
 8009694:	003e8906 	br	80090bc <_dtoa_r+0xbe4>
 8009698:	d8c00517 	ldw	r3,20(sp)
 800969c:	003bc206 	br	80085a8 <_dtoa_r+0xd0>
 80096a0:	01820074 	movhi	r6,2049
 80096a4:	319da004 	addi	r6,r6,30336
 80096a8:	30c00917 	ldw	r3,36(r6)
 80096ac:	30800817 	ldw	r2,32(r6)
 80096b0:	d9001217 	ldw	r4,72(sp)
 80096b4:	d9401317 	ldw	r5,76(sp)
 80096b8:	180f883a 	mov	r7,r3
 80096bc:	100d883a 	mov	r6,r2
 80096c0:	800db1c0 	call	800db1c <__divdf3>
 80096c4:	948003cc 	andi	r18,r18,15
 80096c8:	058000c4 	movi	r22,3
 80096cc:	1029883a 	mov	r20,r2
 80096d0:	182b883a 	mov	r21,r3
 80096d4:	003c8906 	br	80088fc <_dtoa_r+0x424>
 80096d8:	d9001017 	ldw	r4,64(sp)
 80096dc:	d9800917 	ldw	r6,36(sp)
 80096e0:	0025883a 	mov	r18,zero
 80096e4:	1105c83a 	sub	r2,r2,r4
 80096e8:	2089883a 	add	r4,r4,r2
 80096ec:	308d883a 	add	r6,r6,r2
 80096f0:	d9001015 	stw	r4,64(sp)
 80096f4:	d9800915 	stw	r6,36(sp)
 80096f8:	003e3206 	br	8008fc4 <_dtoa_r+0xaec>
 80096fc:	28800044 	addi	r2,r5,1
 8009700:	27000044 	addi	fp,r4,1
 8009704:	20800005 	stb	r2,0(r4)
 8009708:	003e6c06 	br	80090bc <_dtoa_r+0xbe4>
 800970c:	d8800f17 	ldw	r2,60(sp)
 8009710:	00bce016 	blt	zero,r2,8008a94 <_dtoa_r+0x5bc>
 8009714:	d9800f17 	ldw	r6,60(sp)
 8009718:	303cc51e 	bne	r6,zero,8008a30 <_dtoa_r+0x558>
 800971c:	0005883a 	mov	r2,zero
 8009720:	00d00534 	movhi	r3,16404
 8009724:	980b883a 	mov	r5,r19
 8009728:	180f883a 	mov	r7,r3
 800972c:	9009883a 	mov	r4,r18
 8009730:	100d883a 	mov	r6,r2
 8009734:	800d7580 	call	800d758 <__muldf3>
 8009738:	180b883a 	mov	r5,r3
 800973c:	a80f883a 	mov	r7,r21
 8009740:	1009883a 	mov	r4,r2
 8009744:	a00d883a 	mov	r6,r20
 8009748:	800df0c0 	call	800df0c <__gedf2>
 800974c:	103cb80e 	bge	r2,zero,8008a30 <_dtoa_r+0x558>
 8009750:	0027883a 	mov	r19,zero
 8009754:	0025883a 	mov	r18,zero
 8009758:	003fc606 	br	8009674 <_dtoa_r+0x119c>
 800975c:	99400117 	ldw	r5,4(r19)
 8009760:	d9001617 	ldw	r4,88(sp)
 8009764:	800afec0 	call	800afec <_Balloc>
 8009768:	99800417 	ldw	r6,16(r19)
 800976c:	11000304 	addi	r4,r2,12
 8009770:	99400304 	addi	r5,r19,12
 8009774:	318d883a 	add	r6,r6,r6
 8009778:	318d883a 	add	r6,r6,r6
 800977c:	31800204 	addi	r6,r6,8
 8009780:	1023883a 	mov	r17,r2
 8009784:	8005adc0 	call	8005adc <memcpy>
 8009788:	d9001617 	ldw	r4,88(sp)
 800978c:	880b883a 	mov	r5,r17
 8009790:	01800044 	movi	r6,1
 8009794:	800b3b00 	call	800b3b0 <__lshift>
 8009798:	100b883a 	mov	r5,r2
 800979c:	003d9c06 	br	8008e10 <_dtoa_r+0x938>
 80097a0:	00800e44 	movi	r2,57
 80097a4:	b8807026 	beq	r23,r2,8009968 <_dtoa_r+0x1490>
 80097a8:	b8800044 	addi	r2,r23,1
 80097ac:	b7000044 	addi	fp,r22,1
 80097b0:	b0800005 	stb	r2,0(r22)
 80097b4:	003e4106 	br	80090bc <_dtoa_r+0xbe4>
 80097b8:	d8800317 	ldw	r2,12(sp)
 80097bc:	01820074 	movhi	r6,2049
 80097c0:	319d6e04 	addi	r6,r6,30136
 80097c4:	b009883a 	mov	r4,r22
 80097c8:	100e90fa 	slli	r7,r2,3
 80097cc:	b80b883a 	mov	r5,r23
 80097d0:	398f883a 	add	r7,r7,r6
 80097d4:	38bffe17 	ldw	r2,-8(r7)
 80097d8:	d9800517 	ldw	r6,20(sp)
 80097dc:	38ffff17 	ldw	r3,-4(r7)
 80097e0:	37000044 	addi	fp,r6,1
 80097e4:	180f883a 	mov	r7,r3
 80097e8:	100d883a 	mov	r6,r2
 80097ec:	800d7580 	call	800d758 <__muldf3>
 80097f0:	a80b883a 	mov	r5,r21
 80097f4:	a009883a 	mov	r4,r20
 80097f8:	182f883a 	mov	r23,r3
 80097fc:	102d883a 	mov	r22,r2
 8009800:	800e1140 	call	800e114 <__fixdfsi>
 8009804:	1009883a 	mov	r4,r2
 8009808:	1027883a 	mov	r19,r2
 800980c:	800e01c0 	call	800e01c <__floatsidf>
 8009810:	a80b883a 	mov	r5,r21
 8009814:	a009883a 	mov	r4,r20
 8009818:	180f883a 	mov	r7,r3
 800981c:	100d883a 	mov	r6,r2
 8009820:	800d6640 	call	800d664 <__subdf3>
 8009824:	180b883a 	mov	r5,r3
 8009828:	d8c00517 	ldw	r3,20(sp)
 800982c:	9cc00c04 	addi	r19,r19,48
 8009830:	1009883a 	mov	r4,r2
 8009834:	1cc00005 	stb	r19,0(r3)
 8009838:	2021883a 	mov	r16,r4
 800983c:	d9000317 	ldw	r4,12(sp)
 8009840:	00800044 	movi	r2,1
 8009844:	2823883a 	mov	r17,r5
 8009848:	20802226 	beq	r4,r2,80098d4 <_dtoa_r+0x13fc>
 800984c:	1029883a 	mov	r20,r2
 8009850:	0005883a 	mov	r2,zero
 8009854:	00d00934 	movhi	r3,16420
 8009858:	180f883a 	mov	r7,r3
 800985c:	100d883a 	mov	r6,r2
 8009860:	880b883a 	mov	r5,r17
 8009864:	8009883a 	mov	r4,r16
 8009868:	800d7580 	call	800d758 <__muldf3>
 800986c:	180b883a 	mov	r5,r3
 8009870:	1009883a 	mov	r4,r2
 8009874:	1823883a 	mov	r17,r3
 8009878:	1021883a 	mov	r16,r2
 800987c:	800e1140 	call	800e114 <__fixdfsi>
 8009880:	1009883a 	mov	r4,r2
 8009884:	102b883a 	mov	r21,r2
 8009888:	800e01c0 	call	800e01c <__floatsidf>
 800988c:	880b883a 	mov	r5,r17
 8009890:	8009883a 	mov	r4,r16
 8009894:	180f883a 	mov	r7,r3
 8009898:	100d883a 	mov	r6,r2
 800989c:	800d6640 	call	800d664 <__subdf3>
 80098a0:	180b883a 	mov	r5,r3
 80098a4:	d8c00517 	ldw	r3,20(sp)
 80098a8:	1009883a 	mov	r4,r2
 80098ac:	ad400c04 	addi	r21,r21,48
 80098b0:	1d05883a 	add	r2,r3,r20
 80098b4:	15400005 	stb	r21,0(r2)
 80098b8:	2021883a 	mov	r16,r4
 80098bc:	d9000317 	ldw	r4,12(sp)
 80098c0:	a5000044 	addi	r20,r20,1
 80098c4:	2823883a 	mov	r17,r5
 80098c8:	a13fe11e 	bne	r20,r4,8009850 <_dtoa_r+0x1378>
 80098cc:	e505883a 	add	r2,fp,r20
 80098d0:	173fffc4 	addi	fp,r2,-1
 80098d4:	0025883a 	mov	r18,zero
 80098d8:	04cff834 	movhi	r19,16352
 80098dc:	b009883a 	mov	r4,r22
 80098e0:	b80b883a 	mov	r5,r23
 80098e4:	900d883a 	mov	r6,r18
 80098e8:	980f883a 	mov	r7,r19
 80098ec:	800d6e40 	call	800d6e4 <__adddf3>
 80098f0:	180b883a 	mov	r5,r3
 80098f4:	1009883a 	mov	r4,r2
 80098f8:	800d883a 	mov	r6,r16
 80098fc:	880f883a 	mov	r7,r17
 8009900:	800df940 	call	800df94 <__ltdf2>
 8009904:	103cab16 	blt	r2,zero,8008bb4 <_dtoa_r+0x6dc>
 8009908:	0009883a 	mov	r4,zero
 800990c:	980b883a 	mov	r5,r19
 8009910:	b80f883a 	mov	r7,r23
 8009914:	b00d883a 	mov	r6,r22
 8009918:	800d6640 	call	800d664 <__subdf3>
 800991c:	180b883a 	mov	r5,r3
 8009920:	880f883a 	mov	r7,r17
 8009924:	1009883a 	mov	r4,r2
 8009928:	800d883a 	mov	r6,r16
 800992c:	800de840 	call	800de84 <__gtdf2>
 8009930:	00bc470e 	bge	zero,r2,8008a50 <_dtoa_r+0x578>
 8009934:	00c00c04 	movi	r3,48
 8009938:	e73fffc4 	addi	fp,fp,-1
 800993c:	e0800007 	ldb	r2,0(fp)
 8009940:	10fffd26 	beq	r2,r3,8009938 <_dtoa_r+0x1460>
 8009944:	d9800417 	ldw	r6,16(sp)
 8009948:	e7000044 	addi	fp,fp,1
 800994c:	d9800d15 	stw	r6,52(sp)
 8009950:	003cab06 	br	8008c00 <_dtoa_r+0x728>
 8009954:	d8c00f17 	ldw	r3,60(sp)
 8009958:	d9001117 	ldw	r4,68(sp)
 800995c:	20e1c83a 	sub	r16,r4,r3
 8009960:	0007883a 	mov	r3,zero
 8009964:	003d9b06 	br	8008fd4 <_dtoa_r+0xafc>
 8009968:	00800e44 	movi	r2,57
 800996c:	b0800005 	stb	r2,0(r22)
 8009970:	b5800044 	addi	r22,r22,1
 8009974:	003dc106 	br	800907c <_dtoa_r+0xba4>
 8009978:	05800084 	movi	r22,2
 800997c:	003bf706 	br	800895c <_dtoa_r+0x484>
 8009980:	d9000f17 	ldw	r4,60(sp)
 8009984:	013c000e 	bge	zero,r4,8008988 <_dtoa_r+0x4b0>
 8009988:	d9800e17 	ldw	r6,56(sp)
 800998c:	01bc300e 	bge	zero,r6,8008a50 <_dtoa_r+0x578>
 8009990:	0005883a 	mov	r2,zero
 8009994:	00d00934 	movhi	r3,16420
 8009998:	a80b883a 	mov	r5,r21
 800999c:	180f883a 	mov	r7,r3
 80099a0:	a009883a 	mov	r4,r20
 80099a4:	100d883a 	mov	r6,r2
 80099a8:	800d7580 	call	800d758 <__muldf3>
 80099ac:	b1000044 	addi	r4,r22,1
 80099b0:	1021883a 	mov	r16,r2
 80099b4:	1823883a 	mov	r17,r3
 80099b8:	800e01c0 	call	800e01c <__floatsidf>
 80099bc:	880b883a 	mov	r5,r17
 80099c0:	8009883a 	mov	r4,r16
 80099c4:	180f883a 	mov	r7,r3
 80099c8:	100d883a 	mov	r6,r2
 80099cc:	800d7580 	call	800d758 <__muldf3>
 80099d0:	0011883a 	mov	r8,zero
 80099d4:	02500734 	movhi	r9,16412
 80099d8:	180b883a 	mov	r5,r3
 80099dc:	480f883a 	mov	r7,r9
 80099e0:	1009883a 	mov	r4,r2
 80099e4:	400d883a 	mov	r6,r8
 80099e8:	800d6e40 	call	800d6e4 <__adddf3>
 80099ec:	102d883a 	mov	r22,r2
 80099f0:	00bf3034 	movhi	r2,64704
 80099f4:	10ef883a 	add	r23,r2,r3
 80099f8:	d8800d17 	ldw	r2,52(sp)
 80099fc:	d8c00e17 	ldw	r3,56(sp)
 8009a00:	8029883a 	mov	r20,r16
 8009a04:	10bfffc4 	addi	r2,r2,-1
 8009a08:	882b883a 	mov	r21,r17
 8009a0c:	d8800415 	stw	r2,16(sp)
 8009a10:	d8c00315 	stw	r3,12(sp)
 8009a14:	003e8306 	br	8009424 <_dtoa_r+0xf4c>
 8009a18:	d8800117 	ldw	r2,4(sp)
 8009a1c:	dc001117 	ldw	r16,68(sp)
 8009a20:	dc801017 	ldw	r18,64(sp)
 8009a24:	00c00d84 	movi	r3,54
 8009a28:	1887c83a 	sub	r3,r3,r2
 8009a2c:	003d6906 	br	8008fd4 <_dtoa_r+0xafc>
 8009a30:	01800044 	movi	r6,1
 8009a34:	3021883a 	mov	r16,r6
 8009a38:	d9800f15 	stw	r6,60(sp)
 8009a3c:	d9802615 	stw	r6,152(sp)
 8009a40:	d9800e15 	stw	r6,56(sp)
 8009a44:	003b9306 	br	8008894 <_dtoa_r+0x3bc>
 8009a48:	b021883a 	mov	r16,r22
 8009a4c:	dd800f15 	stw	r22,60(sp)
 8009a50:	003b9006 	br	8008894 <_dtoa_r+0x3bc>
 8009a54:	103e221e 	bne	r2,zero,80092e0 <_dtoa_r+0xe08>
 8009a58:	b880004c 	andi	r2,r23,1
 8009a5c:	1005003a 	cmpeq	r2,r2,zero
 8009a60:	103e1f1e 	bne	r2,zero,80092e0 <_dtoa_r+0xe08>
 8009a64:	003e1b06 	br	80092d4 <_dtoa_r+0xdfc>
 8009a68:	d9001617 	ldw	r4,88(sp)
 8009a6c:	980b883a 	mov	r5,r19
 8009a70:	01800284 	movi	r6,10
 8009a74:	000f883a 	mov	r7,zero
 8009a78:	800b7200 	call	800b720 <__multadd>
 8009a7c:	d8c00e17 	ldw	r3,56(sp)
 8009a80:	1027883a 	mov	r19,r2
 8009a84:	d8c00f15 	stw	r3,60(sp)
 8009a88:	003cd306 	br	8008dd8 <_dtoa_r+0x900>

08009a8c <_fclose_r>:
 8009a8c:	defffc04 	addi	sp,sp,-16
 8009a90:	dc400115 	stw	r17,4(sp)
 8009a94:	dc000015 	stw	r16,0(sp)
 8009a98:	dfc00315 	stw	ra,12(sp)
 8009a9c:	dc800215 	stw	r18,8(sp)
 8009aa0:	2821883a 	mov	r16,r5
 8009aa4:	2023883a 	mov	r17,r4
 8009aa8:	28002926 	beq	r5,zero,8009b50 <_fclose_r+0xc4>
 8009aac:	8004ea80 	call	8004ea8 <__sfp_lock_acquire>
 8009ab0:	88000226 	beq	r17,zero,8009abc <_fclose_r+0x30>
 8009ab4:	88800e17 	ldw	r2,56(r17)
 8009ab8:	10002d26 	beq	r2,zero,8009b70 <_fclose_r+0xe4>
 8009abc:	8080030f 	ldh	r2,12(r16)
 8009ac0:	10002226 	beq	r2,zero,8009b4c <_fclose_r+0xc0>
 8009ac4:	8809883a 	mov	r4,r17
 8009ac8:	800b883a 	mov	r5,r16
 8009acc:	8009bb00 	call	8009bb0 <_fflush_r>
 8009ad0:	1025883a 	mov	r18,r2
 8009ad4:	80800b17 	ldw	r2,44(r16)
 8009ad8:	10000426 	beq	r2,zero,8009aec <_fclose_r+0x60>
 8009adc:	81400717 	ldw	r5,28(r16)
 8009ae0:	8809883a 	mov	r4,r17
 8009ae4:	103ee83a 	callr	r2
 8009ae8:	10002a16 	blt	r2,zero,8009b94 <_fclose_r+0x108>
 8009aec:	8080030b 	ldhu	r2,12(r16)
 8009af0:	1080200c 	andi	r2,r2,128
 8009af4:	1000231e 	bne	r2,zero,8009b84 <_fclose_r+0xf8>
 8009af8:	81400c17 	ldw	r5,48(r16)
 8009afc:	28000526 	beq	r5,zero,8009b14 <_fclose_r+0x88>
 8009b00:	80801004 	addi	r2,r16,64
 8009b04:	28800226 	beq	r5,r2,8009b10 <_fclose_r+0x84>
 8009b08:	8809883a 	mov	r4,r17
 8009b0c:	8009f0c0 	call	8009f0c <_free_r>
 8009b10:	80000c15 	stw	zero,48(r16)
 8009b14:	81401117 	ldw	r5,68(r16)
 8009b18:	28000326 	beq	r5,zero,8009b28 <_fclose_r+0x9c>
 8009b1c:	8809883a 	mov	r4,r17
 8009b20:	8009f0c0 	call	8009f0c <_free_r>
 8009b24:	80001115 	stw	zero,68(r16)
 8009b28:	8000030d 	sth	zero,12(r16)
 8009b2c:	8004eac0 	call	8004eac <__sfp_lock_release>
 8009b30:	9005883a 	mov	r2,r18
 8009b34:	dfc00317 	ldw	ra,12(sp)
 8009b38:	dc800217 	ldw	r18,8(sp)
 8009b3c:	dc400117 	ldw	r17,4(sp)
 8009b40:	dc000017 	ldw	r16,0(sp)
 8009b44:	dec00404 	addi	sp,sp,16
 8009b48:	f800283a 	ret
 8009b4c:	8004eac0 	call	8004eac <__sfp_lock_release>
 8009b50:	0025883a 	mov	r18,zero
 8009b54:	9005883a 	mov	r2,r18
 8009b58:	dfc00317 	ldw	ra,12(sp)
 8009b5c:	dc800217 	ldw	r18,8(sp)
 8009b60:	dc400117 	ldw	r17,4(sp)
 8009b64:	dc000017 	ldw	r16,0(sp)
 8009b68:	dec00404 	addi	sp,sp,16
 8009b6c:	f800283a 	ret
 8009b70:	8809883a 	mov	r4,r17
 8009b74:	8004eb80 	call	8004eb8 <__sinit>
 8009b78:	8080030f 	ldh	r2,12(r16)
 8009b7c:	103fd11e 	bne	r2,zero,8009ac4 <_fclose_r+0x38>
 8009b80:	003ff206 	br	8009b4c <_fclose_r+0xc0>
 8009b84:	81400417 	ldw	r5,16(r16)
 8009b88:	8809883a 	mov	r4,r17
 8009b8c:	8009f0c0 	call	8009f0c <_free_r>
 8009b90:	003fd906 	br	8009af8 <_fclose_r+0x6c>
 8009b94:	04bfffc4 	movi	r18,-1
 8009b98:	003fd406 	br	8009aec <_fclose_r+0x60>

08009b9c <fclose>:
 8009b9c:	008200b4 	movhi	r2,2050
 8009ba0:	10a4bf04 	addi	r2,r2,-27908
 8009ba4:	200b883a 	mov	r5,r4
 8009ba8:	11000017 	ldw	r4,0(r2)
 8009bac:	8009a8c1 	jmpi	8009a8c <_fclose_r>

08009bb0 <_fflush_r>:
 8009bb0:	defffb04 	addi	sp,sp,-20
 8009bb4:	dcc00315 	stw	r19,12(sp)
 8009bb8:	dc800215 	stw	r18,8(sp)
 8009bbc:	dfc00415 	stw	ra,16(sp)
 8009bc0:	dc400115 	stw	r17,4(sp)
 8009bc4:	dc000015 	stw	r16,0(sp)
 8009bc8:	2027883a 	mov	r19,r4
 8009bcc:	2825883a 	mov	r18,r5
 8009bd0:	20000226 	beq	r4,zero,8009bdc <_fflush_r+0x2c>
 8009bd4:	20800e17 	ldw	r2,56(r4)
 8009bd8:	10005626 	beq	r2,zero,8009d34 <_fflush_r+0x184>
 8009bdc:	9100030b 	ldhu	r4,12(r18)
 8009be0:	20ffffcc 	andi	r3,r4,65535
 8009be4:	18e0001c 	xori	r3,r3,32768
 8009be8:	18e00004 	addi	r3,r3,-32768
 8009bec:	1880020c 	andi	r2,r3,8
 8009bf0:	1000261e 	bne	r2,zero,8009c8c <_fflush_r+0xdc>
 8009bf4:	90c00117 	ldw	r3,4(r18)
 8009bf8:	20820014 	ori	r2,r4,2048
 8009bfc:	9080030d 	sth	r2,12(r18)
 8009c00:	1009883a 	mov	r4,r2
 8009c04:	00c0400e 	bge	zero,r3,8009d08 <_fflush_r+0x158>
 8009c08:	92000a17 	ldw	r8,40(r18)
 8009c0c:	40004026 	beq	r8,zero,8009d10 <_fflush_r+0x160>
 8009c10:	2084000c 	andi	r2,r4,4096
 8009c14:	10005326 	beq	r2,zero,8009d64 <_fflush_r+0x1b4>
 8009c18:	94001417 	ldw	r16,80(r18)
 8009c1c:	9080030b 	ldhu	r2,12(r18)
 8009c20:	1080010c 	andi	r2,r2,4
 8009c24:	1000481e 	bne	r2,zero,8009d48 <_fflush_r+0x198>
 8009c28:	91400717 	ldw	r5,28(r18)
 8009c2c:	9809883a 	mov	r4,r19
 8009c30:	800d883a 	mov	r6,r16
 8009c34:	000f883a 	mov	r7,zero
 8009c38:	403ee83a 	callr	r8
 8009c3c:	8080261e 	bne	r16,r2,8009cd8 <_fflush_r+0x128>
 8009c40:	9080030b 	ldhu	r2,12(r18)
 8009c44:	91000417 	ldw	r4,16(r18)
 8009c48:	90000115 	stw	zero,4(r18)
 8009c4c:	10bdffcc 	andi	r2,r2,63487
 8009c50:	10ffffcc 	andi	r3,r2,65535
 8009c54:	18c4000c 	andi	r3,r3,4096
 8009c58:	9080030d 	sth	r2,12(r18)
 8009c5c:	91000015 	stw	r4,0(r18)
 8009c60:	18002b26 	beq	r3,zero,8009d10 <_fflush_r+0x160>
 8009c64:	0007883a 	mov	r3,zero
 8009c68:	1805883a 	mov	r2,r3
 8009c6c:	94001415 	stw	r16,80(r18)
 8009c70:	dfc00417 	ldw	ra,16(sp)
 8009c74:	dcc00317 	ldw	r19,12(sp)
 8009c78:	dc800217 	ldw	r18,8(sp)
 8009c7c:	dc400117 	ldw	r17,4(sp)
 8009c80:	dc000017 	ldw	r16,0(sp)
 8009c84:	dec00504 	addi	sp,sp,20
 8009c88:	f800283a 	ret
 8009c8c:	94400417 	ldw	r17,16(r18)
 8009c90:	88001f26 	beq	r17,zero,8009d10 <_fflush_r+0x160>
 8009c94:	90800017 	ldw	r2,0(r18)
 8009c98:	18c000cc 	andi	r3,r3,3
 8009c9c:	94400015 	stw	r17,0(r18)
 8009ca0:	1461c83a 	sub	r16,r2,r17
 8009ca4:	18002526 	beq	r3,zero,8009d3c <_fflush_r+0x18c>
 8009ca8:	0005883a 	mov	r2,zero
 8009cac:	90800215 	stw	r2,8(r18)
 8009cb0:	0400170e 	bge	zero,r16,8009d10 <_fflush_r+0x160>
 8009cb4:	90c00917 	ldw	r3,36(r18)
 8009cb8:	91400717 	ldw	r5,28(r18)
 8009cbc:	880d883a 	mov	r6,r17
 8009cc0:	800f883a 	mov	r7,r16
 8009cc4:	9809883a 	mov	r4,r19
 8009cc8:	183ee83a 	callr	r3
 8009ccc:	88a3883a 	add	r17,r17,r2
 8009cd0:	80a1c83a 	sub	r16,r16,r2
 8009cd4:	00bff616 	blt	zero,r2,8009cb0 <_fflush_r+0x100>
 8009cd8:	9080030b 	ldhu	r2,12(r18)
 8009cdc:	00ffffc4 	movi	r3,-1
 8009ce0:	10801014 	ori	r2,r2,64
 8009ce4:	9080030d 	sth	r2,12(r18)
 8009ce8:	1805883a 	mov	r2,r3
 8009cec:	dfc00417 	ldw	ra,16(sp)
 8009cf0:	dcc00317 	ldw	r19,12(sp)
 8009cf4:	dc800217 	ldw	r18,8(sp)
 8009cf8:	dc400117 	ldw	r17,4(sp)
 8009cfc:	dc000017 	ldw	r16,0(sp)
 8009d00:	dec00504 	addi	sp,sp,20
 8009d04:	f800283a 	ret
 8009d08:	90800f17 	ldw	r2,60(r18)
 8009d0c:	00bfbe16 	blt	zero,r2,8009c08 <_fflush_r+0x58>
 8009d10:	0007883a 	mov	r3,zero
 8009d14:	1805883a 	mov	r2,r3
 8009d18:	dfc00417 	ldw	ra,16(sp)
 8009d1c:	dcc00317 	ldw	r19,12(sp)
 8009d20:	dc800217 	ldw	r18,8(sp)
 8009d24:	dc400117 	ldw	r17,4(sp)
 8009d28:	dc000017 	ldw	r16,0(sp)
 8009d2c:	dec00504 	addi	sp,sp,20
 8009d30:	f800283a 	ret
 8009d34:	8004eb80 	call	8004eb8 <__sinit>
 8009d38:	003fa806 	br	8009bdc <_fflush_r+0x2c>
 8009d3c:	90800517 	ldw	r2,20(r18)
 8009d40:	90800215 	stw	r2,8(r18)
 8009d44:	003fda06 	br	8009cb0 <_fflush_r+0x100>
 8009d48:	90800117 	ldw	r2,4(r18)
 8009d4c:	90c00c17 	ldw	r3,48(r18)
 8009d50:	80a1c83a 	sub	r16,r16,r2
 8009d54:	183fb426 	beq	r3,zero,8009c28 <_fflush_r+0x78>
 8009d58:	90800f17 	ldw	r2,60(r18)
 8009d5c:	80a1c83a 	sub	r16,r16,r2
 8009d60:	003fb106 	br	8009c28 <_fflush_r+0x78>
 8009d64:	91400717 	ldw	r5,28(r18)
 8009d68:	9809883a 	mov	r4,r19
 8009d6c:	000d883a 	mov	r6,zero
 8009d70:	01c00044 	movi	r7,1
 8009d74:	403ee83a 	callr	r8
 8009d78:	1021883a 	mov	r16,r2
 8009d7c:	00bfffc4 	movi	r2,-1
 8009d80:	80800226 	beq	r16,r2,8009d8c <_fflush_r+0x1dc>
 8009d84:	92000a17 	ldw	r8,40(r18)
 8009d88:	003fa406 	br	8009c1c <_fflush_r+0x6c>
 8009d8c:	98c00017 	ldw	r3,0(r19)
 8009d90:	00800744 	movi	r2,29
 8009d94:	18bfde26 	beq	r3,r2,8009d10 <_fflush_r+0x160>
 8009d98:	9080030b 	ldhu	r2,12(r18)
 8009d9c:	8007883a 	mov	r3,r16
 8009da0:	10801014 	ori	r2,r2,64
 8009da4:	9080030d 	sth	r2,12(r18)
 8009da8:	003fcf06 	br	8009ce8 <_fflush_r+0x138>

08009dac <fflush>:
 8009dac:	01420074 	movhi	r5,2049
 8009db0:	2966ec04 	addi	r5,r5,-25680
 8009db4:	2007883a 	mov	r3,r4
 8009db8:	20000526 	beq	r4,zero,8009dd0 <fflush+0x24>
 8009dbc:	008200b4 	movhi	r2,2050
 8009dc0:	10a4bf04 	addi	r2,r2,-27908
 8009dc4:	11000017 	ldw	r4,0(r2)
 8009dc8:	180b883a 	mov	r5,r3
 8009dcc:	8009bb01 	jmpi	8009bb0 <_fflush_r>
 8009dd0:	008200b4 	movhi	r2,2050
 8009dd4:	10a4c004 	addi	r2,r2,-27904
 8009dd8:	11000017 	ldw	r4,0(r2)
 8009ddc:	80051101 	jmpi	8005110 <_fwalk_reent>

08009de0 <_malloc_trim_r>:
 8009de0:	defffb04 	addi	sp,sp,-20
 8009de4:	dcc00315 	stw	r19,12(sp)
 8009de8:	04c20074 	movhi	r19,2049
 8009dec:	9cdf1804 	addi	r19,r19,31840
 8009df0:	dc800215 	stw	r18,8(sp)
 8009df4:	dc400115 	stw	r17,4(sp)
 8009df8:	dc000015 	stw	r16,0(sp)
 8009dfc:	2823883a 	mov	r17,r5
 8009e00:	2025883a 	mov	r18,r4
 8009e04:	dfc00415 	stw	ra,16(sp)
 8009e08:	800f17c0 	call	800f17c <__malloc_lock>
 8009e0c:	98800217 	ldw	r2,8(r19)
 8009e10:	9009883a 	mov	r4,r18
 8009e14:	000b883a 	mov	r5,zero
 8009e18:	10c00117 	ldw	r3,4(r2)
 8009e1c:	00bfff04 	movi	r2,-4
 8009e20:	18a0703a 	and	r16,r3,r2
 8009e24:	8463c83a 	sub	r17,r16,r17
 8009e28:	8c43fbc4 	addi	r17,r17,4079
 8009e2c:	8822d33a 	srli	r17,r17,12
 8009e30:	0083ffc4 	movi	r2,4095
 8009e34:	8c7fffc4 	addi	r17,r17,-1
 8009e38:	8822933a 	slli	r17,r17,12
 8009e3c:	1440060e 	bge	r2,r17,8009e58 <_malloc_trim_r+0x78>
 8009e40:	8005f440 	call	8005f44 <_sbrk_r>
 8009e44:	98c00217 	ldw	r3,8(r19)
 8009e48:	9009883a 	mov	r4,r18
 8009e4c:	044bc83a 	sub	r5,zero,r17
 8009e50:	80c7883a 	add	r3,r16,r3
 8009e54:	10c00926 	beq	r2,r3,8009e7c <_malloc_trim_r+0x9c>
 8009e58:	800f19c0 	call	800f19c <__malloc_unlock>
 8009e5c:	0005883a 	mov	r2,zero
 8009e60:	dfc00417 	ldw	ra,16(sp)
 8009e64:	dcc00317 	ldw	r19,12(sp)
 8009e68:	dc800217 	ldw	r18,8(sp)
 8009e6c:	dc400117 	ldw	r17,4(sp)
 8009e70:	dc000017 	ldw	r16,0(sp)
 8009e74:	dec00504 	addi	sp,sp,20
 8009e78:	f800283a 	ret
 8009e7c:	9009883a 	mov	r4,r18
 8009e80:	8005f440 	call	8005f44 <_sbrk_r>
 8009e84:	844dc83a 	sub	r6,r16,r17
 8009e88:	00ffffc4 	movi	r3,-1
 8009e8c:	9009883a 	mov	r4,r18
 8009e90:	000b883a 	mov	r5,zero
 8009e94:	01c200b4 	movhi	r7,2050
 8009e98:	39ebab04 	addi	r7,r7,-20820
 8009e9c:	31800054 	ori	r6,r6,1
 8009ea0:	10c00926 	beq	r2,r3,8009ec8 <_malloc_trim_r+0xe8>
 8009ea4:	38800017 	ldw	r2,0(r7)
 8009ea8:	98c00217 	ldw	r3,8(r19)
 8009eac:	9009883a 	mov	r4,r18
 8009eb0:	1445c83a 	sub	r2,r2,r17
 8009eb4:	38800015 	stw	r2,0(r7)
 8009eb8:	19800115 	stw	r6,4(r3)
 8009ebc:	800f19c0 	call	800f19c <__malloc_unlock>
 8009ec0:	00800044 	movi	r2,1
 8009ec4:	003fe606 	br	8009e60 <_malloc_trim_r+0x80>
 8009ec8:	8005f440 	call	8005f44 <_sbrk_r>
 8009ecc:	99800217 	ldw	r6,8(r19)
 8009ed0:	100f883a 	mov	r7,r2
 8009ed4:	9009883a 	mov	r4,r18
 8009ed8:	1187c83a 	sub	r3,r2,r6
 8009edc:	008003c4 	movi	r2,15
 8009ee0:	19400054 	ori	r5,r3,1
 8009ee4:	10ffdc0e 	bge	r2,r3,8009e58 <_malloc_trim_r+0x78>
 8009ee8:	008200b4 	movhi	r2,2050
 8009eec:	10a4c204 	addi	r2,r2,-27896
 8009ef0:	10c00017 	ldw	r3,0(r2)
 8009ef4:	008200b4 	movhi	r2,2050
 8009ef8:	10abab04 	addi	r2,r2,-20820
 8009efc:	31400115 	stw	r5,4(r6)
 8009f00:	38c7c83a 	sub	r3,r7,r3
 8009f04:	10c00015 	stw	r3,0(r2)
 8009f08:	003fd306 	br	8009e58 <_malloc_trim_r+0x78>

08009f0c <_free_r>:
 8009f0c:	defffd04 	addi	sp,sp,-12
 8009f10:	dc400115 	stw	r17,4(sp)
 8009f14:	dc000015 	stw	r16,0(sp)
 8009f18:	dfc00215 	stw	ra,8(sp)
 8009f1c:	2821883a 	mov	r16,r5
 8009f20:	2023883a 	mov	r17,r4
 8009f24:	28005a26 	beq	r5,zero,800a090 <_free_r+0x184>
 8009f28:	800f17c0 	call	800f17c <__malloc_lock>
 8009f2c:	823ffe04 	addi	r8,r16,-8
 8009f30:	41400117 	ldw	r5,4(r8)
 8009f34:	00bfff84 	movi	r2,-2
 8009f38:	02820074 	movhi	r10,2049
 8009f3c:	529f1804 	addi	r10,r10,31840
 8009f40:	288e703a 	and	r7,r5,r2
 8009f44:	41cd883a 	add	r6,r8,r7
 8009f48:	30c00117 	ldw	r3,4(r6)
 8009f4c:	51000217 	ldw	r4,8(r10)
 8009f50:	00bfff04 	movi	r2,-4
 8009f54:	1892703a 	and	r9,r3,r2
 8009f58:	5017883a 	mov	r11,r10
 8009f5c:	31006726 	beq	r6,r4,800a0fc <_free_r+0x1f0>
 8009f60:	2880004c 	andi	r2,r5,1
 8009f64:	1005003a 	cmpeq	r2,r2,zero
 8009f68:	32400115 	stw	r9,4(r6)
 8009f6c:	10001a1e 	bne	r2,zero,8009fd8 <_free_r+0xcc>
 8009f70:	000b883a 	mov	r5,zero
 8009f74:	3247883a 	add	r3,r6,r9
 8009f78:	18800117 	ldw	r2,4(r3)
 8009f7c:	1080004c 	andi	r2,r2,1
 8009f80:	1000231e 	bne	r2,zero,800a010 <_free_r+0x104>
 8009f84:	280ac03a 	cmpne	r5,r5,zero
 8009f88:	3a4f883a 	add	r7,r7,r9
 8009f8c:	2800451e 	bne	r5,zero,800a0a4 <_free_r+0x198>
 8009f90:	31000217 	ldw	r4,8(r6)
 8009f94:	00820074 	movhi	r2,2049
 8009f98:	109f1a04 	addi	r2,r2,31848
 8009f9c:	20807b26 	beq	r4,r2,800a18c <_free_r+0x280>
 8009fa0:	30800317 	ldw	r2,12(r6)
 8009fa4:	3a07883a 	add	r3,r7,r8
 8009fa8:	19c00015 	stw	r7,0(r3)
 8009fac:	11000215 	stw	r4,8(r2)
 8009fb0:	20800315 	stw	r2,12(r4)
 8009fb4:	38800054 	ori	r2,r7,1
 8009fb8:	40800115 	stw	r2,4(r8)
 8009fbc:	28001a26 	beq	r5,zero,800a028 <_free_r+0x11c>
 8009fc0:	8809883a 	mov	r4,r17
 8009fc4:	dfc00217 	ldw	ra,8(sp)
 8009fc8:	dc400117 	ldw	r17,4(sp)
 8009fcc:	dc000017 	ldw	r16,0(sp)
 8009fd0:	dec00304 	addi	sp,sp,12
 8009fd4:	800f19c1 	jmpi	800f19c <__malloc_unlock>
 8009fd8:	80bffe17 	ldw	r2,-8(r16)
 8009fdc:	50c00204 	addi	r3,r10,8
 8009fe0:	4091c83a 	sub	r8,r8,r2
 8009fe4:	41000217 	ldw	r4,8(r8)
 8009fe8:	388f883a 	add	r7,r7,r2
 8009fec:	20c06126 	beq	r4,r3,800a174 <_free_r+0x268>
 8009ff0:	40800317 	ldw	r2,12(r8)
 8009ff4:	3247883a 	add	r3,r6,r9
 8009ff8:	000b883a 	mov	r5,zero
 8009ffc:	11000215 	stw	r4,8(r2)
 800a000:	20800315 	stw	r2,12(r4)
 800a004:	18800117 	ldw	r2,4(r3)
 800a008:	1080004c 	andi	r2,r2,1
 800a00c:	103fdd26 	beq	r2,zero,8009f84 <_free_r+0x78>
 800a010:	38800054 	ori	r2,r7,1
 800a014:	3a07883a 	add	r3,r7,r8
 800a018:	280ac03a 	cmpne	r5,r5,zero
 800a01c:	40800115 	stw	r2,4(r8)
 800a020:	19c00015 	stw	r7,0(r3)
 800a024:	283fe61e 	bne	r5,zero,8009fc0 <_free_r+0xb4>
 800a028:	00807fc4 	movi	r2,511
 800a02c:	11c01f2e 	bgeu	r2,r7,800a0ac <_free_r+0x1a0>
 800a030:	3806d27a 	srli	r3,r7,9
 800a034:	1800481e 	bne	r3,zero,800a158 <_free_r+0x24c>
 800a038:	3804d0fa 	srli	r2,r7,3
 800a03c:	100690fa 	slli	r3,r2,3
 800a040:	1acd883a 	add	r6,r3,r11
 800a044:	31400217 	ldw	r5,8(r6)
 800a048:	31405926 	beq	r6,r5,800a1b0 <_free_r+0x2a4>
 800a04c:	28800117 	ldw	r2,4(r5)
 800a050:	00ffff04 	movi	r3,-4
 800a054:	10c4703a 	and	r2,r2,r3
 800a058:	3880022e 	bgeu	r7,r2,800a064 <_free_r+0x158>
 800a05c:	29400217 	ldw	r5,8(r5)
 800a060:	317ffa1e 	bne	r6,r5,800a04c <_free_r+0x140>
 800a064:	29800317 	ldw	r6,12(r5)
 800a068:	41800315 	stw	r6,12(r8)
 800a06c:	41400215 	stw	r5,8(r8)
 800a070:	8809883a 	mov	r4,r17
 800a074:	2a000315 	stw	r8,12(r5)
 800a078:	32000215 	stw	r8,8(r6)
 800a07c:	dfc00217 	ldw	ra,8(sp)
 800a080:	dc400117 	ldw	r17,4(sp)
 800a084:	dc000017 	ldw	r16,0(sp)
 800a088:	dec00304 	addi	sp,sp,12
 800a08c:	800f19c1 	jmpi	800f19c <__malloc_unlock>
 800a090:	dfc00217 	ldw	ra,8(sp)
 800a094:	dc400117 	ldw	r17,4(sp)
 800a098:	dc000017 	ldw	r16,0(sp)
 800a09c:	dec00304 	addi	sp,sp,12
 800a0a0:	f800283a 	ret
 800a0a4:	31000217 	ldw	r4,8(r6)
 800a0a8:	003fbd06 	br	8009fa0 <_free_r+0x94>
 800a0ac:	3806d0fa 	srli	r3,r7,3
 800a0b0:	00800044 	movi	r2,1
 800a0b4:	51400117 	ldw	r5,4(r10)
 800a0b8:	180890fa 	slli	r4,r3,3
 800a0bc:	1807d0ba 	srai	r3,r3,2
 800a0c0:	22c9883a 	add	r4,r4,r11
 800a0c4:	21800217 	ldw	r6,8(r4)
 800a0c8:	10c4983a 	sll	r2,r2,r3
 800a0cc:	41000315 	stw	r4,12(r8)
 800a0d0:	41800215 	stw	r6,8(r8)
 800a0d4:	288ab03a 	or	r5,r5,r2
 800a0d8:	22000215 	stw	r8,8(r4)
 800a0dc:	8809883a 	mov	r4,r17
 800a0e0:	51400115 	stw	r5,4(r10)
 800a0e4:	32000315 	stw	r8,12(r6)
 800a0e8:	dfc00217 	ldw	ra,8(sp)
 800a0ec:	dc400117 	ldw	r17,4(sp)
 800a0f0:	dc000017 	ldw	r16,0(sp)
 800a0f4:	dec00304 	addi	sp,sp,12
 800a0f8:	800f19c1 	jmpi	800f19c <__malloc_unlock>
 800a0fc:	2880004c 	andi	r2,r5,1
 800a100:	3a4d883a 	add	r6,r7,r9
 800a104:	1000071e 	bne	r2,zero,800a124 <_free_r+0x218>
 800a108:	80bffe17 	ldw	r2,-8(r16)
 800a10c:	4091c83a 	sub	r8,r8,r2
 800a110:	41000317 	ldw	r4,12(r8)
 800a114:	40c00217 	ldw	r3,8(r8)
 800a118:	308d883a 	add	r6,r6,r2
 800a11c:	20c00215 	stw	r3,8(r4)
 800a120:	19000315 	stw	r4,12(r3)
 800a124:	008200b4 	movhi	r2,2050
 800a128:	10a4c104 	addi	r2,r2,-27900
 800a12c:	11000017 	ldw	r4,0(r2)
 800a130:	30c00054 	ori	r3,r6,1
 800a134:	52000215 	stw	r8,8(r10)
 800a138:	40c00115 	stw	r3,4(r8)
 800a13c:	313fa036 	bltu	r6,r4,8009fc0 <_free_r+0xb4>
 800a140:	008200b4 	movhi	r2,2050
 800a144:	10ab9104 	addi	r2,r2,-20924
 800a148:	11400017 	ldw	r5,0(r2)
 800a14c:	8809883a 	mov	r4,r17
 800a150:	8009de00 	call	8009de0 <_malloc_trim_r>
 800a154:	003f9a06 	br	8009fc0 <_free_r+0xb4>
 800a158:	00800104 	movi	r2,4
 800a15c:	10c0072e 	bgeu	r2,r3,800a17c <_free_r+0x270>
 800a160:	00800504 	movi	r2,20
 800a164:	10c01936 	bltu	r2,r3,800a1cc <_free_r+0x2c0>
 800a168:	188016c4 	addi	r2,r3,91
 800a16c:	100690fa 	slli	r3,r2,3
 800a170:	003fb306 	br	800a040 <_free_r+0x134>
 800a174:	01400044 	movi	r5,1
 800a178:	003f7e06 	br	8009f74 <_free_r+0x68>
 800a17c:	3804d1ba 	srli	r2,r7,6
 800a180:	10800e04 	addi	r2,r2,56
 800a184:	100690fa 	slli	r3,r2,3
 800a188:	003fad06 	br	800a040 <_free_r+0x134>
 800a18c:	22000315 	stw	r8,12(r4)
 800a190:	22000215 	stw	r8,8(r4)
 800a194:	3a05883a 	add	r2,r7,r8
 800a198:	38c00054 	ori	r3,r7,1
 800a19c:	11c00015 	stw	r7,0(r2)
 800a1a0:	41000215 	stw	r4,8(r8)
 800a1a4:	40c00115 	stw	r3,4(r8)
 800a1a8:	41000315 	stw	r4,12(r8)
 800a1ac:	003f8406 	br	8009fc0 <_free_r+0xb4>
 800a1b0:	1005d0ba 	srai	r2,r2,2
 800a1b4:	00c00044 	movi	r3,1
 800a1b8:	51000117 	ldw	r4,4(r10)
 800a1bc:	1886983a 	sll	r3,r3,r2
 800a1c0:	20c8b03a 	or	r4,r4,r3
 800a1c4:	51000115 	stw	r4,4(r10)
 800a1c8:	003fa706 	br	800a068 <_free_r+0x15c>
 800a1cc:	00801504 	movi	r2,84
 800a1d0:	10c00436 	bltu	r2,r3,800a1e4 <_free_r+0x2d8>
 800a1d4:	3804d33a 	srli	r2,r7,12
 800a1d8:	10801b84 	addi	r2,r2,110
 800a1dc:	100690fa 	slli	r3,r2,3
 800a1e0:	003f9706 	br	800a040 <_free_r+0x134>
 800a1e4:	00805504 	movi	r2,340
 800a1e8:	10c00436 	bltu	r2,r3,800a1fc <_free_r+0x2f0>
 800a1ec:	3804d3fa 	srli	r2,r7,15
 800a1f0:	10801dc4 	addi	r2,r2,119
 800a1f4:	100690fa 	slli	r3,r2,3
 800a1f8:	003f9106 	br	800a040 <_free_r+0x134>
 800a1fc:	00815504 	movi	r2,1364
 800a200:	10c0032e 	bgeu	r2,r3,800a210 <_free_r+0x304>
 800a204:	00801f84 	movi	r2,126
 800a208:	00c0fc04 	movi	r3,1008
 800a20c:	003f8c06 	br	800a040 <_free_r+0x134>
 800a210:	3804d4ba 	srli	r2,r7,18
 800a214:	10801f04 	addi	r2,r2,124
 800a218:	100690fa 	slli	r3,r2,3
 800a21c:	003f8806 	br	800a040 <_free_r+0x134>

0800a220 <__sfvwrite_r>:
 800a220:	30800217 	ldw	r2,8(r6)
 800a224:	defff504 	addi	sp,sp,-44
 800a228:	df000915 	stw	fp,36(sp)
 800a22c:	dd800715 	stw	r22,28(sp)
 800a230:	dc800315 	stw	r18,12(sp)
 800a234:	dfc00a15 	stw	ra,40(sp)
 800a238:	ddc00815 	stw	r23,32(sp)
 800a23c:	dd400615 	stw	r21,24(sp)
 800a240:	dd000515 	stw	r20,20(sp)
 800a244:	dcc00415 	stw	r19,16(sp)
 800a248:	dc400215 	stw	r17,8(sp)
 800a24c:	dc000115 	stw	r16,4(sp)
 800a250:	302d883a 	mov	r22,r6
 800a254:	2039883a 	mov	fp,r4
 800a258:	2825883a 	mov	r18,r5
 800a25c:	10001c26 	beq	r2,zero,800a2d0 <__sfvwrite_r+0xb0>
 800a260:	29c0030b 	ldhu	r7,12(r5)
 800a264:	3880020c 	andi	r2,r7,8
 800a268:	10002726 	beq	r2,zero,800a308 <__sfvwrite_r+0xe8>
 800a26c:	28800417 	ldw	r2,16(r5)
 800a270:	10002526 	beq	r2,zero,800a308 <__sfvwrite_r+0xe8>
 800a274:	3880008c 	andi	r2,r7,2
 800a278:	b5400017 	ldw	r21,0(r22)
 800a27c:	10002826 	beq	r2,zero,800a320 <__sfvwrite_r+0x100>
 800a280:	0021883a 	mov	r16,zero
 800a284:	0023883a 	mov	r17,zero
 800a288:	880d883a 	mov	r6,r17
 800a28c:	e009883a 	mov	r4,fp
 800a290:	00810004 	movi	r2,1024
 800a294:	80006e26 	beq	r16,zero,800a450 <__sfvwrite_r+0x230>
 800a298:	800f883a 	mov	r7,r16
 800a29c:	91400717 	ldw	r5,28(r18)
 800a2a0:	1400012e 	bgeu	r2,r16,800a2a8 <__sfvwrite_r+0x88>
 800a2a4:	100f883a 	mov	r7,r2
 800a2a8:	90c00917 	ldw	r3,36(r18)
 800a2ac:	183ee83a 	callr	r3
 800a2b0:	1007883a 	mov	r3,r2
 800a2b4:	80a1c83a 	sub	r16,r16,r2
 800a2b8:	88a3883a 	add	r17,r17,r2
 800a2bc:	00806d0e 	bge	zero,r2,800a474 <__sfvwrite_r+0x254>
 800a2c0:	b0800217 	ldw	r2,8(r22)
 800a2c4:	10c5c83a 	sub	r2,r2,r3
 800a2c8:	b0800215 	stw	r2,8(r22)
 800a2cc:	103fee1e 	bne	r2,zero,800a288 <__sfvwrite_r+0x68>
 800a2d0:	0009883a 	mov	r4,zero
 800a2d4:	2005883a 	mov	r2,r4
 800a2d8:	dfc00a17 	ldw	ra,40(sp)
 800a2dc:	df000917 	ldw	fp,36(sp)
 800a2e0:	ddc00817 	ldw	r23,32(sp)
 800a2e4:	dd800717 	ldw	r22,28(sp)
 800a2e8:	dd400617 	ldw	r21,24(sp)
 800a2ec:	dd000517 	ldw	r20,20(sp)
 800a2f0:	dcc00417 	ldw	r19,16(sp)
 800a2f4:	dc800317 	ldw	r18,12(sp)
 800a2f8:	dc400217 	ldw	r17,8(sp)
 800a2fc:	dc000117 	ldw	r16,4(sp)
 800a300:	dec00b04 	addi	sp,sp,44
 800a304:	f800283a 	ret
 800a308:	80081140 	call	8008114 <__swsetup_r>
 800a30c:	1000e41e 	bne	r2,zero,800a6a0 <__sfvwrite_r+0x480>
 800a310:	91c0030b 	ldhu	r7,12(r18)
 800a314:	b5400017 	ldw	r21,0(r22)
 800a318:	3880008c 	andi	r2,r7,2
 800a31c:	103fd81e 	bne	r2,zero,800a280 <__sfvwrite_r+0x60>
 800a320:	3880004c 	andi	r2,r7,1
 800a324:	1005003a 	cmpeq	r2,r2,zero
 800a328:	10005726 	beq	r2,zero,800a488 <__sfvwrite_r+0x268>
 800a32c:	0029883a 	mov	r20,zero
 800a330:	002f883a 	mov	r23,zero
 800a334:	a0004226 	beq	r20,zero,800a440 <__sfvwrite_r+0x220>
 800a338:	3880800c 	andi	r2,r7,512
 800a33c:	94000217 	ldw	r16,8(r18)
 800a340:	10008b26 	beq	r2,zero,800a570 <__sfvwrite_r+0x350>
 800a344:	800d883a 	mov	r6,r16
 800a348:	a400a536 	bltu	r20,r16,800a5e0 <__sfvwrite_r+0x3c0>
 800a34c:	3881200c 	andi	r2,r7,1152
 800a350:	10002726 	beq	r2,zero,800a3f0 <__sfvwrite_r+0x1d0>
 800a354:	90800517 	ldw	r2,20(r18)
 800a358:	92000417 	ldw	r8,16(r18)
 800a35c:	91400017 	ldw	r5,0(r18)
 800a360:	1087883a 	add	r3,r2,r2
 800a364:	1887883a 	add	r3,r3,r2
 800a368:	1808d7fa 	srli	r4,r3,31
 800a36c:	2a21c83a 	sub	r16,r5,r8
 800a370:	80800044 	addi	r2,r16,1
 800a374:	20c9883a 	add	r4,r4,r3
 800a378:	2027d07a 	srai	r19,r4,1
 800a37c:	a085883a 	add	r2,r20,r2
 800a380:	980d883a 	mov	r6,r19
 800a384:	9880022e 	bgeu	r19,r2,800a390 <__sfvwrite_r+0x170>
 800a388:	1027883a 	mov	r19,r2
 800a38c:	100d883a 	mov	r6,r2
 800a390:	3881000c 	andi	r2,r7,1024
 800a394:	1000b826 	beq	r2,zero,800a678 <__sfvwrite_r+0x458>
 800a398:	300b883a 	mov	r5,r6
 800a39c:	e009883a 	mov	r4,fp
 800a3a0:	80052b80 	call	80052b8 <_malloc_r>
 800a3a4:	10003126 	beq	r2,zero,800a46c <__sfvwrite_r+0x24c>
 800a3a8:	91400417 	ldw	r5,16(r18)
 800a3ac:	1009883a 	mov	r4,r2
 800a3b0:	800d883a 	mov	r6,r16
 800a3b4:	1023883a 	mov	r17,r2
 800a3b8:	8005adc0 	call	8005adc <memcpy>
 800a3bc:	90c0030b 	ldhu	r3,12(r18)
 800a3c0:	00beffc4 	movi	r2,-1025
 800a3c4:	1886703a 	and	r3,r3,r2
 800a3c8:	18c02014 	ori	r3,r3,128
 800a3cc:	90c0030d 	sth	r3,12(r18)
 800a3d0:	9c07c83a 	sub	r3,r19,r16
 800a3d4:	8c05883a 	add	r2,r17,r16
 800a3d8:	a00d883a 	mov	r6,r20
 800a3dc:	a021883a 	mov	r16,r20
 800a3e0:	90800015 	stw	r2,0(r18)
 800a3e4:	90c00215 	stw	r3,8(r18)
 800a3e8:	94400415 	stw	r17,16(r18)
 800a3ec:	94c00515 	stw	r19,20(r18)
 800a3f0:	91000017 	ldw	r4,0(r18)
 800a3f4:	b80b883a 	mov	r5,r23
 800a3f8:	a023883a 	mov	r17,r20
 800a3fc:	800a98c0 	call	800a98c <memmove>
 800a400:	90c00217 	ldw	r3,8(r18)
 800a404:	90800017 	ldw	r2,0(r18)
 800a408:	a027883a 	mov	r19,r20
 800a40c:	1c07c83a 	sub	r3,r3,r16
 800a410:	1405883a 	add	r2,r2,r16
 800a414:	90c00215 	stw	r3,8(r18)
 800a418:	a021883a 	mov	r16,r20
 800a41c:	90800015 	stw	r2,0(r18)
 800a420:	b0800217 	ldw	r2,8(r22)
 800a424:	1405c83a 	sub	r2,r2,r16
 800a428:	b0800215 	stw	r2,8(r22)
 800a42c:	103fa826 	beq	r2,zero,800a2d0 <__sfvwrite_r+0xb0>
 800a430:	a469c83a 	sub	r20,r20,r17
 800a434:	91c0030b 	ldhu	r7,12(r18)
 800a438:	bcef883a 	add	r23,r23,r19
 800a43c:	a03fbe1e 	bne	r20,zero,800a338 <__sfvwrite_r+0x118>
 800a440:	adc00017 	ldw	r23,0(r21)
 800a444:	ad000117 	ldw	r20,4(r21)
 800a448:	ad400204 	addi	r21,r21,8
 800a44c:	003fb906 	br	800a334 <__sfvwrite_r+0x114>
 800a450:	ac400017 	ldw	r17,0(r21)
 800a454:	ac000117 	ldw	r16,4(r21)
 800a458:	ad400204 	addi	r21,r21,8
 800a45c:	003f8a06 	br	800a288 <__sfvwrite_r+0x68>
 800a460:	91400417 	ldw	r5,16(r18)
 800a464:	e009883a 	mov	r4,fp
 800a468:	8009f0c0 	call	8009f0c <_free_r>
 800a46c:	00800304 	movi	r2,12
 800a470:	e0800015 	stw	r2,0(fp)
 800a474:	9080030b 	ldhu	r2,12(r18)
 800a478:	013fffc4 	movi	r4,-1
 800a47c:	10801014 	ori	r2,r2,64
 800a480:	9080030d 	sth	r2,12(r18)
 800a484:	003f9306 	br	800a2d4 <__sfvwrite_r+0xb4>
 800a488:	0027883a 	mov	r19,zero
 800a48c:	002f883a 	mov	r23,zero
 800a490:	d8000015 	stw	zero,0(sp)
 800a494:	0029883a 	mov	r20,zero
 800a498:	98001e26 	beq	r19,zero,800a514 <__sfvwrite_r+0x2f4>
 800a49c:	d8c00017 	ldw	r3,0(sp)
 800a4a0:	1804c03a 	cmpne	r2,r3,zero
 800a4a4:	10005e26 	beq	r2,zero,800a620 <__sfvwrite_r+0x400>
 800a4a8:	9821883a 	mov	r16,r19
 800a4ac:	a4c0012e 	bgeu	r20,r19,800a4b4 <__sfvwrite_r+0x294>
 800a4b0:	a021883a 	mov	r16,r20
 800a4b4:	91000017 	ldw	r4,0(r18)
 800a4b8:	90800417 	ldw	r2,16(r18)
 800a4bc:	91800217 	ldw	r6,8(r18)
 800a4c0:	91c00517 	ldw	r7,20(r18)
 800a4c4:	1100022e 	bgeu	r2,r4,800a4d0 <__sfvwrite_r+0x2b0>
 800a4c8:	31e3883a 	add	r17,r6,r7
 800a4cc:	8c001616 	blt	r17,r16,800a528 <__sfvwrite_r+0x308>
 800a4d0:	81c03816 	blt	r16,r7,800a5b4 <__sfvwrite_r+0x394>
 800a4d4:	90c00917 	ldw	r3,36(r18)
 800a4d8:	91400717 	ldw	r5,28(r18)
 800a4dc:	e009883a 	mov	r4,fp
 800a4e0:	b80d883a 	mov	r6,r23
 800a4e4:	183ee83a 	callr	r3
 800a4e8:	1023883a 	mov	r17,r2
 800a4ec:	00bfe10e 	bge	zero,r2,800a474 <__sfvwrite_r+0x254>
 800a4f0:	a469c83a 	sub	r20,r20,r17
 800a4f4:	a0001826 	beq	r20,zero,800a558 <__sfvwrite_r+0x338>
 800a4f8:	b0800217 	ldw	r2,8(r22)
 800a4fc:	1445c83a 	sub	r2,r2,r17
 800a500:	b0800215 	stw	r2,8(r22)
 800a504:	103f7226 	beq	r2,zero,800a2d0 <__sfvwrite_r+0xb0>
 800a508:	9c67c83a 	sub	r19,r19,r17
 800a50c:	bc6f883a 	add	r23,r23,r17
 800a510:	983fe21e 	bne	r19,zero,800a49c <__sfvwrite_r+0x27c>
 800a514:	adc00017 	ldw	r23,0(r21)
 800a518:	acc00117 	ldw	r19,4(r21)
 800a51c:	ad400204 	addi	r21,r21,8
 800a520:	d8000015 	stw	zero,0(sp)
 800a524:	003fdc06 	br	800a498 <__sfvwrite_r+0x278>
 800a528:	b80b883a 	mov	r5,r23
 800a52c:	880d883a 	mov	r6,r17
 800a530:	800a98c0 	call	800a98c <memmove>
 800a534:	90c00017 	ldw	r3,0(r18)
 800a538:	e009883a 	mov	r4,fp
 800a53c:	900b883a 	mov	r5,r18
 800a540:	1c47883a 	add	r3,r3,r17
 800a544:	90c00015 	stw	r3,0(r18)
 800a548:	8009bb00 	call	8009bb0 <_fflush_r>
 800a54c:	103fc91e 	bne	r2,zero,800a474 <__sfvwrite_r+0x254>
 800a550:	a469c83a 	sub	r20,r20,r17
 800a554:	a03fe81e 	bne	r20,zero,800a4f8 <__sfvwrite_r+0x2d8>
 800a558:	e009883a 	mov	r4,fp
 800a55c:	900b883a 	mov	r5,r18
 800a560:	8009bb00 	call	8009bb0 <_fflush_r>
 800a564:	103fc31e 	bne	r2,zero,800a474 <__sfvwrite_r+0x254>
 800a568:	d8000015 	stw	zero,0(sp)
 800a56c:	003fe206 	br	800a4f8 <__sfvwrite_r+0x2d8>
 800a570:	91000017 	ldw	r4,0(r18)
 800a574:	90800417 	ldw	r2,16(r18)
 800a578:	1100022e 	bgeu	r2,r4,800a584 <__sfvwrite_r+0x364>
 800a57c:	8023883a 	mov	r17,r16
 800a580:	85003136 	bltu	r16,r20,800a648 <__sfvwrite_r+0x428>
 800a584:	91c00517 	ldw	r7,20(r18)
 800a588:	a1c01836 	bltu	r20,r7,800a5ec <__sfvwrite_r+0x3cc>
 800a58c:	90c00917 	ldw	r3,36(r18)
 800a590:	91400717 	ldw	r5,28(r18)
 800a594:	e009883a 	mov	r4,fp
 800a598:	b80d883a 	mov	r6,r23
 800a59c:	183ee83a 	callr	r3
 800a5a0:	1021883a 	mov	r16,r2
 800a5a4:	00bfb30e 	bge	zero,r2,800a474 <__sfvwrite_r+0x254>
 800a5a8:	1023883a 	mov	r17,r2
 800a5ac:	1027883a 	mov	r19,r2
 800a5b0:	003f9b06 	br	800a420 <__sfvwrite_r+0x200>
 800a5b4:	b80b883a 	mov	r5,r23
 800a5b8:	800d883a 	mov	r6,r16
 800a5bc:	800a98c0 	call	800a98c <memmove>
 800a5c0:	90c00217 	ldw	r3,8(r18)
 800a5c4:	90800017 	ldw	r2,0(r18)
 800a5c8:	8023883a 	mov	r17,r16
 800a5cc:	1c07c83a 	sub	r3,r3,r16
 800a5d0:	1405883a 	add	r2,r2,r16
 800a5d4:	90c00215 	stw	r3,8(r18)
 800a5d8:	90800015 	stw	r2,0(r18)
 800a5dc:	003fc406 	br	800a4f0 <__sfvwrite_r+0x2d0>
 800a5e0:	a00d883a 	mov	r6,r20
 800a5e4:	a021883a 	mov	r16,r20
 800a5e8:	003f8106 	br	800a3f0 <__sfvwrite_r+0x1d0>
 800a5ec:	b80b883a 	mov	r5,r23
 800a5f0:	a00d883a 	mov	r6,r20
 800a5f4:	800a98c0 	call	800a98c <memmove>
 800a5f8:	90c00217 	ldw	r3,8(r18)
 800a5fc:	90800017 	ldw	r2,0(r18)
 800a600:	a021883a 	mov	r16,r20
 800a604:	1d07c83a 	sub	r3,r3,r20
 800a608:	1505883a 	add	r2,r2,r20
 800a60c:	a023883a 	mov	r17,r20
 800a610:	a027883a 	mov	r19,r20
 800a614:	90c00215 	stw	r3,8(r18)
 800a618:	90800015 	stw	r2,0(r18)
 800a61c:	003f8006 	br	800a420 <__sfvwrite_r+0x200>
 800a620:	b809883a 	mov	r4,r23
 800a624:	01400284 	movi	r5,10
 800a628:	980d883a 	mov	r6,r19
 800a62c:	80059f80 	call	80059f8 <memchr>
 800a630:	10001726 	beq	r2,zero,800a690 <__sfvwrite_r+0x470>
 800a634:	15c5c83a 	sub	r2,r2,r23
 800a638:	15000044 	addi	r20,r2,1
 800a63c:	00800044 	movi	r2,1
 800a640:	d8800015 	stw	r2,0(sp)
 800a644:	003f9806 	br	800a4a8 <__sfvwrite_r+0x288>
 800a648:	b80b883a 	mov	r5,r23
 800a64c:	800d883a 	mov	r6,r16
 800a650:	800a98c0 	call	800a98c <memmove>
 800a654:	90c00017 	ldw	r3,0(r18)
 800a658:	e009883a 	mov	r4,fp
 800a65c:	900b883a 	mov	r5,r18
 800a660:	1c07883a 	add	r3,r3,r16
 800a664:	90c00015 	stw	r3,0(r18)
 800a668:	8027883a 	mov	r19,r16
 800a66c:	8009bb00 	call	8009bb0 <_fflush_r>
 800a670:	103f6b26 	beq	r2,zero,800a420 <__sfvwrite_r+0x200>
 800a674:	003f7f06 	br	800a474 <__sfvwrite_r+0x254>
 800a678:	400b883a 	mov	r5,r8
 800a67c:	e009883a 	mov	r4,fp
 800a680:	800bcc40 	call	800bcc4 <_realloc_r>
 800a684:	103f7626 	beq	r2,zero,800a460 <__sfvwrite_r+0x240>
 800a688:	1023883a 	mov	r17,r2
 800a68c:	003f5006 	br	800a3d0 <__sfvwrite_r+0x1b0>
 800a690:	00c00044 	movi	r3,1
 800a694:	9d000044 	addi	r20,r19,1
 800a698:	d8c00015 	stw	r3,0(sp)
 800a69c:	003f8206 	br	800a4a8 <__sfvwrite_r+0x288>
 800a6a0:	9080030b 	ldhu	r2,12(r18)
 800a6a4:	00c00244 	movi	r3,9
 800a6a8:	013fffc4 	movi	r4,-1
 800a6ac:	10801014 	ori	r2,r2,64
 800a6b0:	9080030d 	sth	r2,12(r18)
 800a6b4:	e0c00015 	stw	r3,0(fp)
 800a6b8:	003f0606 	br	800a2d4 <__sfvwrite_r+0xb4>

0800a6bc <__locale_charset>:
 800a6bc:	d0a00517 	ldw	r2,-32748(gp)
 800a6c0:	f800283a 	ret

0800a6c4 <_localeconv_r>:
 800a6c4:	00820074 	movhi	r2,2049
 800a6c8:	109d6204 	addi	r2,r2,30088
 800a6cc:	f800283a 	ret

0800a6d0 <localeconv>:
 800a6d0:	008200b4 	movhi	r2,2050
 800a6d4:	10a4bf04 	addi	r2,r2,-27908
 800a6d8:	11000017 	ldw	r4,0(r2)
 800a6dc:	800a6c41 	jmpi	800a6c4 <_localeconv_r>

0800a6e0 <_setlocale_r>:
 800a6e0:	defffc04 	addi	sp,sp,-16
 800a6e4:	00c20074 	movhi	r3,2049
 800a6e8:	18dd3804 	addi	r3,r3,29920
 800a6ec:	dc800215 	stw	r18,8(sp)
 800a6f0:	dc400115 	stw	r17,4(sp)
 800a6f4:	dc000015 	stw	r16,0(sp)
 800a6f8:	2023883a 	mov	r17,r4
 800a6fc:	2825883a 	mov	r18,r5
 800a700:	dfc00315 	stw	ra,12(sp)
 800a704:	3021883a 	mov	r16,r6
 800a708:	3009883a 	mov	r4,r6
 800a70c:	180b883a 	mov	r5,r3
 800a710:	30000926 	beq	r6,zero,800a738 <_setlocale_r+0x58>
 800a714:	800c3280 	call	800c328 <strcmp>
 800a718:	8009883a 	mov	r4,r16
 800a71c:	01420074 	movhi	r5,2049
 800a720:	295d4904 	addi	r5,r5,29988
 800a724:	10000b1e 	bne	r2,zero,800a754 <_setlocale_r+0x74>
 800a728:	8c000d15 	stw	r16,52(r17)
 800a72c:	8c800c15 	stw	r18,48(r17)
 800a730:	00c20074 	movhi	r3,2049
 800a734:	18dd3804 	addi	r3,r3,29920
 800a738:	1805883a 	mov	r2,r3
 800a73c:	dfc00317 	ldw	ra,12(sp)
 800a740:	dc800217 	ldw	r18,8(sp)
 800a744:	dc400117 	ldw	r17,4(sp)
 800a748:	dc000017 	ldw	r16,0(sp)
 800a74c:	dec00404 	addi	sp,sp,16
 800a750:	f800283a 	ret
 800a754:	800c3280 	call	800c328 <strcmp>
 800a758:	0007883a 	mov	r3,zero
 800a75c:	103ff226 	beq	r2,zero,800a728 <_setlocale_r+0x48>
 800a760:	003ff506 	br	800a738 <_setlocale_r+0x58>

0800a764 <setlocale>:
 800a764:	018200b4 	movhi	r6,2050
 800a768:	31a4bf04 	addi	r6,r6,-27908
 800a76c:	2007883a 	mov	r3,r4
 800a770:	31000017 	ldw	r4,0(r6)
 800a774:	280d883a 	mov	r6,r5
 800a778:	180b883a 	mov	r5,r3
 800a77c:	800a6e01 	jmpi	800a6e0 <_setlocale_r>

0800a780 <_lseek_r>:
 800a780:	defffd04 	addi	sp,sp,-12
 800a784:	dc000015 	stw	r16,0(sp)
 800a788:	040200b4 	movhi	r16,2050
 800a78c:	842b9404 	addi	r16,r16,-20912
 800a790:	dc400115 	stw	r17,4(sp)
 800a794:	80000015 	stw	zero,0(r16)
 800a798:	2023883a 	mov	r17,r4
 800a79c:	2809883a 	mov	r4,r5
 800a7a0:	300b883a 	mov	r5,r6
 800a7a4:	380d883a 	mov	r6,r7
 800a7a8:	dfc00215 	stw	ra,8(sp)
 800a7ac:	800efc00 	call	800efc0 <lseek>
 800a7b0:	1007883a 	mov	r3,r2
 800a7b4:	00bfffc4 	movi	r2,-1
 800a7b8:	18800626 	beq	r3,r2,800a7d4 <_lseek_r+0x54>
 800a7bc:	1805883a 	mov	r2,r3
 800a7c0:	dfc00217 	ldw	ra,8(sp)
 800a7c4:	dc400117 	ldw	r17,4(sp)
 800a7c8:	dc000017 	ldw	r16,0(sp)
 800a7cc:	dec00304 	addi	sp,sp,12
 800a7d0:	f800283a 	ret
 800a7d4:	80800017 	ldw	r2,0(r16)
 800a7d8:	103ff826 	beq	r2,zero,800a7bc <_lseek_r+0x3c>
 800a7dc:	88800015 	stw	r2,0(r17)
 800a7e0:	1805883a 	mov	r2,r3
 800a7e4:	dfc00217 	ldw	ra,8(sp)
 800a7e8:	dc400117 	ldw	r17,4(sp)
 800a7ec:	dc000017 	ldw	r16,0(sp)
 800a7f0:	dec00304 	addi	sp,sp,12
 800a7f4:	f800283a 	ret

0800a7f8 <__smakebuf_r>:
 800a7f8:	2880030b 	ldhu	r2,12(r5)
 800a7fc:	deffed04 	addi	sp,sp,-76
 800a800:	dc401015 	stw	r17,64(sp)
 800a804:	1080008c 	andi	r2,r2,2
 800a808:	dc000f15 	stw	r16,60(sp)
 800a80c:	dfc01215 	stw	ra,72(sp)
 800a810:	dc801115 	stw	r18,68(sp)
 800a814:	2821883a 	mov	r16,r5
 800a818:	2023883a 	mov	r17,r4
 800a81c:	10000b26 	beq	r2,zero,800a84c <__smakebuf_r+0x54>
 800a820:	28c010c4 	addi	r3,r5,67
 800a824:	00800044 	movi	r2,1
 800a828:	28800515 	stw	r2,20(r5)
 800a82c:	28c00415 	stw	r3,16(r5)
 800a830:	28c00015 	stw	r3,0(r5)
 800a834:	dfc01217 	ldw	ra,72(sp)
 800a838:	dc801117 	ldw	r18,68(sp)
 800a83c:	dc401017 	ldw	r17,64(sp)
 800a840:	dc000f17 	ldw	r16,60(sp)
 800a844:	dec01304 	addi	sp,sp,76
 800a848:	f800283a 	ret
 800a84c:	2940038f 	ldh	r5,14(r5)
 800a850:	28002116 	blt	r5,zero,800a8d8 <__smakebuf_r+0xe0>
 800a854:	d80d883a 	mov	r6,sp
 800a858:	800c5e40 	call	800c5e4 <_fstat_r>
 800a85c:	10001e16 	blt	r2,zero,800a8d8 <__smakebuf_r+0xe0>
 800a860:	d8800117 	ldw	r2,4(sp)
 800a864:	00e00014 	movui	r3,32768
 800a868:	113c000c 	andi	r4,r2,61440
 800a86c:	20c03126 	beq	r4,r3,800a934 <__smakebuf_r+0x13c>
 800a870:	8080030b 	ldhu	r2,12(r16)
 800a874:	00c80004 	movi	r3,8192
 800a878:	10820014 	ori	r2,r2,2048
 800a87c:	8080030d 	sth	r2,12(r16)
 800a880:	20c01e26 	beq	r4,r3,800a8fc <__smakebuf_r+0x104>
 800a884:	04810004 	movi	r18,1024
 800a888:	8809883a 	mov	r4,r17
 800a88c:	900b883a 	mov	r5,r18
 800a890:	80052b80 	call	80052b8 <_malloc_r>
 800a894:	1009883a 	mov	r4,r2
 800a898:	10003126 	beq	r2,zero,800a960 <__smakebuf_r+0x168>
 800a89c:	80c0030b 	ldhu	r3,12(r16)
 800a8a0:	00820034 	movhi	r2,2048
 800a8a4:	1093e704 	addi	r2,r2,20380
 800a8a8:	88800f15 	stw	r2,60(r17)
 800a8ac:	18c02014 	ori	r3,r3,128
 800a8b0:	84800515 	stw	r18,20(r16)
 800a8b4:	80c0030d 	sth	r3,12(r16)
 800a8b8:	81000415 	stw	r4,16(r16)
 800a8bc:	81000015 	stw	r4,0(r16)
 800a8c0:	dfc01217 	ldw	ra,72(sp)
 800a8c4:	dc801117 	ldw	r18,68(sp)
 800a8c8:	dc401017 	ldw	r17,64(sp)
 800a8cc:	dc000f17 	ldw	r16,60(sp)
 800a8d0:	dec01304 	addi	sp,sp,76
 800a8d4:	f800283a 	ret
 800a8d8:	80c0030b 	ldhu	r3,12(r16)
 800a8dc:	1880200c 	andi	r2,r3,128
 800a8e0:	10000426 	beq	r2,zero,800a8f4 <__smakebuf_r+0xfc>
 800a8e4:	04801004 	movi	r18,64
 800a8e8:	18820014 	ori	r2,r3,2048
 800a8ec:	8080030d 	sth	r2,12(r16)
 800a8f0:	003fe506 	br	800a888 <__smakebuf_r+0x90>
 800a8f4:	04810004 	movi	r18,1024
 800a8f8:	003ffb06 	br	800a8e8 <__smakebuf_r+0xf0>
 800a8fc:	8140038f 	ldh	r5,14(r16)
 800a900:	8809883a 	mov	r4,r17
 800a904:	800c6580 	call	800c658 <_isatty_r>
 800a908:	103fde26 	beq	r2,zero,800a884 <__smakebuf_r+0x8c>
 800a90c:	8080030b 	ldhu	r2,12(r16)
 800a910:	80c010c4 	addi	r3,r16,67
 800a914:	04810004 	movi	r18,1024
 800a918:	10800054 	ori	r2,r2,1
 800a91c:	8080030d 	sth	r2,12(r16)
 800a920:	00800044 	movi	r2,1
 800a924:	80c00415 	stw	r3,16(r16)
 800a928:	80800515 	stw	r2,20(r16)
 800a92c:	80c00015 	stw	r3,0(r16)
 800a930:	003fd506 	br	800a888 <__smakebuf_r+0x90>
 800a934:	80c00a17 	ldw	r3,40(r16)
 800a938:	00820034 	movhi	r2,2048
 800a93c:	1097ef04 	addi	r2,r2,24508
 800a940:	18bfcb1e 	bne	r3,r2,800a870 <__smakebuf_r+0x78>
 800a944:	8080030b 	ldhu	r2,12(r16)
 800a948:	00c10004 	movi	r3,1024
 800a94c:	1825883a 	mov	r18,r3
 800a950:	10c4b03a 	or	r2,r2,r3
 800a954:	8080030d 	sth	r2,12(r16)
 800a958:	80c01315 	stw	r3,76(r16)
 800a95c:	003fca06 	br	800a888 <__smakebuf_r+0x90>
 800a960:	8100030b 	ldhu	r4,12(r16)
 800a964:	2080800c 	andi	r2,r4,512
 800a968:	103fb21e 	bne	r2,zero,800a834 <__smakebuf_r+0x3c>
 800a96c:	80c010c4 	addi	r3,r16,67
 800a970:	21000094 	ori	r4,r4,2
 800a974:	00800044 	movi	r2,1
 800a978:	80800515 	stw	r2,20(r16)
 800a97c:	8100030d 	sth	r4,12(r16)
 800a980:	80c00415 	stw	r3,16(r16)
 800a984:	80c00015 	stw	r3,0(r16)
 800a988:	003faa06 	br	800a834 <__smakebuf_r+0x3c>

0800a98c <memmove>:
 800a98c:	2807883a 	mov	r3,r5
 800a990:	2011883a 	mov	r8,r4
 800a994:	29000c2e 	bgeu	r5,r4,800a9c8 <memmove+0x3c>
 800a998:	298f883a 	add	r7,r5,r6
 800a99c:	21c00a2e 	bgeu	r4,r7,800a9c8 <memmove+0x3c>
 800a9a0:	30000726 	beq	r6,zero,800a9c0 <memmove+0x34>
 800a9a4:	2187883a 	add	r3,r4,r6
 800a9a8:	198dc83a 	sub	r6,r3,r6
 800a9ac:	39ffffc4 	addi	r7,r7,-1
 800a9b0:	38800003 	ldbu	r2,0(r7)
 800a9b4:	18ffffc4 	addi	r3,r3,-1
 800a9b8:	18800005 	stb	r2,0(r3)
 800a9bc:	19bffb1e 	bne	r3,r6,800a9ac <memmove+0x20>
 800a9c0:	2005883a 	mov	r2,r4
 800a9c4:	f800283a 	ret
 800a9c8:	01c003c4 	movi	r7,15
 800a9cc:	39800a36 	bltu	r7,r6,800a9f8 <memmove+0x6c>
 800a9d0:	303ffb26 	beq	r6,zero,800a9c0 <memmove+0x34>
 800a9d4:	400f883a 	mov	r7,r8
 800a9d8:	320d883a 	add	r6,r6,r8
 800a9dc:	28800003 	ldbu	r2,0(r5)
 800a9e0:	29400044 	addi	r5,r5,1
 800a9e4:	38800005 	stb	r2,0(r7)
 800a9e8:	39c00044 	addi	r7,r7,1
 800a9ec:	39bffb1e 	bne	r7,r6,800a9dc <memmove+0x50>
 800a9f0:	2005883a 	mov	r2,r4
 800a9f4:	f800283a 	ret
 800a9f8:	1904b03a 	or	r2,r3,r4
 800a9fc:	108000cc 	andi	r2,r2,3
 800aa00:	103ff31e 	bne	r2,zero,800a9d0 <memmove+0x44>
 800aa04:	3811883a 	mov	r8,r7
 800aa08:	180b883a 	mov	r5,r3
 800aa0c:	200f883a 	mov	r7,r4
 800aa10:	28c00017 	ldw	r3,0(r5)
 800aa14:	31bffc04 	addi	r6,r6,-16
 800aa18:	38c00015 	stw	r3,0(r7)
 800aa1c:	28800117 	ldw	r2,4(r5)
 800aa20:	38800115 	stw	r2,4(r7)
 800aa24:	28c00217 	ldw	r3,8(r5)
 800aa28:	38c00215 	stw	r3,8(r7)
 800aa2c:	28800317 	ldw	r2,12(r5)
 800aa30:	29400404 	addi	r5,r5,16
 800aa34:	38800315 	stw	r2,12(r7)
 800aa38:	39c00404 	addi	r7,r7,16
 800aa3c:	41bff436 	bltu	r8,r6,800aa10 <memmove+0x84>
 800aa40:	008000c4 	movi	r2,3
 800aa44:	1180072e 	bgeu	r2,r6,800aa64 <memmove+0xd8>
 800aa48:	1007883a 	mov	r3,r2
 800aa4c:	28800017 	ldw	r2,0(r5)
 800aa50:	31bfff04 	addi	r6,r6,-4
 800aa54:	29400104 	addi	r5,r5,4
 800aa58:	38800015 	stw	r2,0(r7)
 800aa5c:	39c00104 	addi	r7,r7,4
 800aa60:	19bffa36 	bltu	r3,r6,800aa4c <memmove+0xc0>
 800aa64:	3811883a 	mov	r8,r7
 800aa68:	003fd906 	br	800a9d0 <memmove+0x44>

0800aa6c <_Bfree>:
 800aa6c:	28000826 	beq	r5,zero,800aa90 <_Bfree+0x24>
 800aa70:	28800117 	ldw	r2,4(r5)
 800aa74:	21001317 	ldw	r4,76(r4)
 800aa78:	1085883a 	add	r2,r2,r2
 800aa7c:	1085883a 	add	r2,r2,r2
 800aa80:	1105883a 	add	r2,r2,r4
 800aa84:	10c00017 	ldw	r3,0(r2)
 800aa88:	28c00015 	stw	r3,0(r5)
 800aa8c:	11400015 	stw	r5,0(r2)
 800aa90:	f800283a 	ret

0800aa94 <__hi0bits>:
 800aa94:	20bfffec 	andhi	r2,r4,65535
 800aa98:	10001426 	beq	r2,zero,800aaec <__hi0bits+0x58>
 800aa9c:	0007883a 	mov	r3,zero
 800aaa0:	20bfc02c 	andhi	r2,r4,65280
 800aaa4:	1000021e 	bne	r2,zero,800aab0 <__hi0bits+0x1c>
 800aaa8:	2008923a 	slli	r4,r4,8
 800aaac:	18c00204 	addi	r3,r3,8
 800aab0:	20bc002c 	andhi	r2,r4,61440
 800aab4:	1000021e 	bne	r2,zero,800aac0 <__hi0bits+0x2c>
 800aab8:	2008913a 	slli	r4,r4,4
 800aabc:	18c00104 	addi	r3,r3,4
 800aac0:	20b0002c 	andhi	r2,r4,49152
 800aac4:	1000031e 	bne	r2,zero,800aad4 <__hi0bits+0x40>
 800aac8:	2105883a 	add	r2,r4,r4
 800aacc:	18c00084 	addi	r3,r3,2
 800aad0:	1089883a 	add	r4,r2,r2
 800aad4:	20000316 	blt	r4,zero,800aae4 <__hi0bits+0x50>
 800aad8:	2090002c 	andhi	r2,r4,16384
 800aadc:	10000626 	beq	r2,zero,800aaf8 <__hi0bits+0x64>
 800aae0:	18c00044 	addi	r3,r3,1
 800aae4:	1805883a 	mov	r2,r3
 800aae8:	f800283a 	ret
 800aaec:	2008943a 	slli	r4,r4,16
 800aaf0:	00c00404 	movi	r3,16
 800aaf4:	003fea06 	br	800aaa0 <__hi0bits+0xc>
 800aaf8:	00c00804 	movi	r3,32
 800aafc:	1805883a 	mov	r2,r3
 800ab00:	f800283a 	ret

0800ab04 <__lo0bits>:
 800ab04:	20c00017 	ldw	r3,0(r4)
 800ab08:	188001cc 	andi	r2,r3,7
 800ab0c:	10000a26 	beq	r2,zero,800ab38 <__lo0bits+0x34>
 800ab10:	1880004c 	andi	r2,r3,1
 800ab14:	1005003a 	cmpeq	r2,r2,zero
 800ab18:	10002126 	beq	r2,zero,800aba0 <__lo0bits+0x9c>
 800ab1c:	1880008c 	andi	r2,r3,2
 800ab20:	1000251e 	bne	r2,zero,800abb8 <__lo0bits+0xb4>
 800ab24:	1804d0ba 	srli	r2,r3,2
 800ab28:	01400084 	movi	r5,2
 800ab2c:	20800015 	stw	r2,0(r4)
 800ab30:	2805883a 	mov	r2,r5
 800ab34:	f800283a 	ret
 800ab38:	18bfffcc 	andi	r2,r3,65535
 800ab3c:	10001526 	beq	r2,zero,800ab94 <__lo0bits+0x90>
 800ab40:	000b883a 	mov	r5,zero
 800ab44:	18803fcc 	andi	r2,r3,255
 800ab48:	1000021e 	bne	r2,zero,800ab54 <__lo0bits+0x50>
 800ab4c:	1806d23a 	srli	r3,r3,8
 800ab50:	29400204 	addi	r5,r5,8
 800ab54:	188003cc 	andi	r2,r3,15
 800ab58:	1000021e 	bne	r2,zero,800ab64 <__lo0bits+0x60>
 800ab5c:	1806d13a 	srli	r3,r3,4
 800ab60:	29400104 	addi	r5,r5,4
 800ab64:	188000cc 	andi	r2,r3,3
 800ab68:	1000021e 	bne	r2,zero,800ab74 <__lo0bits+0x70>
 800ab6c:	1806d0ba 	srli	r3,r3,2
 800ab70:	29400084 	addi	r5,r5,2
 800ab74:	1880004c 	andi	r2,r3,1
 800ab78:	1000031e 	bne	r2,zero,800ab88 <__lo0bits+0x84>
 800ab7c:	1806d07a 	srli	r3,r3,1
 800ab80:	18000a26 	beq	r3,zero,800abac <__lo0bits+0xa8>
 800ab84:	29400044 	addi	r5,r5,1
 800ab88:	2805883a 	mov	r2,r5
 800ab8c:	20c00015 	stw	r3,0(r4)
 800ab90:	f800283a 	ret
 800ab94:	1806d43a 	srli	r3,r3,16
 800ab98:	01400404 	movi	r5,16
 800ab9c:	003fe906 	br	800ab44 <__lo0bits+0x40>
 800aba0:	000b883a 	mov	r5,zero
 800aba4:	2805883a 	mov	r2,r5
 800aba8:	f800283a 	ret
 800abac:	01400804 	movi	r5,32
 800abb0:	2805883a 	mov	r2,r5
 800abb4:	f800283a 	ret
 800abb8:	1804d07a 	srli	r2,r3,1
 800abbc:	01400044 	movi	r5,1
 800abc0:	20800015 	stw	r2,0(r4)
 800abc4:	003fda06 	br	800ab30 <__lo0bits+0x2c>

0800abc8 <__mcmp>:
 800abc8:	20800417 	ldw	r2,16(r4)
 800abcc:	28c00417 	ldw	r3,16(r5)
 800abd0:	10cfc83a 	sub	r7,r2,r3
 800abd4:	38000c1e 	bne	r7,zero,800ac08 <__mcmp+0x40>
 800abd8:	18c5883a 	add	r2,r3,r3
 800abdc:	1085883a 	add	r2,r2,r2
 800abe0:	10c00504 	addi	r3,r2,20
 800abe4:	21000504 	addi	r4,r4,20
 800abe8:	28cb883a 	add	r5,r5,r3
 800abec:	2085883a 	add	r2,r4,r2
 800abf0:	10bfff04 	addi	r2,r2,-4
 800abf4:	297fff04 	addi	r5,r5,-4
 800abf8:	11800017 	ldw	r6,0(r2)
 800abfc:	28c00017 	ldw	r3,0(r5)
 800ac00:	30c0031e 	bne	r6,r3,800ac10 <__mcmp+0x48>
 800ac04:	20bffa36 	bltu	r4,r2,800abf0 <__mcmp+0x28>
 800ac08:	3805883a 	mov	r2,r7
 800ac0c:	f800283a 	ret
 800ac10:	30c00336 	bltu	r6,r3,800ac20 <__mcmp+0x58>
 800ac14:	01c00044 	movi	r7,1
 800ac18:	3805883a 	mov	r2,r7
 800ac1c:	f800283a 	ret
 800ac20:	01ffffc4 	movi	r7,-1
 800ac24:	003ff806 	br	800ac08 <__mcmp+0x40>

0800ac28 <__ulp>:
 800ac28:	295ffc2c 	andhi	r5,r5,32752
 800ac2c:	013f3034 	movhi	r4,64704
 800ac30:	290b883a 	add	r5,r5,r4
 800ac34:	0145c83a 	sub	r2,zero,r5
 800ac38:	1007d53a 	srai	r3,r2,20
 800ac3c:	000d883a 	mov	r6,zero
 800ac40:	0140040e 	bge	zero,r5,800ac54 <__ulp+0x2c>
 800ac44:	280f883a 	mov	r7,r5
 800ac48:	3807883a 	mov	r3,r7
 800ac4c:	3005883a 	mov	r2,r6
 800ac50:	f800283a 	ret
 800ac54:	008004c4 	movi	r2,19
 800ac58:	193ffb04 	addi	r4,r3,-20
 800ac5c:	10c00c0e 	bge	r2,r3,800ac90 <__ulp+0x68>
 800ac60:	008007c4 	movi	r2,31
 800ac64:	1107c83a 	sub	r3,r2,r4
 800ac68:	00800784 	movi	r2,30
 800ac6c:	01400044 	movi	r5,1
 800ac70:	11000216 	blt	r2,r4,800ac7c <__ulp+0x54>
 800ac74:	00800044 	movi	r2,1
 800ac78:	10ca983a 	sll	r5,r2,r3
 800ac7c:	000f883a 	mov	r7,zero
 800ac80:	280d883a 	mov	r6,r5
 800ac84:	3807883a 	mov	r3,r7
 800ac88:	3005883a 	mov	r2,r6
 800ac8c:	f800283a 	ret
 800ac90:	00800234 	movhi	r2,8
 800ac94:	10cfd83a 	sra	r7,r2,r3
 800ac98:	000d883a 	mov	r6,zero
 800ac9c:	3005883a 	mov	r2,r6
 800aca0:	3807883a 	mov	r3,r7
 800aca4:	f800283a 	ret

0800aca8 <__b2d>:
 800aca8:	20800417 	ldw	r2,16(r4)
 800acac:	defff904 	addi	sp,sp,-28
 800acb0:	dd000415 	stw	r20,16(sp)
 800acb4:	1085883a 	add	r2,r2,r2
 800acb8:	25000504 	addi	r20,r4,20
 800acbc:	1085883a 	add	r2,r2,r2
 800acc0:	dc000015 	stw	r16,0(sp)
 800acc4:	a0a1883a 	add	r16,r20,r2
 800acc8:	dd400515 	stw	r21,20(sp)
 800accc:	857fff17 	ldw	r21,-4(r16)
 800acd0:	dc400115 	stw	r17,4(sp)
 800acd4:	dfc00615 	stw	ra,24(sp)
 800acd8:	a809883a 	mov	r4,r21
 800acdc:	2823883a 	mov	r17,r5
 800ace0:	dcc00315 	stw	r19,12(sp)
 800ace4:	dc800215 	stw	r18,8(sp)
 800ace8:	800aa940 	call	800aa94 <__hi0bits>
 800acec:	100b883a 	mov	r5,r2
 800acf0:	00800804 	movi	r2,32
 800acf4:	1145c83a 	sub	r2,r2,r5
 800acf8:	88800015 	stw	r2,0(r17)
 800acfc:	00800284 	movi	r2,10
 800ad00:	80ffff04 	addi	r3,r16,-4
 800ad04:	11401416 	blt	r2,r5,800ad58 <__b2d+0xb0>
 800ad08:	008002c4 	movi	r2,11
 800ad0c:	1149c83a 	sub	r4,r2,r5
 800ad10:	a0c02736 	bltu	r20,r3,800adb0 <__b2d+0x108>
 800ad14:	000d883a 	mov	r6,zero
 800ad18:	28800544 	addi	r2,r5,21
 800ad1c:	a906d83a 	srl	r3,r21,r4
 800ad20:	a884983a 	sll	r2,r21,r2
 800ad24:	1ccffc34 	orhi	r19,r3,16368
 800ad28:	11a4b03a 	or	r18,r2,r6
 800ad2c:	9005883a 	mov	r2,r18
 800ad30:	9807883a 	mov	r3,r19
 800ad34:	dfc00617 	ldw	ra,24(sp)
 800ad38:	dd400517 	ldw	r21,20(sp)
 800ad3c:	dd000417 	ldw	r20,16(sp)
 800ad40:	dcc00317 	ldw	r19,12(sp)
 800ad44:	dc800217 	ldw	r18,8(sp)
 800ad48:	dc400117 	ldw	r17,4(sp)
 800ad4c:	dc000017 	ldw	r16,0(sp)
 800ad50:	dec00704 	addi	sp,sp,28
 800ad54:	f800283a 	ret
 800ad58:	a0c00e36 	bltu	r20,r3,800ad94 <__b2d+0xec>
 800ad5c:	293ffd44 	addi	r4,r5,-11
 800ad60:	000d883a 	mov	r6,zero
 800ad64:	20000f26 	beq	r4,zero,800ada4 <__b2d+0xfc>
 800ad68:	00800804 	movi	r2,32
 800ad6c:	110bc83a 	sub	r5,r2,r4
 800ad70:	a0c01236 	bltu	r20,r3,800adbc <__b2d+0x114>
 800ad74:	000f883a 	mov	r7,zero
 800ad78:	a904983a 	sll	r2,r21,r4
 800ad7c:	3146d83a 	srl	r3,r6,r5
 800ad80:	3108983a 	sll	r4,r6,r4
 800ad84:	108ffc34 	orhi	r2,r2,16368
 800ad88:	18a6b03a 	or	r19,r3,r2
 800ad8c:	3924b03a 	or	r18,r7,r4
 800ad90:	003fe606 	br	800ad2c <__b2d+0x84>
 800ad94:	293ffd44 	addi	r4,r5,-11
 800ad98:	81bffe17 	ldw	r6,-8(r16)
 800ad9c:	80fffe04 	addi	r3,r16,-8
 800ada0:	203ff11e 	bne	r4,zero,800ad68 <__b2d+0xc0>
 800ada4:	accffc34 	orhi	r19,r21,16368
 800ada8:	3025883a 	mov	r18,r6
 800adac:	003fdf06 	br	800ad2c <__b2d+0x84>
 800adb0:	18bfff17 	ldw	r2,-4(r3)
 800adb4:	110cd83a 	srl	r6,r2,r4
 800adb8:	003fd706 	br	800ad18 <__b2d+0x70>
 800adbc:	18bfff17 	ldw	r2,-4(r3)
 800adc0:	114ed83a 	srl	r7,r2,r5
 800adc4:	003fec06 	br	800ad78 <__b2d+0xd0>

0800adc8 <__ratio>:
 800adc8:	defff904 	addi	sp,sp,-28
 800adcc:	dc400215 	stw	r17,8(sp)
 800add0:	2823883a 	mov	r17,r5
 800add4:	d80b883a 	mov	r5,sp
 800add8:	dfc00615 	stw	ra,24(sp)
 800addc:	dd000515 	stw	r20,20(sp)
 800ade0:	dcc00415 	stw	r19,16(sp)
 800ade4:	dc800315 	stw	r18,12(sp)
 800ade8:	2025883a 	mov	r18,r4
 800adec:	800aca80 	call	800aca8 <__b2d>
 800adf0:	8809883a 	mov	r4,r17
 800adf4:	d9400104 	addi	r5,sp,4
 800adf8:	1027883a 	mov	r19,r2
 800adfc:	1829883a 	mov	r20,r3
 800ae00:	800aca80 	call	800aca8 <__b2d>
 800ae04:	89000417 	ldw	r4,16(r17)
 800ae08:	91c00417 	ldw	r7,16(r18)
 800ae0c:	d9800117 	ldw	r6,4(sp)
 800ae10:	180b883a 	mov	r5,r3
 800ae14:	390fc83a 	sub	r7,r7,r4
 800ae18:	1009883a 	mov	r4,r2
 800ae1c:	d8800017 	ldw	r2,0(sp)
 800ae20:	380e917a 	slli	r7,r7,5
 800ae24:	2011883a 	mov	r8,r4
 800ae28:	1185c83a 	sub	r2,r2,r6
 800ae2c:	11c5883a 	add	r2,r2,r7
 800ae30:	1006953a 	slli	r3,r2,20
 800ae34:	2813883a 	mov	r9,r5
 800ae38:	00800d0e 	bge	zero,r2,800ae70 <__ratio+0xa8>
 800ae3c:	1d29883a 	add	r20,r3,r20
 800ae40:	a00b883a 	mov	r5,r20
 800ae44:	480f883a 	mov	r7,r9
 800ae48:	9809883a 	mov	r4,r19
 800ae4c:	400d883a 	mov	r6,r8
 800ae50:	800db1c0 	call	800db1c <__divdf3>
 800ae54:	dfc00617 	ldw	ra,24(sp)
 800ae58:	dd000517 	ldw	r20,20(sp)
 800ae5c:	dcc00417 	ldw	r19,16(sp)
 800ae60:	dc800317 	ldw	r18,12(sp)
 800ae64:	dc400217 	ldw	r17,8(sp)
 800ae68:	dec00704 	addi	sp,sp,28
 800ae6c:	f800283a 	ret
 800ae70:	28d3c83a 	sub	r9,r5,r3
 800ae74:	003ff206 	br	800ae40 <__ratio+0x78>

0800ae78 <_mprec_log10>:
 800ae78:	defffe04 	addi	sp,sp,-8
 800ae7c:	008005c4 	movi	r2,23
 800ae80:	dc000015 	stw	r16,0(sp)
 800ae84:	dfc00115 	stw	ra,4(sp)
 800ae88:	2021883a 	mov	r16,r4
 800ae8c:	11000c16 	blt	r2,r4,800aec0 <_mprec_log10+0x48>
 800ae90:	200490fa 	slli	r2,r4,3
 800ae94:	00c20074 	movhi	r3,2049
 800ae98:	18dd6e04 	addi	r3,r3,30136
 800ae9c:	10c5883a 	add	r2,r2,r3
 800aea0:	12400117 	ldw	r9,4(r2)
 800aea4:	12000017 	ldw	r8,0(r2)
 800aea8:	4807883a 	mov	r3,r9
 800aeac:	4005883a 	mov	r2,r8
 800aeb0:	dfc00117 	ldw	ra,4(sp)
 800aeb4:	dc000017 	ldw	r16,0(sp)
 800aeb8:	dec00204 	addi	sp,sp,8
 800aebc:	f800283a 	ret
 800aec0:	0011883a 	mov	r8,zero
 800aec4:	024ffc34 	movhi	r9,16368
 800aec8:	0005883a 	mov	r2,zero
 800aecc:	00d00934 	movhi	r3,16420
 800aed0:	480b883a 	mov	r5,r9
 800aed4:	4009883a 	mov	r4,r8
 800aed8:	180f883a 	mov	r7,r3
 800aedc:	100d883a 	mov	r6,r2
 800aee0:	800d7580 	call	800d758 <__muldf3>
 800aee4:	843fffc4 	addi	r16,r16,-1
 800aee8:	1011883a 	mov	r8,r2
 800aeec:	1813883a 	mov	r9,r3
 800aef0:	803ff51e 	bne	r16,zero,800aec8 <_mprec_log10+0x50>
 800aef4:	4005883a 	mov	r2,r8
 800aef8:	4807883a 	mov	r3,r9
 800aefc:	dfc00117 	ldw	ra,4(sp)
 800af00:	dc000017 	ldw	r16,0(sp)
 800af04:	dec00204 	addi	sp,sp,8
 800af08:	f800283a 	ret

0800af0c <__copybits>:
 800af0c:	297fffc4 	addi	r5,r5,-1
 800af10:	30800417 	ldw	r2,16(r6)
 800af14:	280bd17a 	srai	r5,r5,5
 800af18:	31800504 	addi	r6,r6,20
 800af1c:	1085883a 	add	r2,r2,r2
 800af20:	294b883a 	add	r5,r5,r5
 800af24:	294b883a 	add	r5,r5,r5
 800af28:	1085883a 	add	r2,r2,r2
 800af2c:	290b883a 	add	r5,r5,r4
 800af30:	3087883a 	add	r3,r6,r2
 800af34:	29400104 	addi	r5,r5,4
 800af38:	30c0052e 	bgeu	r6,r3,800af50 <__copybits+0x44>
 800af3c:	30800017 	ldw	r2,0(r6)
 800af40:	31800104 	addi	r6,r6,4
 800af44:	20800015 	stw	r2,0(r4)
 800af48:	21000104 	addi	r4,r4,4
 800af4c:	30fffb36 	bltu	r6,r3,800af3c <__copybits+0x30>
 800af50:	2140032e 	bgeu	r4,r5,800af60 <__copybits+0x54>
 800af54:	20000015 	stw	zero,0(r4)
 800af58:	21000104 	addi	r4,r4,4
 800af5c:	217ffd36 	bltu	r4,r5,800af54 <__copybits+0x48>
 800af60:	f800283a 	ret

0800af64 <__any_on>:
 800af64:	20800417 	ldw	r2,16(r4)
 800af68:	2807d17a 	srai	r3,r5,5
 800af6c:	21000504 	addi	r4,r4,20
 800af70:	10c00d0e 	bge	r2,r3,800afa8 <__any_on+0x44>
 800af74:	1085883a 	add	r2,r2,r2
 800af78:	1085883a 	add	r2,r2,r2
 800af7c:	208d883a 	add	r6,r4,r2
 800af80:	2180182e 	bgeu	r4,r6,800afe4 <__any_on+0x80>
 800af84:	30bfff17 	ldw	r2,-4(r6)
 800af88:	30ffff04 	addi	r3,r6,-4
 800af8c:	1000041e 	bne	r2,zero,800afa0 <__any_on+0x3c>
 800af90:	20c0142e 	bgeu	r4,r3,800afe4 <__any_on+0x80>
 800af94:	18ffff04 	addi	r3,r3,-4
 800af98:	18800017 	ldw	r2,0(r3)
 800af9c:	103ffc26 	beq	r2,zero,800af90 <__any_on+0x2c>
 800afa0:	00800044 	movi	r2,1
 800afa4:	f800283a 	ret
 800afa8:	18800a0e 	bge	r3,r2,800afd4 <__any_on+0x70>
 800afac:	294007cc 	andi	r5,r5,31
 800afb0:	28000826 	beq	r5,zero,800afd4 <__any_on+0x70>
 800afb4:	18c5883a 	add	r2,r3,r3
 800afb8:	1085883a 	add	r2,r2,r2
 800afbc:	208d883a 	add	r6,r4,r2
 800afc0:	30c00017 	ldw	r3,0(r6)
 800afc4:	1944d83a 	srl	r2,r3,r5
 800afc8:	1144983a 	sll	r2,r2,r5
 800afcc:	18bff41e 	bne	r3,r2,800afa0 <__any_on+0x3c>
 800afd0:	003feb06 	br	800af80 <__any_on+0x1c>
 800afd4:	18c5883a 	add	r2,r3,r3
 800afd8:	1085883a 	add	r2,r2,r2
 800afdc:	208d883a 	add	r6,r4,r2
 800afe0:	003fe706 	br	800af80 <__any_on+0x1c>
 800afe4:	0005883a 	mov	r2,zero
 800afe8:	f800283a 	ret

0800afec <_Balloc>:
 800afec:	20c01317 	ldw	r3,76(r4)
 800aff0:	defffb04 	addi	sp,sp,-20
 800aff4:	dcc00315 	stw	r19,12(sp)
 800aff8:	dc800215 	stw	r18,8(sp)
 800affc:	dfc00415 	stw	ra,16(sp)
 800b000:	2825883a 	mov	r18,r5
 800b004:	dc400115 	stw	r17,4(sp)
 800b008:	dc000015 	stw	r16,0(sp)
 800b00c:	2027883a 	mov	r19,r4
 800b010:	01800404 	movi	r6,16
 800b014:	01400104 	movi	r5,4
 800b018:	18001726 	beq	r3,zero,800b078 <_Balloc+0x8c>
 800b01c:	01400044 	movi	r5,1
 800b020:	9485883a 	add	r2,r18,r18
 800b024:	2ca2983a 	sll	r17,r5,r18
 800b028:	1085883a 	add	r2,r2,r2
 800b02c:	10c7883a 	add	r3,r2,r3
 800b030:	1c000017 	ldw	r16,0(r3)
 800b034:	8c4d883a 	add	r6,r17,r17
 800b038:	318d883a 	add	r6,r6,r6
 800b03c:	9809883a 	mov	r4,r19
 800b040:	31800504 	addi	r6,r6,20
 800b044:	80001226 	beq	r16,zero,800b090 <_Balloc+0xa4>
 800b048:	80800017 	ldw	r2,0(r16)
 800b04c:	18800015 	stw	r2,0(r3)
 800b050:	80000415 	stw	zero,16(r16)
 800b054:	80000315 	stw	zero,12(r16)
 800b058:	8005883a 	mov	r2,r16
 800b05c:	dfc00417 	ldw	ra,16(sp)
 800b060:	dcc00317 	ldw	r19,12(sp)
 800b064:	dc800217 	ldw	r18,8(sp)
 800b068:	dc400117 	ldw	r17,4(sp)
 800b06c:	dc000017 	ldw	r16,0(sp)
 800b070:	dec00504 	addi	sp,sp,20
 800b074:	f800283a 	ret
 800b078:	800c5300 	call	800c530 <_calloc_r>
 800b07c:	1007883a 	mov	r3,r2
 800b080:	0021883a 	mov	r16,zero
 800b084:	98801315 	stw	r2,76(r19)
 800b088:	103fe41e 	bne	r2,zero,800b01c <_Balloc+0x30>
 800b08c:	003ff206 	br	800b058 <_Balloc+0x6c>
 800b090:	800c5300 	call	800c530 <_calloc_r>
 800b094:	103ff026 	beq	r2,zero,800b058 <_Balloc+0x6c>
 800b098:	1021883a 	mov	r16,r2
 800b09c:	14800115 	stw	r18,4(r2)
 800b0a0:	14400215 	stw	r17,8(r2)
 800b0a4:	003fea06 	br	800b050 <_Balloc+0x64>

0800b0a8 <__d2b>:
 800b0a8:	defff504 	addi	sp,sp,-44
 800b0ac:	dcc00515 	stw	r19,20(sp)
 800b0b0:	04c00044 	movi	r19,1
 800b0b4:	dc000215 	stw	r16,8(sp)
 800b0b8:	2821883a 	mov	r16,r5
 800b0bc:	980b883a 	mov	r5,r19
 800b0c0:	ddc00915 	stw	r23,36(sp)
 800b0c4:	dd800815 	stw	r22,32(sp)
 800b0c8:	dd400715 	stw	r21,28(sp)
 800b0cc:	dd000615 	stw	r20,24(sp)
 800b0d0:	dc800415 	stw	r18,16(sp)
 800b0d4:	dc400315 	stw	r17,12(sp)
 800b0d8:	dfc00a15 	stw	ra,40(sp)
 800b0dc:	3023883a 	mov	r17,r6
 800b0e0:	382d883a 	mov	r22,r7
 800b0e4:	ddc00b17 	ldw	r23,44(sp)
 800b0e8:	800afec0 	call	800afec <_Balloc>
 800b0ec:	1025883a 	mov	r18,r2
 800b0f0:	00a00034 	movhi	r2,32768
 800b0f4:	10bfffc4 	addi	r2,r2,-1
 800b0f8:	8888703a 	and	r4,r17,r2
 800b0fc:	202ad53a 	srli	r21,r4,20
 800b100:	00800434 	movhi	r2,16
 800b104:	10bfffc4 	addi	r2,r2,-1
 800b108:	8886703a 	and	r3,r17,r2
 800b10c:	a829003a 	cmpeq	r20,r21,zero
 800b110:	800b883a 	mov	r5,r16
 800b114:	d8c00115 	stw	r3,4(sp)
 800b118:	94000504 	addi	r16,r18,20
 800b11c:	a000021e 	bne	r20,zero,800b128 <__d2b+0x80>
 800b120:	18c00434 	orhi	r3,r3,16
 800b124:	d8c00115 	stw	r3,4(sp)
 800b128:	28002726 	beq	r5,zero,800b1c8 <__d2b+0x120>
 800b12c:	d809883a 	mov	r4,sp
 800b130:	d9400015 	stw	r5,0(sp)
 800b134:	800ab040 	call	800ab04 <__lo0bits>
 800b138:	100d883a 	mov	r6,r2
 800b13c:	10003526 	beq	r2,zero,800b214 <__d2b+0x16c>
 800b140:	d8c00117 	ldw	r3,4(sp)
 800b144:	00800804 	movi	r2,32
 800b148:	1185c83a 	sub	r2,r2,r6
 800b14c:	d9000017 	ldw	r4,0(sp)
 800b150:	1886983a 	sll	r3,r3,r2
 800b154:	1906b03a 	or	r3,r3,r4
 800b158:	90c00515 	stw	r3,20(r18)
 800b15c:	d8c00117 	ldw	r3,4(sp)
 800b160:	1986d83a 	srl	r3,r3,r6
 800b164:	d8c00115 	stw	r3,4(sp)
 800b168:	180b003a 	cmpeq	r5,r3,zero
 800b16c:	00800084 	movi	r2,2
 800b170:	114bc83a 	sub	r5,r2,r5
 800b174:	80c00115 	stw	r3,4(r16)
 800b178:	91400415 	stw	r5,16(r18)
 800b17c:	a0001a1e 	bne	r20,zero,800b1e8 <__d2b+0x140>
 800b180:	3545883a 	add	r2,r6,r21
 800b184:	10bef344 	addi	r2,r2,-1075
 800b188:	00c00d44 	movi	r3,53
 800b18c:	b0800015 	stw	r2,0(r22)
 800b190:	1987c83a 	sub	r3,r3,r6
 800b194:	b8c00015 	stw	r3,0(r23)
 800b198:	9005883a 	mov	r2,r18
 800b19c:	dfc00a17 	ldw	ra,40(sp)
 800b1a0:	ddc00917 	ldw	r23,36(sp)
 800b1a4:	dd800817 	ldw	r22,32(sp)
 800b1a8:	dd400717 	ldw	r21,28(sp)
 800b1ac:	dd000617 	ldw	r20,24(sp)
 800b1b0:	dcc00517 	ldw	r19,20(sp)
 800b1b4:	dc800417 	ldw	r18,16(sp)
 800b1b8:	dc400317 	ldw	r17,12(sp)
 800b1bc:	dc000217 	ldw	r16,8(sp)
 800b1c0:	dec00b04 	addi	sp,sp,44
 800b1c4:	f800283a 	ret
 800b1c8:	d9000104 	addi	r4,sp,4
 800b1cc:	800ab040 	call	800ab04 <__lo0bits>
 800b1d0:	11800804 	addi	r6,r2,32
 800b1d4:	d8800117 	ldw	r2,4(sp)
 800b1d8:	94c00415 	stw	r19,16(r18)
 800b1dc:	980b883a 	mov	r5,r19
 800b1e0:	90800515 	stw	r2,20(r18)
 800b1e4:	a03fe626 	beq	r20,zero,800b180 <__d2b+0xd8>
 800b1e8:	2945883a 	add	r2,r5,r5
 800b1ec:	1085883a 	add	r2,r2,r2
 800b1f0:	1405883a 	add	r2,r2,r16
 800b1f4:	113fff17 	ldw	r4,-4(r2)
 800b1f8:	30fef384 	addi	r3,r6,-1074
 800b1fc:	2820917a 	slli	r16,r5,5
 800b200:	b0c00015 	stw	r3,0(r22)
 800b204:	800aa940 	call	800aa94 <__hi0bits>
 800b208:	80a1c83a 	sub	r16,r16,r2
 800b20c:	bc000015 	stw	r16,0(r23)
 800b210:	003fe106 	br	800b198 <__d2b+0xf0>
 800b214:	d8800017 	ldw	r2,0(sp)
 800b218:	90800515 	stw	r2,20(r18)
 800b21c:	d8c00117 	ldw	r3,4(sp)
 800b220:	003fd106 	br	800b168 <__d2b+0xc0>

0800b224 <__mdiff>:
 800b224:	defffb04 	addi	sp,sp,-20
 800b228:	dc000015 	stw	r16,0(sp)
 800b22c:	2821883a 	mov	r16,r5
 800b230:	dc800215 	stw	r18,8(sp)
 800b234:	300b883a 	mov	r5,r6
 800b238:	2025883a 	mov	r18,r4
 800b23c:	8009883a 	mov	r4,r16
 800b240:	dc400115 	stw	r17,4(sp)
 800b244:	dfc00415 	stw	ra,16(sp)
 800b248:	dcc00315 	stw	r19,12(sp)
 800b24c:	3023883a 	mov	r17,r6
 800b250:	800abc80 	call	800abc8 <__mcmp>
 800b254:	10004226 	beq	r2,zero,800b360 <__mdiff+0x13c>
 800b258:	10005016 	blt	r2,zero,800b39c <__mdiff+0x178>
 800b25c:	0027883a 	mov	r19,zero
 800b260:	81400117 	ldw	r5,4(r16)
 800b264:	9009883a 	mov	r4,r18
 800b268:	800afec0 	call	800afec <_Balloc>
 800b26c:	1019883a 	mov	r12,r2
 800b270:	82800417 	ldw	r10,16(r16)
 800b274:	88800417 	ldw	r2,16(r17)
 800b278:	81800504 	addi	r6,r16,20
 800b27c:	5287883a 	add	r3,r10,r10
 800b280:	1085883a 	add	r2,r2,r2
 800b284:	18c7883a 	add	r3,r3,r3
 800b288:	1085883a 	add	r2,r2,r2
 800b28c:	8a000504 	addi	r8,r17,20
 800b290:	64c00315 	stw	r19,12(r12)
 800b294:	30db883a 	add	r13,r6,r3
 800b298:	4097883a 	add	r11,r8,r2
 800b29c:	61c00504 	addi	r7,r12,20
 800b2a0:	0013883a 	mov	r9,zero
 800b2a4:	31000017 	ldw	r4,0(r6)
 800b2a8:	41400017 	ldw	r5,0(r8)
 800b2ac:	42000104 	addi	r8,r8,4
 800b2b0:	20bfffcc 	andi	r2,r4,65535
 800b2b4:	28ffffcc 	andi	r3,r5,65535
 800b2b8:	10c5c83a 	sub	r2,r2,r3
 800b2bc:	1245883a 	add	r2,r2,r9
 800b2c0:	2008d43a 	srli	r4,r4,16
 800b2c4:	280ad43a 	srli	r5,r5,16
 800b2c8:	1007d43a 	srai	r3,r2,16
 800b2cc:	3880000d 	sth	r2,0(r7)
 800b2d0:	2149c83a 	sub	r4,r4,r5
 800b2d4:	20c9883a 	add	r4,r4,r3
 800b2d8:	3900008d 	sth	r4,2(r7)
 800b2dc:	31800104 	addi	r6,r6,4
 800b2e0:	39c00104 	addi	r7,r7,4
 800b2e4:	2013d43a 	srai	r9,r4,16
 800b2e8:	42ffee36 	bltu	r8,r11,800b2a4 <__mdiff+0x80>
 800b2ec:	33400c2e 	bgeu	r6,r13,800b320 <__mdiff+0xfc>
 800b2f0:	30800017 	ldw	r2,0(r6)
 800b2f4:	31800104 	addi	r6,r6,4
 800b2f8:	10ffffcc 	andi	r3,r2,65535
 800b2fc:	1a47883a 	add	r3,r3,r9
 800b300:	1004d43a 	srli	r2,r2,16
 800b304:	1809d43a 	srai	r4,r3,16
 800b308:	38c0000d 	sth	r3,0(r7)
 800b30c:	1105883a 	add	r2,r2,r4
 800b310:	3880008d 	sth	r2,2(r7)
 800b314:	1013d43a 	srai	r9,r2,16
 800b318:	39c00104 	addi	r7,r7,4
 800b31c:	337ff436 	bltu	r6,r13,800b2f0 <__mdiff+0xcc>
 800b320:	38bfff17 	ldw	r2,-4(r7)
 800b324:	38ffff04 	addi	r3,r7,-4
 800b328:	1000041e 	bne	r2,zero,800b33c <__mdiff+0x118>
 800b32c:	18ffff04 	addi	r3,r3,-4
 800b330:	18800017 	ldw	r2,0(r3)
 800b334:	52bfffc4 	addi	r10,r10,-1
 800b338:	103ffc26 	beq	r2,zero,800b32c <__mdiff+0x108>
 800b33c:	6005883a 	mov	r2,r12
 800b340:	62800415 	stw	r10,16(r12)
 800b344:	dfc00417 	ldw	ra,16(sp)
 800b348:	dcc00317 	ldw	r19,12(sp)
 800b34c:	dc800217 	ldw	r18,8(sp)
 800b350:	dc400117 	ldw	r17,4(sp)
 800b354:	dc000017 	ldw	r16,0(sp)
 800b358:	dec00504 	addi	sp,sp,20
 800b35c:	f800283a 	ret
 800b360:	9009883a 	mov	r4,r18
 800b364:	000b883a 	mov	r5,zero
 800b368:	800afec0 	call	800afec <_Balloc>
 800b36c:	1019883a 	mov	r12,r2
 800b370:	00800044 	movi	r2,1
 800b374:	60800415 	stw	r2,16(r12)
 800b378:	6005883a 	mov	r2,r12
 800b37c:	60000515 	stw	zero,20(r12)
 800b380:	dfc00417 	ldw	ra,16(sp)
 800b384:	dcc00317 	ldw	r19,12(sp)
 800b388:	dc800217 	ldw	r18,8(sp)
 800b38c:	dc400117 	ldw	r17,4(sp)
 800b390:	dc000017 	ldw	r16,0(sp)
 800b394:	dec00504 	addi	sp,sp,20
 800b398:	f800283a 	ret
 800b39c:	880d883a 	mov	r6,r17
 800b3a0:	04c00044 	movi	r19,1
 800b3a4:	8023883a 	mov	r17,r16
 800b3a8:	3021883a 	mov	r16,r6
 800b3ac:	003fac06 	br	800b260 <__mdiff+0x3c>

0800b3b0 <__lshift>:
 800b3b0:	defff904 	addi	sp,sp,-28
 800b3b4:	28800417 	ldw	r2,16(r5)
 800b3b8:	dc000015 	stw	r16,0(sp)
 800b3bc:	3021d17a 	srai	r16,r6,5
 800b3c0:	28c00217 	ldw	r3,8(r5)
 800b3c4:	10800044 	addi	r2,r2,1
 800b3c8:	dc400115 	stw	r17,4(sp)
 800b3cc:	80a3883a 	add	r17,r16,r2
 800b3d0:	dd400515 	stw	r21,20(sp)
 800b3d4:	dd000415 	stw	r20,16(sp)
 800b3d8:	dc800215 	stw	r18,8(sp)
 800b3dc:	dfc00615 	stw	ra,24(sp)
 800b3e0:	2825883a 	mov	r18,r5
 800b3e4:	dcc00315 	stw	r19,12(sp)
 800b3e8:	3029883a 	mov	r20,r6
 800b3ec:	202b883a 	mov	r21,r4
 800b3f0:	29400117 	ldw	r5,4(r5)
 800b3f4:	1c40030e 	bge	r3,r17,800b404 <__lshift+0x54>
 800b3f8:	18c7883a 	add	r3,r3,r3
 800b3fc:	29400044 	addi	r5,r5,1
 800b400:	1c7ffd16 	blt	r3,r17,800b3f8 <__lshift+0x48>
 800b404:	a809883a 	mov	r4,r21
 800b408:	800afec0 	call	800afec <_Balloc>
 800b40c:	1027883a 	mov	r19,r2
 800b410:	11400504 	addi	r5,r2,20
 800b414:	0400090e 	bge	zero,r16,800b43c <__lshift+0x8c>
 800b418:	2805883a 	mov	r2,r5
 800b41c:	0007883a 	mov	r3,zero
 800b420:	18c00044 	addi	r3,r3,1
 800b424:	10000015 	stw	zero,0(r2)
 800b428:	10800104 	addi	r2,r2,4
 800b42c:	80fffc1e 	bne	r16,r3,800b420 <__lshift+0x70>
 800b430:	8405883a 	add	r2,r16,r16
 800b434:	1085883a 	add	r2,r2,r2
 800b438:	288b883a 	add	r5,r5,r2
 800b43c:	90800417 	ldw	r2,16(r18)
 800b440:	91000504 	addi	r4,r18,20
 800b444:	a18007cc 	andi	r6,r20,31
 800b448:	1085883a 	add	r2,r2,r2
 800b44c:	1085883a 	add	r2,r2,r2
 800b450:	208f883a 	add	r7,r4,r2
 800b454:	30001e26 	beq	r6,zero,800b4d0 <__lshift+0x120>
 800b458:	00800804 	movi	r2,32
 800b45c:	1191c83a 	sub	r8,r2,r6
 800b460:	0007883a 	mov	r3,zero
 800b464:	20800017 	ldw	r2,0(r4)
 800b468:	1184983a 	sll	r2,r2,r6
 800b46c:	1884b03a 	or	r2,r3,r2
 800b470:	28800015 	stw	r2,0(r5)
 800b474:	20c00017 	ldw	r3,0(r4)
 800b478:	21000104 	addi	r4,r4,4
 800b47c:	29400104 	addi	r5,r5,4
 800b480:	1a06d83a 	srl	r3,r3,r8
 800b484:	21fff736 	bltu	r4,r7,800b464 <__lshift+0xb4>
 800b488:	28c00015 	stw	r3,0(r5)
 800b48c:	18000126 	beq	r3,zero,800b494 <__lshift+0xe4>
 800b490:	8c400044 	addi	r17,r17,1
 800b494:	88bfffc4 	addi	r2,r17,-1
 800b498:	98800415 	stw	r2,16(r19)
 800b49c:	a809883a 	mov	r4,r21
 800b4a0:	900b883a 	mov	r5,r18
 800b4a4:	800aa6c0 	call	800aa6c <_Bfree>
 800b4a8:	9805883a 	mov	r2,r19
 800b4ac:	dfc00617 	ldw	ra,24(sp)
 800b4b0:	dd400517 	ldw	r21,20(sp)
 800b4b4:	dd000417 	ldw	r20,16(sp)
 800b4b8:	dcc00317 	ldw	r19,12(sp)
 800b4bc:	dc800217 	ldw	r18,8(sp)
 800b4c0:	dc400117 	ldw	r17,4(sp)
 800b4c4:	dc000017 	ldw	r16,0(sp)
 800b4c8:	dec00704 	addi	sp,sp,28
 800b4cc:	f800283a 	ret
 800b4d0:	20800017 	ldw	r2,0(r4)
 800b4d4:	21000104 	addi	r4,r4,4
 800b4d8:	28800015 	stw	r2,0(r5)
 800b4dc:	29400104 	addi	r5,r5,4
 800b4e0:	21ffec2e 	bgeu	r4,r7,800b494 <__lshift+0xe4>
 800b4e4:	20800017 	ldw	r2,0(r4)
 800b4e8:	21000104 	addi	r4,r4,4
 800b4ec:	28800015 	stw	r2,0(r5)
 800b4f0:	29400104 	addi	r5,r5,4
 800b4f4:	21fff636 	bltu	r4,r7,800b4d0 <__lshift+0x120>
 800b4f8:	003fe606 	br	800b494 <__lshift+0xe4>

0800b4fc <__multiply>:
 800b4fc:	defff904 	addi	sp,sp,-28
 800b500:	dcc00315 	stw	r19,12(sp)
 800b504:	dc800215 	stw	r18,8(sp)
 800b508:	2cc00417 	ldw	r19,16(r5)
 800b50c:	34800417 	ldw	r18,16(r6)
 800b510:	dd000415 	stw	r20,16(sp)
 800b514:	dc400115 	stw	r17,4(sp)
 800b518:	dfc00615 	stw	ra,24(sp)
 800b51c:	dd400515 	stw	r21,20(sp)
 800b520:	dc000015 	stw	r16,0(sp)
 800b524:	2823883a 	mov	r17,r5
 800b528:	3029883a 	mov	r20,r6
 800b52c:	9c80040e 	bge	r19,r18,800b540 <__multiply+0x44>
 800b530:	9027883a 	mov	r19,r18
 800b534:	2c800417 	ldw	r18,16(r5)
 800b538:	2829883a 	mov	r20,r5
 800b53c:	3023883a 	mov	r17,r6
 800b540:	88800217 	ldw	r2,8(r17)
 800b544:	9ca1883a 	add	r16,r19,r18
 800b548:	89400117 	ldw	r5,4(r17)
 800b54c:	1400010e 	bge	r2,r16,800b554 <__multiply+0x58>
 800b550:	29400044 	addi	r5,r5,1
 800b554:	800afec0 	call	800afec <_Balloc>
 800b558:	102b883a 	mov	r21,r2
 800b55c:	8405883a 	add	r2,r16,r16
 800b560:	1085883a 	add	r2,r2,r2
 800b564:	a9000504 	addi	r4,r21,20
 800b568:	209d883a 	add	r14,r4,r2
 800b56c:	2380042e 	bgeu	r4,r14,800b580 <__multiply+0x84>
 800b570:	2005883a 	mov	r2,r4
 800b574:	10000015 	stw	zero,0(r2)
 800b578:	10800104 	addi	r2,r2,4
 800b57c:	13bffd36 	bltu	r2,r14,800b574 <__multiply+0x78>
 800b580:	9485883a 	add	r2,r18,r18
 800b584:	9cc7883a 	add	r3,r19,r19
 800b588:	a1800504 	addi	r6,r20,20
 800b58c:	1085883a 	add	r2,r2,r2
 800b590:	8b400504 	addi	r13,r17,20
 800b594:	18c7883a 	add	r3,r3,r3
 800b598:	309f883a 	add	r15,r6,r2
 800b59c:	68d7883a 	add	r11,r13,r3
 800b5a0:	33c03b2e 	bgeu	r6,r15,800b690 <__multiply+0x194>
 800b5a4:	2019883a 	mov	r12,r4
 800b5a8:	30800017 	ldw	r2,0(r6)
 800b5ac:	127fffcc 	andi	r9,r2,65535
 800b5b0:	48001826 	beq	r9,zero,800b614 <__multiply+0x118>
 800b5b4:	6811883a 	mov	r8,r13
 800b5b8:	600f883a 	mov	r7,r12
 800b5bc:	0015883a 	mov	r10,zero
 800b5c0:	40c00017 	ldw	r3,0(r8)
 800b5c4:	39400017 	ldw	r5,0(r7)
 800b5c8:	42000104 	addi	r8,r8,4
 800b5cc:	193fffcc 	andi	r4,r3,65535
 800b5d0:	4909383a 	mul	r4,r9,r4
 800b5d4:	1806d43a 	srli	r3,r3,16
 800b5d8:	28bfffcc 	andi	r2,r5,65535
 800b5dc:	5085883a 	add	r2,r10,r2
 800b5e0:	2089883a 	add	r4,r4,r2
 800b5e4:	48c7383a 	mul	r3,r9,r3
 800b5e8:	280ad43a 	srli	r5,r5,16
 800b5ec:	2004d43a 	srli	r2,r4,16
 800b5f0:	3900000d 	sth	r4,0(r7)
 800b5f4:	1947883a 	add	r3,r3,r5
 800b5f8:	10c5883a 	add	r2,r2,r3
 800b5fc:	3880008d 	sth	r2,2(r7)
 800b600:	1014d43a 	srli	r10,r2,16
 800b604:	39c00104 	addi	r7,r7,4
 800b608:	42ffed36 	bltu	r8,r11,800b5c0 <__multiply+0xc4>
 800b60c:	3a800015 	stw	r10,0(r7)
 800b610:	30800017 	ldw	r2,0(r6)
 800b614:	1012d43a 	srli	r9,r2,16
 800b618:	48001926 	beq	r9,zero,800b680 <__multiply+0x184>
 800b61c:	60800017 	ldw	r2,0(r12)
 800b620:	6811883a 	mov	r8,r13
 800b624:	600f883a 	mov	r7,r12
 800b628:	0015883a 	mov	r10,zero
 800b62c:	100b883a 	mov	r5,r2
 800b630:	41000017 	ldw	r4,0(r8)
 800b634:	2806d43a 	srli	r3,r5,16
 800b638:	3880000d 	sth	r2,0(r7)
 800b63c:	20bfffcc 	andi	r2,r4,65535
 800b640:	4885383a 	mul	r2,r9,r2
 800b644:	50c7883a 	add	r3,r10,r3
 800b648:	2008d43a 	srli	r4,r4,16
 800b64c:	10c5883a 	add	r2,r2,r3
 800b650:	3880008d 	sth	r2,2(r7)
 800b654:	39c00104 	addi	r7,r7,4
 800b658:	39400017 	ldw	r5,0(r7)
 800b65c:	4909383a 	mul	r4,r9,r4
 800b660:	1004d43a 	srli	r2,r2,16
 800b664:	28ffffcc 	andi	r3,r5,65535
 800b668:	20c9883a 	add	r4,r4,r3
 800b66c:	1105883a 	add	r2,r2,r4
 800b670:	42000104 	addi	r8,r8,4
 800b674:	1014d43a 	srli	r10,r2,16
 800b678:	42ffed36 	bltu	r8,r11,800b630 <__multiply+0x134>
 800b67c:	38800015 	stw	r2,0(r7)
 800b680:	31800104 	addi	r6,r6,4
 800b684:	33c0022e 	bgeu	r6,r15,800b690 <__multiply+0x194>
 800b688:	63000104 	addi	r12,r12,4
 800b68c:	003fc606 	br	800b5a8 <__multiply+0xac>
 800b690:	0400090e 	bge	zero,r16,800b6b8 <__multiply+0x1bc>
 800b694:	70bfff17 	ldw	r2,-4(r14)
 800b698:	70ffff04 	addi	r3,r14,-4
 800b69c:	10000326 	beq	r2,zero,800b6ac <__multiply+0x1b0>
 800b6a0:	00000506 	br	800b6b8 <__multiply+0x1bc>
 800b6a4:	18800017 	ldw	r2,0(r3)
 800b6a8:	1000031e 	bne	r2,zero,800b6b8 <__multiply+0x1bc>
 800b6ac:	843fffc4 	addi	r16,r16,-1
 800b6b0:	18ffff04 	addi	r3,r3,-4
 800b6b4:	803ffb1e 	bne	r16,zero,800b6a4 <__multiply+0x1a8>
 800b6b8:	a805883a 	mov	r2,r21
 800b6bc:	ac000415 	stw	r16,16(r21)
 800b6c0:	dfc00617 	ldw	ra,24(sp)
 800b6c4:	dd400517 	ldw	r21,20(sp)
 800b6c8:	dd000417 	ldw	r20,16(sp)
 800b6cc:	dcc00317 	ldw	r19,12(sp)
 800b6d0:	dc800217 	ldw	r18,8(sp)
 800b6d4:	dc400117 	ldw	r17,4(sp)
 800b6d8:	dc000017 	ldw	r16,0(sp)
 800b6dc:	dec00704 	addi	sp,sp,28
 800b6e0:	f800283a 	ret

0800b6e4 <__i2b>:
 800b6e4:	defffd04 	addi	sp,sp,-12
 800b6e8:	dc000015 	stw	r16,0(sp)
 800b6ec:	04000044 	movi	r16,1
 800b6f0:	dc800115 	stw	r18,4(sp)
 800b6f4:	2825883a 	mov	r18,r5
 800b6f8:	800b883a 	mov	r5,r16
 800b6fc:	dfc00215 	stw	ra,8(sp)
 800b700:	800afec0 	call	800afec <_Balloc>
 800b704:	14000415 	stw	r16,16(r2)
 800b708:	14800515 	stw	r18,20(r2)
 800b70c:	dfc00217 	ldw	ra,8(sp)
 800b710:	dc800117 	ldw	r18,4(sp)
 800b714:	dc000017 	ldw	r16,0(sp)
 800b718:	dec00304 	addi	sp,sp,12
 800b71c:	f800283a 	ret

0800b720 <__multadd>:
 800b720:	defffa04 	addi	sp,sp,-24
 800b724:	dc800215 	stw	r18,8(sp)
 800b728:	2c800417 	ldw	r18,16(r5)
 800b72c:	dd000415 	stw	r20,16(sp)
 800b730:	dcc00315 	stw	r19,12(sp)
 800b734:	dc000015 	stw	r16,0(sp)
 800b738:	dfc00515 	stw	ra,20(sp)
 800b73c:	3821883a 	mov	r16,r7
 800b740:	dc400115 	stw	r17,4(sp)
 800b744:	2827883a 	mov	r19,r5
 800b748:	2029883a 	mov	r20,r4
 800b74c:	2a000504 	addi	r8,r5,20
 800b750:	000f883a 	mov	r7,zero
 800b754:	40800017 	ldw	r2,0(r8)
 800b758:	39c00044 	addi	r7,r7,1
 800b75c:	10ffffcc 	andi	r3,r2,65535
 800b760:	1987383a 	mul	r3,r3,r6
 800b764:	1004d43a 	srli	r2,r2,16
 800b768:	1c07883a 	add	r3,r3,r16
 800b76c:	180ad43a 	srli	r5,r3,16
 800b770:	1185383a 	mul	r2,r2,r6
 800b774:	18ffffcc 	andi	r3,r3,65535
 800b778:	1145883a 	add	r2,r2,r5
 800b77c:	1008943a 	slli	r4,r2,16
 800b780:	1020d43a 	srli	r16,r2,16
 800b784:	20c9883a 	add	r4,r4,r3
 800b788:	41000015 	stw	r4,0(r8)
 800b78c:	42000104 	addi	r8,r8,4
 800b790:	3cbff016 	blt	r7,r18,800b754 <__multadd+0x34>
 800b794:	80000826 	beq	r16,zero,800b7b8 <__multadd+0x98>
 800b798:	98800217 	ldw	r2,8(r19)
 800b79c:	90800f0e 	bge	r18,r2,800b7dc <__multadd+0xbc>
 800b7a0:	9485883a 	add	r2,r18,r18
 800b7a4:	1085883a 	add	r2,r2,r2
 800b7a8:	14c5883a 	add	r2,r2,r19
 800b7ac:	90c00044 	addi	r3,r18,1
 800b7b0:	14000515 	stw	r16,20(r2)
 800b7b4:	98c00415 	stw	r3,16(r19)
 800b7b8:	9805883a 	mov	r2,r19
 800b7bc:	dfc00517 	ldw	ra,20(sp)
 800b7c0:	dd000417 	ldw	r20,16(sp)
 800b7c4:	dcc00317 	ldw	r19,12(sp)
 800b7c8:	dc800217 	ldw	r18,8(sp)
 800b7cc:	dc400117 	ldw	r17,4(sp)
 800b7d0:	dc000017 	ldw	r16,0(sp)
 800b7d4:	dec00604 	addi	sp,sp,24
 800b7d8:	f800283a 	ret
 800b7dc:	99400117 	ldw	r5,4(r19)
 800b7e0:	a009883a 	mov	r4,r20
 800b7e4:	29400044 	addi	r5,r5,1
 800b7e8:	800afec0 	call	800afec <_Balloc>
 800b7ec:	99800417 	ldw	r6,16(r19)
 800b7f0:	99400304 	addi	r5,r19,12
 800b7f4:	11000304 	addi	r4,r2,12
 800b7f8:	318d883a 	add	r6,r6,r6
 800b7fc:	318d883a 	add	r6,r6,r6
 800b800:	31800204 	addi	r6,r6,8
 800b804:	1023883a 	mov	r17,r2
 800b808:	8005adc0 	call	8005adc <memcpy>
 800b80c:	980b883a 	mov	r5,r19
 800b810:	a009883a 	mov	r4,r20
 800b814:	800aa6c0 	call	800aa6c <_Bfree>
 800b818:	8827883a 	mov	r19,r17
 800b81c:	003fe006 	br	800b7a0 <__multadd+0x80>

0800b820 <__pow5mult>:
 800b820:	defffa04 	addi	sp,sp,-24
 800b824:	308000cc 	andi	r2,r6,3
 800b828:	dd000415 	stw	r20,16(sp)
 800b82c:	dcc00315 	stw	r19,12(sp)
 800b830:	dc000015 	stw	r16,0(sp)
 800b834:	dfc00515 	stw	ra,20(sp)
 800b838:	dc800215 	stw	r18,8(sp)
 800b83c:	dc400115 	stw	r17,4(sp)
 800b840:	3021883a 	mov	r16,r6
 800b844:	2027883a 	mov	r19,r4
 800b848:	2829883a 	mov	r20,r5
 800b84c:	10002b1e 	bne	r2,zero,800b8fc <__pow5mult+0xdc>
 800b850:	8025d0ba 	srai	r18,r16,2
 800b854:	90001b26 	beq	r18,zero,800b8c4 <__pow5mult+0xa4>
 800b858:	9c001217 	ldw	r16,72(r19)
 800b85c:	8000081e 	bne	r16,zero,800b880 <__pow5mult+0x60>
 800b860:	00003006 	br	800b924 <__pow5mult+0x104>
 800b864:	800b883a 	mov	r5,r16
 800b868:	800d883a 	mov	r6,r16
 800b86c:	9809883a 	mov	r4,r19
 800b870:	90001426 	beq	r18,zero,800b8c4 <__pow5mult+0xa4>
 800b874:	80800017 	ldw	r2,0(r16)
 800b878:	10001b26 	beq	r2,zero,800b8e8 <__pow5mult+0xc8>
 800b87c:	1021883a 	mov	r16,r2
 800b880:	9080004c 	andi	r2,r18,1
 800b884:	1005003a 	cmpeq	r2,r2,zero
 800b888:	9025d07a 	srai	r18,r18,1
 800b88c:	800d883a 	mov	r6,r16
 800b890:	9809883a 	mov	r4,r19
 800b894:	a00b883a 	mov	r5,r20
 800b898:	103ff21e 	bne	r2,zero,800b864 <__pow5mult+0x44>
 800b89c:	800b4fc0 	call	800b4fc <__multiply>
 800b8a0:	a00b883a 	mov	r5,r20
 800b8a4:	9809883a 	mov	r4,r19
 800b8a8:	1023883a 	mov	r17,r2
 800b8ac:	800aa6c0 	call	800aa6c <_Bfree>
 800b8b0:	8829883a 	mov	r20,r17
 800b8b4:	800b883a 	mov	r5,r16
 800b8b8:	800d883a 	mov	r6,r16
 800b8bc:	9809883a 	mov	r4,r19
 800b8c0:	903fec1e 	bne	r18,zero,800b874 <__pow5mult+0x54>
 800b8c4:	a005883a 	mov	r2,r20
 800b8c8:	dfc00517 	ldw	ra,20(sp)
 800b8cc:	dd000417 	ldw	r20,16(sp)
 800b8d0:	dcc00317 	ldw	r19,12(sp)
 800b8d4:	dc800217 	ldw	r18,8(sp)
 800b8d8:	dc400117 	ldw	r17,4(sp)
 800b8dc:	dc000017 	ldw	r16,0(sp)
 800b8e0:	dec00604 	addi	sp,sp,24
 800b8e4:	f800283a 	ret
 800b8e8:	800b4fc0 	call	800b4fc <__multiply>
 800b8ec:	80800015 	stw	r2,0(r16)
 800b8f0:	1021883a 	mov	r16,r2
 800b8f4:	10000015 	stw	zero,0(r2)
 800b8f8:	003fe106 	br	800b880 <__pow5mult+0x60>
 800b8fc:	1085883a 	add	r2,r2,r2
 800b900:	00c20074 	movhi	r3,2049
 800b904:	18ddb404 	addi	r3,r3,30416
 800b908:	1085883a 	add	r2,r2,r2
 800b90c:	10c5883a 	add	r2,r2,r3
 800b910:	11bfff17 	ldw	r6,-4(r2)
 800b914:	000f883a 	mov	r7,zero
 800b918:	800b7200 	call	800b720 <__multadd>
 800b91c:	1029883a 	mov	r20,r2
 800b920:	003fcb06 	br	800b850 <__pow5mult+0x30>
 800b924:	9809883a 	mov	r4,r19
 800b928:	01409c44 	movi	r5,625
 800b92c:	800b6e40 	call	800b6e4 <__i2b>
 800b930:	98801215 	stw	r2,72(r19)
 800b934:	1021883a 	mov	r16,r2
 800b938:	10000015 	stw	zero,0(r2)
 800b93c:	003fd006 	br	800b880 <__pow5mult+0x60>

0800b940 <__s2b>:
 800b940:	defff904 	addi	sp,sp,-28
 800b944:	dcc00315 	stw	r19,12(sp)
 800b948:	dc800215 	stw	r18,8(sp)
 800b94c:	2827883a 	mov	r19,r5
 800b950:	2025883a 	mov	r18,r4
 800b954:	01400244 	movi	r5,9
 800b958:	39000204 	addi	r4,r7,8
 800b95c:	dd000415 	stw	r20,16(sp)
 800b960:	dc400115 	stw	r17,4(sp)
 800b964:	dfc00615 	stw	ra,24(sp)
 800b968:	dd400515 	stw	r21,20(sp)
 800b96c:	dc000015 	stw	r16,0(sp)
 800b970:	3829883a 	mov	r20,r7
 800b974:	3023883a 	mov	r17,r6
 800b978:	800e3fc0 	call	800e3fc <__divsi3>
 800b97c:	00c00044 	movi	r3,1
 800b980:	1880350e 	bge	r3,r2,800ba58 <__s2b+0x118>
 800b984:	000b883a 	mov	r5,zero
 800b988:	18c7883a 	add	r3,r3,r3
 800b98c:	29400044 	addi	r5,r5,1
 800b990:	18bffd16 	blt	r3,r2,800b988 <__s2b+0x48>
 800b994:	9009883a 	mov	r4,r18
 800b998:	800afec0 	call	800afec <_Balloc>
 800b99c:	1011883a 	mov	r8,r2
 800b9a0:	d8800717 	ldw	r2,28(sp)
 800b9a4:	00c00044 	movi	r3,1
 800b9a8:	01800244 	movi	r6,9
 800b9ac:	40800515 	stw	r2,20(r8)
 800b9b0:	40c00415 	stw	r3,16(r8)
 800b9b4:	3440260e 	bge	r6,r17,800ba50 <__s2b+0x110>
 800b9b8:	3021883a 	mov	r16,r6
 800b9bc:	99ab883a 	add	r21,r19,r6
 800b9c0:	9c05883a 	add	r2,r19,r16
 800b9c4:	11c00007 	ldb	r7,0(r2)
 800b9c8:	400b883a 	mov	r5,r8
 800b9cc:	9009883a 	mov	r4,r18
 800b9d0:	39fff404 	addi	r7,r7,-48
 800b9d4:	01800284 	movi	r6,10
 800b9d8:	800b7200 	call	800b720 <__multadd>
 800b9dc:	84000044 	addi	r16,r16,1
 800b9e0:	1011883a 	mov	r8,r2
 800b9e4:	8c3ff61e 	bne	r17,r16,800b9c0 <__s2b+0x80>
 800b9e8:	ac45883a 	add	r2,r21,r17
 800b9ec:	117ffe04 	addi	r5,r2,-8
 800b9f0:	880d883a 	mov	r6,r17
 800b9f4:	35000c0e 	bge	r6,r20,800ba28 <__s2b+0xe8>
 800b9f8:	a185c83a 	sub	r2,r20,r6
 800b9fc:	2821883a 	mov	r16,r5
 800ba00:	28a3883a 	add	r17,r5,r2
 800ba04:	81c00007 	ldb	r7,0(r16)
 800ba08:	400b883a 	mov	r5,r8
 800ba0c:	9009883a 	mov	r4,r18
 800ba10:	39fff404 	addi	r7,r7,-48
 800ba14:	01800284 	movi	r6,10
 800ba18:	800b7200 	call	800b720 <__multadd>
 800ba1c:	84000044 	addi	r16,r16,1
 800ba20:	1011883a 	mov	r8,r2
 800ba24:	847ff71e 	bne	r16,r17,800ba04 <__s2b+0xc4>
 800ba28:	4005883a 	mov	r2,r8
 800ba2c:	dfc00617 	ldw	ra,24(sp)
 800ba30:	dd400517 	ldw	r21,20(sp)
 800ba34:	dd000417 	ldw	r20,16(sp)
 800ba38:	dcc00317 	ldw	r19,12(sp)
 800ba3c:	dc800217 	ldw	r18,8(sp)
 800ba40:	dc400117 	ldw	r17,4(sp)
 800ba44:	dc000017 	ldw	r16,0(sp)
 800ba48:	dec00704 	addi	sp,sp,28
 800ba4c:	f800283a 	ret
 800ba50:	99400284 	addi	r5,r19,10
 800ba54:	003fe706 	br	800b9f4 <__s2b+0xb4>
 800ba58:	000b883a 	mov	r5,zero
 800ba5c:	003fcd06 	br	800b994 <__s2b+0x54>

0800ba60 <putc>:
 800ba60:	defffc04 	addi	sp,sp,-16
 800ba64:	dc800215 	stw	r18,8(sp)
 800ba68:	048200b4 	movhi	r18,2050
 800ba6c:	94a4bf04 	addi	r18,r18,-27908
 800ba70:	90c00017 	ldw	r3,0(r18)
 800ba74:	dc400115 	stw	r17,4(sp)
 800ba78:	dc000015 	stw	r16,0(sp)
 800ba7c:	dfc00315 	stw	ra,12(sp)
 800ba80:	2023883a 	mov	r17,r4
 800ba84:	2821883a 	mov	r16,r5
 800ba88:	18000226 	beq	r3,zero,800ba94 <putc+0x34>
 800ba8c:	18800e17 	ldw	r2,56(r3)
 800ba90:	10001126 	beq	r2,zero,800bad8 <putc+0x78>
 800ba94:	80800217 	ldw	r2,8(r16)
 800ba98:	10ffffc4 	addi	r3,r2,-1
 800ba9c:	80c00215 	stw	r3,8(r16)
 800baa0:	18001316 	blt	r3,zero,800baf0 <putc+0x90>
 800baa4:	80800017 	ldw	r2,0(r16)
 800baa8:	14400005 	stb	r17,0(r2)
 800baac:	80c00017 	ldw	r3,0(r16)
 800bab0:	18800044 	addi	r2,r3,1
 800bab4:	18c00003 	ldbu	r3,0(r3)
 800bab8:	80800015 	stw	r2,0(r16)
 800babc:	1805883a 	mov	r2,r3
 800bac0:	dfc00317 	ldw	ra,12(sp)
 800bac4:	dc800217 	ldw	r18,8(sp)
 800bac8:	dc400117 	ldw	r17,4(sp)
 800bacc:	dc000017 	ldw	r16,0(sp)
 800bad0:	dec00404 	addi	sp,sp,16
 800bad4:	f800283a 	ret
 800bad8:	1809883a 	mov	r4,r3
 800badc:	8004eb80 	call	8004eb8 <__sinit>
 800bae0:	80800217 	ldw	r2,8(r16)
 800bae4:	10ffffc4 	addi	r3,r2,-1
 800bae8:	80c00215 	stw	r3,8(r16)
 800baec:	183fed0e 	bge	r3,zero,800baa4 <putc+0x44>
 800baf0:	80800617 	ldw	r2,24(r16)
 800baf4:	18800f16 	blt	r3,r2,800bb34 <putc+0xd4>
 800baf8:	80800017 	ldw	r2,0(r16)
 800bafc:	14400005 	stb	r17,0(r2)
 800bb00:	81000017 	ldw	r4,0(r16)
 800bb04:	00800284 	movi	r2,10
 800bb08:	20c00003 	ldbu	r3,0(r4)
 800bb0c:	18801226 	beq	r3,r2,800bb58 <putc+0xf8>
 800bb10:	20800044 	addi	r2,r4,1
 800bb14:	80800015 	stw	r2,0(r16)
 800bb18:	1805883a 	mov	r2,r3
 800bb1c:	dfc00317 	ldw	ra,12(sp)
 800bb20:	dc800217 	ldw	r18,8(sp)
 800bb24:	dc400117 	ldw	r17,4(sp)
 800bb28:	dc000017 	ldw	r16,0(sp)
 800bb2c:	dec00404 	addi	sp,sp,16
 800bb30:	f800283a 	ret
 800bb34:	91000017 	ldw	r4,0(r18)
 800bb38:	880b883a 	mov	r5,r17
 800bb3c:	800d883a 	mov	r6,r16
 800bb40:	dfc00317 	ldw	ra,12(sp)
 800bb44:	dc800217 	ldw	r18,8(sp)
 800bb48:	dc400117 	ldw	r17,4(sp)
 800bb4c:	dc000017 	ldw	r16,0(sp)
 800bb50:	dec00404 	addi	sp,sp,16
 800bb54:	800c3e41 	jmpi	800c3e4 <__swbuf_r>
 800bb58:	91000017 	ldw	r4,0(r18)
 800bb5c:	180b883a 	mov	r5,r3
 800bb60:	003ff606 	br	800bb3c <putc+0xdc>

0800bb64 <_putc_r>:
 800bb64:	defffc04 	addi	sp,sp,-16
 800bb68:	dc400215 	stw	r17,8(sp)
 800bb6c:	dc000115 	stw	r16,4(sp)
 800bb70:	dfc00315 	stw	ra,12(sp)
 800bb74:	2021883a 	mov	r16,r4
 800bb78:	2823883a 	mov	r17,r5
 800bb7c:	20000226 	beq	r4,zero,800bb88 <_putc_r+0x24>
 800bb80:	20800e17 	ldw	r2,56(r4)
 800bb84:	10001026 	beq	r2,zero,800bbc8 <_putc_r+0x64>
 800bb88:	30800217 	ldw	r2,8(r6)
 800bb8c:	10ffffc4 	addi	r3,r2,-1
 800bb90:	30c00215 	stw	r3,8(r6)
 800bb94:	18001316 	blt	r3,zero,800bbe4 <_putc_r+0x80>
 800bb98:	30800017 	ldw	r2,0(r6)
 800bb9c:	14400005 	stb	r17,0(r2)
 800bba0:	30c00017 	ldw	r3,0(r6)
 800bba4:	18800044 	addi	r2,r3,1
 800bba8:	18c00003 	ldbu	r3,0(r3)
 800bbac:	30800015 	stw	r2,0(r6)
 800bbb0:	1805883a 	mov	r2,r3
 800bbb4:	dfc00317 	ldw	ra,12(sp)
 800bbb8:	dc400217 	ldw	r17,8(sp)
 800bbbc:	dc000117 	ldw	r16,4(sp)
 800bbc0:	dec00404 	addi	sp,sp,16
 800bbc4:	f800283a 	ret
 800bbc8:	d9800015 	stw	r6,0(sp)
 800bbcc:	8004eb80 	call	8004eb8 <__sinit>
 800bbd0:	d9800017 	ldw	r6,0(sp)
 800bbd4:	30800217 	ldw	r2,8(r6)
 800bbd8:	10ffffc4 	addi	r3,r2,-1
 800bbdc:	30c00215 	stw	r3,8(r6)
 800bbe0:	183fed0e 	bge	r3,zero,800bb98 <_putc_r+0x34>
 800bbe4:	30800617 	ldw	r2,24(r6)
 800bbe8:	18800e16 	blt	r3,r2,800bc24 <_putc_r+0xc0>
 800bbec:	30800017 	ldw	r2,0(r6)
 800bbf0:	14400005 	stb	r17,0(r2)
 800bbf4:	31000017 	ldw	r4,0(r6)
 800bbf8:	00800284 	movi	r2,10
 800bbfc:	20c00003 	ldbu	r3,0(r4)
 800bc00:	18800f26 	beq	r3,r2,800bc40 <_putc_r+0xdc>
 800bc04:	20800044 	addi	r2,r4,1
 800bc08:	30800015 	stw	r2,0(r6)
 800bc0c:	1805883a 	mov	r2,r3
 800bc10:	dfc00317 	ldw	ra,12(sp)
 800bc14:	dc400217 	ldw	r17,8(sp)
 800bc18:	dc000117 	ldw	r16,4(sp)
 800bc1c:	dec00404 	addi	sp,sp,16
 800bc20:	f800283a 	ret
 800bc24:	8009883a 	mov	r4,r16
 800bc28:	880b883a 	mov	r5,r17
 800bc2c:	dfc00317 	ldw	ra,12(sp)
 800bc30:	dc400217 	ldw	r17,8(sp)
 800bc34:	dc000117 	ldw	r16,4(sp)
 800bc38:	dec00404 	addi	sp,sp,16
 800bc3c:	800c3e41 	jmpi	800c3e4 <__swbuf_r>
 800bc40:	8009883a 	mov	r4,r16
 800bc44:	180b883a 	mov	r5,r3
 800bc48:	003ff806 	br	800bc2c <_putc_r+0xc8>

0800bc4c <_read_r>:
 800bc4c:	defffd04 	addi	sp,sp,-12
 800bc50:	dc000015 	stw	r16,0(sp)
 800bc54:	040200b4 	movhi	r16,2050
 800bc58:	842b9404 	addi	r16,r16,-20912
 800bc5c:	dc400115 	stw	r17,4(sp)
 800bc60:	80000015 	stw	zero,0(r16)
 800bc64:	2023883a 	mov	r17,r4
 800bc68:	2809883a 	mov	r4,r5
 800bc6c:	300b883a 	mov	r5,r6
 800bc70:	380d883a 	mov	r6,r7
 800bc74:	dfc00215 	stw	ra,8(sp)
 800bc78:	800f1bc0 	call	800f1bc <read>
 800bc7c:	1007883a 	mov	r3,r2
 800bc80:	00bfffc4 	movi	r2,-1
 800bc84:	18800626 	beq	r3,r2,800bca0 <_read_r+0x54>
 800bc88:	1805883a 	mov	r2,r3
 800bc8c:	dfc00217 	ldw	ra,8(sp)
 800bc90:	dc400117 	ldw	r17,4(sp)
 800bc94:	dc000017 	ldw	r16,0(sp)
 800bc98:	dec00304 	addi	sp,sp,12
 800bc9c:	f800283a 	ret
 800bca0:	80800017 	ldw	r2,0(r16)
 800bca4:	103ff826 	beq	r2,zero,800bc88 <_read_r+0x3c>
 800bca8:	88800015 	stw	r2,0(r17)
 800bcac:	1805883a 	mov	r2,r3
 800bcb0:	dfc00217 	ldw	ra,8(sp)
 800bcb4:	dc400117 	ldw	r17,4(sp)
 800bcb8:	dc000017 	ldw	r16,0(sp)
 800bcbc:	dec00304 	addi	sp,sp,12
 800bcc0:	f800283a 	ret

0800bcc4 <_realloc_r>:
 800bcc4:	defff404 	addi	sp,sp,-48
 800bcc8:	dd800815 	stw	r22,32(sp)
 800bccc:	dc800415 	stw	r18,16(sp)
 800bcd0:	dc400315 	stw	r17,12(sp)
 800bcd4:	dfc00b15 	stw	ra,44(sp)
 800bcd8:	df000a15 	stw	fp,40(sp)
 800bcdc:	ddc00915 	stw	r23,36(sp)
 800bce0:	dd400715 	stw	r21,28(sp)
 800bce4:	dd000615 	stw	r20,24(sp)
 800bce8:	dcc00515 	stw	r19,20(sp)
 800bcec:	dc000215 	stw	r16,8(sp)
 800bcf0:	2825883a 	mov	r18,r5
 800bcf4:	3023883a 	mov	r17,r6
 800bcf8:	202d883a 	mov	r22,r4
 800bcfc:	2800c926 	beq	r5,zero,800c024 <_realloc_r+0x360>
 800bd00:	800f17c0 	call	800f17c <__malloc_lock>
 800bd04:	943ffe04 	addi	r16,r18,-8
 800bd08:	88c002c4 	addi	r3,r17,11
 800bd0c:	00800584 	movi	r2,22
 800bd10:	82000117 	ldw	r8,4(r16)
 800bd14:	10c01b2e 	bgeu	r2,r3,800bd84 <_realloc_r+0xc0>
 800bd18:	00bffe04 	movi	r2,-8
 800bd1c:	188e703a 	and	r7,r3,r2
 800bd20:	3839883a 	mov	fp,r7
 800bd24:	38001a16 	blt	r7,zero,800bd90 <_realloc_r+0xcc>
 800bd28:	e4401936 	bltu	fp,r17,800bd90 <_realloc_r+0xcc>
 800bd2c:	013fff04 	movi	r4,-4
 800bd30:	4126703a 	and	r19,r8,r4
 800bd34:	99c02616 	blt	r19,r7,800bdd0 <_realloc_r+0x10c>
 800bd38:	802b883a 	mov	r21,r16
 800bd3c:	9829883a 	mov	r20,r19
 800bd40:	84000204 	addi	r16,r16,8
 800bd44:	a80f883a 	mov	r7,r21
 800bd48:	a70dc83a 	sub	r6,r20,fp
 800bd4c:	008003c4 	movi	r2,15
 800bd50:	1180c136 	bltu	r2,r6,800c058 <_realloc_r+0x394>
 800bd54:	38800117 	ldw	r2,4(r7)
 800bd58:	a549883a 	add	r4,r20,r21
 800bd5c:	1080004c 	andi	r2,r2,1
 800bd60:	a084b03a 	or	r2,r20,r2
 800bd64:	38800115 	stw	r2,4(r7)
 800bd68:	20c00117 	ldw	r3,4(r4)
 800bd6c:	18c00054 	ori	r3,r3,1
 800bd70:	20c00115 	stw	r3,4(r4)
 800bd74:	b009883a 	mov	r4,r22
 800bd78:	800f19c0 	call	800f19c <__malloc_unlock>
 800bd7c:	8023883a 	mov	r17,r16
 800bd80:	00000606 	br	800bd9c <_realloc_r+0xd8>
 800bd84:	01c00404 	movi	r7,16
 800bd88:	3839883a 	mov	fp,r7
 800bd8c:	e47fe72e 	bgeu	fp,r17,800bd2c <_realloc_r+0x68>
 800bd90:	00800304 	movi	r2,12
 800bd94:	0023883a 	mov	r17,zero
 800bd98:	b0800015 	stw	r2,0(r22)
 800bd9c:	8805883a 	mov	r2,r17
 800bda0:	dfc00b17 	ldw	ra,44(sp)
 800bda4:	df000a17 	ldw	fp,40(sp)
 800bda8:	ddc00917 	ldw	r23,36(sp)
 800bdac:	dd800817 	ldw	r22,32(sp)
 800bdb0:	dd400717 	ldw	r21,28(sp)
 800bdb4:	dd000617 	ldw	r20,24(sp)
 800bdb8:	dcc00517 	ldw	r19,20(sp)
 800bdbc:	dc800417 	ldw	r18,16(sp)
 800bdc0:	dc400317 	ldw	r17,12(sp)
 800bdc4:	dc000217 	ldw	r16,8(sp)
 800bdc8:	dec00c04 	addi	sp,sp,48
 800bdcc:	f800283a 	ret
 800bdd0:	00820074 	movhi	r2,2049
 800bdd4:	109f1804 	addi	r2,r2,31840
 800bdd8:	12400217 	ldw	r9,8(r2)
 800bddc:	84cd883a 	add	r6,r16,r19
 800bde0:	802b883a 	mov	r21,r16
 800bde4:	3240b926 	beq	r6,r9,800c0cc <_realloc_r+0x408>
 800bde8:	31400117 	ldw	r5,4(r6)
 800bdec:	00bfff84 	movi	r2,-2
 800bdf0:	2884703a 	and	r2,r5,r2
 800bdf4:	1185883a 	add	r2,r2,r6
 800bdf8:	10c00117 	ldw	r3,4(r2)
 800bdfc:	18c0004c 	andi	r3,r3,1
 800be00:	1807003a 	cmpeq	r3,r3,zero
 800be04:	1800a326 	beq	r3,zero,800c094 <_realloc_r+0x3d0>
 800be08:	2908703a 	and	r4,r5,r4
 800be0c:	9929883a 	add	r20,r19,r4
 800be10:	a1c0a30e 	bge	r20,r7,800c0a0 <_realloc_r+0x3dc>
 800be14:	4080004c 	andi	r2,r8,1
 800be18:	1000551e 	bne	r2,zero,800bf70 <_realloc_r+0x2ac>
 800be1c:	80800017 	ldw	r2,0(r16)
 800be20:	80afc83a 	sub	r23,r16,r2
 800be24:	b8c00117 	ldw	r3,4(r23)
 800be28:	00bfff04 	movi	r2,-4
 800be2c:	1884703a 	and	r2,r3,r2
 800be30:	30002e26 	beq	r6,zero,800beec <_realloc_r+0x228>
 800be34:	3240b926 	beq	r6,r9,800c11c <_realloc_r+0x458>
 800be38:	98a9883a 	add	r20,r19,r2
 800be3c:	2509883a 	add	r4,r4,r20
 800be40:	d9000015 	stw	r4,0(sp)
 800be44:	21c02a16 	blt	r4,r7,800bef0 <_realloc_r+0x22c>
 800be48:	30800317 	ldw	r2,12(r6)
 800be4c:	30c00217 	ldw	r3,8(r6)
 800be50:	01400904 	movi	r5,36
 800be54:	99bfff04 	addi	r6,r19,-4
 800be58:	18800315 	stw	r2,12(r3)
 800be5c:	10c00215 	stw	r3,8(r2)
 800be60:	b9000317 	ldw	r4,12(r23)
 800be64:	b8800217 	ldw	r2,8(r23)
 800be68:	b82b883a 	mov	r21,r23
 800be6c:	bc000204 	addi	r16,r23,8
 800be70:	20800215 	stw	r2,8(r4)
 800be74:	11000315 	stw	r4,12(r2)
 800be78:	2980e436 	bltu	r5,r6,800c20c <_realloc_r+0x548>
 800be7c:	008004c4 	movi	r2,19
 800be80:	9009883a 	mov	r4,r18
 800be84:	8011883a 	mov	r8,r16
 800be88:	11800f2e 	bgeu	r2,r6,800bec8 <_realloc_r+0x204>
 800be8c:	90800017 	ldw	r2,0(r18)
 800be90:	ba000404 	addi	r8,r23,16
 800be94:	91000204 	addi	r4,r18,8
 800be98:	b8800215 	stw	r2,8(r23)
 800be9c:	90c00117 	ldw	r3,4(r18)
 800bea0:	008006c4 	movi	r2,27
 800bea4:	b8c00315 	stw	r3,12(r23)
 800bea8:	1180072e 	bgeu	r2,r6,800bec8 <_realloc_r+0x204>
 800beac:	90c00217 	ldw	r3,8(r18)
 800beb0:	ba000604 	addi	r8,r23,24
 800beb4:	91000404 	addi	r4,r18,16
 800beb8:	b8c00415 	stw	r3,16(r23)
 800bebc:	90800317 	ldw	r2,12(r18)
 800bec0:	b8800515 	stw	r2,20(r23)
 800bec4:	3140e726 	beq	r6,r5,800c264 <_realloc_r+0x5a0>
 800bec8:	20800017 	ldw	r2,0(r4)
 800becc:	dd000017 	ldw	r20,0(sp)
 800bed0:	b80f883a 	mov	r7,r23
 800bed4:	40800015 	stw	r2,0(r8)
 800bed8:	20c00117 	ldw	r3,4(r4)
 800bedc:	40c00115 	stw	r3,4(r8)
 800bee0:	20800217 	ldw	r2,8(r4)
 800bee4:	40800215 	stw	r2,8(r8)
 800bee8:	003f9706 	br	800bd48 <_realloc_r+0x84>
 800beec:	98a9883a 	add	r20,r19,r2
 800bef0:	a1c01f16 	blt	r20,r7,800bf70 <_realloc_r+0x2ac>
 800bef4:	b8c00317 	ldw	r3,12(r23)
 800bef8:	b8800217 	ldw	r2,8(r23)
 800befc:	99bfff04 	addi	r6,r19,-4
 800bf00:	01400904 	movi	r5,36
 800bf04:	b82b883a 	mov	r21,r23
 800bf08:	18800215 	stw	r2,8(r3)
 800bf0c:	10c00315 	stw	r3,12(r2)
 800bf10:	bc000204 	addi	r16,r23,8
 800bf14:	2980c336 	bltu	r5,r6,800c224 <_realloc_r+0x560>
 800bf18:	008004c4 	movi	r2,19
 800bf1c:	9009883a 	mov	r4,r18
 800bf20:	8011883a 	mov	r8,r16
 800bf24:	11800f2e 	bgeu	r2,r6,800bf64 <_realloc_r+0x2a0>
 800bf28:	90800017 	ldw	r2,0(r18)
 800bf2c:	ba000404 	addi	r8,r23,16
 800bf30:	91000204 	addi	r4,r18,8
 800bf34:	b8800215 	stw	r2,8(r23)
 800bf38:	90c00117 	ldw	r3,4(r18)
 800bf3c:	008006c4 	movi	r2,27
 800bf40:	b8c00315 	stw	r3,12(r23)
 800bf44:	1180072e 	bgeu	r2,r6,800bf64 <_realloc_r+0x2a0>
 800bf48:	90c00217 	ldw	r3,8(r18)
 800bf4c:	ba000604 	addi	r8,r23,24
 800bf50:	91000404 	addi	r4,r18,16
 800bf54:	b8c00415 	stw	r3,16(r23)
 800bf58:	90800317 	ldw	r2,12(r18)
 800bf5c:	b8800515 	stw	r2,20(r23)
 800bf60:	3140c726 	beq	r6,r5,800c280 <_realloc_r+0x5bc>
 800bf64:	20800017 	ldw	r2,0(r4)
 800bf68:	b80f883a 	mov	r7,r23
 800bf6c:	003fd906 	br	800bed4 <_realloc_r+0x210>
 800bf70:	880b883a 	mov	r5,r17
 800bf74:	b009883a 	mov	r4,r22
 800bf78:	80052b80 	call	80052b8 <_malloc_r>
 800bf7c:	1023883a 	mov	r17,r2
 800bf80:	10002526 	beq	r2,zero,800c018 <_realloc_r+0x354>
 800bf84:	80800117 	ldw	r2,4(r16)
 800bf88:	00ffff84 	movi	r3,-2
 800bf8c:	893ffe04 	addi	r4,r17,-8
 800bf90:	10c4703a 	and	r2,r2,r3
 800bf94:	8085883a 	add	r2,r16,r2
 800bf98:	20809526 	beq	r4,r2,800c1f0 <_realloc_r+0x52c>
 800bf9c:	99bfff04 	addi	r6,r19,-4
 800bfa0:	01c00904 	movi	r7,36
 800bfa4:	39804536 	bltu	r7,r6,800c0bc <_realloc_r+0x3f8>
 800bfa8:	008004c4 	movi	r2,19
 800bfac:	9009883a 	mov	r4,r18
 800bfb0:	880b883a 	mov	r5,r17
 800bfb4:	11800f2e 	bgeu	r2,r6,800bff4 <_realloc_r+0x330>
 800bfb8:	90800017 	ldw	r2,0(r18)
 800bfbc:	89400204 	addi	r5,r17,8
 800bfc0:	91000204 	addi	r4,r18,8
 800bfc4:	88800015 	stw	r2,0(r17)
 800bfc8:	90c00117 	ldw	r3,4(r18)
 800bfcc:	008006c4 	movi	r2,27
 800bfd0:	88c00115 	stw	r3,4(r17)
 800bfd4:	1180072e 	bgeu	r2,r6,800bff4 <_realloc_r+0x330>
 800bfd8:	90c00217 	ldw	r3,8(r18)
 800bfdc:	89400404 	addi	r5,r17,16
 800bfe0:	91000404 	addi	r4,r18,16
 800bfe4:	88c00215 	stw	r3,8(r17)
 800bfe8:	90800317 	ldw	r2,12(r18)
 800bfec:	88800315 	stw	r2,12(r17)
 800bff0:	31c09126 	beq	r6,r7,800c238 <_realloc_r+0x574>
 800bff4:	20800017 	ldw	r2,0(r4)
 800bff8:	28800015 	stw	r2,0(r5)
 800bffc:	20c00117 	ldw	r3,4(r4)
 800c000:	28c00115 	stw	r3,4(r5)
 800c004:	20800217 	ldw	r2,8(r4)
 800c008:	28800215 	stw	r2,8(r5)
 800c00c:	900b883a 	mov	r5,r18
 800c010:	b009883a 	mov	r4,r22
 800c014:	8009f0c0 	call	8009f0c <_free_r>
 800c018:	b009883a 	mov	r4,r22
 800c01c:	800f19c0 	call	800f19c <__malloc_unlock>
 800c020:	003f5e06 	br	800bd9c <_realloc_r+0xd8>
 800c024:	300b883a 	mov	r5,r6
 800c028:	dfc00b17 	ldw	ra,44(sp)
 800c02c:	df000a17 	ldw	fp,40(sp)
 800c030:	ddc00917 	ldw	r23,36(sp)
 800c034:	dd800817 	ldw	r22,32(sp)
 800c038:	dd400717 	ldw	r21,28(sp)
 800c03c:	dd000617 	ldw	r20,24(sp)
 800c040:	dcc00517 	ldw	r19,20(sp)
 800c044:	dc800417 	ldw	r18,16(sp)
 800c048:	dc400317 	ldw	r17,12(sp)
 800c04c:	dc000217 	ldw	r16,8(sp)
 800c050:	dec00c04 	addi	sp,sp,48
 800c054:	80052b81 	jmpi	80052b8 <_malloc_r>
 800c058:	38800117 	ldw	r2,4(r7)
 800c05c:	e54b883a 	add	r5,fp,r21
 800c060:	31000054 	ori	r4,r6,1
 800c064:	1080004c 	andi	r2,r2,1
 800c068:	1704b03a 	or	r2,r2,fp
 800c06c:	38800115 	stw	r2,4(r7)
 800c070:	29000115 	stw	r4,4(r5)
 800c074:	2987883a 	add	r3,r5,r6
 800c078:	18800117 	ldw	r2,4(r3)
 800c07c:	29400204 	addi	r5,r5,8
 800c080:	b009883a 	mov	r4,r22
 800c084:	10800054 	ori	r2,r2,1
 800c088:	18800115 	stw	r2,4(r3)
 800c08c:	8009f0c0 	call	8009f0c <_free_r>
 800c090:	003f3806 	br	800bd74 <_realloc_r+0xb0>
 800c094:	000d883a 	mov	r6,zero
 800c098:	0009883a 	mov	r4,zero
 800c09c:	003f5d06 	br	800be14 <_realloc_r+0x150>
 800c0a0:	30c00217 	ldw	r3,8(r6)
 800c0a4:	30800317 	ldw	r2,12(r6)
 800c0a8:	800f883a 	mov	r7,r16
 800c0ac:	84000204 	addi	r16,r16,8
 800c0b0:	10c00215 	stw	r3,8(r2)
 800c0b4:	18800315 	stw	r2,12(r3)
 800c0b8:	003f2306 	br	800bd48 <_realloc_r+0x84>
 800c0bc:	8809883a 	mov	r4,r17
 800c0c0:	900b883a 	mov	r5,r18
 800c0c4:	800a98c0 	call	800a98c <memmove>
 800c0c8:	003fd006 	br	800c00c <_realloc_r+0x348>
 800c0cc:	30800117 	ldw	r2,4(r6)
 800c0d0:	e0c00404 	addi	r3,fp,16
 800c0d4:	1108703a 	and	r4,r2,r4
 800c0d8:	9905883a 	add	r2,r19,r4
 800c0dc:	10ff4d16 	blt	r2,r3,800be14 <_realloc_r+0x150>
 800c0e0:	1705c83a 	sub	r2,r2,fp
 800c0e4:	870b883a 	add	r5,r16,fp
 800c0e8:	10800054 	ori	r2,r2,1
 800c0ec:	28800115 	stw	r2,4(r5)
 800c0f0:	80c00117 	ldw	r3,4(r16)
 800c0f4:	00820074 	movhi	r2,2049
 800c0f8:	109f1804 	addi	r2,r2,31840
 800c0fc:	b009883a 	mov	r4,r22
 800c100:	18c0004c 	andi	r3,r3,1
 800c104:	e0c6b03a 	or	r3,fp,r3
 800c108:	11400215 	stw	r5,8(r2)
 800c10c:	80c00115 	stw	r3,4(r16)
 800c110:	800f19c0 	call	800f19c <__malloc_unlock>
 800c114:	84400204 	addi	r17,r16,8
 800c118:	003f2006 	br	800bd9c <_realloc_r+0xd8>
 800c11c:	98a9883a 	add	r20,r19,r2
 800c120:	2509883a 	add	r4,r4,r20
 800c124:	e0800404 	addi	r2,fp,16
 800c128:	d9000115 	stw	r4,4(sp)
 800c12c:	20bf7016 	blt	r4,r2,800bef0 <_realloc_r+0x22c>
 800c130:	b8c00317 	ldw	r3,12(r23)
 800c134:	b8800217 	ldw	r2,8(r23)
 800c138:	99bfff04 	addi	r6,r19,-4
 800c13c:	01400904 	movi	r5,36
 800c140:	18800215 	stw	r2,8(r3)
 800c144:	10c00315 	stw	r3,12(r2)
 800c148:	bc400204 	addi	r17,r23,8
 800c14c:	29804136 	bltu	r5,r6,800c254 <_realloc_r+0x590>
 800c150:	008004c4 	movi	r2,19
 800c154:	9009883a 	mov	r4,r18
 800c158:	880f883a 	mov	r7,r17
 800c15c:	11800f2e 	bgeu	r2,r6,800c19c <_realloc_r+0x4d8>
 800c160:	90800017 	ldw	r2,0(r18)
 800c164:	b9c00404 	addi	r7,r23,16
 800c168:	91000204 	addi	r4,r18,8
 800c16c:	b8800215 	stw	r2,8(r23)
 800c170:	90c00117 	ldw	r3,4(r18)
 800c174:	008006c4 	movi	r2,27
 800c178:	b8c00315 	stw	r3,12(r23)
 800c17c:	1180072e 	bgeu	r2,r6,800c19c <_realloc_r+0x4d8>
 800c180:	90c00217 	ldw	r3,8(r18)
 800c184:	b9c00604 	addi	r7,r23,24
 800c188:	91000404 	addi	r4,r18,16
 800c18c:	b8c00415 	stw	r3,16(r23)
 800c190:	90800317 	ldw	r2,12(r18)
 800c194:	b8800515 	stw	r2,20(r23)
 800c198:	31404026 	beq	r6,r5,800c29c <_realloc_r+0x5d8>
 800c19c:	20800017 	ldw	r2,0(r4)
 800c1a0:	38800015 	stw	r2,0(r7)
 800c1a4:	20c00117 	ldw	r3,4(r4)
 800c1a8:	38c00115 	stw	r3,4(r7)
 800c1ac:	20800217 	ldw	r2,8(r4)
 800c1b0:	38800215 	stw	r2,8(r7)
 800c1b4:	d8c00117 	ldw	r3,4(sp)
 800c1b8:	bf0b883a 	add	r5,r23,fp
 800c1bc:	b009883a 	mov	r4,r22
 800c1c0:	1f05c83a 	sub	r2,r3,fp
 800c1c4:	10800054 	ori	r2,r2,1
 800c1c8:	28800115 	stw	r2,4(r5)
 800c1cc:	b8c00117 	ldw	r3,4(r23)
 800c1d0:	00820074 	movhi	r2,2049
 800c1d4:	109f1804 	addi	r2,r2,31840
 800c1d8:	11400215 	stw	r5,8(r2)
 800c1dc:	18c0004c 	andi	r3,r3,1
 800c1e0:	e0c6b03a 	or	r3,fp,r3
 800c1e4:	b8c00115 	stw	r3,4(r23)
 800c1e8:	800f19c0 	call	800f19c <__malloc_unlock>
 800c1ec:	003eeb06 	br	800bd9c <_realloc_r+0xd8>
 800c1f0:	20800117 	ldw	r2,4(r4)
 800c1f4:	00ffff04 	movi	r3,-4
 800c1f8:	800f883a 	mov	r7,r16
 800c1fc:	10c4703a 	and	r2,r2,r3
 800c200:	98a9883a 	add	r20,r19,r2
 800c204:	84000204 	addi	r16,r16,8
 800c208:	003ecf06 	br	800bd48 <_realloc_r+0x84>
 800c20c:	900b883a 	mov	r5,r18
 800c210:	8009883a 	mov	r4,r16
 800c214:	800a98c0 	call	800a98c <memmove>
 800c218:	dd000017 	ldw	r20,0(sp)
 800c21c:	b80f883a 	mov	r7,r23
 800c220:	003ec906 	br	800bd48 <_realloc_r+0x84>
 800c224:	900b883a 	mov	r5,r18
 800c228:	8009883a 	mov	r4,r16
 800c22c:	800a98c0 	call	800a98c <memmove>
 800c230:	b80f883a 	mov	r7,r23
 800c234:	003ec406 	br	800bd48 <_realloc_r+0x84>
 800c238:	90c00417 	ldw	r3,16(r18)
 800c23c:	89400604 	addi	r5,r17,24
 800c240:	91000604 	addi	r4,r18,24
 800c244:	88c00415 	stw	r3,16(r17)
 800c248:	90800517 	ldw	r2,20(r18)
 800c24c:	88800515 	stw	r2,20(r17)
 800c250:	003f6806 	br	800bff4 <_realloc_r+0x330>
 800c254:	900b883a 	mov	r5,r18
 800c258:	8809883a 	mov	r4,r17
 800c25c:	800a98c0 	call	800a98c <memmove>
 800c260:	003fd406 	br	800c1b4 <_realloc_r+0x4f0>
 800c264:	90c00417 	ldw	r3,16(r18)
 800c268:	91000604 	addi	r4,r18,24
 800c26c:	ba000804 	addi	r8,r23,32
 800c270:	b8c00615 	stw	r3,24(r23)
 800c274:	90800517 	ldw	r2,20(r18)
 800c278:	b8800715 	stw	r2,28(r23)
 800c27c:	003f1206 	br	800bec8 <_realloc_r+0x204>
 800c280:	90c00417 	ldw	r3,16(r18)
 800c284:	91000604 	addi	r4,r18,24
 800c288:	ba000804 	addi	r8,r23,32
 800c28c:	b8c00615 	stw	r3,24(r23)
 800c290:	90800517 	ldw	r2,20(r18)
 800c294:	b8800715 	stw	r2,28(r23)
 800c298:	003f3206 	br	800bf64 <_realloc_r+0x2a0>
 800c29c:	90c00417 	ldw	r3,16(r18)
 800c2a0:	91000604 	addi	r4,r18,24
 800c2a4:	b9c00804 	addi	r7,r23,32
 800c2a8:	b8c00615 	stw	r3,24(r23)
 800c2ac:	90800517 	ldw	r2,20(r18)
 800c2b0:	b8800715 	stw	r2,28(r23)
 800c2b4:	003fb906 	br	800c19c <_realloc_r+0x4d8>

0800c2b8 <__isinfd>:
 800c2b8:	200d883a 	mov	r6,r4
 800c2bc:	0109c83a 	sub	r4,zero,r4
 800c2c0:	2188b03a 	or	r4,r4,r6
 800c2c4:	2008d7fa 	srli	r4,r4,31
 800c2c8:	00a00034 	movhi	r2,32768
 800c2cc:	10bfffc4 	addi	r2,r2,-1
 800c2d0:	1144703a 	and	r2,r2,r5
 800c2d4:	2088b03a 	or	r4,r4,r2
 800c2d8:	009ffc34 	movhi	r2,32752
 800c2dc:	1105c83a 	sub	r2,r2,r4
 800c2e0:	0087c83a 	sub	r3,zero,r2
 800c2e4:	10c4b03a 	or	r2,r2,r3
 800c2e8:	1004d7fa 	srli	r2,r2,31
 800c2ec:	00c00044 	movi	r3,1
 800c2f0:	1885c83a 	sub	r2,r3,r2
 800c2f4:	f800283a 	ret

0800c2f8 <__isnand>:
 800c2f8:	200d883a 	mov	r6,r4
 800c2fc:	0109c83a 	sub	r4,zero,r4
 800c300:	2188b03a 	or	r4,r4,r6
 800c304:	2008d7fa 	srli	r4,r4,31
 800c308:	00a00034 	movhi	r2,32768
 800c30c:	10bfffc4 	addi	r2,r2,-1
 800c310:	1144703a 	and	r2,r2,r5
 800c314:	2088b03a 	or	r4,r4,r2
 800c318:	009ffc34 	movhi	r2,32752
 800c31c:	1105c83a 	sub	r2,r2,r4
 800c320:	1004d7fa 	srli	r2,r2,31
 800c324:	f800283a 	ret

0800c328 <strcmp>:
 800c328:	2144b03a 	or	r2,r4,r5
 800c32c:	108000cc 	andi	r2,r2,3
 800c330:	10001d1e 	bne	r2,zero,800c3a8 <strcmp+0x80>
 800c334:	200f883a 	mov	r7,r4
 800c338:	28800017 	ldw	r2,0(r5)
 800c33c:	21000017 	ldw	r4,0(r4)
 800c340:	280d883a 	mov	r6,r5
 800c344:	2080161e 	bne	r4,r2,800c3a0 <strcmp+0x78>
 800c348:	023fbff4 	movhi	r8,65279
 800c34c:	423fbfc4 	addi	r8,r8,-257
 800c350:	2207883a 	add	r3,r4,r8
 800c354:	01602074 	movhi	r5,32897
 800c358:	29602004 	addi	r5,r5,-32640
 800c35c:	1946703a 	and	r3,r3,r5
 800c360:	0104303a 	nor	r2,zero,r4
 800c364:	10c4703a 	and	r2,r2,r3
 800c368:	10001c1e 	bne	r2,zero,800c3dc <strcmp+0xb4>
 800c36c:	4013883a 	mov	r9,r8
 800c370:	2811883a 	mov	r8,r5
 800c374:	00000106 	br	800c37c <strcmp+0x54>
 800c378:	1800181e 	bne	r3,zero,800c3dc <strcmp+0xb4>
 800c37c:	39c00104 	addi	r7,r7,4
 800c380:	39000017 	ldw	r4,0(r7)
 800c384:	31800104 	addi	r6,r6,4
 800c388:	31400017 	ldw	r5,0(r6)
 800c38c:	2245883a 	add	r2,r4,r9
 800c390:	1204703a 	and	r2,r2,r8
 800c394:	0106303a 	nor	r3,zero,r4
 800c398:	1886703a 	and	r3,r3,r2
 800c39c:	217ff626 	beq	r4,r5,800c378 <strcmp+0x50>
 800c3a0:	3809883a 	mov	r4,r7
 800c3a4:	300b883a 	mov	r5,r6
 800c3a8:	20c00007 	ldb	r3,0(r4)
 800c3ac:	1800051e 	bne	r3,zero,800c3c4 <strcmp+0x9c>
 800c3b0:	00000606 	br	800c3cc <strcmp+0xa4>
 800c3b4:	21000044 	addi	r4,r4,1
 800c3b8:	20c00007 	ldb	r3,0(r4)
 800c3bc:	29400044 	addi	r5,r5,1
 800c3c0:	18000226 	beq	r3,zero,800c3cc <strcmp+0xa4>
 800c3c4:	28800007 	ldb	r2,0(r5)
 800c3c8:	18bffa26 	beq	r3,r2,800c3b4 <strcmp+0x8c>
 800c3cc:	20c00003 	ldbu	r3,0(r4)
 800c3d0:	28800003 	ldbu	r2,0(r5)
 800c3d4:	1885c83a 	sub	r2,r3,r2
 800c3d8:	f800283a 	ret
 800c3dc:	0005883a 	mov	r2,zero
 800c3e0:	f800283a 	ret

0800c3e4 <__swbuf_r>:
 800c3e4:	defffc04 	addi	sp,sp,-16
 800c3e8:	dc400215 	stw	r17,8(sp)
 800c3ec:	dc000115 	stw	r16,4(sp)
 800c3f0:	dfc00315 	stw	ra,12(sp)
 800c3f4:	2023883a 	mov	r17,r4
 800c3f8:	2821883a 	mov	r16,r5
 800c3fc:	20000226 	beq	r4,zero,800c408 <__swbuf_r+0x24>
 800c400:	20800e17 	ldw	r2,56(r4)
 800c404:	10002f26 	beq	r2,zero,800c4c4 <__swbuf_r+0xe0>
 800c408:	3080030b 	ldhu	r2,12(r6)
 800c40c:	30c00617 	ldw	r3,24(r6)
 800c410:	1080020c 	andi	r2,r2,8
 800c414:	30c00215 	stw	r3,8(r6)
 800c418:	10002226 	beq	r2,zero,800c4a4 <__swbuf_r+0xc0>
 800c41c:	30c00417 	ldw	r3,16(r6)
 800c420:	18002026 	beq	r3,zero,800c4a4 <__swbuf_r+0xc0>
 800c424:	31000017 	ldw	r4,0(r6)
 800c428:	30800517 	ldw	r2,20(r6)
 800c42c:	20c7c83a 	sub	r3,r4,r3
 800c430:	18802f0e 	bge	r3,r2,800c4f0 <__swbuf_r+0x10c>
 800c434:	19400044 	addi	r5,r3,1
 800c438:	30800217 	ldw	r2,8(r6)
 800c43c:	84003fcc 	andi	r16,r16,255
 800c440:	20c00044 	addi	r3,r4,1
 800c444:	10bfffc4 	addi	r2,r2,-1
 800c448:	30800215 	stw	r2,8(r6)
 800c44c:	24000005 	stb	r16,0(r4)
 800c450:	30800517 	ldw	r2,20(r6)
 800c454:	30c00015 	stw	r3,0(r6)
 800c458:	11400c26 	beq	r2,r5,800c48c <__swbuf_r+0xa8>
 800c45c:	3080030b 	ldhu	r2,12(r6)
 800c460:	1080004c 	andi	r2,r2,1
 800c464:	1005003a 	cmpeq	r2,r2,zero
 800c468:	10000626 	beq	r2,zero,800c484 <__swbuf_r+0xa0>
 800c46c:	8005883a 	mov	r2,r16
 800c470:	dfc00317 	ldw	ra,12(sp)
 800c474:	dc400217 	ldw	r17,8(sp)
 800c478:	dc000117 	ldw	r16,4(sp)
 800c47c:	dec00404 	addi	sp,sp,16
 800c480:	f800283a 	ret
 800c484:	00800284 	movi	r2,10
 800c488:	80bff81e 	bne	r16,r2,800c46c <__swbuf_r+0x88>
 800c48c:	8809883a 	mov	r4,r17
 800c490:	300b883a 	mov	r5,r6
 800c494:	8009bb00 	call	8009bb0 <_fflush_r>
 800c498:	103ff426 	beq	r2,zero,800c46c <__swbuf_r+0x88>
 800c49c:	043fffc4 	movi	r16,-1
 800c4a0:	003ff206 	br	800c46c <__swbuf_r+0x88>
 800c4a4:	300b883a 	mov	r5,r6
 800c4a8:	8809883a 	mov	r4,r17
 800c4ac:	d9800015 	stw	r6,0(sp)
 800c4b0:	80081140 	call	8008114 <__swsetup_r>
 800c4b4:	d9800017 	ldw	r6,0(sp)
 800c4b8:	1000061e 	bne	r2,zero,800c4d4 <__swbuf_r+0xf0>
 800c4bc:	30c00417 	ldw	r3,16(r6)
 800c4c0:	003fd806 	br	800c424 <__swbuf_r+0x40>
 800c4c4:	d9800015 	stw	r6,0(sp)
 800c4c8:	8004eb80 	call	8004eb8 <__sinit>
 800c4cc:	d9800017 	ldw	r6,0(sp)
 800c4d0:	003fcd06 	br	800c408 <__swbuf_r+0x24>
 800c4d4:	3080030b 	ldhu	r2,12(r6)
 800c4d8:	00c00244 	movi	r3,9
 800c4dc:	043fffc4 	movi	r16,-1
 800c4e0:	10801014 	ori	r2,r2,64
 800c4e4:	3080030d 	sth	r2,12(r6)
 800c4e8:	88c00015 	stw	r3,0(r17)
 800c4ec:	003fdf06 	br	800c46c <__swbuf_r+0x88>
 800c4f0:	300b883a 	mov	r5,r6
 800c4f4:	8809883a 	mov	r4,r17
 800c4f8:	d9800015 	stw	r6,0(sp)
 800c4fc:	8009bb00 	call	8009bb0 <_fflush_r>
 800c500:	d9800017 	ldw	r6,0(sp)
 800c504:	103fe51e 	bne	r2,zero,800c49c <__swbuf_r+0xb8>
 800c508:	31000017 	ldw	r4,0(r6)
 800c50c:	01400044 	movi	r5,1
 800c510:	003fc906 	br	800c438 <__swbuf_r+0x54>

0800c514 <__swbuf>:
 800c514:	018200b4 	movhi	r6,2050
 800c518:	31a4bf04 	addi	r6,r6,-27908
 800c51c:	2007883a 	mov	r3,r4
 800c520:	31000017 	ldw	r4,0(r6)
 800c524:	280d883a 	mov	r6,r5
 800c528:	180b883a 	mov	r5,r3
 800c52c:	800c3e41 	jmpi	800c3e4 <__swbuf_r>

0800c530 <_calloc_r>:
 800c530:	298b383a 	mul	r5,r5,r6
 800c534:	defffe04 	addi	sp,sp,-8
 800c538:	dc000015 	stw	r16,0(sp)
 800c53c:	dfc00115 	stw	ra,4(sp)
 800c540:	80052b80 	call	80052b8 <_malloc_r>
 800c544:	1021883a 	mov	r16,r2
 800c548:	01c00904 	movi	r7,36
 800c54c:	10000d26 	beq	r2,zero,800c584 <_calloc_r+0x54>
 800c550:	10ffff17 	ldw	r3,-4(r2)
 800c554:	1009883a 	mov	r4,r2
 800c558:	00bfff04 	movi	r2,-4
 800c55c:	1886703a 	and	r3,r3,r2
 800c560:	1887883a 	add	r3,r3,r2
 800c564:	180d883a 	mov	r6,r3
 800c568:	000b883a 	mov	r5,zero
 800c56c:	38c01736 	bltu	r7,r3,800c5cc <_calloc_r+0x9c>
 800c570:	008004c4 	movi	r2,19
 800c574:	10c00836 	bltu	r2,r3,800c598 <_calloc_r+0x68>
 800c578:	20000215 	stw	zero,8(r4)
 800c57c:	20000015 	stw	zero,0(r4)
 800c580:	20000115 	stw	zero,4(r4)
 800c584:	8005883a 	mov	r2,r16
 800c588:	dfc00117 	ldw	ra,4(sp)
 800c58c:	dc000017 	ldw	r16,0(sp)
 800c590:	dec00204 	addi	sp,sp,8
 800c594:	f800283a 	ret
 800c598:	008006c4 	movi	r2,27
 800c59c:	80000015 	stw	zero,0(r16)
 800c5a0:	80000115 	stw	zero,4(r16)
 800c5a4:	81000204 	addi	r4,r16,8
 800c5a8:	10fff32e 	bgeu	r2,r3,800c578 <_calloc_r+0x48>
 800c5ac:	80000215 	stw	zero,8(r16)
 800c5b0:	80000315 	stw	zero,12(r16)
 800c5b4:	81000404 	addi	r4,r16,16
 800c5b8:	19ffef1e 	bne	r3,r7,800c578 <_calloc_r+0x48>
 800c5bc:	81000604 	addi	r4,r16,24
 800c5c0:	80000415 	stw	zero,16(r16)
 800c5c4:	80000515 	stw	zero,20(r16)
 800c5c8:	003feb06 	br	800c578 <_calloc_r+0x48>
 800c5cc:	8005b7c0 	call	8005b7c <memset>
 800c5d0:	8005883a 	mov	r2,r16
 800c5d4:	dfc00117 	ldw	ra,4(sp)
 800c5d8:	dc000017 	ldw	r16,0(sp)
 800c5dc:	dec00204 	addi	sp,sp,8
 800c5e0:	f800283a 	ret

0800c5e4 <_fstat_r>:
 800c5e4:	defffd04 	addi	sp,sp,-12
 800c5e8:	dc000015 	stw	r16,0(sp)
 800c5ec:	040200b4 	movhi	r16,2050
 800c5f0:	842b9404 	addi	r16,r16,-20912
 800c5f4:	dc400115 	stw	r17,4(sp)
 800c5f8:	80000015 	stw	zero,0(r16)
 800c5fc:	2023883a 	mov	r17,r4
 800c600:	2809883a 	mov	r4,r5
 800c604:	300b883a 	mov	r5,r6
 800c608:	dfc00215 	stw	ra,8(sp)
 800c60c:	800ec800 	call	800ec80 <fstat>
 800c610:	1007883a 	mov	r3,r2
 800c614:	00bfffc4 	movi	r2,-1
 800c618:	18800626 	beq	r3,r2,800c634 <_fstat_r+0x50>
 800c61c:	1805883a 	mov	r2,r3
 800c620:	dfc00217 	ldw	ra,8(sp)
 800c624:	dc400117 	ldw	r17,4(sp)
 800c628:	dc000017 	ldw	r16,0(sp)
 800c62c:	dec00304 	addi	sp,sp,12
 800c630:	f800283a 	ret
 800c634:	80800017 	ldw	r2,0(r16)
 800c638:	103ff826 	beq	r2,zero,800c61c <_fstat_r+0x38>
 800c63c:	88800015 	stw	r2,0(r17)
 800c640:	1805883a 	mov	r2,r3
 800c644:	dfc00217 	ldw	ra,8(sp)
 800c648:	dc400117 	ldw	r17,4(sp)
 800c64c:	dc000017 	ldw	r16,0(sp)
 800c650:	dec00304 	addi	sp,sp,12
 800c654:	f800283a 	ret

0800c658 <_isatty_r>:
 800c658:	defffd04 	addi	sp,sp,-12
 800c65c:	dc000015 	stw	r16,0(sp)
 800c660:	040200b4 	movhi	r16,2050
 800c664:	842b9404 	addi	r16,r16,-20912
 800c668:	dc400115 	stw	r17,4(sp)
 800c66c:	80000015 	stw	zero,0(r16)
 800c670:	2023883a 	mov	r17,r4
 800c674:	2809883a 	mov	r4,r5
 800c678:	dfc00215 	stw	ra,8(sp)
 800c67c:	800edb40 	call	800edb4 <isatty>
 800c680:	1007883a 	mov	r3,r2
 800c684:	00bfffc4 	movi	r2,-1
 800c688:	18800626 	beq	r3,r2,800c6a4 <_isatty_r+0x4c>
 800c68c:	1805883a 	mov	r2,r3
 800c690:	dfc00217 	ldw	ra,8(sp)
 800c694:	dc400117 	ldw	r17,4(sp)
 800c698:	dc000017 	ldw	r16,0(sp)
 800c69c:	dec00304 	addi	sp,sp,12
 800c6a0:	f800283a 	ret
 800c6a4:	80800017 	ldw	r2,0(r16)
 800c6a8:	103ff826 	beq	r2,zero,800c68c <_isatty_r+0x34>
 800c6ac:	88800015 	stw	r2,0(r17)
 800c6b0:	1805883a 	mov	r2,r3
 800c6b4:	dfc00217 	ldw	ra,8(sp)
 800c6b8:	dc400117 	ldw	r17,4(sp)
 800c6bc:	dc000017 	ldw	r16,0(sp)
 800c6c0:	dec00304 	addi	sp,sp,12
 800c6c4:	f800283a 	ret

0800c6c8 <__udivdi3>:
 800c6c8:	defff004 	addi	sp,sp,-64
 800c6cc:	2005883a 	mov	r2,r4
 800c6d0:	3011883a 	mov	r8,r6
 800c6d4:	df000e15 	stw	fp,56(sp)
 800c6d8:	dd000a15 	stw	r20,40(sp)
 800c6dc:	dc000615 	stw	r16,24(sp)
 800c6e0:	dfc00f15 	stw	ra,60(sp)
 800c6e4:	ddc00d15 	stw	r23,52(sp)
 800c6e8:	dd800c15 	stw	r22,48(sp)
 800c6ec:	dd400b15 	stw	r21,44(sp)
 800c6f0:	dcc00915 	stw	r19,36(sp)
 800c6f4:	dc800815 	stw	r18,32(sp)
 800c6f8:	dc400715 	stw	r17,28(sp)
 800c6fc:	4021883a 	mov	r16,r8
 800c700:	1039883a 	mov	fp,r2
 800c704:	2829883a 	mov	r20,r5
 800c708:	38003b1e 	bne	r7,zero,800c7f8 <__udivdi3+0x130>
 800c70c:	2a005c36 	bltu	r5,r8,800c880 <__udivdi3+0x1b8>
 800c710:	4000a626 	beq	r8,zero,800c9ac <__udivdi3+0x2e4>
 800c714:	00bfffd4 	movui	r2,65535
 800c718:	14009e36 	bltu	r2,r16,800c994 <__udivdi3+0x2cc>
 800c71c:	00803fc4 	movi	r2,255
 800c720:	14013d36 	bltu	r2,r16,800cc18 <__udivdi3+0x550>
 800c724:	000b883a 	mov	r5,zero
 800c728:	0005883a 	mov	r2,zero
 800c72c:	8084d83a 	srl	r2,r16,r2
 800c730:	01020074 	movhi	r4,2049
 800c734:	211dbc04 	addi	r4,r4,30448
 800c738:	01800804 	movi	r6,32
 800c73c:	1105883a 	add	r2,r2,r4
 800c740:	10c00003 	ldbu	r3,0(r2)
 800c744:	28c7883a 	add	r3,r5,r3
 800c748:	30edc83a 	sub	r22,r6,r3
 800c74c:	b000ee1e 	bne	r22,zero,800cb08 <__udivdi3+0x440>
 800c750:	802ad43a 	srli	r21,r16,16
 800c754:	00800044 	movi	r2,1
 800c758:	a423c83a 	sub	r17,r20,r16
 800c75c:	85ffffcc 	andi	r23,r16,65535
 800c760:	d8800315 	stw	r2,12(sp)
 800c764:	8809883a 	mov	r4,r17
 800c768:	a80b883a 	mov	r5,r21
 800c76c:	800e4bc0 	call	800e4bc <__udivsi3>
 800c770:	8809883a 	mov	r4,r17
 800c774:	a80b883a 	mov	r5,r21
 800c778:	102d883a 	mov	r22,r2
 800c77c:	800e4c40 	call	800e4c4 <__umodsi3>
 800c780:	1004943a 	slli	r2,r2,16
 800c784:	e006d43a 	srli	r3,fp,16
 800c788:	bda3383a 	mul	r17,r23,r22
 800c78c:	10c4b03a 	or	r2,r2,r3
 800c790:	1440042e 	bgeu	r2,r17,800c7a4 <__udivdi3+0xdc>
 800c794:	1405883a 	add	r2,r2,r16
 800c798:	b5bfffc4 	addi	r22,r22,-1
 800c79c:	14000136 	bltu	r2,r16,800c7a4 <__udivdi3+0xdc>
 800c7a0:	14413d36 	bltu	r2,r17,800cc98 <__udivdi3+0x5d0>
 800c7a4:	1463c83a 	sub	r17,r2,r17
 800c7a8:	8809883a 	mov	r4,r17
 800c7ac:	a80b883a 	mov	r5,r21
 800c7b0:	800e4bc0 	call	800e4bc <__udivsi3>
 800c7b4:	8809883a 	mov	r4,r17
 800c7b8:	a80b883a 	mov	r5,r21
 800c7bc:	1029883a 	mov	r20,r2
 800c7c0:	800e4c40 	call	800e4c4 <__umodsi3>
 800c7c4:	1004943a 	slli	r2,r2,16
 800c7c8:	bd09383a 	mul	r4,r23,r20
 800c7cc:	e0ffffcc 	andi	r3,fp,65535
 800c7d0:	10c4b03a 	or	r2,r2,r3
 800c7d4:	1100042e 	bgeu	r2,r4,800c7e8 <__udivdi3+0x120>
 800c7d8:	8085883a 	add	r2,r16,r2
 800c7dc:	a53fffc4 	addi	r20,r20,-1
 800c7e0:	14000136 	bltu	r2,r16,800c7e8 <__udivdi3+0x120>
 800c7e4:	11012036 	bltu	r2,r4,800cc68 <__udivdi3+0x5a0>
 800c7e8:	b004943a 	slli	r2,r22,16
 800c7ec:	d9000317 	ldw	r4,12(sp)
 800c7f0:	a084b03a 	or	r2,r20,r2
 800c7f4:	00001506 	br	800c84c <__udivdi3+0x184>
 800c7f8:	380d883a 	mov	r6,r7
 800c7fc:	29c06236 	bltu	r5,r7,800c988 <__udivdi3+0x2c0>
 800c800:	00bfffd4 	movui	r2,65535
 800c804:	11c05a36 	bltu	r2,r7,800c970 <__udivdi3+0x2a8>
 800c808:	00803fc4 	movi	r2,255
 800c80c:	11c0fc36 	bltu	r2,r7,800cc00 <__udivdi3+0x538>
 800c810:	000b883a 	mov	r5,zero
 800c814:	0005883a 	mov	r2,zero
 800c818:	3084d83a 	srl	r2,r6,r2
 800c81c:	01020074 	movhi	r4,2049
 800c820:	211dbc04 	addi	r4,r4,30448
 800c824:	01c00804 	movi	r7,32
 800c828:	1105883a 	add	r2,r2,r4
 800c82c:	10c00003 	ldbu	r3,0(r2)
 800c830:	28c7883a 	add	r3,r5,r3
 800c834:	38efc83a 	sub	r23,r7,r3
 800c838:	b800691e 	bne	r23,zero,800c9e0 <__udivdi3+0x318>
 800c83c:	35000136 	bltu	r6,r20,800c844 <__udivdi3+0x17c>
 800c840:	e4005136 	bltu	fp,r16,800c988 <__udivdi3+0x2c0>
 800c844:	00800044 	movi	r2,1
 800c848:	0009883a 	mov	r4,zero
 800c84c:	2007883a 	mov	r3,r4
 800c850:	dfc00f17 	ldw	ra,60(sp)
 800c854:	df000e17 	ldw	fp,56(sp)
 800c858:	ddc00d17 	ldw	r23,52(sp)
 800c85c:	dd800c17 	ldw	r22,48(sp)
 800c860:	dd400b17 	ldw	r21,44(sp)
 800c864:	dd000a17 	ldw	r20,40(sp)
 800c868:	dcc00917 	ldw	r19,36(sp)
 800c86c:	dc800817 	ldw	r18,32(sp)
 800c870:	dc400717 	ldw	r17,28(sp)
 800c874:	dc000617 	ldw	r16,24(sp)
 800c878:	dec01004 	addi	sp,sp,64
 800c87c:	f800283a 	ret
 800c880:	00bfffd4 	movui	r2,65535
 800c884:	12005036 	bltu	r2,r8,800c9c8 <__udivdi3+0x300>
 800c888:	00803fc4 	movi	r2,255
 800c88c:	1200e836 	bltu	r2,r8,800cc30 <__udivdi3+0x568>
 800c890:	000b883a 	mov	r5,zero
 800c894:	0005883a 	mov	r2,zero
 800c898:	8084d83a 	srl	r2,r16,r2
 800c89c:	01020074 	movhi	r4,2049
 800c8a0:	211dbc04 	addi	r4,r4,30448
 800c8a4:	01800804 	movi	r6,32
 800c8a8:	1105883a 	add	r2,r2,r4
 800c8ac:	10c00003 	ldbu	r3,0(r2)
 800c8b0:	28c7883a 	add	r3,r5,r3
 800c8b4:	30cbc83a 	sub	r5,r6,r3
 800c8b8:	28000626 	beq	r5,zero,800c8d4 <__udivdi3+0x20c>
 800c8bc:	3145c83a 	sub	r2,r6,r5
 800c8c0:	e084d83a 	srl	r2,fp,r2
 800c8c4:	a146983a 	sll	r3,r20,r5
 800c8c8:	e178983a 	sll	fp,fp,r5
 800c8cc:	8160983a 	sll	r16,r16,r5
 800c8d0:	18a8b03a 	or	r20,r3,r2
 800c8d4:	802ad43a 	srli	r21,r16,16
 800c8d8:	a009883a 	mov	r4,r20
 800c8dc:	85ffffcc 	andi	r23,r16,65535
 800c8e0:	a80b883a 	mov	r5,r21
 800c8e4:	800e4bc0 	call	800e4bc <__udivsi3>
 800c8e8:	a009883a 	mov	r4,r20
 800c8ec:	a80b883a 	mov	r5,r21
 800c8f0:	102d883a 	mov	r22,r2
 800c8f4:	800e4c40 	call	800e4c4 <__umodsi3>
 800c8f8:	1004943a 	slli	r2,r2,16
 800c8fc:	e006d43a 	srli	r3,fp,16
 800c900:	bda3383a 	mul	r17,r23,r22
 800c904:	10c4b03a 	or	r2,r2,r3
 800c908:	1440042e 	bgeu	r2,r17,800c91c <__udivdi3+0x254>
 800c90c:	1405883a 	add	r2,r2,r16
 800c910:	b5bfffc4 	addi	r22,r22,-1
 800c914:	14000136 	bltu	r2,r16,800c91c <__udivdi3+0x254>
 800c918:	1440d536 	bltu	r2,r17,800cc70 <__udivdi3+0x5a8>
 800c91c:	1463c83a 	sub	r17,r2,r17
 800c920:	8809883a 	mov	r4,r17
 800c924:	a80b883a 	mov	r5,r21
 800c928:	800e4bc0 	call	800e4bc <__udivsi3>
 800c92c:	8809883a 	mov	r4,r17
 800c930:	a80b883a 	mov	r5,r21
 800c934:	1029883a 	mov	r20,r2
 800c938:	800e4c40 	call	800e4c4 <__umodsi3>
 800c93c:	1004943a 	slli	r2,r2,16
 800c940:	bd09383a 	mul	r4,r23,r20
 800c944:	e0ffffcc 	andi	r3,fp,65535
 800c948:	10c4b03a 	or	r2,r2,r3
 800c94c:	1100042e 	bgeu	r2,r4,800c960 <__udivdi3+0x298>
 800c950:	8085883a 	add	r2,r16,r2
 800c954:	a53fffc4 	addi	r20,r20,-1
 800c958:	14000136 	bltu	r2,r16,800c960 <__udivdi3+0x298>
 800c95c:	1100c736 	bltu	r2,r4,800cc7c <__udivdi3+0x5b4>
 800c960:	b004943a 	slli	r2,r22,16
 800c964:	0009883a 	mov	r4,zero
 800c968:	a084b03a 	or	r2,r20,r2
 800c96c:	003fb706 	br	800c84c <__udivdi3+0x184>
 800c970:	00804034 	movhi	r2,256
 800c974:	10bfffc4 	addi	r2,r2,-1
 800c978:	11c0a436 	bltu	r2,r7,800cc0c <__udivdi3+0x544>
 800c97c:	01400404 	movi	r5,16
 800c980:	2805883a 	mov	r2,r5
 800c984:	003fa406 	br	800c818 <__udivdi3+0x150>
 800c988:	0005883a 	mov	r2,zero
 800c98c:	0009883a 	mov	r4,zero
 800c990:	003fae06 	br	800c84c <__udivdi3+0x184>
 800c994:	00804034 	movhi	r2,256
 800c998:	10bfffc4 	addi	r2,r2,-1
 800c99c:	1400a136 	bltu	r2,r16,800cc24 <__udivdi3+0x55c>
 800c9a0:	01400404 	movi	r5,16
 800c9a4:	2805883a 	mov	r2,r5
 800c9a8:	003f6006 	br	800c72c <__udivdi3+0x64>
 800c9ac:	01000044 	movi	r4,1
 800c9b0:	000b883a 	mov	r5,zero
 800c9b4:	800e4bc0 	call	800e4bc <__udivsi3>
 800c9b8:	1021883a 	mov	r16,r2
 800c9bc:	00bfffd4 	movui	r2,65535
 800c9c0:	143ff436 	bltu	r2,r16,800c994 <__udivdi3+0x2cc>
 800c9c4:	003f5506 	br	800c71c <__udivdi3+0x54>
 800c9c8:	00804034 	movhi	r2,256
 800c9cc:	10bfffc4 	addi	r2,r2,-1
 800c9d0:	12009a36 	bltu	r2,r8,800cc3c <__udivdi3+0x574>
 800c9d4:	01400404 	movi	r5,16
 800c9d8:	2805883a 	mov	r2,r5
 800c9dc:	003fae06 	br	800c898 <__udivdi3+0x1d0>
 800c9e0:	3dc5c83a 	sub	r2,r7,r23
 800c9e4:	35c8983a 	sll	r4,r6,r23
 800c9e8:	8086d83a 	srl	r3,r16,r2
 800c9ec:	a0a2d83a 	srl	r17,r20,r2
 800c9f0:	e084d83a 	srl	r2,fp,r2
 800c9f4:	20eab03a 	or	r21,r4,r3
 800c9f8:	a82cd43a 	srli	r22,r21,16
 800c9fc:	a5c6983a 	sll	r3,r20,r23
 800ca00:	8809883a 	mov	r4,r17
 800ca04:	b00b883a 	mov	r5,r22
 800ca08:	1886b03a 	or	r3,r3,r2
 800ca0c:	d8c00215 	stw	r3,8(sp)
 800ca10:	800e4bc0 	call	800e4bc <__udivsi3>
 800ca14:	8809883a 	mov	r4,r17
 800ca18:	b00b883a 	mov	r5,r22
 800ca1c:	1029883a 	mov	r20,r2
 800ca20:	800e4c40 	call	800e4c4 <__umodsi3>
 800ca24:	a8ffffcc 	andi	r3,r21,65535
 800ca28:	d8c00515 	stw	r3,20(sp)
 800ca2c:	d9000217 	ldw	r4,8(sp)
 800ca30:	d9400517 	ldw	r5,20(sp)
 800ca34:	1004943a 	slli	r2,r2,16
 800ca38:	2006d43a 	srli	r3,r4,16
 800ca3c:	85e0983a 	sll	r16,r16,r23
 800ca40:	2d23383a 	mul	r17,r5,r20
 800ca44:	10c4b03a 	or	r2,r2,r3
 800ca48:	dc000015 	stw	r16,0(sp)
 800ca4c:	1440032e 	bgeu	r2,r17,800ca5c <__udivdi3+0x394>
 800ca50:	1545883a 	add	r2,r2,r21
 800ca54:	a53fffc4 	addi	r20,r20,-1
 800ca58:	15407f2e 	bgeu	r2,r21,800cc58 <__udivdi3+0x590>
 800ca5c:	1463c83a 	sub	r17,r2,r17
 800ca60:	8809883a 	mov	r4,r17
 800ca64:	b00b883a 	mov	r5,r22
 800ca68:	800e4bc0 	call	800e4bc <__udivsi3>
 800ca6c:	8809883a 	mov	r4,r17
 800ca70:	b00b883a 	mov	r5,r22
 800ca74:	1021883a 	mov	r16,r2
 800ca78:	800e4c40 	call	800e4c4 <__umodsi3>
 800ca7c:	d8c00517 	ldw	r3,20(sp)
 800ca80:	d9000217 	ldw	r4,8(sp)
 800ca84:	1004943a 	slli	r2,r2,16
 800ca88:	1c0f383a 	mul	r7,r3,r16
 800ca8c:	20ffffcc 	andi	r3,r4,65535
 800ca90:	10e2b03a 	or	r17,r2,r3
 800ca94:	89c0032e 	bgeu	r17,r7,800caa4 <__udivdi3+0x3dc>
 800ca98:	8d63883a 	add	r17,r17,r21
 800ca9c:	843fffc4 	addi	r16,r16,-1
 800caa0:	8d40692e 	bgeu	r17,r21,800cc48 <__udivdi3+0x580>
 800caa4:	a008943a 	slli	r4,r20,16
 800caa8:	d9400017 	ldw	r5,0(sp)
 800caac:	89e3c83a 	sub	r17,r17,r7
 800cab0:	8110b03a 	or	r8,r16,r4
 800cab4:	280cd43a 	srli	r6,r5,16
 800cab8:	28ffffcc 	andi	r3,r5,65535
 800cabc:	40bfffcc 	andi	r2,r8,65535
 800cac0:	400ad43a 	srli	r5,r8,16
 800cac4:	10d3383a 	mul	r9,r2,r3
 800cac8:	1185383a 	mul	r2,r2,r6
 800cacc:	28c7383a 	mul	r3,r5,r3
 800cad0:	4808d43a 	srli	r4,r9,16
 800cad4:	298b383a 	mul	r5,r5,r6
 800cad8:	10c5883a 	add	r2,r2,r3
 800cadc:	2089883a 	add	r4,r4,r2
 800cae0:	20c0022e 	bgeu	r4,r3,800caec <__udivdi3+0x424>
 800cae4:	00800074 	movhi	r2,1
 800cae8:	288b883a 	add	r5,r5,r2
 800caec:	2004d43a 	srli	r2,r4,16
 800caf0:	288b883a 	add	r5,r5,r2
 800caf4:	89403f36 	bltu	r17,r5,800cbf4 <__udivdi3+0x52c>
 800caf8:	89403926 	beq	r17,r5,800cbe0 <__udivdi3+0x518>
 800cafc:	4005883a 	mov	r2,r8
 800cb00:	0009883a 	mov	r4,zero
 800cb04:	003f5106 	br	800c84c <__udivdi3+0x184>
 800cb08:	85a0983a 	sll	r16,r16,r22
 800cb0c:	3585c83a 	sub	r2,r6,r22
 800cb10:	a0a2d83a 	srl	r17,r20,r2
 800cb14:	802ad43a 	srli	r21,r16,16
 800cb18:	e084d83a 	srl	r2,fp,r2
 800cb1c:	a586983a 	sll	r3,r20,r22
 800cb20:	8809883a 	mov	r4,r17
 800cb24:	a80b883a 	mov	r5,r21
 800cb28:	1886b03a 	or	r3,r3,r2
 800cb2c:	d8c00115 	stw	r3,4(sp)
 800cb30:	800e4bc0 	call	800e4bc <__udivsi3>
 800cb34:	8809883a 	mov	r4,r17
 800cb38:	a80b883a 	mov	r5,r21
 800cb3c:	d8800415 	stw	r2,16(sp)
 800cb40:	800e4c40 	call	800e4c4 <__umodsi3>
 800cb44:	d9000117 	ldw	r4,4(sp)
 800cb48:	d9400417 	ldw	r5,16(sp)
 800cb4c:	1004943a 	slli	r2,r2,16
 800cb50:	85ffffcc 	andi	r23,r16,65535
 800cb54:	2006d43a 	srli	r3,r4,16
 800cb58:	b963383a 	mul	r17,r23,r5
 800cb5c:	10c4b03a 	or	r2,r2,r3
 800cb60:	1440042e 	bgeu	r2,r17,800cb74 <__udivdi3+0x4ac>
 800cb64:	297fffc4 	addi	r5,r5,-1
 800cb68:	1405883a 	add	r2,r2,r16
 800cb6c:	d9400415 	stw	r5,16(sp)
 800cb70:	1400442e 	bgeu	r2,r16,800cc84 <__udivdi3+0x5bc>
 800cb74:	1463c83a 	sub	r17,r2,r17
 800cb78:	8809883a 	mov	r4,r17
 800cb7c:	a80b883a 	mov	r5,r21
 800cb80:	800e4bc0 	call	800e4bc <__udivsi3>
 800cb84:	8809883a 	mov	r4,r17
 800cb88:	a80b883a 	mov	r5,r21
 800cb8c:	1029883a 	mov	r20,r2
 800cb90:	800e4c40 	call	800e4c4 <__umodsi3>
 800cb94:	d9400117 	ldw	r5,4(sp)
 800cb98:	1004943a 	slli	r2,r2,16
 800cb9c:	bd09383a 	mul	r4,r23,r20
 800cba0:	28ffffcc 	andi	r3,r5,65535
 800cba4:	10c6b03a 	or	r3,r2,r3
 800cba8:	1900062e 	bgeu	r3,r4,800cbc4 <__udivdi3+0x4fc>
 800cbac:	1c07883a 	add	r3,r3,r16
 800cbb0:	a53fffc4 	addi	r20,r20,-1
 800cbb4:	1c000336 	bltu	r3,r16,800cbc4 <__udivdi3+0x4fc>
 800cbb8:	1900022e 	bgeu	r3,r4,800cbc4 <__udivdi3+0x4fc>
 800cbbc:	a53fffc4 	addi	r20,r20,-1
 800cbc0:	1c07883a 	add	r3,r3,r16
 800cbc4:	d9400417 	ldw	r5,16(sp)
 800cbc8:	e5b8983a 	sll	fp,fp,r22
 800cbcc:	1923c83a 	sub	r17,r3,r4
 800cbd0:	2804943a 	slli	r2,r5,16
 800cbd4:	a0a8b03a 	or	r20,r20,r2
 800cbd8:	dd000315 	stw	r20,12(sp)
 800cbdc:	003ee106 	br	800c764 <__udivdi3+0x9c>
 800cbe0:	2004943a 	slli	r2,r4,16
 800cbe4:	e5c8983a 	sll	r4,fp,r23
 800cbe8:	48ffffcc 	andi	r3,r9,65535
 800cbec:	10c5883a 	add	r2,r2,r3
 800cbf0:	20bfc22e 	bgeu	r4,r2,800cafc <__udivdi3+0x434>
 800cbf4:	40bfffc4 	addi	r2,r8,-1
 800cbf8:	0009883a 	mov	r4,zero
 800cbfc:	003f1306 	br	800c84c <__udivdi3+0x184>
 800cc00:	01400204 	movi	r5,8
 800cc04:	2805883a 	mov	r2,r5
 800cc08:	003f0306 	br	800c818 <__udivdi3+0x150>
 800cc0c:	01400604 	movi	r5,24
 800cc10:	2805883a 	mov	r2,r5
 800cc14:	003f0006 	br	800c818 <__udivdi3+0x150>
 800cc18:	01400204 	movi	r5,8
 800cc1c:	2805883a 	mov	r2,r5
 800cc20:	003ec206 	br	800c72c <__udivdi3+0x64>
 800cc24:	01400604 	movi	r5,24
 800cc28:	2805883a 	mov	r2,r5
 800cc2c:	003ebf06 	br	800c72c <__udivdi3+0x64>
 800cc30:	01400204 	movi	r5,8
 800cc34:	2805883a 	mov	r2,r5
 800cc38:	003f1706 	br	800c898 <__udivdi3+0x1d0>
 800cc3c:	01400604 	movi	r5,24
 800cc40:	2805883a 	mov	r2,r5
 800cc44:	003f1406 	br	800c898 <__udivdi3+0x1d0>
 800cc48:	89ff962e 	bgeu	r17,r7,800caa4 <__udivdi3+0x3dc>
 800cc4c:	8d63883a 	add	r17,r17,r21
 800cc50:	843fffc4 	addi	r16,r16,-1
 800cc54:	003f9306 	br	800caa4 <__udivdi3+0x3dc>
 800cc58:	147f802e 	bgeu	r2,r17,800ca5c <__udivdi3+0x394>
 800cc5c:	a53fffc4 	addi	r20,r20,-1
 800cc60:	1545883a 	add	r2,r2,r21
 800cc64:	003f7d06 	br	800ca5c <__udivdi3+0x394>
 800cc68:	a53fffc4 	addi	r20,r20,-1
 800cc6c:	003ede06 	br	800c7e8 <__udivdi3+0x120>
 800cc70:	b5bfffc4 	addi	r22,r22,-1
 800cc74:	1405883a 	add	r2,r2,r16
 800cc78:	003f2806 	br	800c91c <__udivdi3+0x254>
 800cc7c:	a53fffc4 	addi	r20,r20,-1
 800cc80:	003f3706 	br	800c960 <__udivdi3+0x298>
 800cc84:	147fbb2e 	bgeu	r2,r17,800cb74 <__udivdi3+0x4ac>
 800cc88:	297fffc4 	addi	r5,r5,-1
 800cc8c:	1405883a 	add	r2,r2,r16
 800cc90:	d9400415 	stw	r5,16(sp)
 800cc94:	003fb706 	br	800cb74 <__udivdi3+0x4ac>
 800cc98:	b5bfffc4 	addi	r22,r22,-1
 800cc9c:	1405883a 	add	r2,r2,r16
 800cca0:	003ec006 	br	800c7a4 <__udivdi3+0xdc>

0800cca4 <__umoddi3>:
 800cca4:	defff104 	addi	sp,sp,-60
 800cca8:	dd800b15 	stw	r22,44(sp)
 800ccac:	dd000915 	stw	r20,36(sp)
 800ccb0:	dc000515 	stw	r16,20(sp)
 800ccb4:	dfc00e15 	stw	ra,56(sp)
 800ccb8:	df000d15 	stw	fp,52(sp)
 800ccbc:	ddc00c15 	stw	r23,48(sp)
 800ccc0:	dd400a15 	stw	r21,40(sp)
 800ccc4:	dcc00815 	stw	r19,32(sp)
 800ccc8:	dc800715 	stw	r18,28(sp)
 800cccc:	dc400615 	stw	r17,24(sp)
 800ccd0:	3021883a 	mov	r16,r6
 800ccd4:	202d883a 	mov	r22,r4
 800ccd8:	2829883a 	mov	r20,r5
 800ccdc:	38002b1e 	bne	r7,zero,800cd8c <__umoddi3+0xe8>
 800cce0:	29805036 	bltu	r5,r6,800ce24 <__umoddi3+0x180>
 800cce4:	30008a26 	beq	r6,zero,800cf10 <__umoddi3+0x26c>
 800cce8:	00bfffd4 	movui	r2,65535
 800ccec:	14008236 	bltu	r2,r16,800cef8 <__umoddi3+0x254>
 800ccf0:	00803fc4 	movi	r2,255
 800ccf4:	14013636 	bltu	r2,r16,800d1d0 <__umoddi3+0x52c>
 800ccf8:	000b883a 	mov	r5,zero
 800ccfc:	0005883a 	mov	r2,zero
 800cd00:	8084d83a 	srl	r2,r16,r2
 800cd04:	01020074 	movhi	r4,2049
 800cd08:	211dbc04 	addi	r4,r4,30448
 800cd0c:	01800804 	movi	r6,32
 800cd10:	1105883a 	add	r2,r2,r4
 800cd14:	10c00003 	ldbu	r3,0(r2)
 800cd18:	28c7883a 	add	r3,r5,r3
 800cd1c:	30efc83a 	sub	r23,r6,r3
 800cd20:	b800941e 	bne	r23,zero,800cf74 <__umoddi3+0x2d0>
 800cd24:	802ad43a 	srli	r21,r16,16
 800cd28:	a423c83a 	sub	r17,r20,r16
 800cd2c:	0039883a 	mov	fp,zero
 800cd30:	853fffcc 	andi	r20,r16,65535
 800cd34:	8809883a 	mov	r4,r17
 800cd38:	a80b883a 	mov	r5,r21
 800cd3c:	800e4bc0 	call	800e4bc <__udivsi3>
 800cd40:	8809883a 	mov	r4,r17
 800cd44:	a80b883a 	mov	r5,r21
 800cd48:	a0a3383a 	mul	r17,r20,r2
 800cd4c:	800e4c40 	call	800e4c4 <__umodsi3>
 800cd50:	1004943a 	slli	r2,r2,16
 800cd54:	b006d43a 	srli	r3,r22,16
 800cd58:	10c4b03a 	or	r2,r2,r3
 800cd5c:	1440032e 	bgeu	r2,r17,800cd6c <__umoddi3+0xc8>
 800cd60:	1405883a 	add	r2,r2,r16
 800cd64:	14000136 	bltu	r2,r16,800cd6c <__umoddi3+0xc8>
 800cd68:	14413536 	bltu	r2,r17,800d240 <__umoddi3+0x59c>
 800cd6c:	1463c83a 	sub	r17,r2,r17
 800cd70:	8809883a 	mov	r4,r17
 800cd74:	a80b883a 	mov	r5,r21
 800cd78:	800e4bc0 	call	800e4bc <__udivsi3>
 800cd7c:	8809883a 	mov	r4,r17
 800cd80:	a0a3383a 	mul	r17,r20,r2
 800cd84:	a80b883a 	mov	r5,r21
 800cd88:	00004d06 	br	800cec0 <__umoddi3+0x21c>
 800cd8c:	380d883a 	mov	r6,r7
 800cd90:	29c0102e 	bgeu	r5,r7,800cdd4 <__umoddi3+0x130>
 800cd94:	2011883a 	mov	r8,r4
 800cd98:	2813883a 	mov	r9,r5
 800cd9c:	4005883a 	mov	r2,r8
 800cda0:	4807883a 	mov	r3,r9
 800cda4:	dfc00e17 	ldw	ra,56(sp)
 800cda8:	df000d17 	ldw	fp,52(sp)
 800cdac:	ddc00c17 	ldw	r23,48(sp)
 800cdb0:	dd800b17 	ldw	r22,44(sp)
 800cdb4:	dd400a17 	ldw	r21,40(sp)
 800cdb8:	dd000917 	ldw	r20,36(sp)
 800cdbc:	dcc00817 	ldw	r19,32(sp)
 800cdc0:	dc800717 	ldw	r18,28(sp)
 800cdc4:	dc400617 	ldw	r17,24(sp)
 800cdc8:	dc000517 	ldw	r16,20(sp)
 800cdcc:	dec00f04 	addi	sp,sp,60
 800cdd0:	f800283a 	ret
 800cdd4:	00bfffd4 	movui	r2,65535
 800cdd8:	11c05a36 	bltu	r2,r7,800cf44 <__umoddi3+0x2a0>
 800cddc:	00803fc4 	movi	r2,255
 800cde0:	11c0fe36 	bltu	r2,r7,800d1dc <__umoddi3+0x538>
 800cde4:	000b883a 	mov	r5,zero
 800cde8:	0005883a 	mov	r2,zero
 800cdec:	3084d83a 	srl	r2,r6,r2
 800cdf0:	01020074 	movhi	r4,2049
 800cdf4:	211dbc04 	addi	r4,r4,30448
 800cdf8:	01c00804 	movi	r7,32
 800cdfc:	1105883a 	add	r2,r2,r4
 800ce00:	10c00003 	ldbu	r3,0(r2)
 800ce04:	28c7883a 	add	r3,r5,r3
 800ce08:	38ebc83a 	sub	r21,r7,r3
 800ce0c:	a800851e 	bne	r21,zero,800d024 <__umoddi3+0x380>
 800ce10:	35005236 	bltu	r6,r20,800cf5c <__umoddi3+0x2b8>
 800ce14:	b400512e 	bgeu	r22,r16,800cf5c <__umoddi3+0x2b8>
 800ce18:	b011883a 	mov	r8,r22
 800ce1c:	a013883a 	mov	r9,r20
 800ce20:	003fde06 	br	800cd9c <__umoddi3+0xf8>
 800ce24:	00bfffd4 	movui	r2,65535
 800ce28:	11804036 	bltu	r2,r6,800cf2c <__umoddi3+0x288>
 800ce2c:	00803fc4 	movi	r2,255
 800ce30:	1180ed36 	bltu	r2,r6,800d1e8 <__umoddi3+0x544>
 800ce34:	000b883a 	mov	r5,zero
 800ce38:	0005883a 	mov	r2,zero
 800ce3c:	8084d83a 	srl	r2,r16,r2
 800ce40:	01020074 	movhi	r4,2049
 800ce44:	211dbc04 	addi	r4,r4,30448
 800ce48:	01800804 	movi	r6,32
 800ce4c:	1105883a 	add	r2,r2,r4
 800ce50:	10c00003 	ldbu	r3,0(r2)
 800ce54:	28c7883a 	add	r3,r5,r3
 800ce58:	30c7c83a 	sub	r3,r6,r3
 800ce5c:	1800bf1e 	bne	r3,zero,800d15c <__umoddi3+0x4b8>
 800ce60:	0039883a 	mov	fp,zero
 800ce64:	802ad43a 	srli	r21,r16,16
 800ce68:	a009883a 	mov	r4,r20
 800ce6c:	85ffffcc 	andi	r23,r16,65535
 800ce70:	a80b883a 	mov	r5,r21
 800ce74:	800e4bc0 	call	800e4bc <__udivsi3>
 800ce78:	a009883a 	mov	r4,r20
 800ce7c:	a80b883a 	mov	r5,r21
 800ce80:	b8a3383a 	mul	r17,r23,r2
 800ce84:	800e4c40 	call	800e4c4 <__umodsi3>
 800ce88:	1004943a 	slli	r2,r2,16
 800ce8c:	b006d43a 	srli	r3,r22,16
 800ce90:	10c4b03a 	or	r2,r2,r3
 800ce94:	1440032e 	bgeu	r2,r17,800cea4 <__umoddi3+0x200>
 800ce98:	1405883a 	add	r2,r2,r16
 800ce9c:	14000136 	bltu	r2,r16,800cea4 <__umoddi3+0x200>
 800cea0:	1440e536 	bltu	r2,r17,800d238 <__umoddi3+0x594>
 800cea4:	1463c83a 	sub	r17,r2,r17
 800cea8:	8809883a 	mov	r4,r17
 800ceac:	a80b883a 	mov	r5,r21
 800ceb0:	800e4bc0 	call	800e4bc <__udivsi3>
 800ceb4:	8809883a 	mov	r4,r17
 800ceb8:	b8a3383a 	mul	r17,r23,r2
 800cebc:	a80b883a 	mov	r5,r21
 800cec0:	800e4c40 	call	800e4c4 <__umodsi3>
 800cec4:	1004943a 	slli	r2,r2,16
 800cec8:	b0ffffcc 	andi	r3,r22,65535
 800cecc:	10c4b03a 	or	r2,r2,r3
 800ced0:	1440042e 	bgeu	r2,r17,800cee4 <__umoddi3+0x240>
 800ced4:	1405883a 	add	r2,r2,r16
 800ced8:	14000236 	bltu	r2,r16,800cee4 <__umoddi3+0x240>
 800cedc:	1440012e 	bgeu	r2,r17,800cee4 <__umoddi3+0x240>
 800cee0:	1405883a 	add	r2,r2,r16
 800cee4:	1445c83a 	sub	r2,r2,r17
 800cee8:	1724d83a 	srl	r18,r2,fp
 800ceec:	0013883a 	mov	r9,zero
 800cef0:	9011883a 	mov	r8,r18
 800cef4:	003fa906 	br	800cd9c <__umoddi3+0xf8>
 800cef8:	00804034 	movhi	r2,256
 800cefc:	10bfffc4 	addi	r2,r2,-1
 800cf00:	1400b036 	bltu	r2,r16,800d1c4 <__umoddi3+0x520>
 800cf04:	01400404 	movi	r5,16
 800cf08:	2805883a 	mov	r2,r5
 800cf0c:	003f7c06 	br	800cd00 <__umoddi3+0x5c>
 800cf10:	01000044 	movi	r4,1
 800cf14:	000b883a 	mov	r5,zero
 800cf18:	800e4bc0 	call	800e4bc <__udivsi3>
 800cf1c:	1021883a 	mov	r16,r2
 800cf20:	00bfffd4 	movui	r2,65535
 800cf24:	143ff436 	bltu	r2,r16,800cef8 <__umoddi3+0x254>
 800cf28:	003f7106 	br	800ccf0 <__umoddi3+0x4c>
 800cf2c:	00804034 	movhi	r2,256
 800cf30:	10bfffc4 	addi	r2,r2,-1
 800cf34:	1180af36 	bltu	r2,r6,800d1f4 <__umoddi3+0x550>
 800cf38:	01400404 	movi	r5,16
 800cf3c:	2805883a 	mov	r2,r5
 800cf40:	003fbe06 	br	800ce3c <__umoddi3+0x198>
 800cf44:	00804034 	movhi	r2,256
 800cf48:	10bfffc4 	addi	r2,r2,-1
 800cf4c:	11c0ac36 	bltu	r2,r7,800d200 <__umoddi3+0x55c>
 800cf50:	01400404 	movi	r5,16
 800cf54:	2805883a 	mov	r2,r5
 800cf58:	003fa406 	br	800cdec <__umoddi3+0x148>
 800cf5c:	b409c83a 	sub	r4,r22,r16
 800cf60:	b105803a 	cmpltu	r2,r22,r4
 800cf64:	a187c83a 	sub	r3,r20,r6
 800cf68:	18a9c83a 	sub	r20,r3,r2
 800cf6c:	202d883a 	mov	r22,r4
 800cf70:	003fa906 	br	800ce18 <__umoddi3+0x174>
 800cf74:	85e0983a 	sll	r16,r16,r23
 800cf78:	35c5c83a 	sub	r2,r6,r23
 800cf7c:	a0a2d83a 	srl	r17,r20,r2
 800cf80:	802ad43a 	srli	r21,r16,16
 800cf84:	b084d83a 	srl	r2,r22,r2
 800cf88:	a5c6983a 	sll	r3,r20,r23
 800cf8c:	8809883a 	mov	r4,r17
 800cf90:	a80b883a 	mov	r5,r21
 800cf94:	1886b03a 	or	r3,r3,r2
 800cf98:	d8c00115 	stw	r3,4(sp)
 800cf9c:	853fffcc 	andi	r20,r16,65535
 800cfa0:	800e4bc0 	call	800e4bc <__udivsi3>
 800cfa4:	8809883a 	mov	r4,r17
 800cfa8:	a80b883a 	mov	r5,r21
 800cfac:	a0a3383a 	mul	r17,r20,r2
 800cfb0:	800e4c40 	call	800e4c4 <__umodsi3>
 800cfb4:	d9000117 	ldw	r4,4(sp)
 800cfb8:	1004943a 	slli	r2,r2,16
 800cfbc:	b839883a 	mov	fp,r23
 800cfc0:	2006d43a 	srli	r3,r4,16
 800cfc4:	10c4b03a 	or	r2,r2,r3
 800cfc8:	1440022e 	bgeu	r2,r17,800cfd4 <__umoddi3+0x330>
 800cfcc:	1405883a 	add	r2,r2,r16
 800cfd0:	1400962e 	bgeu	r2,r16,800d22c <__umoddi3+0x588>
 800cfd4:	1463c83a 	sub	r17,r2,r17
 800cfd8:	8809883a 	mov	r4,r17
 800cfdc:	a80b883a 	mov	r5,r21
 800cfe0:	800e4bc0 	call	800e4bc <__udivsi3>
 800cfe4:	8809883a 	mov	r4,r17
 800cfe8:	a80b883a 	mov	r5,r21
 800cfec:	a0a3383a 	mul	r17,r20,r2
 800cff0:	800e4c40 	call	800e4c4 <__umodsi3>
 800cff4:	d9400117 	ldw	r5,4(sp)
 800cff8:	1004943a 	slli	r2,r2,16
 800cffc:	28ffffcc 	andi	r3,r5,65535
 800d000:	10c4b03a 	or	r2,r2,r3
 800d004:	1440042e 	bgeu	r2,r17,800d018 <__umoddi3+0x374>
 800d008:	1405883a 	add	r2,r2,r16
 800d00c:	14000236 	bltu	r2,r16,800d018 <__umoddi3+0x374>
 800d010:	1440012e 	bgeu	r2,r17,800d018 <__umoddi3+0x374>
 800d014:	1405883a 	add	r2,r2,r16
 800d018:	b5ec983a 	sll	r22,r22,r23
 800d01c:	1463c83a 	sub	r17,r2,r17
 800d020:	003f4406 	br	800cd34 <__umoddi3+0x90>
 800d024:	3d4fc83a 	sub	r7,r7,r21
 800d028:	3546983a 	sll	r3,r6,r21
 800d02c:	81c4d83a 	srl	r2,r16,r7
 800d030:	a1e2d83a 	srl	r17,r20,r7
 800d034:	a54c983a 	sll	r6,r20,r21
 800d038:	18aeb03a 	or	r23,r3,r2
 800d03c:	b828d43a 	srli	r20,r23,16
 800d040:	b1c4d83a 	srl	r2,r22,r7
 800d044:	8809883a 	mov	r4,r17
 800d048:	a00b883a 	mov	r5,r20
 800d04c:	308cb03a 	or	r6,r6,r2
 800d050:	d9c00315 	stw	r7,12(sp)
 800d054:	d9800215 	stw	r6,8(sp)
 800d058:	800e4bc0 	call	800e4bc <__udivsi3>
 800d05c:	8809883a 	mov	r4,r17
 800d060:	a00b883a 	mov	r5,r20
 800d064:	1039883a 	mov	fp,r2
 800d068:	800e4c40 	call	800e4c4 <__umodsi3>
 800d06c:	b8ffffcc 	andi	r3,r23,65535
 800d070:	d8c00415 	stw	r3,16(sp)
 800d074:	d9000217 	ldw	r4,8(sp)
 800d078:	d9400417 	ldw	r5,16(sp)
 800d07c:	1004943a 	slli	r2,r2,16
 800d080:	2006d43a 	srli	r3,r4,16
 800d084:	8560983a 	sll	r16,r16,r21
 800d088:	2f23383a 	mul	r17,r5,fp
 800d08c:	10c4b03a 	or	r2,r2,r3
 800d090:	dc000015 	stw	r16,0(sp)
 800d094:	b56c983a 	sll	r22,r22,r21
 800d098:	1440032e 	bgeu	r2,r17,800d0a8 <__umoddi3+0x404>
 800d09c:	15c5883a 	add	r2,r2,r23
 800d0a0:	e73fffc4 	addi	fp,fp,-1
 800d0a4:	15c05d2e 	bgeu	r2,r23,800d21c <__umoddi3+0x578>
 800d0a8:	1463c83a 	sub	r17,r2,r17
 800d0ac:	8809883a 	mov	r4,r17
 800d0b0:	a00b883a 	mov	r5,r20
 800d0b4:	800e4bc0 	call	800e4bc <__udivsi3>
 800d0b8:	8809883a 	mov	r4,r17
 800d0bc:	a00b883a 	mov	r5,r20
 800d0c0:	1021883a 	mov	r16,r2
 800d0c4:	800e4c40 	call	800e4c4 <__umodsi3>
 800d0c8:	d8c00417 	ldw	r3,16(sp)
 800d0cc:	d9000217 	ldw	r4,8(sp)
 800d0d0:	1004943a 	slli	r2,r2,16
 800d0d4:	1c23383a 	mul	r17,r3,r16
 800d0d8:	20ffffcc 	andi	r3,r4,65535
 800d0dc:	10ceb03a 	or	r7,r2,r3
 800d0e0:	3c40032e 	bgeu	r7,r17,800d0f0 <__umoddi3+0x44c>
 800d0e4:	3dcf883a 	add	r7,r7,r23
 800d0e8:	843fffc4 	addi	r16,r16,-1
 800d0ec:	3dc0472e 	bgeu	r7,r23,800d20c <__umoddi3+0x568>
 800d0f0:	e004943a 	slli	r2,fp,16
 800d0f4:	d9400017 	ldw	r5,0(sp)
 800d0f8:	3c4fc83a 	sub	r7,r7,r17
 800d0fc:	8084b03a 	or	r2,r16,r2
 800d100:	28ffffcc 	andi	r3,r5,65535
 800d104:	280cd43a 	srli	r6,r5,16
 800d108:	100ad43a 	srli	r5,r2,16
 800d10c:	10bfffcc 	andi	r2,r2,65535
 800d110:	10d1383a 	mul	r8,r2,r3
 800d114:	28c7383a 	mul	r3,r5,r3
 800d118:	1185383a 	mul	r2,r2,r6
 800d11c:	4008d43a 	srli	r4,r8,16
 800d120:	298b383a 	mul	r5,r5,r6
 800d124:	10c5883a 	add	r2,r2,r3
 800d128:	2089883a 	add	r4,r4,r2
 800d12c:	20c0022e 	bgeu	r4,r3,800d138 <__umoddi3+0x494>
 800d130:	00800074 	movhi	r2,1
 800d134:	288b883a 	add	r5,r5,r2
 800d138:	2004d43a 	srli	r2,r4,16
 800d13c:	2008943a 	slli	r4,r4,16
 800d140:	40ffffcc 	andi	r3,r8,65535
 800d144:	288b883a 	add	r5,r5,r2
 800d148:	20c9883a 	add	r4,r4,r3
 800d14c:	39400b36 	bltu	r7,r5,800d17c <__umoddi3+0x4d8>
 800d150:	39403d26 	beq	r7,r5,800d248 <__umoddi3+0x5a4>
 800d154:	394bc83a 	sub	r5,r7,r5
 800d158:	00000f06 	br	800d198 <__umoddi3+0x4f4>
 800d15c:	30c5c83a 	sub	r2,r6,r3
 800d160:	1839883a 	mov	fp,r3
 800d164:	b084d83a 	srl	r2,r22,r2
 800d168:	a0c6983a 	sll	r3,r20,r3
 800d16c:	8720983a 	sll	r16,r16,fp
 800d170:	b72c983a 	sll	r22,r22,fp
 800d174:	18a8b03a 	or	r20,r3,r2
 800d178:	003f3a06 	br	800ce64 <__umoddi3+0x1c0>
 800d17c:	d8c00017 	ldw	r3,0(sp)
 800d180:	20c5c83a 	sub	r2,r4,r3
 800d184:	2089803a 	cmpltu	r4,r4,r2
 800d188:	2dc7c83a 	sub	r3,r5,r23
 800d18c:	1907c83a 	sub	r3,r3,r4
 800d190:	38cbc83a 	sub	r5,r7,r3
 800d194:	1009883a 	mov	r4,r2
 800d198:	b105c83a 	sub	r2,r22,r4
 800d19c:	b087803a 	cmpltu	r3,r22,r2
 800d1a0:	28c7c83a 	sub	r3,r5,r3
 800d1a4:	d9400317 	ldw	r5,12(sp)
 800d1a8:	1544d83a 	srl	r2,r2,r21
 800d1ac:	1948983a 	sll	r4,r3,r5
 800d1b0:	1d46d83a 	srl	r3,r3,r21
 800d1b4:	20a4b03a 	or	r18,r4,r2
 800d1b8:	9011883a 	mov	r8,r18
 800d1bc:	1813883a 	mov	r9,r3
 800d1c0:	003ef606 	br	800cd9c <__umoddi3+0xf8>
 800d1c4:	01400604 	movi	r5,24
 800d1c8:	2805883a 	mov	r2,r5
 800d1cc:	003ecc06 	br	800cd00 <__umoddi3+0x5c>
 800d1d0:	01400204 	movi	r5,8
 800d1d4:	2805883a 	mov	r2,r5
 800d1d8:	003ec906 	br	800cd00 <__umoddi3+0x5c>
 800d1dc:	01400204 	movi	r5,8
 800d1e0:	2805883a 	mov	r2,r5
 800d1e4:	003f0106 	br	800cdec <__umoddi3+0x148>
 800d1e8:	01400204 	movi	r5,8
 800d1ec:	2805883a 	mov	r2,r5
 800d1f0:	003f1206 	br	800ce3c <__umoddi3+0x198>
 800d1f4:	01400604 	movi	r5,24
 800d1f8:	2805883a 	mov	r2,r5
 800d1fc:	003f0f06 	br	800ce3c <__umoddi3+0x198>
 800d200:	01400604 	movi	r5,24
 800d204:	2805883a 	mov	r2,r5
 800d208:	003ef806 	br	800cdec <__umoddi3+0x148>
 800d20c:	3c7fb82e 	bgeu	r7,r17,800d0f0 <__umoddi3+0x44c>
 800d210:	843fffc4 	addi	r16,r16,-1
 800d214:	3dcf883a 	add	r7,r7,r23
 800d218:	003fb506 	br	800d0f0 <__umoddi3+0x44c>
 800d21c:	147fa22e 	bgeu	r2,r17,800d0a8 <__umoddi3+0x404>
 800d220:	e73fffc4 	addi	fp,fp,-1
 800d224:	15c5883a 	add	r2,r2,r23
 800d228:	003f9f06 	br	800d0a8 <__umoddi3+0x404>
 800d22c:	147f692e 	bgeu	r2,r17,800cfd4 <__umoddi3+0x330>
 800d230:	1405883a 	add	r2,r2,r16
 800d234:	003f6706 	br	800cfd4 <__umoddi3+0x330>
 800d238:	1405883a 	add	r2,r2,r16
 800d23c:	003f1906 	br	800cea4 <__umoddi3+0x200>
 800d240:	1405883a 	add	r2,r2,r16
 800d244:	003ec906 	br	800cd6c <__umoddi3+0xc8>
 800d248:	b13fcc36 	bltu	r22,r4,800d17c <__umoddi3+0x4d8>
 800d24c:	000b883a 	mov	r5,zero
 800d250:	003fd106 	br	800d198 <__umoddi3+0x4f4>

0800d254 <_fpadd_parts>:
 800d254:	defff804 	addi	sp,sp,-32
 800d258:	dcc00315 	stw	r19,12(sp)
 800d25c:	2027883a 	mov	r19,r4
 800d260:	21000017 	ldw	r4,0(r4)
 800d264:	00c00044 	movi	r3,1
 800d268:	dd400515 	stw	r21,20(sp)
 800d26c:	dd000415 	stw	r20,16(sp)
 800d270:	ddc00715 	stw	r23,28(sp)
 800d274:	dd800615 	stw	r22,24(sp)
 800d278:	dc800215 	stw	r18,8(sp)
 800d27c:	dc400115 	stw	r17,4(sp)
 800d280:	dc000015 	stw	r16,0(sp)
 800d284:	282b883a 	mov	r21,r5
 800d288:	3029883a 	mov	r20,r6
 800d28c:	1900632e 	bgeu	r3,r4,800d41c <_fpadd_parts+0x1c8>
 800d290:	28800017 	ldw	r2,0(r5)
 800d294:	1880812e 	bgeu	r3,r2,800d49c <_fpadd_parts+0x248>
 800d298:	00c00104 	movi	r3,4
 800d29c:	20c0dc26 	beq	r4,r3,800d610 <_fpadd_parts+0x3bc>
 800d2a0:	10c07e26 	beq	r2,r3,800d49c <_fpadd_parts+0x248>
 800d2a4:	00c00084 	movi	r3,2
 800d2a8:	10c06726 	beq	r2,r3,800d448 <_fpadd_parts+0x1f4>
 800d2ac:	20c07b26 	beq	r4,r3,800d49c <_fpadd_parts+0x248>
 800d2b0:	9dc00217 	ldw	r23,8(r19)
 800d2b4:	28c00217 	ldw	r3,8(r5)
 800d2b8:	9c400317 	ldw	r17,12(r19)
 800d2bc:	2bc00317 	ldw	r15,12(r5)
 800d2c0:	b8cdc83a 	sub	r6,r23,r3
 800d2c4:	9c800417 	ldw	r18,16(r19)
 800d2c8:	2c000417 	ldw	r16,16(r5)
 800d2cc:	3009883a 	mov	r4,r6
 800d2d0:	30009716 	blt	r6,zero,800d530 <_fpadd_parts+0x2dc>
 800d2d4:	00800fc4 	movi	r2,63
 800d2d8:	11806b16 	blt	r2,r6,800d488 <_fpadd_parts+0x234>
 800d2dc:	0100a40e 	bge	zero,r4,800d570 <_fpadd_parts+0x31c>
 800d2e0:	35bff804 	addi	r22,r6,-32
 800d2e4:	b000bc16 	blt	r22,zero,800d5d8 <_fpadd_parts+0x384>
 800d2e8:	8596d83a 	srl	r11,r16,r22
 800d2ec:	0019883a 	mov	r12,zero
 800d2f0:	0013883a 	mov	r9,zero
 800d2f4:	01000044 	movi	r4,1
 800d2f8:	0015883a 	mov	r10,zero
 800d2fc:	b000be16 	blt	r22,zero,800d5f8 <_fpadd_parts+0x3a4>
 800d300:	2590983a 	sll	r8,r4,r22
 800d304:	000f883a 	mov	r7,zero
 800d308:	00bfffc4 	movi	r2,-1
 800d30c:	3889883a 	add	r4,r7,r2
 800d310:	408b883a 	add	r5,r8,r2
 800d314:	21cd803a 	cmpltu	r6,r4,r7
 800d318:	314b883a 	add	r5,r6,r5
 800d31c:	7904703a 	and	r2,r15,r4
 800d320:	8146703a 	and	r3,r16,r5
 800d324:	10c4b03a 	or	r2,r2,r3
 800d328:	10000226 	beq	r2,zero,800d334 <_fpadd_parts+0xe0>
 800d32c:	02400044 	movi	r9,1
 800d330:	0015883a 	mov	r10,zero
 800d334:	5a5eb03a 	or	r15,r11,r9
 800d338:	62a0b03a 	or	r16,r12,r10
 800d33c:	99400117 	ldw	r5,4(r19)
 800d340:	a8800117 	ldw	r2,4(r21)
 800d344:	28806e26 	beq	r5,r2,800d500 <_fpadd_parts+0x2ac>
 800d348:	28006626 	beq	r5,zero,800d4e4 <_fpadd_parts+0x290>
 800d34c:	7c45c83a 	sub	r2,r15,r17
 800d350:	7889803a 	cmpltu	r4,r15,r2
 800d354:	8487c83a 	sub	r3,r16,r18
 800d358:	1909c83a 	sub	r4,r3,r4
 800d35c:	100d883a 	mov	r6,r2
 800d360:	200f883a 	mov	r7,r4
 800d364:	38007716 	blt	r7,zero,800d544 <_fpadd_parts+0x2f0>
 800d368:	a5c00215 	stw	r23,8(r20)
 800d36c:	a1c00415 	stw	r7,16(r20)
 800d370:	a0000115 	stw	zero,4(r20)
 800d374:	a1800315 	stw	r6,12(r20)
 800d378:	a2000317 	ldw	r8,12(r20)
 800d37c:	a2400417 	ldw	r9,16(r20)
 800d380:	00bfffc4 	movi	r2,-1
 800d384:	408b883a 	add	r5,r8,r2
 800d388:	2a09803a 	cmpltu	r4,r5,r8
 800d38c:	488d883a 	add	r6,r9,r2
 800d390:	01c40034 	movhi	r7,4096
 800d394:	39ffffc4 	addi	r7,r7,-1
 800d398:	218d883a 	add	r6,r4,r6
 800d39c:	39801736 	bltu	r7,r6,800d3fc <_fpadd_parts+0x1a8>
 800d3a0:	31c06526 	beq	r6,r7,800d538 <_fpadd_parts+0x2e4>
 800d3a4:	a3000217 	ldw	r12,8(r20)
 800d3a8:	4209883a 	add	r4,r8,r8
 800d3ac:	00bfffc4 	movi	r2,-1
 800d3b0:	220f803a 	cmpltu	r7,r4,r8
 800d3b4:	4a4b883a 	add	r5,r9,r9
 800d3b8:	394f883a 	add	r7,r7,r5
 800d3bc:	2095883a 	add	r10,r4,r2
 800d3c0:	3897883a 	add	r11,r7,r2
 800d3c4:	510d803a 	cmpltu	r6,r10,r4
 800d3c8:	6099883a 	add	r12,r12,r2
 800d3cc:	32d7883a 	add	r11,r6,r11
 800d3d0:	00840034 	movhi	r2,4096
 800d3d4:	10bfffc4 	addi	r2,r2,-1
 800d3d8:	2011883a 	mov	r8,r4
 800d3dc:	3813883a 	mov	r9,r7
 800d3e0:	a1000315 	stw	r4,12(r20)
 800d3e4:	a1c00415 	stw	r7,16(r20)
 800d3e8:	a3000215 	stw	r12,8(r20)
 800d3ec:	12c00336 	bltu	r2,r11,800d3fc <_fpadd_parts+0x1a8>
 800d3f0:	58bfed1e 	bne	r11,r2,800d3a8 <_fpadd_parts+0x154>
 800d3f4:	00bfff84 	movi	r2,-2
 800d3f8:	12bfeb2e 	bgeu	r2,r10,800d3a8 <_fpadd_parts+0x154>
 800d3fc:	a2800417 	ldw	r10,16(r20)
 800d400:	008000c4 	movi	r2,3
 800d404:	00c80034 	movhi	r3,8192
 800d408:	18ffffc4 	addi	r3,r3,-1
 800d40c:	a2400317 	ldw	r9,12(r20)
 800d410:	a0800015 	stw	r2,0(r20)
 800d414:	1a802336 	bltu	r3,r10,800d4a4 <_fpadd_parts+0x250>
 800d418:	a027883a 	mov	r19,r20
 800d41c:	9805883a 	mov	r2,r19
 800d420:	ddc00717 	ldw	r23,28(sp)
 800d424:	dd800617 	ldw	r22,24(sp)
 800d428:	dd400517 	ldw	r21,20(sp)
 800d42c:	dd000417 	ldw	r20,16(sp)
 800d430:	dcc00317 	ldw	r19,12(sp)
 800d434:	dc800217 	ldw	r18,8(sp)
 800d438:	dc400117 	ldw	r17,4(sp)
 800d43c:	dc000017 	ldw	r16,0(sp)
 800d440:	dec00804 	addi	sp,sp,32
 800d444:	f800283a 	ret
 800d448:	20fff41e 	bne	r4,r3,800d41c <_fpadd_parts+0x1c8>
 800d44c:	31000015 	stw	r4,0(r6)
 800d450:	98800117 	ldw	r2,4(r19)
 800d454:	30800115 	stw	r2,4(r6)
 800d458:	98c00217 	ldw	r3,8(r19)
 800d45c:	30c00215 	stw	r3,8(r6)
 800d460:	98800317 	ldw	r2,12(r19)
 800d464:	30800315 	stw	r2,12(r6)
 800d468:	98c00417 	ldw	r3,16(r19)
 800d46c:	30c00415 	stw	r3,16(r6)
 800d470:	98800117 	ldw	r2,4(r19)
 800d474:	28c00117 	ldw	r3,4(r5)
 800d478:	3027883a 	mov	r19,r6
 800d47c:	10c4703a 	and	r2,r2,r3
 800d480:	30800115 	stw	r2,4(r6)
 800d484:	003fe506 	br	800d41c <_fpadd_parts+0x1c8>
 800d488:	1dc02616 	blt	r3,r23,800d524 <_fpadd_parts+0x2d0>
 800d48c:	0023883a 	mov	r17,zero
 800d490:	182f883a 	mov	r23,r3
 800d494:	0025883a 	mov	r18,zero
 800d498:	003fa806 	br	800d33c <_fpadd_parts+0xe8>
 800d49c:	a827883a 	mov	r19,r21
 800d4a0:	003fde06 	br	800d41c <_fpadd_parts+0x1c8>
 800d4a4:	01800044 	movi	r6,1
 800d4a8:	500497fa 	slli	r2,r10,31
 800d4ac:	4808d07a 	srli	r4,r9,1
 800d4b0:	518ad83a 	srl	r5,r10,r6
 800d4b4:	a2000217 	ldw	r8,8(r20)
 800d4b8:	1108b03a 	or	r4,r2,r4
 800d4bc:	0007883a 	mov	r3,zero
 800d4c0:	4984703a 	and	r2,r9,r6
 800d4c4:	208cb03a 	or	r6,r4,r2
 800d4c8:	28ceb03a 	or	r7,r5,r3
 800d4cc:	42000044 	addi	r8,r8,1
 800d4d0:	a027883a 	mov	r19,r20
 800d4d4:	a1c00415 	stw	r7,16(r20)
 800d4d8:	a2000215 	stw	r8,8(r20)
 800d4dc:	a1800315 	stw	r6,12(r20)
 800d4e0:	003fce06 	br	800d41c <_fpadd_parts+0x1c8>
 800d4e4:	8bc5c83a 	sub	r2,r17,r15
 800d4e8:	8889803a 	cmpltu	r4,r17,r2
 800d4ec:	9407c83a 	sub	r3,r18,r16
 800d4f0:	1909c83a 	sub	r4,r3,r4
 800d4f4:	100d883a 	mov	r6,r2
 800d4f8:	200f883a 	mov	r7,r4
 800d4fc:	003f9906 	br	800d364 <_fpadd_parts+0x110>
 800d500:	7c45883a 	add	r2,r15,r17
 800d504:	13c9803a 	cmpltu	r4,r2,r15
 800d508:	8487883a 	add	r3,r16,r18
 800d50c:	20c9883a 	add	r4,r4,r3
 800d510:	a1400115 	stw	r5,4(r20)
 800d514:	a5c00215 	stw	r23,8(r20)
 800d518:	a0800315 	stw	r2,12(r20)
 800d51c:	a1000415 	stw	r4,16(r20)
 800d520:	003fb606 	br	800d3fc <_fpadd_parts+0x1a8>
 800d524:	001f883a 	mov	r15,zero
 800d528:	0021883a 	mov	r16,zero
 800d52c:	003f8306 	br	800d33c <_fpadd_parts+0xe8>
 800d530:	018dc83a 	sub	r6,zero,r6
 800d534:	003f6706 	br	800d2d4 <_fpadd_parts+0x80>
 800d538:	00bfff84 	movi	r2,-2
 800d53c:	117faf36 	bltu	r2,r5,800d3fc <_fpadd_parts+0x1a8>
 800d540:	003f9806 	br	800d3a4 <_fpadd_parts+0x150>
 800d544:	0005883a 	mov	r2,zero
 800d548:	1189c83a 	sub	r4,r2,r6
 800d54c:	1105803a 	cmpltu	r2,r2,r4
 800d550:	01cbc83a 	sub	r5,zero,r7
 800d554:	2885c83a 	sub	r2,r5,r2
 800d558:	01800044 	movi	r6,1
 800d55c:	a1800115 	stw	r6,4(r20)
 800d560:	a5c00215 	stw	r23,8(r20)
 800d564:	a1000315 	stw	r4,12(r20)
 800d568:	a0800415 	stw	r2,16(r20)
 800d56c:	003f8206 	br	800d378 <_fpadd_parts+0x124>
 800d570:	203f7226 	beq	r4,zero,800d33c <_fpadd_parts+0xe8>
 800d574:	35bff804 	addi	r22,r6,-32
 800d578:	b9af883a 	add	r23,r23,r6
 800d57c:	b0003116 	blt	r22,zero,800d644 <_fpadd_parts+0x3f0>
 800d580:	959ad83a 	srl	r13,r18,r22
 800d584:	001d883a 	mov	r14,zero
 800d588:	000f883a 	mov	r7,zero
 800d58c:	01000044 	movi	r4,1
 800d590:	0011883a 	mov	r8,zero
 800d594:	b0002516 	blt	r22,zero,800d62c <_fpadd_parts+0x3d8>
 800d598:	2594983a 	sll	r10,r4,r22
 800d59c:	0013883a 	mov	r9,zero
 800d5a0:	00bfffc4 	movi	r2,-1
 800d5a4:	4889883a 	add	r4,r9,r2
 800d5a8:	508b883a 	add	r5,r10,r2
 800d5ac:	224d803a 	cmpltu	r6,r4,r9
 800d5b0:	314b883a 	add	r5,r6,r5
 800d5b4:	8904703a 	and	r2,r17,r4
 800d5b8:	9146703a 	and	r3,r18,r5
 800d5bc:	10c4b03a 	or	r2,r2,r3
 800d5c0:	10000226 	beq	r2,zero,800d5cc <_fpadd_parts+0x378>
 800d5c4:	01c00044 	movi	r7,1
 800d5c8:	0011883a 	mov	r8,zero
 800d5cc:	69e2b03a 	or	r17,r13,r7
 800d5d0:	7224b03a 	or	r18,r14,r8
 800d5d4:	003f5906 	br	800d33c <_fpadd_parts+0xe8>
 800d5d8:	8407883a 	add	r3,r16,r16
 800d5dc:	008007c4 	movi	r2,31
 800d5e0:	1185c83a 	sub	r2,r2,r6
 800d5e4:	1886983a 	sll	r3,r3,r2
 800d5e8:	7996d83a 	srl	r11,r15,r6
 800d5ec:	8198d83a 	srl	r12,r16,r6
 800d5f0:	1ad6b03a 	or	r11,r3,r11
 800d5f4:	003f3e06 	br	800d2f0 <_fpadd_parts+0x9c>
 800d5f8:	2006d07a 	srli	r3,r4,1
 800d5fc:	008007c4 	movi	r2,31
 800d600:	1185c83a 	sub	r2,r2,r6
 800d604:	1890d83a 	srl	r8,r3,r2
 800d608:	218e983a 	sll	r7,r4,r6
 800d60c:	003f3e06 	br	800d308 <_fpadd_parts+0xb4>
 800d610:	113f821e 	bne	r2,r4,800d41c <_fpadd_parts+0x1c8>
 800d614:	28c00117 	ldw	r3,4(r5)
 800d618:	98800117 	ldw	r2,4(r19)
 800d61c:	10ff7f26 	beq	r2,r3,800d41c <_fpadd_parts+0x1c8>
 800d620:	04c20074 	movhi	r19,2049
 800d624:	9cddb704 	addi	r19,r19,30428
 800d628:	003f7c06 	br	800d41c <_fpadd_parts+0x1c8>
 800d62c:	2006d07a 	srli	r3,r4,1
 800d630:	008007c4 	movi	r2,31
 800d634:	1185c83a 	sub	r2,r2,r6
 800d638:	1894d83a 	srl	r10,r3,r2
 800d63c:	2192983a 	sll	r9,r4,r6
 800d640:	003fd706 	br	800d5a0 <_fpadd_parts+0x34c>
 800d644:	9487883a 	add	r3,r18,r18
 800d648:	008007c4 	movi	r2,31
 800d64c:	1185c83a 	sub	r2,r2,r6
 800d650:	1886983a 	sll	r3,r3,r2
 800d654:	899ad83a 	srl	r13,r17,r6
 800d658:	919cd83a 	srl	r14,r18,r6
 800d65c:	1b5ab03a 	or	r13,r3,r13
 800d660:	003fc906 	br	800d588 <_fpadd_parts+0x334>

0800d664 <__subdf3>:
 800d664:	deffea04 	addi	sp,sp,-88
 800d668:	dcc01415 	stw	r19,80(sp)
 800d66c:	dcc00404 	addi	r19,sp,16
 800d670:	2011883a 	mov	r8,r4
 800d674:	2813883a 	mov	r9,r5
 800d678:	dc401315 	stw	r17,76(sp)
 800d67c:	d809883a 	mov	r4,sp
 800d680:	980b883a 	mov	r5,r19
 800d684:	dc400904 	addi	r17,sp,36
 800d688:	dfc01515 	stw	ra,84(sp)
 800d68c:	da400115 	stw	r9,4(sp)
 800d690:	d9c00315 	stw	r7,12(sp)
 800d694:	da000015 	stw	r8,0(sp)
 800d698:	d9800215 	stw	r6,8(sp)
 800d69c:	800e8f80 	call	800e8f8 <__unpack_d>
 800d6a0:	d9000204 	addi	r4,sp,8
 800d6a4:	880b883a 	mov	r5,r17
 800d6a8:	800e8f80 	call	800e8f8 <__unpack_d>
 800d6ac:	d8800a17 	ldw	r2,40(sp)
 800d6b0:	880b883a 	mov	r5,r17
 800d6b4:	9809883a 	mov	r4,r19
 800d6b8:	d9800e04 	addi	r6,sp,56
 800d6bc:	1080005c 	xori	r2,r2,1
 800d6c0:	d8800a15 	stw	r2,40(sp)
 800d6c4:	800d2540 	call	800d254 <_fpadd_parts>
 800d6c8:	1009883a 	mov	r4,r2
 800d6cc:	800e5e40 	call	800e5e4 <__pack_d>
 800d6d0:	dfc01517 	ldw	ra,84(sp)
 800d6d4:	dcc01417 	ldw	r19,80(sp)
 800d6d8:	dc401317 	ldw	r17,76(sp)
 800d6dc:	dec01604 	addi	sp,sp,88
 800d6e0:	f800283a 	ret

0800d6e4 <__adddf3>:
 800d6e4:	deffea04 	addi	sp,sp,-88
 800d6e8:	dcc01415 	stw	r19,80(sp)
 800d6ec:	dcc00404 	addi	r19,sp,16
 800d6f0:	2011883a 	mov	r8,r4
 800d6f4:	2813883a 	mov	r9,r5
 800d6f8:	dc401315 	stw	r17,76(sp)
 800d6fc:	d809883a 	mov	r4,sp
 800d700:	980b883a 	mov	r5,r19
 800d704:	dc400904 	addi	r17,sp,36
 800d708:	dfc01515 	stw	ra,84(sp)
 800d70c:	da400115 	stw	r9,4(sp)
 800d710:	d9c00315 	stw	r7,12(sp)
 800d714:	da000015 	stw	r8,0(sp)
 800d718:	d9800215 	stw	r6,8(sp)
 800d71c:	800e8f80 	call	800e8f8 <__unpack_d>
 800d720:	d9000204 	addi	r4,sp,8
 800d724:	880b883a 	mov	r5,r17
 800d728:	800e8f80 	call	800e8f8 <__unpack_d>
 800d72c:	d9800e04 	addi	r6,sp,56
 800d730:	9809883a 	mov	r4,r19
 800d734:	880b883a 	mov	r5,r17
 800d738:	800d2540 	call	800d254 <_fpadd_parts>
 800d73c:	1009883a 	mov	r4,r2
 800d740:	800e5e40 	call	800e5e4 <__pack_d>
 800d744:	dfc01517 	ldw	ra,84(sp)
 800d748:	dcc01417 	ldw	r19,80(sp)
 800d74c:	dc401317 	ldw	r17,76(sp)
 800d750:	dec01604 	addi	sp,sp,88
 800d754:	f800283a 	ret

0800d758 <__muldf3>:
 800d758:	deffe004 	addi	sp,sp,-128
 800d75c:	dc401815 	stw	r17,96(sp)
 800d760:	dc400404 	addi	r17,sp,16
 800d764:	2011883a 	mov	r8,r4
 800d768:	2813883a 	mov	r9,r5
 800d76c:	dc001715 	stw	r16,92(sp)
 800d770:	d809883a 	mov	r4,sp
 800d774:	880b883a 	mov	r5,r17
 800d778:	dc000904 	addi	r16,sp,36
 800d77c:	dfc01f15 	stw	ra,124(sp)
 800d780:	da400115 	stw	r9,4(sp)
 800d784:	d9c00315 	stw	r7,12(sp)
 800d788:	da000015 	stw	r8,0(sp)
 800d78c:	d9800215 	stw	r6,8(sp)
 800d790:	ddc01e15 	stw	r23,120(sp)
 800d794:	dd801d15 	stw	r22,116(sp)
 800d798:	dd401c15 	stw	r21,112(sp)
 800d79c:	dd001b15 	stw	r20,108(sp)
 800d7a0:	dcc01a15 	stw	r19,104(sp)
 800d7a4:	dc801915 	stw	r18,100(sp)
 800d7a8:	800e8f80 	call	800e8f8 <__unpack_d>
 800d7ac:	d9000204 	addi	r4,sp,8
 800d7b0:	800b883a 	mov	r5,r16
 800d7b4:	800e8f80 	call	800e8f8 <__unpack_d>
 800d7b8:	d9000417 	ldw	r4,16(sp)
 800d7bc:	00800044 	movi	r2,1
 800d7c0:	1100102e 	bgeu	r2,r4,800d804 <__muldf3+0xac>
 800d7c4:	d8c00917 	ldw	r3,36(sp)
 800d7c8:	10c0062e 	bgeu	r2,r3,800d7e4 <__muldf3+0x8c>
 800d7cc:	00800104 	movi	r2,4
 800d7d0:	20800a26 	beq	r4,r2,800d7fc <__muldf3+0xa4>
 800d7d4:	1880cc26 	beq	r3,r2,800db08 <__muldf3+0x3b0>
 800d7d8:	00800084 	movi	r2,2
 800d7dc:	20800926 	beq	r4,r2,800d804 <__muldf3+0xac>
 800d7e0:	1880191e 	bne	r3,r2,800d848 <__muldf3+0xf0>
 800d7e4:	d8c00a17 	ldw	r3,40(sp)
 800d7e8:	d8800517 	ldw	r2,20(sp)
 800d7ec:	8009883a 	mov	r4,r16
 800d7f0:	10c4c03a 	cmpne	r2,r2,r3
 800d7f4:	d8800a15 	stw	r2,40(sp)
 800d7f8:	00000706 	br	800d818 <__muldf3+0xc0>
 800d7fc:	00800084 	movi	r2,2
 800d800:	1880c326 	beq	r3,r2,800db10 <__muldf3+0x3b8>
 800d804:	d8800517 	ldw	r2,20(sp)
 800d808:	d8c00a17 	ldw	r3,40(sp)
 800d80c:	8809883a 	mov	r4,r17
 800d810:	10c4c03a 	cmpne	r2,r2,r3
 800d814:	d8800515 	stw	r2,20(sp)
 800d818:	800e5e40 	call	800e5e4 <__pack_d>
 800d81c:	dfc01f17 	ldw	ra,124(sp)
 800d820:	ddc01e17 	ldw	r23,120(sp)
 800d824:	dd801d17 	ldw	r22,116(sp)
 800d828:	dd401c17 	ldw	r21,112(sp)
 800d82c:	dd001b17 	ldw	r20,108(sp)
 800d830:	dcc01a17 	ldw	r19,104(sp)
 800d834:	dc801917 	ldw	r18,100(sp)
 800d838:	dc401817 	ldw	r17,96(sp)
 800d83c:	dc001717 	ldw	r16,92(sp)
 800d840:	dec02004 	addi	sp,sp,128
 800d844:	f800283a 	ret
 800d848:	dd800717 	ldw	r22,28(sp)
 800d84c:	dc800c17 	ldw	r18,48(sp)
 800d850:	002b883a 	mov	r21,zero
 800d854:	0023883a 	mov	r17,zero
 800d858:	a80b883a 	mov	r5,r21
 800d85c:	b00d883a 	mov	r6,r22
 800d860:	880f883a 	mov	r7,r17
 800d864:	ddc00817 	ldw	r23,32(sp)
 800d868:	dcc00d17 	ldw	r19,52(sp)
 800d86c:	9009883a 	mov	r4,r18
 800d870:	800e4cc0 	call	800e4cc <__muldi3>
 800d874:	001b883a 	mov	r13,zero
 800d878:	680f883a 	mov	r7,r13
 800d87c:	b009883a 	mov	r4,r22
 800d880:	000b883a 	mov	r5,zero
 800d884:	980d883a 	mov	r6,r19
 800d888:	b82d883a 	mov	r22,r23
 800d88c:	002f883a 	mov	r23,zero
 800d890:	db401615 	stw	r13,88(sp)
 800d894:	d8801315 	stw	r2,76(sp)
 800d898:	d8c01415 	stw	r3,80(sp)
 800d89c:	dcc01515 	stw	r19,84(sp)
 800d8a0:	800e4cc0 	call	800e4cc <__muldi3>
 800d8a4:	b00d883a 	mov	r6,r22
 800d8a8:	000b883a 	mov	r5,zero
 800d8ac:	9009883a 	mov	r4,r18
 800d8b0:	b80f883a 	mov	r7,r23
 800d8b4:	1021883a 	mov	r16,r2
 800d8b8:	1823883a 	mov	r17,r3
 800d8bc:	800e4cc0 	call	800e4cc <__muldi3>
 800d8c0:	8085883a 	add	r2,r16,r2
 800d8c4:	140d803a 	cmpltu	r6,r2,r16
 800d8c8:	88c7883a 	add	r3,r17,r3
 800d8cc:	30cd883a 	add	r6,r6,r3
 800d8d0:	1029883a 	mov	r20,r2
 800d8d4:	302b883a 	mov	r21,r6
 800d8d8:	da801317 	ldw	r10,76(sp)
 800d8dc:	dac01417 	ldw	r11,80(sp)
 800d8e0:	db001517 	ldw	r12,84(sp)
 800d8e4:	db401617 	ldw	r13,88(sp)
 800d8e8:	3440612e 	bgeu	r6,r17,800da70 <__muldf3+0x318>
 800d8ec:	0009883a 	mov	r4,zero
 800d8f0:	5105883a 	add	r2,r10,r4
 800d8f4:	128d803a 	cmpltu	r6,r2,r10
 800d8f8:	5d07883a 	add	r3,r11,r20
 800d8fc:	30cd883a 	add	r6,r6,r3
 800d900:	0021883a 	mov	r16,zero
 800d904:	04400044 	movi	r17,1
 800d908:	1025883a 	mov	r18,r2
 800d90c:	3027883a 	mov	r19,r6
 800d910:	32c06236 	bltu	r6,r11,800da9c <__muldf3+0x344>
 800d914:	59807a26 	beq	r11,r6,800db00 <__muldf3+0x3a8>
 800d918:	680b883a 	mov	r5,r13
 800d91c:	b80f883a 	mov	r7,r23
 800d920:	6009883a 	mov	r4,r12
 800d924:	b00d883a 	mov	r6,r22
 800d928:	800e4cc0 	call	800e4cc <__muldi3>
 800d92c:	1009883a 	mov	r4,r2
 800d930:	000f883a 	mov	r7,zero
 800d934:	1545883a 	add	r2,r2,r21
 800d938:	1111803a 	cmpltu	r8,r2,r4
 800d93c:	19c7883a 	add	r3,r3,r7
 800d940:	40c7883a 	add	r3,r8,r3
 800d944:	88cb883a 	add	r5,r17,r3
 800d948:	d8c00617 	ldw	r3,24(sp)
 800d94c:	8089883a 	add	r4,r16,r2
 800d950:	d8800b17 	ldw	r2,44(sp)
 800d954:	18c00104 	addi	r3,r3,4
 800d958:	240d803a 	cmpltu	r6,r4,r16
 800d95c:	10c7883a 	add	r3,r2,r3
 800d960:	2013883a 	mov	r9,r4
 800d964:	d8800a17 	ldw	r2,40(sp)
 800d968:	d9000517 	ldw	r4,20(sp)
 800d96c:	314d883a 	add	r6,r6,r5
 800d970:	3015883a 	mov	r10,r6
 800d974:	2088c03a 	cmpne	r4,r4,r2
 800d978:	00880034 	movhi	r2,8192
 800d97c:	10bfffc4 	addi	r2,r2,-1
 800d980:	d9000f15 	stw	r4,60(sp)
 800d984:	d8c01015 	stw	r3,64(sp)
 800d988:	1180162e 	bgeu	r2,r6,800d9e4 <__muldf3+0x28c>
 800d98c:	1811883a 	mov	r8,r3
 800d990:	101f883a 	mov	r15,r2
 800d994:	980497fa 	slli	r2,r19,31
 800d998:	9016d07a 	srli	r11,r18,1
 800d99c:	500697fa 	slli	r3,r10,31
 800d9a0:	480cd07a 	srli	r6,r9,1
 800d9a4:	500ed07a 	srli	r7,r10,1
 800d9a8:	12d6b03a 	or	r11,r2,r11
 800d9ac:	00800044 	movi	r2,1
 800d9b0:	198cb03a 	or	r6,r3,r6
 800d9b4:	4888703a 	and	r4,r9,r2
 800d9b8:	9818d07a 	srli	r12,r19,1
 800d9bc:	001b883a 	mov	r13,zero
 800d9c0:	03a00034 	movhi	r14,32768
 800d9c4:	3013883a 	mov	r9,r6
 800d9c8:	3815883a 	mov	r10,r7
 800d9cc:	4091883a 	add	r8,r8,r2
 800d9d0:	20000226 	beq	r4,zero,800d9dc <__muldf3+0x284>
 800d9d4:	5b64b03a 	or	r18,r11,r13
 800d9d8:	63a6b03a 	or	r19,r12,r14
 800d9dc:	7abfed36 	bltu	r15,r10,800d994 <__muldf3+0x23c>
 800d9e0:	da001015 	stw	r8,64(sp)
 800d9e4:	00840034 	movhi	r2,4096
 800d9e8:	10bfffc4 	addi	r2,r2,-1
 800d9ec:	12801436 	bltu	r2,r10,800da40 <__muldf3+0x2e8>
 800d9f0:	da001017 	ldw	r8,64(sp)
 800d9f4:	101f883a 	mov	r15,r2
 800d9f8:	4a45883a 	add	r2,r9,r9
 800d9fc:	124d803a 	cmpltu	r6,r2,r9
 800da00:	5287883a 	add	r3,r10,r10
 800da04:	9497883a 	add	r11,r18,r18
 800da08:	5c8f803a 	cmpltu	r7,r11,r18
 800da0c:	9cd9883a 	add	r12,r19,r19
 800da10:	01000044 	movi	r4,1
 800da14:	30cd883a 	add	r6,r6,r3
 800da18:	3b0f883a 	add	r7,r7,r12
 800da1c:	423fffc4 	addi	r8,r8,-1
 800da20:	1013883a 	mov	r9,r2
 800da24:	3015883a 	mov	r10,r6
 800da28:	111ab03a 	or	r13,r2,r4
 800da2c:	98003016 	blt	r19,zero,800daf0 <__muldf3+0x398>
 800da30:	5825883a 	mov	r18,r11
 800da34:	3827883a 	mov	r19,r7
 800da38:	7abfef2e 	bgeu	r15,r10,800d9f8 <__muldf3+0x2a0>
 800da3c:	da001015 	stw	r8,64(sp)
 800da40:	00803fc4 	movi	r2,255
 800da44:	488e703a 	and	r7,r9,r2
 800da48:	00802004 	movi	r2,128
 800da4c:	0007883a 	mov	r3,zero
 800da50:	0011883a 	mov	r8,zero
 800da54:	38801826 	beq	r7,r2,800dab8 <__muldf3+0x360>
 800da58:	008000c4 	movi	r2,3
 800da5c:	d9000e04 	addi	r4,sp,56
 800da60:	da801215 	stw	r10,72(sp)
 800da64:	d8800e15 	stw	r2,56(sp)
 800da68:	da401115 	stw	r9,68(sp)
 800da6c:	003f6a06 	br	800d818 <__muldf3+0xc0>
 800da70:	89802126 	beq	r17,r6,800daf8 <__muldf3+0x3a0>
 800da74:	0009883a 	mov	r4,zero
 800da78:	5105883a 	add	r2,r10,r4
 800da7c:	128d803a 	cmpltu	r6,r2,r10
 800da80:	5d07883a 	add	r3,r11,r20
 800da84:	30cd883a 	add	r6,r6,r3
 800da88:	0021883a 	mov	r16,zero
 800da8c:	0023883a 	mov	r17,zero
 800da90:	1025883a 	mov	r18,r2
 800da94:	3027883a 	mov	r19,r6
 800da98:	32ff9e2e 	bgeu	r6,r11,800d914 <__muldf3+0x1bc>
 800da9c:	00800044 	movi	r2,1
 800daa0:	8089883a 	add	r4,r16,r2
 800daa4:	240d803a 	cmpltu	r6,r4,r16
 800daa8:	344d883a 	add	r6,r6,r17
 800daac:	2021883a 	mov	r16,r4
 800dab0:	3023883a 	mov	r17,r6
 800dab4:	003f9806 	br	800d918 <__muldf3+0x1c0>
 800dab8:	403fe71e 	bne	r8,zero,800da58 <__muldf3+0x300>
 800dabc:	01004004 	movi	r4,256
 800dac0:	4904703a 	and	r2,r9,r4
 800dac4:	10c4b03a 	or	r2,r2,r3
 800dac8:	103fe31e 	bne	r2,zero,800da58 <__muldf3+0x300>
 800dacc:	94c4b03a 	or	r2,r18,r19
 800dad0:	103fe126 	beq	r2,zero,800da58 <__muldf3+0x300>
 800dad4:	49c5883a 	add	r2,r9,r7
 800dad8:	1251803a 	cmpltu	r8,r2,r9
 800dadc:	4291883a 	add	r8,r8,r10
 800dae0:	013fc004 	movi	r4,-256
 800dae4:	1112703a 	and	r9,r2,r4
 800dae8:	4015883a 	mov	r10,r8
 800daec:	003fda06 	br	800da58 <__muldf3+0x300>
 800daf0:	6813883a 	mov	r9,r13
 800daf4:	003fce06 	br	800da30 <__muldf3+0x2d8>
 800daf8:	143f7c36 	bltu	r2,r16,800d8ec <__muldf3+0x194>
 800dafc:	003fdd06 	br	800da74 <__muldf3+0x31c>
 800db00:	12bf852e 	bgeu	r2,r10,800d918 <__muldf3+0x1c0>
 800db04:	003fe506 	br	800da9c <__muldf3+0x344>
 800db08:	00800084 	movi	r2,2
 800db0c:	20bf351e 	bne	r4,r2,800d7e4 <__muldf3+0x8c>
 800db10:	01020074 	movhi	r4,2049
 800db14:	211db704 	addi	r4,r4,30428
 800db18:	003f3f06 	br	800d818 <__muldf3+0xc0>

0800db1c <__divdf3>:
 800db1c:	deffed04 	addi	sp,sp,-76
 800db20:	dcc01115 	stw	r19,68(sp)
 800db24:	dcc00404 	addi	r19,sp,16
 800db28:	2011883a 	mov	r8,r4
 800db2c:	2813883a 	mov	r9,r5
 800db30:	dc000e15 	stw	r16,56(sp)
 800db34:	d809883a 	mov	r4,sp
 800db38:	980b883a 	mov	r5,r19
 800db3c:	dc000904 	addi	r16,sp,36
 800db40:	dfc01215 	stw	ra,72(sp)
 800db44:	da400115 	stw	r9,4(sp)
 800db48:	d9c00315 	stw	r7,12(sp)
 800db4c:	da000015 	stw	r8,0(sp)
 800db50:	d9800215 	stw	r6,8(sp)
 800db54:	dc801015 	stw	r18,64(sp)
 800db58:	dc400f15 	stw	r17,60(sp)
 800db5c:	800e8f80 	call	800e8f8 <__unpack_d>
 800db60:	d9000204 	addi	r4,sp,8
 800db64:	800b883a 	mov	r5,r16
 800db68:	800e8f80 	call	800e8f8 <__unpack_d>
 800db6c:	d9000417 	ldw	r4,16(sp)
 800db70:	00800044 	movi	r2,1
 800db74:	11000b2e 	bgeu	r2,r4,800dba4 <__divdf3+0x88>
 800db78:	d9400917 	ldw	r5,36(sp)
 800db7c:	1140762e 	bgeu	r2,r5,800dd58 <__divdf3+0x23c>
 800db80:	d8800517 	ldw	r2,20(sp)
 800db84:	d8c00a17 	ldw	r3,40(sp)
 800db88:	01800104 	movi	r6,4
 800db8c:	10c4f03a 	xor	r2,r2,r3
 800db90:	d8800515 	stw	r2,20(sp)
 800db94:	21800226 	beq	r4,r6,800dba0 <__divdf3+0x84>
 800db98:	00800084 	movi	r2,2
 800db9c:	2080141e 	bne	r4,r2,800dbf0 <__divdf3+0xd4>
 800dba0:	29000926 	beq	r5,r4,800dbc8 <__divdf3+0xac>
 800dba4:	9809883a 	mov	r4,r19
 800dba8:	800e5e40 	call	800e5e4 <__pack_d>
 800dbac:	dfc01217 	ldw	ra,72(sp)
 800dbb0:	dcc01117 	ldw	r19,68(sp)
 800dbb4:	dc801017 	ldw	r18,64(sp)
 800dbb8:	dc400f17 	ldw	r17,60(sp)
 800dbbc:	dc000e17 	ldw	r16,56(sp)
 800dbc0:	dec01304 	addi	sp,sp,76
 800dbc4:	f800283a 	ret
 800dbc8:	01020074 	movhi	r4,2049
 800dbcc:	211db704 	addi	r4,r4,30428
 800dbd0:	800e5e40 	call	800e5e4 <__pack_d>
 800dbd4:	dfc01217 	ldw	ra,72(sp)
 800dbd8:	dcc01117 	ldw	r19,68(sp)
 800dbdc:	dc801017 	ldw	r18,64(sp)
 800dbe0:	dc400f17 	ldw	r17,60(sp)
 800dbe4:	dc000e17 	ldw	r16,56(sp)
 800dbe8:	dec01304 	addi	sp,sp,76
 800dbec:	f800283a 	ret
 800dbf0:	29805b26 	beq	r5,r6,800dd60 <__divdf3+0x244>
 800dbf4:	28802d26 	beq	r5,r2,800dcac <__divdf3+0x190>
 800dbf8:	d8c00617 	ldw	r3,24(sp)
 800dbfc:	d8800b17 	ldw	r2,44(sp)
 800dc00:	d9c00817 	ldw	r7,32(sp)
 800dc04:	dc400d17 	ldw	r17,52(sp)
 800dc08:	188bc83a 	sub	r5,r3,r2
 800dc0c:	d9800717 	ldw	r6,28(sp)
 800dc10:	dc000c17 	ldw	r16,48(sp)
 800dc14:	d9400615 	stw	r5,24(sp)
 800dc18:	3c403836 	bltu	r7,r17,800dcfc <__divdf3+0x1e0>
 800dc1c:	89c03626 	beq	r17,r7,800dcf8 <__divdf3+0x1dc>
 800dc20:	0015883a 	mov	r10,zero
 800dc24:	001d883a 	mov	r14,zero
 800dc28:	02c40034 	movhi	r11,4096
 800dc2c:	001f883a 	mov	r15,zero
 800dc30:	003f883a 	mov	ra,zero
 800dc34:	04800f44 	movi	r18,61
 800dc38:	00000f06 	br	800dc78 <__divdf3+0x15c>
 800dc3c:	601d883a 	mov	r14,r12
 800dc40:	681f883a 	mov	r15,r13
 800dc44:	400d883a 	mov	r6,r8
 800dc48:	100f883a 	mov	r7,r2
 800dc4c:	3191883a 	add	r8,r6,r6
 800dc50:	5808d07a 	srli	r4,r11,1
 800dc54:	4185803a 	cmpltu	r2,r8,r6
 800dc58:	39d3883a 	add	r9,r7,r7
 800dc5c:	28c6b03a 	or	r3,r5,r3
 800dc60:	1245883a 	add	r2,r2,r9
 800dc64:	1815883a 	mov	r10,r3
 800dc68:	2017883a 	mov	r11,r4
 800dc6c:	400d883a 	mov	r6,r8
 800dc70:	100f883a 	mov	r7,r2
 800dc74:	fc801726 	beq	ra,r18,800dcd4 <__divdf3+0x1b8>
 800dc78:	580a97fa 	slli	r5,r11,31
 800dc7c:	5006d07a 	srli	r3,r10,1
 800dc80:	ffc00044 	addi	ra,ra,1
 800dc84:	3c7ff136 	bltu	r7,r17,800dc4c <__divdf3+0x130>
 800dc88:	3411c83a 	sub	r8,r6,r16
 800dc8c:	3205803a 	cmpltu	r2,r6,r8
 800dc90:	3c53c83a 	sub	r9,r7,r17
 800dc94:	7298b03a 	or	r12,r14,r10
 800dc98:	7adab03a 	or	r13,r15,r11
 800dc9c:	4885c83a 	sub	r2,r9,r2
 800dca0:	89ffe61e 	bne	r17,r7,800dc3c <__divdf3+0x120>
 800dca4:	343fe936 	bltu	r6,r16,800dc4c <__divdf3+0x130>
 800dca8:	003fe406 	br	800dc3c <__divdf3+0x120>
 800dcac:	9809883a 	mov	r4,r19
 800dcb0:	d9800415 	stw	r6,16(sp)
 800dcb4:	800e5e40 	call	800e5e4 <__pack_d>
 800dcb8:	dfc01217 	ldw	ra,72(sp)
 800dcbc:	dcc01117 	ldw	r19,68(sp)
 800dcc0:	dc801017 	ldw	r18,64(sp)
 800dcc4:	dc400f17 	ldw	r17,60(sp)
 800dcc8:	dc000e17 	ldw	r16,56(sp)
 800dccc:	dec01304 	addi	sp,sp,76
 800dcd0:	f800283a 	ret
 800dcd4:	00803fc4 	movi	r2,255
 800dcd8:	7090703a 	and	r8,r14,r2
 800dcdc:	00802004 	movi	r2,128
 800dce0:	0007883a 	mov	r3,zero
 800dce4:	0013883a 	mov	r9,zero
 800dce8:	40800d26 	beq	r8,r2,800dd20 <__divdf3+0x204>
 800dcec:	dbc00815 	stw	r15,32(sp)
 800dcf0:	db800715 	stw	r14,28(sp)
 800dcf4:	003fab06 	br	800dba4 <__divdf3+0x88>
 800dcf8:	343fc92e 	bgeu	r6,r16,800dc20 <__divdf3+0x104>
 800dcfc:	3185883a 	add	r2,r6,r6
 800dd00:	1189803a 	cmpltu	r4,r2,r6
 800dd04:	39c7883a 	add	r3,r7,r7
 800dd08:	20c9883a 	add	r4,r4,r3
 800dd0c:	297fffc4 	addi	r5,r5,-1
 800dd10:	100d883a 	mov	r6,r2
 800dd14:	200f883a 	mov	r7,r4
 800dd18:	d9400615 	stw	r5,24(sp)
 800dd1c:	003fc006 	br	800dc20 <__divdf3+0x104>
 800dd20:	483ff21e 	bne	r9,zero,800dcec <__divdf3+0x1d0>
 800dd24:	01004004 	movi	r4,256
 800dd28:	7104703a 	and	r2,r14,r4
 800dd2c:	10c4b03a 	or	r2,r2,r3
 800dd30:	103fee1e 	bne	r2,zero,800dcec <__divdf3+0x1d0>
 800dd34:	31c4b03a 	or	r2,r6,r7
 800dd38:	103fec26 	beq	r2,zero,800dcec <__divdf3+0x1d0>
 800dd3c:	7205883a 	add	r2,r14,r8
 800dd40:	1391803a 	cmpltu	r8,r2,r14
 800dd44:	43d1883a 	add	r8,r8,r15
 800dd48:	013fc004 	movi	r4,-256
 800dd4c:	111c703a 	and	r14,r2,r4
 800dd50:	401f883a 	mov	r15,r8
 800dd54:	003fe506 	br	800dcec <__divdf3+0x1d0>
 800dd58:	8009883a 	mov	r4,r16
 800dd5c:	003f9206 	br	800dba8 <__divdf3+0x8c>
 800dd60:	9809883a 	mov	r4,r19
 800dd64:	d8000715 	stw	zero,28(sp)
 800dd68:	d8000815 	stw	zero,32(sp)
 800dd6c:	d8000615 	stw	zero,24(sp)
 800dd70:	003f8d06 	br	800dba8 <__divdf3+0x8c>

0800dd74 <__eqdf2>:
 800dd74:	deffef04 	addi	sp,sp,-68
 800dd78:	dc400f15 	stw	r17,60(sp)
 800dd7c:	dc400404 	addi	r17,sp,16
 800dd80:	2005883a 	mov	r2,r4
 800dd84:	2807883a 	mov	r3,r5
 800dd88:	dc000e15 	stw	r16,56(sp)
 800dd8c:	d809883a 	mov	r4,sp
 800dd90:	880b883a 	mov	r5,r17
 800dd94:	dc000904 	addi	r16,sp,36
 800dd98:	d8c00115 	stw	r3,4(sp)
 800dd9c:	d8800015 	stw	r2,0(sp)
 800dda0:	d9800215 	stw	r6,8(sp)
 800dda4:	dfc01015 	stw	ra,64(sp)
 800dda8:	d9c00315 	stw	r7,12(sp)
 800ddac:	800e8f80 	call	800e8f8 <__unpack_d>
 800ddb0:	d9000204 	addi	r4,sp,8
 800ddb4:	800b883a 	mov	r5,r16
 800ddb8:	800e8f80 	call	800e8f8 <__unpack_d>
 800ddbc:	d8800417 	ldw	r2,16(sp)
 800ddc0:	00c00044 	movi	r3,1
 800ddc4:	180d883a 	mov	r6,r3
 800ddc8:	1880062e 	bgeu	r3,r2,800dde4 <__eqdf2+0x70>
 800ddcc:	d8800917 	ldw	r2,36(sp)
 800ddd0:	8809883a 	mov	r4,r17
 800ddd4:	800b883a 	mov	r5,r16
 800ddd8:	1880022e 	bgeu	r3,r2,800dde4 <__eqdf2+0x70>
 800dddc:	800ea300 	call	800ea30 <__fpcmp_parts_d>
 800dde0:	100d883a 	mov	r6,r2
 800dde4:	3005883a 	mov	r2,r6
 800dde8:	dfc01017 	ldw	ra,64(sp)
 800ddec:	dc400f17 	ldw	r17,60(sp)
 800ddf0:	dc000e17 	ldw	r16,56(sp)
 800ddf4:	dec01104 	addi	sp,sp,68
 800ddf8:	f800283a 	ret

0800ddfc <__nedf2>:
 800ddfc:	deffef04 	addi	sp,sp,-68
 800de00:	dc400f15 	stw	r17,60(sp)
 800de04:	dc400404 	addi	r17,sp,16
 800de08:	2005883a 	mov	r2,r4
 800de0c:	2807883a 	mov	r3,r5
 800de10:	dc000e15 	stw	r16,56(sp)
 800de14:	d809883a 	mov	r4,sp
 800de18:	880b883a 	mov	r5,r17
 800de1c:	dc000904 	addi	r16,sp,36
 800de20:	d8c00115 	stw	r3,4(sp)
 800de24:	d8800015 	stw	r2,0(sp)
 800de28:	d9800215 	stw	r6,8(sp)
 800de2c:	dfc01015 	stw	ra,64(sp)
 800de30:	d9c00315 	stw	r7,12(sp)
 800de34:	800e8f80 	call	800e8f8 <__unpack_d>
 800de38:	d9000204 	addi	r4,sp,8
 800de3c:	800b883a 	mov	r5,r16
 800de40:	800e8f80 	call	800e8f8 <__unpack_d>
 800de44:	d8800417 	ldw	r2,16(sp)
 800de48:	00c00044 	movi	r3,1
 800de4c:	180d883a 	mov	r6,r3
 800de50:	1880062e 	bgeu	r3,r2,800de6c <__nedf2+0x70>
 800de54:	d8800917 	ldw	r2,36(sp)
 800de58:	8809883a 	mov	r4,r17
 800de5c:	800b883a 	mov	r5,r16
 800de60:	1880022e 	bgeu	r3,r2,800de6c <__nedf2+0x70>
 800de64:	800ea300 	call	800ea30 <__fpcmp_parts_d>
 800de68:	100d883a 	mov	r6,r2
 800de6c:	3005883a 	mov	r2,r6
 800de70:	dfc01017 	ldw	ra,64(sp)
 800de74:	dc400f17 	ldw	r17,60(sp)
 800de78:	dc000e17 	ldw	r16,56(sp)
 800de7c:	dec01104 	addi	sp,sp,68
 800de80:	f800283a 	ret

0800de84 <__gtdf2>:
 800de84:	deffef04 	addi	sp,sp,-68
 800de88:	dc400f15 	stw	r17,60(sp)
 800de8c:	dc400404 	addi	r17,sp,16
 800de90:	2005883a 	mov	r2,r4
 800de94:	2807883a 	mov	r3,r5
 800de98:	dc000e15 	stw	r16,56(sp)
 800de9c:	d809883a 	mov	r4,sp
 800dea0:	880b883a 	mov	r5,r17
 800dea4:	dc000904 	addi	r16,sp,36
 800dea8:	d8c00115 	stw	r3,4(sp)
 800deac:	d8800015 	stw	r2,0(sp)
 800deb0:	d9800215 	stw	r6,8(sp)
 800deb4:	dfc01015 	stw	ra,64(sp)
 800deb8:	d9c00315 	stw	r7,12(sp)
 800debc:	800e8f80 	call	800e8f8 <__unpack_d>
 800dec0:	d9000204 	addi	r4,sp,8
 800dec4:	800b883a 	mov	r5,r16
 800dec8:	800e8f80 	call	800e8f8 <__unpack_d>
 800decc:	d8800417 	ldw	r2,16(sp)
 800ded0:	00c00044 	movi	r3,1
 800ded4:	01bfffc4 	movi	r6,-1
 800ded8:	1880062e 	bgeu	r3,r2,800def4 <__gtdf2+0x70>
 800dedc:	d8800917 	ldw	r2,36(sp)
 800dee0:	8809883a 	mov	r4,r17
 800dee4:	800b883a 	mov	r5,r16
 800dee8:	1880022e 	bgeu	r3,r2,800def4 <__gtdf2+0x70>
 800deec:	800ea300 	call	800ea30 <__fpcmp_parts_d>
 800def0:	100d883a 	mov	r6,r2
 800def4:	3005883a 	mov	r2,r6
 800def8:	dfc01017 	ldw	ra,64(sp)
 800defc:	dc400f17 	ldw	r17,60(sp)
 800df00:	dc000e17 	ldw	r16,56(sp)
 800df04:	dec01104 	addi	sp,sp,68
 800df08:	f800283a 	ret

0800df0c <__gedf2>:
 800df0c:	deffef04 	addi	sp,sp,-68
 800df10:	dc400f15 	stw	r17,60(sp)
 800df14:	dc400404 	addi	r17,sp,16
 800df18:	2005883a 	mov	r2,r4
 800df1c:	2807883a 	mov	r3,r5
 800df20:	dc000e15 	stw	r16,56(sp)
 800df24:	d809883a 	mov	r4,sp
 800df28:	880b883a 	mov	r5,r17
 800df2c:	dc000904 	addi	r16,sp,36
 800df30:	d8c00115 	stw	r3,4(sp)
 800df34:	d8800015 	stw	r2,0(sp)
 800df38:	d9800215 	stw	r6,8(sp)
 800df3c:	dfc01015 	stw	ra,64(sp)
 800df40:	d9c00315 	stw	r7,12(sp)
 800df44:	800e8f80 	call	800e8f8 <__unpack_d>
 800df48:	d9000204 	addi	r4,sp,8
 800df4c:	800b883a 	mov	r5,r16
 800df50:	800e8f80 	call	800e8f8 <__unpack_d>
 800df54:	d8800417 	ldw	r2,16(sp)
 800df58:	00c00044 	movi	r3,1
 800df5c:	01bfffc4 	movi	r6,-1
 800df60:	1880062e 	bgeu	r3,r2,800df7c <__gedf2+0x70>
 800df64:	d8800917 	ldw	r2,36(sp)
 800df68:	8809883a 	mov	r4,r17
 800df6c:	800b883a 	mov	r5,r16
 800df70:	1880022e 	bgeu	r3,r2,800df7c <__gedf2+0x70>
 800df74:	800ea300 	call	800ea30 <__fpcmp_parts_d>
 800df78:	100d883a 	mov	r6,r2
 800df7c:	3005883a 	mov	r2,r6
 800df80:	dfc01017 	ldw	ra,64(sp)
 800df84:	dc400f17 	ldw	r17,60(sp)
 800df88:	dc000e17 	ldw	r16,56(sp)
 800df8c:	dec01104 	addi	sp,sp,68
 800df90:	f800283a 	ret

0800df94 <__ltdf2>:
 800df94:	deffef04 	addi	sp,sp,-68
 800df98:	dc400f15 	stw	r17,60(sp)
 800df9c:	dc400404 	addi	r17,sp,16
 800dfa0:	2005883a 	mov	r2,r4
 800dfa4:	2807883a 	mov	r3,r5
 800dfa8:	dc000e15 	stw	r16,56(sp)
 800dfac:	d809883a 	mov	r4,sp
 800dfb0:	880b883a 	mov	r5,r17
 800dfb4:	dc000904 	addi	r16,sp,36
 800dfb8:	d8c00115 	stw	r3,4(sp)
 800dfbc:	d8800015 	stw	r2,0(sp)
 800dfc0:	d9800215 	stw	r6,8(sp)
 800dfc4:	dfc01015 	stw	ra,64(sp)
 800dfc8:	d9c00315 	stw	r7,12(sp)
 800dfcc:	800e8f80 	call	800e8f8 <__unpack_d>
 800dfd0:	d9000204 	addi	r4,sp,8
 800dfd4:	800b883a 	mov	r5,r16
 800dfd8:	800e8f80 	call	800e8f8 <__unpack_d>
 800dfdc:	d8800417 	ldw	r2,16(sp)
 800dfe0:	00c00044 	movi	r3,1
 800dfe4:	180d883a 	mov	r6,r3
 800dfe8:	1880062e 	bgeu	r3,r2,800e004 <__ltdf2+0x70>
 800dfec:	d8800917 	ldw	r2,36(sp)
 800dff0:	8809883a 	mov	r4,r17
 800dff4:	800b883a 	mov	r5,r16
 800dff8:	1880022e 	bgeu	r3,r2,800e004 <__ltdf2+0x70>
 800dffc:	800ea300 	call	800ea30 <__fpcmp_parts_d>
 800e000:	100d883a 	mov	r6,r2
 800e004:	3005883a 	mov	r2,r6
 800e008:	dfc01017 	ldw	ra,64(sp)
 800e00c:	dc400f17 	ldw	r17,60(sp)
 800e010:	dc000e17 	ldw	r16,56(sp)
 800e014:	dec01104 	addi	sp,sp,68
 800e018:	f800283a 	ret

0800e01c <__floatsidf>:
 800e01c:	2006d7fa 	srli	r3,r4,31
 800e020:	defff604 	addi	sp,sp,-40
 800e024:	008000c4 	movi	r2,3
 800e028:	dfc00915 	stw	ra,36(sp)
 800e02c:	dcc00815 	stw	r19,32(sp)
 800e030:	dc800715 	stw	r18,28(sp)
 800e034:	dc400615 	stw	r17,24(sp)
 800e038:	dc000515 	stw	r16,20(sp)
 800e03c:	d8800015 	stw	r2,0(sp)
 800e040:	d8c00115 	stw	r3,4(sp)
 800e044:	20000f1e 	bne	r4,zero,800e084 <__floatsidf+0x68>
 800e048:	00800084 	movi	r2,2
 800e04c:	d8800015 	stw	r2,0(sp)
 800e050:	d809883a 	mov	r4,sp
 800e054:	800e5e40 	call	800e5e4 <__pack_d>
 800e058:	1009883a 	mov	r4,r2
 800e05c:	180b883a 	mov	r5,r3
 800e060:	2005883a 	mov	r2,r4
 800e064:	2807883a 	mov	r3,r5
 800e068:	dfc00917 	ldw	ra,36(sp)
 800e06c:	dcc00817 	ldw	r19,32(sp)
 800e070:	dc800717 	ldw	r18,28(sp)
 800e074:	dc400617 	ldw	r17,24(sp)
 800e078:	dc000517 	ldw	r16,20(sp)
 800e07c:	dec00a04 	addi	sp,sp,40
 800e080:	f800283a 	ret
 800e084:	00800f04 	movi	r2,60
 800e088:	1807003a 	cmpeq	r3,r3,zero
 800e08c:	d8800215 	stw	r2,8(sp)
 800e090:	18001126 	beq	r3,zero,800e0d8 <__floatsidf+0xbc>
 800e094:	0027883a 	mov	r19,zero
 800e098:	2025883a 	mov	r18,r4
 800e09c:	d9000315 	stw	r4,12(sp)
 800e0a0:	dcc00415 	stw	r19,16(sp)
 800e0a4:	800e5640 	call	800e564 <__clzsi2>
 800e0a8:	11000744 	addi	r4,r2,29
 800e0ac:	013fe80e 	bge	zero,r4,800e050 <__floatsidf+0x34>
 800e0b0:	10bfff44 	addi	r2,r2,-3
 800e0b4:	10000c16 	blt	r2,zero,800e0e8 <__floatsidf+0xcc>
 800e0b8:	90a2983a 	sll	r17,r18,r2
 800e0bc:	0021883a 	mov	r16,zero
 800e0c0:	d8800217 	ldw	r2,8(sp)
 800e0c4:	dc400415 	stw	r17,16(sp)
 800e0c8:	dc000315 	stw	r16,12(sp)
 800e0cc:	1105c83a 	sub	r2,r2,r4
 800e0d0:	d8800215 	stw	r2,8(sp)
 800e0d4:	003fde06 	br	800e050 <__floatsidf+0x34>
 800e0d8:	00a00034 	movhi	r2,32768
 800e0dc:	20800a26 	beq	r4,r2,800e108 <__floatsidf+0xec>
 800e0e0:	0109c83a 	sub	r4,zero,r4
 800e0e4:	003feb06 	br	800e094 <__floatsidf+0x78>
 800e0e8:	9006d07a 	srli	r3,r18,1
 800e0ec:	008007c4 	movi	r2,31
 800e0f0:	1105c83a 	sub	r2,r2,r4
 800e0f4:	1886d83a 	srl	r3,r3,r2
 800e0f8:	9922983a 	sll	r17,r19,r4
 800e0fc:	9120983a 	sll	r16,r18,r4
 800e100:	1c62b03a 	or	r17,r3,r17
 800e104:	003fee06 	br	800e0c0 <__floatsidf+0xa4>
 800e108:	0009883a 	mov	r4,zero
 800e10c:	01707834 	movhi	r5,49632
 800e110:	003fd306 	br	800e060 <__floatsidf+0x44>

0800e114 <__fixdfsi>:
 800e114:	defff804 	addi	sp,sp,-32
 800e118:	2005883a 	mov	r2,r4
 800e11c:	2807883a 	mov	r3,r5
 800e120:	d809883a 	mov	r4,sp
 800e124:	d9400204 	addi	r5,sp,8
 800e128:	d8c00115 	stw	r3,4(sp)
 800e12c:	d8800015 	stw	r2,0(sp)
 800e130:	dfc00715 	stw	ra,28(sp)
 800e134:	800e8f80 	call	800e8f8 <__unpack_d>
 800e138:	d8c00217 	ldw	r3,8(sp)
 800e13c:	00800084 	movi	r2,2
 800e140:	1880051e 	bne	r3,r2,800e158 <__fixdfsi+0x44>
 800e144:	0007883a 	mov	r3,zero
 800e148:	1805883a 	mov	r2,r3
 800e14c:	dfc00717 	ldw	ra,28(sp)
 800e150:	dec00804 	addi	sp,sp,32
 800e154:	f800283a 	ret
 800e158:	00800044 	movi	r2,1
 800e15c:	10fff92e 	bgeu	r2,r3,800e144 <__fixdfsi+0x30>
 800e160:	00800104 	movi	r2,4
 800e164:	18800426 	beq	r3,r2,800e178 <__fixdfsi+0x64>
 800e168:	d8c00417 	ldw	r3,16(sp)
 800e16c:	183ff516 	blt	r3,zero,800e144 <__fixdfsi+0x30>
 800e170:	00800784 	movi	r2,30
 800e174:	10c0080e 	bge	r2,r3,800e198 <__fixdfsi+0x84>
 800e178:	d8800317 	ldw	r2,12(sp)
 800e17c:	1000121e 	bne	r2,zero,800e1c8 <__fixdfsi+0xb4>
 800e180:	00e00034 	movhi	r3,32768
 800e184:	18ffffc4 	addi	r3,r3,-1
 800e188:	1805883a 	mov	r2,r3
 800e18c:	dfc00717 	ldw	ra,28(sp)
 800e190:	dec00804 	addi	sp,sp,32
 800e194:	f800283a 	ret
 800e198:	00800f04 	movi	r2,60
 800e19c:	10d1c83a 	sub	r8,r2,r3
 800e1a0:	40bff804 	addi	r2,r8,-32
 800e1a4:	d9800517 	ldw	r6,20(sp)
 800e1a8:	d9c00617 	ldw	r7,24(sp)
 800e1ac:	10000816 	blt	r2,zero,800e1d0 <__fixdfsi+0xbc>
 800e1b0:	3888d83a 	srl	r4,r7,r2
 800e1b4:	d8800317 	ldw	r2,12(sp)
 800e1b8:	2007883a 	mov	r3,r4
 800e1bc:	103fe226 	beq	r2,zero,800e148 <__fixdfsi+0x34>
 800e1c0:	0107c83a 	sub	r3,zero,r4
 800e1c4:	003fe006 	br	800e148 <__fixdfsi+0x34>
 800e1c8:	00e00034 	movhi	r3,32768
 800e1cc:	003fde06 	br	800e148 <__fixdfsi+0x34>
 800e1d0:	39c7883a 	add	r3,r7,r7
 800e1d4:	008007c4 	movi	r2,31
 800e1d8:	1205c83a 	sub	r2,r2,r8
 800e1dc:	1886983a 	sll	r3,r3,r2
 800e1e0:	3208d83a 	srl	r4,r6,r8
 800e1e4:	1908b03a 	or	r4,r3,r4
 800e1e8:	003ff206 	br	800e1b4 <__fixdfsi+0xa0>

0800e1ec <__floatunsidf>:
 800e1ec:	defff204 	addi	sp,sp,-56
 800e1f0:	dfc00d15 	stw	ra,52(sp)
 800e1f4:	ddc00c15 	stw	r23,48(sp)
 800e1f8:	dd800b15 	stw	r22,44(sp)
 800e1fc:	dd400a15 	stw	r21,40(sp)
 800e200:	dd000915 	stw	r20,36(sp)
 800e204:	dcc00815 	stw	r19,32(sp)
 800e208:	dc800715 	stw	r18,28(sp)
 800e20c:	dc400615 	stw	r17,24(sp)
 800e210:	dc000515 	stw	r16,20(sp)
 800e214:	d8000115 	stw	zero,4(sp)
 800e218:	20000f1e 	bne	r4,zero,800e258 <__floatunsidf+0x6c>
 800e21c:	00800084 	movi	r2,2
 800e220:	d8800015 	stw	r2,0(sp)
 800e224:	d809883a 	mov	r4,sp
 800e228:	800e5e40 	call	800e5e4 <__pack_d>
 800e22c:	dfc00d17 	ldw	ra,52(sp)
 800e230:	ddc00c17 	ldw	r23,48(sp)
 800e234:	dd800b17 	ldw	r22,44(sp)
 800e238:	dd400a17 	ldw	r21,40(sp)
 800e23c:	dd000917 	ldw	r20,36(sp)
 800e240:	dcc00817 	ldw	r19,32(sp)
 800e244:	dc800717 	ldw	r18,28(sp)
 800e248:	dc400617 	ldw	r17,24(sp)
 800e24c:	dc000517 	ldw	r16,20(sp)
 800e250:	dec00e04 	addi	sp,sp,56
 800e254:	f800283a 	ret
 800e258:	008000c4 	movi	r2,3
 800e25c:	00c00f04 	movi	r3,60
 800e260:	002f883a 	mov	r23,zero
 800e264:	202d883a 	mov	r22,r4
 800e268:	d8800015 	stw	r2,0(sp)
 800e26c:	d8c00215 	stw	r3,8(sp)
 800e270:	d9000315 	stw	r4,12(sp)
 800e274:	ddc00415 	stw	r23,16(sp)
 800e278:	800e5640 	call	800e564 <__clzsi2>
 800e27c:	12400744 	addi	r9,r2,29
 800e280:	48000b16 	blt	r9,zero,800e2b0 <__floatunsidf+0xc4>
 800e284:	483fe726 	beq	r9,zero,800e224 <__floatunsidf+0x38>
 800e288:	10bfff44 	addi	r2,r2,-3
 800e28c:	10002e16 	blt	r2,zero,800e348 <__floatunsidf+0x15c>
 800e290:	b0a2983a 	sll	r17,r22,r2
 800e294:	0021883a 	mov	r16,zero
 800e298:	d8800217 	ldw	r2,8(sp)
 800e29c:	dc400415 	stw	r17,16(sp)
 800e2a0:	dc000315 	stw	r16,12(sp)
 800e2a4:	1245c83a 	sub	r2,r2,r9
 800e2a8:	d8800215 	stw	r2,8(sp)
 800e2ac:	003fdd06 	br	800e224 <__floatunsidf+0x38>
 800e2b0:	0255c83a 	sub	r10,zero,r9
 800e2b4:	51bff804 	addi	r6,r10,-32
 800e2b8:	30001b16 	blt	r6,zero,800e328 <__floatunsidf+0x13c>
 800e2bc:	b9a8d83a 	srl	r20,r23,r6
 800e2c0:	002b883a 	mov	r21,zero
 800e2c4:	000f883a 	mov	r7,zero
 800e2c8:	01000044 	movi	r4,1
 800e2cc:	0011883a 	mov	r8,zero
 800e2d0:	30002516 	blt	r6,zero,800e368 <__floatunsidf+0x17c>
 800e2d4:	21a6983a 	sll	r19,r4,r6
 800e2d8:	0025883a 	mov	r18,zero
 800e2dc:	00bfffc4 	movi	r2,-1
 800e2e0:	9089883a 	add	r4,r18,r2
 800e2e4:	988b883a 	add	r5,r19,r2
 800e2e8:	248d803a 	cmpltu	r6,r4,r18
 800e2ec:	314b883a 	add	r5,r6,r5
 800e2f0:	b104703a 	and	r2,r22,r4
 800e2f4:	b946703a 	and	r3,r23,r5
 800e2f8:	10c4b03a 	or	r2,r2,r3
 800e2fc:	10000226 	beq	r2,zero,800e308 <__floatunsidf+0x11c>
 800e300:	01c00044 	movi	r7,1
 800e304:	0011883a 	mov	r8,zero
 800e308:	d9000217 	ldw	r4,8(sp)
 800e30c:	a1c4b03a 	or	r2,r20,r7
 800e310:	aa06b03a 	or	r3,r21,r8
 800e314:	2249c83a 	sub	r4,r4,r9
 800e318:	d8c00415 	stw	r3,16(sp)
 800e31c:	d9000215 	stw	r4,8(sp)
 800e320:	d8800315 	stw	r2,12(sp)
 800e324:	003fbf06 	br	800e224 <__floatunsidf+0x38>
 800e328:	bdc7883a 	add	r3,r23,r23
 800e32c:	008007c4 	movi	r2,31
 800e330:	1285c83a 	sub	r2,r2,r10
 800e334:	1886983a 	sll	r3,r3,r2
 800e338:	b2a8d83a 	srl	r20,r22,r10
 800e33c:	baaad83a 	srl	r21,r23,r10
 800e340:	1d28b03a 	or	r20,r3,r20
 800e344:	003fdf06 	br	800e2c4 <__floatunsidf+0xd8>
 800e348:	b006d07a 	srli	r3,r22,1
 800e34c:	008007c4 	movi	r2,31
 800e350:	1245c83a 	sub	r2,r2,r9
 800e354:	1886d83a 	srl	r3,r3,r2
 800e358:	ba62983a 	sll	r17,r23,r9
 800e35c:	b260983a 	sll	r16,r22,r9
 800e360:	1c62b03a 	or	r17,r3,r17
 800e364:	003fcc06 	br	800e298 <__floatunsidf+0xac>
 800e368:	2006d07a 	srli	r3,r4,1
 800e36c:	008007c4 	movi	r2,31
 800e370:	1285c83a 	sub	r2,r2,r10
 800e374:	18a6d83a 	srl	r19,r3,r2
 800e378:	22a4983a 	sll	r18,r4,r10
 800e37c:	003fd706 	br	800e2dc <__floatunsidf+0xf0>

0800e380 <udivmodsi4>:
 800e380:	29001b2e 	bgeu	r5,r4,800e3f0 <udivmodsi4+0x70>
 800e384:	28001a16 	blt	r5,zero,800e3f0 <udivmodsi4+0x70>
 800e388:	00800044 	movi	r2,1
 800e38c:	0007883a 	mov	r3,zero
 800e390:	01c007c4 	movi	r7,31
 800e394:	00000306 	br	800e3a4 <udivmodsi4+0x24>
 800e398:	19c01326 	beq	r3,r7,800e3e8 <udivmodsi4+0x68>
 800e39c:	18c00044 	addi	r3,r3,1
 800e3a0:	28000416 	blt	r5,zero,800e3b4 <udivmodsi4+0x34>
 800e3a4:	294b883a 	add	r5,r5,r5
 800e3a8:	1085883a 	add	r2,r2,r2
 800e3ac:	293ffa36 	bltu	r5,r4,800e398 <udivmodsi4+0x18>
 800e3b0:	10000d26 	beq	r2,zero,800e3e8 <udivmodsi4+0x68>
 800e3b4:	0007883a 	mov	r3,zero
 800e3b8:	21400236 	bltu	r4,r5,800e3c4 <udivmodsi4+0x44>
 800e3bc:	2149c83a 	sub	r4,r4,r5
 800e3c0:	1886b03a 	or	r3,r3,r2
 800e3c4:	1004d07a 	srli	r2,r2,1
 800e3c8:	280ad07a 	srli	r5,r5,1
 800e3cc:	103ffa1e 	bne	r2,zero,800e3b8 <udivmodsi4+0x38>
 800e3d0:	30000226 	beq	r6,zero,800e3dc <udivmodsi4+0x5c>
 800e3d4:	2005883a 	mov	r2,r4
 800e3d8:	f800283a 	ret
 800e3dc:	1809883a 	mov	r4,r3
 800e3e0:	2005883a 	mov	r2,r4
 800e3e4:	f800283a 	ret
 800e3e8:	0007883a 	mov	r3,zero
 800e3ec:	003ff806 	br	800e3d0 <udivmodsi4+0x50>
 800e3f0:	00800044 	movi	r2,1
 800e3f4:	0007883a 	mov	r3,zero
 800e3f8:	003fef06 	br	800e3b8 <udivmodsi4+0x38>

0800e3fc <__divsi3>:
 800e3fc:	defffe04 	addi	sp,sp,-8
 800e400:	dc000015 	stw	r16,0(sp)
 800e404:	dfc00115 	stw	ra,4(sp)
 800e408:	0021883a 	mov	r16,zero
 800e40c:	20000c16 	blt	r4,zero,800e440 <__divsi3+0x44>
 800e410:	000d883a 	mov	r6,zero
 800e414:	28000e16 	blt	r5,zero,800e450 <__divsi3+0x54>
 800e418:	800e3800 	call	800e380 <udivmodsi4>
 800e41c:	1007883a 	mov	r3,r2
 800e420:	8005003a 	cmpeq	r2,r16,zero
 800e424:	1000011e 	bne	r2,zero,800e42c <__divsi3+0x30>
 800e428:	00c7c83a 	sub	r3,zero,r3
 800e42c:	1805883a 	mov	r2,r3
 800e430:	dfc00117 	ldw	ra,4(sp)
 800e434:	dc000017 	ldw	r16,0(sp)
 800e438:	dec00204 	addi	sp,sp,8
 800e43c:	f800283a 	ret
 800e440:	0109c83a 	sub	r4,zero,r4
 800e444:	04000044 	movi	r16,1
 800e448:	000d883a 	mov	r6,zero
 800e44c:	283ff20e 	bge	r5,zero,800e418 <__divsi3+0x1c>
 800e450:	014bc83a 	sub	r5,zero,r5
 800e454:	8021003a 	cmpeq	r16,r16,zero
 800e458:	003fef06 	br	800e418 <__divsi3+0x1c>

0800e45c <__modsi3>:
 800e45c:	deffff04 	addi	sp,sp,-4
 800e460:	dfc00015 	stw	ra,0(sp)
 800e464:	01800044 	movi	r6,1
 800e468:	2807883a 	mov	r3,r5
 800e46c:	20000416 	blt	r4,zero,800e480 <__modsi3+0x24>
 800e470:	28000c16 	blt	r5,zero,800e4a4 <__modsi3+0x48>
 800e474:	dfc00017 	ldw	ra,0(sp)
 800e478:	dec00104 	addi	sp,sp,4
 800e47c:	800e3801 	jmpi	800e380 <udivmodsi4>
 800e480:	0109c83a 	sub	r4,zero,r4
 800e484:	28000b16 	blt	r5,zero,800e4b4 <__modsi3+0x58>
 800e488:	180b883a 	mov	r5,r3
 800e48c:	01800044 	movi	r6,1
 800e490:	800e3800 	call	800e380 <udivmodsi4>
 800e494:	0085c83a 	sub	r2,zero,r2
 800e498:	dfc00017 	ldw	ra,0(sp)
 800e49c:	dec00104 	addi	sp,sp,4
 800e4a0:	f800283a 	ret
 800e4a4:	014bc83a 	sub	r5,zero,r5
 800e4a8:	dfc00017 	ldw	ra,0(sp)
 800e4ac:	dec00104 	addi	sp,sp,4
 800e4b0:	800e3801 	jmpi	800e380 <udivmodsi4>
 800e4b4:	0147c83a 	sub	r3,zero,r5
 800e4b8:	003ff306 	br	800e488 <__modsi3+0x2c>

0800e4bc <__udivsi3>:
 800e4bc:	000d883a 	mov	r6,zero
 800e4c0:	800e3801 	jmpi	800e380 <udivmodsi4>

0800e4c4 <__umodsi3>:
 800e4c4:	01800044 	movi	r6,1
 800e4c8:	800e3801 	jmpi	800e380 <udivmodsi4>

0800e4cc <__muldi3>:
 800e4cc:	2011883a 	mov	r8,r4
 800e4d0:	427fffcc 	andi	r9,r8,65535
 800e4d4:	4018d43a 	srli	r12,r8,16
 800e4d8:	32bfffcc 	andi	r10,r6,65535
 800e4dc:	3016d43a 	srli	r11,r6,16
 800e4e0:	4a85383a 	mul	r2,r9,r10
 800e4e4:	6295383a 	mul	r10,r12,r10
 800e4e8:	4ad3383a 	mul	r9,r9,r11
 800e4ec:	113fffcc 	andi	r4,r2,65535
 800e4f0:	1004d43a 	srli	r2,r2,16
 800e4f4:	4a93883a 	add	r9,r9,r10
 800e4f8:	3807883a 	mov	r3,r7
 800e4fc:	1245883a 	add	r2,r2,r9
 800e500:	280f883a 	mov	r7,r5
 800e504:	180b883a 	mov	r5,r3
 800e508:	1006943a 	slli	r3,r2,16
 800e50c:	defffd04 	addi	sp,sp,-12
 800e510:	dc800215 	stw	r18,8(sp)
 800e514:	1907883a 	add	r3,r3,r4
 800e518:	dc400115 	stw	r17,4(sp)
 800e51c:	dc000015 	stw	r16,0(sp)
 800e520:	4165383a 	mul	r18,r8,r5
 800e524:	31e3383a 	mul	r17,r6,r7
 800e528:	1012d43a 	srli	r9,r2,16
 800e52c:	62d9383a 	mul	r12,r12,r11
 800e530:	181f883a 	mov	r15,r3
 800e534:	1280022e 	bgeu	r2,r10,800e540 <__muldi3+0x74>
 800e538:	00800074 	movhi	r2,1
 800e53c:	6099883a 	add	r12,r12,r2
 800e540:	624d883a 	add	r6,r12,r9
 800e544:	9187883a 	add	r3,r18,r6
 800e548:	88c7883a 	add	r3,r17,r3
 800e54c:	7805883a 	mov	r2,r15
 800e550:	dc800217 	ldw	r18,8(sp)
 800e554:	dc400117 	ldw	r17,4(sp)
 800e558:	dc000017 	ldw	r16,0(sp)
 800e55c:	dec00304 	addi	sp,sp,12
 800e560:	f800283a 	ret

0800e564 <__clzsi2>:
 800e564:	00bfffd4 	movui	r2,65535
 800e568:	11000e36 	bltu	r2,r4,800e5a4 <__clzsi2+0x40>
 800e56c:	00803fc4 	movi	r2,255
 800e570:	01400204 	movi	r5,8
 800e574:	0007883a 	mov	r3,zero
 800e578:	11001036 	bltu	r2,r4,800e5bc <__clzsi2+0x58>
 800e57c:	000b883a 	mov	r5,zero
 800e580:	20c6d83a 	srl	r3,r4,r3
 800e584:	00820074 	movhi	r2,2049
 800e588:	109dbc04 	addi	r2,r2,30448
 800e58c:	1887883a 	add	r3,r3,r2
 800e590:	18800003 	ldbu	r2,0(r3)
 800e594:	00c00804 	movi	r3,32
 800e598:	2885883a 	add	r2,r5,r2
 800e59c:	1885c83a 	sub	r2,r3,r2
 800e5a0:	f800283a 	ret
 800e5a4:	01400404 	movi	r5,16
 800e5a8:	00804034 	movhi	r2,256
 800e5ac:	10bfffc4 	addi	r2,r2,-1
 800e5b0:	2807883a 	mov	r3,r5
 800e5b4:	113ff22e 	bgeu	r2,r4,800e580 <__clzsi2+0x1c>
 800e5b8:	01400604 	movi	r5,24
 800e5bc:	2807883a 	mov	r3,r5
 800e5c0:	20c6d83a 	srl	r3,r4,r3
 800e5c4:	00820074 	movhi	r2,2049
 800e5c8:	109dbc04 	addi	r2,r2,30448
 800e5cc:	1887883a 	add	r3,r3,r2
 800e5d0:	18800003 	ldbu	r2,0(r3)
 800e5d4:	00c00804 	movi	r3,32
 800e5d8:	2885883a 	add	r2,r5,r2
 800e5dc:	1885c83a 	sub	r2,r3,r2
 800e5e0:	f800283a 	ret

0800e5e4 <__pack_d>:
 800e5e4:	20c00017 	ldw	r3,0(r4)
 800e5e8:	defffd04 	addi	sp,sp,-12
 800e5ec:	dc000015 	stw	r16,0(sp)
 800e5f0:	dc800215 	stw	r18,8(sp)
 800e5f4:	dc400115 	stw	r17,4(sp)
 800e5f8:	00800044 	movi	r2,1
 800e5fc:	22000317 	ldw	r8,12(r4)
 800e600:	001f883a 	mov	r15,zero
 800e604:	22400417 	ldw	r9,16(r4)
 800e608:	24000117 	ldw	r16,4(r4)
 800e60c:	10c0552e 	bgeu	r2,r3,800e764 <__pack_d+0x180>
 800e610:	00800104 	movi	r2,4
 800e614:	18804f26 	beq	r3,r2,800e754 <__pack_d+0x170>
 800e618:	00800084 	movi	r2,2
 800e61c:	18800226 	beq	r3,r2,800e628 <__pack_d+0x44>
 800e620:	4244b03a 	or	r2,r8,r9
 800e624:	10001a1e 	bne	r2,zero,800e690 <__pack_d+0xac>
 800e628:	000d883a 	mov	r6,zero
 800e62c:	000f883a 	mov	r7,zero
 800e630:	0011883a 	mov	r8,zero
 800e634:	00800434 	movhi	r2,16
 800e638:	10bfffc4 	addi	r2,r2,-1
 800e63c:	301d883a 	mov	r14,r6
 800e640:	3884703a 	and	r2,r7,r2
 800e644:	400a953a 	slli	r5,r8,20
 800e648:	79bffc2c 	andhi	r6,r15,65520
 800e64c:	308cb03a 	or	r6,r6,r2
 800e650:	00e00434 	movhi	r3,32784
 800e654:	18ffffc4 	addi	r3,r3,-1
 800e658:	800497fa 	slli	r2,r16,31
 800e65c:	30c6703a 	and	r3,r6,r3
 800e660:	1946b03a 	or	r3,r3,r5
 800e664:	01600034 	movhi	r5,32768
 800e668:	297fffc4 	addi	r5,r5,-1
 800e66c:	194a703a 	and	r5,r3,r5
 800e670:	288ab03a 	or	r5,r5,r2
 800e674:	2807883a 	mov	r3,r5
 800e678:	7005883a 	mov	r2,r14
 800e67c:	dc800217 	ldw	r18,8(sp)
 800e680:	dc400117 	ldw	r17,4(sp)
 800e684:	dc000017 	ldw	r16,0(sp)
 800e688:	dec00304 	addi	sp,sp,12
 800e68c:	f800283a 	ret
 800e690:	21000217 	ldw	r4,8(r4)
 800e694:	00bf0084 	movi	r2,-1022
 800e698:	20803f16 	blt	r4,r2,800e798 <__pack_d+0x1b4>
 800e69c:	0080ffc4 	movi	r2,1023
 800e6a0:	11002c16 	blt	r2,r4,800e754 <__pack_d+0x170>
 800e6a4:	00803fc4 	movi	r2,255
 800e6a8:	408c703a 	and	r6,r8,r2
 800e6ac:	00802004 	movi	r2,128
 800e6b0:	0007883a 	mov	r3,zero
 800e6b4:	000f883a 	mov	r7,zero
 800e6b8:	2280ffc4 	addi	r10,r4,1023
 800e6bc:	30801e26 	beq	r6,r2,800e738 <__pack_d+0x154>
 800e6c0:	00801fc4 	movi	r2,127
 800e6c4:	4089883a 	add	r4,r8,r2
 800e6c8:	220d803a 	cmpltu	r6,r4,r8
 800e6cc:	324d883a 	add	r6,r6,r9
 800e6d0:	2011883a 	mov	r8,r4
 800e6d4:	3013883a 	mov	r9,r6
 800e6d8:	00880034 	movhi	r2,8192
 800e6dc:	10bfffc4 	addi	r2,r2,-1
 800e6e0:	12400d36 	bltu	r2,r9,800e718 <__pack_d+0x134>
 800e6e4:	4804963a 	slli	r2,r9,24
 800e6e8:	400cd23a 	srli	r6,r8,8
 800e6ec:	480ed23a 	srli	r7,r9,8
 800e6f0:	013fffc4 	movi	r4,-1
 800e6f4:	118cb03a 	or	r6,r2,r6
 800e6f8:	01400434 	movhi	r5,16
 800e6fc:	297fffc4 	addi	r5,r5,-1
 800e700:	3104703a 	and	r2,r6,r4
 800e704:	3946703a 	and	r3,r7,r5
 800e708:	5201ffcc 	andi	r8,r10,2047
 800e70c:	100d883a 	mov	r6,r2
 800e710:	180f883a 	mov	r7,r3
 800e714:	003fc706 	br	800e634 <__pack_d+0x50>
 800e718:	480897fa 	slli	r4,r9,31
 800e71c:	4004d07a 	srli	r2,r8,1
 800e720:	4806d07a 	srli	r3,r9,1
 800e724:	52800044 	addi	r10,r10,1
 800e728:	2084b03a 	or	r2,r4,r2
 800e72c:	1011883a 	mov	r8,r2
 800e730:	1813883a 	mov	r9,r3
 800e734:	003feb06 	br	800e6e4 <__pack_d+0x100>
 800e738:	383fe11e 	bne	r7,zero,800e6c0 <__pack_d+0xdc>
 800e73c:	01004004 	movi	r4,256
 800e740:	4104703a 	and	r2,r8,r4
 800e744:	10c4b03a 	or	r2,r2,r3
 800e748:	103fe326 	beq	r2,zero,800e6d8 <__pack_d+0xf4>
 800e74c:	3005883a 	mov	r2,r6
 800e750:	003fdc06 	br	800e6c4 <__pack_d+0xe0>
 800e754:	000d883a 	mov	r6,zero
 800e758:	000f883a 	mov	r7,zero
 800e75c:	0201ffc4 	movi	r8,2047
 800e760:	003fb406 	br	800e634 <__pack_d+0x50>
 800e764:	0005883a 	mov	r2,zero
 800e768:	00c00234 	movhi	r3,8
 800e76c:	408cb03a 	or	r6,r8,r2
 800e770:	48ceb03a 	or	r7,r9,r3
 800e774:	013fffc4 	movi	r4,-1
 800e778:	01400434 	movhi	r5,16
 800e77c:	297fffc4 	addi	r5,r5,-1
 800e780:	3104703a 	and	r2,r6,r4
 800e784:	3946703a 	and	r3,r7,r5
 800e788:	100d883a 	mov	r6,r2
 800e78c:	180f883a 	mov	r7,r3
 800e790:	0201ffc4 	movi	r8,2047
 800e794:	003fa706 	br	800e634 <__pack_d+0x50>
 800e798:	1109c83a 	sub	r4,r2,r4
 800e79c:	00800e04 	movi	r2,56
 800e7a0:	11004316 	blt	r2,r4,800e8b0 <__pack_d+0x2cc>
 800e7a4:	21fff804 	addi	r7,r4,-32
 800e7a8:	38004516 	blt	r7,zero,800e8c0 <__pack_d+0x2dc>
 800e7ac:	49d8d83a 	srl	r12,r9,r7
 800e7b0:	001b883a 	mov	r13,zero
 800e7b4:	0023883a 	mov	r17,zero
 800e7b8:	01400044 	movi	r5,1
 800e7bc:	0025883a 	mov	r18,zero
 800e7c0:	38004716 	blt	r7,zero,800e8e0 <__pack_d+0x2fc>
 800e7c4:	29d6983a 	sll	r11,r5,r7
 800e7c8:	0015883a 	mov	r10,zero
 800e7cc:	00bfffc4 	movi	r2,-1
 800e7d0:	5089883a 	add	r4,r10,r2
 800e7d4:	588b883a 	add	r5,r11,r2
 800e7d8:	228d803a 	cmpltu	r6,r4,r10
 800e7dc:	314b883a 	add	r5,r6,r5
 800e7e0:	4104703a 	and	r2,r8,r4
 800e7e4:	4946703a 	and	r3,r9,r5
 800e7e8:	10c4b03a 	or	r2,r2,r3
 800e7ec:	10000226 	beq	r2,zero,800e7f8 <__pack_d+0x214>
 800e7f0:	04400044 	movi	r17,1
 800e7f4:	0025883a 	mov	r18,zero
 800e7f8:	00803fc4 	movi	r2,255
 800e7fc:	644eb03a 	or	r7,r12,r17
 800e800:	3892703a 	and	r9,r7,r2
 800e804:	00802004 	movi	r2,128
 800e808:	6c90b03a 	or	r8,r13,r18
 800e80c:	0015883a 	mov	r10,zero
 800e810:	48801626 	beq	r9,r2,800e86c <__pack_d+0x288>
 800e814:	01001fc4 	movi	r4,127
 800e818:	3905883a 	add	r2,r7,r4
 800e81c:	11cd803a 	cmpltu	r6,r2,r7
 800e820:	320d883a 	add	r6,r6,r8
 800e824:	100f883a 	mov	r7,r2
 800e828:	00840034 	movhi	r2,4096
 800e82c:	10bfffc4 	addi	r2,r2,-1
 800e830:	3011883a 	mov	r8,r6
 800e834:	0007883a 	mov	r3,zero
 800e838:	11801b36 	bltu	r2,r6,800e8a8 <__pack_d+0x2c4>
 800e83c:	4004963a 	slli	r2,r8,24
 800e840:	3808d23a 	srli	r4,r7,8
 800e844:	400ad23a 	srli	r5,r8,8
 800e848:	1813883a 	mov	r9,r3
 800e84c:	1108b03a 	or	r4,r2,r4
 800e850:	00bfffc4 	movi	r2,-1
 800e854:	00c00434 	movhi	r3,16
 800e858:	18ffffc4 	addi	r3,r3,-1
 800e85c:	208c703a 	and	r6,r4,r2
 800e860:	28ce703a 	and	r7,r5,r3
 800e864:	4a01ffcc 	andi	r8,r9,2047
 800e868:	003f7206 	br	800e634 <__pack_d+0x50>
 800e86c:	503fe91e 	bne	r10,zero,800e814 <__pack_d+0x230>
 800e870:	01004004 	movi	r4,256
 800e874:	3904703a 	and	r2,r7,r4
 800e878:	0007883a 	mov	r3,zero
 800e87c:	10c4b03a 	or	r2,r2,r3
 800e880:	10000626 	beq	r2,zero,800e89c <__pack_d+0x2b8>
 800e884:	3a45883a 	add	r2,r7,r9
 800e888:	11cd803a 	cmpltu	r6,r2,r7
 800e88c:	320d883a 	add	r6,r6,r8
 800e890:	100f883a 	mov	r7,r2
 800e894:	3011883a 	mov	r8,r6
 800e898:	0007883a 	mov	r3,zero
 800e89c:	00840034 	movhi	r2,4096
 800e8a0:	10bfffc4 	addi	r2,r2,-1
 800e8a4:	123fe52e 	bgeu	r2,r8,800e83c <__pack_d+0x258>
 800e8a8:	00c00044 	movi	r3,1
 800e8ac:	003fe306 	br	800e83c <__pack_d+0x258>
 800e8b0:	0009883a 	mov	r4,zero
 800e8b4:	0013883a 	mov	r9,zero
 800e8b8:	000b883a 	mov	r5,zero
 800e8bc:	003fe406 	br	800e850 <__pack_d+0x26c>
 800e8c0:	4a47883a 	add	r3,r9,r9
 800e8c4:	008007c4 	movi	r2,31
 800e8c8:	1105c83a 	sub	r2,r2,r4
 800e8cc:	1886983a 	sll	r3,r3,r2
 800e8d0:	4118d83a 	srl	r12,r8,r4
 800e8d4:	491ad83a 	srl	r13,r9,r4
 800e8d8:	1b18b03a 	or	r12,r3,r12
 800e8dc:	003fb506 	br	800e7b4 <__pack_d+0x1d0>
 800e8e0:	2806d07a 	srli	r3,r5,1
 800e8e4:	008007c4 	movi	r2,31
 800e8e8:	1105c83a 	sub	r2,r2,r4
 800e8ec:	1896d83a 	srl	r11,r3,r2
 800e8f0:	2914983a 	sll	r10,r5,r4
 800e8f4:	003fb506 	br	800e7cc <__pack_d+0x1e8>

0800e8f8 <__unpack_d>:
 800e8f8:	20c00117 	ldw	r3,4(r4)
 800e8fc:	22400017 	ldw	r9,0(r4)
 800e900:	00800434 	movhi	r2,16
 800e904:	10bfffc4 	addi	r2,r2,-1
 800e908:	1808d53a 	srli	r4,r3,20
 800e90c:	180cd7fa 	srli	r6,r3,31
 800e910:	1894703a 	and	r10,r3,r2
 800e914:	2201ffcc 	andi	r8,r4,2047
 800e918:	281b883a 	mov	r13,r5
 800e91c:	4817883a 	mov	r11,r9
 800e920:	29800115 	stw	r6,4(r5)
 800e924:	5019883a 	mov	r12,r10
 800e928:	40001e1e 	bne	r8,zero,800e9a4 <__unpack_d+0xac>
 800e92c:	4a84b03a 	or	r2,r9,r10
 800e930:	10001926 	beq	r2,zero,800e998 <__unpack_d+0xa0>
 800e934:	4804d63a 	srli	r2,r9,24
 800e938:	500c923a 	slli	r6,r10,8
 800e93c:	013f0084 	movi	r4,-1022
 800e940:	00c40034 	movhi	r3,4096
 800e944:	18ffffc4 	addi	r3,r3,-1
 800e948:	118cb03a 	or	r6,r2,r6
 800e94c:	008000c4 	movi	r2,3
 800e950:	480a923a 	slli	r5,r9,8
 800e954:	68800015 	stw	r2,0(r13)
 800e958:	69000215 	stw	r4,8(r13)
 800e95c:	19800b36 	bltu	r3,r6,800e98c <__unpack_d+0x94>
 800e960:	200f883a 	mov	r7,r4
 800e964:	1811883a 	mov	r8,r3
 800e968:	2945883a 	add	r2,r5,r5
 800e96c:	1149803a 	cmpltu	r4,r2,r5
 800e970:	3187883a 	add	r3,r6,r6
 800e974:	20c9883a 	add	r4,r4,r3
 800e978:	100b883a 	mov	r5,r2
 800e97c:	200d883a 	mov	r6,r4
 800e980:	39ffffc4 	addi	r7,r7,-1
 800e984:	413ff82e 	bgeu	r8,r4,800e968 <__unpack_d+0x70>
 800e988:	69c00215 	stw	r7,8(r13)
 800e98c:	69800415 	stw	r6,16(r13)
 800e990:	69400315 	stw	r5,12(r13)
 800e994:	f800283a 	ret
 800e998:	00800084 	movi	r2,2
 800e99c:	28800015 	stw	r2,0(r5)
 800e9a0:	f800283a 	ret
 800e9a4:	0081ffc4 	movi	r2,2047
 800e9a8:	40800f26 	beq	r8,r2,800e9e8 <__unpack_d+0xf0>
 800e9ac:	480cd63a 	srli	r6,r9,24
 800e9b0:	5006923a 	slli	r3,r10,8
 800e9b4:	4804923a 	slli	r2,r9,8
 800e9b8:	0009883a 	mov	r4,zero
 800e9bc:	30c6b03a 	or	r3,r6,r3
 800e9c0:	01440034 	movhi	r5,4096
 800e9c4:	110cb03a 	or	r6,r2,r4
 800e9c8:	423f0044 	addi	r8,r8,-1023
 800e9cc:	194eb03a 	or	r7,r3,r5
 800e9d0:	008000c4 	movi	r2,3
 800e9d4:	69c00415 	stw	r7,16(r13)
 800e9d8:	6a000215 	stw	r8,8(r13)
 800e9dc:	68800015 	stw	r2,0(r13)
 800e9e0:	69800315 	stw	r6,12(r13)
 800e9e4:	f800283a 	ret
 800e9e8:	4a84b03a 	or	r2,r9,r10
 800e9ec:	1000031e 	bne	r2,zero,800e9fc <__unpack_d+0x104>
 800e9f0:	00800104 	movi	r2,4
 800e9f4:	28800015 	stw	r2,0(r5)
 800e9f8:	f800283a 	ret
 800e9fc:	0009883a 	mov	r4,zero
 800ea00:	01400234 	movhi	r5,8
 800ea04:	4904703a 	and	r2,r9,r4
 800ea08:	5146703a 	and	r3,r10,r5
 800ea0c:	10c4b03a 	or	r2,r2,r3
 800ea10:	10000526 	beq	r2,zero,800ea28 <__unpack_d+0x130>
 800ea14:	00800044 	movi	r2,1
 800ea18:	68800015 	stw	r2,0(r13)
 800ea1c:	6b000415 	stw	r12,16(r13)
 800ea20:	6ac00315 	stw	r11,12(r13)
 800ea24:	f800283a 	ret
 800ea28:	68000015 	stw	zero,0(r13)
 800ea2c:	003ffb06 	br	800ea1c <__unpack_d+0x124>

0800ea30 <__fpcmp_parts_d>:
 800ea30:	21800017 	ldw	r6,0(r4)
 800ea34:	00c00044 	movi	r3,1
 800ea38:	19800a2e 	bgeu	r3,r6,800ea64 <__fpcmp_parts_d+0x34>
 800ea3c:	28800017 	ldw	r2,0(r5)
 800ea40:	1880082e 	bgeu	r3,r2,800ea64 <__fpcmp_parts_d+0x34>
 800ea44:	00c00104 	movi	r3,4
 800ea48:	30c02626 	beq	r6,r3,800eae4 <__fpcmp_parts_d+0xb4>
 800ea4c:	10c02226 	beq	r2,r3,800ead8 <__fpcmp_parts_d+0xa8>
 800ea50:	00c00084 	movi	r3,2
 800ea54:	30c00526 	beq	r6,r3,800ea6c <__fpcmp_parts_d+0x3c>
 800ea58:	10c0071e 	bne	r2,r3,800ea78 <__fpcmp_parts_d+0x48>
 800ea5c:	20800117 	ldw	r2,4(r4)
 800ea60:	1000091e 	bne	r2,zero,800ea88 <__fpcmp_parts_d+0x58>
 800ea64:	00800044 	movi	r2,1
 800ea68:	f800283a 	ret
 800ea6c:	10c01a1e 	bne	r2,r3,800ead8 <__fpcmp_parts_d+0xa8>
 800ea70:	0005883a 	mov	r2,zero
 800ea74:	f800283a 	ret
 800ea78:	22000117 	ldw	r8,4(r4)
 800ea7c:	28800117 	ldw	r2,4(r5)
 800ea80:	40800326 	beq	r8,r2,800ea90 <__fpcmp_parts_d+0x60>
 800ea84:	403ff726 	beq	r8,zero,800ea64 <__fpcmp_parts_d+0x34>
 800ea88:	00bfffc4 	movi	r2,-1
 800ea8c:	f800283a 	ret
 800ea90:	20c00217 	ldw	r3,8(r4)
 800ea94:	28800217 	ldw	r2,8(r5)
 800ea98:	10fffa16 	blt	r2,r3,800ea84 <__fpcmp_parts_d+0x54>
 800ea9c:	18800916 	blt	r3,r2,800eac4 <__fpcmp_parts_d+0x94>
 800eaa0:	21c00417 	ldw	r7,16(r4)
 800eaa4:	28c00417 	ldw	r3,16(r5)
 800eaa8:	21800317 	ldw	r6,12(r4)
 800eaac:	28800317 	ldw	r2,12(r5)
 800eab0:	19fff436 	bltu	r3,r7,800ea84 <__fpcmp_parts_d+0x54>
 800eab4:	38c00526 	beq	r7,r3,800eacc <__fpcmp_parts_d+0x9c>
 800eab8:	38c00236 	bltu	r7,r3,800eac4 <__fpcmp_parts_d+0x94>
 800eabc:	19ffec1e 	bne	r3,r7,800ea70 <__fpcmp_parts_d+0x40>
 800eac0:	30bfeb2e 	bgeu	r6,r2,800ea70 <__fpcmp_parts_d+0x40>
 800eac4:	403fe71e 	bne	r8,zero,800ea64 <__fpcmp_parts_d+0x34>
 800eac8:	003fef06 	br	800ea88 <__fpcmp_parts_d+0x58>
 800eacc:	11bffa2e 	bgeu	r2,r6,800eab8 <__fpcmp_parts_d+0x88>
 800ead0:	403fe426 	beq	r8,zero,800ea64 <__fpcmp_parts_d+0x34>
 800ead4:	003fec06 	br	800ea88 <__fpcmp_parts_d+0x58>
 800ead8:	28800117 	ldw	r2,4(r5)
 800eadc:	103fe11e 	bne	r2,zero,800ea64 <__fpcmp_parts_d+0x34>
 800eae0:	003fe906 	br	800ea88 <__fpcmp_parts_d+0x58>
 800eae4:	11bfdd1e 	bne	r2,r6,800ea5c <__fpcmp_parts_d+0x2c>
 800eae8:	28c00117 	ldw	r3,4(r5)
 800eaec:	20800117 	ldw	r2,4(r4)
 800eaf0:	1885c83a 	sub	r2,r3,r2
 800eaf4:	f800283a 	ret

0800eaf8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800eaf8:	defff804 	addi	sp,sp,-32
 800eafc:	dfc00715 	stw	ra,28(sp)
 800eb00:	df000615 	stw	fp,24(sp)
 800eb04:	df000604 	addi	fp,sp,24
 800eb08:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800eb0c:	e0bffc17 	ldw	r2,-16(fp)
 800eb10:	1004803a 	cmplt	r2,r2,zero
 800eb14:	1000081e 	bne	r2,zero,800eb38 <close+0x40>
 800eb18:	e0bffc17 	ldw	r2,-16(fp)
 800eb1c:	10800324 	muli	r2,r2,12
 800eb20:	1007883a 	mov	r3,r2
 800eb24:	008200b4 	movhi	r2,2050
 800eb28:	10a02704 	addi	r2,r2,-32612
 800eb2c:	1887883a 	add	r3,r3,r2
 800eb30:	e0ffff15 	stw	r3,-4(fp)
 800eb34:	00000106 	br	800eb3c <close+0x44>
 800eb38:	e03fff15 	stw	zero,-4(fp)
 800eb3c:	e0bfff17 	ldw	r2,-4(fp)
 800eb40:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 800eb44:	e0bffb17 	ldw	r2,-20(fp)
 800eb48:	1005003a 	cmpeq	r2,r2,zero
 800eb4c:	10001d1e 	bne	r2,zero,800ebc4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800eb50:	e0bffb17 	ldw	r2,-20(fp)
 800eb54:	10800017 	ldw	r2,0(r2)
 800eb58:	10800417 	ldw	r2,16(r2)
 800eb5c:	1005003a 	cmpeq	r2,r2,zero
 800eb60:	1000071e 	bne	r2,zero,800eb80 <close+0x88>
 800eb64:	e0bffb17 	ldw	r2,-20(fp)
 800eb68:	10800017 	ldw	r2,0(r2)
 800eb6c:	10800417 	ldw	r2,16(r2)
 800eb70:	e13ffb17 	ldw	r4,-20(fp)
 800eb74:	103ee83a 	callr	r2
 800eb78:	e0bffe15 	stw	r2,-8(fp)
 800eb7c:	00000106 	br	800eb84 <close+0x8c>
 800eb80:	e03ffe15 	stw	zero,-8(fp)
 800eb84:	e0bffe17 	ldw	r2,-8(fp)
 800eb88:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800eb8c:	e13ffc17 	ldw	r4,-16(fp)
 800eb90:	800f33c0 	call	800f33c <alt_release_fd>
    if (rval < 0)
 800eb94:	e0bffa17 	ldw	r2,-24(fp)
 800eb98:	1004403a 	cmpge	r2,r2,zero
 800eb9c:	1000071e 	bne	r2,zero,800ebbc <close+0xc4>
    {
      ALT_ERRNO = -rval;
 800eba0:	800ebf40 	call	800ebf4 <alt_get_errno>
 800eba4:	e0fffa17 	ldw	r3,-24(fp)
 800eba8:	00c7c83a 	sub	r3,zero,r3
 800ebac:	10c00015 	stw	r3,0(r2)
      return -1;
 800ebb0:	00bfffc4 	movi	r2,-1
 800ebb4:	e0bffd15 	stw	r2,-12(fp)
 800ebb8:	00000806 	br	800ebdc <close+0xe4>
    }
    return 0;
 800ebbc:	e03ffd15 	stw	zero,-12(fp)
 800ebc0:	00000606 	br	800ebdc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ebc4:	800ebf40 	call	800ebf4 <alt_get_errno>
 800ebc8:	1007883a 	mov	r3,r2
 800ebcc:	00801444 	movi	r2,81
 800ebd0:	18800015 	stw	r2,0(r3)
    return -1;
 800ebd4:	00bfffc4 	movi	r2,-1
 800ebd8:	e0bffd15 	stw	r2,-12(fp)
 800ebdc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 800ebe0:	e037883a 	mov	sp,fp
 800ebe4:	dfc00117 	ldw	ra,4(sp)
 800ebe8:	df000017 	ldw	fp,0(sp)
 800ebec:	dec00204 	addi	sp,sp,8
 800ebf0:	f800283a 	ret

0800ebf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ebf4:	defffd04 	addi	sp,sp,-12
 800ebf8:	dfc00215 	stw	ra,8(sp)
 800ebfc:	df000115 	stw	fp,4(sp)
 800ec00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800ec04:	008200b4 	movhi	r2,2050
 800ec08:	10a4ca04 	addi	r2,r2,-27864
 800ec0c:	10800017 	ldw	r2,0(r2)
 800ec10:	1005003a 	cmpeq	r2,r2,zero
 800ec14:	1000061e 	bne	r2,zero,800ec30 <alt_get_errno+0x3c>
 800ec18:	008200b4 	movhi	r2,2050
 800ec1c:	10a4ca04 	addi	r2,r2,-27864
 800ec20:	10800017 	ldw	r2,0(r2)
 800ec24:	103ee83a 	callr	r2
 800ec28:	e0bfff15 	stw	r2,-4(fp)
 800ec2c:	00000306 	br	800ec3c <alt_get_errno+0x48>
 800ec30:	008200b4 	movhi	r2,2050
 800ec34:	10ab9404 	addi	r2,r2,-20912
 800ec38:	e0bfff15 	stw	r2,-4(fp)
 800ec3c:	e0bfff17 	ldw	r2,-4(fp)
}
 800ec40:	e037883a 	mov	sp,fp
 800ec44:	dfc00117 	ldw	ra,4(sp)
 800ec48:	df000017 	ldw	fp,0(sp)
 800ec4c:	dec00204 	addi	sp,sp,8
 800ec50:	f800283a 	ret

0800ec54 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800ec54:	defffc04 	addi	sp,sp,-16
 800ec58:	df000315 	stw	fp,12(sp)
 800ec5c:	df000304 	addi	fp,sp,12
 800ec60:	e13ffd15 	stw	r4,-12(fp)
 800ec64:	e17ffe15 	stw	r5,-8(fp)
 800ec68:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800ec6c:	e0bfff17 	ldw	r2,-4(fp)
}
 800ec70:	e037883a 	mov	sp,fp
 800ec74:	df000017 	ldw	fp,0(sp)
 800ec78:	dec00104 	addi	sp,sp,4
 800ec7c:	f800283a 	ret

0800ec80 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800ec80:	defff904 	addi	sp,sp,-28
 800ec84:	dfc00615 	stw	ra,24(sp)
 800ec88:	df000515 	stw	fp,20(sp)
 800ec8c:	df000504 	addi	fp,sp,20
 800ec90:	e13ffc15 	stw	r4,-16(fp)
 800ec94:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ec98:	e0bffc17 	ldw	r2,-16(fp)
 800ec9c:	1004803a 	cmplt	r2,r2,zero
 800eca0:	1000081e 	bne	r2,zero,800ecc4 <fstat+0x44>
 800eca4:	e0bffc17 	ldw	r2,-16(fp)
 800eca8:	10800324 	muli	r2,r2,12
 800ecac:	1007883a 	mov	r3,r2
 800ecb0:	008200b4 	movhi	r2,2050
 800ecb4:	10a02704 	addi	r2,r2,-32612
 800ecb8:	1887883a 	add	r3,r3,r2
 800ecbc:	e0ffff15 	stw	r3,-4(fp)
 800ecc0:	00000106 	br	800ecc8 <fstat+0x48>
 800ecc4:	e03fff15 	stw	zero,-4(fp)
 800ecc8:	e0bfff17 	ldw	r2,-4(fp)
 800eccc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800ecd0:	e0bffb17 	ldw	r2,-20(fp)
 800ecd4:	1005003a 	cmpeq	r2,r2,zero
 800ecd8:	1000121e 	bne	r2,zero,800ed24 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800ecdc:	e0bffb17 	ldw	r2,-20(fp)
 800ece0:	10800017 	ldw	r2,0(r2)
 800ece4:	10800817 	ldw	r2,32(r2)
 800ece8:	1005003a 	cmpeq	r2,r2,zero
 800ecec:	1000081e 	bne	r2,zero,800ed10 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 800ecf0:	e0bffb17 	ldw	r2,-20(fp)
 800ecf4:	10800017 	ldw	r2,0(r2)
 800ecf8:	10800817 	ldw	r2,32(r2)
 800ecfc:	e13ffb17 	ldw	r4,-20(fp)
 800ed00:	e17ffd17 	ldw	r5,-12(fp)
 800ed04:	103ee83a 	callr	r2
 800ed08:	e0bffe15 	stw	r2,-8(fp)
 800ed0c:	00000b06 	br	800ed3c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800ed10:	e0fffd17 	ldw	r3,-12(fp)
 800ed14:	00880004 	movi	r2,8192
 800ed18:	18800115 	stw	r2,4(r3)
      return 0;
 800ed1c:	e03ffe15 	stw	zero,-8(fp)
 800ed20:	00000606 	br	800ed3c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ed24:	800ed540 	call	800ed54 <alt_get_errno>
 800ed28:	1007883a 	mov	r3,r2
 800ed2c:	00801444 	movi	r2,81
 800ed30:	18800015 	stw	r2,0(r3)
    return -1;
 800ed34:	00bfffc4 	movi	r2,-1
 800ed38:	e0bffe15 	stw	r2,-8(fp)
 800ed3c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 800ed40:	e037883a 	mov	sp,fp
 800ed44:	dfc00117 	ldw	ra,4(sp)
 800ed48:	df000017 	ldw	fp,0(sp)
 800ed4c:	dec00204 	addi	sp,sp,8
 800ed50:	f800283a 	ret

0800ed54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ed54:	defffd04 	addi	sp,sp,-12
 800ed58:	dfc00215 	stw	ra,8(sp)
 800ed5c:	df000115 	stw	fp,4(sp)
 800ed60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800ed64:	008200b4 	movhi	r2,2050
 800ed68:	10a4ca04 	addi	r2,r2,-27864
 800ed6c:	10800017 	ldw	r2,0(r2)
 800ed70:	1005003a 	cmpeq	r2,r2,zero
 800ed74:	1000061e 	bne	r2,zero,800ed90 <alt_get_errno+0x3c>
 800ed78:	008200b4 	movhi	r2,2050
 800ed7c:	10a4ca04 	addi	r2,r2,-27864
 800ed80:	10800017 	ldw	r2,0(r2)
 800ed84:	103ee83a 	callr	r2
 800ed88:	e0bfff15 	stw	r2,-4(fp)
 800ed8c:	00000306 	br	800ed9c <alt_get_errno+0x48>
 800ed90:	008200b4 	movhi	r2,2050
 800ed94:	10ab9404 	addi	r2,r2,-20912
 800ed98:	e0bfff15 	stw	r2,-4(fp)
 800ed9c:	e0bfff17 	ldw	r2,-4(fp)
}
 800eda0:	e037883a 	mov	sp,fp
 800eda4:	dfc00117 	ldw	ra,4(sp)
 800eda8:	df000017 	ldw	fp,0(sp)
 800edac:	dec00204 	addi	sp,sp,8
 800edb0:	f800283a 	ret

0800edb4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800edb4:	deffeb04 	addi	sp,sp,-84
 800edb8:	dfc01415 	stw	ra,80(sp)
 800edbc:	df001315 	stw	fp,76(sp)
 800edc0:	df001304 	addi	fp,sp,76
 800edc4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800edc8:	e0bffd17 	ldw	r2,-12(fp)
 800edcc:	1004803a 	cmplt	r2,r2,zero
 800edd0:	1000081e 	bne	r2,zero,800edf4 <isatty+0x40>
 800edd4:	e0bffd17 	ldw	r2,-12(fp)
 800edd8:	10800324 	muli	r2,r2,12
 800eddc:	1007883a 	mov	r3,r2
 800ede0:	008200b4 	movhi	r2,2050
 800ede4:	10a02704 	addi	r2,r2,-32612
 800ede8:	1887883a 	add	r3,r3,r2
 800edec:	e0ffff15 	stw	r3,-4(fp)
 800edf0:	00000106 	br	800edf8 <isatty+0x44>
 800edf4:	e03fff15 	stw	zero,-4(fp)
 800edf8:	e0bfff17 	ldw	r2,-4(fp)
 800edfc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 800ee00:	e0bfed17 	ldw	r2,-76(fp)
 800ee04:	1005003a 	cmpeq	r2,r2,zero
 800ee08:	10000f1e 	bne	r2,zero,800ee48 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800ee0c:	e0bfed17 	ldw	r2,-76(fp)
 800ee10:	10800017 	ldw	r2,0(r2)
 800ee14:	10800817 	ldw	r2,32(r2)
 800ee18:	1004c03a 	cmpne	r2,r2,zero
 800ee1c:	1000031e 	bne	r2,zero,800ee2c <isatty+0x78>
    {
      return 1;
 800ee20:	00800044 	movi	r2,1
 800ee24:	e0bffe15 	stw	r2,-8(fp)
 800ee28:	00000c06 	br	800ee5c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ee2c:	e17fee04 	addi	r5,fp,-72
 800ee30:	e13ffd17 	ldw	r4,-12(fp)
 800ee34:	800ec800 	call	800ec80 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ee38:	e0bfef17 	ldw	r2,-68(fp)
 800ee3c:	10880020 	cmpeqi	r2,r2,8192
 800ee40:	e0bffe15 	stw	r2,-8(fp)
 800ee44:	00000506 	br	800ee5c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ee48:	800ee740 	call	800ee74 <alt_get_errno>
 800ee4c:	1007883a 	mov	r3,r2
 800ee50:	00801444 	movi	r2,81
 800ee54:	18800015 	stw	r2,0(r3)
    return 0;
 800ee58:	e03ffe15 	stw	zero,-8(fp)
 800ee5c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 800ee60:	e037883a 	mov	sp,fp
 800ee64:	dfc00117 	ldw	ra,4(sp)
 800ee68:	df000017 	ldw	fp,0(sp)
 800ee6c:	dec00204 	addi	sp,sp,8
 800ee70:	f800283a 	ret

0800ee74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ee74:	defffd04 	addi	sp,sp,-12
 800ee78:	dfc00215 	stw	ra,8(sp)
 800ee7c:	df000115 	stw	fp,4(sp)
 800ee80:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800ee84:	008200b4 	movhi	r2,2050
 800ee88:	10a4ca04 	addi	r2,r2,-27864
 800ee8c:	10800017 	ldw	r2,0(r2)
 800ee90:	1005003a 	cmpeq	r2,r2,zero
 800ee94:	1000061e 	bne	r2,zero,800eeb0 <alt_get_errno+0x3c>
 800ee98:	008200b4 	movhi	r2,2050
 800ee9c:	10a4ca04 	addi	r2,r2,-27864
 800eea0:	10800017 	ldw	r2,0(r2)
 800eea4:	103ee83a 	callr	r2
 800eea8:	e0bfff15 	stw	r2,-4(fp)
 800eeac:	00000306 	br	800eebc <alt_get_errno+0x48>
 800eeb0:	008200b4 	movhi	r2,2050
 800eeb4:	10ab9404 	addi	r2,r2,-20912
 800eeb8:	e0bfff15 	stw	r2,-4(fp)
 800eebc:	e0bfff17 	ldw	r2,-4(fp)
}
 800eec0:	e037883a 	mov	sp,fp
 800eec4:	dfc00117 	ldw	ra,4(sp)
 800eec8:	df000017 	ldw	fp,0(sp)
 800eecc:	dec00204 	addi	sp,sp,8
 800eed0:	f800283a 	ret

0800eed4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800eed4:	defffe04 	addi	sp,sp,-8
 800eed8:	dfc00115 	stw	ra,4(sp)
 800eedc:	df000015 	stw	fp,0(sp)
 800eee0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800eee4:	010200b4 	movhi	r4,2050
 800eee8:	2124cf04 	addi	r4,r4,-27844
 800eeec:	01420074 	movhi	r5,2049
 800eef0:	295e1804 	addi	r5,r5,30816
 800eef4:	018200b4 	movhi	r6,2050
 800eef8:	31a4cf04 	addi	r6,r6,-27844
 800eefc:	800ef540 	call	800ef54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800ef00:	01020034 	movhi	r4,2048
 800ef04:	21000804 	addi	r4,r4,32
 800ef08:	01420034 	movhi	r5,2048
 800ef0c:	29400804 	addi	r5,r5,32
 800ef10:	01820034 	movhi	r6,2048
 800ef14:	31806d04 	addi	r6,r6,436
 800ef18:	800ef540 	call	800ef54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800ef1c:	01020074 	movhi	r4,2049
 800ef20:	211c0104 	addi	r4,r4,28676
 800ef24:	01420074 	movhi	r5,2049
 800ef28:	295c0104 	addi	r5,r5,28676
 800ef2c:	01820074 	movhi	r6,2049
 800ef30:	319e1804 	addi	r6,r6,30816
 800ef34:	800ef540 	call	800ef54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800ef38:	8015e1c0 	call	8015e1c <alt_dcache_flush_all>
  alt_icache_flush_all();
 800ef3c:	80160d00 	call	80160d0 <alt_icache_flush_all>
}
 800ef40:	e037883a 	mov	sp,fp
 800ef44:	dfc00117 	ldw	ra,4(sp)
 800ef48:	df000017 	ldw	fp,0(sp)
 800ef4c:	dec00204 	addi	sp,sp,8
 800ef50:	f800283a 	ret

0800ef54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800ef54:	defffc04 	addi	sp,sp,-16
 800ef58:	df000315 	stw	fp,12(sp)
 800ef5c:	df000304 	addi	fp,sp,12
 800ef60:	e13ffd15 	stw	r4,-12(fp)
 800ef64:	e17ffe15 	stw	r5,-8(fp)
 800ef68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800ef6c:	e0fffe17 	ldw	r3,-8(fp)
 800ef70:	e0bffd17 	ldw	r2,-12(fp)
 800ef74:	18800e26 	beq	r3,r2,800efb0 <alt_load_section+0x5c>
  {
    while( to != end )
 800ef78:	00000a06 	br	800efa4 <alt_load_section+0x50>
    {
      *to++ = *from++;
 800ef7c:	e0bffd17 	ldw	r2,-12(fp)
 800ef80:	10c00017 	ldw	r3,0(r2)
 800ef84:	e0bffe17 	ldw	r2,-8(fp)
 800ef88:	10c00015 	stw	r3,0(r2)
 800ef8c:	e0bffe17 	ldw	r2,-8(fp)
 800ef90:	10800104 	addi	r2,r2,4
 800ef94:	e0bffe15 	stw	r2,-8(fp)
 800ef98:	e0bffd17 	ldw	r2,-12(fp)
 800ef9c:	10800104 	addi	r2,r2,4
 800efa0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800efa4:	e0fffe17 	ldw	r3,-8(fp)
 800efa8:	e0bfff17 	ldw	r2,-4(fp)
 800efac:	18bff31e 	bne	r3,r2,800ef7c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800efb0:	e037883a 	mov	sp,fp
 800efb4:	df000017 	ldw	fp,0(sp)
 800efb8:	dec00104 	addi	sp,sp,4
 800efbc:	f800283a 	ret

0800efc0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800efc0:	defff804 	addi	sp,sp,-32
 800efc4:	dfc00715 	stw	ra,28(sp)
 800efc8:	df000615 	stw	fp,24(sp)
 800efcc:	df000604 	addi	fp,sp,24
 800efd0:	e13ffc15 	stw	r4,-16(fp)
 800efd4:	e17ffd15 	stw	r5,-12(fp)
 800efd8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800efdc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800efe0:	e0bffc17 	ldw	r2,-16(fp)
 800efe4:	1004803a 	cmplt	r2,r2,zero
 800efe8:	1000081e 	bne	r2,zero,800f00c <lseek+0x4c>
 800efec:	e0bffc17 	ldw	r2,-16(fp)
 800eff0:	10800324 	muli	r2,r2,12
 800eff4:	1007883a 	mov	r3,r2
 800eff8:	008200b4 	movhi	r2,2050
 800effc:	10a02704 	addi	r2,r2,-32612
 800f000:	1887883a 	add	r3,r3,r2
 800f004:	e0ffff15 	stw	r3,-4(fp)
 800f008:	00000106 	br	800f010 <lseek+0x50>
 800f00c:	e03fff15 	stw	zero,-4(fp)
 800f010:	e0bfff17 	ldw	r2,-4(fp)
 800f014:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 800f018:	e0bffb17 	ldw	r2,-20(fp)
 800f01c:	1005003a 	cmpeq	r2,r2,zero
 800f020:	1000111e 	bne	r2,zero,800f068 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800f024:	e0bffb17 	ldw	r2,-20(fp)
 800f028:	10800017 	ldw	r2,0(r2)
 800f02c:	10800717 	ldw	r2,28(r2)
 800f030:	1005003a 	cmpeq	r2,r2,zero
 800f034:	1000091e 	bne	r2,zero,800f05c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800f038:	e0bffb17 	ldw	r2,-20(fp)
 800f03c:	10800017 	ldw	r2,0(r2)
 800f040:	10800717 	ldw	r2,28(r2)
 800f044:	e13ffb17 	ldw	r4,-20(fp)
 800f048:	e17ffd17 	ldw	r5,-12(fp)
 800f04c:	e1bffe17 	ldw	r6,-8(fp)
 800f050:	103ee83a 	callr	r2
 800f054:	e0bffa15 	stw	r2,-24(fp)
 800f058:	00000506 	br	800f070 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800f05c:	00bfde84 	movi	r2,-134
 800f060:	e0bffa15 	stw	r2,-24(fp)
 800f064:	00000206 	br	800f070 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800f068:	00bfebc4 	movi	r2,-81
 800f06c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 800f070:	e0bffa17 	ldw	r2,-24(fp)
 800f074:	1004403a 	cmpge	r2,r2,zero
 800f078:	1000071e 	bne	r2,zero,800f098 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 800f07c:	800f0b00 	call	800f0b0 <alt_get_errno>
 800f080:	1007883a 	mov	r3,r2
 800f084:	e0bffa17 	ldw	r2,-24(fp)
 800f088:	0085c83a 	sub	r2,zero,r2
 800f08c:	18800015 	stw	r2,0(r3)
    rc = -1;
 800f090:	00bfffc4 	movi	r2,-1
 800f094:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 800f098:	e0bffa17 	ldw	r2,-24(fp)
}
 800f09c:	e037883a 	mov	sp,fp
 800f0a0:	dfc00117 	ldw	ra,4(sp)
 800f0a4:	df000017 	ldw	fp,0(sp)
 800f0a8:	dec00204 	addi	sp,sp,8
 800f0ac:	f800283a 	ret

0800f0b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f0b0:	defffd04 	addi	sp,sp,-12
 800f0b4:	dfc00215 	stw	ra,8(sp)
 800f0b8:	df000115 	stw	fp,4(sp)
 800f0bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800f0c0:	008200b4 	movhi	r2,2050
 800f0c4:	10a4ca04 	addi	r2,r2,-27864
 800f0c8:	10800017 	ldw	r2,0(r2)
 800f0cc:	1005003a 	cmpeq	r2,r2,zero
 800f0d0:	1000061e 	bne	r2,zero,800f0ec <alt_get_errno+0x3c>
 800f0d4:	008200b4 	movhi	r2,2050
 800f0d8:	10a4ca04 	addi	r2,r2,-27864
 800f0dc:	10800017 	ldw	r2,0(r2)
 800f0e0:	103ee83a 	callr	r2
 800f0e4:	e0bfff15 	stw	r2,-4(fp)
 800f0e8:	00000306 	br	800f0f8 <alt_get_errno+0x48>
 800f0ec:	008200b4 	movhi	r2,2050
 800f0f0:	10ab9404 	addi	r2,r2,-20912
 800f0f4:	e0bfff15 	stw	r2,-4(fp)
 800f0f8:	e0bfff17 	ldw	r2,-4(fp)
}
 800f0fc:	e037883a 	mov	sp,fp
 800f100:	dfc00117 	ldw	ra,4(sp)
 800f104:	df000017 	ldw	fp,0(sp)
 800f108:	dec00204 	addi	sp,sp,8
 800f10c:	f800283a 	ret

0800f110 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800f110:	defffd04 	addi	sp,sp,-12
 800f114:	dfc00215 	stw	ra,8(sp)
 800f118:	df000115 	stw	fp,4(sp)
 800f11c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800f120:	0009883a 	mov	r4,zero
 800f124:	800f5d80 	call	800f5d8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800f128:	800f60c0 	call	800f60c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800f12c:	01020074 	movhi	r4,2049
 800f130:	211dff04 	addi	r4,r4,30716
 800f134:	01420074 	movhi	r5,2049
 800f138:	295dff04 	addi	r5,r5,30716
 800f13c:	01820074 	movhi	r6,2049
 800f140:	319dff04 	addi	r6,r6,30716
 800f144:	80164900 	call	8016490 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800f148:	8015f740 	call	8015f74 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800f14c:	01020074 	movhi	r4,2049
 800f150:	2117f604 	addi	r4,r4,24536
 800f154:	8016bf80 	call	8016bf8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800f158:	d126d917 	ldw	r4,-25756(gp)
 800f15c:	d166da17 	ldw	r5,-25752(gp)
 800f160:	d1a6db17 	ldw	r6,-25748(gp)
 800f164:	80043100 	call	8004310 <main>
 800f168:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800f16c:	01000044 	movi	r4,1
 800f170:	800eaf80 	call	800eaf8 <close>
  exit (result);
 800f174:	e13fff17 	ldw	r4,-4(fp)
 800f178:	8016c0c0 	call	8016c0c <exit>

0800f17c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800f17c:	defffe04 	addi	sp,sp,-8
 800f180:	df000115 	stw	fp,4(sp)
 800f184:	df000104 	addi	fp,sp,4
 800f188:	e13fff15 	stw	r4,-4(fp)
}
 800f18c:	e037883a 	mov	sp,fp
 800f190:	df000017 	ldw	fp,0(sp)
 800f194:	dec00104 	addi	sp,sp,4
 800f198:	f800283a 	ret

0800f19c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800f19c:	defffe04 	addi	sp,sp,-8
 800f1a0:	df000115 	stw	fp,4(sp)
 800f1a4:	df000104 	addi	fp,sp,4
 800f1a8:	e13fff15 	stw	r4,-4(fp)
}
 800f1ac:	e037883a 	mov	sp,fp
 800f1b0:	df000017 	ldw	fp,0(sp)
 800f1b4:	dec00104 	addi	sp,sp,4
 800f1b8:	f800283a 	ret

0800f1bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800f1bc:	defff704 	addi	sp,sp,-36
 800f1c0:	dfc00815 	stw	ra,32(sp)
 800f1c4:	df000715 	stw	fp,28(sp)
 800f1c8:	df000704 	addi	fp,sp,28
 800f1cc:	e13ffb15 	stw	r4,-20(fp)
 800f1d0:	e17ffc15 	stw	r5,-16(fp)
 800f1d4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f1d8:	e0bffb17 	ldw	r2,-20(fp)
 800f1dc:	1004803a 	cmplt	r2,r2,zero
 800f1e0:	1000081e 	bne	r2,zero,800f204 <read+0x48>
 800f1e4:	e0bffb17 	ldw	r2,-20(fp)
 800f1e8:	10800324 	muli	r2,r2,12
 800f1ec:	1007883a 	mov	r3,r2
 800f1f0:	008200b4 	movhi	r2,2050
 800f1f4:	10a02704 	addi	r2,r2,-32612
 800f1f8:	1887883a 	add	r3,r3,r2
 800f1fc:	e0ffff15 	stw	r3,-4(fp)
 800f200:	00000106 	br	800f208 <read+0x4c>
 800f204:	e03fff15 	stw	zero,-4(fp)
 800f208:	e0bfff17 	ldw	r2,-4(fp)
 800f20c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 800f210:	e0bffa17 	ldw	r2,-24(fp)
 800f214:	1005003a 	cmpeq	r2,r2,zero
 800f218:	1000241e 	bne	r2,zero,800f2ac <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f21c:	e0bffa17 	ldw	r2,-24(fp)
 800f220:	10800217 	ldw	r2,8(r2)
 800f224:	108000cc 	andi	r2,r2,3
 800f228:	10800060 	cmpeqi	r2,r2,1
 800f22c:	10001a1e 	bne	r2,zero,800f298 <read+0xdc>
 800f230:	e0bffa17 	ldw	r2,-24(fp)
 800f234:	10800017 	ldw	r2,0(r2)
 800f238:	10800517 	ldw	r2,20(r2)
 800f23c:	1005003a 	cmpeq	r2,r2,zero
 800f240:	1000151e 	bne	r2,zero,800f298 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800f244:	e0bffa17 	ldw	r2,-24(fp)
 800f248:	10800017 	ldw	r2,0(r2)
 800f24c:	10800517 	ldw	r2,20(r2)
 800f250:	e17ffc17 	ldw	r5,-16(fp)
 800f254:	e1bffd17 	ldw	r6,-12(fp)
 800f258:	e13ffa17 	ldw	r4,-24(fp)
 800f25c:	103ee83a 	callr	r2
 800f260:	e0bff915 	stw	r2,-28(fp)
 800f264:	e0bff917 	ldw	r2,-28(fp)
 800f268:	1004403a 	cmpge	r2,r2,zero
 800f26c:	1000071e 	bne	r2,zero,800f28c <read+0xd0>
        {
          ALT_ERRNO = -rval;
 800f270:	800f2dc0 	call	800f2dc <alt_get_errno>
 800f274:	e0fff917 	ldw	r3,-28(fp)
 800f278:	00c7c83a 	sub	r3,zero,r3
 800f27c:	10c00015 	stw	r3,0(r2)
          return -1;
 800f280:	00bfffc4 	movi	r2,-1
 800f284:	e0bffe15 	stw	r2,-8(fp)
 800f288:	00000e06 	br	800f2c4 <read+0x108>
        }
        return rval;
 800f28c:	e0bff917 	ldw	r2,-28(fp)
 800f290:	e0bffe15 	stw	r2,-8(fp)
 800f294:	00000b06 	br	800f2c4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800f298:	800f2dc0 	call	800f2dc <alt_get_errno>
 800f29c:	1007883a 	mov	r3,r2
 800f2a0:	00800344 	movi	r2,13
 800f2a4:	18800015 	stw	r2,0(r3)
 800f2a8:	00000406 	br	800f2bc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800f2ac:	800f2dc0 	call	800f2dc <alt_get_errno>
 800f2b0:	1007883a 	mov	r3,r2
 800f2b4:	00801444 	movi	r2,81
 800f2b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f2bc:	00bfffc4 	movi	r2,-1
 800f2c0:	e0bffe15 	stw	r2,-8(fp)
 800f2c4:	e0bffe17 	ldw	r2,-8(fp)
}
 800f2c8:	e037883a 	mov	sp,fp
 800f2cc:	dfc00117 	ldw	ra,4(sp)
 800f2d0:	df000017 	ldw	fp,0(sp)
 800f2d4:	dec00204 	addi	sp,sp,8
 800f2d8:	f800283a 	ret

0800f2dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f2dc:	defffd04 	addi	sp,sp,-12
 800f2e0:	dfc00215 	stw	ra,8(sp)
 800f2e4:	df000115 	stw	fp,4(sp)
 800f2e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800f2ec:	008200b4 	movhi	r2,2050
 800f2f0:	10a4ca04 	addi	r2,r2,-27864
 800f2f4:	10800017 	ldw	r2,0(r2)
 800f2f8:	1005003a 	cmpeq	r2,r2,zero
 800f2fc:	1000061e 	bne	r2,zero,800f318 <alt_get_errno+0x3c>
 800f300:	008200b4 	movhi	r2,2050
 800f304:	10a4ca04 	addi	r2,r2,-27864
 800f308:	10800017 	ldw	r2,0(r2)
 800f30c:	103ee83a 	callr	r2
 800f310:	e0bfff15 	stw	r2,-4(fp)
 800f314:	00000306 	br	800f324 <alt_get_errno+0x48>
 800f318:	008200b4 	movhi	r2,2050
 800f31c:	10ab9404 	addi	r2,r2,-20912
 800f320:	e0bfff15 	stw	r2,-4(fp)
 800f324:	e0bfff17 	ldw	r2,-4(fp)
}
 800f328:	e037883a 	mov	sp,fp
 800f32c:	dfc00117 	ldw	ra,4(sp)
 800f330:	df000017 	ldw	fp,0(sp)
 800f334:	dec00204 	addi	sp,sp,8
 800f338:	f800283a 	ret

0800f33c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800f33c:	defffe04 	addi	sp,sp,-8
 800f340:	df000115 	stw	fp,4(sp)
 800f344:	df000104 	addi	fp,sp,4
 800f348:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800f34c:	e0bfff17 	ldw	r2,-4(fp)
 800f350:	108000d0 	cmplti	r2,r2,3
 800f354:	10000d1e 	bne	r2,zero,800f38c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800f358:	e0bfff17 	ldw	r2,-4(fp)
 800f35c:	00c200b4 	movhi	r3,2050
 800f360:	18e02704 	addi	r3,r3,-32612
 800f364:	10800324 	muli	r2,r2,12
 800f368:	10c5883a 	add	r2,r2,r3
 800f36c:	10800204 	addi	r2,r2,8
 800f370:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800f374:	e0bfff17 	ldw	r2,-4(fp)
 800f378:	00c200b4 	movhi	r3,2050
 800f37c:	18e02704 	addi	r3,r3,-32612
 800f380:	10800324 	muli	r2,r2,12
 800f384:	10c5883a 	add	r2,r2,r3
 800f388:	10000015 	stw	zero,0(r2)
  }
}
 800f38c:	e037883a 	mov	sp,fp
 800f390:	df000017 	ldw	fp,0(sp)
 800f394:	dec00104 	addi	sp,sp,4
 800f398:	f800283a 	ret

0800f39c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800f39c:	defff804 	addi	sp,sp,-32
 800f3a0:	df000715 	stw	fp,28(sp)
 800f3a4:	df000704 	addi	fp,sp,28
 800f3a8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f3ac:	0005303a 	rdctl	r2,status
 800f3b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f3b4:	e0fffb17 	ldw	r3,-20(fp)
 800f3b8:	00bfff84 	movi	r2,-2
 800f3bc:	1884703a 	and	r2,r3,r2
 800f3c0:	1001703a 	wrctl	status,r2
  
  return context;
 800f3c4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800f3c8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800f3cc:	d0a00c17 	ldw	r2,-32720(gp)
 800f3d0:	10c000c4 	addi	r3,r2,3
 800f3d4:	00bfff04 	movi	r2,-4
 800f3d8:	1884703a 	and	r2,r3,r2
 800f3dc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800f3e0:	d0e00c17 	ldw	r3,-32720(gp)
 800f3e4:	e0bffe17 	ldw	r2,-8(fp)
 800f3e8:	1887883a 	add	r3,r3,r2
 800f3ec:	00840034 	movhi	r2,4096
 800f3f0:	10800004 	addi	r2,r2,0
 800f3f4:	10c0072e 	bgeu	r2,r3,800f414 <sbrk+0x78>
 800f3f8:	e0bffd17 	ldw	r2,-12(fp)
 800f3fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f400:	e0bffa17 	ldw	r2,-24(fp)
 800f404:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800f408:	00bfffc4 	movi	r2,-1
 800f40c:	e0bfff15 	stw	r2,-4(fp)
 800f410:	00000c06 	br	800f444 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 800f414:	d0a00c17 	ldw	r2,-32720(gp)
 800f418:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 800f41c:	d0e00c17 	ldw	r3,-32720(gp)
 800f420:	e0bffe17 	ldw	r2,-8(fp)
 800f424:	1885883a 	add	r2,r3,r2
 800f428:	d0a00c15 	stw	r2,-32720(gp)
 800f42c:	e0bffd17 	ldw	r2,-12(fp)
 800f430:	e0bff915 	stw	r2,-28(fp)
 800f434:	e0bff917 	ldw	r2,-28(fp)
 800f438:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800f43c:	e0bffc17 	ldw	r2,-16(fp)
 800f440:	e0bfff15 	stw	r2,-4(fp)
 800f444:	e0bfff17 	ldw	r2,-4(fp)
} 
 800f448:	e037883a 	mov	sp,fp
 800f44c:	df000017 	ldw	fp,0(sp)
 800f450:	dec00104 	addi	sp,sp,4
 800f454:	f800283a 	ret

0800f458 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800f458:	defff704 	addi	sp,sp,-36
 800f45c:	dfc00815 	stw	ra,32(sp)
 800f460:	df000715 	stw	fp,28(sp)
 800f464:	df000704 	addi	fp,sp,28
 800f468:	e13ffb15 	stw	r4,-20(fp)
 800f46c:	e17ffc15 	stw	r5,-16(fp)
 800f470:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f474:	e0bffb17 	ldw	r2,-20(fp)
 800f478:	1004803a 	cmplt	r2,r2,zero
 800f47c:	1000081e 	bne	r2,zero,800f4a0 <write+0x48>
 800f480:	e0bffb17 	ldw	r2,-20(fp)
 800f484:	10800324 	muli	r2,r2,12
 800f488:	1007883a 	mov	r3,r2
 800f48c:	008200b4 	movhi	r2,2050
 800f490:	10a02704 	addi	r2,r2,-32612
 800f494:	1887883a 	add	r3,r3,r2
 800f498:	e0ffff15 	stw	r3,-4(fp)
 800f49c:	00000106 	br	800f4a4 <write+0x4c>
 800f4a0:	e03fff15 	stw	zero,-4(fp)
 800f4a4:	e0bfff17 	ldw	r2,-4(fp)
 800f4a8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 800f4ac:	e0bffa17 	ldw	r2,-24(fp)
 800f4b0:	1005003a 	cmpeq	r2,r2,zero
 800f4b4:	1000241e 	bne	r2,zero,800f548 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800f4b8:	e0bffa17 	ldw	r2,-24(fp)
 800f4bc:	10800217 	ldw	r2,8(r2)
 800f4c0:	108000cc 	andi	r2,r2,3
 800f4c4:	1005003a 	cmpeq	r2,r2,zero
 800f4c8:	10001a1e 	bne	r2,zero,800f534 <write+0xdc>
 800f4cc:	e0bffa17 	ldw	r2,-24(fp)
 800f4d0:	10800017 	ldw	r2,0(r2)
 800f4d4:	10800617 	ldw	r2,24(r2)
 800f4d8:	1005003a 	cmpeq	r2,r2,zero
 800f4dc:	1000151e 	bne	r2,zero,800f534 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800f4e0:	e0bffa17 	ldw	r2,-24(fp)
 800f4e4:	10800017 	ldw	r2,0(r2)
 800f4e8:	10800617 	ldw	r2,24(r2)
 800f4ec:	e17ffc17 	ldw	r5,-16(fp)
 800f4f0:	e1bffd17 	ldw	r6,-12(fp)
 800f4f4:	e13ffa17 	ldw	r4,-24(fp)
 800f4f8:	103ee83a 	callr	r2
 800f4fc:	e0bff915 	stw	r2,-28(fp)
 800f500:	e0bff917 	ldw	r2,-28(fp)
 800f504:	1004403a 	cmpge	r2,r2,zero
 800f508:	1000071e 	bne	r2,zero,800f528 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 800f50c:	800f5780 	call	800f578 <alt_get_errno>
 800f510:	e0fff917 	ldw	r3,-28(fp)
 800f514:	00c7c83a 	sub	r3,zero,r3
 800f518:	10c00015 	stw	r3,0(r2)
        return -1;
 800f51c:	00bfffc4 	movi	r2,-1
 800f520:	e0bffe15 	stw	r2,-8(fp)
 800f524:	00000e06 	br	800f560 <write+0x108>
      }
      return rval;
 800f528:	e0bff917 	ldw	r2,-28(fp)
 800f52c:	e0bffe15 	stw	r2,-8(fp)
 800f530:	00000b06 	br	800f560 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800f534:	800f5780 	call	800f578 <alt_get_errno>
 800f538:	1007883a 	mov	r3,r2
 800f53c:	00800344 	movi	r2,13
 800f540:	18800015 	stw	r2,0(r3)
 800f544:	00000406 	br	800f558 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800f548:	800f5780 	call	800f578 <alt_get_errno>
 800f54c:	1007883a 	mov	r3,r2
 800f550:	00801444 	movi	r2,81
 800f554:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f558:	00bfffc4 	movi	r2,-1
 800f55c:	e0bffe15 	stw	r2,-8(fp)
 800f560:	e0bffe17 	ldw	r2,-8(fp)
}
 800f564:	e037883a 	mov	sp,fp
 800f568:	dfc00117 	ldw	ra,4(sp)
 800f56c:	df000017 	ldw	fp,0(sp)
 800f570:	dec00204 	addi	sp,sp,8
 800f574:	f800283a 	ret

0800f578 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f578:	defffd04 	addi	sp,sp,-12
 800f57c:	dfc00215 	stw	ra,8(sp)
 800f580:	df000115 	stw	fp,4(sp)
 800f584:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800f588:	008200b4 	movhi	r2,2050
 800f58c:	10a4ca04 	addi	r2,r2,-27864
 800f590:	10800017 	ldw	r2,0(r2)
 800f594:	1005003a 	cmpeq	r2,r2,zero
 800f598:	1000061e 	bne	r2,zero,800f5b4 <alt_get_errno+0x3c>
 800f59c:	008200b4 	movhi	r2,2050
 800f5a0:	10a4ca04 	addi	r2,r2,-27864
 800f5a4:	10800017 	ldw	r2,0(r2)
 800f5a8:	103ee83a 	callr	r2
 800f5ac:	e0bfff15 	stw	r2,-4(fp)
 800f5b0:	00000306 	br	800f5c0 <alt_get_errno+0x48>
 800f5b4:	008200b4 	movhi	r2,2050
 800f5b8:	10ab9404 	addi	r2,r2,-20912
 800f5bc:	e0bfff15 	stw	r2,-4(fp)
 800f5c0:	e0bfff17 	ldw	r2,-4(fp)
}
 800f5c4:	e037883a 	mov	sp,fp
 800f5c8:	dfc00117 	ldw	ra,4(sp)
 800f5cc:	df000017 	ldw	fp,0(sp)
 800f5d0:	dec00204 	addi	sp,sp,8
 800f5d4:	f800283a 	ret

0800f5d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800f5d8:	defffd04 	addi	sp,sp,-12
 800f5dc:	dfc00215 	stw	ra,8(sp)
 800f5e0:	df000115 	stw	fp,4(sp)
 800f5e4:	df000104 	addi	fp,sp,4
 800f5e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 800f5ec:	80169700 	call	8016970 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800f5f0:	00800044 	movi	r2,1
 800f5f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800f5f8:	e037883a 	mov	sp,fp
 800f5fc:	dfc00117 	ldw	ra,4(sp)
 800f600:	df000017 	ldw	fp,0(sp)
 800f604:	dec00204 	addi	sp,sp,8
 800f608:	f800283a 	ret

0800f60c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800f60c:	defffd04 	addi	sp,sp,-12
 800f610:	dfc00215 	stw	ra,8(sp)
 800f614:	df000115 	stw	fp,4(sp)
 800f618:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 800f61c:	010200b4 	movhi	r4,2050
 800f620:	21209104 	addi	r4,r4,-32188
 800f624:	000b883a 	mov	r5,zero
 800f628:	000d883a 	mov	r6,zero
 800f62c:	800f9d40 	call	800f9d4 <altera_avalon_jtag_uart_init>
 800f630:	010200b4 	movhi	r4,2050
 800f634:	21208704 	addi	r4,r4,-32228
 800f638:	800f8540 	call	800f854 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
 800f63c:	008200b4 	movhi	r2,2050
 800f640:	10a49f04 	addi	r2,r2,-28036
 800f644:	10800a17 	ldw	r2,40(r2)
 800f648:	10800017 	ldw	r2,0(r2)
 800f64c:	1007883a 	mov	r3,r2
 800f650:	008200b4 	movhi	r2,2050
 800f654:	10a49f04 	addi	r2,r2,-28036
 800f658:	10c00b15 	stw	r3,44(r2)
 800f65c:	008200b4 	movhi	r2,2050
 800f660:	10a49f04 	addi	r2,r2,-28036
 800f664:	10800a17 	ldw	r2,40(r2)
 800f668:	10800104 	addi	r2,r2,4
 800f66c:	10800017 	ldw	r2,0(r2)
 800f670:	1007883a 	mov	r3,r2
 800f674:	008200b4 	movhi	r2,2050
 800f678:	10a49f04 	addi	r2,r2,-28036
 800f67c:	10c00c15 	stw	r3,48(r2)
 800f680:	008200b4 	movhi	r2,2050
 800f684:	10a49f04 	addi	r2,r2,-28036
 800f688:	10800a17 	ldw	r2,40(r2)
 800f68c:	10800204 	addi	r2,r2,8
 800f690:	10800017 	ldw	r2,0(r2)
 800f694:	10ffffcc 	andi	r3,r2,65535
 800f698:	008200b4 	movhi	r2,2050
 800f69c:	10a49f04 	addi	r2,r2,-28036
 800f6a0:	10c00f15 	stw	r3,60(r2)
 800f6a4:	008200b4 	movhi	r2,2050
 800f6a8:	10a49f04 	addi	r2,r2,-28036
 800f6ac:	10800a17 	ldw	r2,40(r2)
 800f6b0:	10800204 	addi	r2,r2,8
 800f6b4:	10800017 	ldw	r2,0(r2)
 800f6b8:	1005d43a 	srai	r2,r2,16
 800f6bc:	10ffffcc 	andi	r3,r2,65535
 800f6c0:	008200b4 	movhi	r2,2050
 800f6c4:	10a49f04 	addi	r2,r2,-28036
 800f6c8:	10c01015 	stw	r3,64(r2)
 800f6cc:	008200b4 	movhi	r2,2050
 800f6d0:	10a49f04 	addi	r2,r2,-28036
 800f6d4:	10800a17 	ldw	r2,40(r2)
 800f6d8:	10800304 	addi	r2,r2,12
 800f6dc:	10800017 	ldw	r2,0(r2)
 800f6e0:	1005d07a 	srai	r2,r2,1
 800f6e4:	10c0004c 	andi	r3,r2,1
 800f6e8:	008200b4 	movhi	r2,2050
 800f6ec:	10a49f04 	addi	r2,r2,-28036
 800f6f0:	10c00d15 	stw	r3,52(r2)
 800f6f4:	008200b4 	movhi	r2,2050
 800f6f8:	10a49f04 	addi	r2,r2,-28036
 800f6fc:	10800a17 	ldw	r2,40(r2)
 800f700:	10800304 	addi	r2,r2,12
 800f704:	10800017 	ldw	r2,0(r2)
 800f708:	1005d13a 	srai	r2,r2,4
 800f70c:	10c003cc 	andi	r3,r2,15
 800f710:	008200b4 	movhi	r2,2050
 800f714:	10a49f04 	addi	r2,r2,-28036
 800f718:	10c00e15 	stw	r3,56(r2)
 800f71c:	008200b4 	movhi	r2,2050
 800f720:	10a49f04 	addi	r2,r2,-28036
 800f724:	10800a17 	ldw	r2,40(r2)
 800f728:	10800304 	addi	r2,r2,12
 800f72c:	10800017 	ldw	r2,0(r2)
 800f730:	1005d43a 	srai	r2,r2,16
 800f734:	1007883a 	mov	r3,r2
 800f738:	00bfffc4 	movi	r2,-1
 800f73c:	1884703a 	and	r2,r3,r2
 800f740:	e0bfff45 	stb	r2,-3(fp)
 800f744:	008200b4 	movhi	r2,2050
 800f748:	10a49f04 	addi	r2,r2,-28036
 800f74c:	10800a17 	ldw	r2,40(r2)
 800f750:	10800304 	addi	r2,r2,12
 800f754:	10800017 	ldw	r2,0(r2)
 800f758:	1005d63a 	srai	r2,r2,24
 800f75c:	1007883a 	mov	r3,r2
 800f760:	00bfffc4 	movi	r2,-1
 800f764:	1884703a 	and	r2,r3,r2
 800f768:	e0bfff05 	stb	r2,-4(fp)
 800f76c:	008200b4 	movhi	r2,2050
 800f770:	10a49f04 	addi	r2,r2,-28036
 800f774:	10800e17 	ldw	r2,56(r2)
 800f778:	10800058 	cmpnei	r2,r2,1
 800f77c:	1000041e 	bne	r2,zero,800f790 <alt_sys_init+0x184>
 800f780:	008200b4 	movhi	r2,2050
 800f784:	10a49f04 	addi	r2,r2,-28036
 800f788:	10001115 	stw	zero,68(r2)
 800f78c:	00000e06 	br	800f7c8 <alt_sys_init+0x1bc>
 800f790:	008200b4 	movhi	r2,2050
 800f794:	10a49f04 	addi	r2,r2,-28036
 800f798:	10800e17 	ldw	r2,56(r2)
 800f79c:	10800098 	cmpnei	r2,r2,2
 800f7a0:	1000051e 	bne	r2,zero,800f7b8 <alt_sys_init+0x1ac>
 800f7a4:	00c200b4 	movhi	r3,2050
 800f7a8:	18e49f04 	addi	r3,r3,-28036
 800f7ac:	00800044 	movi	r2,1
 800f7b0:	18801115 	stw	r2,68(r3)
 800f7b4:	00000406 	br	800f7c8 <alt_sys_init+0x1bc>
 800f7b8:	00c200b4 	movhi	r3,2050
 800f7bc:	18e49f04 	addi	r3,r3,-28036
 800f7c0:	00800084 	movi	r2,2
 800f7c4:	18801115 	stw	r2,68(r3)
 800f7c8:	e0ffff43 	ldbu	r3,-3(fp)
 800f7cc:	00800804 	movi	r2,32
 800f7d0:	10c7c83a 	sub	r3,r2,r3
 800f7d4:	00bfffc4 	movi	r2,-1
 800f7d8:	10c6d83a 	srl	r3,r2,r3
 800f7dc:	008200b4 	movhi	r2,2050
 800f7e0:	10a49f04 	addi	r2,r2,-28036
 800f7e4:	10c01215 	stw	r3,72(r2)
 800f7e8:	e0ffff43 	ldbu	r3,-3(fp)
 800f7ec:	008200b4 	movhi	r2,2050
 800f7f0:	10a49f04 	addi	r2,r2,-28036
 800f7f4:	10801117 	ldw	r2,68(r2)
 800f7f8:	1887883a 	add	r3,r3,r2
 800f7fc:	008200b4 	movhi	r2,2050
 800f800:	10a49f04 	addi	r2,r2,-28036
 800f804:	10c01315 	stw	r3,76(r2)
 800f808:	e0ffff03 	ldbu	r3,-4(fp)
 800f80c:	00800804 	movi	r2,32
 800f810:	10c7c83a 	sub	r3,r2,r3
 800f814:	00bfffc4 	movi	r2,-1
 800f818:	10c6d83a 	srl	r3,r2,r3
 800f81c:	008200b4 	movhi	r2,2050
 800f820:	10a49f04 	addi	r2,r2,-28036
 800f824:	10c01415 	stw	r3,80(r2)
 800f828:	010200b4 	movhi	r4,2050
 800f82c:	21249f04 	addi	r4,r4,-28036
 800f830:	800f8540 	call	800f854 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 800f834:	010200b4 	movhi	r4,2050
 800f838:	2124b404 	addi	r4,r4,-27952
 800f83c:	800f8540 	call	800f854 <alt_dev_reg>
}
 800f840:	e037883a 	mov	sp,fp
 800f844:	dfc00117 	ldw	ra,4(sp)
 800f848:	df000017 	ldw	fp,0(sp)
 800f84c:	dec00204 	addi	sp,sp,8
 800f850:	f800283a 	ret

0800f854 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f854:	defffd04 	addi	sp,sp,-12
 800f858:	dfc00215 	stw	ra,8(sp)
 800f85c:	df000115 	stw	fp,4(sp)
 800f860:	df000104 	addi	fp,sp,4
 800f864:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f868:	e13fff17 	ldw	r4,-4(fp)
 800f86c:	014200b4 	movhi	r5,2050
 800f870:	2964c704 	addi	r5,r5,-27876
 800f874:	8015e600 	call	8015e60 <alt_dev_llist_insert>
}
 800f878:	e037883a 	mov	sp,fp
 800f87c:	dfc00117 	ldw	ra,4(sp)
 800f880:	df000017 	ldw	fp,0(sp)
 800f884:	dec00204 	addi	sp,sp,8
 800f888:	f800283a 	ret

0800f88c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f88c:	defffa04 	addi	sp,sp,-24
 800f890:	dfc00515 	stw	ra,20(sp)
 800f894:	df000415 	stw	fp,16(sp)
 800f898:	df000404 	addi	fp,sp,16
 800f89c:	e13ffd15 	stw	r4,-12(fp)
 800f8a0:	e17ffe15 	stw	r5,-8(fp)
 800f8a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f8a8:	e0bffd17 	ldw	r2,-12(fp)
 800f8ac:	10800017 	ldw	r2,0(r2)
 800f8b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f8b4:	e0bffc17 	ldw	r2,-16(fp)
 800f8b8:	11000a04 	addi	r4,r2,40
 800f8bc:	e0bffd17 	ldw	r2,-12(fp)
 800f8c0:	11c00217 	ldw	r7,8(r2)
 800f8c4:	e17ffe17 	ldw	r5,-8(fp)
 800f8c8:	e1bfff17 	ldw	r6,-4(fp)
 800f8cc:	800fed40 	call	800fed4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f8d0:	e037883a 	mov	sp,fp
 800f8d4:	dfc00117 	ldw	ra,4(sp)
 800f8d8:	df000017 	ldw	fp,0(sp)
 800f8dc:	dec00204 	addi	sp,sp,8
 800f8e0:	f800283a 	ret

0800f8e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f8e4:	defffa04 	addi	sp,sp,-24
 800f8e8:	dfc00515 	stw	ra,20(sp)
 800f8ec:	df000415 	stw	fp,16(sp)
 800f8f0:	df000404 	addi	fp,sp,16
 800f8f4:	e13ffd15 	stw	r4,-12(fp)
 800f8f8:	e17ffe15 	stw	r5,-8(fp)
 800f8fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f900:	e0bffd17 	ldw	r2,-12(fp)
 800f904:	10800017 	ldw	r2,0(r2)
 800f908:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f90c:	e0bffc17 	ldw	r2,-16(fp)
 800f910:	11000a04 	addi	r4,r2,40
 800f914:	e0bffd17 	ldw	r2,-12(fp)
 800f918:	11c00217 	ldw	r7,8(r2)
 800f91c:	e17ffe17 	ldw	r5,-8(fp)
 800f920:	e1bfff17 	ldw	r6,-4(fp)
 800f924:	80100f80 	call	80100f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f928:	e037883a 	mov	sp,fp
 800f92c:	dfc00117 	ldw	ra,4(sp)
 800f930:	df000017 	ldw	fp,0(sp)
 800f934:	dec00204 	addi	sp,sp,8
 800f938:	f800283a 	ret

0800f93c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f93c:	defffc04 	addi	sp,sp,-16
 800f940:	dfc00315 	stw	ra,12(sp)
 800f944:	df000215 	stw	fp,8(sp)
 800f948:	df000204 	addi	fp,sp,8
 800f94c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f950:	e0bfff17 	ldw	r2,-4(fp)
 800f954:	10800017 	ldw	r2,0(r2)
 800f958:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f95c:	e0bffe17 	ldw	r2,-8(fp)
 800f960:	11000a04 	addi	r4,r2,40
 800f964:	e0bfff17 	ldw	r2,-4(fp)
 800f968:	11400217 	ldw	r5,8(r2)
 800f96c:	800fd6c0 	call	800fd6c <altera_avalon_jtag_uart_close>
}
 800f970:	e037883a 	mov	sp,fp
 800f974:	dfc00117 	ldw	ra,4(sp)
 800f978:	df000017 	ldw	fp,0(sp)
 800f97c:	dec00204 	addi	sp,sp,8
 800f980:	f800283a 	ret

0800f984 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f984:	defffa04 	addi	sp,sp,-24
 800f988:	dfc00515 	stw	ra,20(sp)
 800f98c:	df000415 	stw	fp,16(sp)
 800f990:	df000404 	addi	fp,sp,16
 800f994:	e13ffd15 	stw	r4,-12(fp)
 800f998:	e17ffe15 	stw	r5,-8(fp)
 800f99c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f9a0:	e0bffd17 	ldw	r2,-12(fp)
 800f9a4:	10800017 	ldw	r2,0(r2)
 800f9a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f9ac:	e0bffc17 	ldw	r2,-16(fp)
 800f9b0:	11000a04 	addi	r4,r2,40
 800f9b4:	e17ffe17 	ldw	r5,-8(fp)
 800f9b8:	e1bfff17 	ldw	r6,-4(fp)
 800f9bc:	800fde00 	call	800fde0 <altera_avalon_jtag_uart_ioctl>
}
 800f9c0:	e037883a 	mov	sp,fp
 800f9c4:	dfc00117 	ldw	ra,4(sp)
 800f9c8:	df000017 	ldw	fp,0(sp)
 800f9cc:	dec00204 	addi	sp,sp,8
 800f9d0:	f800283a 	ret

0800f9d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f9d4:	defffa04 	addi	sp,sp,-24
 800f9d8:	dfc00515 	stw	ra,20(sp)
 800f9dc:	df000415 	stw	fp,16(sp)
 800f9e0:	df000404 	addi	fp,sp,16
 800f9e4:	e13ffd15 	stw	r4,-12(fp)
 800f9e8:	e17ffe15 	stw	r5,-8(fp)
 800f9ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f9f0:	e0fffd17 	ldw	r3,-12(fp)
 800f9f4:	00800044 	movi	r2,1
 800f9f8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f9fc:	e0bffd17 	ldw	r2,-12(fp)
 800fa00:	10800017 	ldw	r2,0(r2)
 800fa04:	11000104 	addi	r4,r2,4
 800fa08:	e0bffd17 	ldw	r2,-12(fp)
 800fa0c:	10800817 	ldw	r2,32(r2)
 800fa10:	1007883a 	mov	r3,r2
 800fa14:	2005883a 	mov	r2,r4
 800fa18:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800fa1c:	e13ffe17 	ldw	r4,-8(fp)
 800fa20:	e17fff17 	ldw	r5,-4(fp)
 800fa24:	d8000015 	stw	zero,0(sp)
 800fa28:	01820074 	movhi	r6,2049
 800fa2c:	31bea504 	addi	r6,r6,-1388
 800fa30:	e1fffd17 	ldw	r7,-12(fp)
 800fa34:	80161000 	call	8016100 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800fa38:	e0bffd17 	ldw	r2,-12(fp)
 800fa3c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800fa40:	e0bffd17 	ldw	r2,-12(fp)
 800fa44:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800fa48:	008200b4 	movhi	r2,2050
 800fa4c:	10aba904 	addi	r2,r2,-20828
 800fa50:	10800017 	ldw	r2,0(r2)
 800fa54:	100b883a 	mov	r5,r2
 800fa58:	01820074 	movhi	r6,2049
 800fa5c:	31bf2f04 	addi	r6,r6,-836
 800fa60:	e1fffd17 	ldw	r7,-12(fp)
 800fa64:	8015cc80 	call	8015cc8 <alt_alarm_start>
 800fa68:	1004403a 	cmpge	r2,r2,zero
 800fa6c:	1000041e 	bne	r2,zero,800fa80 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800fa70:	e0fffd17 	ldw	r3,-12(fp)
 800fa74:	00a00034 	movhi	r2,32768
 800fa78:	10bfffc4 	addi	r2,r2,-1
 800fa7c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800fa80:	e037883a 	mov	sp,fp
 800fa84:	dfc00117 	ldw	ra,4(sp)
 800fa88:	df000017 	ldw	fp,0(sp)
 800fa8c:	dec00204 	addi	sp,sp,8
 800fa90:	f800283a 	ret

0800fa94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800fa94:	defff804 	addi	sp,sp,-32
 800fa98:	df000715 	stw	fp,28(sp)
 800fa9c:	df000704 	addi	fp,sp,28
 800faa0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800faa4:	e0bfff17 	ldw	r2,-4(fp)
 800faa8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 800faac:	e0bffe17 	ldw	r2,-8(fp)
 800fab0:	10800017 	ldw	r2,0(r2)
 800fab4:	e0bffd15 	stw	r2,-12(fp)
 800fab8:	00000006 	br	800fabc <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fabc:	e0bffd17 	ldw	r2,-12(fp)
 800fac0:	10800104 	addi	r2,r2,4
 800fac4:	10800037 	ldwio	r2,0(r2)
 800fac8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800facc:	e0bffc17 	ldw	r2,-16(fp)
 800fad0:	1080c00c 	andi	r2,r2,768
 800fad4:	1005003a 	cmpeq	r2,r2,zero
 800fad8:	1000741e 	bne	r2,zero,800fcac <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800fadc:	e0bffc17 	ldw	r2,-16(fp)
 800fae0:	1080400c 	andi	r2,r2,256
 800fae4:	1005003a 	cmpeq	r2,r2,zero
 800fae8:	1000351e 	bne	r2,zero,800fbc0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800faec:	00800074 	movhi	r2,1
 800faf0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800faf4:	e0bffe17 	ldw	r2,-8(fp)
 800faf8:	10800a17 	ldw	r2,40(r2)
 800fafc:	10800044 	addi	r2,r2,1
 800fb00:	1081ffcc 	andi	r2,r2,2047
 800fb04:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 800fb08:	e0bffe17 	ldw	r2,-8(fp)
 800fb0c:	10c00b17 	ldw	r3,44(r2)
 800fb10:	e0bffa17 	ldw	r2,-24(fp)
 800fb14:	18801626 	beq	r3,r2,800fb70 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800fb18:	e0bffd17 	ldw	r2,-12(fp)
 800fb1c:	10800037 	ldwio	r2,0(r2)
 800fb20:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800fb24:	e0bffb17 	ldw	r2,-20(fp)
 800fb28:	10a0000c 	andi	r2,r2,32768
 800fb2c:	1005003a 	cmpeq	r2,r2,zero
 800fb30:	10000f1e 	bne	r2,zero,800fb70 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800fb34:	e0bffe17 	ldw	r2,-8(fp)
 800fb38:	10c00a17 	ldw	r3,40(r2)
 800fb3c:	e0bffb17 	ldw	r2,-20(fp)
 800fb40:	1009883a 	mov	r4,r2
 800fb44:	e0bffe17 	ldw	r2,-8(fp)
 800fb48:	1885883a 	add	r2,r3,r2
 800fb4c:	10800e04 	addi	r2,r2,56
 800fb50:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fb54:	e0bffe17 	ldw	r2,-8(fp)
 800fb58:	10800a17 	ldw	r2,40(r2)
 800fb5c:	10800044 	addi	r2,r2,1
 800fb60:	10c1ffcc 	andi	r3,r2,2047
 800fb64:	e0bffe17 	ldw	r2,-8(fp)
 800fb68:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800fb6c:	003fe106 	br	800faf4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800fb70:	e0bffb17 	ldw	r2,-20(fp)
 800fb74:	10bfffec 	andhi	r2,r2,65535
 800fb78:	1005003a 	cmpeq	r2,r2,zero
 800fb7c:	1000101e 	bne	r2,zero,800fbc0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fb80:	e0bffe17 	ldw	r2,-8(fp)
 800fb84:	10c00817 	ldw	r3,32(r2)
 800fb88:	00bfff84 	movi	r2,-2
 800fb8c:	1886703a 	and	r3,r3,r2
 800fb90:	e0bffe17 	ldw	r2,-8(fp)
 800fb94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800fb98:	e0bffd17 	ldw	r2,-12(fp)
 800fb9c:	11000104 	addi	r4,r2,4
 800fba0:	e0bffe17 	ldw	r2,-8(fp)
 800fba4:	10800817 	ldw	r2,32(r2)
 800fba8:	1007883a 	mov	r3,r2
 800fbac:	2005883a 	mov	r2,r4
 800fbb0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fbb4:	e0bffd17 	ldw	r2,-12(fp)
 800fbb8:	10800104 	addi	r2,r2,4
 800fbbc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800fbc0:	e0bffc17 	ldw	r2,-16(fp)
 800fbc4:	1080800c 	andi	r2,r2,512
 800fbc8:	1005003a 	cmpeq	r2,r2,zero
 800fbcc:	103fbb1e 	bne	r2,zero,800fabc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800fbd0:	e0bffc17 	ldw	r2,-16(fp)
 800fbd4:	10bfffec 	andhi	r2,r2,65535
 800fbd8:	1004d43a 	srli	r2,r2,16
 800fbdc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800fbe0:	00001506 	br	800fc38 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800fbe4:	e13ffd17 	ldw	r4,-12(fp)
 800fbe8:	e0bffe17 	ldw	r2,-8(fp)
 800fbec:	10c00d17 	ldw	r3,52(r2)
 800fbf0:	e0bffe17 	ldw	r2,-8(fp)
 800fbf4:	1885883a 	add	r2,r3,r2
 800fbf8:	10820e04 	addi	r2,r2,2104
 800fbfc:	10800003 	ldbu	r2,0(r2)
 800fc00:	10c03fcc 	andi	r3,r2,255
 800fc04:	18c0201c 	xori	r3,r3,128
 800fc08:	18ffe004 	addi	r3,r3,-128
 800fc0c:	2005883a 	mov	r2,r4
 800fc10:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fc14:	e0bffe17 	ldw	r2,-8(fp)
 800fc18:	10800d17 	ldw	r2,52(r2)
 800fc1c:	10800044 	addi	r2,r2,1
 800fc20:	10c1ffcc 	andi	r3,r2,2047
 800fc24:	e0bffe17 	ldw	r2,-8(fp)
 800fc28:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800fc2c:	e0bff917 	ldw	r2,-28(fp)
 800fc30:	10bfffc4 	addi	r2,r2,-1
 800fc34:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800fc38:	e0bff917 	ldw	r2,-28(fp)
 800fc3c:	1005003a 	cmpeq	r2,r2,zero
 800fc40:	1000051e 	bne	r2,zero,800fc58 <altera_avalon_jtag_uart_irq+0x1c4>
 800fc44:	e0bffe17 	ldw	r2,-8(fp)
 800fc48:	10c00d17 	ldw	r3,52(r2)
 800fc4c:	e0bffe17 	ldw	r2,-8(fp)
 800fc50:	10800c17 	ldw	r2,48(r2)
 800fc54:	18bfe31e 	bne	r3,r2,800fbe4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800fc58:	e0bff917 	ldw	r2,-28(fp)
 800fc5c:	1005003a 	cmpeq	r2,r2,zero
 800fc60:	103f961e 	bne	r2,zero,800fabc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800fc64:	e0bffe17 	ldw	r2,-8(fp)
 800fc68:	10c00817 	ldw	r3,32(r2)
 800fc6c:	00bfff44 	movi	r2,-3
 800fc70:	1886703a 	and	r3,r3,r2
 800fc74:	e0bffe17 	ldw	r2,-8(fp)
 800fc78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fc7c:	e0bffe17 	ldw	r2,-8(fp)
 800fc80:	10800017 	ldw	r2,0(r2)
 800fc84:	11000104 	addi	r4,r2,4
 800fc88:	e0bffe17 	ldw	r2,-8(fp)
 800fc8c:	10800817 	ldw	r2,32(r2)
 800fc90:	1007883a 	mov	r3,r2
 800fc94:	2005883a 	mov	r2,r4
 800fc98:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fc9c:	e0bffd17 	ldw	r2,-12(fp)
 800fca0:	10800104 	addi	r2,r2,4
 800fca4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800fca8:	003f8406 	br	800fabc <altera_avalon_jtag_uart_irq+0x28>
}
 800fcac:	e037883a 	mov	sp,fp
 800fcb0:	df000017 	ldw	fp,0(sp)
 800fcb4:	dec00104 	addi	sp,sp,4
 800fcb8:	f800283a 	ret

0800fcbc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800fcbc:	defffc04 	addi	sp,sp,-16
 800fcc0:	df000315 	stw	fp,12(sp)
 800fcc4:	df000304 	addi	fp,sp,12
 800fcc8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800fccc:	e0bfff17 	ldw	r2,-4(fp)
 800fcd0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800fcd4:	e0bffe17 	ldw	r2,-8(fp)
 800fcd8:	10800017 	ldw	r2,0(r2)
 800fcdc:	10800104 	addi	r2,r2,4
 800fce0:	10800037 	ldwio	r2,0(r2)
 800fce4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800fce8:	e0bffd17 	ldw	r2,-12(fp)
 800fcec:	1081000c 	andi	r2,r2,1024
 800fcf0:	1005003a 	cmpeq	r2,r2,zero
 800fcf4:	10000c1e 	bne	r2,zero,800fd28 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800fcf8:	e0bffe17 	ldw	r2,-8(fp)
 800fcfc:	10800017 	ldw	r2,0(r2)
 800fd00:	11000104 	addi	r4,r2,4
 800fd04:	e0bffe17 	ldw	r2,-8(fp)
 800fd08:	10800817 	ldw	r2,32(r2)
 800fd0c:	10810014 	ori	r2,r2,1024
 800fd10:	1007883a 	mov	r3,r2
 800fd14:	2005883a 	mov	r2,r4
 800fd18:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 800fd1c:	e0bffe17 	ldw	r2,-8(fp)
 800fd20:	10000915 	stw	zero,36(r2)
 800fd24:	00000a06 	br	800fd50 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800fd28:	e0bffe17 	ldw	r2,-8(fp)
 800fd2c:	10c00917 	ldw	r3,36(r2)
 800fd30:	00a00034 	movhi	r2,32768
 800fd34:	10bfff04 	addi	r2,r2,-4
 800fd38:	10c00536 	bltu	r2,r3,800fd50 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 800fd3c:	e0bffe17 	ldw	r2,-8(fp)
 800fd40:	10800917 	ldw	r2,36(r2)
 800fd44:	10c00044 	addi	r3,r2,1
 800fd48:	e0bffe17 	ldw	r2,-8(fp)
 800fd4c:	10c00915 	stw	r3,36(r2)
 800fd50:	008200b4 	movhi	r2,2050
 800fd54:	10aba904 	addi	r2,r2,-20828
 800fd58:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800fd5c:	e037883a 	mov	sp,fp
 800fd60:	df000017 	ldw	fp,0(sp)
 800fd64:	dec00104 	addi	sp,sp,4
 800fd68:	f800283a 	ret

0800fd6c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800fd6c:	defffc04 	addi	sp,sp,-16
 800fd70:	df000315 	stw	fp,12(sp)
 800fd74:	df000304 	addi	fp,sp,12
 800fd78:	e13ffd15 	stw	r4,-12(fp)
 800fd7c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fd80:	00000706 	br	800fda0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 800fd84:	e0bffe17 	ldw	r2,-8(fp)
 800fd88:	1090000c 	andi	r2,r2,16384
 800fd8c:	1005003a 	cmpeq	r2,r2,zero
 800fd90:	1000031e 	bne	r2,zero,800fda0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 800fd94:	00bffd44 	movi	r2,-11
 800fd98:	e0bfff15 	stw	r2,-4(fp)
 800fd9c:	00000b06 	br	800fdcc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fda0:	e0bffd17 	ldw	r2,-12(fp)
 800fda4:	10c00d17 	ldw	r3,52(r2)
 800fda8:	e0bffd17 	ldw	r2,-12(fp)
 800fdac:	10800c17 	ldw	r2,48(r2)
 800fdb0:	18800526 	beq	r3,r2,800fdc8 <altera_avalon_jtag_uart_close+0x5c>
 800fdb4:	e0bffd17 	ldw	r2,-12(fp)
 800fdb8:	10c00917 	ldw	r3,36(r2)
 800fdbc:	e0bffd17 	ldw	r2,-12(fp)
 800fdc0:	10800117 	ldw	r2,4(r2)
 800fdc4:	18bfef36 	bltu	r3,r2,800fd84 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800fdc8:	e03fff15 	stw	zero,-4(fp)
 800fdcc:	e0bfff17 	ldw	r2,-4(fp)
}
 800fdd0:	e037883a 	mov	sp,fp
 800fdd4:	df000017 	ldw	fp,0(sp)
 800fdd8:	dec00104 	addi	sp,sp,4
 800fddc:	f800283a 	ret

0800fde0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800fde0:	defff804 	addi	sp,sp,-32
 800fde4:	df000715 	stw	fp,28(sp)
 800fde8:	df000704 	addi	fp,sp,28
 800fdec:	e13ffb15 	stw	r4,-20(fp)
 800fdf0:	e17ffc15 	stw	r5,-16(fp)
 800fdf4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 800fdf8:	00bff9c4 	movi	r2,-25
 800fdfc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 800fe00:	e0bffc17 	ldw	r2,-16(fp)
 800fe04:	e0bfff15 	stw	r2,-4(fp)
 800fe08:	e0ffff17 	ldw	r3,-4(fp)
 800fe0c:	189a8060 	cmpeqi	r2,r3,27137
 800fe10:	1000041e 	bne	r2,zero,800fe24 <altera_avalon_jtag_uart_ioctl+0x44>
 800fe14:	e0ffff17 	ldw	r3,-4(fp)
 800fe18:	189a80a0 	cmpeqi	r2,r3,27138
 800fe1c:	10001b1e 	bne	r2,zero,800fe8c <altera_avalon_jtag_uart_ioctl+0xac>
 800fe20:	00002706 	br	800fec0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800fe24:	e0bffb17 	ldw	r2,-20(fp)
 800fe28:	10c00117 	ldw	r3,4(r2)
 800fe2c:	00a00034 	movhi	r2,32768
 800fe30:	10bfffc4 	addi	r2,r2,-1
 800fe34:	18802226 	beq	r3,r2,800fec0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 800fe38:	e0bffd17 	ldw	r2,-12(fp)
 800fe3c:	10800017 	ldw	r2,0(r2)
 800fe40:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800fe44:	e0bff917 	ldw	r2,-28(fp)
 800fe48:	10800090 	cmplti	r2,r2,2
 800fe4c:	1000071e 	bne	r2,zero,800fe6c <altera_avalon_jtag_uart_ioctl+0x8c>
 800fe50:	e0fff917 	ldw	r3,-28(fp)
 800fe54:	00a00034 	movhi	r2,32768
 800fe58:	10bfffc4 	addi	r2,r2,-1
 800fe5c:	18800326 	beq	r3,r2,800fe6c <altera_avalon_jtag_uart_ioctl+0x8c>
 800fe60:	e0bff917 	ldw	r2,-28(fp)
 800fe64:	e0bffe15 	stw	r2,-8(fp)
 800fe68:	00000306 	br	800fe78 <altera_avalon_jtag_uart_ioctl+0x98>
 800fe6c:	00e00034 	movhi	r3,32768
 800fe70:	18ffff84 	addi	r3,r3,-2
 800fe74:	e0fffe15 	stw	r3,-8(fp)
 800fe78:	e0bffb17 	ldw	r2,-20(fp)
 800fe7c:	e0fffe17 	ldw	r3,-8(fp)
 800fe80:	10c00115 	stw	r3,4(r2)
      rc = 0;
 800fe84:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 800fe88:	00000d06 	br	800fec0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800fe8c:	e0bffb17 	ldw	r2,-20(fp)
 800fe90:	10c00117 	ldw	r3,4(r2)
 800fe94:	00a00034 	movhi	r2,32768
 800fe98:	10bfffc4 	addi	r2,r2,-1
 800fe9c:	18800826 	beq	r3,r2,800fec0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800fea0:	e13ffd17 	ldw	r4,-12(fp)
 800fea4:	e0bffb17 	ldw	r2,-20(fp)
 800fea8:	10c00917 	ldw	r3,36(r2)
 800feac:	e0bffb17 	ldw	r2,-20(fp)
 800feb0:	10800117 	ldw	r2,4(r2)
 800feb4:	1885803a 	cmpltu	r2,r3,r2
 800feb8:	20800015 	stw	r2,0(r4)
      rc = 0;
 800febc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 800fec0:	e0bffa17 	ldw	r2,-24(fp)
}
 800fec4:	e037883a 	mov	sp,fp
 800fec8:	df000017 	ldw	fp,0(sp)
 800fecc:	dec00104 	addi	sp,sp,4
 800fed0:	f800283a 	ret

0800fed4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800fed4:	defff204 	addi	sp,sp,-56
 800fed8:	dfc00d15 	stw	ra,52(sp)
 800fedc:	df000c15 	stw	fp,48(sp)
 800fee0:	df000c04 	addi	fp,sp,48
 800fee4:	e13ffb15 	stw	r4,-20(fp)
 800fee8:	e17ffc15 	stw	r5,-16(fp)
 800feec:	e1bffd15 	stw	r6,-12(fp)
 800fef0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 800fef4:	e0bffc17 	ldw	r2,-16(fp)
 800fef8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fefc:	00004806 	br	8010020 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800ff00:	e0bffb17 	ldw	r2,-20(fp)
 800ff04:	10800a17 	ldw	r2,40(r2)
 800ff08:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800ff0c:	e0bffb17 	ldw	r2,-20(fp)
 800ff10:	10800b17 	ldw	r2,44(r2)
 800ff14:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 800ff18:	e0fff717 	ldw	r3,-36(fp)
 800ff1c:	e0bff617 	ldw	r2,-40(fp)
 800ff20:	18800536 	bltu	r3,r2,800ff38 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800ff24:	e0bff717 	ldw	r2,-36(fp)
 800ff28:	e0fff617 	ldw	r3,-40(fp)
 800ff2c:	10c5c83a 	sub	r2,r2,r3
 800ff30:	e0bff815 	stw	r2,-32(fp)
 800ff34:	00000406 	br	800ff48 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800ff38:	00820004 	movi	r2,2048
 800ff3c:	e0fff617 	ldw	r3,-40(fp)
 800ff40:	10c5c83a 	sub	r2,r2,r3
 800ff44:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 800ff48:	e0bff817 	ldw	r2,-32(fp)
 800ff4c:	1005003a 	cmpeq	r2,r2,zero
 800ff50:	10001f1e 	bne	r2,zero,800ffd0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 800ff54:	e0fffd17 	ldw	r3,-12(fp)
 800ff58:	e0bff817 	ldw	r2,-32(fp)
 800ff5c:	1880022e 	bgeu	r3,r2,800ff68 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800ff60:	e0bffd17 	ldw	r2,-12(fp)
 800ff64:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800ff68:	e0bffb17 	ldw	r2,-20(fp)
 800ff6c:	10c00e04 	addi	r3,r2,56
 800ff70:	e0bff617 	ldw	r2,-40(fp)
 800ff74:	1887883a 	add	r3,r3,r2
 800ff78:	e0bffa17 	ldw	r2,-24(fp)
 800ff7c:	1009883a 	mov	r4,r2
 800ff80:	180b883a 	mov	r5,r3
 800ff84:	e1bff817 	ldw	r6,-32(fp)
 800ff88:	8005adc0 	call	8005adc <memcpy>
      ptr   += n;
 800ff8c:	e0fff817 	ldw	r3,-32(fp)
 800ff90:	e0bffa17 	ldw	r2,-24(fp)
 800ff94:	10c5883a 	add	r2,r2,r3
 800ff98:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 800ff9c:	e0fffd17 	ldw	r3,-12(fp)
 800ffa0:	e0bff817 	ldw	r2,-32(fp)
 800ffa4:	1885c83a 	sub	r2,r3,r2
 800ffa8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ffac:	e0fff617 	ldw	r3,-40(fp)
 800ffb0:	e0bff817 	ldw	r2,-32(fp)
 800ffb4:	1885883a 	add	r2,r3,r2
 800ffb8:	10c1ffcc 	andi	r3,r2,2047
 800ffbc:	e0bffb17 	ldw	r2,-20(fp)
 800ffc0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800ffc4:	e0bffd17 	ldw	r2,-12(fp)
 800ffc8:	10800048 	cmpgei	r2,r2,1
 800ffcc:	103fcc1e 	bne	r2,zero,800ff00 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 800ffd0:	e0fffa17 	ldw	r3,-24(fp)
 800ffd4:	e0bffc17 	ldw	r2,-16(fp)
 800ffd8:	1880141e 	bne	r3,r2,801002c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800ffdc:	e0bffe17 	ldw	r2,-8(fp)
 800ffe0:	1090000c 	andi	r2,r2,16384
 800ffe4:	1004c03a 	cmpne	r2,r2,zero
 800ffe8:	1000101e 	bne	r2,zero,801002c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800ffec:	e0bffb17 	ldw	r2,-20(fp)
 800fff0:	10c00a17 	ldw	r3,40(r2)
 800fff4:	e0bff717 	ldw	r2,-36(fp)
 800fff8:	1880051e 	bne	r3,r2,8010010 <altera_avalon_jtag_uart_read+0x13c>
 800fffc:	e0bffb17 	ldw	r2,-20(fp)
 8010000:	10c00917 	ldw	r3,36(r2)
 8010004:	e0bffb17 	ldw	r2,-20(fp)
 8010008:	10800117 	ldw	r2,4(r2)
 801000c:	18bff736 	bltu	r3,r2,800ffec <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8010010:	e0bffb17 	ldw	r2,-20(fp)
 8010014:	10c00a17 	ldw	r3,40(r2)
 8010018:	e0bff717 	ldw	r2,-36(fp)
 801001c:	18800326 	beq	r3,r2,801002c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8010020:	e0bffd17 	ldw	r2,-12(fp)
 8010024:	10800048 	cmpgei	r2,r2,1
 8010028:	103fb51e 	bne	r2,zero,800ff00 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801002c:	e0fffa17 	ldw	r3,-24(fp)
 8010030:	e0bffc17 	ldw	r2,-16(fp)
 8010034:	18801926 	beq	r3,r2,801009c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010038:	0005303a 	rdctl	r2,status
 801003c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010040:	e0fff517 	ldw	r3,-44(fp)
 8010044:	00bfff84 	movi	r2,-2
 8010048:	1884703a 	and	r2,r3,r2
 801004c:	1001703a 	wrctl	status,r2
  
  return context;
 8010050:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8010054:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010058:	e0bffb17 	ldw	r2,-20(fp)
 801005c:	10800817 	ldw	r2,32(r2)
 8010060:	10c00054 	ori	r3,r2,1
 8010064:	e0bffb17 	ldw	r2,-20(fp)
 8010068:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801006c:	e0bffb17 	ldw	r2,-20(fp)
 8010070:	10800017 	ldw	r2,0(r2)
 8010074:	11000104 	addi	r4,r2,4
 8010078:	e0bffb17 	ldw	r2,-20(fp)
 801007c:	10800817 	ldw	r2,32(r2)
 8010080:	1007883a 	mov	r3,r2
 8010084:	2005883a 	mov	r2,r4
 8010088:	10c00035 	stwio	r3,0(r2)
 801008c:	e0bff917 	ldw	r2,-28(fp)
 8010090:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010094:	e0bff417 	ldw	r2,-48(fp)
 8010098:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801009c:	e0fffa17 	ldw	r3,-24(fp)
 80100a0:	e0bffc17 	ldw	r2,-16(fp)
 80100a4:	18800526 	beq	r3,r2,80100bc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 80100a8:	e0fffa17 	ldw	r3,-24(fp)
 80100ac:	e0bffc17 	ldw	r2,-16(fp)
 80100b0:	1887c83a 	sub	r3,r3,r2
 80100b4:	e0ffff15 	stw	r3,-4(fp)
 80100b8:	00000906 	br	80100e0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 80100bc:	e0bffe17 	ldw	r2,-8(fp)
 80100c0:	1090000c 	andi	r2,r2,16384
 80100c4:	1005003a 	cmpeq	r2,r2,zero
 80100c8:	1000031e 	bne	r2,zero,80100d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80100cc:	00bffd44 	movi	r2,-11
 80100d0:	e0bfff15 	stw	r2,-4(fp)
 80100d4:	00000206 	br	80100e0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 80100d8:	00bffec4 	movi	r2,-5
 80100dc:	e0bfff15 	stw	r2,-4(fp)
 80100e0:	e0bfff17 	ldw	r2,-4(fp)
}
 80100e4:	e037883a 	mov	sp,fp
 80100e8:	dfc00117 	ldw	ra,4(sp)
 80100ec:	df000017 	ldw	fp,0(sp)
 80100f0:	dec00204 	addi	sp,sp,8
 80100f4:	f800283a 	ret

080100f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80100f8:	defff204 	addi	sp,sp,-56
 80100fc:	dfc00d15 	stw	ra,52(sp)
 8010100:	df000c15 	stw	fp,48(sp)
 8010104:	df000c04 	addi	fp,sp,48
 8010108:	e13ffb15 	stw	r4,-20(fp)
 801010c:	e17ffc15 	stw	r5,-16(fp)
 8010110:	e1bffd15 	stw	r6,-12(fp)
 8010114:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8010118:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801011c:	e0bffc17 	ldw	r2,-16(fp)
 8010120:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010124:	00003a06 	br	8010210 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8010128:	e0bffb17 	ldw	r2,-20(fp)
 801012c:	10800c17 	ldw	r2,48(r2)
 8010130:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 8010134:	e0bffb17 	ldw	r2,-20(fp)
 8010138:	10800d17 	ldw	r2,52(r2)
 801013c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 8010140:	e0fffa17 	ldw	r3,-24(fp)
 8010144:	e0bff917 	ldw	r2,-28(fp)
 8010148:	1880062e 	bgeu	r3,r2,8010164 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801014c:	e0fff917 	ldw	r3,-28(fp)
 8010150:	e0bffa17 	ldw	r2,-24(fp)
 8010154:	1885c83a 	sub	r2,r3,r2
 8010158:	10bfffc4 	addi	r2,r2,-1
 801015c:	e0bff815 	stw	r2,-32(fp)
 8010160:	00000c06 	br	8010194 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 8010164:	e0bff917 	ldw	r2,-28(fp)
 8010168:	1005003a 	cmpeq	r2,r2,zero
 801016c:	1000051e 	bne	r2,zero,8010184 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8010170:	00820004 	movi	r2,2048
 8010174:	e0fffa17 	ldw	r3,-24(fp)
 8010178:	10c5c83a 	sub	r2,r2,r3
 801017c:	e0bff815 	stw	r2,-32(fp)
 8010180:	00000406 	br	8010194 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8010184:	0081ffc4 	movi	r2,2047
 8010188:	e0fffa17 	ldw	r3,-24(fp)
 801018c:	10c5c83a 	sub	r2,r2,r3
 8010190:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8010194:	e0bff817 	ldw	r2,-32(fp)
 8010198:	1005003a 	cmpeq	r2,r2,zero
 801019c:	10001f1e 	bne	r2,zero,801021c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 80101a0:	e0fffd17 	ldw	r3,-12(fp)
 80101a4:	e0bff817 	ldw	r2,-32(fp)
 80101a8:	1880022e 	bgeu	r3,r2,80101b4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 80101ac:	e0bffd17 	ldw	r2,-12(fp)
 80101b0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80101b4:	e0bffb17 	ldw	r2,-20(fp)
 80101b8:	10c20e04 	addi	r3,r2,2104
 80101bc:	e0bffa17 	ldw	r2,-24(fp)
 80101c0:	1885883a 	add	r2,r3,r2
 80101c4:	e0fffc17 	ldw	r3,-16(fp)
 80101c8:	1009883a 	mov	r4,r2
 80101cc:	180b883a 	mov	r5,r3
 80101d0:	e1bff817 	ldw	r6,-32(fp)
 80101d4:	8005adc0 	call	8005adc <memcpy>
      ptr   += n;
 80101d8:	e0fff817 	ldw	r3,-32(fp)
 80101dc:	e0bffc17 	ldw	r2,-16(fp)
 80101e0:	10c5883a 	add	r2,r2,r3
 80101e4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 80101e8:	e0fffd17 	ldw	r3,-12(fp)
 80101ec:	e0bff817 	ldw	r2,-32(fp)
 80101f0:	1885c83a 	sub	r2,r3,r2
 80101f4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80101f8:	e0fffa17 	ldw	r3,-24(fp)
 80101fc:	e0bff817 	ldw	r2,-32(fp)
 8010200:	1885883a 	add	r2,r3,r2
 8010204:	10c1ffcc 	andi	r3,r2,2047
 8010208:	e0bffb17 	ldw	r2,-20(fp)
 801020c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010210:	e0bffd17 	ldw	r2,-12(fp)
 8010214:	10800048 	cmpgei	r2,r2,1
 8010218:	103fc31e 	bne	r2,zero,8010128 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801021c:	0005303a 	rdctl	r2,status
 8010220:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010224:	e0fff517 	ldw	r3,-44(fp)
 8010228:	00bfff84 	movi	r2,-2
 801022c:	1884703a 	and	r2,r3,r2
 8010230:	1001703a 	wrctl	status,r2
  
  return context;
 8010234:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8010238:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801023c:	e0bffb17 	ldw	r2,-20(fp)
 8010240:	10800817 	ldw	r2,32(r2)
 8010244:	10c00094 	ori	r3,r2,2
 8010248:	e0bffb17 	ldw	r2,-20(fp)
 801024c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010250:	e0bffb17 	ldw	r2,-20(fp)
 8010254:	10800017 	ldw	r2,0(r2)
 8010258:	11000104 	addi	r4,r2,4
 801025c:	e0bffb17 	ldw	r2,-20(fp)
 8010260:	10800817 	ldw	r2,32(r2)
 8010264:	1007883a 	mov	r3,r2
 8010268:	2005883a 	mov	r2,r4
 801026c:	10c00035 	stwio	r3,0(r2)
 8010270:	e0bff717 	ldw	r2,-36(fp)
 8010274:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010278:	e0bff417 	ldw	r2,-48(fp)
 801027c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8010280:	e0bffd17 	ldw	r2,-12(fp)
 8010284:	10800050 	cmplti	r2,r2,1
 8010288:	1000111e 	bne	r2,zero,80102d0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 801028c:	e0bffe17 	ldw	r2,-8(fp)
 8010290:	1090000c 	andi	r2,r2,16384
 8010294:	1004c03a 	cmpne	r2,r2,zero
 8010298:	1000101e 	bne	r2,zero,80102dc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801029c:	e0bffb17 	ldw	r2,-20(fp)
 80102a0:	10c00d17 	ldw	r3,52(r2)
 80102a4:	e0bff917 	ldw	r2,-28(fp)
 80102a8:	1880051e 	bne	r3,r2,80102c0 <altera_avalon_jtag_uart_write+0x1c8>
 80102ac:	e0bffb17 	ldw	r2,-20(fp)
 80102b0:	10c00917 	ldw	r3,36(r2)
 80102b4:	e0bffb17 	ldw	r2,-20(fp)
 80102b8:	10800117 	ldw	r2,4(r2)
 80102bc:	18bff736 	bltu	r3,r2,801029c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 80102c0:	e0bffb17 	ldw	r2,-20(fp)
 80102c4:	10c00d17 	ldw	r3,52(r2)
 80102c8:	e0bff917 	ldw	r2,-28(fp)
 80102cc:	18800326 	beq	r3,r2,80102dc <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 80102d0:	e0bffd17 	ldw	r2,-12(fp)
 80102d4:	10800048 	cmpgei	r2,r2,1
 80102d8:	103fcd1e 	bne	r2,zero,8010210 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80102dc:	e0fffc17 	ldw	r3,-16(fp)
 80102e0:	e0bff617 	ldw	r2,-40(fp)
 80102e4:	18800526 	beq	r3,r2,80102fc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 80102e8:	e0fffc17 	ldw	r3,-16(fp)
 80102ec:	e0bff617 	ldw	r2,-40(fp)
 80102f0:	1887c83a 	sub	r3,r3,r2
 80102f4:	e0ffff15 	stw	r3,-4(fp)
 80102f8:	00000906 	br	8010320 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 80102fc:	e0bffe17 	ldw	r2,-8(fp)
 8010300:	1090000c 	andi	r2,r2,16384
 8010304:	1005003a 	cmpeq	r2,r2,zero
 8010308:	1000031e 	bne	r2,zero,8010318 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 801030c:	00bffd44 	movi	r2,-11
 8010310:	e0bfff15 	stw	r2,-4(fp)
 8010314:	00000206 	br	8010320 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 8010318:	00bffec4 	movi	r2,-5
 801031c:	e0bfff15 	stw	r2,-4(fp)
 8010320:	e0bfff17 	ldw	r2,-4(fp)
}
 8010324:	e037883a 	mov	sp,fp
 8010328:	dfc00117 	ldw	ra,4(sp)
 801032c:	df000017 	ldw	fp,0(sp)
 8010330:	dec00204 	addi	sp,sp,8
 8010334:	f800283a 	ret

08010338 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8010338:	defffc04 	addi	sp,sp,-16
 801033c:	dfc00315 	stw	ra,12(sp)
 8010340:	df000215 	stw	fp,8(sp)
 8010344:	df000204 	addi	fp,sp,8
 8010348:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 801034c:	e13fff17 	ldw	r4,-4(fp)
 8010350:	014200b4 	movhi	r5,2050
 8010354:	2964c704 	addi	r5,r5,-27876
 8010358:	801603c0 	call	801603c <alt_find_dev>
 801035c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8010360:	e0bffe17 	ldw	r2,-8(fp)
}
 8010364:	e037883a 	mov	sp,fp
 8010368:	dfc00117 	ldw	ra,4(sp)
 801036c:	df000017 	ldw	fp,0(sp)
 8010370:	dec00204 	addi	sp,sp,8
 8010374:	f800283a 	ret

08010378 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8010378:	defff904 	addi	sp,sp,-28
 801037c:	df000615 	stw	fp,24(sp)
 8010380:	df000604 	addi	fp,sp,24
 8010384:	e13ffb15 	stw	r4,-20(fp)
 8010388:	e17ffc15 	stw	r5,-16(fp)
 801038c:	e1bffd15 	stw	r6,-12(fp)
 8010390:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 8010394:	e0bffb17 	ldw	r2,-20(fp)
 8010398:	10c00f17 	ldw	r3,60(r2)
 801039c:	e0bffd17 	ldw	r2,-12(fp)
 80103a0:	10c0042e 	bgeu	r2,r3,80103b4 <alt_up_pixel_buffer_dma_draw+0x3c>
 80103a4:	e0bffb17 	ldw	r2,-20(fp)
 80103a8:	10c01017 	ldw	r3,64(r2)
 80103ac:	e0bffe17 	ldw	r2,-8(fp)
 80103b0:	10c00336 	bltu	r2,r3,80103c0 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 80103b4:	00bfffc4 	movi	r2,-1
 80103b8:	e0bfff15 	stw	r2,-4(fp)
 80103bc:	00005106 	br	8010504 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
 80103c0:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80103c4:	e0bffb17 	ldw	r2,-20(fp)
 80103c8:	10800d17 	ldw	r2,52(r2)
 80103cc:	1004c03a 	cmpne	r2,r2,zero
 80103d0:	1000151e 	bne	r2,zero,8010428 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 80103d4:	e0bffb17 	ldw	r2,-20(fp)
 80103d8:	10c01217 	ldw	r3,72(r2)
 80103dc:	e0bffd17 	ldw	r2,-12(fp)
 80103e0:	1886703a 	and	r3,r3,r2
 80103e4:	e0bffb17 	ldw	r2,-20(fp)
 80103e8:	10801117 	ldw	r2,68(r2)
 80103ec:	1886983a 	sll	r3,r3,r2
 80103f0:	e0bffa17 	ldw	r2,-24(fp)
 80103f4:	10c4b03a 	or	r2,r2,r3
 80103f8:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 80103fc:	e0bffb17 	ldw	r2,-20(fp)
 8010400:	10c01417 	ldw	r3,80(r2)
 8010404:	e0bffe17 	ldw	r2,-8(fp)
 8010408:	1886703a 	and	r3,r3,r2
 801040c:	e0bffb17 	ldw	r2,-20(fp)
 8010410:	10801317 	ldw	r2,76(r2)
 8010414:	1886983a 	sll	r3,r3,r2
 8010418:	e0bffa17 	ldw	r2,-24(fp)
 801041c:	10c4b03a 	or	r2,r2,r3
 8010420:	e0bffa15 	stw	r2,-24(fp)
 8010424:	00001706 	br	8010484 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8010428:	e0bffb17 	ldw	r2,-20(fp)
 801042c:	10c01217 	ldw	r3,72(r2)
 8010430:	e0bffd17 	ldw	r2,-12(fp)
 8010434:	1886703a 	and	r3,r3,r2
 8010438:	e0bffb17 	ldw	r2,-20(fp)
 801043c:	10801117 	ldw	r2,68(r2)
 8010440:	1886983a 	sll	r3,r3,r2
 8010444:	e0bffa17 	ldw	r2,-24(fp)
 8010448:	10c5883a 	add	r2,r2,r3
 801044c:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 8010450:	e0bffb17 	ldw	r2,-20(fp)
 8010454:	10c01417 	ldw	r3,80(r2)
 8010458:	e0bffe17 	ldw	r2,-8(fp)
 801045c:	1886703a 	and	r3,r3,r2
 8010460:	e0bffb17 	ldw	r2,-20(fp)
 8010464:	10800f17 	ldw	r2,60(r2)
 8010468:	1887383a 	mul	r3,r3,r2
 801046c:	e0bffb17 	ldw	r2,-20(fp)
 8010470:	10801117 	ldw	r2,68(r2)
 8010474:	1886983a 	sll	r3,r3,r2
 8010478:	e0bffa17 	ldw	r2,-24(fp)
 801047c:	10c5883a 	add	r2,r2,r3
 8010480:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8010484:	e0bffb17 	ldw	r2,-20(fp)
 8010488:	10800e17 	ldw	r2,56(r2)
 801048c:	10800058 	cmpnei	r2,r2,1
 8010490:	1000081e 	bne	r2,zero,80104b4 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8010494:	e0bffb17 	ldw	r2,-20(fp)
 8010498:	10800c17 	ldw	r2,48(r2)
 801049c:	1007883a 	mov	r3,r2
 80104a0:	e0bffa17 	ldw	r2,-24(fp)
 80104a4:	1885883a 	add	r2,r3,r2
 80104a8:	e0fffc17 	ldw	r3,-16(fp)
 80104ac:	10c00025 	stbio	r3,0(r2)
 80104b0:	00001306 	br	8010500 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80104b4:	e0bffb17 	ldw	r2,-20(fp)
 80104b8:	10800e17 	ldw	r2,56(r2)
 80104bc:	10800098 	cmpnei	r2,r2,2
 80104c0:	1000081e 	bne	r2,zero,80104e4 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80104c4:	e0bffb17 	ldw	r2,-20(fp)
 80104c8:	10800c17 	ldw	r2,48(r2)
 80104cc:	1007883a 	mov	r3,r2
 80104d0:	e0bffa17 	ldw	r2,-24(fp)
 80104d4:	1885883a 	add	r2,r3,r2
 80104d8:	e0fffc17 	ldw	r3,-16(fp)
 80104dc:	10c0002d 	sthio	r3,0(r2)
 80104e0:	00000706 	br	8010500 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80104e4:	e0bffb17 	ldw	r2,-20(fp)
 80104e8:	10800c17 	ldw	r2,48(r2)
 80104ec:	1007883a 	mov	r3,r2
 80104f0:	e0bffa17 	ldw	r2,-24(fp)
 80104f4:	1885883a 	add	r2,r3,r2
 80104f8:	e0fffc17 	ldw	r3,-16(fp)
 80104fc:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 8010500:	e03fff15 	stw	zero,-4(fp)
 8010504:	e0bfff17 	ldw	r2,-4(fp)
}
 8010508:	e037883a 	mov	sp,fp
 801050c:	df000017 	ldw	fp,0(sp)
 8010510:	dec00104 	addi	sp,sp,4
 8010514:	f800283a 	ret

08010518 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8010518:	defffd04 	addi	sp,sp,-12
 801051c:	df000215 	stw	fp,8(sp)
 8010520:	df000204 	addi	fp,sp,8
 8010524:	e13ffe15 	stw	r4,-8(fp)
 8010528:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 801052c:	e0bffe17 	ldw	r2,-8(fp)
 8010530:	10800a17 	ldw	r2,40(r2)
 8010534:	10800104 	addi	r2,r2,4
 8010538:	e0ffff17 	ldw	r3,-4(fp)
 801053c:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 8010540:	e0bffe17 	ldw	r2,-8(fp)
 8010544:	10800a17 	ldw	r2,40(r2)
 8010548:	10800104 	addi	r2,r2,4
 801054c:	10800037 	ldwio	r2,0(r2)
 8010550:	1007883a 	mov	r3,r2
 8010554:	e0bffe17 	ldw	r2,-8(fp)
 8010558:	10c00c15 	stw	r3,48(r2)
	return 0;
 801055c:	0005883a 	mov	r2,zero
}
 8010560:	e037883a 	mov	sp,fp
 8010564:	df000017 	ldw	fp,0(sp)
 8010568:	dec00104 	addi	sp,sp,4
 801056c:	f800283a 	ret

08010570 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 8010570:	defffe04 	addi	sp,sp,-8
 8010574:	df000115 	stw	fp,4(sp)
 8010578:	df000104 	addi	fp,sp,4
 801057c:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 8010580:	e0bfff17 	ldw	r2,-4(fp)
 8010584:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 8010588:	e0bfff17 	ldw	r2,-4(fp)
 801058c:	10800a17 	ldw	r2,40(r2)
 8010590:	1007883a 	mov	r3,r2
 8010594:	00800044 	movi	r2,1
 8010598:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 801059c:	e0bfff17 	ldw	r2,-4(fp)
 80105a0:	10c00b17 	ldw	r3,44(r2)
 80105a4:	e0bfff17 	ldw	r2,-4(fp)
 80105a8:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 80105ac:	e0bfff17 	ldw	r2,-4(fp)
 80105b0:	11000b15 	stw	r4,44(r2)
	return 0;
 80105b4:	0005883a 	mov	r2,zero
}
 80105b8:	e037883a 	mov	sp,fp
 80105bc:	df000017 	ldw	fp,0(sp)
 80105c0:	dec00104 	addi	sp,sp,4
 80105c4:	f800283a 	ret

080105c8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 80105c8:	defffe04 	addi	sp,sp,-8
 80105cc:	df000115 	stw	fp,4(sp)
 80105d0:	df000104 	addi	fp,sp,4
 80105d4:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 80105d8:	e0bfff17 	ldw	r2,-4(fp)
 80105dc:	10800a17 	ldw	r2,40(r2)
 80105e0:	10800304 	addi	r2,r2,12
 80105e4:	10800037 	ldwio	r2,0(r2)
 80105e8:	1080004c 	andi	r2,r2,1
}
 80105ec:	e037883a 	mov	sp,fp
 80105f0:	df000017 	ldw	fp,0(sp)
 80105f4:	dec00104 	addi	sp,sp,4
 80105f8:	f800283a 	ret

080105fc <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 80105fc:	defff604 	addi	sp,sp,-40
 8010600:	df000915 	stw	fp,36(sp)
 8010604:	df000904 	addi	fp,sp,36
 8010608:	e13ff715 	stw	r4,-36(fp)
 801060c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8010610:	e0bff817 	ldw	r2,-32(fp)
 8010614:	10800058 	cmpnei	r2,r2,1
 8010618:	1000041e 	bne	r2,zero,801062c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
 801061c:	e0bff717 	ldw	r2,-36(fp)
 8010620:	10800c17 	ldw	r2,48(r2)
 8010624:	e0bfff15 	stw	r2,-4(fp)
 8010628:	00000306 	br	8010638 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
 801062c:	e0bff717 	ldw	r2,-36(fp)
 8010630:	10800b17 	ldw	r2,44(r2)
 8010634:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 8010638:	e0bff717 	ldw	r2,-36(fp)
 801063c:	10800f17 	ldw	r2,60(r2)
 8010640:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8010644:	e0bff717 	ldw	r2,-36(fp)
 8010648:	10800e17 	ldw	r2,56(r2)
 801064c:	10800098 	cmpnei	r2,r2,2
 8010650:	1000051e 	bne	r2,zero,8010668 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
 8010654:	e0fffe17 	ldw	r3,-8(fp)
 8010658:	e0fffe17 	ldw	r3,-8(fp)
 801065c:	18c5883a 	add	r2,r3,r3
 8010660:	e0bffe15 	stw	r2,-8(fp)
 8010664:	00000506 	br	801067c <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 8010668:	e13ffe17 	ldw	r4,-8(fp)
 801066c:	e13ffe17 	ldw	r4,-8(fp)
 8010670:	2105883a 	add	r2,r4,r4
 8010674:	1085883a 	add	r2,r2,r2
 8010678:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 801067c:	e0bff717 	ldw	r2,-36(fp)
 8010680:	10801017 	ldw	r2,64(r2)
 8010684:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8010688:	e0bff717 	ldw	r2,-36(fp)
 801068c:	10800d17 	ldw	r2,52(r2)
 8010690:	1004c03a 	cmpne	r2,r2,zero
 8010694:	10001e1e 	bne	r2,zero,8010710 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8010698:	e0bff717 	ldw	r2,-36(fp)
 801069c:	10801317 	ldw	r2,76(r2)
 80106a0:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 80106a4:	e03ffb15 	stw	zero,-20(fp)
 80106a8:	00001506 	br	8010700 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
 80106ac:	e03ffc15 	stw	zero,-16(fp)
 80106b0:	00000706 	br	80106d0 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
 80106b4:	e0ffff17 	ldw	r3,-4(fp)
 80106b8:	e0bffc17 	ldw	r2,-16(fp)
 80106bc:	1885883a 	add	r2,r3,r2
 80106c0:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 80106c4:	e0bffc17 	ldw	r2,-16(fp)
 80106c8:	10800104 	addi	r2,r2,4
 80106cc:	e0bffc15 	stw	r2,-16(fp)
 80106d0:	e0fffc17 	ldw	r3,-16(fp)
 80106d4:	e13ffe17 	ldw	r4,-8(fp)
 80106d8:	193ff636 	bltu	r3,r4,80106b4 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 80106dc:	e0fffa17 	ldw	r3,-24(fp)
 80106e0:	00800044 	movi	r2,1
 80106e4:	10c4983a 	sll	r2,r2,r3
 80106e8:	e0ffff17 	ldw	r3,-4(fp)
 80106ec:	1887883a 	add	r3,r3,r2
 80106f0:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 80106f4:	e13ffb17 	ldw	r4,-20(fp)
 80106f8:	21000044 	addi	r4,r4,1
 80106fc:	e13ffb15 	stw	r4,-20(fp)
 8010700:	e0bffb17 	ldw	r2,-20(fp)
 8010704:	e0fffd17 	ldw	r3,-12(fp)
 8010708:	10ffe836 	bltu	r2,r3,80106ac <alt_up_pixel_buffer_dma_clear_screen+0xb0>
 801070c:	00001006 	br	8010750 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8010710:	e13ffd17 	ldw	r4,-12(fp)
 8010714:	e0bffe17 	ldw	r2,-8(fp)
 8010718:	2089383a 	mul	r4,r4,r2
 801071c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 8010720:	e03ff915 	stw	zero,-28(fp)
 8010724:	00000706 	br	8010744 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
 8010728:	e0ffff17 	ldw	r3,-4(fp)
 801072c:	e0bff917 	ldw	r2,-28(fp)
 8010730:	1885883a 	add	r2,r3,r2
 8010734:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 8010738:	e0fff917 	ldw	r3,-28(fp)
 801073c:	18c00104 	addi	r3,r3,4
 8010740:	e0fff915 	stw	r3,-28(fp)
 8010744:	e0bff917 	ldw	r2,-28(fp)
 8010748:	e13ffd17 	ldw	r4,-12(fp)
 801074c:	113ff636 	bltu	r2,r4,8010728 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8010750:	e037883a 	mov	sp,fp
 8010754:	df000017 	ldw	fp,0(sp)
 8010758:	dec00104 	addi	sp,sp,4
 801075c:	f800283a 	ret

08010760 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 8010760:	deffed04 	addi	sp,sp,-76
 8010764:	df001215 	stw	fp,72(sp)
 8010768:	df001204 	addi	fp,sp,72
 801076c:	e13fee15 	stw	r4,-72(fp)
 8010770:	e17fef15 	stw	r5,-68(fp)
 8010774:	e1bff015 	stw	r6,-64(fp)
 8010778:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 801077c:	e0bfee17 	ldw	r2,-72(fp)
 8010780:	10800f17 	ldw	r2,60(r2)
 8010784:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8010788:	e0bfee17 	ldw	r2,-72(fp)
 801078c:	10801017 	ldw	r2,64(r2)
 8010790:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8010794:	e0bfef17 	ldw	r2,-68(fp)
 8010798:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 801079c:	e0fff117 	ldw	r3,-60(fp)
 80107a0:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 80107a4:	e13ff017 	ldw	r4,-64(fp)
 80107a8:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 80107ac:	e0800117 	ldw	r2,4(fp)
 80107b0:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 80107b4:	e0c00217 	ldw	r3,8(fp)
 80107b8:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 80107bc:	e13ffa17 	ldw	r4,-24(fp)
 80107c0:	e0bffb17 	ldw	r2,-20(fp)
 80107c4:	2080062e 	bgeu	r4,r2,80107e0 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
 80107c8:	e0fffb17 	ldw	r3,-20(fp)
 80107cc:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 80107d0:	e13ffa17 	ldw	r4,-24(fp)
 80107d4:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 80107d8:	e0bffc17 	ldw	r2,-16(fp)
 80107dc:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 80107e0:	e0fff817 	ldw	r3,-32(fp)
 80107e4:	e13ff917 	ldw	r4,-28(fp)
 80107e8:	1900062e 	bgeu	r3,r4,8010804 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
 80107ec:	e0bff917 	ldw	r2,-28(fp)
 80107f0:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 80107f4:	e0fff817 	ldw	r3,-32(fp)
 80107f8:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 80107fc:	e13ffc17 	ldw	r4,-16(fp)
 8010800:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8010804:	e0bffb17 	ldw	r2,-20(fp)
 8010808:	e0fffe17 	ldw	r3,-8(fp)
 801080c:	10c10d2e 	bgeu	r2,r3,8010c44 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
 8010810:	e13ff917 	ldw	r4,-28(fp)
 8010814:	e0bffd17 	ldw	r2,-12(fp)
 8010818:	20800136 	bltu	r4,r2,8010820 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 801081c:	00010906 	br	8010c44 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8010820:	e0fffa17 	ldw	r3,-24(fp)
 8010824:	e13ffe17 	ldw	r4,-8(fp)
 8010828:	19000336 	bltu	r3,r4,8010838 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
 801082c:	e0bffe17 	ldw	r2,-8(fp)
 8010830:	10bfffc4 	addi	r2,r2,-1
 8010834:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8010838:	e0fff817 	ldw	r3,-32(fp)
 801083c:	e13ffd17 	ldw	r4,-12(fp)
 8010840:	19000336 	bltu	r3,r4,8010850 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
 8010844:	e0bffd17 	ldw	r2,-12(fp)
 8010848:	10bfffc4 	addi	r2,r2,-1
 801084c:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8010850:	e0800317 	ldw	r2,12(fp)
 8010854:	10800058 	cmpnei	r2,r2,1
 8010858:	1000041e 	bne	r2,zero,801086c <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
 801085c:	e0bfee17 	ldw	r2,-72(fp)
 8010860:	10800c17 	ldw	r2,48(r2)
 8010864:	e0bfff15 	stw	r2,-4(fp)
 8010868:	00000306 	br	8010878 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
 801086c:	e0bfee17 	ldw	r2,-72(fp)
 8010870:	10800b17 	ldw	r2,44(r2)
 8010874:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8010878:	e0bfee17 	ldw	r2,-72(fp)
 801087c:	10800d17 	ldw	r2,52(r2)
 8010880:	1004c03a 	cmpne	r2,r2,zero
 8010884:	1000721e 	bne	r2,zero,8010a50 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8010888:	e0bfee17 	ldw	r2,-72(fp)
 801088c:	10801317 	ldw	r2,76(r2)
 8010890:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 8010894:	e0bff417 	ldw	r2,-48(fp)
 8010898:	e0fff917 	ldw	r3,-28(fp)
 801089c:	1884983a 	sll	r2,r3,r2
 80108a0:	e13fff17 	ldw	r4,-4(fp)
 80108a4:	2089883a 	add	r4,r4,r2
 80108a8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80108ac:	e0bfee17 	ldw	r2,-72(fp)
 80108b0:	10800e17 	ldw	r2,56(r2)
 80108b4:	10800058 	cmpnei	r2,r2,1
 80108b8:	10001e1e 	bne	r2,zero,8010934 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
 80108bc:	e0bff917 	ldw	r2,-28(fp)
 80108c0:	e0bff515 	stw	r2,-44(fp)
 80108c4:	00001706 	br	8010924 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
 80108c8:	e0fffb17 	ldw	r3,-20(fp)
 80108cc:	e0fff615 	stw	r3,-40(fp)
 80108d0:	00000806 	br	80108f4 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
 80108d4:	e0ffff17 	ldw	r3,-4(fp)
 80108d8:	e0bff617 	ldw	r2,-40(fp)
 80108dc:	1885883a 	add	r2,r3,r2
 80108e0:	e0fff717 	ldw	r3,-36(fp)
 80108e4:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80108e8:	e13ff617 	ldw	r4,-40(fp)
 80108ec:	21000044 	addi	r4,r4,1
 80108f0:	e13ff615 	stw	r4,-40(fp)
 80108f4:	e0bffa17 	ldw	r2,-24(fp)
 80108f8:	e0fff617 	ldw	r3,-40(fp)
 80108fc:	10fff52e 	bgeu	r2,r3,80108d4 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8010900:	e0fff417 	ldw	r3,-48(fp)
 8010904:	00800044 	movi	r2,1
 8010908:	10c4983a 	sll	r2,r2,r3
 801090c:	e13fff17 	ldw	r4,-4(fp)
 8010910:	2089883a 	add	r4,r4,r2
 8010914:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8010918:	e0bff517 	ldw	r2,-44(fp)
 801091c:	10800044 	addi	r2,r2,1
 8010920:	e0bff515 	stw	r2,-44(fp)
 8010924:	e0fff817 	ldw	r3,-32(fp)
 8010928:	e13ff517 	ldw	r4,-44(fp)
 801092c:	193fe62e 	bgeu	r3,r4,80108c8 <alt_up_pixel_buffer_dma_draw_box+0x168>
 8010930:	0000c406 	br	8010c44 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8010934:	e0bfee17 	ldw	r2,-72(fp)
 8010938:	10800e17 	ldw	r2,56(r2)
 801093c:	10800098 	cmpnei	r2,r2,2
 8010940:	1000211e 	bne	r2,zero,80109c8 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
 8010944:	e0bff917 	ldw	r2,-28(fp)
 8010948:	e0bff515 	stw	r2,-44(fp)
 801094c:	00001a06 	br	80109b8 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
 8010950:	e0fffb17 	ldw	r3,-20(fp)
 8010954:	e0fff615 	stw	r3,-40(fp)
 8010958:	00000b06 	br	8010988 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 801095c:	e13ff617 	ldw	r4,-40(fp)
 8010960:	e13ff617 	ldw	r4,-40(fp)
 8010964:	2105883a 	add	r2,r4,r4
 8010968:	1007883a 	mov	r3,r2
 801096c:	e0bfff17 	ldw	r2,-4(fp)
 8010970:	1885883a 	add	r2,r3,r2
 8010974:	e0fff717 	ldw	r3,-36(fp)
 8010978:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 801097c:	e0bff617 	ldw	r2,-40(fp)
 8010980:	10800044 	addi	r2,r2,1
 8010984:	e0bff615 	stw	r2,-40(fp)
 8010988:	e0fffa17 	ldw	r3,-24(fp)
 801098c:	e13ff617 	ldw	r4,-40(fp)
 8010990:	193ff22e 	bgeu	r3,r4,801095c <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 8010994:	e0fff417 	ldw	r3,-48(fp)
 8010998:	00800044 	movi	r2,1
 801099c:	10c4983a 	sll	r2,r2,r3
 80109a0:	e0ffff17 	ldw	r3,-4(fp)
 80109a4:	1887883a 	add	r3,r3,r2
 80109a8:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80109ac:	e13ff517 	ldw	r4,-44(fp)
 80109b0:	21000044 	addi	r4,r4,1
 80109b4:	e13ff515 	stw	r4,-44(fp)
 80109b8:	e0bff817 	ldw	r2,-32(fp)
 80109bc:	e0fff517 	ldw	r3,-44(fp)
 80109c0:	10ffe32e 	bgeu	r2,r3,8010950 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
 80109c4:	00009f06 	br	8010c44 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 80109c8:	e13ff917 	ldw	r4,-28(fp)
 80109cc:	e13ff515 	stw	r4,-44(fp)
 80109d0:	00001b06 	br	8010a40 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
 80109d4:	e0bffb17 	ldw	r2,-20(fp)
 80109d8:	e0bff615 	stw	r2,-40(fp)
 80109dc:	00000c06 	br	8010a10 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 80109e0:	e0fff617 	ldw	r3,-40(fp)
 80109e4:	e0fff617 	ldw	r3,-40(fp)
 80109e8:	18c5883a 	add	r2,r3,r3
 80109ec:	1085883a 	add	r2,r2,r2
 80109f0:	1007883a 	mov	r3,r2
 80109f4:	e0bfff17 	ldw	r2,-4(fp)
 80109f8:	1885883a 	add	r2,r3,r2
 80109fc:	e0fff717 	ldw	r3,-36(fp)
 8010a00:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8010a04:	e13ff617 	ldw	r4,-40(fp)
 8010a08:	21000044 	addi	r4,r4,1
 8010a0c:	e13ff615 	stw	r4,-40(fp)
 8010a10:	e0bffa17 	ldw	r2,-24(fp)
 8010a14:	e0fff617 	ldw	r3,-40(fp)
 8010a18:	10fff12e 	bgeu	r2,r3,80109e0 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8010a1c:	e0fff417 	ldw	r3,-48(fp)
 8010a20:	00800044 	movi	r2,1
 8010a24:	10c4983a 	sll	r2,r2,r3
 8010a28:	e13fff17 	ldw	r4,-4(fp)
 8010a2c:	2089883a 	add	r4,r4,r2
 8010a30:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8010a34:	e0bff517 	ldw	r2,-44(fp)
 8010a38:	10800044 	addi	r2,r2,1
 8010a3c:	e0bff515 	stw	r2,-44(fp)
 8010a40:	e0fff817 	ldw	r3,-32(fp)
 8010a44:	e13ff517 	ldw	r4,-44(fp)
 8010a48:	193fe22e 	bgeu	r3,r4,80109d4 <alt_up_pixel_buffer_dma_draw_box+0x274>
 8010a4c:	00007d06 	br	8010c44 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8010a50:	e0bfee17 	ldw	r2,-72(fp)
 8010a54:	10800e17 	ldw	r2,56(r2)
 8010a58:	10800058 	cmpnei	r2,r2,1
 8010a5c:	1000221e 	bne	r2,zero,8010ae8 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
 8010a60:	e0fff917 	ldw	r3,-28(fp)
 8010a64:	e13ffe17 	ldw	r4,-8(fp)
 8010a68:	1905383a 	mul	r2,r3,r4
 8010a6c:	e0ffff17 	ldw	r3,-4(fp)
 8010a70:	1887883a 	add	r3,r3,r2
 8010a74:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8010a78:	e13ff917 	ldw	r4,-28(fp)
 8010a7c:	e13ff215 	stw	r4,-56(fp)
 8010a80:	00001506 	br	8010ad8 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
 8010a84:	e0bffb17 	ldw	r2,-20(fp)
 8010a88:	e0bff315 	stw	r2,-52(fp)
 8010a8c:	00000806 	br	8010ab0 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8010a90:	e0ffff17 	ldw	r3,-4(fp)
 8010a94:	e0bff317 	ldw	r2,-52(fp)
 8010a98:	1885883a 	add	r2,r3,r2
 8010a9c:	e0fff717 	ldw	r3,-36(fp)
 8010aa0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8010aa4:	e0fff317 	ldw	r3,-52(fp)
 8010aa8:	18c00044 	addi	r3,r3,1
 8010aac:	e0fff315 	stw	r3,-52(fp)
 8010ab0:	e13ffa17 	ldw	r4,-24(fp)
 8010ab4:	e0bff317 	ldw	r2,-52(fp)
 8010ab8:	20bff52e 	bgeu	r4,r2,8010a90 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 8010abc:	e0ffff17 	ldw	r3,-4(fp)
 8010ac0:	e13ffe17 	ldw	r4,-8(fp)
 8010ac4:	1907883a 	add	r3,r3,r4
 8010ac8:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8010acc:	e0bff217 	ldw	r2,-56(fp)
 8010ad0:	10800044 	addi	r2,r2,1
 8010ad4:	e0bff215 	stw	r2,-56(fp)
 8010ad8:	e0fff817 	ldw	r3,-32(fp)
 8010adc:	e13ff217 	ldw	r4,-56(fp)
 8010ae0:	193fe82e 	bgeu	r3,r4,8010a84 <alt_up_pixel_buffer_dma_draw_box+0x324>
 8010ae4:	00005706 	br	8010c44 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8010ae8:	e0bfee17 	ldw	r2,-72(fp)
 8010aec:	10800e17 	ldw	r2,56(r2)
 8010af0:	10800098 	cmpnei	r2,r2,2
 8010af4:	1000291e 	bne	r2,zero,8010b9c <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
 8010af8:	e0fffe17 	ldw	r3,-8(fp)
 8010afc:	e0fffe17 	ldw	r3,-8(fp)
 8010b00:	18c5883a 	add	r2,r3,r3
 8010b04:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8010b08:	e13ff917 	ldw	r4,-28(fp)
 8010b0c:	e0fffe17 	ldw	r3,-8(fp)
 8010b10:	20c5383a 	mul	r2,r4,r3
 8010b14:	e13fff17 	ldw	r4,-4(fp)
 8010b18:	2089883a 	add	r4,r4,r2
 8010b1c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8010b20:	e0bff917 	ldw	r2,-28(fp)
 8010b24:	e0bff215 	stw	r2,-56(fp)
 8010b28:	00001806 	br	8010b8c <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
 8010b2c:	e0fffb17 	ldw	r3,-20(fp)
 8010b30:	e0fff315 	stw	r3,-52(fp)
 8010b34:	00000b06 	br	8010b64 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8010b38:	e13ff317 	ldw	r4,-52(fp)
 8010b3c:	e13ff317 	ldw	r4,-52(fp)
 8010b40:	2105883a 	add	r2,r4,r4
 8010b44:	1007883a 	mov	r3,r2
 8010b48:	e0bfff17 	ldw	r2,-4(fp)
 8010b4c:	1885883a 	add	r2,r3,r2
 8010b50:	e0fff717 	ldw	r3,-36(fp)
 8010b54:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8010b58:	e0bff317 	ldw	r2,-52(fp)
 8010b5c:	10800044 	addi	r2,r2,1
 8010b60:	e0bff315 	stw	r2,-52(fp)
 8010b64:	e0fffa17 	ldw	r3,-24(fp)
 8010b68:	e13ff317 	ldw	r4,-52(fp)
 8010b6c:	193ff22e 	bgeu	r3,r4,8010b38 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 8010b70:	e0bfff17 	ldw	r2,-4(fp)
 8010b74:	e0fffe17 	ldw	r3,-8(fp)
 8010b78:	10c5883a 	add	r2,r2,r3
 8010b7c:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8010b80:	e13ff217 	ldw	r4,-56(fp)
 8010b84:	21000044 	addi	r4,r4,1
 8010b88:	e13ff215 	stw	r4,-56(fp)
 8010b8c:	e0bff817 	ldw	r2,-32(fp)
 8010b90:	e0fff217 	ldw	r3,-56(fp)
 8010b94:	10ffe52e 	bgeu	r2,r3,8010b2c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
 8010b98:	00002a06 	br	8010c44 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8010b9c:	e13ffe17 	ldw	r4,-8(fp)
 8010ba0:	e13ffe17 	ldw	r4,-8(fp)
 8010ba4:	2105883a 	add	r2,r4,r4
 8010ba8:	1085883a 	add	r2,r2,r2
 8010bac:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8010bb0:	e0fff917 	ldw	r3,-28(fp)
 8010bb4:	e13ffe17 	ldw	r4,-8(fp)
 8010bb8:	1905383a 	mul	r2,r3,r4
 8010bbc:	e0ffff17 	ldw	r3,-4(fp)
 8010bc0:	1887883a 	add	r3,r3,r2
 8010bc4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8010bc8:	e13ff917 	ldw	r4,-28(fp)
 8010bcc:	e13ff215 	stw	r4,-56(fp)
 8010bd0:	00001906 	br	8010c38 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
 8010bd4:	e0bffb17 	ldw	r2,-20(fp)
 8010bd8:	e0bff315 	stw	r2,-52(fp)
 8010bdc:	00000c06 	br	8010c10 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8010be0:	e0fff317 	ldw	r3,-52(fp)
 8010be4:	e0fff317 	ldw	r3,-52(fp)
 8010be8:	18c5883a 	add	r2,r3,r3
 8010bec:	1085883a 	add	r2,r2,r2
 8010bf0:	1007883a 	mov	r3,r2
 8010bf4:	e0bfff17 	ldw	r2,-4(fp)
 8010bf8:	1885883a 	add	r2,r3,r2
 8010bfc:	e0fff717 	ldw	r3,-36(fp)
 8010c00:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8010c04:	e13ff317 	ldw	r4,-52(fp)
 8010c08:	21000044 	addi	r4,r4,1
 8010c0c:	e13ff315 	stw	r4,-52(fp)
 8010c10:	e0bffa17 	ldw	r2,-24(fp)
 8010c14:	e0fff317 	ldw	r3,-52(fp)
 8010c18:	10fff12e 	bgeu	r2,r3,8010be0 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8010c1c:	e13fff17 	ldw	r4,-4(fp)
 8010c20:	e0bffe17 	ldw	r2,-8(fp)
 8010c24:	2089883a 	add	r4,r4,r2
 8010c28:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8010c2c:	e0fff217 	ldw	r3,-56(fp)
 8010c30:	18c00044 	addi	r3,r3,1
 8010c34:	e0fff215 	stw	r3,-56(fp)
 8010c38:	e13ff817 	ldw	r4,-32(fp)
 8010c3c:	e0bff217 	ldw	r2,-56(fp)
 8010c40:	20bfe42e 	bgeu	r4,r2,8010bd4 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8010c44:	e037883a 	mov	sp,fp
 8010c48:	df000017 	ldw	fp,0(sp)
 8010c4c:	dec00104 	addi	sp,sp,4
 8010c50:	f800283a 	ret

08010c54 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 8010c54:	defff204 	addi	sp,sp,-56
 8010c58:	df000d15 	stw	fp,52(sp)
 8010c5c:	df000d04 	addi	fp,sp,52
 8010c60:	e13ff315 	stw	r4,-52(fp)
 8010c64:	e17ff415 	stw	r5,-48(fp)
 8010c68:	e1bff515 	stw	r6,-44(fp)
 8010c6c:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8010c70:	e0bff317 	ldw	r2,-52(fp)
 8010c74:	10800f17 	ldw	r2,60(r2)
 8010c78:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8010c7c:	e0bff317 	ldw	r2,-52(fp)
 8010c80:	10801017 	ldw	r2,64(r2)
 8010c84:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8010c88:	e0bff417 	ldw	r2,-48(fp)
 8010c8c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 8010c90:	e0fff517 	ldw	r3,-44(fp)
 8010c94:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 8010c98:	e13ff617 	ldw	r4,-40(fp)
 8010c9c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8010ca0:	e0800117 	ldw	r2,4(fp)
 8010ca4:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8010ca8:	e0fffb17 	ldw	r3,-20(fp)
 8010cac:	e13ffc17 	ldw	r4,-16(fp)
 8010cb0:	1900042e 	bgeu	r3,r4,8010cc4 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
 8010cb4:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 8010cb8:	e0fffb17 	ldw	r3,-20(fp)
 8010cbc:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 8010cc0:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8010cc4:	e13ffc17 	ldw	r4,-16(fp)
 8010cc8:	e0bffe17 	ldw	r2,-8(fp)
 8010ccc:	2080b12e 	bgeu	r4,r2,8010f94 <alt_up_pixel_buffer_dma_draw_hline+0x340>
 8010cd0:	e0fffa17 	ldw	r3,-24(fp)
 8010cd4:	e13ffd17 	ldw	r4,-12(fp)
 8010cd8:	19000136 	bltu	r3,r4,8010ce0 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8010cdc:	0000ad06 	br	8010f94 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8010ce0:	e0bffb17 	ldw	r2,-20(fp)
 8010ce4:	e0fffe17 	ldw	r3,-8(fp)
 8010ce8:	10c00336 	bltu	r2,r3,8010cf8 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
 8010cec:	e13ffe17 	ldw	r4,-8(fp)
 8010cf0:	213fffc4 	addi	r4,r4,-1
 8010cf4:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8010cf8:	e0800217 	ldw	r2,8(fp)
 8010cfc:	10800058 	cmpnei	r2,r2,1
 8010d00:	1000041e 	bne	r2,zero,8010d14 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8010d04:	e0bff317 	ldw	r2,-52(fp)
 8010d08:	10800c17 	ldw	r2,48(r2)
 8010d0c:	e0bfff15 	stw	r2,-4(fp)
 8010d10:	00000306 	br	8010d20 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8010d14:	e0bff317 	ldw	r2,-52(fp)
 8010d18:	10800b17 	ldw	r2,44(r2)
 8010d1c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8010d20:	e0bff317 	ldw	r2,-52(fp)
 8010d24:	10800d17 	ldw	r2,52(r2)
 8010d28:	1004c03a 	cmpne	r2,r2,zero
 8010d2c:	1000431e 	bne	r2,zero,8010e3c <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8010d30:	e0bff317 	ldw	r2,-52(fp)
 8010d34:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 8010d38:	e0fffa17 	ldw	r3,-24(fp)
 8010d3c:	1884983a 	sll	r2,r3,r2
 8010d40:	e13fff17 	ldw	r4,-4(fp)
 8010d44:	2089883a 	add	r4,r4,r2
 8010d48:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8010d4c:	e0bff317 	ldw	r2,-52(fp)
 8010d50:	10800e17 	ldw	r2,56(r2)
 8010d54:	10800058 	cmpnei	r2,r2,1
 8010d58:	10000f1e 	bne	r2,zero,8010d98 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
 8010d5c:	e0bffc17 	ldw	r2,-16(fp)
 8010d60:	e0bff815 	stw	r2,-32(fp)
 8010d64:	00000806 	br	8010d88 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8010d68:	e0ffff17 	ldw	r3,-4(fp)
 8010d6c:	e0bff817 	ldw	r2,-32(fp)
 8010d70:	1885883a 	add	r2,r3,r2
 8010d74:	e0fff917 	ldw	r3,-28(fp)
 8010d78:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8010d7c:	e0fff817 	ldw	r3,-32(fp)
 8010d80:	18c00044 	addi	r3,r3,1
 8010d84:	e0fff815 	stw	r3,-32(fp)
 8010d88:	e13ffb17 	ldw	r4,-20(fp)
 8010d8c:	e0bff817 	ldw	r2,-32(fp)
 8010d90:	20bff52e 	bgeu	r4,r2,8010d68 <alt_up_pixel_buffer_dma_draw_hline+0x114>
 8010d94:	00007f06 	br	8010f94 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8010d98:	e0bff317 	ldw	r2,-52(fp)
 8010d9c:	10800e17 	ldw	r2,56(r2)
 8010da0:	10800098 	cmpnei	r2,r2,2
 8010da4:	1000121e 	bne	r2,zero,8010df0 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
 8010da8:	e0fffc17 	ldw	r3,-16(fp)
 8010dac:	e0fff815 	stw	r3,-32(fp)
 8010db0:	00000b06 	br	8010de0 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8010db4:	e13ff817 	ldw	r4,-32(fp)
 8010db8:	e13ff817 	ldw	r4,-32(fp)
 8010dbc:	2105883a 	add	r2,r4,r4
 8010dc0:	1007883a 	mov	r3,r2
 8010dc4:	e0bfff17 	ldw	r2,-4(fp)
 8010dc8:	1885883a 	add	r2,r3,r2
 8010dcc:	e0fff917 	ldw	r3,-28(fp)
 8010dd0:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8010dd4:	e0bff817 	ldw	r2,-32(fp)
 8010dd8:	10800044 	addi	r2,r2,1
 8010ddc:	e0bff815 	stw	r2,-32(fp)
 8010de0:	e0fffb17 	ldw	r3,-20(fp)
 8010de4:	e13ff817 	ldw	r4,-32(fp)
 8010de8:	193ff22e 	bgeu	r3,r4,8010db4 <alt_up_pixel_buffer_dma_draw_hline+0x160>
 8010dec:	00006906 	br	8010f94 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8010df0:	e0bffc17 	ldw	r2,-16(fp)
 8010df4:	e0bff815 	stw	r2,-32(fp)
 8010df8:	00000c06 	br	8010e2c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8010dfc:	e0fff817 	ldw	r3,-32(fp)
 8010e00:	e0fff817 	ldw	r3,-32(fp)
 8010e04:	18c5883a 	add	r2,r3,r3
 8010e08:	1085883a 	add	r2,r2,r2
 8010e0c:	1007883a 	mov	r3,r2
 8010e10:	e0bfff17 	ldw	r2,-4(fp)
 8010e14:	1885883a 	add	r2,r3,r2
 8010e18:	e0fff917 	ldw	r3,-28(fp)
 8010e1c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8010e20:	e13ff817 	ldw	r4,-32(fp)
 8010e24:	21000044 	addi	r4,r4,1
 8010e28:	e13ff815 	stw	r4,-32(fp)
 8010e2c:	e0bffb17 	ldw	r2,-20(fp)
 8010e30:	e0fff817 	ldw	r3,-32(fp)
 8010e34:	10fff12e 	bgeu	r2,r3,8010dfc <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
 8010e38:	00005606 	br	8010f94 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8010e3c:	e0bff317 	ldw	r2,-52(fp)
 8010e40:	10800e17 	ldw	r2,56(r2)
 8010e44:	10800058 	cmpnei	r2,r2,1
 8010e48:	1000151e 	bne	r2,zero,8010ea0 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
 8010e4c:	e13ffa17 	ldw	r4,-24(fp)
 8010e50:	e0fffe17 	ldw	r3,-8(fp)
 8010e54:	20c5383a 	mul	r2,r4,r3
 8010e58:	e13fff17 	ldw	r4,-4(fp)
 8010e5c:	2089883a 	add	r4,r4,r2
 8010e60:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8010e64:	e0bffc17 	ldw	r2,-16(fp)
 8010e68:	e0bff715 	stw	r2,-36(fp)
 8010e6c:	00000806 	br	8010e90 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8010e70:	e0ffff17 	ldw	r3,-4(fp)
 8010e74:	e0bff717 	ldw	r2,-36(fp)
 8010e78:	1885883a 	add	r2,r3,r2
 8010e7c:	e0fff917 	ldw	r3,-28(fp)
 8010e80:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8010e84:	e0fff717 	ldw	r3,-36(fp)
 8010e88:	18c00044 	addi	r3,r3,1
 8010e8c:	e0fff715 	stw	r3,-36(fp)
 8010e90:	e13ffb17 	ldw	r4,-20(fp)
 8010e94:	e0bff717 	ldw	r2,-36(fp)
 8010e98:	20bff52e 	bgeu	r4,r2,8010e70 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
 8010e9c:	00003d06 	br	8010f94 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8010ea0:	e0bff317 	ldw	r2,-52(fp)
 8010ea4:	10800e17 	ldw	r2,56(r2)
 8010ea8:	10800098 	cmpnei	r2,r2,2
 8010eac:	10001c1e 	bne	r2,zero,8010f20 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
 8010eb0:	e0fffe17 	ldw	r3,-8(fp)
 8010eb4:	e0fffe17 	ldw	r3,-8(fp)
 8010eb8:	18c5883a 	add	r2,r3,r3
 8010ebc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8010ec0:	e13ffa17 	ldw	r4,-24(fp)
 8010ec4:	e0fffe17 	ldw	r3,-8(fp)
 8010ec8:	20c5383a 	mul	r2,r4,r3
 8010ecc:	e13fff17 	ldw	r4,-4(fp)
 8010ed0:	2089883a 	add	r4,r4,r2
 8010ed4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8010ed8:	e0bffc17 	ldw	r2,-16(fp)
 8010edc:	e0bff715 	stw	r2,-36(fp)
 8010ee0:	00000b06 	br	8010f10 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8010ee4:	e0fff717 	ldw	r3,-36(fp)
 8010ee8:	e0fff717 	ldw	r3,-36(fp)
 8010eec:	18c5883a 	add	r2,r3,r3
 8010ef0:	1007883a 	mov	r3,r2
 8010ef4:	e0bfff17 	ldw	r2,-4(fp)
 8010ef8:	1885883a 	add	r2,r3,r2
 8010efc:	e0fff917 	ldw	r3,-28(fp)
 8010f00:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8010f04:	e13ff717 	ldw	r4,-36(fp)
 8010f08:	21000044 	addi	r4,r4,1
 8010f0c:	e13ff715 	stw	r4,-36(fp)
 8010f10:	e0bffb17 	ldw	r2,-20(fp)
 8010f14:	e0fff717 	ldw	r3,-36(fp)
 8010f18:	10fff22e 	bgeu	r2,r3,8010ee4 <alt_up_pixel_buffer_dma_draw_hline+0x290>
 8010f1c:	00001d06 	br	8010f94 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8010f20:	e13ffe17 	ldw	r4,-8(fp)
 8010f24:	e13ffe17 	ldw	r4,-8(fp)
 8010f28:	2105883a 	add	r2,r4,r4
 8010f2c:	1085883a 	add	r2,r2,r2
 8010f30:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 8010f34:	e0fffa17 	ldw	r3,-24(fp)
 8010f38:	e13ffe17 	ldw	r4,-8(fp)
 8010f3c:	1905383a 	mul	r2,r3,r4
 8010f40:	e0ffff17 	ldw	r3,-4(fp)
 8010f44:	1887883a 	add	r3,r3,r2
 8010f48:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 8010f4c:	e13ffc17 	ldw	r4,-16(fp)
 8010f50:	e13ff715 	stw	r4,-36(fp)
 8010f54:	00000c06 	br	8010f88 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8010f58:	e0fff717 	ldw	r3,-36(fp)
 8010f5c:	e0fff717 	ldw	r3,-36(fp)
 8010f60:	18c5883a 	add	r2,r3,r3
 8010f64:	1085883a 	add	r2,r2,r2
 8010f68:	1007883a 	mov	r3,r2
 8010f6c:	e0bfff17 	ldw	r2,-4(fp)
 8010f70:	1885883a 	add	r2,r3,r2
 8010f74:	e0fff917 	ldw	r3,-28(fp)
 8010f78:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8010f7c:	e13ff717 	ldw	r4,-36(fp)
 8010f80:	21000044 	addi	r4,r4,1
 8010f84:	e13ff715 	stw	r4,-36(fp)
 8010f88:	e0bffb17 	ldw	r2,-20(fp)
 8010f8c:	e0fff717 	ldw	r3,-36(fp)
 8010f90:	10fff12e 	bgeu	r2,r3,8010f58 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 8010f94:	e037883a 	mov	sp,fp
 8010f98:	df000017 	ldw	fp,0(sp)
 8010f9c:	dec00104 	addi	sp,sp,4
 8010fa0:	f800283a 	ret

08010fa4 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 8010fa4:	defff104 	addi	sp,sp,-60
 8010fa8:	df000e15 	stw	fp,56(sp)
 8010fac:	df000e04 	addi	fp,sp,56
 8010fb0:	e13ff215 	stw	r4,-56(fp)
 8010fb4:	e17ff315 	stw	r5,-52(fp)
 8010fb8:	e1bff415 	stw	r6,-48(fp)
 8010fbc:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8010fc0:	e0bff217 	ldw	r2,-56(fp)
 8010fc4:	10800f17 	ldw	r2,60(r2)
 8010fc8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8010fcc:	e0bff217 	ldw	r2,-56(fp)
 8010fd0:	10801017 	ldw	r2,64(r2)
 8010fd4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 8010fd8:	e0bff317 	ldw	r2,-52(fp)
 8010fdc:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 8010fe0:	e0fff417 	ldw	r3,-48(fp)
 8010fe4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 8010fe8:	e13ff517 	ldw	r4,-44(fp)
 8010fec:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 8010ff0:	e0800117 	ldw	r2,4(fp)
 8010ff4:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8010ff8:	e0fffa17 	ldw	r3,-24(fp)
 8010ffc:	e13ffb17 	ldw	r4,-20(fp)
 8011000:	1900042e 	bgeu	r3,r4,8011014 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
 8011004:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 8011008:	e0fffa17 	ldw	r3,-24(fp)
 801100c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 8011010:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8011014:	e13ffc17 	ldw	r4,-16(fp)
 8011018:	e0bffe17 	ldw	r2,-8(fp)
 801101c:	2080d12e 	bgeu	r4,r2,8011364 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
 8011020:	e0fffb17 	ldw	r3,-20(fp)
 8011024:	e13ffd17 	ldw	r4,-12(fp)
 8011028:	19000136 	bltu	r3,r4,8011030 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 801102c:	0000cd06 	br	8011364 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8011030:	e0bffa17 	ldw	r2,-24(fp)
 8011034:	e0fffd17 	ldw	r3,-12(fp)
 8011038:	10c00336 	bltu	r2,r3,8011048 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
 801103c:	e13ffd17 	ldw	r4,-12(fp)
 8011040:	213fffc4 	addi	r4,r4,-1
 8011044:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8011048:	e0800217 	ldw	r2,8(fp)
 801104c:	10800058 	cmpnei	r2,r2,1
 8011050:	1000041e 	bne	r2,zero,8011064 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
 8011054:	e0bff217 	ldw	r2,-56(fp)
 8011058:	10800c17 	ldw	r2,48(r2)
 801105c:	e0bfff15 	stw	r2,-4(fp)
 8011060:	00000306 	br	8011070 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
 8011064:	e0bff217 	ldw	r2,-56(fp)
 8011068:	10800b17 	ldw	r2,44(r2)
 801106c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8011070:	e0bff217 	ldw	r2,-56(fp)
 8011074:	10800d17 	ldw	r2,52(r2)
 8011078:	1004c03a 	cmpne	r2,r2,zero
 801107c:	1000571e 	bne	r2,zero,80111dc <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8011080:	e0bff217 	ldw	r2,-56(fp)
 8011084:	10801317 	ldw	r2,76(r2)
 8011088:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 801108c:	e0bff717 	ldw	r2,-36(fp)
 8011090:	e0fffb17 	ldw	r3,-20(fp)
 8011094:	1884983a 	sll	r2,r3,r2
 8011098:	e13fff17 	ldw	r4,-4(fp)
 801109c:	2089883a 	add	r4,r4,r2
 80110a0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80110a4:	e0bff217 	ldw	r2,-56(fp)
 80110a8:	10800e17 	ldw	r2,56(r2)
 80110ac:	10800058 	cmpnei	r2,r2,1
 80110b0:	1000151e 	bne	r2,zero,8011108 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
 80110b4:	e0bffb17 	ldw	r2,-20(fp)
 80110b8:	e0bff815 	stw	r2,-32(fp)
 80110bc:	00000e06 	br	80110f8 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 80110c0:	e0ffff17 	ldw	r3,-4(fp)
 80110c4:	e0bffc17 	ldw	r2,-16(fp)
 80110c8:	1885883a 	add	r2,r3,r2
 80110cc:	e0fff917 	ldw	r3,-28(fp)
 80110d0:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 80110d4:	e0fff717 	ldw	r3,-36(fp)
 80110d8:	00800044 	movi	r2,1
 80110dc:	10c4983a 	sll	r2,r2,r3
 80110e0:	e0ffff17 	ldw	r3,-4(fp)
 80110e4:	1887883a 	add	r3,r3,r2
 80110e8:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80110ec:	e13ff817 	ldw	r4,-32(fp)
 80110f0:	21000044 	addi	r4,r4,1
 80110f4:	e13ff815 	stw	r4,-32(fp)
 80110f8:	e0bffa17 	ldw	r2,-24(fp)
 80110fc:	e0fff817 	ldw	r3,-32(fp)
 8011100:	10ffef2e 	bgeu	r2,r3,80110c0 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
 8011104:	00009706 	br	8011364 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8011108:	e0bff217 	ldw	r2,-56(fp)
 801110c:	10800e17 	ldw	r2,56(r2)
 8011110:	10800098 	cmpnei	r2,r2,2
 8011114:	1000181e 	bne	r2,zero,8011178 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
 8011118:	e13ffb17 	ldw	r4,-20(fp)
 801111c:	e13ff815 	stw	r4,-32(fp)
 8011120:	00001106 	br	8011168 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8011124:	e0fffc17 	ldw	r3,-16(fp)
 8011128:	e0fffc17 	ldw	r3,-16(fp)
 801112c:	18c5883a 	add	r2,r3,r3
 8011130:	1007883a 	mov	r3,r2
 8011134:	e0bfff17 	ldw	r2,-4(fp)
 8011138:	1885883a 	add	r2,r3,r2
 801113c:	e0fff917 	ldw	r3,-28(fp)
 8011140:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8011144:	e0fff717 	ldw	r3,-36(fp)
 8011148:	00800044 	movi	r2,1
 801114c:	10c4983a 	sll	r2,r2,r3
 8011150:	e13fff17 	ldw	r4,-4(fp)
 8011154:	2089883a 	add	r4,r4,r2
 8011158:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 801115c:	e0bff817 	ldw	r2,-32(fp)
 8011160:	10800044 	addi	r2,r2,1
 8011164:	e0bff815 	stw	r2,-32(fp)
 8011168:	e0fffa17 	ldw	r3,-24(fp)
 801116c:	e13ff817 	ldw	r4,-32(fp)
 8011170:	193fec2e 	bgeu	r3,r4,8011124 <alt_up_pixel_buffer_dma_draw_vline+0x180>
 8011174:	00007b06 	br	8011364 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8011178:	e0bffb17 	ldw	r2,-20(fp)
 801117c:	e0bff815 	stw	r2,-32(fp)
 8011180:	00001206 	br	80111cc <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8011184:	e0fffc17 	ldw	r3,-16(fp)
 8011188:	e0fffc17 	ldw	r3,-16(fp)
 801118c:	18c5883a 	add	r2,r3,r3
 8011190:	1085883a 	add	r2,r2,r2
 8011194:	1007883a 	mov	r3,r2
 8011198:	e0bfff17 	ldw	r2,-4(fp)
 801119c:	1885883a 	add	r2,r3,r2
 80111a0:	e0fff917 	ldw	r3,-28(fp)
 80111a4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 80111a8:	e0fff717 	ldw	r3,-36(fp)
 80111ac:	00800044 	movi	r2,1
 80111b0:	10c4983a 	sll	r2,r2,r3
 80111b4:	e13fff17 	ldw	r4,-4(fp)
 80111b8:	2089883a 	add	r4,r4,r2
 80111bc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 80111c0:	e0bff817 	ldw	r2,-32(fp)
 80111c4:	10800044 	addi	r2,r2,1
 80111c8:	e0bff815 	stw	r2,-32(fp)
 80111cc:	e0fffa17 	ldw	r3,-24(fp)
 80111d0:	e13ff817 	ldw	r4,-32(fp)
 80111d4:	193feb2e 	bgeu	r3,r4,8011184 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
 80111d8:	00006206 	br	8011364 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80111dc:	e0bff217 	ldw	r2,-56(fp)
 80111e0:	10800e17 	ldw	r2,56(r2)
 80111e4:	10800058 	cmpnei	r2,r2,1
 80111e8:	1000191e 	bne	r2,zero,8011250 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
 80111ec:	e0fffb17 	ldw	r3,-20(fp)
 80111f0:	e13ffe17 	ldw	r4,-8(fp)
 80111f4:	1905383a 	mul	r2,r3,r4
 80111f8:	e0ffff17 	ldw	r3,-4(fp)
 80111fc:	1887883a 	add	r3,r3,r2
 8011200:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8011204:	e13ffb17 	ldw	r4,-20(fp)
 8011208:	e13ff615 	stw	r4,-40(fp)
 801120c:	00000c06 	br	8011240 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8011210:	e0ffff17 	ldw	r3,-4(fp)
 8011214:	e0bffc17 	ldw	r2,-16(fp)
 8011218:	1885883a 	add	r2,r3,r2
 801121c:	e0fff917 	ldw	r3,-28(fp)
 8011220:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 8011224:	e0bfff17 	ldw	r2,-4(fp)
 8011228:	e0fffe17 	ldw	r3,-8(fp)
 801122c:	10c5883a 	add	r2,r2,r3
 8011230:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8011234:	e13ff617 	ldw	r4,-40(fp)
 8011238:	21000044 	addi	r4,r4,1
 801123c:	e13ff615 	stw	r4,-40(fp)
 8011240:	e0bffa17 	ldw	r2,-24(fp)
 8011244:	e0fff617 	ldw	r3,-40(fp)
 8011248:	10fff12e 	bgeu	r2,r3,8011210 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
 801124c:	00004506 	br	8011364 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8011250:	e0bff217 	ldw	r2,-56(fp)
 8011254:	10800e17 	ldw	r2,56(r2)
 8011258:	10800098 	cmpnei	r2,r2,2
 801125c:	1000201e 	bne	r2,zero,80112e0 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
 8011260:	e13ffe17 	ldw	r4,-8(fp)
 8011264:	e13ffe17 	ldw	r4,-8(fp)
 8011268:	2105883a 	add	r2,r4,r4
 801126c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 8011270:	e0fffb17 	ldw	r3,-20(fp)
 8011274:	e13ffe17 	ldw	r4,-8(fp)
 8011278:	1905383a 	mul	r2,r3,r4
 801127c:	e0ffff17 	ldw	r3,-4(fp)
 8011280:	1887883a 	add	r3,r3,r2
 8011284:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 8011288:	e13ffb17 	ldw	r4,-20(fp)
 801128c:	e13ff615 	stw	r4,-40(fp)
 8011290:	00000f06 	br	80112d0 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8011294:	e0fffc17 	ldw	r3,-16(fp)
 8011298:	e0fffc17 	ldw	r3,-16(fp)
 801129c:	18c5883a 	add	r2,r3,r3
 80112a0:	1007883a 	mov	r3,r2
 80112a4:	e0bfff17 	ldw	r2,-4(fp)
 80112a8:	1885883a 	add	r2,r3,r2
 80112ac:	e0fff917 	ldw	r3,-28(fp)
 80112b0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 80112b4:	e13fff17 	ldw	r4,-4(fp)
 80112b8:	e0bffe17 	ldw	r2,-8(fp)
 80112bc:	2089883a 	add	r4,r4,r2
 80112c0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80112c4:	e0fff617 	ldw	r3,-40(fp)
 80112c8:	18c00044 	addi	r3,r3,1
 80112cc:	e0fff615 	stw	r3,-40(fp)
 80112d0:	e13ffa17 	ldw	r4,-24(fp)
 80112d4:	e0bff617 	ldw	r2,-40(fp)
 80112d8:	20bfee2e 	bgeu	r4,r2,8011294 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
 80112dc:	00002106 	br	8011364 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80112e0:	e0fffe17 	ldw	r3,-8(fp)
 80112e4:	e0fffe17 	ldw	r3,-8(fp)
 80112e8:	18c5883a 	add	r2,r3,r3
 80112ec:	1085883a 	add	r2,r2,r2
 80112f0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 80112f4:	e13ffb17 	ldw	r4,-20(fp)
 80112f8:	e0fffe17 	ldw	r3,-8(fp)
 80112fc:	20c5383a 	mul	r2,r4,r3
 8011300:	e13fff17 	ldw	r4,-4(fp)
 8011304:	2089883a 	add	r4,r4,r2
 8011308:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 801130c:	e0bffb17 	ldw	r2,-20(fp)
 8011310:	e0bff615 	stw	r2,-40(fp)
 8011314:	00001006 	br	8011358 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8011318:	e0fffc17 	ldw	r3,-16(fp)
 801131c:	e0fffc17 	ldw	r3,-16(fp)
 8011320:	18c5883a 	add	r2,r3,r3
 8011324:	1085883a 	add	r2,r2,r2
 8011328:	1007883a 	mov	r3,r2
 801132c:	e0bfff17 	ldw	r2,-4(fp)
 8011330:	1885883a 	add	r2,r3,r2
 8011334:	e0fff917 	ldw	r3,-28(fp)
 8011338:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 801133c:	e13fff17 	ldw	r4,-4(fp)
 8011340:	e0bffe17 	ldw	r2,-8(fp)
 8011344:	2089883a 	add	r4,r4,r2
 8011348:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 801134c:	e0fff617 	ldw	r3,-40(fp)
 8011350:	18c00044 	addi	r3,r3,1
 8011354:	e0fff615 	stw	r3,-40(fp)
 8011358:	e13ffa17 	ldw	r4,-24(fp)
 801135c:	e0bff617 	ldw	r2,-40(fp)
 8011360:	20bfed2e 	bgeu	r4,r2,8011318 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8011364:	e037883a 	mov	sp,fp
 8011368:	df000017 	ldw	fp,0(sp)
 801136c:	dec00104 	addi	sp,sp,4
 8011370:	f800283a 	ret

08011374 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8011374:	defff804 	addi	sp,sp,-32
 8011378:	dfc00715 	stw	ra,28(sp)
 801137c:	df000615 	stw	fp,24(sp)
 8011380:	df000604 	addi	fp,sp,24
 8011384:	e13ffc15 	stw	r4,-16(fp)
 8011388:	e17ffd15 	stw	r5,-12(fp)
 801138c:	e1bffe15 	stw	r6,-8(fp)
 8011390:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8011394:	e0800317 	ldw	r2,12(fp)
 8011398:	d8800015 	stw	r2,0(sp)
 801139c:	e0800417 	ldw	r2,16(fp)
 80113a0:	d8800115 	stw	r2,4(sp)
 80113a4:	e13ffc17 	ldw	r4,-16(fp)
 80113a8:	e17ffd17 	ldw	r5,-12(fp)
 80113ac:	e1bfff17 	ldw	r6,-4(fp)
 80113b0:	e1fffe17 	ldw	r7,-8(fp)
 80113b4:	8010c540 	call	8010c54 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 80113b8:	e0800317 	ldw	r2,12(fp)
 80113bc:	d8800015 	stw	r2,0(sp)
 80113c0:	e0800417 	ldw	r2,16(fp)
 80113c4:	d8800115 	stw	r2,4(sp)
 80113c8:	e13ffc17 	ldw	r4,-16(fp)
 80113cc:	e17ffd17 	ldw	r5,-12(fp)
 80113d0:	e1bfff17 	ldw	r6,-4(fp)
 80113d4:	e1c00217 	ldw	r7,8(fp)
 80113d8:	8010c540 	call	8010c54 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 80113dc:	e0800317 	ldw	r2,12(fp)
 80113e0:	d8800015 	stw	r2,0(sp)
 80113e4:	e0800417 	ldw	r2,16(fp)
 80113e8:	d8800115 	stw	r2,4(sp)
 80113ec:	e13ffc17 	ldw	r4,-16(fp)
 80113f0:	e17ffd17 	ldw	r5,-12(fp)
 80113f4:	e1bffe17 	ldw	r6,-8(fp)
 80113f8:	e1c00217 	ldw	r7,8(fp)
 80113fc:	8010fa40 	call	8010fa4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8011400:	e0800317 	ldw	r2,12(fp)
 8011404:	d8800015 	stw	r2,0(sp)
 8011408:	e0800417 	ldw	r2,16(fp)
 801140c:	d8800115 	stw	r2,4(sp)
 8011410:	e13ffc17 	ldw	r4,-16(fp)
 8011414:	e17fff17 	ldw	r5,-4(fp)
 8011418:	e1bffe17 	ldw	r6,-8(fp)
 801141c:	e1c00217 	ldw	r7,8(fp)
 8011420:	8010fa40 	call	8010fa4 <alt_up_pixel_buffer_dma_draw_vline>
}
 8011424:	e037883a 	mov	sp,fp
 8011428:	dfc00117 	ldw	ra,4(sp)
 801142c:	df000017 	ldw	fp,0(sp)
 8011430:	dec00204 	addi	sp,sp,8
 8011434:	f800283a 	ret

08011438 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8011438:	defffb04 	addi	sp,sp,-20
 801143c:	df000415 	stw	fp,16(sp)
 8011440:	df000404 	addi	fp,sp,16
 8011444:	e13ffc15 	stw	r4,-16(fp)
 8011448:	e17ffd15 	stw	r5,-12(fp)
 801144c:	e1bffe15 	stw	r6,-8(fp)
 8011450:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 8011454:	e0c00217 	ldw	r3,8(fp)
 8011458:	1804c03a 	cmpne	r2,r3,zero
 801145c:	10000b1e 	bne	r2,zero,801148c <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8011460:	e13ffd17 	ldw	r4,-12(fp)
 8011464:	e0ffff17 	ldw	r3,-4(fp)
 8011468:	20c5383a 	mul	r2,r4,r3
 801146c:	e13ffe17 	ldw	r4,-8(fp)
 8011470:	1105883a 	add	r2,r2,r4
 8011474:	1007883a 	mov	r3,r2
 8011478:	e0bffc17 	ldw	r2,-16(fp)
 801147c:	1885883a 	add	r2,r3,r2
 8011480:	e0c00117 	ldw	r3,4(fp)
 8011484:	10c00025 	stbio	r3,0(r2)
 8011488:	00001b06 	br	80114f8 <helper_plot_pixel+0xc0>
	else if (mode == 1)
 801148c:	e1000217 	ldw	r4,8(fp)
 8011490:	20800058 	cmpnei	r2,r4,1
 8011494:	10000c1e 	bne	r2,zero,80114c8 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 8011498:	e0fffd17 	ldw	r3,-12(fp)
 801149c:	e13fff17 	ldw	r4,-4(fp)
 80114a0:	1905383a 	mul	r2,r3,r4
 80114a4:	e0fffe17 	ldw	r3,-8(fp)
 80114a8:	10c5883a 	add	r2,r2,r3
 80114ac:	1085883a 	add	r2,r2,r2
 80114b0:	1007883a 	mov	r3,r2
 80114b4:	e0bffc17 	ldw	r2,-16(fp)
 80114b8:	1885883a 	add	r2,r3,r2
 80114bc:	e1000117 	ldw	r4,4(fp)
 80114c0:	1100002d 	sthio	r4,0(r2)
 80114c4:	00000c06 	br	80114f8 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 80114c8:	e0fffd17 	ldw	r3,-12(fp)
 80114cc:	e13fff17 	ldw	r4,-4(fp)
 80114d0:	1905383a 	mul	r2,r3,r4
 80114d4:	e0fffe17 	ldw	r3,-8(fp)
 80114d8:	10c5883a 	add	r2,r2,r3
 80114dc:	1085883a 	add	r2,r2,r2
 80114e0:	1085883a 	add	r2,r2,r2
 80114e4:	1007883a 	mov	r3,r2
 80114e8:	e0bffc17 	ldw	r2,-16(fp)
 80114ec:	1885883a 	add	r2,r3,r2
 80114f0:	e1000117 	ldw	r4,4(fp)
 80114f4:	11000035 	stwio	r4,0(r2)
}
 80114f8:	e037883a 	mov	sp,fp
 80114fc:	df000017 	ldw	fp,0(sp)
 8011500:	dec00104 	addi	sp,sp,4
 8011504:	f800283a 	ret

08011508 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8011508:	deffe404 	addi	sp,sp,-112
 801150c:	dfc01b15 	stw	ra,108(sp)
 8011510:	df001a15 	stw	fp,104(sp)
 8011514:	df001a04 	addi	fp,sp,104
 8011518:	e13fe815 	stw	r4,-96(fp)
 801151c:	e17fe915 	stw	r5,-92(fp)
 8011520:	e1bfea15 	stw	r6,-88(fp)
 8011524:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 8011528:	e0bfe917 	ldw	r2,-92(fp)
 801152c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 8011530:	e0ffea17 	ldw	r3,-88(fp)
 8011534:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 8011538:	e13feb17 	ldw	r4,-84(fp)
 801153c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 8011540:	e0800217 	ldw	r2,8(fp)
 8011544:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8011548:	e0fff717 	ldw	r3,-36(fp)
 801154c:	e13ff917 	ldw	r4,-28(fp)
 8011550:	1905c83a 	sub	r2,r3,r4
 8011554:	e0bfff15 	stw	r2,-4(fp)
 8011558:	e0ffff17 	ldw	r3,-4(fp)
 801155c:	1804403a 	cmpge	r2,r3,zero
 8011560:	1000031e 	bne	r2,zero,8011570 <alt_up_pixel_buffer_dma_draw_line+0x68>
 8011564:	e13fff17 	ldw	r4,-4(fp)
 8011568:	0109c83a 	sub	r4,zero,r4
 801156c:	e13fff15 	stw	r4,-4(fp)
 8011570:	e0fff817 	ldw	r3,-32(fp)
 8011574:	e13ffa17 	ldw	r4,-24(fp)
 8011578:	1905c83a 	sub	r2,r3,r4
 801157c:	e0bffe15 	stw	r2,-8(fp)
 8011580:	e0fffe17 	ldw	r3,-8(fp)
 8011584:	1804403a 	cmpge	r2,r3,zero
 8011588:	1000031e 	bne	r2,zero,8011598 <alt_up_pixel_buffer_dma_draw_line+0x90>
 801158c:	e13ffe17 	ldw	r4,-8(fp)
 8011590:	0109c83a 	sub	r4,zero,r4
 8011594:	e13ffe15 	stw	r4,-8(fp)
 8011598:	e0fffe17 	ldw	r3,-8(fp)
 801159c:	e13fff17 	ldw	r4,-4(fp)
 80115a0:	1904803a 	cmplt	r2,r3,r4
 80115a4:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 80115a8:	e0bfe817 	ldw	r2,-96(fp)
 80115ac:	10800e17 	ldw	r2,56(r2)
 80115b0:	10800060 	cmpeqi	r2,r2,1
 80115b4:	10000c1e 	bne	r2,zero,80115e8 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 80115b8:	e0bfe817 	ldw	r2,-96(fp)
 80115bc:	10800e17 	ldw	r2,56(r2)
 80115c0:	10800098 	cmpnei	r2,r2,2
 80115c4:	1000031e 	bne	r2,zero,80115d4 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 80115c8:	00800044 	movi	r2,1
 80115cc:	e0bffc15 	stw	r2,-16(fp)
 80115d0:	00000206 	br	80115dc <alt_up_pixel_buffer_dma_draw_line+0xd4>
 80115d4:	00c00084 	movi	r3,2
 80115d8:	e0fffc15 	stw	r3,-16(fp)
 80115dc:	e13ffc17 	ldw	r4,-16(fp)
 80115e0:	e13ffd15 	stw	r4,-12(fp)
 80115e4:	00000106 	br	80115ec <alt_up_pixel_buffer_dma_draw_line+0xe4>
 80115e8:	e03ffd15 	stw	zero,-12(fp)
 80115ec:	e0bffd17 	ldw	r2,-12(fp)
 80115f0:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 80115f4:	e0c00317 	ldw	r3,12(fp)
 80115f8:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 80115fc:	e0bfe817 	ldw	r2,-96(fp)
 8011600:	10800d17 	ldw	r2,52(r2)
 8011604:	1004c03a 	cmpne	r2,r2,zero
 8011608:	1000091e 	bne	r2,zero,8011630 <alt_up_pixel_buffer_dma_draw_line+0x128>
 801160c:	e0bfe817 	ldw	r2,-96(fp)
 8011610:	10c01317 	ldw	r3,76(r2)
 8011614:	e0bfef17 	ldw	r2,-68(fp)
 8011618:	1885c83a 	sub	r2,r3,r2
 801161c:	1007883a 	mov	r3,r2
 8011620:	00800044 	movi	r2,1
 8011624:	10c4983a 	sll	r2,r2,r3
 8011628:	e0bffb15 	stw	r2,-20(fp)
 801162c:	00000306 	br	801163c <alt_up_pixel_buffer_dma_draw_line+0x134>
 8011630:	e0bfe817 	ldw	r2,-96(fp)
 8011634:	10800f17 	ldw	r2,60(r2)
 8011638:	e0bffb15 	stw	r2,-20(fp)
 801163c:	e13ffb17 	ldw	r4,-20(fp)
 8011640:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 8011644:	e0800417 	ldw	r2,16(fp)
 8011648:	10800058 	cmpnei	r2,r2,1
 801164c:	1000041e 	bne	r2,zero,8011660 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8011650:	e0bfe817 	ldw	r2,-96(fp)
 8011654:	10800c17 	ldw	r2,48(r2)
 8011658:	e0bfed15 	stw	r2,-76(fp)
 801165c:	00000306 	br	801166c <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8011660:	e0bfe817 	ldw	r2,-96(fp)
 8011664:	10800b17 	ldw	r2,44(r2)
 8011668:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 801166c:	e0fff603 	ldbu	r3,-40(fp)
 8011670:	18803fcc 	andi	r2,r3,255
 8011674:	1080201c 	xori	r2,r2,128
 8011678:	10bfe004 	addi	r2,r2,-128
 801167c:	10800050 	cmplti	r2,r2,1
 8011680:	10000c1e 	bne	r2,zero,80116b4 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 8011684:	e13ffa17 	ldw	r4,-24(fp)
 8011688:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 801168c:	e0bff917 	ldw	r2,-28(fp)
 8011690:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 8011694:	e0fff317 	ldw	r3,-52(fp)
 8011698:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 801169c:	e13ff817 	ldw	r4,-32(fp)
 80116a0:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 80116a4:	e0bff717 	ldw	r2,-36(fp)
 80116a8:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 80116ac:	e0fff317 	ldw	r3,-52(fp)
 80116b0:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 80116b4:	e13ff817 	ldw	r4,-32(fp)
 80116b8:	e0bffa17 	ldw	r2,-24(fp)
 80116bc:	20800c0e 	bge	r4,r2,80116f0 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 80116c0:	e0fffa17 	ldw	r3,-24(fp)
 80116c4:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 80116c8:	e13ff817 	ldw	r4,-32(fp)
 80116cc:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 80116d0:	e0bff317 	ldw	r2,-52(fp)
 80116d4:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 80116d8:	e0fff917 	ldw	r3,-28(fp)
 80116dc:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 80116e0:	e13ff717 	ldw	r4,-36(fp)
 80116e4:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 80116e8:	e0bff317 	ldw	r2,-52(fp)
 80116ec:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 80116f0:	e0fff817 	ldw	r3,-32(fp)
 80116f4:	e13ffa17 	ldw	r4,-24(fp)
 80116f8:	1907c83a 	sub	r3,r3,r4
 80116fc:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 8011700:	e0fff717 	ldw	r3,-36(fp)
 8011704:	e13ff917 	ldw	r4,-28(fp)
 8011708:	1905c83a 	sub	r2,r3,r4
 801170c:	e0bff415 	stw	r2,-48(fp)
 8011710:	e0fff417 	ldw	r3,-48(fp)
 8011714:	1804403a 	cmpge	r2,r3,zero
 8011718:	1000031e 	bne	r2,zero,8011728 <alt_up_pixel_buffer_dma_draw_line+0x220>
 801171c:	e13ff417 	ldw	r4,-48(fp)
 8011720:	0109c83a 	sub	r4,zero,r4
 8011724:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 8011728:	e0fff517 	ldw	r3,-44(fp)
 801172c:	1804d7fa 	srli	r2,r3,31
 8011730:	e13ff517 	ldw	r4,-44(fp)
 8011734:	1105883a 	add	r2,r2,r4
 8011738:	1005d07a 	srai	r2,r2,1
 801173c:	0085c83a 	sub	r2,zero,r2
 8011740:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 8011744:	e0bff917 	ldw	r2,-28(fp)
 8011748:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 801174c:	e0fff917 	ldw	r3,-28(fp)
 8011750:	e13ff717 	ldw	r4,-36(fp)
 8011754:	1900030e 	bge	r3,r4,8011764 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 8011758:	00800044 	movi	r2,1
 801175c:	e0bff215 	stw	r2,-56(fp)
 8011760:	00000206 	br	801176c <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 8011764:	00ffffc4 	movi	r3,-1
 8011768:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 801176c:	e13ff603 	ldbu	r4,-40(fp)
 8011770:	20803fcc 	andi	r2,r4,255
 8011774:	1080201c 	xori	r2,r2,128
 8011778:	10bfe004 	addi	r2,r2,-128
 801177c:	10800058 	cmpnei	r2,r2,1
 8011780:	1000221e 	bne	r2,zero,801180c <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 8011784:	e0bffa17 	ldw	r2,-24(fp)
 8011788:	e0bff115 	stw	r2,-60(fp)
 801178c:	00001b06 	br	80117fc <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8011790:	e0ffee17 	ldw	r3,-72(fp)
 8011794:	d8c00015 	stw	r3,0(sp)
 8011798:	e13fef17 	ldw	r4,-68(fp)
 801179c:	d9000115 	stw	r4,4(sp)
 80117a0:	e13fed17 	ldw	r4,-76(fp)
 80117a4:	e17fec17 	ldw	r5,-80(fp)
 80117a8:	e1bff017 	ldw	r6,-64(fp)
 80117ac:	e1fff117 	ldw	r7,-60(fp)
 80117b0:	80114380 	call	8011438 <helper_plot_pixel>
			error = error + deltay;
 80117b4:	e0bff317 	ldw	r2,-52(fp)
 80117b8:	e0fff417 	ldw	r3,-48(fp)
 80117bc:	10c5883a 	add	r2,r2,r3
 80117c0:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 80117c4:	e13ff317 	ldw	r4,-52(fp)
 80117c8:	20800050 	cmplti	r2,r4,1
 80117cc:	1000081e 	bne	r2,zero,80117f0 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 80117d0:	e0bff017 	ldw	r2,-64(fp)
 80117d4:	e0fff217 	ldw	r3,-56(fp)
 80117d8:	10c5883a 	add	r2,r2,r3
 80117dc:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 80117e0:	e13ff317 	ldw	r4,-52(fp)
 80117e4:	e0bff517 	ldw	r2,-44(fp)
 80117e8:	2089c83a 	sub	r4,r4,r2
 80117ec:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 80117f0:	e0fff117 	ldw	r3,-60(fp)
 80117f4:	18c00044 	addi	r3,r3,1
 80117f8:	e0fff115 	stw	r3,-60(fp)
 80117fc:	e13ff817 	ldw	r4,-32(fp)
 8011800:	e0bff117 	ldw	r2,-60(fp)
 8011804:	20bfe20e 	bge	r4,r2,8011790 <alt_up_pixel_buffer_dma_draw_line+0x288>
 8011808:	00002106 	br	8011890 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 801180c:	e0fffa17 	ldw	r3,-24(fp)
 8011810:	e0fff115 	stw	r3,-60(fp)
 8011814:	00001b06 	br	8011884 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 8011818:	e13fee17 	ldw	r4,-72(fp)
 801181c:	d9000015 	stw	r4,0(sp)
 8011820:	e0bfef17 	ldw	r2,-68(fp)
 8011824:	d8800115 	stw	r2,4(sp)
 8011828:	e13fed17 	ldw	r4,-76(fp)
 801182c:	e17fec17 	ldw	r5,-80(fp)
 8011830:	e1bff117 	ldw	r6,-60(fp)
 8011834:	e1fff017 	ldw	r7,-64(fp)
 8011838:	80114380 	call	8011438 <helper_plot_pixel>
			error = error + deltay;
 801183c:	e0fff317 	ldw	r3,-52(fp)
 8011840:	e13ff417 	ldw	r4,-48(fp)
 8011844:	1907883a 	add	r3,r3,r4
 8011848:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 801184c:	e0fff317 	ldw	r3,-52(fp)
 8011850:	18800050 	cmplti	r2,r3,1
 8011854:	1000081e 	bne	r2,zero,8011878 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 8011858:	e13ff017 	ldw	r4,-64(fp)
 801185c:	e0bff217 	ldw	r2,-56(fp)
 8011860:	2089883a 	add	r4,r4,r2
 8011864:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 8011868:	e0fff317 	ldw	r3,-52(fp)
 801186c:	e13ff517 	ldw	r4,-44(fp)
 8011870:	1907c83a 	sub	r3,r3,r4
 8011874:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8011878:	e0bff117 	ldw	r2,-60(fp)
 801187c:	10800044 	addi	r2,r2,1
 8011880:	e0bff115 	stw	r2,-60(fp)
 8011884:	e0fff817 	ldw	r3,-32(fp)
 8011888:	e13ff117 	ldw	r4,-60(fp)
 801188c:	193fe20e 	bge	r3,r4,8011818 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8011890:	e037883a 	mov	sp,fp
 8011894:	dfc00117 	ldw	ra,4(sp)
 8011898:	df000017 	ldw	fp,0(sp)
 801189c:	dec00204 	addi	sp,sp,8
 80118a0:	f800283a 	ret

080118a4 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 80118a4:	defffa04 	addi	sp,sp,-24
 80118a8:	dfc00515 	stw	ra,20(sp)
 80118ac:	df000415 	stw	fp,16(sp)
 80118b0:	df000404 	addi	fp,sp,16
 80118b4:	e13ffe15 	stw	r4,-8(fp)
 80118b8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 80118bc:	e03ffd15 	stw	zero,-12(fp)
    
    if (alt_up_sd_card_is_Present())
 80118c0:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 80118c4:	1005003a 	cmpeq	r2,r2,zero
 80118c8:	1000221e 	bne	r2,zero,8011954 <Write_Sector_Data+0xb0>
    {
        short int reg_state = 0xff;
 80118cc:	00803fc4 	movi	r2,255
 80118d0:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 80118d4:	d0a6e217 	ldw	r2,-25720(gp)
 80118d8:	1009883a 	mov	r4,r2
 80118dc:	e0fffe17 	ldw	r3,-8(fp)
 80118e0:	e0bfff17 	ldw	r2,-4(fp)
 80118e4:	1885883a 	add	r2,r3,r2
 80118e8:	1006927a 	slli	r3,r2,9
 80118ec:	2005883a 	mov	r2,r4
 80118f0:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 80118f4:	d0a6e117 	ldw	r2,-25724(gp)
 80118f8:	1007883a 	mov	r3,r2
 80118fc:	00800604 	movi	r2,24
 8011900:	1880002d 	sthio	r2,0(r3)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 8011904:	d0a6de17 	ldw	r2,-25736(gp)
 8011908:	1080002b 	ldhuio	r2,0(r2)
 801190c:	e0bffc0d 	sth	r2,-16(fp)
        } while ((reg_state & 0x04)!=0);
 8011910:	e0bffc0b 	ldhu	r2,-16(fp)
 8011914:	10bfffcc 	andi	r2,r2,65535
 8011918:	1080010c 	andi	r2,r2,4
 801191c:	1004c03a 	cmpne	r2,r2,zero
 8011920:	103ff81e 	bne	r2,zero,8011904 <Write_Sector_Data+0x60>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
 8011924:	e0bffc0b 	ldhu	r2,-16(fp)
 8011928:	10bfffcc 	andi	r2,r2,65535
 801192c:	1080040c 	andi	r2,r2,16
 8011930:	1004c03a 	cmpne	r2,r2,zero
 8011934:	1000071e 	bne	r2,zero,8011954 <Write_Sector_Data+0xb0>
        {
            result = true;
 8011938:	00800044 	movi	r2,1
 801193c:	e0bffd15 	stw	r2,-12(fp)
            current_sector_modified = false;
 8011940:	d026e715 	stw	zero,-25700(gp)
            current_sector_index = sector_index+partition_offset;
 8011944:	e0fffe17 	ldw	r3,-8(fp)
 8011948:	e0bfff17 	ldw	r2,-4(fp)
 801194c:	1885883a 	add	r2,r3,r2
 8011950:	d0a6e815 	stw	r2,-25696(gp)
        }
    }
    return result;
 8011954:	e0bffd17 	ldw	r2,-12(fp)
}
 8011958:	e037883a 	mov	sp,fp
 801195c:	dfc00117 	ldw	ra,4(sp)
 8011960:	df000017 	ldw	fp,0(sp)
 8011964:	dec00204 	addi	sp,sp,8
 8011968:	f800283a 	ret

0801196c <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 801196c:	defffd04 	addi	sp,sp,-12
 8011970:	dfc00215 	stw	ra,8(sp)
 8011974:	df000115 	stw	fp,4(sp)
 8011978:	df000104 	addi	fp,sp,4
    bool result = true;
 801197c:	00800044 	movi	r2,1
 8011980:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
 8011984:	d0a6e717 	ldw	r2,-25700(gp)
 8011988:	1005003a 	cmpeq	r2,r2,zero
 801198c:	1000051e 	bne	r2,zero,80119a4 <Save_Modified_Sector+0x38>
    {
        result = Write_Sector_Data(current_sector_index, 0);
 8011990:	d0a6e817 	ldw	r2,-25696(gp)
 8011994:	1009883a 	mov	r4,r2
 8011998:	000b883a 	mov	r5,zero
 801199c:	80118a40 	call	80118a4 <Write_Sector_Data>
 80119a0:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
 80119a4:	e0bfff17 	ldw	r2,-4(fp)
}
 80119a8:	e037883a 	mov	sp,fp
 80119ac:	dfc00117 	ldw	ra,4(sp)
 80119b0:	df000017 	ldw	fp,0(sp)
 80119b4:	dec00204 	addi	sp,sp,8
 80119b8:	f800283a 	ret

080119bc <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 80119bc:	defff904 	addi	sp,sp,-28
 80119c0:	dfc00615 	stw	ra,24(sp)
 80119c4:	df000515 	stw	fp,20(sp)
 80119c8:	df000504 	addi	fp,sp,20
 80119cc:	e13ffd15 	stw	r4,-12(fp)
 80119d0:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 80119d4:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
 80119d8:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 80119dc:	1005003a 	cmpeq	r2,r2,zero
 80119e0:	10002d1e 	bne	r2,zero,8011a98 <Read_Sector_Data+0xdc>
	{
		short int reg_state = 0xff;
 80119e4:	00803fc4 	movi	r2,255
 80119e8:	e0bffb0d 	sth	r2,-20(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
 80119ec:	d0a6e717 	ldw	r2,-25700(gp)
 80119f0:	1005003a 	cmpeq	r2,r2,zero
 80119f4:	1000081e 	bne	r2,zero,8011a18 <Read_Sector_Data+0x5c>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
 80119f8:	d0a6e817 	ldw	r2,-25696(gp)
 80119fc:	1009883a 	mov	r4,r2
 8011a00:	000b883a 	mov	r5,zero
 8011a04:	80118a40 	call	80118a4 <Write_Sector_Data>
 8011a08:	1004c03a 	cmpne	r2,r2,zero
 8011a0c:	1000021e 	bne	r2,zero,8011a18 <Read_Sector_Data+0x5c>
            {
                return false;
 8011a10:	e03fff15 	stw	zero,-4(fp)
 8011a14:	00002206 	br	8011aa0 <Read_Sector_Data+0xe4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 8011a18:	d0a6e217 	ldw	r2,-25720(gp)
 8011a1c:	1009883a 	mov	r4,r2
 8011a20:	e0fffd17 	ldw	r3,-12(fp)
 8011a24:	e0bffe17 	ldw	r2,-8(fp)
 8011a28:	1885883a 	add	r2,r3,r2
 8011a2c:	1006927a 	slli	r3,r2,9
 8011a30:	2005883a 	mov	r2,r4
 8011a34:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 8011a38:	d0a6e117 	ldw	r2,-25724(gp)
 8011a3c:	1007883a 	mov	r3,r2
 8011a40:	00800444 	movi	r2,17
 8011a44:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 8011a48:	d0a6de17 	ldw	r2,-25736(gp)
 8011a4c:	1080002b 	ldhuio	r2,0(r2)
 8011a50:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04)!=0);
 8011a54:	e0bffb0b 	ldhu	r2,-20(fp)
 8011a58:	10bfffcc 	andi	r2,r2,65535
 8011a5c:	1080010c 	andi	r2,r2,4
 8011a60:	1004c03a 	cmpne	r2,r2,zero
 8011a64:	103ff81e 	bne	r2,zero,8011a48 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
 8011a68:	e0bffb0b 	ldhu	r2,-20(fp)
 8011a6c:	10bfffcc 	andi	r2,r2,65535
 8011a70:	1080040c 	andi	r2,r2,16
 8011a74:	1004c03a 	cmpne	r2,r2,zero
 8011a78:	1000071e 	bne	r2,zero,8011a98 <Read_Sector_Data+0xdc>
		{
			result = true;
 8011a7c:	00800044 	movi	r2,1
 8011a80:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 8011a84:	d026e715 	stw	zero,-25700(gp)
            current_sector_index = sector_index+partition_offset;
 8011a88:	e0fffd17 	ldw	r3,-12(fp)
 8011a8c:	e0bffe17 	ldw	r2,-8(fp)
 8011a90:	1885883a 	add	r2,r3,r2
 8011a94:	d0a6e815 	stw	r2,-25696(gp)
		}
	}
	return result;
 8011a98:	e0bffc17 	ldw	r2,-16(fp)
 8011a9c:	e0bfff15 	stw	r2,-4(fp)
 8011aa0:	e0bfff17 	ldw	r2,-4(fp)
}
 8011aa4:	e037883a 	mov	sp,fp
 8011aa8:	dfc00117 	ldw	ra,4(sp)
 8011aac:	df000017 	ldw	fp,0(sp)
 8011ab0:	dec00204 	addi	sp,sp,8
 8011ab4:	f800283a 	ret

08011ab8 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 8011ab8:	defffa04 	addi	sp,sp,-24
 8011abc:	dfc00515 	stw	ra,20(sp)
 8011ac0:	df000415 	stw	fp,16(sp)
 8011ac4:	df000404 	addi	fp,sp,16
 8011ac8:	e13ffd15 	stw	r4,-12(fp)
 8011acc:	e17ffe15 	stw	r5,-8(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
 8011ad0:	e0bffd17 	ldw	r2,-12(fp)
 8011ad4:	1006d23a 	srli	r3,r2,8
 8011ad8:	d0a6e417 	ldw	r2,-25712(gp)
 8011adc:	1885883a 	add	r2,r3,r2
 8011ae0:	e0bffc15 	stw	r2,-16(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 8011ae4:	008200b4 	movhi	r2,2050
 8011ae8:	10abba04 	addi	r2,r2,-20760
 8011aec:	10c01117 	ldw	r3,68(r2)
 8011af0:	e0bffc17 	ldw	r2,-16(fp)
 8011af4:	10c5883a 	add	r2,r2,r3
 8011af8:	e0bffc15 	stw	r2,-16(fp)
     
    if (sector_index != current_sector_index)
 8011afc:	d0e6e817 	ldw	r3,-25696(gp)
 8011b00:	e0bffc17 	ldw	r2,-16(fp)
 8011b04:	10c00726 	beq	r2,r3,8011b24 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 8011b08:	e13ffc17 	ldw	r4,-16(fp)
 8011b0c:	000b883a 	mov	r5,zero
 8011b10:	80119bc0 	call	80119bc <Read_Sector_Data>
 8011b14:	1004c03a 	cmpne	r2,r2,zero
 8011b18:	1000021e 	bne	r2,zero,8011b24 <get_cluster_flag+0x6c>
        {
            return false;
 8011b1c:	e03fff15 	stw	zero,-4(fp)
 8011b20:	00000d06 	br	8011b58 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
 8011b24:	d0a6e617 	ldw	r2,-25704(gp)
 8011b28:	10800a17 	ldw	r2,40(r2)
 8011b2c:	1007883a 	mov	r3,r2
 8011b30:	e0bffd17 	ldw	r2,-12(fp)
 8011b34:	10803fcc 	andi	r2,r2,255
 8011b38:	1085883a 	add	r2,r2,r2
 8011b3c:	1885883a 	add	r2,r3,r2
 8011b40:	1080002b 	ldhuio	r2,0(r2)
 8011b44:	1007883a 	mov	r3,r2
 8011b48:	e0bffe17 	ldw	r2,-8(fp)
 8011b4c:	10c0000d 	sth	r3,0(r2)
    return true;
 8011b50:	00800044 	movi	r2,1
 8011b54:	e0bfff15 	stw	r2,-4(fp)
 8011b58:	e0bfff17 	ldw	r2,-4(fp)
}
 8011b5c:	e037883a 	mov	sp,fp
 8011b60:	dfc00117 	ldw	ra,4(sp)
 8011b64:	df000017 	ldw	fp,0(sp)
 8011b68:	dec00204 	addi	sp,sp,8
 8011b6c:	f800283a 	ret

08011b70 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 8011b70:	defff904 	addi	sp,sp,-28
 8011b74:	dfc00615 	stw	ra,24(sp)
 8011b78:	df000515 	stw	fp,20(sp)
 8011b7c:	df000504 	addi	fp,sp,20
 8011b80:	e13ffc15 	stw	r4,-16(fp)
 8011b84:	e1bffe15 	stw	r6,-8(fp)
 8011b88:	e17ffd0d 	sth	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
 8011b8c:	e0bffc17 	ldw	r2,-16(fp)
 8011b90:	1006d23a 	srli	r3,r2,8
 8011b94:	d0a6e417 	ldw	r2,-25712(gp)
 8011b98:	1885883a 	add	r2,r3,r2
 8011b9c:	e0bffb15 	stw	r2,-20(fp)
    
    if (first_fat)
 8011ba0:	e0bffe17 	ldw	r2,-8(fp)
 8011ba4:	1005003a 	cmpeq	r2,r2,zero
 8011ba8:	1000071e 	bne	r2,zero,8011bc8 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 8011bac:	008200b4 	movhi	r2,2050
 8011bb0:	10abba04 	addi	r2,r2,-20760
 8011bb4:	10c01117 	ldw	r3,68(r2)
 8011bb8:	e0bffb17 	ldw	r2,-20(fp)
 8011bbc:	10c5883a 	add	r2,r2,r3
 8011bc0:	e0bffb15 	stw	r2,-20(fp)
 8011bc4:	00000606 	br	8011be0 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
 8011bc8:	008200b4 	movhi	r2,2050
 8011bcc:	10abba04 	addi	r2,r2,-20760
 8011bd0:	10c01217 	ldw	r3,72(r2)
 8011bd4:	e0bffb17 	ldw	r2,-20(fp)
 8011bd8:	10c5883a 	add	r2,r2,r3
 8011bdc:	e0bffb15 	stw	r2,-20(fp)
    }
     
    if (sector_index != current_sector_index)
 8011be0:	d0e6e817 	ldw	r3,-25696(gp)
 8011be4:	e0bffb17 	ldw	r2,-20(fp)
 8011be8:	10c00726 	beq	r2,r3,8011c08 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 8011bec:	e13ffb17 	ldw	r4,-20(fp)
 8011bf0:	000b883a 	mov	r5,zero
 8011bf4:	80119bc0 	call	80119bc <Read_Sector_Data>
 8011bf8:	1004c03a 	cmpne	r2,r2,zero
 8011bfc:	1000021e 	bne	r2,zero,8011c08 <mark_cluster+0x98>
        {
            return false;
 8011c00:	e03fff15 	stw	zero,-4(fp)
 8011c04:	00000d06 	br	8011c3c <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 8011c08:	d0a6e617 	ldw	r2,-25704(gp)
 8011c0c:	10800a17 	ldw	r2,40(r2)
 8011c10:	1007883a 	mov	r3,r2
 8011c14:	e0bffc17 	ldw	r2,-16(fp)
 8011c18:	10803fcc 	andi	r2,r2,255
 8011c1c:	1085883a 	add	r2,r2,r2
 8011c20:	1885883a 	add	r2,r3,r2
 8011c24:	e0fffd0f 	ldh	r3,-12(fp)
 8011c28:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
 8011c2c:	00800044 	movi	r2,1
 8011c30:	d0a6e715 	stw	r2,-25700(gp)
    return true;
 8011c34:	00800044 	movi	r2,1
 8011c38:	e0bfff15 	stw	r2,-4(fp)
 8011c3c:	e0bfff17 	ldw	r2,-4(fp)
}
 8011c40:	e037883a 	mov	sp,fp
 8011c44:	dfc00117 	ldw	ra,4(sp)
 8011c48:	df000017 	ldw	fp,0(sp)
 8011c4c:	dec00204 	addi	sp,sp,8
 8011c50:	f800283a 	ret

08011c54 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 8011c54:	defff704 	addi	sp,sp,-36
 8011c58:	dfc00815 	stw	ra,32(sp)
 8011c5c:	df000715 	stw	fp,28(sp)
 8011c60:	df000704 	addi	fp,sp,28
	bool result = false;
 8011c64:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
 8011c68:	0009883a 	mov	r4,zero
 8011c6c:	000b883a 	mov	r5,zero
 8011c70:	80119bc0 	call	80119bc <Read_Sector_Data>
 8011c74:	1005003a 	cmpeq	r2,r2,zero
 8011c78:	10005c1e 	bne	r2,zero,8011dec <Check_for_Master_Boot_Record+0x198>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 8011c7c:	d0a6e617 	ldw	r2,-25704(gp)
 8011c80:	10800a17 	ldw	r2,40(r2)
 8011c84:	10807f84 	addi	r2,r2,510
 8011c88:	1080002b 	ldhuio	r2,0(r2)
 8011c8c:	10bfffcc 	andi	r2,r2,65535
 8011c90:	10a0001c 	xori	r2,r2,32768
 8011c94:	10a00004 	addi	r2,r2,-32768
 8011c98:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
 8011c9c:	e0bffd17 	ldw	r2,-12(fp)
 8011ca0:	10ffffcc 	andi	r3,r2,65535
 8011ca4:	00aa9554 	movui	r2,43605
 8011ca8:	1880501e 	bne	r3,r2,8011dec <Check_for_Master_Boot_Record+0x198>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 8011cac:	e03ffe15 	stw	zero,-8(fp)
 8011cb0:	00004b06 	br	8011de0 <Check_for_Master_Boot_Record+0x18c>
			{
				int partition_data_offset = (index * 16) + 0x01be;
 8011cb4:	e0bffe17 	ldw	r2,-8(fp)
 8011cb8:	1004913a 	slli	r2,r2,4
 8011cbc:	10806f84 	addi	r2,r2,446
 8011cc0:	e0bffa15 	stw	r2,-24(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
 8011cc4:	d0a6e617 	ldw	r2,-25704(gp)
 8011cc8:	10800a17 	ldw	r2,40(r2)
 8011ccc:	1007883a 	mov	r3,r2
 8011cd0:	e0bffa17 	ldw	r2,-24(fp)
 8011cd4:	1885883a 	add	r2,r3,r2
 8011cd8:	10800104 	addi	r2,r2,4
 8011cdc:	10800023 	ldbuio	r2,0(r2)
 8011ce0:	e0bff905 	stb	r2,-28(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
 8011ce4:	e0bff907 	ldb	r2,-28(fp)
 8011ce8:	10800060 	cmpeqi	r2,r2,1
 8011cec:	1000091e 	bne	r2,zero,8011d14 <Check_for_Master_Boot_Record+0xc0>
 8011cf0:	e0bff907 	ldb	r2,-28(fp)
 8011cf4:	10800120 	cmpeqi	r2,r2,4
 8011cf8:	1000061e 	bne	r2,zero,8011d14 <Check_for_Master_Boot_Record+0xc0>
 8011cfc:	e0bff907 	ldb	r2,-28(fp)
 8011d00:	108001a0 	cmpeqi	r2,r2,6
 8011d04:	1000031e 	bne	r2,zero,8011d14 <Check_for_Master_Boot_Record+0xc0>
 8011d08:	e0bff907 	ldb	r2,-28(fp)
 8011d0c:	10800398 	cmpnei	r2,r2,14
 8011d10:	1000301e 	bne	r2,zero,8011dd4 <Check_for_Master_Boot_Record+0x180>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
 8011d14:	d0a6e617 	ldw	r2,-25704(gp)
 8011d18:	10800a17 	ldw	r2,40(r2)
 8011d1c:	1007883a 	mov	r3,r2
 8011d20:	e0bffa17 	ldw	r2,-24(fp)
 8011d24:	1885883a 	add	r2,r3,r2
 8011d28:	10800284 	addi	r2,r2,10
 8011d2c:	1080002b 	ldhuio	r2,0(r2)
 8011d30:	10bfffcc 	andi	r2,r2,65535
 8011d34:	1008943a 	slli	r4,r2,16
 8011d38:	d0a6e617 	ldw	r2,-25704(gp)
 8011d3c:	10800a17 	ldw	r2,40(r2)
 8011d40:	1007883a 	mov	r3,r2
 8011d44:	e0bffa17 	ldw	r2,-24(fp)
 8011d48:	1885883a 	add	r2,r3,r2
 8011d4c:	10800204 	addi	r2,r2,8
 8011d50:	1080002b 	ldhuio	r2,0(r2)
 8011d54:	10bfffcc 	andi	r2,r2,65535
 8011d58:	2084b03a 	or	r2,r4,r2
 8011d5c:	e0bffc15 	stw	r2,-16(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
 8011d60:	d0a6e617 	ldw	r2,-25704(gp)
 8011d64:	10800a17 	ldw	r2,40(r2)
 8011d68:	1007883a 	mov	r3,r2
 8011d6c:	e0bffa17 	ldw	r2,-24(fp)
 8011d70:	1885883a 	add	r2,r3,r2
 8011d74:	10800384 	addi	r2,r2,14
 8011d78:	1080002b 	ldhuio	r2,0(r2)
 8011d7c:	10bfffcc 	andi	r2,r2,65535
 8011d80:	1008943a 	slli	r4,r2,16
 8011d84:	d0a6e617 	ldw	r2,-25704(gp)
 8011d88:	10800a17 	ldw	r2,40(r2)
 8011d8c:	1007883a 	mov	r3,r2
 8011d90:	e0bffa17 	ldw	r2,-24(fp)
 8011d94:	1885883a 	add	r2,r3,r2
 8011d98:	10800304 	addi	r2,r2,12
 8011d9c:	1080002b 	ldhuio	r2,0(r2)
 8011da0:	10bfffcc 	andi	r2,r2,65535
 8011da4:	2084b03a 	or	r2,r4,r2
 8011da8:	e0bffb15 	stw	r2,-20(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
 8011dac:	e0bffb17 	ldw	r2,-20(fp)
 8011db0:	10800050 	cmplti	r2,r2,1
 8011db4:	1000071e 	bne	r2,zero,8011dd4 <Check_for_Master_Boot_Record+0x180>
					{
						result = true;
 8011db8:	00800044 	movi	r2,1
 8011dbc:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 8011dc0:	e0bffb17 	ldw	r2,-20(fp)
 8011dc4:	d0a6e515 	stw	r2,-25708(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 8011dc8:	e0bffc17 	ldw	r2,-16(fp)
 8011dcc:	d0a6e415 	stw	r2,-25712(gp)
						break;
 8011dd0:	00000606 	br	8011dec <Check_for_Master_Boot_Record+0x198>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 8011dd4:	e0bffe17 	ldw	r2,-8(fp)
 8011dd8:	10800044 	addi	r2,r2,1
 8011ddc:	e0bffe15 	stw	r2,-8(fp)
 8011de0:	e0bffe17 	ldw	r2,-8(fp)
 8011de4:	10800110 	cmplti	r2,r2,4
 8011de8:	103fb21e 	bne	r2,zero,8011cb4 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 8011dec:	e0bfff17 	ldw	r2,-4(fp)
}
 8011df0:	e037883a 	mov	sp,fp
 8011df4:	dfc00117 	ldw	ra,4(sp)
 8011df8:	df000017 	ldw	fp,0(sp)
 8011dfc:	dec00204 	addi	sp,sp,8
 8011e00:	f800283a 	ret

08011e04 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 8011e04:	defff804 	addi	sp,sp,-32
 8011e08:	dfc00715 	stw	ra,28(sp)
 8011e0c:	df000615 	stw	fp,24(sp)
 8011e10:	df000604 	addi	fp,sp,24
 8011e14:	e13ffc15 	stw	r4,-16(fp)
 8011e18:	e17ffd15 	stw	r5,-12(fp)
 8011e1c:	e1bffe15 	stw	r6,-8(fp)
 8011e20:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 8011e24:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8011e28:	e0bffc17 	ldw	r2,-16(fp)
 8011e2c:	108007cc 	andi	r2,r2,31
 8011e30:	1004c03a 	cmpne	r2,r2,zero
 8011e34:	10008e1e 	bne	r2,zero,8012070 <Read_File_Record_At_Offset+0x26c>
 8011e38:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 8011e3c:	1005003a 	cmpeq	r2,r2,zero
 8011e40:	10008b1e 	bne	r2,zero,8012070 <Read_File_Record_At_Offset+0x26c>
 8011e44:	d0a6dd17 	ldw	r2,-25740(gp)
 8011e48:	1005003a 	cmpeq	r2,r2,zero
 8011e4c:	1000881e 	bne	r2,zero,8012070 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 8011e50:	e03ffa15 	stw	zero,-24(fp)
 8011e54:	00001006 	br	8011e98 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
 8011e58:	e17ffa17 	ldw	r5,-24(fp)
 8011e5c:	d0a6e617 	ldw	r2,-25704(gp)
 8011e60:	10800a17 	ldw	r2,40(r2)
 8011e64:	1009883a 	mov	r4,r2
 8011e68:	e0fffc17 	ldw	r3,-16(fp)
 8011e6c:	e0bffa17 	ldw	r2,-24(fp)
 8011e70:	1885883a 	add	r2,r3,r2
 8011e74:	2085883a 	add	r2,r4,r2
 8011e78:	10800023 	ldbuio	r2,0(r2)
 8011e7c:	1007883a 	mov	r3,r2
 8011e80:	e0bffd17 	ldw	r2,-12(fp)
 8011e84:	1145883a 	add	r2,r2,r5
 8011e88:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 8011e8c:	e0bffa17 	ldw	r2,-24(fp)
 8011e90:	10800044 	addi	r2,r2,1
 8011e94:	e0bffa15 	stw	r2,-24(fp)
 8011e98:	e0bffa17 	ldw	r2,-24(fp)
 8011e9c:	10800210 	cmplti	r2,r2,8
 8011ea0:	103fed1e 	bne	r2,zero,8011e58 <Read_File_Record_At_Offset+0x54>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 8011ea4:	e03ffa15 	stw	zero,-24(fp)
 8011ea8:	00001206 	br	8011ef4 <Read_File_Record_At_Offset+0xf0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
 8011eac:	e17ffa17 	ldw	r5,-24(fp)
 8011eb0:	d0a6e617 	ldw	r2,-25704(gp)
 8011eb4:	10800a17 	ldw	r2,40(r2)
 8011eb8:	1009883a 	mov	r4,r2
 8011ebc:	e0fffc17 	ldw	r3,-16(fp)
 8011ec0:	e0bffa17 	ldw	r2,-24(fp)
 8011ec4:	1885883a 	add	r2,r3,r2
 8011ec8:	2085883a 	add	r2,r4,r2
 8011ecc:	10800204 	addi	r2,r2,8
 8011ed0:	10800023 	ldbuio	r2,0(r2)
 8011ed4:	1007883a 	mov	r3,r2
 8011ed8:	e0bffd17 	ldw	r2,-12(fp)
 8011edc:	2885883a 	add	r2,r5,r2
 8011ee0:	10800204 	addi	r2,r2,8
 8011ee4:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 8011ee8:	e0bffa17 	ldw	r2,-24(fp)
 8011eec:	10800044 	addi	r2,r2,1
 8011ef0:	e0bffa15 	stw	r2,-24(fp)
 8011ef4:	e0bffa17 	ldw	r2,-24(fp)
 8011ef8:	108000d0 	cmplti	r2,r2,3
 8011efc:	103feb1e 	bne	r2,zero,8011eac <Read_File_Record_At_Offset+0xa8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
 8011f00:	d0a6e617 	ldw	r2,-25704(gp)
 8011f04:	10800a17 	ldw	r2,40(r2)
 8011f08:	1007883a 	mov	r3,r2
 8011f0c:	e0bffc17 	ldw	r2,-16(fp)
 8011f10:	1885883a 	add	r2,r3,r2
 8011f14:	108002c4 	addi	r2,r2,11
 8011f18:	10800023 	ldbuio	r2,0(r2)
 8011f1c:	1007883a 	mov	r3,r2
 8011f20:	e0bffd17 	ldw	r2,-12(fp)
 8011f24:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
 8011f28:	d0a6e617 	ldw	r2,-25704(gp)
 8011f2c:	10800a17 	ldw	r2,40(r2)
 8011f30:	1007883a 	mov	r3,r2
 8011f34:	e0bffc17 	ldw	r2,-16(fp)
 8011f38:	1885883a 	add	r2,r3,r2
 8011f3c:	10800384 	addi	r2,r2,14
 8011f40:	1080002b 	ldhuio	r2,0(r2)
 8011f44:	1007883a 	mov	r3,r2
 8011f48:	e0bffd17 	ldw	r2,-12(fp)
 8011f4c:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
 8011f50:	d0a6e617 	ldw	r2,-25704(gp)
 8011f54:	10800a17 	ldw	r2,40(r2)
 8011f58:	1007883a 	mov	r3,r2
 8011f5c:	e0bffc17 	ldw	r2,-16(fp)
 8011f60:	1885883a 	add	r2,r3,r2
 8011f64:	10800404 	addi	r2,r2,16
 8011f68:	1080002b 	ldhuio	r2,0(r2)
 8011f6c:	1007883a 	mov	r3,r2
 8011f70:	e0bffd17 	ldw	r2,-12(fp)
 8011f74:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
 8011f78:	d0a6e617 	ldw	r2,-25704(gp)
 8011f7c:	10800a17 	ldw	r2,40(r2)
 8011f80:	1007883a 	mov	r3,r2
 8011f84:	e0bffc17 	ldw	r2,-16(fp)
 8011f88:	1885883a 	add	r2,r3,r2
 8011f8c:	10800484 	addi	r2,r2,18
 8011f90:	1080002b 	ldhuio	r2,0(r2)
 8011f94:	1007883a 	mov	r3,r2
 8011f98:	e0bffd17 	ldw	r2,-12(fp)
 8011f9c:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
 8011fa0:	d0a6e617 	ldw	r2,-25704(gp)
 8011fa4:	10800a17 	ldw	r2,40(r2)
 8011fa8:	1007883a 	mov	r3,r2
 8011fac:	e0bffc17 	ldw	r2,-16(fp)
 8011fb0:	1885883a 	add	r2,r3,r2
 8011fb4:	10800584 	addi	r2,r2,22
 8011fb8:	1080002b 	ldhuio	r2,0(r2)
 8011fbc:	1007883a 	mov	r3,r2
 8011fc0:	e0bffd17 	ldw	r2,-12(fp)
 8011fc4:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
 8011fc8:	d0a6e617 	ldw	r2,-25704(gp)
 8011fcc:	10800a17 	ldw	r2,40(r2)
 8011fd0:	1007883a 	mov	r3,r2
 8011fd4:	e0bffc17 	ldw	r2,-16(fp)
 8011fd8:	1885883a 	add	r2,r3,r2
 8011fdc:	10800604 	addi	r2,r2,24
 8011fe0:	1080002b 	ldhuio	r2,0(r2)
 8011fe4:	1007883a 	mov	r3,r2
 8011fe8:	e0bffd17 	ldw	r2,-12(fp)
 8011fec:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
 8011ff0:	d0a6e617 	ldw	r2,-25704(gp)
 8011ff4:	10800a17 	ldw	r2,40(r2)
 8011ff8:	1007883a 	mov	r3,r2
 8011ffc:	e0bffc17 	ldw	r2,-16(fp)
 8012000:	1885883a 	add	r2,r3,r2
 8012004:	10800684 	addi	r2,r2,26
 8012008:	1080002b 	ldhuio	r2,0(r2)
 801200c:	1007883a 	mov	r3,r2
 8012010:	e0bffd17 	ldw	r2,-12(fp)
 8012014:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
 8012018:	d0a6e617 	ldw	r2,-25704(gp)
 801201c:	10800a17 	ldw	r2,40(r2)
 8012020:	1007883a 	mov	r3,r2
 8012024:	e0bffc17 	ldw	r2,-16(fp)
 8012028:	1885883a 	add	r2,r3,r2
 801202c:	10800704 	addi	r2,r2,28
 8012030:	10800037 	ldwio	r2,0(r2)
 8012034:	1007883a 	mov	r3,r2
 8012038:	e0bffd17 	ldw	r2,-12(fp)
 801203c:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
 8012040:	e0fffd17 	ldw	r3,-12(fp)
 8012044:	e0bffe17 	ldw	r2,-8(fp)
 8012048:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 801204c:	e0fffd17 	ldw	r3,-12(fp)
 8012050:	e0bfff17 	ldw	r2,-4(fp)
 8012054:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 8012058:	e0bffc17 	ldw	r2,-16(fp)
 801205c:	1007883a 	mov	r3,r2
 8012060:	e0bffd17 	ldw	r2,-12(fp)
 8012064:	10c00c0d 	sth	r3,48(r2)
		result = true;
 8012068:	00800044 	movi	r2,1
 801206c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 8012070:	e0bffb17 	ldw	r2,-20(fp)
}
 8012074:	e037883a 	mov	sp,fp
 8012078:	dfc00117 	ldw	ra,4(sp)
 801207c:	df000017 	ldw	fp,0(sp)
 8012080:	dec00204 	addi	sp,sp,8
 8012084:	f800283a 	ret

08012088 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 8012088:	defff904 	addi	sp,sp,-28
 801208c:	dfc00615 	stw	ra,24(sp)
 8012090:	df000515 	stw	fp,20(sp)
 8012094:	df000504 	addi	fp,sp,20
 8012098:	e13ffe15 	stw	r4,-8(fp)
 801209c:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 80120a0:	e03ffd15 	stw	zero,-12(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 80120a4:	e0bffe17 	ldw	r2,-8(fp)
 80120a8:	108007cc 	andi	r2,r2,31
 80120ac:	1004c03a 	cmpne	r2,r2,zero
 80120b0:	10009d1e 	bne	r2,zero,8012328 <Write_File_Record_At_Offset+0x2a0>
 80120b4:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 80120b8:	1005003a 	cmpeq	r2,r2,zero
 80120bc:	10009a1e 	bne	r2,zero,8012328 <Write_File_Record_At_Offset+0x2a0>
 80120c0:	d0a6dd17 	ldw	r2,-25740(gp)
 80120c4:	1005003a 	cmpeq	r2,r2,zero
 80120c8:	1000971e 	bne	r2,zero,8012328 <Write_File_Record_At_Offset+0x2a0>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 80120cc:	e03ffc15 	stw	zero,-16(fp)
 80120d0:	00001e06 	br	801214c <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
 80120d4:	e0bffc17 	ldw	r2,-16(fp)
 80120d8:	10c00044 	addi	r3,r2,1
 80120dc:	e0bfff17 	ldw	r2,-4(fp)
 80120e0:	10c5883a 	add	r2,r2,r3
 80120e4:	10800003 	ldbu	r2,0(r2)
 80120e8:	10803fcc 	andi	r2,r2,255
 80120ec:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars << 8;
 80120f0:	e0bffb0f 	ldh	r2,-20(fp)
 80120f4:	1004923a 	slli	r2,r2,8
 80120f8:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars | record->name[counter];
 80120fc:	e0fffc17 	ldw	r3,-16(fp)
 8012100:	e0bfff17 	ldw	r2,-4(fp)
 8012104:	10c5883a 	add	r2,r2,r3
 8012108:	10800003 	ldbu	r2,0(r2)
 801210c:	10c03fcc 	andi	r3,r2,255
 8012110:	e0bffb0b 	ldhu	r2,-20(fp)
 8012114:	10c4b03a 	or	r2,r2,r3
 8012118:	e0bffb0d 	sth	r2,-20(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 801211c:	d0a6e617 	ldw	r2,-25704(gp)
 8012120:	10800a17 	ldw	r2,40(r2)
 8012124:	1009883a 	mov	r4,r2
 8012128:	e0fffe17 	ldw	r3,-8(fp)
 801212c:	e0bffc17 	ldw	r2,-16(fp)
 8012130:	1885883a 	add	r2,r3,r2
 8012134:	2085883a 	add	r2,r4,r2
 8012138:	e0fffb0f 	ldh	r3,-20(fp)
 801213c:	10c0002d 	sthio	r3,0(r2)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 8012140:	e0bffc17 	ldw	r2,-16(fp)
 8012144:	10800084 	addi	r2,r2,2
 8012148:	e0bffc15 	stw	r2,-16(fp)
 801214c:	e0bffc17 	ldw	r2,-16(fp)
 8012150:	10800210 	cmplti	r2,r2,8
 8012154:	103fdf1e 	bne	r2,zero,80120d4 <Write_File_Record_At_Offset+0x4c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 8012158:	e03ffc15 	stw	zero,-16(fp)
 801215c:	00001306 	br	80121ac <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
 8012160:	d0a6e617 	ldw	r2,-25704(gp)
 8012164:	10800a17 	ldw	r2,40(r2)
 8012168:	1009883a 	mov	r4,r2
 801216c:	e0fffe17 	ldw	r3,-8(fp)
 8012170:	e0bffc17 	ldw	r2,-16(fp)
 8012174:	1885883a 	add	r2,r3,r2
 8012178:	2085883a 	add	r2,r4,r2
 801217c:	11000204 	addi	r4,r2,8
 8012180:	e0fffc17 	ldw	r3,-16(fp)
 8012184:	e0bfff17 	ldw	r2,-4(fp)
 8012188:	1885883a 	add	r2,r3,r2
 801218c:	10800204 	addi	r2,r2,8
 8012190:	10800003 	ldbu	r2,0(r2)
 8012194:	10c03fcc 	andi	r3,r2,255
 8012198:	2005883a 	mov	r2,r4
 801219c:	10c00025 	stbio	r3,0(r2)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 80121a0:	e0bffc17 	ldw	r2,-16(fp)
 80121a4:	10800044 	addi	r2,r2,1
 80121a8:	e0bffc15 	stw	r2,-16(fp)
 80121ac:	e0bffc17 	ldw	r2,-16(fp)
 80121b0:	108000d0 	cmplti	r2,r2,3
 80121b4:	103fea1e 	bne	r2,zero,8012160 <Write_File_Record_At_Offset+0xd8>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 80121b8:	d0a6e617 	ldw	r2,-25704(gp)
 80121bc:	10800a17 	ldw	r2,40(r2)
 80121c0:	1007883a 	mov	r3,r2
 80121c4:	e0bffe17 	ldw	r2,-8(fp)
 80121c8:	1885883a 	add	r2,r3,r2
 80121cc:	110002c4 	addi	r4,r2,11
 80121d0:	e0bfff17 	ldw	r2,-4(fp)
 80121d4:	108002c3 	ldbu	r2,11(r2)
 80121d8:	10c03fcc 	andi	r3,r2,255
 80121dc:	2005883a 	mov	r2,r4
 80121e0:	10c00025 	stbio	r3,0(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 80121e4:	d0a6e617 	ldw	r2,-25704(gp)
 80121e8:	10800a17 	ldw	r2,40(r2)
 80121ec:	1007883a 	mov	r3,r2
 80121f0:	e0bffe17 	ldw	r2,-8(fp)
 80121f4:	1885883a 	add	r2,r3,r2
 80121f8:	11000384 	addi	r4,r2,14
 80121fc:	e0bfff17 	ldw	r2,-4(fp)
 8012200:	1080030b 	ldhu	r2,12(r2)
 8012204:	10ffffcc 	andi	r3,r2,65535
 8012208:	2005883a 	mov	r2,r4
 801220c:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 8012210:	d0a6e617 	ldw	r2,-25704(gp)
 8012214:	10800a17 	ldw	r2,40(r2)
 8012218:	1007883a 	mov	r3,r2
 801221c:	e0bffe17 	ldw	r2,-8(fp)
 8012220:	1885883a 	add	r2,r3,r2
 8012224:	11000404 	addi	r4,r2,16
 8012228:	e0bfff17 	ldw	r2,-4(fp)
 801222c:	1080038b 	ldhu	r2,14(r2)
 8012230:	10ffffcc 	andi	r3,r2,65535
 8012234:	2005883a 	mov	r2,r4
 8012238:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
 801223c:	d0a6e617 	ldw	r2,-25704(gp)
 8012240:	10800a17 	ldw	r2,40(r2)
 8012244:	1007883a 	mov	r3,r2
 8012248:	e0bffe17 	ldw	r2,-8(fp)
 801224c:	1885883a 	add	r2,r3,r2
 8012250:	11000484 	addi	r4,r2,18
 8012254:	e0bfff17 	ldw	r2,-4(fp)
 8012258:	1080040b 	ldhu	r2,16(r2)
 801225c:	10ffffcc 	andi	r3,r2,65535
 8012260:	2005883a 	mov	r2,r4
 8012264:	10c0002d 	sthio	r3,0(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
 8012268:	d0a6e617 	ldw	r2,-25704(gp)
 801226c:	10800a17 	ldw	r2,40(r2)
 8012270:	1007883a 	mov	r3,r2
 8012274:	e0bffe17 	ldw	r2,-8(fp)
 8012278:	1885883a 	add	r2,r3,r2
 801227c:	11000584 	addi	r4,r2,22
 8012280:	e0bfff17 	ldw	r2,-4(fp)
 8012284:	1080048b 	ldhu	r2,18(r2)
 8012288:	10ffffcc 	andi	r3,r2,65535
 801228c:	2005883a 	mov	r2,r4
 8012290:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
 8012294:	d0a6e617 	ldw	r2,-25704(gp)
 8012298:	10800a17 	ldw	r2,40(r2)
 801229c:	1007883a 	mov	r3,r2
 80122a0:	e0bffe17 	ldw	r2,-8(fp)
 80122a4:	1885883a 	add	r2,r3,r2
 80122a8:	11000604 	addi	r4,r2,24
 80122ac:	e0bfff17 	ldw	r2,-4(fp)
 80122b0:	1080050b 	ldhu	r2,20(r2)
 80122b4:	10ffffcc 	andi	r3,r2,65535
 80122b8:	2005883a 	mov	r2,r4
 80122bc:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
 80122c0:	d0a6e617 	ldw	r2,-25704(gp)
 80122c4:	10800a17 	ldw	r2,40(r2)
 80122c8:	1007883a 	mov	r3,r2
 80122cc:	e0bffe17 	ldw	r2,-8(fp)
 80122d0:	1885883a 	add	r2,r3,r2
 80122d4:	11000684 	addi	r4,r2,26
 80122d8:	e0bfff17 	ldw	r2,-4(fp)
 80122dc:	1080058b 	ldhu	r2,22(r2)
 80122e0:	10ffffcc 	andi	r3,r2,65535
 80122e4:	2005883a 	mov	r2,r4
 80122e8:	10c0002d 	sthio	r3,0(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
 80122ec:	d0a6e617 	ldw	r2,-25704(gp)
 80122f0:	10800a17 	ldw	r2,40(r2)
 80122f4:	1007883a 	mov	r3,r2
 80122f8:	e0bffe17 	ldw	r2,-8(fp)
 80122fc:	1885883a 	add	r2,r3,r2
 8012300:	11000704 	addi	r4,r2,28
 8012304:	e0bfff17 	ldw	r2,-4(fp)
 8012308:	10800617 	ldw	r2,24(r2)
 801230c:	1007883a 	mov	r3,r2
 8012310:	2005883a 	mov	r2,r4
 8012314:	10c00035 	stwio	r3,0(r2)
        current_sector_modified = true;                  
 8012318:	00800044 	movi	r2,1
 801231c:	d0a6e715 	stw	r2,-25700(gp)
        result = true;
 8012320:	00800044 	movi	r2,1
 8012324:	e0bffd15 	stw	r2,-12(fp)
    }
    return result;
 8012328:	e0bffd17 	ldw	r2,-12(fp)
}
 801232c:	e037883a 	mov	sp,fp
 8012330:	dfc00117 	ldw	ra,4(sp)
 8012334:	df000017 	ldw	fp,0(sp)
 8012338:	dec00204 	addi	sp,sp,8
 801233c:	f800283a 	ret

08012340 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 8012340:	defff904 	addi	sp,sp,-28
 8012344:	dfc00615 	stw	ra,24(sp)
 8012348:	df000515 	stw	fp,20(sp)
 801234c:	df000504 	addi	fp,sp,20
 8012350:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 8012354:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 8012358:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
 801235c:	0009883a 	mov	r4,zero
 8012360:	e17fff17 	ldw	r5,-4(fp)
 8012364:	80119bc0 	call	80119bc <Read_Sector_Data>
 8012368:	e0bffe15 	stw	r2,-8(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 801236c:	d0a6e617 	ldw	r2,-25704(gp)
 8012370:	10800a17 	ldw	r2,40(r2)
 8012374:	10807f84 	addi	r2,r2,510
 8012378:	1080002b 	ldhuio	r2,0(r2)
 801237c:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
 8012380:	e0bffc0f 	ldh	r2,-16(fp)
 8012384:	10ffffcc 	andi	r3,r2,65535
 8012388:	00aa9554 	movui	r2,43605
 801238c:	1881751e 	bne	r3,r2,8012964 <Check_for_DOS_FAT+0x624>
 8012390:	e0bffe17 	ldw	r2,-8(fp)
 8012394:	1005003a 	cmpeq	r2,r2,zero
 8012398:	1001721e 	bne	r2,zero,8012964 <Check_for_DOS_FAT+0x624>
	{
		int num_clusters = 0;
 801239c:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
 80123a0:	d0a6e617 	ldw	r2,-25704(gp)
 80123a4:	10800a17 	ldw	r2,40(r2)
 80123a8:	10800023 	ldbuio	r2,0(r2)
 80123ac:	1007883a 	mov	r3,r2
 80123b0:	008200b4 	movhi	r2,2050
 80123b4:	10abba04 	addi	r2,r2,-20760
 80123b8:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
 80123bc:	d0a6e617 	ldw	r2,-25704(gp)
 80123c0:	10800a17 	ldw	r2,40(r2)
 80123c4:	10800044 	addi	r2,r2,1
 80123c8:	10800023 	ldbuio	r2,0(r2)
 80123cc:	1007883a 	mov	r3,r2
 80123d0:	008200b4 	movhi	r2,2050
 80123d4:	10abba04 	addi	r2,r2,-20760
 80123d8:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
 80123dc:	d0a6e617 	ldw	r2,-25704(gp)
 80123e0:	10800a17 	ldw	r2,40(r2)
 80123e4:	10800084 	addi	r2,r2,2
 80123e8:	10800023 	ldbuio	r2,0(r2)
 80123ec:	1007883a 	mov	r3,r2
 80123f0:	008200b4 	movhi	r2,2050
 80123f4:	10abba04 	addi	r2,r2,-20760
 80123f8:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
 80123fc:	e03ffd15 	stw	zero,-12(fp)
 8012400:	00001006 	br	8012444 <Check_for_DOS_FAT+0x104>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
 8012404:	e13ffd17 	ldw	r4,-12(fp)
 8012408:	d0a6e617 	ldw	r2,-25704(gp)
 801240c:	10800a17 	ldw	r2,40(r2)
 8012410:	1007883a 	mov	r3,r2
 8012414:	e0bffd17 	ldw	r2,-12(fp)
 8012418:	1885883a 	add	r2,r3,r2
 801241c:	108000c4 	addi	r2,r2,3
 8012420:	10800023 	ldbuio	r2,0(r2)
 8012424:	1007883a 	mov	r3,r2
 8012428:	008200b4 	movhi	r2,2050
 801242c:	10abba04 	addi	r2,r2,-20760
 8012430:	1105883a 	add	r2,r2,r4
 8012434:	10c000c5 	stb	r3,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
 8012438:	e0bffd17 	ldw	r2,-12(fp)
 801243c:	10800044 	addi	r2,r2,1
 8012440:	e0bffd15 	stw	r2,-12(fp)
 8012444:	e0bffd17 	ldw	r2,-12(fp)
 8012448:	10800210 	cmplti	r2,r2,8
 801244c:	103fed1e 	bne	r2,zero,8012404 <Check_for_DOS_FAT+0xc4>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
 8012450:	d0a6e617 	ldw	r2,-25704(gp)
 8012454:	10800a17 	ldw	r2,40(r2)
 8012458:	10800304 	addi	r2,r2,12
 801245c:	10800023 	ldbuio	r2,0(r2)
 8012460:	10803fcc 	andi	r2,r2,255
 8012464:	1004923a 	slli	r2,r2,8
 8012468:	1007883a 	mov	r3,r2
 801246c:	d0a6e617 	ldw	r2,-25704(gp)
 8012470:	10800a17 	ldw	r2,40(r2)
 8012474:	108002c4 	addi	r2,r2,11
 8012478:	10800023 	ldbuio	r2,0(r2)
 801247c:	10803fcc 	andi	r2,r2,255
 8012480:	1080201c 	xori	r2,r2,128
 8012484:	10bfe004 	addi	r2,r2,-128
 8012488:	1884b03a 	or	r2,r3,r2
 801248c:	1007883a 	mov	r3,r2
 8012490:	008200b4 	movhi	r2,2050
 8012494:	10abba04 	addi	r2,r2,-20760
 8012498:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
 801249c:	d0a6e617 	ldw	r2,-25704(gp)
 80124a0:	10800a17 	ldw	r2,40(r2)
 80124a4:	10800344 	addi	r2,r2,13
 80124a8:	10800023 	ldbuio	r2,0(r2)
 80124ac:	1007883a 	mov	r3,r2
 80124b0:	008200b4 	movhi	r2,2050
 80124b4:	10abba04 	addi	r2,r2,-20760
 80124b8:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
 80124bc:	d0a6e617 	ldw	r2,-25704(gp)
 80124c0:	10800a17 	ldw	r2,40(r2)
 80124c4:	10800384 	addi	r2,r2,14
 80124c8:	1080002b 	ldhuio	r2,0(r2)
 80124cc:	1007883a 	mov	r3,r2
 80124d0:	008200b4 	movhi	r2,2050
 80124d4:	10abba04 	addi	r2,r2,-20760
 80124d8:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
 80124dc:	d0a6e617 	ldw	r2,-25704(gp)
 80124e0:	10800a17 	ldw	r2,40(r2)
 80124e4:	10800404 	addi	r2,r2,16
 80124e8:	10800023 	ldbuio	r2,0(r2)
 80124ec:	1007883a 	mov	r3,r2
 80124f0:	008200b4 	movhi	r2,2050
 80124f4:	10abba04 	addi	r2,r2,-20760
 80124f8:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
 80124fc:	d0a6e617 	ldw	r2,-25704(gp)
 8012500:	10800a17 	ldw	r2,40(r2)
 8012504:	10800484 	addi	r2,r2,18
 8012508:	10800023 	ldbuio	r2,0(r2)
 801250c:	10803fcc 	andi	r2,r2,255
 8012510:	1004923a 	slli	r2,r2,8
 8012514:	1007883a 	mov	r3,r2
 8012518:	d0a6e617 	ldw	r2,-25704(gp)
 801251c:	10800a17 	ldw	r2,40(r2)
 8012520:	10800444 	addi	r2,r2,17
 8012524:	10800023 	ldbuio	r2,0(r2)
 8012528:	10803fcc 	andi	r2,r2,255
 801252c:	1884b03a 	or	r2,r3,r2
 8012530:	1007883a 	mov	r3,r2
 8012534:	008200b4 	movhi	r2,2050
 8012538:	10abba04 	addi	r2,r2,-20760
 801253c:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
 8012540:	d0a6e617 	ldw	r2,-25704(gp)
 8012544:	10800a17 	ldw	r2,40(r2)
 8012548:	10800504 	addi	r2,r2,20
 801254c:	10800023 	ldbuio	r2,0(r2)
 8012550:	10803fcc 	andi	r2,r2,255
 8012554:	1004923a 	slli	r2,r2,8
 8012558:	1007883a 	mov	r3,r2
 801255c:	d0a6e617 	ldw	r2,-25704(gp)
 8012560:	10800a17 	ldw	r2,40(r2)
 8012564:	108004c4 	addi	r2,r2,19
 8012568:	10800023 	ldbuio	r2,0(r2)
 801256c:	10803fcc 	andi	r2,r2,255
 8012570:	1884b03a 	or	r2,r3,r2
 8012574:	1007883a 	mov	r3,r2
 8012578:	008200b4 	movhi	r2,2050
 801257c:	10abba04 	addi	r2,r2,-20760
 8012580:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
 8012584:	d0a6e617 	ldw	r2,-25704(gp)
 8012588:	10800a17 	ldw	r2,40(r2)
 801258c:	10800544 	addi	r2,r2,21
 8012590:	10800023 	ldbuio	r2,0(r2)
 8012594:	1007883a 	mov	r3,r2
 8012598:	008200b4 	movhi	r2,2050
 801259c:	10abba04 	addi	r2,r2,-20760
 80125a0:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
 80125a4:	d0a6e617 	ldw	r2,-25704(gp)
 80125a8:	10800a17 	ldw	r2,40(r2)
 80125ac:	10800584 	addi	r2,r2,22
 80125b0:	1080002b 	ldhuio	r2,0(r2)
 80125b4:	1007883a 	mov	r3,r2
 80125b8:	008200b4 	movhi	r2,2050
 80125bc:	10abba04 	addi	r2,r2,-20760
 80125c0:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
 80125c4:	d0a6e617 	ldw	r2,-25704(gp)
 80125c8:	10800a17 	ldw	r2,40(r2)
 80125cc:	10800604 	addi	r2,r2,24
 80125d0:	1080002b 	ldhuio	r2,0(r2)
 80125d4:	1007883a 	mov	r3,r2
 80125d8:	008200b4 	movhi	r2,2050
 80125dc:	10abba04 	addi	r2,r2,-20760
 80125e0:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
 80125e4:	d0a6e617 	ldw	r2,-25704(gp)
 80125e8:	10800a17 	ldw	r2,40(r2)
 80125ec:	10800684 	addi	r2,r2,26
 80125f0:	1080002b 	ldhuio	r2,0(r2)
 80125f4:	1007883a 	mov	r3,r2
 80125f8:	008200b4 	movhi	r2,2050
 80125fc:	10abba04 	addi	r2,r2,-20760
 8012600:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
 8012604:	d0a6e617 	ldw	r2,-25704(gp)
 8012608:	10800a17 	ldw	r2,40(r2)
 801260c:	10800704 	addi	r2,r2,28
 8012610:	10800037 	ldwio	r2,0(r2)
 8012614:	1007883a 	mov	r3,r2
 8012618:	008200b4 	movhi	r2,2050
 801261c:	10abba04 	addi	r2,r2,-20760
 8012620:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
 8012624:	d0a6e617 	ldw	r2,-25704(gp)
 8012628:	10800a17 	ldw	r2,40(r2)
 801262c:	10800804 	addi	r2,r2,32
 8012630:	10800037 	ldwio	r2,0(r2)
 8012634:	1007883a 	mov	r3,r2
 8012638:	008200b4 	movhi	r2,2050
 801263c:	10abba04 	addi	r2,r2,-20760
 8012640:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
 8012644:	d0a6e617 	ldw	r2,-25704(gp)
 8012648:	10800a17 	ldw	r2,40(r2)
 801264c:	10800904 	addi	r2,r2,36
 8012650:	10800023 	ldbuio	r2,0(r2)
 8012654:	1007883a 	mov	r3,r2
 8012658:	008200b4 	movhi	r2,2050
 801265c:	10abba04 	addi	r2,r2,-20760
 8012660:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
 8012664:	d0a6e617 	ldw	r2,-25704(gp)
 8012668:	10800a17 	ldw	r2,40(r2)
 801266c:	10800944 	addi	r2,r2,37
 8012670:	10800023 	ldbuio	r2,0(r2)
 8012674:	1007883a 	mov	r3,r2
 8012678:	008200b4 	movhi	r2,2050
 801267c:	10abba04 	addi	r2,r2,-20760
 8012680:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
 8012684:	d0a6e617 	ldw	r2,-25704(gp)
 8012688:	10800a17 	ldw	r2,40(r2)
 801268c:	10800984 	addi	r2,r2,38
 8012690:	10800023 	ldbuio	r2,0(r2)
 8012694:	1007883a 	mov	r3,r2
 8012698:	008200b4 	movhi	r2,2050
 801269c:	10abba04 	addi	r2,r2,-20760
 80126a0:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
 80126a4:	008200b4 	movhi	r2,2050
 80126a8:	10abba04 	addi	r2,r2,-20760
 80126ac:	1080040b 	ldhu	r2,16(r2)
 80126b0:	10ffffcc 	andi	r3,r2,65535
 80126b4:	008200b4 	movhi	r2,2050
 80126b8:	10abba04 	addi	r2,r2,-20760
 80126bc:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
 80126c0:	008200b4 	movhi	r2,2050
 80126c4:	10abba04 	addi	r2,r2,-20760
 80126c8:	10c01117 	ldw	r3,68(r2)
 80126cc:	008200b4 	movhi	r2,2050
 80126d0:	10abba04 	addi	r2,r2,-20760
 80126d4:	1080068b 	ldhu	r2,26(r2)
 80126d8:	10bfffcc 	andi	r2,r2,65535
 80126dc:	1887883a 	add	r3,r3,r2
 80126e0:	008200b4 	movhi	r2,2050
 80126e4:	10abba04 	addi	r2,r2,-20760
 80126e8:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
 80126ec:	008200b4 	movhi	r2,2050
 80126f0:	10abba04 	addi	r2,r2,-20760
 80126f4:	10c01217 	ldw	r3,72(r2)
 80126f8:	008200b4 	movhi	r2,2050
 80126fc:	10abba04 	addi	r2,r2,-20760
 8012700:	1080068b 	ldhu	r2,26(r2)
 8012704:	10bfffcc 	andi	r2,r2,65535
 8012708:	1887883a 	add	r3,r3,r2
 801270c:	008200b4 	movhi	r2,2050
 8012710:	10abba04 	addi	r2,r2,-20760
 8012714:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
 8012718:	008200b4 	movhi	r2,2050
 801271c:	10abba04 	addi	r2,r2,-20760
 8012720:	11001317 	ldw	r4,76(r2)
 8012724:	008200b4 	movhi	r2,2050
 8012728:	10abba04 	addi	r2,r2,-20760
 801272c:	1080050b 	ldhu	r2,20(r2)
 8012730:	10bfffcc 	andi	r2,r2,65535
 8012734:	1006917a 	slli	r3,r2,5
 8012738:	008200b4 	movhi	r2,2050
 801273c:	10abba04 	addi	r2,r2,-20760
 8012740:	1080030b 	ldhu	r2,12(r2)
 8012744:	10bfffcc 	andi	r2,r2,65535
 8012748:	1885283a 	div	r2,r3,r2
 801274c:	2087883a 	add	r3,r4,r2
 8012750:	008200b4 	movhi	r2,2050
 8012754:	10abba04 	addi	r2,r2,-20760
 8012758:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
 801275c:	008200b4 	movhi	r2,2050
 8012760:	10abba04 	addi	r2,r2,-20760
 8012764:	1080058b 	ldhu	r2,22(r2)
 8012768:	10bfffcc 	andi	r2,r2,65535
 801276c:	1005003a 	cmpeq	r2,r2,zero
 8012770:	10000b1e 	bne	r2,zero,80127a0 <Check_for_DOS_FAT+0x460>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
 8012774:	008200b4 	movhi	r2,2050
 8012778:	10abba04 	addi	r2,r2,-20760
 801277c:	1080058b 	ldhu	r2,22(r2)
 8012780:	10ffffcc 	andi	r3,r2,65535
 8012784:	008200b4 	movhi	r2,2050
 8012788:	10abba04 	addi	r2,r2,-20760
 801278c:	10800383 	ldbu	r2,14(r2)
 8012790:	10803fcc 	andi	r2,r2,255
 8012794:	1885283a 	div	r2,r3,r2
 8012798:	e0bffb15 	stw	r2,-20(fp)
 801279c:	00000906 	br	80127c4 <Check_for_DOS_FAT+0x484>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
 80127a0:	008200b4 	movhi	r2,2050
 80127a4:	10abba04 	addi	r2,r2,-20760
 80127a8:	10c00917 	ldw	r3,36(r2)
 80127ac:	008200b4 	movhi	r2,2050
 80127b0:	10abba04 	addi	r2,r2,-20760
 80127b4:	10800383 	ldbu	r2,14(r2)
 80127b8:	10803fcc 	andi	r2,r2,255
 80127bc:	1885203a 	divu	r2,r3,r2
 80127c0:	e0bffb15 	stw	r2,-20(fp)
		}
		if (num_clusters < 4087)
 80127c4:	e0bffb17 	ldw	r2,-20(fp)
 80127c8:	1083fdc8 	cmpgei	r2,r2,4087
 80127cc:	1000051e 	bne	r2,zero,80127e4 <Check_for_DOS_FAT+0x4a4>
		{
			boot_sector_data.bits_for_cluster_index = 12;
 80127d0:	00c200b4 	movhi	r3,2050
 80127d4:	18ebba04 	addi	r3,r3,-20760
 80127d8:	00800304 	movi	r2,12
 80127dc:	18801085 	stb	r2,66(r3)
 80127e0:	00000c06 	br	8012814 <Check_for_DOS_FAT+0x4d4>
		}
		else if (num_clusters <= 65517)
 80127e4:	e0fffb17 	ldw	r3,-20(fp)
 80127e8:	00bffb54 	movui	r2,65517
 80127ec:	10c00516 	blt	r2,r3,8012804 <Check_for_DOS_FAT+0x4c4>
		{
			boot_sector_data.bits_for_cluster_index = 16;
 80127f0:	00c200b4 	movhi	r3,2050
 80127f4:	18ebba04 	addi	r3,r3,-20760
 80127f8:	00800404 	movi	r2,16
 80127fc:	18801085 	stb	r2,66(r3)
 8012800:	00000406 	br	8012814 <Check_for_DOS_FAT+0x4d4>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
 8012804:	00c200b4 	movhi	r3,2050
 8012808:	18ebba04 	addi	r3,r3,-20760
 801280c:	00800804 	movi	r2,32
 8012810:	18801085 	stb	r2,66(r3)
		}
	    
		for (counter = 0; counter < 4; counter++)
 8012814:	e03ffd15 	stw	zero,-12(fp)
 8012818:	00001106 	br	8012860 <Check_for_DOS_FAT+0x520>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
 801281c:	e13ffd17 	ldw	r4,-12(fp)
 8012820:	d0a6e617 	ldw	r2,-25704(gp)
 8012824:	10800a17 	ldw	r2,40(r2)
 8012828:	1007883a 	mov	r3,r2
 801282c:	e0bffd17 	ldw	r2,-12(fp)
 8012830:	1885883a 	add	r2,r3,r2
 8012834:	108009c4 	addi	r2,r2,39
 8012838:	10800023 	ldbuio	r2,0(r2)
 801283c:	1007883a 	mov	r3,r2
 8012840:	008200b4 	movhi	r2,2050
 8012844:	10abba04 	addi	r2,r2,-20760
 8012848:	2085883a 	add	r2,r4,r2
 801284c:	10800a04 	addi	r2,r2,40
 8012850:	10c000c5 	stb	r3,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
 8012854:	e0bffd17 	ldw	r2,-12(fp)
 8012858:	10800044 	addi	r2,r2,1
 801285c:	e0bffd15 	stw	r2,-12(fp)
 8012860:	e0bffd17 	ldw	r2,-12(fp)
 8012864:	10800110 	cmplti	r2,r2,4
 8012868:	103fec1e 	bne	r2,zero,801281c <Check_for_DOS_FAT+0x4dc>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 801286c:	e03ffd15 	stw	zero,-12(fp)
 8012870:	00001106 	br	80128b8 <Check_for_DOS_FAT+0x578>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
 8012874:	e13ffd17 	ldw	r4,-12(fp)
 8012878:	d0a6e617 	ldw	r2,-25704(gp)
 801287c:	10800a17 	ldw	r2,40(r2)
 8012880:	1007883a 	mov	r3,r2
 8012884:	e0bffd17 	ldw	r2,-12(fp)
 8012888:	1885883a 	add	r2,r3,r2
 801288c:	10800ac4 	addi	r2,r2,43
 8012890:	10800023 	ldbuio	r2,0(r2)
 8012894:	1007883a 	mov	r3,r2
 8012898:	008200b4 	movhi	r2,2050
 801289c:	10abba04 	addi	r2,r2,-20760
 80128a0:	2085883a 	add	r2,r4,r2
 80128a4:	10800b04 	addi	r2,r2,44
 80128a8:	10c000c5 	stb	r3,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 80128ac:	e0bffd17 	ldw	r2,-12(fp)
 80128b0:	10800044 	addi	r2,r2,1
 80128b4:	e0bffd15 	stw	r2,-12(fp)
 80128b8:	e0bffd17 	ldw	r2,-12(fp)
 80128bc:	108002d0 	cmplti	r2,r2,11
 80128c0:	103fec1e 	bne	r2,zero,8012874 <Check_for_DOS_FAT+0x534>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 80128c4:	e03ffd15 	stw	zero,-12(fp)
 80128c8:	00001106 	br	8012910 <Check_for_DOS_FAT+0x5d0>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
 80128cc:	e13ffd17 	ldw	r4,-12(fp)
 80128d0:	d0a6e617 	ldw	r2,-25704(gp)
 80128d4:	10800a17 	ldw	r2,40(r2)
 80128d8:	1007883a 	mov	r3,r2
 80128dc:	e0bffd17 	ldw	r2,-12(fp)
 80128e0:	1885883a 	add	r2,r3,r2
 80128e4:	10800d84 	addi	r2,r2,54
 80128e8:	10800023 	ldbuio	r2,0(r2)
 80128ec:	1007883a 	mov	r3,r2
 80128f0:	008200b4 	movhi	r2,2050
 80128f4:	10abba04 	addi	r2,r2,-20760
 80128f8:	2085883a 	add	r2,r4,r2
 80128fc:	10800e04 	addi	r2,r2,56
 8012900:	10c00085 	stb	r3,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 8012904:	e0bffd17 	ldw	r2,-12(fp)
 8012908:	10800044 	addi	r2,r2,1
 801290c:	e0bffd15 	stw	r2,-12(fp)
 8012910:	e0bffd17 	ldw	r2,-12(fp)
 8012914:	10800210 	cmplti	r2,r2,8
 8012918:	103fec1e 	bne	r2,zero,80128cc <Check_for_DOS_FAT+0x58c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 801291c:	e03ffd15 	stw	zero,-12(fp)
 8012920:	00000a06 	br	801294c <Check_for_DOS_FAT+0x60c>
		{
			active_files[counter].in_use = false;
 8012924:	e0bffd17 	ldw	r2,-12(fp)
 8012928:	00c200b4 	movhi	r3,2050
 801292c:	18ebcf04 	addi	r3,r3,-20676
 8012930:	100491ba 	slli	r2,r2,6
 8012934:	10c5883a 	add	r2,r2,r3
 8012938:	10800f04 	addi	r2,r2,60
 801293c:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 8012940:	e0bffd17 	ldw	r2,-12(fp)
 8012944:	10800044 	addi	r2,r2,1
 8012948:	e0bffd15 	stw	r2,-12(fp)
 801294c:	e0bffd17 	ldw	r2,-12(fp)
 8012950:	10800510 	cmplti	r2,r2,20
 8012954:	103ff31e 	bne	r2,zero,8012924 <Check_for_DOS_FAT+0x5e4>
		{
			active_files[counter].in_use = false;
		}
		result = true;
 8012958:	00800044 	movi	r2,1
 801295c:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
 8012960:	00000106 	br	8012968 <Check_for_DOS_FAT+0x628>
		}
		result = true;
	}
    else
    {
        result = false;
 8012964:	e03ffe15 	stw	zero,-8(fp)
    }
	return result;
 8012968:	e0bffe17 	ldw	r2,-8(fp)
}
 801296c:	e037883a 	mov	sp,fp
 8012970:	dfc00117 	ldw	ra,4(sp)
 8012974:	df000017 	ldw	fp,0(sp)
 8012978:	dec00204 	addi	sp,sp,8
 801297c:	f800283a 	ret

08012980 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 8012980:	defffc04 	addi	sp,sp,-16
 8012984:	dfc00315 	stw	ra,12(sp)
 8012988:	df000215 	stw	fp,8(sp)
 801298c:	df000204 	addi	fp,sp,8
	bool result = false;
 8012990:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
 8012994:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 8012998:	1005003a 	cmpeq	r2,r2,zero
 801299c:	1000301e 	bne	r2,zero,8012a60 <Look_for_FAT16+0xe0>
	{
		short int csd_file_format = *CSD_register_w0;
 80129a0:	d0a6e017 	ldw	r2,-25728(gp)
 80129a4:	1080000b 	ldhu	r2,0(r2)
 80129a8:	e0bffe0d 	sth	r2,-8(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
 80129ac:	d026e415 	stw	zero,-25712(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
 80129b0:	d026e515 	stw	zero,-25708(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
 80129b4:	e0bffe0f 	ldh	r2,-8(fp)
 80129b8:	1004803a 	cmplt	r2,r2,zero
 80129bc:	1000281e 	bne	r2,zero,8012a60 <Look_for_FAT16+0xe0>
 80129c0:	e0bffe0b 	ldhu	r2,-8(fp)
 80129c4:	10bfffcc 	andi	r2,r2,65535
 80129c8:	1083000c 	andi	r2,r2,3072
 80129cc:	10830020 	cmpeqi	r2,r2,3072
 80129d0:	1000231e 	bne	r2,zero,8012a60 <Look_for_FAT16+0xe0>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
 80129d4:	e0bffe0b 	ldhu	r2,-8(fp)
 80129d8:	10bfffcc 	andi	r2,r2,65535
 80129dc:	1083000c 	andi	r2,r2,3072
 80129e0:	10810018 	cmpnei	r2,r2,1024
 80129e4:	1000031e 	bne	r2,zero,80129f4 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 80129e8:	0009883a 	mov	r4,zero
 80129ec:	80123400 	call	8012340 <Check_for_DOS_FAT>
 80129f0:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
 80129f4:	e0bffe0b 	ldhu	r2,-8(fp)
 80129f8:	10bfffcc 	andi	r2,r2,65535
 80129fc:	1083000c 	andi	r2,r2,3072
 8012a00:	1004c03a 	cmpne	r2,r2,zero
 8012a04:	1000061e 	bne	r2,zero,8012a20 <Look_for_FAT16+0xa0>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
 8012a08:	8011c540 	call	8011c54 <Check_for_Master_Boot_Record>
 8012a0c:	1005003a 	cmpeq	r2,r2,zero
 8012a10:	1000031e 	bne	r2,zero,8012a20 <Look_for_FAT16+0xa0>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
 8012a14:	d126e417 	ldw	r4,-25712(gp)
 8012a18:	80123400 	call	8012340 <Check_for_DOS_FAT>
 8012a1c:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
 8012a20:	e0bfff17 	ldw	r2,-4(fp)
 8012a24:	10800058 	cmpnei	r2,r2,1
 8012a28:	10000d1e 	bne	r2,zero,8012a60 <Look_for_FAT16+0xe0>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
 8012a2c:	008200b4 	movhi	r2,2050
 8012a30:	10abba04 	addi	r2,r2,-20760
 8012a34:	10801083 	ldbu	r2,66(r2)
 8012a38:	10803fcc 	andi	r2,r2,255
 8012a3c:	10800420 	cmpeqi	r2,r2,16
 8012a40:	1000021e 	bne	r2,zero,8012a4c <Look_for_FAT16+0xcc>
				{
					result = false;
 8012a44:	e03fff15 	stw	zero,-4(fp)
 8012a48:	00000506 	br	8012a60 <Look_for_FAT16+0xe0>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
 8012a4c:	008200b4 	movhi	r2,2050
 8012a50:	10abba04 	addi	r2,r2,-20760
 8012a54:	1080058b 	ldhu	r2,22(r2)
 8012a58:	10bfffcc 	andi	r2,r2,65535
 8012a5c:	d0a6e515 	stw	r2,-25708(gp)
				}
			}
		}
	}
	return result;
 8012a60:	e0bfff17 	ldw	r2,-4(fp)
}
 8012a64:	e037883a 	mov	sp,fp
 8012a68:	dfc00117 	ldw	ra,4(sp)
 8012a6c:	df000017 	ldw	fp,0(sp)
 8012a70:	dec00204 	addi	sp,sp,8
 8012a74:	f800283a 	ret

08012a78 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 8012a78:	defffb04 	addi	sp,sp,-20
 8012a7c:	dfc00415 	stw	ra,16(sp)
 8012a80:	df000315 	stw	fp,12(sp)
 8012a84:	df000304 	addi	fp,sp,12
 8012a88:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
 8012a8c:	e13fff17 	ldw	r4,-4(fp)
 8012a90:	80061000 	call	8006100 <strlen>
 8012a94:	e0bffd15 	stw	r2,-12(fp)
    
    for (index = 0; index < length; index++)
 8012a98:	e03ffe15 	stw	zero,-8(fp)
 8012a9c:	00002206 	br	8012b28 <filename_to_upper_case+0xb0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
 8012aa0:	e0bffe17 	ldw	r2,-8(fp)
 8012aa4:	1007883a 	mov	r3,r2
 8012aa8:	e0bfff17 	ldw	r2,-4(fp)
 8012aac:	1885883a 	add	r2,r3,r2
 8012ab0:	10800003 	ldbu	r2,0(r2)
 8012ab4:	10803fcc 	andi	r2,r2,255
 8012ab8:	1080201c 	xori	r2,r2,128
 8012abc:	10bfe004 	addi	r2,r2,-128
 8012ac0:	10801850 	cmplti	r2,r2,97
 8012ac4:	1000151e 	bne	r2,zero,8012b1c <filename_to_upper_case+0xa4>
 8012ac8:	e0bffe17 	ldw	r2,-8(fp)
 8012acc:	1007883a 	mov	r3,r2
 8012ad0:	e0bfff17 	ldw	r2,-4(fp)
 8012ad4:	1885883a 	add	r2,r3,r2
 8012ad8:	10800003 	ldbu	r2,0(r2)
 8012adc:	10803fcc 	andi	r2,r2,255
 8012ae0:	1080201c 	xori	r2,r2,128
 8012ae4:	10bfe004 	addi	r2,r2,-128
 8012ae8:	10801ec8 	cmpgei	r2,r2,123
 8012aec:	10000b1e 	bne	r2,zero,8012b1c <filename_to_upper_case+0xa4>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
 8012af0:	e0bffe17 	ldw	r2,-8(fp)
 8012af4:	1007883a 	mov	r3,r2
 8012af8:	e0bfff17 	ldw	r2,-4(fp)
 8012afc:	1889883a 	add	r4,r3,r2
 8012b00:	e0bffe17 	ldw	r2,-8(fp)
 8012b04:	1007883a 	mov	r3,r2
 8012b08:	e0bfff17 	ldw	r2,-4(fp)
 8012b0c:	1885883a 	add	r2,r3,r2
 8012b10:	10800003 	ldbu	r2,0(r2)
 8012b14:	10bff804 	addi	r2,r2,-32
 8012b18:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
 8012b1c:	e0bffe17 	ldw	r2,-8(fp)
 8012b20:	10800044 	addi	r2,r2,1
 8012b24:	e0bffe15 	stw	r2,-8(fp)
 8012b28:	e0fffe17 	ldw	r3,-8(fp)
 8012b2c:	e0bffd17 	ldw	r2,-12(fp)
 8012b30:	18bfdb16 	blt	r3,r2,8012aa0 <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
 8012b34:	e037883a 	mov	sp,fp
 8012b38:	dfc00117 	ldw	ra,4(sp)
 8012b3c:	df000017 	ldw	fp,0(sp)
 8012b40:	dec00204 	addi	sp,sp,8
 8012b44:	f800283a 	ret

08012b48 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 8012b48:	defff804 	addi	sp,sp,-32
 8012b4c:	dfc00715 	stw	ra,28(sp)
 8012b50:	df000615 	stw	fp,24(sp)
 8012b54:	df000604 	addi	fp,sp,24
 8012b58:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
 8012b5c:	e13fff17 	ldw	r4,-4(fp)
 8012b60:	80061000 	call	8006100 <strlen>
 8012b64:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
 8012b68:	00bfffc4 	movi	r2,-1
 8012b6c:	e0bffc15 	stw	r2,-16(fp)
    int last_period = -1;
 8012b70:	00bfffc4 	movi	r2,-1
 8012b74:	e0bffb15 	stw	r2,-20(fp)
    bool result = true;
 8012b78:	00800044 	movi	r2,1
 8012b7c:	e0bffa15 	stw	r2,-24(fp)
    
    for(index = 0; index < length; index++)
 8012b80:	e03ffd15 	stw	zero,-12(fp)
 8012b84:	00007606 	br	8012d60 <check_file_name_for_FAT16_compliance+0x218>
    {
        if ((file_name[index] == ' ') ||
 8012b88:	e0bffd17 	ldw	r2,-12(fp)
 8012b8c:	1007883a 	mov	r3,r2
 8012b90:	e0bfff17 	ldw	r2,-4(fp)
 8012b94:	1885883a 	add	r2,r3,r2
 8012b98:	10800003 	ldbu	r2,0(r2)
 8012b9c:	10803fcc 	andi	r2,r2,255
 8012ba0:	1080201c 	xori	r2,r2,128
 8012ba4:	10bfe004 	addi	r2,r2,-128
 8012ba8:	10800820 	cmpeqi	r2,r2,32
 8012bac:	1000431e 	bne	r2,zero,8012cbc <check_file_name_for_FAT16_compliance+0x174>
 8012bb0:	e0bffd17 	ldw	r2,-12(fp)
 8012bb4:	10ffffc4 	addi	r3,r2,-1
 8012bb8:	e0bffc17 	ldw	r2,-16(fp)
 8012bbc:	1880141e 	bne	r3,r2,8012c10 <check_file_name_for_FAT16_compliance+0xc8>
 8012bc0:	e0bffd17 	ldw	r2,-12(fp)
 8012bc4:	1007883a 	mov	r3,r2
 8012bc8:	e0bfff17 	ldw	r2,-4(fp)
 8012bcc:	1885883a 	add	r2,r3,r2
 8012bd0:	10800003 	ldbu	r2,0(r2)
 8012bd4:	10803fcc 	andi	r2,r2,255
 8012bd8:	1080201c 	xori	r2,r2,128
 8012bdc:	10bfe004 	addi	r2,r2,-128
 8012be0:	10801720 	cmpeqi	r2,r2,92
 8012be4:	1000351e 	bne	r2,zero,8012cbc <check_file_name_for_FAT16_compliance+0x174>
 8012be8:	e0bffd17 	ldw	r2,-12(fp)
 8012bec:	1007883a 	mov	r3,r2
 8012bf0:	e0bfff17 	ldw	r2,-4(fp)
 8012bf4:	1885883a 	add	r2,r3,r2
 8012bf8:	10800003 	ldbu	r2,0(r2)
 8012bfc:	10803fcc 	andi	r2,r2,255
 8012c00:	1080201c 	xori	r2,r2,128
 8012c04:	10bfe004 	addi	r2,r2,-128
 8012c08:	10800be0 	cmpeqi	r2,r2,47
 8012c0c:	10002b1e 	bne	r2,zero,8012cbc <check_file_name_for_FAT16_compliance+0x174>
 8012c10:	e0fffd17 	ldw	r3,-12(fp)
 8012c14:	e0bffb17 	ldw	r2,-20(fp)
 8012c18:	1885c83a 	sub	r2,r3,r2
 8012c1c:	10800258 	cmpnei	r2,r2,9
 8012c20:	10000a1e 	bne	r2,zero,8012c4c <check_file_name_for_FAT16_compliance+0x104>
 8012c24:	e0bffd17 	ldw	r2,-12(fp)
 8012c28:	1007883a 	mov	r3,r2
 8012c2c:	e0bfff17 	ldw	r2,-4(fp)
 8012c30:	1885883a 	add	r2,r3,r2
 8012c34:	10800003 	ldbu	r2,0(r2)
 8012c38:	10803fcc 	andi	r2,r2,255
 8012c3c:	1080201c 	xori	r2,r2,128
 8012c40:	10bfe004 	addi	r2,r2,-128
 8012c44:	10800b98 	cmpnei	r2,r2,46
 8012c48:	10001c1e 	bne	r2,zero,8012cbc <check_file_name_for_FAT16_compliance+0x174>
 8012c4c:	e0fffc17 	ldw	r3,-16(fp)
 8012c50:	e0bffb17 	ldw	r2,-20(fp)
 8012c54:	18801b26 	beq	r3,r2,8012cc4 <check_file_name_for_FAT16_compliance+0x17c>
 8012c58:	e0fffd17 	ldw	r3,-12(fp)
 8012c5c:	e0bffb17 	ldw	r2,-20(fp)
 8012c60:	1885c83a 	sub	r2,r3,r2
 8012c64:	10800110 	cmplti	r2,r2,4
 8012c68:	1000161e 	bne	r2,zero,8012cc4 <check_file_name_for_FAT16_compliance+0x17c>
 8012c6c:	e0bffd17 	ldw	r2,-12(fp)
 8012c70:	1007883a 	mov	r3,r2
 8012c74:	e0bfff17 	ldw	r2,-4(fp)
 8012c78:	1885883a 	add	r2,r3,r2
 8012c7c:	10800003 	ldbu	r2,0(r2)
 8012c80:	10803fcc 	andi	r2,r2,255
 8012c84:	1080201c 	xori	r2,r2,128
 8012c88:	10bfe004 	addi	r2,r2,-128
 8012c8c:	10801720 	cmpeqi	r2,r2,92
 8012c90:	10000c1e 	bne	r2,zero,8012cc4 <check_file_name_for_FAT16_compliance+0x17c>
 8012c94:	e0bffd17 	ldw	r2,-12(fp)
 8012c98:	1007883a 	mov	r3,r2
 8012c9c:	e0bfff17 	ldw	r2,-4(fp)
 8012ca0:	1885883a 	add	r2,r3,r2
 8012ca4:	10800003 	ldbu	r2,0(r2)
 8012ca8:	10803fcc 	andi	r2,r2,255
 8012cac:	1080201c 	xori	r2,r2,128
 8012cb0:	10bfe004 	addi	r2,r2,-128
 8012cb4:	10800be0 	cmpeqi	r2,r2,47
 8012cb8:	1000021e 	bne	r2,zero,8012cc4 <check_file_name_for_FAT16_compliance+0x17c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
 8012cbc:	e03ffa15 	stw	zero,-24(fp)
            break;
 8012cc0:	00002a06 	br	8012d6c <check_file_name_for_FAT16_compliance+0x224>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
 8012cc4:	e0bffd17 	ldw	r2,-12(fp)
 8012cc8:	1007883a 	mov	r3,r2
 8012ccc:	e0bfff17 	ldw	r2,-4(fp)
 8012cd0:	1885883a 	add	r2,r3,r2
 8012cd4:	10800003 	ldbu	r2,0(r2)
 8012cd8:	10803fcc 	andi	r2,r2,255
 8012cdc:	1080201c 	xori	r2,r2,128
 8012ce0:	10bfe004 	addi	r2,r2,-128
 8012ce4:	10801720 	cmpeqi	r2,r2,92
 8012ce8:	10000a1e 	bne	r2,zero,8012d14 <check_file_name_for_FAT16_compliance+0x1cc>
 8012cec:	e0bffd17 	ldw	r2,-12(fp)
 8012cf0:	1007883a 	mov	r3,r2
 8012cf4:	e0bfff17 	ldw	r2,-4(fp)
 8012cf8:	1885883a 	add	r2,r3,r2
 8012cfc:	10800003 	ldbu	r2,0(r2)
 8012d00:	10803fcc 	andi	r2,r2,255
 8012d04:	1080201c 	xori	r2,r2,128
 8012d08:	10bfe004 	addi	r2,r2,-128
 8012d0c:	10800bd8 	cmpnei	r2,r2,47
 8012d10:	1000041e 	bne	r2,zero,8012d24 <check_file_name_for_FAT16_compliance+0x1dc>
        {
            last_period = index;
 8012d14:	e0bffd17 	ldw	r2,-12(fp)
 8012d18:	e0bffb15 	stw	r2,-20(fp)
            last_dir_break_position = index;
 8012d1c:	e0bffd17 	ldw	r2,-12(fp)
 8012d20:	e0bffc15 	stw	r2,-16(fp)
        }
        if (file_name[index] == '.')
 8012d24:	e0bffd17 	ldw	r2,-12(fp)
 8012d28:	1007883a 	mov	r3,r2
 8012d2c:	e0bfff17 	ldw	r2,-4(fp)
 8012d30:	1885883a 	add	r2,r3,r2
 8012d34:	10800003 	ldbu	r2,0(r2)
 8012d38:	10803fcc 	andi	r2,r2,255
 8012d3c:	1080201c 	xori	r2,r2,128
 8012d40:	10bfe004 	addi	r2,r2,-128
 8012d44:	10800b98 	cmpnei	r2,r2,46
 8012d48:	1000021e 	bne	r2,zero,8012d54 <check_file_name_for_FAT16_compliance+0x20c>
        {
            last_period = index;
 8012d4c:	e0bffd17 	ldw	r2,-12(fp)
 8012d50:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
 8012d54:	e0bffd17 	ldw	r2,-12(fp)
 8012d58:	10800044 	addi	r2,r2,1
 8012d5c:	e0bffd15 	stw	r2,-12(fp)
 8012d60:	e0fffd17 	ldw	r3,-12(fp)
 8012d64:	e0bffe17 	ldw	r2,-8(fp)
 8012d68:	18bf8716 	blt	r3,r2,8012b88 <check_file_name_for_FAT16_compliance+0x40>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
 8012d6c:	e0fffe17 	ldw	r3,-8(fp)
 8012d70:	e0bfff17 	ldw	r2,-4(fp)
 8012d74:	1885883a 	add	r2,r3,r2
 8012d78:	10bfffc4 	addi	r2,r2,-1
 8012d7c:	10800003 	ldbu	r2,0(r2)
 8012d80:	10803fcc 	andi	r2,r2,255
 8012d84:	1080201c 	xori	r2,r2,128
 8012d88:	10bfe004 	addi	r2,r2,-128
 8012d8c:	10801720 	cmpeqi	r2,r2,92
 8012d90:	10000a1e 	bne	r2,zero,8012dbc <check_file_name_for_FAT16_compliance+0x274>
 8012d94:	e0fffe17 	ldw	r3,-8(fp)
 8012d98:	e0bfff17 	ldw	r2,-4(fp)
 8012d9c:	1885883a 	add	r2,r3,r2
 8012da0:	10bfffc4 	addi	r2,r2,-1
 8012da4:	10800003 	ldbu	r2,0(r2)
 8012da8:	10803fcc 	andi	r2,r2,255
 8012dac:	1080201c 	xori	r2,r2,128
 8012db0:	10bfe004 	addi	r2,r2,-128
 8012db4:	10800bd8 	cmpnei	r2,r2,47
 8012db8:	1000011e 	bne	r2,zero,8012dc0 <check_file_name_for_FAT16_compliance+0x278>
    {
        result = false;
 8012dbc:	e03ffa15 	stw	zero,-24(fp)
    }
    return result;
 8012dc0:	e0bffa17 	ldw	r2,-24(fp)
}
 8012dc4:	e037883a 	mov	sp,fp
 8012dc8:	dfc00117 	ldw	ra,4(sp)
 8012dcc:	df000017 	ldw	fp,0(sp)
 8012dd0:	dec00204 	addi	sp,sp,8
 8012dd4:	f800283a 	ret

08012dd8 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 8012dd8:	defffb04 	addi	sp,sp,-20
 8012ddc:	dfc00415 	stw	ra,16(sp)
 8012de0:	df000315 	stw	fp,12(sp)
 8012de4:	df000304 	addi	fp,sp,12
 8012de8:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
 8012dec:	e03ffe15 	stw	zero,-8(fp)
    int length = strlen(name);
 8012df0:	e13fff17 	ldw	r4,-4(fp)
 8012df4:	80061000 	call	8006100 <strlen>
 8012df8:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
 8012dfc:	e03ffe15 	stw	zero,-8(fp)
 8012e00:	00001706 	br	8012e60 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
 8012e04:	e0bffe17 	ldw	r2,-8(fp)
 8012e08:	1007883a 	mov	r3,r2
 8012e0c:	e0bfff17 	ldw	r2,-4(fp)
 8012e10:	1885883a 	add	r2,r3,r2
 8012e14:	10800003 	ldbu	r2,0(r2)
 8012e18:	10803fcc 	andi	r2,r2,255
 8012e1c:	1080201c 	xori	r2,r2,128
 8012e20:	10bfe004 	addi	r2,r2,-128
 8012e24:	10801720 	cmpeqi	r2,r2,92
 8012e28:	1000101e 	bne	r2,zero,8012e6c <get_dir_divider_location+0x94>
 8012e2c:	e0bffe17 	ldw	r2,-8(fp)
 8012e30:	1007883a 	mov	r3,r2
 8012e34:	e0bfff17 	ldw	r2,-4(fp)
 8012e38:	1885883a 	add	r2,r3,r2
 8012e3c:	10800003 	ldbu	r2,0(r2)
 8012e40:	10803fcc 	andi	r2,r2,255
 8012e44:	1080201c 	xori	r2,r2,128
 8012e48:	10bfe004 	addi	r2,r2,-128
 8012e4c:	10800be0 	cmpeqi	r2,r2,47
 8012e50:	1000061e 	bne	r2,zero,8012e6c <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
 8012e54:	e0bffe17 	ldw	r2,-8(fp)
 8012e58:	10800044 	addi	r2,r2,1
 8012e5c:	e0bffe15 	stw	r2,-8(fp)
 8012e60:	e0fffe17 	ldw	r3,-8(fp)
 8012e64:	e0bffd17 	ldw	r2,-12(fp)
 8012e68:	18bfe616 	blt	r3,r2,8012e04 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
 8012e6c:	e0fffe17 	ldw	r3,-8(fp)
 8012e70:	e0bffd17 	ldw	r2,-12(fp)
 8012e74:	1880021e 	bne	r3,r2,8012e80 <get_dir_divider_location+0xa8>
    {
        index = -1;
 8012e78:	00bfffc4 	movi	r2,-1
 8012e7c:	e0bffe15 	stw	r2,-8(fp)
    }
    
    return index;
 8012e80:	e0bffe17 	ldw	r2,-8(fp)
}
 8012e84:	e037883a 	mov	sp,fp
 8012e88:	dfc00117 	ldw	ra,4(sp)
 8012e8c:	df000017 	ldw	fp,0(sp)
 8012e90:	dec00204 	addi	sp,sp,8
 8012e94:	f800283a 	ret

08012e98 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 8012e98:	defff604 	addi	sp,sp,-40
 8012e9c:	df000915 	stw	fp,36(sp)
 8012ea0:	df000904 	addi	fp,sp,36
 8012ea4:	e13ff915 	stw	r4,-28(fp)
 8012ea8:	e17ffa15 	stw	r5,-24(fp)
 8012eac:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
 8012eb0:	00800044 	movi	r2,1
 8012eb4:	e0bff815 	stw	r2,-32(fp)
	int index;

    for (index = 0; index < 8; index++)
 8012eb8:	e03ff715 	stw	zero,-36(fp)
 8012ebc:	00005006 	br	8013000 <match_file_record_to_name_ext+0x168>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
 8012ec0:	e0fff717 	ldw	r3,-36(fp)
 8012ec4:	e0bff917 	ldw	r2,-28(fp)
 8012ec8:	10c5883a 	add	r2,r2,r3
 8012ecc:	10800003 	ldbu	r2,0(r2)
 8012ed0:	10803fcc 	andi	r2,r2,255
 8012ed4:	10801870 	cmpltui	r2,r2,97
 8012ed8:	1000111e 	bne	r2,zero,8012f20 <match_file_record_to_name_ext+0x88>
 8012edc:	e0fff717 	ldw	r3,-36(fp)
 8012ee0:	e0bff917 	ldw	r2,-28(fp)
 8012ee4:	10c5883a 	add	r2,r2,r3
 8012ee8:	10800003 	ldbu	r2,0(r2)
 8012eec:	10803fcc 	andi	r2,r2,255
 8012ef0:	10801ee8 	cmpgeui	r2,r2,123
 8012ef4:	10000a1e 	bne	r2,zero,8012f20 <match_file_record_to_name_ext+0x88>
 8012ef8:	e0fff717 	ldw	r3,-36(fp)
 8012efc:	e0bff917 	ldw	r2,-28(fp)
 8012f00:	10c5883a 	add	r2,r2,r3
 8012f04:	10800003 	ldbu	r2,0(r2)
 8012f08:	10bff804 	addi	r2,r2,-32
 8012f0c:	10803fcc 	andi	r2,r2,255
 8012f10:	1080201c 	xori	r2,r2,128
 8012f14:	10bfe004 	addi	r2,r2,-128
 8012f18:	e0bfff15 	stw	r2,-4(fp)
 8012f1c:	00000806 	br	8012f40 <match_file_record_to_name_ext+0xa8>
 8012f20:	e0fff717 	ldw	r3,-36(fp)
 8012f24:	e0bff917 	ldw	r2,-28(fp)
 8012f28:	10c5883a 	add	r2,r2,r3
 8012f2c:	10800003 	ldbu	r2,0(r2)
 8012f30:	10803fcc 	andi	r2,r2,255
 8012f34:	1080201c 	xori	r2,r2,128
 8012f38:	10bfe004 	addi	r2,r2,-128
 8012f3c:	e0bfff15 	stw	r2,-4(fp)
 8012f40:	e0bff717 	ldw	r2,-36(fp)
 8012f44:	1007883a 	mov	r3,r2
 8012f48:	e0bffa17 	ldw	r2,-24(fp)
 8012f4c:	1885883a 	add	r2,r3,r2
 8012f50:	10800003 	ldbu	r2,0(r2)
 8012f54:	10803fcc 	andi	r2,r2,255
 8012f58:	1080201c 	xori	r2,r2,128
 8012f5c:	10bfe004 	addi	r2,r2,-128
 8012f60:	10801850 	cmplti	r2,r2,97
 8012f64:	1000151e 	bne	r2,zero,8012fbc <match_file_record_to_name_ext+0x124>
 8012f68:	e0bff717 	ldw	r2,-36(fp)
 8012f6c:	1007883a 	mov	r3,r2
 8012f70:	e0bffa17 	ldw	r2,-24(fp)
 8012f74:	1885883a 	add	r2,r3,r2
 8012f78:	10800003 	ldbu	r2,0(r2)
 8012f7c:	10803fcc 	andi	r2,r2,255
 8012f80:	1080201c 	xori	r2,r2,128
 8012f84:	10bfe004 	addi	r2,r2,-128
 8012f88:	10801ec8 	cmpgei	r2,r2,123
 8012f8c:	10000b1e 	bne	r2,zero,8012fbc <match_file_record_to_name_ext+0x124>
 8012f90:	e0bff717 	ldw	r2,-36(fp)
 8012f94:	1007883a 	mov	r3,r2
 8012f98:	e0bffa17 	ldw	r2,-24(fp)
 8012f9c:	1885883a 	add	r2,r3,r2
 8012fa0:	10800003 	ldbu	r2,0(r2)
 8012fa4:	10bff804 	addi	r2,r2,-32
 8012fa8:	10803fcc 	andi	r2,r2,255
 8012fac:	1080201c 	xori	r2,r2,128
 8012fb0:	10bfe004 	addi	r2,r2,-128
 8012fb4:	e0bffe15 	stw	r2,-8(fp)
 8012fb8:	00000906 	br	8012fe0 <match_file_record_to_name_ext+0x148>
 8012fbc:	e0bff717 	ldw	r2,-36(fp)
 8012fc0:	1007883a 	mov	r3,r2
 8012fc4:	e0bffa17 	ldw	r2,-24(fp)
 8012fc8:	1885883a 	add	r2,r3,r2
 8012fcc:	10800003 	ldbu	r2,0(r2)
 8012fd0:	10803fcc 	andi	r2,r2,255
 8012fd4:	1080201c 	xori	r2,r2,128
 8012fd8:	10bfe004 	addi	r2,r2,-128
 8012fdc:	e0bffe15 	stw	r2,-8(fp)
 8012fe0:	e0bfff17 	ldw	r2,-4(fp)
 8012fe4:	e0fffe17 	ldw	r3,-8(fp)
 8012fe8:	10c00226 	beq	r2,r3,8012ff4 <match_file_record_to_name_ext+0x15c>
        {
            match = false;
 8012fec:	e03ff815 	stw	zero,-32(fp)
			break;
 8012ff0:	00000606 	br	801300c <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
 8012ff4:	e0bff717 	ldw	r2,-36(fp)
 8012ff8:	10800044 	addi	r2,r2,1
 8012ffc:	e0bff715 	stw	r2,-36(fp)
 8013000:	e0bff717 	ldw	r2,-36(fp)
 8013004:	10800210 	cmplti	r2,r2,8
 8013008:	103fad1e 	bne	r2,zero,8012ec0 <match_file_record_to_name_ext+0x28>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 801300c:	e03ff715 	stw	zero,-36(fp)
 8013010:	00005406 	br	8013164 <match_file_record_to_name_ext+0x2cc>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
 8013014:	e0fff717 	ldw	r3,-36(fp)
 8013018:	e0bff917 	ldw	r2,-28(fp)
 801301c:	1885883a 	add	r2,r3,r2
 8013020:	10800204 	addi	r2,r2,8
 8013024:	10800003 	ldbu	r2,0(r2)
 8013028:	10803fcc 	andi	r2,r2,255
 801302c:	10801870 	cmpltui	r2,r2,97
 8013030:	1000131e 	bne	r2,zero,8013080 <match_file_record_to_name_ext+0x1e8>
 8013034:	e0fff717 	ldw	r3,-36(fp)
 8013038:	e0bff917 	ldw	r2,-28(fp)
 801303c:	1885883a 	add	r2,r3,r2
 8013040:	10800204 	addi	r2,r2,8
 8013044:	10800003 	ldbu	r2,0(r2)
 8013048:	10803fcc 	andi	r2,r2,255
 801304c:	10801ee8 	cmpgeui	r2,r2,123
 8013050:	10000b1e 	bne	r2,zero,8013080 <match_file_record_to_name_ext+0x1e8>
 8013054:	e0fff717 	ldw	r3,-36(fp)
 8013058:	e0bff917 	ldw	r2,-28(fp)
 801305c:	1885883a 	add	r2,r3,r2
 8013060:	10800204 	addi	r2,r2,8
 8013064:	10800003 	ldbu	r2,0(r2)
 8013068:	10bff804 	addi	r2,r2,-32
 801306c:	10803fcc 	andi	r2,r2,255
 8013070:	1080201c 	xori	r2,r2,128
 8013074:	10bfe004 	addi	r2,r2,-128
 8013078:	e0bffd15 	stw	r2,-12(fp)
 801307c:	00000906 	br	80130a4 <match_file_record_to_name_ext+0x20c>
 8013080:	e0fff717 	ldw	r3,-36(fp)
 8013084:	e0bff917 	ldw	r2,-28(fp)
 8013088:	1885883a 	add	r2,r3,r2
 801308c:	10800204 	addi	r2,r2,8
 8013090:	10800003 	ldbu	r2,0(r2)
 8013094:	10803fcc 	andi	r2,r2,255
 8013098:	1080201c 	xori	r2,r2,128
 801309c:	10bfe004 	addi	r2,r2,-128
 80130a0:	e0bffd15 	stw	r2,-12(fp)
 80130a4:	e0bff717 	ldw	r2,-36(fp)
 80130a8:	1007883a 	mov	r3,r2
 80130ac:	e0bffb17 	ldw	r2,-20(fp)
 80130b0:	1885883a 	add	r2,r3,r2
 80130b4:	10800003 	ldbu	r2,0(r2)
 80130b8:	10803fcc 	andi	r2,r2,255
 80130bc:	1080201c 	xori	r2,r2,128
 80130c0:	10bfe004 	addi	r2,r2,-128
 80130c4:	10801850 	cmplti	r2,r2,97
 80130c8:	1000151e 	bne	r2,zero,8013120 <match_file_record_to_name_ext+0x288>
 80130cc:	e0bff717 	ldw	r2,-36(fp)
 80130d0:	1007883a 	mov	r3,r2
 80130d4:	e0bffb17 	ldw	r2,-20(fp)
 80130d8:	1885883a 	add	r2,r3,r2
 80130dc:	10800003 	ldbu	r2,0(r2)
 80130e0:	10803fcc 	andi	r2,r2,255
 80130e4:	1080201c 	xori	r2,r2,128
 80130e8:	10bfe004 	addi	r2,r2,-128
 80130ec:	10801ec8 	cmpgei	r2,r2,123
 80130f0:	10000b1e 	bne	r2,zero,8013120 <match_file_record_to_name_ext+0x288>
 80130f4:	e0bff717 	ldw	r2,-36(fp)
 80130f8:	1007883a 	mov	r3,r2
 80130fc:	e0bffb17 	ldw	r2,-20(fp)
 8013100:	1885883a 	add	r2,r3,r2
 8013104:	10800003 	ldbu	r2,0(r2)
 8013108:	10bff804 	addi	r2,r2,-32
 801310c:	10803fcc 	andi	r2,r2,255
 8013110:	1080201c 	xori	r2,r2,128
 8013114:	10bfe004 	addi	r2,r2,-128
 8013118:	e0bffc15 	stw	r2,-16(fp)
 801311c:	00000906 	br	8013144 <match_file_record_to_name_ext+0x2ac>
 8013120:	e0bff717 	ldw	r2,-36(fp)
 8013124:	1007883a 	mov	r3,r2
 8013128:	e0bffb17 	ldw	r2,-20(fp)
 801312c:	1885883a 	add	r2,r3,r2
 8013130:	10800003 	ldbu	r2,0(r2)
 8013134:	10803fcc 	andi	r2,r2,255
 8013138:	1080201c 	xori	r2,r2,128
 801313c:	10bfe004 	addi	r2,r2,-128
 8013140:	e0bffc15 	stw	r2,-16(fp)
 8013144:	e0bffd17 	ldw	r2,-12(fp)
 8013148:	e0fffc17 	ldw	r3,-16(fp)
 801314c:	10c00226 	beq	r2,r3,8013158 <match_file_record_to_name_ext+0x2c0>
        {
            match = false;
 8013150:	e03ff815 	stw	zero,-32(fp)
			break;
 8013154:	00000606 	br	8013170 <match_file_record_to_name_ext+0x2d8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 8013158:	e0bff717 	ldw	r2,-36(fp)
 801315c:	10800044 	addi	r2,r2,1
 8013160:	e0bff715 	stw	r2,-36(fp)
 8013164:	e0bff717 	ldw	r2,-36(fp)
 8013168:	108000d0 	cmplti	r2,r2,3
 801316c:	103fa91e 	bne	r2,zero,8013014 <match_file_record_to_name_ext+0x17c>
        {
            match = false;
			break;
        }
    }
	return match;
 8013170:	e0bff817 	ldw	r2,-32(fp)
}
 8013174:	e037883a 	mov	sp,fp
 8013178:	df000017 	ldw	fp,0(sp)
 801317c:	dec00104 	addi	sp,sp,4
 8013180:	f800283a 	ret

08013184 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 8013184:	deffe604 	addi	sp,sp,-104
 8013188:	dfc01915 	stw	ra,100(sp)
 801318c:	df001815 	stw	fp,96(sp)
 8013190:	df001804 	addi	fp,sp,96
 8013194:	e13ffc15 	stw	r4,-16(fp)
 8013198:	e17ffd15 	stw	r5,-12(fp)
 801319c:	e1bffe15 	stw	r6,-8(fp)
    bool result = false;
 80131a0:	e03ff715 	stw	zero,-36(fp)
    int home_dir_cluster = 0;
 80131a4:	e03ff615 	stw	zero,-40(fp)
    int location, index;
    int start_location = 0;
 80131a8:	e03ff315 	stw	zero,-52(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
 80131ac:	e13ffc17 	ldw	r4,-16(fp)
 80131b0:	8012dd80 	call	8012dd8 <get_dir_divider_location>
 80131b4:	e0bff515 	stw	r2,-44(fp)
    while (location > 0)
 80131b8:	00012206 	br	8013644 <get_home_directory_cluster_for_file+0x4c0>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 80131bc:	00800804 	movi	r2,32
 80131c0:	e0bff805 	stb	r2,-32(fp)
 80131c4:	00800804 	movi	r2,32
 80131c8:	e0bff845 	stb	r2,-31(fp)
 80131cc:	00800804 	movi	r2,32
 80131d0:	e0bff885 	stb	r2,-30(fp)
 80131d4:	00800804 	movi	r2,32
 80131d8:	e0bff8c5 	stb	r2,-29(fp)
 80131dc:	00800804 	movi	r2,32
 80131e0:	e0bff905 	stb	r2,-28(fp)
 80131e4:	00800804 	movi	r2,32
 80131e8:	e0bff945 	stb	r2,-27(fp)
 80131ec:	00800804 	movi	r2,32
 80131f0:	e0bff985 	stb	r2,-26(fp)
 80131f4:	00800804 	movi	r2,32
 80131f8:	e0bff9c5 	stb	r2,-25(fp)
        char extension[3] = { ' ', ' ', ' ' };
 80131fc:	00800804 	movi	r2,32
 8013200:	e0bffa05 	stb	r2,-24(fp)
 8013204:	00800804 	movi	r2,32
 8013208:	e0bffa45 	stb	r2,-23(fp)
 801320c:	00800804 	movi	r2,32
 8013210:	e0bffa85 	stb	r2,-22(fp)
        int ext_index = -1;
 8013214:	00bfffc4 	movi	r2,-1
 8013218:	e0bff215 	stw	r2,-56(fp)
        int new_cluster = home_dir_cluster;
 801321c:	e0bff617 	ldw	r2,-40(fp)
 8013220:	e0bff115 	stw	r2,-60(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 8013224:	e03ff415 	stw	zero,-48(fp)
 8013228:	00002e06 	br	80132e4 <get_home_directory_cluster_for_file+0x160>
        {
            if (file_name[index+start_location] == '.')
 801322c:	e0fff417 	ldw	r3,-48(fp)
 8013230:	e0bff317 	ldw	r2,-52(fp)
 8013234:	1885883a 	add	r2,r3,r2
 8013238:	1007883a 	mov	r3,r2
 801323c:	e0bffc17 	ldw	r2,-16(fp)
 8013240:	1885883a 	add	r2,r3,r2
 8013244:	10800003 	ldbu	r2,0(r2)
 8013248:	10803fcc 	andi	r2,r2,255
 801324c:	1080201c 	xori	r2,r2,128
 8013250:	10bfe004 	addi	r2,r2,-128
 8013254:	10800b98 	cmpnei	r2,r2,46
 8013258:	1000031e 	bne	r2,zero,8013268 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
 801325c:	e0bff417 	ldw	r2,-48(fp)
 8013260:	e0bff215 	stw	r2,-56(fp)
 8013264:	00001c06 	br	80132d8 <get_home_directory_cluster_for_file+0x154>
            }
            else if (ext_index < 0)
 8013268:	e0bff217 	ldw	r2,-56(fp)
 801326c:	1004403a 	cmpge	r2,r2,zero
 8013270:	10000c1e 	bne	r2,zero,80132a4 <get_home_directory_cluster_for_file+0x120>
            {
                name[index] = file_name[index+start_location];
 8013274:	e13ff417 	ldw	r4,-48(fp)
 8013278:	e0fff417 	ldw	r3,-48(fp)
 801327c:	e0bff317 	ldw	r2,-52(fp)
 8013280:	1885883a 	add	r2,r3,r2
 8013284:	1007883a 	mov	r3,r2
 8013288:	e0bffc17 	ldw	r2,-16(fp)
 801328c:	1885883a 	add	r2,r3,r2
 8013290:	10c00003 	ldbu	r3,0(r2)
 8013294:	e0bff804 	addi	r2,fp,-32
 8013298:	1105883a 	add	r2,r2,r4
 801329c:	10c00005 	stb	r3,0(r2)
 80132a0:	00000d06 	br	80132d8 <get_home_directory_cluster_for_file+0x154>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
 80132a4:	e0fff417 	ldw	r3,-48(fp)
 80132a8:	e0bff217 	ldw	r2,-56(fp)
 80132ac:	1889c83a 	sub	r4,r3,r2
 80132b0:	e0fff417 	ldw	r3,-48(fp)
 80132b4:	e0bff317 	ldw	r2,-52(fp)
 80132b8:	1885883a 	add	r2,r3,r2
 80132bc:	1007883a 	mov	r3,r2
 80132c0:	e0bffc17 	ldw	r2,-16(fp)
 80132c4:	1885883a 	add	r2,r3,r2
 80132c8:	10c00003 	ldbu	r3,0(r2)
 80132cc:	e0bffa04 	addi	r2,fp,-24
 80132d0:	1105883a 	add	r2,r2,r4
 80132d4:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 80132d8:	e0bff417 	ldw	r2,-48(fp)
 80132dc:	10800044 	addi	r2,r2,1
 80132e0:	e0bff415 	stw	r2,-48(fp)
 80132e4:	e0fff417 	ldw	r3,-48(fp)
 80132e8:	e0bff517 	ldw	r2,-44(fp)
 80132ec:	18bfcf16 	blt	r3,r2,801322c <get_home_directory_cluster_for_file+0xa8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
 80132f0:	e0bff617 	ldw	r2,-40(fp)
 80132f4:	1004c03a 	cmpne	r2,r2,zero
 80132f8:	1000551e 	bne	r2,zero,8013450 <get_home_directory_cluster_for_file+0x2cc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 80132fc:	008200b4 	movhi	r2,2050
 8013300:	10abba04 	addi	r2,r2,-20760
 8013304:	1080050b 	ldhu	r2,20(r2)
 8013308:	10bfffcc 	andi	r2,r2,65535
 801330c:	1006917a 	slli	r3,r2,5
 8013310:	008200b4 	movhi	r2,2050
 8013314:	10abba04 	addi	r2,r2,-20760
 8013318:	1080030b 	ldhu	r2,12(r2)
 801331c:	10bfffcc 	andi	r2,r2,65535
 8013320:	1885283a 	div	r2,r3,r2
 8013324:	e0bff015 	stw	r2,-64(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8013328:	e03fef15 	stw	zero,-68(fp)
 801332c:	00003806 	br	8013410 <get_home_directory_cluster_for_file+0x28c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
 8013330:	008200b4 	movhi	r2,2050
 8013334:	10abba04 	addi	r2,r2,-20760
 8013338:	10c01317 	ldw	r3,76(r2)
 801333c:	e0bfef17 	ldw	r2,-68(fp)
 8013340:	1885883a 	add	r2,r3,r2
 8013344:	1009883a 	mov	r4,r2
 8013348:	d166e417 	ldw	r5,-25712(gp)
 801334c:	80119bc0 	call	80119bc <Read_Sector_Data>
 8013350:	1005003a 	cmpeq	r2,r2,zero
 8013354:	1000311e 	bne	r2,zero,801341c <get_home_directory_cluster_for_file+0x298>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 8013358:	e03fee15 	stw	zero,-72(fp)
 801335c:	00002306 	br	80133ec <get_home_directory_cluster_for_file+0x268>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 8013360:	e0bfee17 	ldw	r2,-72(fp)
 8013364:	1008917a 	slli	r4,r2,5
 8013368:	e1ffef17 	ldw	r7,-68(fp)
 801336c:	e17ffe17 	ldw	r5,-8(fp)
 8013370:	000d883a 	mov	r6,zero
 8013374:	8011e040 	call	8011e04 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 8013378:	e0bffe17 	ldw	r2,-8(fp)
 801337c:	10800003 	ldbu	r2,0(r2)
 8013380:	10803fcc 	andi	r2,r2,255
 8013384:	10803960 	cmpeqi	r2,r2,229
 8013388:	1000151e 	bne	r2,zero,80133e0 <get_home_directory_cluster_for_file+0x25c>
 801338c:	e0bffe17 	ldw	r2,-8(fp)
 8013390:	10800003 	ldbu	r2,0(r2)
 8013394:	10803fcc 	andi	r2,r2,255
 8013398:	1005003a 	cmpeq	r2,r2,zero
 801339c:	1000101e 	bne	r2,zero,80133e0 <get_home_directory_cluster_for_file+0x25c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 80133a0:	e17ff804 	addi	r5,fp,-32
 80133a4:	e1bffa04 	addi	r6,fp,-24
 80133a8:	e13ffe17 	ldw	r4,-8(fp)
 80133ac:	8012e980 	call	8012e98 <match_file_record_to_name_ext>
 80133b0:	e0bfed15 	stw	r2,-76(fp)
                            if (match)
 80133b4:	e0bfed17 	ldw	r2,-76(fp)
 80133b8:	1005003a 	cmpeq	r2,r2,zero
 80133bc:	1000081e 	bne	r2,zero,80133e0 <get_home_directory_cluster_for_file+0x25c>
                            {
                                new_cluster = file_record->start_cluster_index;
 80133c0:	e0bffe17 	ldw	r2,-8(fp)
 80133c4:	1080058b 	ldhu	r2,22(r2)
 80133c8:	10bfffcc 	andi	r2,r2,65535
 80133cc:	e0bff115 	stw	r2,-60(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 80133d0:	e0fffe17 	ldw	r3,-8(fp)
 80133d4:	00800044 	movi	r2,1
 80133d8:	18800a15 	stw	r2,40(r3)
                                break;
 80133dc:	00000606 	br	80133f8 <get_home_directory_cluster_for_file+0x274>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 80133e0:	e0bfee17 	ldw	r2,-72(fp)
 80133e4:	10800044 	addi	r2,r2,1
 80133e8:	e0bfee15 	stw	r2,-72(fp)
 80133ec:	e0bfee17 	ldw	r2,-72(fp)
 80133f0:	10800410 	cmplti	r2,r2,16
 80133f4:	103fda1e 	bne	r2,zero,8013360 <get_home_directory_cluster_for_file+0x1dc>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
 80133f8:	e0fff117 	ldw	r3,-60(fp)
 80133fc:	e0bff617 	ldw	r2,-40(fp)
 8013400:	1880061e 	bne	r3,r2,801341c <get_home_directory_cluster_for_file+0x298>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8013404:	e0bfef17 	ldw	r2,-68(fp)
 8013408:	10800044 	addi	r2,r2,1
 801340c:	e0bfef15 	stw	r2,-68(fp)
 8013410:	e0ffef17 	ldw	r3,-68(fp)
 8013414:	e0bff017 	ldw	r2,-64(fp)
 8013418:	18bfc516 	blt	r3,r2,8013330 <get_home_directory_cluster_for_file+0x1ac>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
 801341c:	e0fff117 	ldw	r3,-60(fp)
 8013420:	e0bff617 	ldw	r2,-40(fp)
 8013424:	18800826 	beq	r3,r2,8013448 <get_home_directory_cluster_for_file+0x2c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 8013428:	e0bff117 	ldw	r2,-60(fp)
 801342c:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
 8013430:	e0fff317 	ldw	r3,-52(fp)
 8013434:	e0bff517 	ldw	r2,-44(fp)
 8013438:	1885883a 	add	r2,r3,r2
 801343c:	10800044 	addi	r2,r2,1
 8013440:	e0bff315 	stw	r2,-52(fp)
 8013444:	00007406 	br	8013618 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 8013448:	e03fff15 	stw	zero,-4(fp)
 801344c:	00008c06 	br	8013680 <get_home_directory_cluster_for_file+0x4fc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
 8013450:	e0bff617 	ldw	r2,-40(fp)
 8013454:	e0bfec15 	stw	r2,-80(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 8013458:	e0bfec17 	ldw	r2,-80(fp)
 801345c:	10ffff84 	addi	r3,r2,-2
 8013460:	008200b4 	movhi	r2,2050
 8013464:	10abba04 	addi	r2,r2,-20760
 8013468:	10800383 	ldbu	r2,14(r2)
 801346c:	10803fcc 	andi	r2,r2,255
 8013470:	1885383a 	mul	r2,r3,r2
 8013474:	1007883a 	mov	r3,r2
 8013478:	008200b4 	movhi	r2,2050
 801347c:	10abba04 	addi	r2,r2,-20760
 8013480:	10801417 	ldw	r2,80(r2)
 8013484:	1885883a 	add	r2,r3,r2
 8013488:	e0bfeb15 	stw	r2,-84(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 801348c:	e03fea15 	stw	zero,-88(fp)
 8013490:	00003206 	br	801355c <get_home_directory_cluster_for_file+0x3d8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8013494:	e0ffea17 	ldw	r3,-88(fp)
 8013498:	e0bfeb17 	ldw	r2,-84(fp)
 801349c:	1889883a 	add	r4,r3,r2
 80134a0:	d166e417 	ldw	r5,-25712(gp)
 80134a4:	80119bc0 	call	80119bc <Read_Sector_Data>
 80134a8:	1005003a 	cmpeq	r2,r2,zero
 80134ac:	1000311e 	bne	r2,zero,8013574 <get_home_directory_cluster_for_file+0x3f0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 80134b0:	e03fe915 	stw	zero,-92(fp)
 80134b4:	00002006 	br	8013538 <get_home_directory_cluster_for_file+0x3b4>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 80134b8:	e0bfe917 	ldw	r2,-92(fp)
 80134bc:	1008917a 	slli	r4,r2,5
 80134c0:	e1bfec17 	ldw	r6,-80(fp)
 80134c4:	e1ffea17 	ldw	r7,-88(fp)
 80134c8:	e17ffe17 	ldw	r5,-8(fp)
 80134cc:	8011e040 	call	8011e04 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 80134d0:	e0bffe17 	ldw	r2,-8(fp)
 80134d4:	10800003 	ldbu	r2,0(r2)
 80134d8:	10803fcc 	andi	r2,r2,255
 80134dc:	10803960 	cmpeqi	r2,r2,229
 80134e0:	1000121e 	bne	r2,zero,801352c <get_home_directory_cluster_for_file+0x3a8>
 80134e4:	e0bffe17 	ldw	r2,-8(fp)
 80134e8:	10800003 	ldbu	r2,0(r2)
 80134ec:	10803fcc 	andi	r2,r2,255
 80134f0:	1005003a 	cmpeq	r2,r2,zero
 80134f4:	10000d1e 	bne	r2,zero,801352c <get_home_directory_cluster_for_file+0x3a8>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
 80134f8:	e17ff804 	addi	r5,fp,-32
 80134fc:	e1bffa04 	addi	r6,fp,-24
 8013500:	e13ffe17 	ldw	r4,-8(fp)
 8013504:	8012e980 	call	8012e98 <match_file_record_to_name_ext>
 8013508:	e0bfe815 	stw	r2,-96(fp)
                                if (match)
 801350c:	e0bfe817 	ldw	r2,-96(fp)
 8013510:	1005003a 	cmpeq	r2,r2,zero
 8013514:	1000051e 	bne	r2,zero,801352c <get_home_directory_cluster_for_file+0x3a8>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
 8013518:	e0bffe17 	ldw	r2,-8(fp)
 801351c:	1080058b 	ldhu	r2,22(r2)
 8013520:	10bfffcc 	andi	r2,r2,65535
 8013524:	e0bff115 	stw	r2,-60(fp)
                                    break;
 8013528:	00000606 	br	8013544 <get_home_directory_cluster_for_file+0x3c0>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 801352c:	e0bfe917 	ldw	r2,-92(fp)
 8013530:	10800044 	addi	r2,r2,1
 8013534:	e0bfe915 	stw	r2,-92(fp)
 8013538:	e0bfe917 	ldw	r2,-92(fp)
 801353c:	10800410 	cmplti	r2,r2,16
 8013540:	103fdd1e 	bne	r2,zero,80134b8 <get_home_directory_cluster_for_file+0x334>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
 8013544:	e0fff117 	ldw	r3,-60(fp)
 8013548:	e0bff617 	ldw	r2,-40(fp)
 801354c:	1880091e 	bne	r3,r2,8013574 <get_home_directory_cluster_for_file+0x3f0>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8013550:	e0bfea17 	ldw	r2,-88(fp)
 8013554:	10800044 	addi	r2,r2,1
 8013558:	e0bfea15 	stw	r2,-88(fp)
 801355c:	008200b4 	movhi	r2,2050
 8013560:	10abba04 	addi	r2,r2,-20760
 8013564:	10800383 	ldbu	r2,14(r2)
 8013568:	10c03fcc 	andi	r3,r2,255
 801356c:	e0bfea17 	ldw	r2,-88(fp)
 8013570:	10ffc816 	blt	r2,r3,8013494 <get_home_directory_cluster_for_file+0x310>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
 8013574:	e0fff117 	ldw	r3,-60(fp)
 8013578:	e0bff617 	ldw	r2,-40(fp)
 801357c:	1880131e 	bne	r3,r2,80135cc <get_home_directory_cluster_for_file+0x448>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
 8013580:	e13ff117 	ldw	r4,-60(fp)
 8013584:	e17ffb04 	addi	r5,fp,-20
 8013588:	8011ab80 	call	8011ab8 <get_cluster_flag>
 801358c:	1005003a 	cmpeq	r2,r2,zero
 8013590:	10000c1e 	bne	r2,zero,80135c4 <get_home_directory_cluster_for_file+0x440>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 8013594:	e0bffb0b 	ldhu	r2,-20(fp)
 8013598:	10bfffcc 	andi	r2,r2,65535
 801359c:	10fffe0c 	andi	r3,r2,65528
 80135a0:	00bffe14 	movui	r2,65528
 80135a4:	1880021e 	bne	r3,r2,80135b0 <get_home_directory_cluster_for_file+0x42c>
						{
							return false;
 80135a8:	e03fff15 	stw	zero,-4(fp)
 80135ac:	00003406 	br	8013680 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 80135b0:	e0bffb0b 	ldhu	r2,-20(fp)
 80135b4:	10bfffcc 	andi	r2,r2,65535
 80135b8:	10bffe0c 	andi	r2,r2,65528
 80135bc:	e0bff115 	stw	r2,-60(fp)
 80135c0:	00000206 	br	80135cc <get_home_directory_cluster_for_file+0x448>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
 80135c4:	e03fff15 	stw	zero,-4(fp)
 80135c8:	00002d06 	br	8013680 <get_home_directory_cluster_for_file+0x4fc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 80135cc:	e0ffec17 	ldw	r3,-80(fp)
 80135d0:	00bffdd4 	movui	r2,65527
 80135d4:	10c00316 	blt	r2,r3,80135e4 <get_home_directory_cluster_for_file+0x460>
 80135d8:	e0fff117 	ldw	r3,-60(fp)
 80135dc:	e0bff617 	ldw	r2,-40(fp)
 80135e0:	18bf9d26 	beq	r3,r2,8013458 <get_home_directory_cluster_for_file+0x2d4>
            if (new_cluster != home_dir_cluster)
 80135e4:	e0fff117 	ldw	r3,-60(fp)
 80135e8:	e0bff617 	ldw	r2,-40(fp)
 80135ec:	18800826 	beq	r3,r2,8013610 <get_home_directory_cluster_for_file+0x48c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 80135f0:	e0bff117 	ldw	r2,-60(fp)
 80135f4:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
 80135f8:	e0fff317 	ldw	r3,-52(fp)
 80135fc:	e0bff517 	ldw	r2,-44(fp)
 8013600:	1885883a 	add	r2,r3,r2
 8013604:	10800044 	addi	r2,r2,1
 8013608:	e0bff315 	stw	r2,-52(fp)
 801360c:	00000206 	br	8013618 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 8013610:	e03fff15 	stw	zero,-4(fp)
 8013614:	00001a06 	br	8013680 <get_home_directory_cluster_for_file+0x4fc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
 8013618:	e0bff317 	ldw	r2,-52(fp)
 801361c:	1007883a 	mov	r3,r2
 8013620:	e0bffc17 	ldw	r2,-16(fp)
 8013624:	1889883a 	add	r4,r3,r2
 8013628:	8012dd80 	call	8012dd8 <get_dir_divider_location>
 801362c:	e0bff515 	stw	r2,-44(fp)
        if (location < 0)
 8013630:	e0bff517 	ldw	r2,-44(fp)
 8013634:	1004403a 	cmpge	r2,r2,zero
 8013638:	1000021e 	bne	r2,zero,8013644 <get_home_directory_cluster_for_file+0x4c0>
        {
            // Directory has been located.
            result = true;
 801363c:	00800044 	movi	r2,1
 8013640:	e0bff715 	stw	r2,-36(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
 8013644:	e0bff517 	ldw	r2,-44(fp)
 8013648:	10800048 	cmpgei	r2,r2,1
 801364c:	103edb1e 	bne	r2,zero,80131bc <get_home_directory_cluster_for_file+0x38>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
 8013650:	e0fffd17 	ldw	r3,-12(fp)
 8013654:	e0bff617 	ldw	r2,-40(fp)
 8013658:	18800015 	stw	r2,0(r3)
    if (home_dir_cluster == 0)
 801365c:	e0bff617 	ldw	r2,-40(fp)
 8013660:	1004c03a 	cmpne	r2,r2,zero
 8013664:	1000041e 	bne	r2,zero,8013678 <get_home_directory_cluster_for_file+0x4f4>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
 8013668:	e0bffe17 	ldw	r2,-8(fp)
 801366c:	10000a15 	stw	zero,40(r2)
		result = true;
 8013670:	00800044 	movi	r2,1
 8013674:	e0bff715 	stw	r2,-36(fp)
    }
    return result;
 8013678:	e0bff717 	ldw	r2,-36(fp)
 801367c:	e0bfff15 	stw	r2,-4(fp)
 8013680:	e0bfff17 	ldw	r2,-4(fp)
}
 8013684:	e037883a 	mov	sp,fp
 8013688:	dfc00117 	ldw	ra,4(sp)
 801368c:	df000017 	ldw	fp,0(sp)
 8013690:	dec00204 	addi	sp,sp,8
 8013694:	f800283a 	ret

08013698 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 8013698:	deffe704 	addi	sp,sp,-100
 801369c:	dfc01815 	stw	ra,96(sp)
 80136a0:	df001715 	stw	fp,92(sp)
 80136a4:	df001704 	addi	fp,sp,92
 80136a8:	e13ffc15 	stw	r4,-16(fp)
 80136ac:	e17ffd15 	stw	r5,-12(fp)
 80136b0:	e1bffe15 	stw	r6,-8(fp)
    int location = get_dir_divider_location( file_name );
 80136b4:	e13ffd17 	ldw	r4,-12(fp)
 80136b8:	8012dd80 	call	8012dd8 <get_dir_divider_location>
 80136bc:	e0bff715 	stw	r2,-36(fp)
    int last_dir_separator = 0;
 80136c0:	e03ff615 	stw	zero,-40(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 80136c4:	00800804 	movi	r2,32
 80136c8:	e0bff805 	stb	r2,-32(fp)
 80136cc:	00800804 	movi	r2,32
 80136d0:	e0bff845 	stb	r2,-31(fp)
 80136d4:	00800804 	movi	r2,32
 80136d8:	e0bff885 	stb	r2,-30(fp)
 80136dc:	00800804 	movi	r2,32
 80136e0:	e0bff8c5 	stb	r2,-29(fp)
 80136e4:	00800804 	movi	r2,32
 80136e8:	e0bff905 	stb	r2,-28(fp)
 80136ec:	00800804 	movi	r2,32
 80136f0:	e0bff945 	stb	r2,-27(fp)
 80136f4:	00800804 	movi	r2,32
 80136f8:	e0bff985 	stb	r2,-26(fp)
 80136fc:	00800804 	movi	r2,32
 8013700:	e0bff9c5 	stb	r2,-25(fp)
    char extension[3] = { ' ', ' ', ' ' };
 8013704:	00800804 	movi	r2,32
 8013708:	e0bffa05 	stb	r2,-24(fp)
 801370c:	00800804 	movi	r2,32
 8013710:	e0bffa45 	stb	r2,-23(fp)
 8013714:	00800804 	movi	r2,32
 8013718:	e0bffa85 	stb	r2,-22(fp)
    int ext_index = -1;
 801371c:	00bfffc4 	movi	r2,-1
 8013720:	e0bff515 	stw	r2,-44(fp)
    int cluster = directory_start_cluster;
 8013724:	e0bffc17 	ldw	r2,-16(fp)
 8013728:	e0bff415 	stw	r2,-48(fp)
    int index;
	int length = strlen(file_name);
 801372c:	e13ffd17 	ldw	r4,-12(fp)
 8013730:	80061000 	call	8006100 <strlen>
 8013734:	e0bff215 	stw	r2,-56(fp)
    bool result = false;
 8013738:	e03ff115 	stw	zero,-60(fp)
    
    // Skip through all directory separators.
    while (location > 0)
 801373c:	00000b06 	br	801376c <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
 8013740:	e0fff617 	ldw	r3,-40(fp)
 8013744:	e0bff717 	ldw	r2,-36(fp)
 8013748:	1885883a 	add	r2,r3,r2
 801374c:	10800044 	addi	r2,r2,1
 8013750:	e0bff615 	stw	r2,-40(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
 8013754:	e0bff617 	ldw	r2,-40(fp)
 8013758:	1007883a 	mov	r3,r2
 801375c:	e0bffd17 	ldw	r2,-12(fp)
 8013760:	1889883a 	add	r4,r3,r2
 8013764:	8012dd80 	call	8012dd8 <get_dir_divider_location>
 8013768:	e0bff715 	stw	r2,-36(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
 801376c:	e0bff717 	ldw	r2,-36(fp)
 8013770:	10800048 	cmpgei	r2,r2,1
 8013774:	103ff21e 	bne	r2,zero,8013740 <find_file_in_directory+0xa8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 8013778:	e0bff617 	ldw	r2,-40(fp)
 801377c:	e0bff315 	stw	r2,-52(fp)
 8013780:	00002b06 	br	8013830 <find_file_in_directory+0x198>
    {
        if (file_name[index] == '.')
 8013784:	e0bff317 	ldw	r2,-52(fp)
 8013788:	1007883a 	mov	r3,r2
 801378c:	e0bffd17 	ldw	r2,-12(fp)
 8013790:	1885883a 	add	r2,r3,r2
 8013794:	10800003 	ldbu	r2,0(r2)
 8013798:	10803fcc 	andi	r2,r2,255
 801379c:	1080201c 	xori	r2,r2,128
 80137a0:	10bfe004 	addi	r2,r2,-128
 80137a4:	10800b98 	cmpnei	r2,r2,46
 80137a8:	1000031e 	bne	r2,zero,80137b8 <find_file_in_directory+0x120>
        {
            ext_index = index;
 80137ac:	e0bff317 	ldw	r2,-52(fp)
 80137b0:	e0bff515 	stw	r2,-44(fp)
 80137b4:	00001b06 	br	8013824 <find_file_in_directory+0x18c>
        }
        else if (ext_index < 0)
 80137b8:	e0bff517 	ldw	r2,-44(fp)
 80137bc:	1004403a 	cmpge	r2,r2,zero
 80137c0:	10000c1e 	bne	r2,zero,80137f4 <find_file_in_directory+0x15c>
        {
            name[index-last_dir_separator] = file_name[index];
 80137c4:	e0fff317 	ldw	r3,-52(fp)
 80137c8:	e0bff617 	ldw	r2,-40(fp)
 80137cc:	1889c83a 	sub	r4,r3,r2
 80137d0:	e0bff317 	ldw	r2,-52(fp)
 80137d4:	1007883a 	mov	r3,r2
 80137d8:	e0bffd17 	ldw	r2,-12(fp)
 80137dc:	1885883a 	add	r2,r3,r2
 80137e0:	10c00003 	ldbu	r3,0(r2)
 80137e4:	e0bff804 	addi	r2,fp,-32
 80137e8:	1105883a 	add	r2,r2,r4
 80137ec:	10c00005 	stb	r3,0(r2)
 80137f0:	00000c06 	br	8013824 <find_file_in_directory+0x18c>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
 80137f4:	e0fff317 	ldw	r3,-52(fp)
 80137f8:	e0bff517 	ldw	r2,-44(fp)
 80137fc:	1885c83a 	sub	r2,r3,r2
 8013800:	113fffc4 	addi	r4,r2,-1
 8013804:	e0bff317 	ldw	r2,-52(fp)
 8013808:	1007883a 	mov	r3,r2
 801380c:	e0bffd17 	ldw	r2,-12(fp)
 8013810:	1885883a 	add	r2,r3,r2
 8013814:	10c00003 	ldbu	r3,0(r2)
 8013818:	e0bffa04 	addi	r2,fp,-24
 801381c:	1105883a 	add	r2,r2,r4
 8013820:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 8013824:	e0bff317 	ldw	r2,-52(fp)
 8013828:	10800044 	addi	r2,r2,1
 801382c:	e0bff315 	stw	r2,-52(fp)
 8013830:	e0fff317 	ldw	r3,-52(fp)
 8013834:	e0bff217 	ldw	r2,-56(fp)
 8013838:	18bfd216 	blt	r3,r2,8013784 <find_file_in_directory+0xec>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
 801383c:	e0bffc17 	ldw	r2,-16(fp)
 8013840:	1004c03a 	cmpne	r2,r2,zero
 8013844:	1000441e 	bne	r2,zero,8013958 <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 8013848:	008200b4 	movhi	r2,2050
 801384c:	10abba04 	addi	r2,r2,-20760
 8013850:	1080050b 	ldhu	r2,20(r2)
 8013854:	10bfffcc 	andi	r2,r2,65535
 8013858:	1006917a 	slli	r3,r2,5
 801385c:	008200b4 	movhi	r2,2050
 8013860:	10abba04 	addi	r2,r2,-20760
 8013864:	1080030b 	ldhu	r2,12(r2)
 8013868:	10bfffcc 	andi	r2,r2,65535
 801386c:	1885283a 	div	r2,r3,r2
 8013870:	e0bff015 	stw	r2,-64(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8013874:	e03fef15 	stw	zero,-68(fp)
 8013878:	00003306 	br	8013948 <find_file_in_directory+0x2b0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 801387c:	008200b4 	movhi	r2,2050
 8013880:	10abba04 	addi	r2,r2,-20760
 8013884:	10c01317 	ldw	r3,76(r2)
 8013888:	e0bfef17 	ldw	r2,-68(fp)
 801388c:	1885883a 	add	r2,r3,r2
 8013890:	1009883a 	mov	r4,r2
 8013894:	d166e417 	ldw	r5,-25712(gp)
 8013898:	80119bc0 	call	80119bc <Read_Sector_Data>
 801389c:	1005003a 	cmpeq	r2,r2,zero
 80138a0:	10008e1e 	bne	r2,zero,8013adc <find_file_in_directory+0x444>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 80138a4:	e03fee15 	stw	zero,-72(fp)
 80138a8:	00001e06 	br	8013924 <find_file_in_directory+0x28c>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 80138ac:	e0bfee17 	ldw	r2,-72(fp)
 80138b0:	1008917a 	slli	r4,r2,5
 80138b4:	e1ffef17 	ldw	r7,-68(fp)
 80138b8:	e17ffe17 	ldw	r5,-8(fp)
 80138bc:	000d883a 	mov	r6,zero
 80138c0:	8011e040 	call	8011e04 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 80138c4:	e0bffe17 	ldw	r2,-8(fp)
 80138c8:	10800003 	ldbu	r2,0(r2)
 80138cc:	10803fcc 	andi	r2,r2,255
 80138d0:	10803960 	cmpeqi	r2,r2,229
 80138d4:	1000101e 	bne	r2,zero,8013918 <find_file_in_directory+0x280>
 80138d8:	e0bffe17 	ldw	r2,-8(fp)
 80138dc:	10800003 	ldbu	r2,0(r2)
 80138e0:	10803fcc 	andi	r2,r2,255
 80138e4:	1005003a 	cmpeq	r2,r2,zero
 80138e8:	10000b1e 	bne	r2,zero,8013918 <find_file_in_directory+0x280>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
 80138ec:	e17ff804 	addi	r5,fp,-32
 80138f0:	e1bffa04 	addi	r6,fp,-24
 80138f4:	e13ffe17 	ldw	r4,-8(fp)
 80138f8:	8012e980 	call	8012e98 <match_file_record_to_name_ext>
 80138fc:	e0bfed15 	stw	r2,-76(fp)

                        if (match)
 8013900:	e0bfed17 	ldw	r2,-76(fp)
 8013904:	1005003a 	cmpeq	r2,r2,zero
 8013908:	1000031e 	bne	r2,zero,8013918 <find_file_in_directory+0x280>
                        {
                            result = true;
 801390c:	00800044 	movi	r2,1
 8013910:	e0bff115 	stw	r2,-60(fp)
                            break;
 8013914:	00000606 	br	8013930 <find_file_in_directory+0x298>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 8013918:	e0bfee17 	ldw	r2,-72(fp)
 801391c:	10800044 	addi	r2,r2,1
 8013920:	e0bfee15 	stw	r2,-72(fp)
 8013924:	e0bfee17 	ldw	r2,-72(fp)
 8013928:	10800410 	cmplti	r2,r2,16
 801392c:	103fdf1e 	bne	r2,zero,80138ac <find_file_in_directory+0x214>
            }
            else
            {
                break;
            }
            if (result)
 8013930:	e0bff117 	ldw	r2,-60(fp)
 8013934:	1004c03a 	cmpne	r2,r2,zero
 8013938:	1000681e 	bne	r2,zero,8013adc <find_file_in_directory+0x444>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 801393c:	e0bfef17 	ldw	r2,-68(fp)
 8013940:	10800044 	addi	r2,r2,1
 8013944:	e0bfef15 	stw	r2,-68(fp)
 8013948:	e0ffef17 	ldw	r3,-68(fp)
 801394c:	e0bff017 	ldw	r2,-64(fp)
 8013950:	18bfca16 	blt	r3,r2,801387c <find_file_in_directory+0x1e4>
 8013954:	00006106 	br	8013adc <find_file_in_directory+0x444>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 8013958:	e0bff417 	ldw	r2,-48(fp)
 801395c:	10ffff84 	addi	r3,r2,-2
 8013960:	008200b4 	movhi	r2,2050
 8013964:	10abba04 	addi	r2,r2,-20760
 8013968:	10800383 	ldbu	r2,14(r2)
 801396c:	10803fcc 	andi	r2,r2,255
 8013970:	1885383a 	mul	r2,r3,r2
 8013974:	1007883a 	mov	r3,r2
 8013978:	008200b4 	movhi	r2,2050
 801397c:	10abba04 	addi	r2,r2,-20760
 8013980:	10801417 	ldw	r2,80(r2)
 8013984:	1885883a 	add	r2,r3,r2
 8013988:	e0bfec15 	stw	r2,-80(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 801398c:	e03feb15 	stw	zero,-84(fp)
 8013990:	00003006 	br	8013a54 <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8013994:	e0ffeb17 	ldw	r3,-84(fp)
 8013998:	e0bfec17 	ldw	r2,-80(fp)
 801399c:	1889883a 	add	r4,r3,r2
 80139a0:	d166e417 	ldw	r5,-25712(gp)
 80139a4:	80119bc0 	call	80119bc <Read_Sector_Data>
 80139a8:	1005003a 	cmpeq	r2,r2,zero
 80139ac:	10002f1e 	bne	r2,zero,8013a6c <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 80139b0:	e03fea15 	stw	zero,-88(fp)
 80139b4:	00001e06 	br	8013a30 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 80139b8:	e0bfea17 	ldw	r2,-88(fp)
 80139bc:	1008917a 	slli	r4,r2,5
 80139c0:	e1bff417 	ldw	r6,-48(fp)
 80139c4:	e1ffeb17 	ldw	r7,-84(fp)
 80139c8:	e17ffe17 	ldw	r5,-8(fp)
 80139cc:	8011e040 	call	8011e04 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 80139d0:	e0bffe17 	ldw	r2,-8(fp)
 80139d4:	10800003 	ldbu	r2,0(r2)
 80139d8:	10803fcc 	andi	r2,r2,255
 80139dc:	10803960 	cmpeqi	r2,r2,229
 80139e0:	1000101e 	bne	r2,zero,8013a24 <find_file_in_directory+0x38c>
 80139e4:	e0bffe17 	ldw	r2,-8(fp)
 80139e8:	10800003 	ldbu	r2,0(r2)
 80139ec:	10803fcc 	andi	r2,r2,255
 80139f0:	1005003a 	cmpeq	r2,r2,zero
 80139f4:	10000b1e 	bne	r2,zero,8013a24 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 80139f8:	e17ff804 	addi	r5,fp,-32
 80139fc:	e1bffa04 	addi	r6,fp,-24
 8013a00:	e13ffe17 	ldw	r4,-8(fp)
 8013a04:	8012e980 	call	8012e98 <match_file_record_to_name_ext>
 8013a08:	e0bfe915 	stw	r2,-92(fp)

                            if (match)
 8013a0c:	e0bfe917 	ldw	r2,-92(fp)
 8013a10:	1005003a 	cmpeq	r2,r2,zero
 8013a14:	1000031e 	bne	r2,zero,8013a24 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
 8013a18:	00800044 	movi	r2,1
 8013a1c:	e0bff115 	stw	r2,-60(fp)
                                break;
 8013a20:	00000606 	br	8013a3c <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 8013a24:	e0bfea17 	ldw	r2,-88(fp)
 8013a28:	10800044 	addi	r2,r2,1
 8013a2c:	e0bfea15 	stw	r2,-88(fp)
 8013a30:	e0bfea17 	ldw	r2,-88(fp)
 8013a34:	10800410 	cmplti	r2,r2,16
 8013a38:	103fdf1e 	bne	r2,zero,80139b8 <find_file_in_directory+0x320>
                }
                else
                {
                    break;
                }
                if (result)
 8013a3c:	e0bff117 	ldw	r2,-60(fp)
 8013a40:	1004c03a 	cmpne	r2,r2,zero
 8013a44:	1000091e 	bne	r2,zero,8013a6c <find_file_in_directory+0x3d4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8013a48:	e0bfeb17 	ldw	r2,-84(fp)
 8013a4c:	10800044 	addi	r2,r2,1
 8013a50:	e0bfeb15 	stw	r2,-84(fp)
 8013a54:	008200b4 	movhi	r2,2050
 8013a58:	10abba04 	addi	r2,r2,-20760
 8013a5c:	10800383 	ldbu	r2,14(r2)
 8013a60:	10c03fcc 	andi	r3,r2,255
 8013a64:	e0bfeb17 	ldw	r2,-84(fp)
 8013a68:	10ffca16 	blt	r2,r3,8013994 <find_file_in_directory+0x2fc>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
 8013a6c:	e0bff117 	ldw	r2,-60(fp)
 8013a70:	1004c03a 	cmpne	r2,r2,zero
 8013a74:	1000131e 	bne	r2,zero,8013ac4 <find_file_in_directory+0x42c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
 8013a78:	e13ff417 	ldw	r4,-48(fp)
 8013a7c:	e17ffb04 	addi	r5,fp,-20
 8013a80:	8011ab80 	call	8011ab8 <get_cluster_flag>
 8013a84:	1005003a 	cmpeq	r2,r2,zero
 8013a88:	10000c1e 	bne	r2,zero,8013abc <find_file_in_directory+0x424>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 8013a8c:	e0bffb0b 	ldhu	r2,-20(fp)
 8013a90:	10bfffcc 	andi	r2,r2,65535
 8013a94:	10fffe0c 	andi	r3,r2,65528
 8013a98:	00bffe14 	movui	r2,65528
 8013a9c:	1880021e 	bne	r3,r2,8013aa8 <find_file_in_directory+0x410>
					{
						return false;
 8013aa0:	e03fff15 	stw	zero,-4(fp)
 8013aa4:	00000f06 	br	8013ae4 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 8013aa8:	e0bffb0b 	ldhu	r2,-20(fp)
 8013aac:	10bfffcc 	andi	r2,r2,65535
 8013ab0:	10bffe0c 	andi	r2,r2,65528
 8013ab4:	e0bff415 	stw	r2,-48(fp)
 8013ab8:	00000206 	br	8013ac4 <find_file_in_directory+0x42c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
 8013abc:	e03fff15 	stw	zero,-4(fp)
 8013ac0:	00000806 	br	8013ae4 <find_file_in_directory+0x44c>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
 8013ac4:	e0fff417 	ldw	r3,-48(fp)
 8013ac8:	00bffdd4 	movui	r2,65527
 8013acc:	10c00316 	blt	r2,r3,8013adc <find_file_in_directory+0x444>
 8013ad0:	e0bff117 	ldw	r2,-60(fp)
 8013ad4:	1005003a 	cmpeq	r2,r2,zero
 8013ad8:	103f9f1e 	bne	r2,zero,8013958 <find_file_in_directory+0x2c0>
    }
    
    return result;   
 8013adc:	e0bff117 	ldw	r2,-60(fp)
 8013ae0:	e0bfff15 	stw	r2,-4(fp)
 8013ae4:	e0bfff17 	ldw	r2,-4(fp)
}
 8013ae8:	e037883a 	mov	sp,fp
 8013aec:	dfc00117 	ldw	ra,4(sp)
 8013af0:	df000017 	ldw	fp,0(sp)
 8013af4:	dec00204 	addi	sp,sp,8
 8013af8:	f800283a 	ret

08013afc <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 8013afc:	defff504 	addi	sp,sp,-44
 8013b00:	dfc00a15 	stw	ra,40(sp)
 8013b04:	df000915 	stw	fp,36(sp)
 8013b08:	df000904 	addi	fp,sp,36
 8013b0c:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
 8013b10:	008200b4 	movhi	r2,2050
 8013b14:	10abba04 	addi	r2,r2,-20760
 8013b18:	10801117 	ldw	r2,68(r2)
 8013b1c:	e0bffe15 	stw	r2,-8(fp)
    unsigned int cluster_index = 2;
 8013b20:	00800084 	movi	r2,2
 8013b24:	e0bffd15 	stw	r2,-12(fp)
    short int cluster = -1;
 8013b28:	00bfffc4 	movi	r2,-1
 8013b2c:	e0bffc0d 	sth	r2,-16(fp)
    bool result = false;
 8013b30:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 8013b34:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 8013b38:	008200b4 	movhi	r2,2050
 8013b3c:	10abba04 	addi	r2,r2,-20760
 8013b40:	10801417 	ldw	r2,80(r2)
 8013b44:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 8013b48:	008200b4 	movhi	r2,2050
 8013b4c:	10abba04 	addi	r2,r2,-20760
 8013b50:	1080058b 	ldhu	r2,22(r2)
 8013b54:	10bfffcc 	andi	r2,r2,65535
 8013b58:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
 8013b5c:	008200b4 	movhi	r2,2050
 8013b60:	10abba04 	addi	r2,r2,-20760
 8013b64:	10800917 	ldw	r2,36(r2)
 8013b68:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32)
 8013b6c:	e0fff817 	ldw	r3,-32(fp)
 8013b70:	e0bff717 	ldw	r2,-36(fp)
 8013b74:	10c00b2e 	bgeu	r2,r3,8013ba4 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 8013b78:	e0fff817 	ldw	r3,-32(fp)
 8013b7c:	e0bff917 	ldw	r2,-28(fp)
 8013b80:	1887c83a 	sub	r3,r3,r2
 8013b84:	008200b4 	movhi	r2,2050
 8013b88:	10abba04 	addi	r2,r2,-20760
 8013b8c:	10800383 	ldbu	r2,14(r2)
 8013b90:	10803fcc 	andi	r2,r2,255
 8013b94:	1885203a 	divu	r2,r3,r2
 8013b98:	10800044 	addi	r2,r2,1
 8013b9c:	e0bffa15 	stw	r2,-24(fp)
 8013ba0:	00002906 	br	8013c48 <find_first_empty_cluster+0x14c>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 8013ba4:	e0fff717 	ldw	r3,-36(fp)
 8013ba8:	e0bff917 	ldw	r2,-28(fp)
 8013bac:	1887c83a 	sub	r3,r3,r2
 8013bb0:	008200b4 	movhi	r2,2050
 8013bb4:	10abba04 	addi	r2,r2,-20760
 8013bb8:	10800383 	ldbu	r2,14(r2)
 8013bbc:	10803fcc 	andi	r2,r2,255
 8013bc0:	1885203a 	divu	r2,r3,r2
 8013bc4:	10800044 	addi	r2,r2,1
 8013bc8:	e0bffa15 	stw	r2,-24(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 8013bcc:	00001e06 	br	8013c48 <find_first_empty_cluster+0x14c>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
 8013bd0:	e13ffe17 	ldw	r4,-8(fp)
 8013bd4:	d166e417 	ldw	r5,-25712(gp)
 8013bd8:	80119bc0 	call	80119bc <Read_Sector_Data>
 8013bdc:	1005003a 	cmpeq	r2,r2,zero
 8013be0:	1000131e 	bne	r2,zero,8013c30 <find_first_empty_cluster+0x134>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
 8013be4:	d0a6e617 	ldw	r2,-25704(gp)
 8013be8:	10800a17 	ldw	r2,40(r2)
 8013bec:	1007883a 	mov	r3,r2
 8013bf0:	e0bffd17 	ldw	r2,-12(fp)
 8013bf4:	10803fcc 	andi	r2,r2,255
 8013bf8:	1085883a 	add	r2,r2,r2
 8013bfc:	1885883a 	add	r2,r3,r2
 8013c00:	1080002b 	ldhuio	r2,0(r2)
 8013c04:	e0bffc0d 	sth	r2,-16(fp)
                if (cluster == 0)
 8013c08:	e0bffc0f 	ldh	r2,-16(fp)
 8013c0c:	1005003a 	cmpeq	r2,r2,zero
 8013c10:	1000071e 	bne	r2,zero,8013c30 <find_first_empty_cluster+0x134>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
 8013c14:	e0bffd17 	ldw	r2,-12(fp)
 8013c18:	10800044 	addi	r2,r2,1
 8013c1c:	e0bffd15 	stw	r2,-12(fp)
                } 
            } while ((cluster_index % 256) != 0);
 8013c20:	e0bffd17 	ldw	r2,-12(fp)
 8013c24:	10803fcc 	andi	r2,r2,255
 8013c28:	1004c03a 	cmpne	r2,r2,zero
 8013c2c:	103fed1e 	bne	r2,zero,8013be4 <find_first_empty_cluster+0xe8>
        }
        if (cluster == 0)
 8013c30:	e0bffc0f 	ldh	r2,-16(fp)
 8013c34:	1005003a 	cmpeq	r2,r2,zero
 8013c38:	1000081e 	bne	r2,zero,8013c5c <find_first_empty_cluster+0x160>
        {
            break;
        }
        sector++;
 8013c3c:	e0bffe17 	ldw	r2,-8(fp)
 8013c40:	10800044 	addi	r2,r2,1
 8013c44:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 8013c48:	008200b4 	movhi	r2,2050
 8013c4c:	10abba04 	addi	r2,r2,-20760
 8013c50:	10c01217 	ldw	r3,72(r2)
 8013c54:	e0bffe17 	ldw	r2,-8(fp)
 8013c58:	18bfdd1e 	bne	r3,r2,8013bd0 <find_first_empty_cluster+0xd4>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
 8013c5c:	e0bffc0f 	ldh	r2,-16(fp)
 8013c60:	1004c03a 	cmpne	r2,r2,zero
 8013c64:	1000081e 	bne	r2,zero,8013c88 <find_first_empty_cluster+0x18c>
 8013c68:	e0fffc0f 	ldh	r3,-16(fp)
 8013c6c:	e0bffa17 	ldw	r2,-24(fp)
 8013c70:	10c00536 	bltu	r2,r3,8013c88 <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
 8013c74:	e0bfff17 	ldw	r2,-4(fp)
 8013c78:	e0fffd17 	ldw	r3,-12(fp)
 8013c7c:	10c00015 	stw	r3,0(r2)
		result = true;
 8013c80:	00800044 	movi	r2,1
 8013c84:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
 8013c88:	e0bffb17 	ldw	r2,-20(fp)
}
 8013c8c:	e037883a 	mov	sp,fp
 8013c90:	dfc00117 	ldw	ra,4(sp)
 8013c94:	df000017 	ldw	fp,0(sp)
 8013c98:	dec00204 	addi	sp,sp,8
 8013c9c:	f800283a 	ret

08013ca0 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 8013ca0:	defff404 	addi	sp,sp,-48
 8013ca4:	dfc00b15 	stw	ra,44(sp)
 8013ca8:	df000a15 	stw	fp,40(sp)
 8013cac:	df000a04 	addi	fp,sp,40
 8013cb0:	e13ffe15 	stw	r4,-8(fp)
    int result = -1;
 8013cb4:	00bfffc4 	movi	r2,-1
 8013cb8:	e0bffb15 	stw	r2,-20(fp)
    int cluster = start_cluster_index;
 8013cbc:	e0bffe17 	ldw	r2,-8(fp)
 8013cc0:	e0bffa15 	stw	r2,-24(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 8013cc4:	e0bffa17 	ldw	r2,-24(fp)
 8013cc8:	10ffff84 	addi	r3,r2,-2
 8013ccc:	008200b4 	movhi	r2,2050
 8013cd0:	10abba04 	addi	r2,r2,-20760
 8013cd4:	10800383 	ldbu	r2,14(r2)
 8013cd8:	10803fcc 	andi	r2,r2,255
 8013cdc:	1885383a 	mul	r2,r3,r2
 8013ce0:	1007883a 	mov	r3,r2
 8013ce4:	008200b4 	movhi	r2,2050
 8013ce8:	10abba04 	addi	r2,r2,-20760
 8013cec:	10801417 	ldw	r2,80(r2)
 8013cf0:	1885883a 	add	r2,r3,r2
 8013cf4:	e0bff915 	stw	r2,-28(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8013cf8:	e03ff815 	stw	zero,-32(fp)
 8013cfc:	00002c06 	br	8013db0 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8013d00:	e0fff817 	ldw	r3,-32(fp)
 8013d04:	e0bff917 	ldw	r2,-28(fp)
 8013d08:	1889883a 	add	r4,r3,r2
 8013d0c:	d166e417 	ldw	r5,-25712(gp)
 8013d10:	80119bc0 	call	80119bc <Read_Sector_Data>
 8013d14:	1005003a 	cmpeq	r2,r2,zero
 8013d18:	10002b1e 	bne	r2,zero,8013dc8 <find_first_empty_record_in_a_subdirectory+0x128>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 8013d1c:	e03ff715 	stw	zero,-36(fp)
 8013d20:	00001d06 	br	8013d98 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 8013d24:	d0a6e617 	ldw	r2,-25704(gp)
 8013d28:	10800a17 	ldw	r2,40(r2)
 8013d2c:	1007883a 	mov	r3,r2
 8013d30:	e0bff717 	ldw	r2,-36(fp)
 8013d34:	1004917a 	slli	r2,r2,5
 8013d38:	1885883a 	add	r2,r3,r2
 8013d3c:	10800023 	ldbuio	r2,0(r2)
 8013d40:	10803fcc 	andi	r2,r2,255
 8013d44:	e0bff60d 	sth	r2,-40(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
 8013d48:	e0bff60b 	ldhu	r2,-40(fp)
 8013d4c:	10803960 	cmpeqi	r2,r2,229
 8013d50:	1000031e 	bne	r2,zero,8013d60 <find_first_empty_record_in_a_subdirectory+0xc0>
 8013d54:	e0bff60b 	ldhu	r2,-40(fp)
 8013d58:	1004c03a 	cmpne	r2,r2,zero
 8013d5c:	10000b1e 	bne	r2,zero,8013d8c <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
 8013d60:	e0bff817 	ldw	r2,-32(fp)
 8013d64:	1006913a 	slli	r3,r2,4
 8013d68:	e0bff717 	ldw	r2,-36(fp)
 8013d6c:	1885883a 	add	r2,r3,r2
 8013d70:	1006943a 	slli	r3,r2,16
 8013d74:	e0bffa17 	ldw	r2,-24(fp)
 8013d78:	1884b03a 	or	r2,r3,r2
 8013d7c:	e0bffb15 	stw	r2,-20(fp)
                        return result;
 8013d80:	e0bffb17 	ldw	r2,-20(fp)
 8013d84:	e0bfff15 	stw	r2,-4(fp)
 8013d88:	00005206 	br	8013ed4 <find_first_empty_record_in_a_subdirectory+0x234>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 8013d8c:	e0bff717 	ldw	r2,-36(fp)
 8013d90:	10800044 	addi	r2,r2,1
 8013d94:	e0bff715 	stw	r2,-36(fp)
 8013d98:	e0bff717 	ldw	r2,-36(fp)
 8013d9c:	10800410 	cmplti	r2,r2,16
 8013da0:	103fe01e 	bne	r2,zero,8013d24 <find_first_empty_record_in_a_subdirectory+0x84>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8013da4:	e0bff817 	ldw	r2,-32(fp)
 8013da8:	10800044 	addi	r2,r2,1
 8013dac:	e0bff815 	stw	r2,-32(fp)
 8013db0:	008200b4 	movhi	r2,2050
 8013db4:	10abba04 	addi	r2,r2,-20760
 8013db8:	10800383 	ldbu	r2,14(r2)
 8013dbc:	10c03fcc 	andi	r3,r2,255
 8013dc0:	e0bff817 	ldw	r2,-32(fp)
 8013dc4:	10ffce16 	blt	r2,r3,8013d00 <find_first_empty_record_in_a_subdirectory+0x60>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
 8013dc8:	e0bffb17 	ldw	r2,-20(fp)
 8013dcc:	1004403a 	cmpge	r2,r2,zero
 8013dd0:	1000381e 	bne	r2,zero,8013eb4 <find_first_empty_record_in_a_subdirectory+0x214>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
 8013dd4:	e13ffa17 	ldw	r4,-24(fp)
 8013dd8:	e17ffc04 	addi	r5,fp,-16
 8013ddc:	8011ab80 	call	8011ab8 <get_cluster_flag>
 8013de0:	1005003a 	cmpeq	r2,r2,zero
 8013de4:	1000311e 	bne	r2,zero,8013eac <find_first_empty_record_in_a_subdirectory+0x20c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 8013de8:	e0bffc0b 	ldhu	r2,-16(fp)
 8013dec:	10bfffcc 	andi	r2,r2,65535
 8013df0:	10fffe0c 	andi	r3,r2,65528
 8013df4:	00bffe14 	movui	r2,65528
 8013df8:	18802e1e 	bne	r3,r2,8013eb4 <find_first_empty_record_in_a_subdirectory+0x214>
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
 8013dfc:	e13ffd04 	addi	r4,fp,-12
 8013e00:	8013afc0 	call	8013afc <find_first_empty_cluster>
 8013e04:	1005003a 	cmpeq	r2,r2,zero
 8013e08:	1000231e 	bne	r2,zero,8013e98 <find_first_empty_record_in_a_subdirectory+0x1f8>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 8013e0c:	e13ffa17 	ldw	r4,-24(fp)
 8013e10:	e0bffd17 	ldw	r2,-12(fp)
 8013e14:	117fffcc 	andi	r5,r2,65535
 8013e18:	2960001c 	xori	r5,r5,32768
 8013e1c:	29600004 	addi	r5,r5,-32768
 8013e20:	01800044 	movi	r6,1
 8013e24:	8011b700 	call	8011b70 <mark_cluster>
 8013e28:	1005003a 	cmpeq	r2,r2,zero
 8013e2c:	10001a1e 	bne	r2,zero,8013e98 <find_first_empty_record_in_a_subdirectory+0x1f8>
 8013e30:	e0bffd17 	ldw	r2,-12(fp)
 8013e34:	1009883a 	mov	r4,r2
 8013e38:	017fffc4 	movi	r5,-1
 8013e3c:	01800044 	movi	r6,1
 8013e40:	8011b700 	call	8011b70 <mark_cluster>
 8013e44:	1005003a 	cmpeq	r2,r2,zero
 8013e48:	1000131e 	bne	r2,zero,8013e98 <find_first_empty_record_in_a_subdirectory+0x1f8>
 8013e4c:	e13ffa17 	ldw	r4,-24(fp)
 8013e50:	e0bffd17 	ldw	r2,-12(fp)
 8013e54:	117fffcc 	andi	r5,r2,65535
 8013e58:	2960001c 	xori	r5,r5,32768
 8013e5c:	29600004 	addi	r5,r5,-32768
 8013e60:	000d883a 	mov	r6,zero
 8013e64:	8011b700 	call	8011b70 <mark_cluster>
 8013e68:	1005003a 	cmpeq	r2,r2,zero
 8013e6c:	10000a1e 	bne	r2,zero,8013e98 <find_first_empty_record_in_a_subdirectory+0x1f8>
 8013e70:	e0bffd17 	ldw	r2,-12(fp)
 8013e74:	1009883a 	mov	r4,r2
 8013e78:	017fffc4 	movi	r5,-1
 8013e7c:	000d883a 	mov	r6,zero
 8013e80:	8011b700 	call	8011b70 <mark_cluster>
 8013e84:	1005003a 	cmpeq	r2,r2,zero
 8013e88:	1000031e 	bne	r2,zero,8013e98 <find_first_empty_record_in_a_subdirectory+0x1f8>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
 8013e8c:	801196c0 	call	801196c <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
 8013e90:	e0bffd17 	ldw	r2,-12(fp)
 8013e94:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 8013e98:	e0bffc0b 	ldhu	r2,-16(fp)
 8013e9c:	10bfffcc 	andi	r2,r2,65535
 8013ea0:	10bffe0c 	andi	r2,r2,65528
 8013ea4:	e0bffa15 	stw	r2,-24(fp)
 8013ea8:	00000206 	br	8013eb4 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
 8013eac:	00bfffc4 	movi	r2,-1
 8013eb0:	e0bffb15 	stw	r2,-20(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
 8013eb4:	e0fffa17 	ldw	r3,-24(fp)
 8013eb8:	00bffdd4 	movui	r2,65527
 8013ebc:	10c00316 	blt	r2,r3,8013ecc <find_first_empty_record_in_a_subdirectory+0x22c>
 8013ec0:	e0bffb17 	ldw	r2,-20(fp)
 8013ec4:	10bfffe0 	cmpeqi	r2,r2,-1
 8013ec8:	103f7e1e 	bne	r2,zero,8013cc4 <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
 8013ecc:	e0bffb17 	ldw	r2,-20(fp)
 8013ed0:	e0bfff15 	stw	r2,-4(fp)
 8013ed4:	e0bfff17 	ldw	r2,-4(fp)
}
 8013ed8:	e037883a 	mov	sp,fp
 8013edc:	dfc00117 	ldw	ra,4(sp)
 8013ee0:	df000017 	ldw	fp,0(sp)
 8013ee4:	dec00204 	addi	sp,sp,8
 8013ee8:	f800283a 	ret

08013eec <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 8013eec:	defff804 	addi	sp,sp,-32
 8013ef0:	dfc00715 	stw	ra,28(sp)
 8013ef4:	df000615 	stw	fp,24(sp)
 8013ef8:	df000604 	addi	fp,sp,24
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 8013efc:	008200b4 	movhi	r2,2050
 8013f00:	10abba04 	addi	r2,r2,-20760
 8013f04:	1080050b 	ldhu	r2,20(r2)
 8013f08:	10bfffcc 	andi	r2,r2,65535
 8013f0c:	1006917a 	slli	r3,r2,5
 8013f10:	008200b4 	movhi	r2,2050
 8013f14:	10abba04 	addi	r2,r2,-20760
 8013f18:	1080030b 	ldhu	r2,12(r2)
 8013f1c:	10bfffcc 	andi	r2,r2,65535
 8013f20:	1885283a 	div	r2,r3,r2
 8013f24:	e0bffe15 	stw	r2,-8(fp)
    int sector_index;
    int result = -1;
 8013f28:	00bfffc4 	movi	r2,-1
 8013f2c:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8013f30:	e03ffd15 	stw	zero,-12(fp)
 8013f34:	00002d06 	br	8013fec <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 8013f38:	008200b4 	movhi	r2,2050
 8013f3c:	10abba04 	addi	r2,r2,-20760
 8013f40:	10c01317 	ldw	r3,76(r2)
 8013f44:	e0bffd17 	ldw	r2,-12(fp)
 8013f48:	1885883a 	add	r2,r3,r2
 8013f4c:	1009883a 	mov	r4,r2
 8013f50:	d166e417 	ldw	r5,-25712(gp)
 8013f54:	80119bc0 	call	80119bc <Read_Sector_Data>
 8013f58:	1005003a 	cmpeq	r2,r2,zero
 8013f5c:	1000261e 	bne	r2,zero,8013ff8 <find_first_empty_record_in_root_directory+0x10c>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 8013f60:	e03ffb15 	stw	zero,-20(fp)
 8013f64:	00001b06 	br	8013fd4 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 8013f68:	d0a6e617 	ldw	r2,-25704(gp)
 8013f6c:	10800a17 	ldw	r2,40(r2)
 8013f70:	1007883a 	mov	r3,r2
 8013f74:	e0bffb17 	ldw	r2,-20(fp)
 8013f78:	1004917a 	slli	r2,r2,5
 8013f7c:	1885883a 	add	r2,r3,r2
 8013f80:	10800023 	ldbuio	r2,0(r2)
 8013f84:	10803fcc 	andi	r2,r2,255
 8013f88:	e0bffa0d 	sth	r2,-24(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
 8013f8c:	e0bffa0b 	ldhu	r2,-24(fp)
 8013f90:	10803960 	cmpeqi	r2,r2,229
 8013f94:	1000031e 	bne	r2,zero,8013fa4 <find_first_empty_record_in_root_directory+0xb8>
 8013f98:	e0bffa0b 	ldhu	r2,-24(fp)
 8013f9c:	1004c03a 	cmpne	r2,r2,zero
 8013fa0:	1000091e 	bne	r2,zero,8013fc8 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
 8013fa4:	e0bffd17 	ldw	r2,-12(fp)
 8013fa8:	1006913a 	slli	r3,r2,4
 8013fac:	e0bffb17 	ldw	r2,-20(fp)
 8013fb0:	1885883a 	add	r2,r3,r2
 8013fb4:	1004943a 	slli	r2,r2,16
 8013fb8:	e0bffc15 	stw	r2,-16(fp)
                    return result;
 8013fbc:	e0bffc17 	ldw	r2,-16(fp)
 8013fc0:	e0bfff15 	stw	r2,-4(fp)
 8013fc4:	00000e06 	br	8014000 <find_first_empty_record_in_root_directory+0x114>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 8013fc8:	e0bffb17 	ldw	r2,-20(fp)
 8013fcc:	10800044 	addi	r2,r2,1
 8013fd0:	e0bffb15 	stw	r2,-20(fp)
 8013fd4:	e0bffb17 	ldw	r2,-20(fp)
 8013fd8:	10800410 	cmplti	r2,r2,16
 8013fdc:	103fe21e 	bne	r2,zero,8013f68 <find_first_empty_record_in_root_directory+0x7c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8013fe0:	e0bffd17 	ldw	r2,-12(fp)
 8013fe4:	10800044 	addi	r2,r2,1
 8013fe8:	e0bffd15 	stw	r2,-12(fp)
 8013fec:	e0fffd17 	ldw	r3,-12(fp)
 8013ff0:	e0bffe17 	ldw	r2,-8(fp)
 8013ff4:	18bfd016 	blt	r3,r2,8013f38 <find_first_empty_record_in_root_directory+0x4c>
        else
        {
            break;
        }
    }
    return result;
 8013ff8:	e0bffc17 	ldw	r2,-16(fp)
 8013ffc:	e0bfff15 	stw	r2,-4(fp)
 8014000:	e0bfff17 	ldw	r2,-4(fp)
}
 8014004:	e037883a 	mov	sp,fp
 8014008:	dfc00117 	ldw	ra,4(sp)
 801400c:	df000017 	ldw	fp,0(sp)
 8014010:	dec00204 	addi	sp,sp,8
 8014014:	f800283a 	ret

08014018 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
 8014018:	defffa04 	addi	sp,sp,-24
 801401c:	df000515 	stw	fp,20(sp)
 8014020:	df000504 	addi	fp,sp,20
 8014024:	e13ffd15 	stw	r4,-12(fp)
 8014028:	e17ffe15 	stw	r5,-8(fp)
 801402c:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
 8014030:	e03ffb15 	stw	zero,-20(fp)
    
    for(counter = 0; counter < 8; counter++)
 8014034:	e03ffc15 	stw	zero,-16(fp)
 8014038:	00002b06 	br	80140e8 <convert_filename_to_name_extension+0xd0>
    {
        if (filename[local] != '.')
 801403c:	e0bffb17 	ldw	r2,-20(fp)
 8014040:	1007883a 	mov	r3,r2
 8014044:	e0bffd17 	ldw	r2,-12(fp)
 8014048:	1885883a 	add	r2,r3,r2
 801404c:	10800003 	ldbu	r2,0(r2)
 8014050:	10803fcc 	andi	r2,r2,255
 8014054:	1080201c 	xori	r2,r2,128
 8014058:	10bfe004 	addi	r2,r2,-128
 801405c:	10800ba0 	cmpeqi	r2,r2,46
 8014060:	1000181e 	bne	r2,zero,80140c4 <convert_filename_to_name_extension+0xac>
        {
            name[counter] = filename[local];
 8014064:	e0bffc17 	ldw	r2,-16(fp)
 8014068:	1007883a 	mov	r3,r2
 801406c:	e0bffe17 	ldw	r2,-8(fp)
 8014070:	1889883a 	add	r4,r3,r2
 8014074:	e0bffb17 	ldw	r2,-20(fp)
 8014078:	1007883a 	mov	r3,r2
 801407c:	e0bffd17 	ldw	r2,-12(fp)
 8014080:	1885883a 	add	r2,r3,r2
 8014084:	10800003 	ldbu	r2,0(r2)
 8014088:	20800005 	stb	r2,0(r4)
            if (filename[local] != 0) local++;
 801408c:	e0bffb17 	ldw	r2,-20(fp)
 8014090:	1007883a 	mov	r3,r2
 8014094:	e0bffd17 	ldw	r2,-12(fp)
 8014098:	1885883a 	add	r2,r3,r2
 801409c:	10800003 	ldbu	r2,0(r2)
 80140a0:	10803fcc 	andi	r2,r2,255
 80140a4:	1080201c 	xori	r2,r2,128
 80140a8:	10bfe004 	addi	r2,r2,-128
 80140ac:	1005003a 	cmpeq	r2,r2,zero
 80140b0:	10000a1e 	bne	r2,zero,80140dc <convert_filename_to_name_extension+0xc4>
 80140b4:	e0bffb17 	ldw	r2,-20(fp)
 80140b8:	10800044 	addi	r2,r2,1
 80140bc:	e0bffb15 	stw	r2,-20(fp)
 80140c0:	00000606 	br	80140dc <convert_filename_to_name_extension+0xc4>
        }
        else
        {
            name[counter] = ' ';
 80140c4:	e0bffc17 	ldw	r2,-16(fp)
 80140c8:	1007883a 	mov	r3,r2
 80140cc:	e0bffe17 	ldw	r2,-8(fp)
 80140d0:	1887883a 	add	r3,r3,r2
 80140d4:	00800804 	movi	r2,32
 80140d8:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
 80140dc:	e0bffc17 	ldw	r2,-16(fp)
 80140e0:	10800044 	addi	r2,r2,1
 80140e4:	e0bffc15 	stw	r2,-16(fp)
 80140e8:	e0bffc17 	ldw	r2,-16(fp)
 80140ec:	10800210 	cmplti	r2,r2,8
 80140f0:	103fd21e 	bne	r2,zero,801403c <convert_filename_to_name_extension+0x24>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
 80140f4:	e0bffb17 	ldw	r2,-20(fp)
 80140f8:	1007883a 	mov	r3,r2
 80140fc:	e0bffd17 	ldw	r2,-12(fp)
 8014100:	1885883a 	add	r2,r3,r2
 8014104:	10800003 	ldbu	r2,0(r2)
 8014108:	10803fcc 	andi	r2,r2,255
 801410c:	1080201c 	xori	r2,r2,128
 8014110:	10bfe004 	addi	r2,r2,-128
 8014114:	10800b98 	cmpnei	r2,r2,46
 8014118:	1000031e 	bne	r2,zero,8014128 <convert_filename_to_name_extension+0x110>
 801411c:	e0bffb17 	ldw	r2,-20(fp)
 8014120:	10800044 	addi	r2,r2,1
 8014124:	e0bffb15 	stw	r2,-20(fp)
    for(counter = 0; counter < 3; counter++)
 8014128:	e03ffc15 	stw	zero,-16(fp)
 801412c:	00002106 	br	80141b4 <convert_filename_to_name_extension+0x19c>
    {
        if (filename[local] != 0)
 8014130:	e0bffb17 	ldw	r2,-20(fp)
 8014134:	1007883a 	mov	r3,r2
 8014138:	e0bffd17 	ldw	r2,-12(fp)
 801413c:	1885883a 	add	r2,r3,r2
 8014140:	10800003 	ldbu	r2,0(r2)
 8014144:	10803fcc 	andi	r2,r2,255
 8014148:	1080201c 	xori	r2,r2,128
 801414c:	10bfe004 	addi	r2,r2,-128
 8014150:	1005003a 	cmpeq	r2,r2,zero
 8014154:	10000e1e 	bne	r2,zero,8014190 <convert_filename_to_name_extension+0x178>
        {
            extension[counter] = filename[local];
 8014158:	e0bffc17 	ldw	r2,-16(fp)
 801415c:	1007883a 	mov	r3,r2
 8014160:	e0bfff17 	ldw	r2,-4(fp)
 8014164:	1889883a 	add	r4,r3,r2
 8014168:	e0bffb17 	ldw	r2,-20(fp)
 801416c:	1007883a 	mov	r3,r2
 8014170:	e0bffd17 	ldw	r2,-12(fp)
 8014174:	1885883a 	add	r2,r3,r2
 8014178:	10800003 	ldbu	r2,0(r2)
 801417c:	20800005 	stb	r2,0(r4)
            local++;
 8014180:	e0bffb17 	ldw	r2,-20(fp)
 8014184:	10800044 	addi	r2,r2,1
 8014188:	e0bffb15 	stw	r2,-20(fp)
 801418c:	00000606 	br	80141a8 <convert_filename_to_name_extension+0x190>
        }
        else
        {
            extension[counter] = ' ';
 8014190:	e0bffc17 	ldw	r2,-16(fp)
 8014194:	1007883a 	mov	r3,r2
 8014198:	e0bfff17 	ldw	r2,-4(fp)
 801419c:	1887883a 	add	r3,r3,r2
 80141a0:	00800804 	movi	r2,32
 80141a4:	18800005 	stb	r2,0(r3)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
 80141a8:	e0bffc17 	ldw	r2,-16(fp)
 80141ac:	10800044 	addi	r2,r2,1
 80141b0:	e0bffc15 	stw	r2,-16(fp)
 80141b4:	e0bffc17 	ldw	r2,-16(fp)
 80141b8:	108000d0 	cmplti	r2,r2,3
 80141bc:	103fdc1e 	bne	r2,zero,8014130 <convert_filename_to_name_extension+0x118>
        {
            extension[counter] = ' ';
        }
    }

}
 80141c0:	e037883a 	mov	sp,fp
 80141c4:	df000017 	ldw	fp,0(sp)
 80141c8:	dec00104 	addi	sp,sp,4
 80141cc:	f800283a 	ret

080141d0 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 80141d0:	defff304 	addi	sp,sp,-52
 80141d4:	dfc00c15 	stw	ra,48(sp)
 80141d8:	df000b15 	stw	fp,44(sp)
 80141dc:	df000b04 	addi	fp,sp,44
 80141e0:	e13ffb15 	stw	r4,-20(fp)
 80141e4:	e17ffc15 	stw	r5,-16(fp)
 80141e8:	e1bffd15 	stw	r6,-12(fp)
    unsigned int cluster_number;
    bool result = false;
 80141ec:	e03ff915 	stw	zero,-28(fp)
    
    if (find_first_empty_cluster(&cluster_number))
 80141f0:	e13ffa04 	addi	r4,fp,-24
 80141f4:	8013afc0 	call	8013afc <find_first_empty_cluster>
 80141f8:	1005003a 	cmpeq	r2,r2,zero
 80141fc:	1000a31e 	bne	r2,zero,801448c <create_file+0x2bc>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
 8014200:	e0bffd17 	ldw	r2,-12(fp)
 8014204:	10800a17 	ldw	r2,40(r2)
 8014208:	1004c03a 	cmpne	r2,r2,zero
 801420c:	1000031e 	bne	r2,zero,801421c <create_file+0x4c>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
 8014210:	8013eec0 	call	8013eec <find_first_empty_record_in_root_directory>
 8014214:	e0bff815 	stw	r2,-32(fp)
 8014218:	00000506 	br	8014230 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
 801421c:	e0bffd17 	ldw	r2,-12(fp)
 8014220:	1080058b 	ldhu	r2,22(r2)
 8014224:	113fffcc 	andi	r4,r2,65535
 8014228:	8013ca00 	call	8013ca0 <find_first_empty_record_in_a_subdirectory>
 801422c:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
 8014230:	e0bff817 	ldw	r2,-32(fp)
 8014234:	1004803a 	cmplt	r2,r2,zero
 8014238:	1000941e 	bne	r2,zero,801448c <create_file+0x2bc>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
 801423c:	e13ffb17 	ldw	r4,-20(fp)
 8014240:	8012dd80 	call	8012dd8 <get_dir_divider_location>
 8014244:	e0bff615 	stw	r2,-40(fp)
            int last_dir_separator = 0;
 8014248:	e03ff515 	stw	zero,-44(fp)

            // Skip through all directory separators.
            while (location > 0)
 801424c:	00000b06 	br	801427c <create_file+0xac>
            {
                last_dir_separator = last_dir_separator+location+1;
 8014250:	e0fff517 	ldw	r3,-44(fp)
 8014254:	e0bff617 	ldw	r2,-40(fp)
 8014258:	1885883a 	add	r2,r3,r2
 801425c:	10800044 	addi	r2,r2,1
 8014260:	e0bff515 	stw	r2,-44(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
 8014264:	e0bff517 	ldw	r2,-44(fp)
 8014268:	1007883a 	mov	r3,r2
 801426c:	e0bffb17 	ldw	r2,-20(fp)
 8014270:	1889883a 	add	r4,r3,r2
 8014274:	8012dd80 	call	8012dd8 <get_dir_divider_location>
 8014278:	e0bff615 	stw	r2,-40(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
 801427c:	e0bff617 	ldw	r2,-40(fp)
 8014280:	10800048 	cmpgei	r2,r2,1
 8014284:	103ff21e 	bne	r2,zero,8014250 <create_file+0x80>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
 8014288:	e0bff517 	ldw	r2,-44(fp)
 801428c:	1007883a 	mov	r3,r2
 8014290:	e0bffb17 	ldw	r2,-20(fp)
 8014294:	1889883a 	add	r4,r3,r2
 8014298:	e0bffc17 	ldw	r2,-16(fp)
 801429c:	100b883a 	mov	r5,r2
 80142a0:	e0bffc17 	ldw	r2,-16(fp)
 80142a4:	10800204 	addi	r2,r2,8
 80142a8:	100d883a 	mov	r6,r2
 80142ac:	80140180 	call	8014018 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
 80142b0:	e0bffc17 	ldw	r2,-16(fp)
 80142b4:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
 80142b8:	e0bffc17 	ldw	r2,-16(fp)
 80142bc:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
 80142c0:	e0bffc17 	ldw	r2,-16(fp)
 80142c4:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
 80142c8:	e0bffc17 	ldw	r2,-16(fp)
 80142cc:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
 80142d0:	e0bffc17 	ldw	r2,-16(fp)
 80142d4:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
 80142d8:	e0bffc17 	ldw	r2,-16(fp)
 80142dc:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
 80142e0:	e0bffa17 	ldw	r2,-24(fp)
 80142e4:	1007883a 	mov	r3,r2
 80142e8:	e0bffc17 	ldw	r2,-16(fp)
 80142ec:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
 80142f0:	e0bffc17 	ldw	r2,-16(fp)
 80142f4:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
 80142f8:	e0fffa17 	ldw	r3,-24(fp)
 80142fc:	e0bffc17 	ldw	r2,-16(fp)
 8014300:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
 8014304:	e0bffc17 	ldw	r2,-16(fp)
 8014308:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
 801430c:	e0bffc17 	ldw	r2,-16(fp)
 8014310:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
 8014314:	e0bff817 	ldw	r2,-32(fp)
 8014318:	10ffffcc 	andi	r3,r2,65535
 801431c:	e0bffc17 	ldw	r2,-16(fp)
 8014320:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
 8014324:	e0bff817 	ldw	r2,-32(fp)
 8014328:	1005d43a 	srai	r2,r2,16
 801432c:	10bfffcc 	andi	r2,r2,65535
 8014330:	e0bfff15 	stw	r2,-4(fp)
 8014334:	e0ffff17 	ldw	r3,-4(fp)
 8014338:	1804403a 	cmpge	r2,r3,zero
 801433c:	1000031e 	bne	r2,zero,801434c <create_file+0x17c>
 8014340:	e0bfff17 	ldw	r2,-4(fp)
 8014344:	108003c4 	addi	r2,r2,15
 8014348:	e0bfff15 	stw	r2,-4(fp)
 801434c:	e0ffff17 	ldw	r3,-4(fp)
 8014350:	1805d13a 	srai	r2,r3,4
 8014354:	1007883a 	mov	r3,r2
 8014358:	e0bffc17 	ldw	r2,-16(fp)
 801435c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
 8014360:	e0bff817 	ldw	r2,-32(fp)
 8014364:	1005d43a 	srai	r2,r2,16
 8014368:	108003cc 	andi	r2,r2,15
 801436c:	1004917a 	slli	r2,r2,5
 8014370:	1007883a 	mov	r3,r2
 8014374:	e0bffc17 	ldw	r2,-16(fp)
 8014378:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
 801437c:	e0bffd17 	ldw	r2,-12(fp)
 8014380:	1080058b 	ldhu	r2,22(r2)
 8014384:	10ffffcc 	andi	r3,r2,65535
 8014388:	e0bffc17 	ldw	r2,-16(fp)
 801438c:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
 8014390:	e0fffc17 	ldw	r3,-16(fp)
 8014394:	00800044 	movi	r2,1
 8014398:	18800f15 	stw	r2,60(r3)
            file_record->modified = true;
 801439c:	e0fffc17 	ldw	r3,-16(fp)
 80143a0:	00800044 	movi	r2,1
 80143a4:	18800e15 	stw	r2,56(r3)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 80143a8:	e0bffc17 	ldw	r2,-16(fp)
 80143ac:	10800a17 	ldw	r2,40(r2)
 80143b0:	1004c03a 	cmpne	r2,r2,zero
 80143b4:	1000081e 	bne	r2,zero,80143d8 <create_file+0x208>
 80143b8:	008200b4 	movhi	r2,2050
 80143bc:	10abba04 	addi	r2,r2,-20760
 80143c0:	10c01317 	ldw	r3,76(r2)
 80143c4:	e0bffc17 	ldw	r2,-16(fp)
 80143c8:	10800b17 	ldw	r2,44(r2)
 80143cc:	1887883a 	add	r3,r3,r2
 80143d0:	e0fffe15 	stw	r3,-8(fp)
 80143d4:	00001006 	br	8014418 <create_file+0x248>
 80143d8:	008200b4 	movhi	r2,2050
 80143dc:	10abba04 	addi	r2,r2,-20760
 80143e0:	11001417 	ldw	r4,80(r2)
 80143e4:	e0bffc17 	ldw	r2,-16(fp)
 80143e8:	10800a17 	ldw	r2,40(r2)
 80143ec:	10ffff84 	addi	r3,r2,-2
 80143f0:	008200b4 	movhi	r2,2050
 80143f4:	10abba04 	addi	r2,r2,-20760
 80143f8:	10800383 	ldbu	r2,14(r2)
 80143fc:	10803fcc 	andi	r2,r2,255
 8014400:	1885383a 	mul	r2,r3,r2
 8014404:	2087883a 	add	r3,r4,r2
 8014408:	e0bffc17 	ldw	r2,-16(fp)
 801440c:	10800b17 	ldw	r2,44(r2)
 8014410:	1887883a 	add	r3,r3,r2
 8014414:	e0fffe15 	stw	r3,-8(fp)
 8014418:	e0bffe17 	ldw	r2,-8(fp)
 801441c:	e0bff715 	stw	r2,-36(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
 8014420:	e13ff717 	ldw	r4,-36(fp)
 8014424:	d166e417 	ldw	r5,-25712(gp)
 8014428:	80119bc0 	call	80119bc <Read_Sector_Data>
 801442c:	1005003a 	cmpeq	r2,r2,zero
 8014430:	1000161e 	bne	r2,zero,801448c <create_file+0x2bc>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
 8014434:	e0bffc17 	ldw	r2,-16(fp)
 8014438:	10800c0b 	ldhu	r2,48(r2)
 801443c:	113fffcc 	andi	r4,r2,65535
 8014440:	2120001c 	xori	r4,r4,32768
 8014444:	21200004 	addi	r4,r4,-32768
 8014448:	e17ffc17 	ldw	r5,-16(fp)
 801444c:	80120880 	call	8012088 <Write_File_Record_At_Offset>
 8014450:	1005003a 	cmpeq	r2,r2,zero
 8014454:	10000d1e 	bne	r2,zero,801448c <create_file+0x2bc>
                {
                    Save_Modified_Sector();
 8014458:	801196c0 	call	801196c <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
 801445c:	e13ffa17 	ldw	r4,-24(fp)
 8014460:	017fffc4 	movi	r5,-1
 8014464:	01800044 	movi	r6,1
 8014468:	8011b700 	call	8011b70 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
 801446c:	e13ffa17 	ldw	r4,-24(fp)
 8014470:	017fffc4 	movi	r5,-1
 8014474:	000d883a 	mov	r6,zero
 8014478:	8011b700 	call	8011b70 <mark_cluster>
 801447c:	1005003a 	cmpeq	r2,r2,zero
 8014480:	1000021e 	bne	r2,zero,801448c <create_file+0x2bc>
                    {
                        result = true;
 8014484:	00800044 	movi	r2,1
 8014488:	e0bff915 	stw	r2,-28(fp)
                }
            }
        }

    }
    return result;           
 801448c:	e0bff917 	ldw	r2,-28(fp)
}
 8014490:	e037883a 	mov	sp,fp
 8014494:	dfc00117 	ldw	ra,4(sp)
 8014498:	df000017 	ldw	fp,0(sp)
 801449c:	dec00204 	addi	sp,sp,8
 80144a0:	f800283a 	ret

080144a4 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
 80144a4:	defffb04 	addi	sp,sp,-20
 80144a8:	df000415 	stw	fp,16(sp)
 80144ac:	df000404 	addi	fp,sp,16
 80144b0:	e13ffe15 	stw	r4,-8(fp)
 80144b4:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 80144b8:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 80144bc:	e03ffd15 	stw	zero,-12(fp)
 80144c0:	00001606 	br	801451c <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
 80144c4:	e0fffd17 	ldw	r3,-12(fp)
 80144c8:	e0bffe17 	ldw	r2,-8(fp)
 80144cc:	10c5883a 	add	r2,r2,r3
 80144d0:	10800003 	ldbu	r2,0(r2)
 80144d4:	10803fcc 	andi	r2,r2,255
 80144d8:	10800820 	cmpeqi	r2,r2,32
 80144dc:	10000c1e 	bne	r2,zero,8014510 <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
 80144e0:	e0bffc17 	ldw	r2,-16(fp)
 80144e4:	1007883a 	mov	r3,r2
 80144e8:	e0bfff17 	ldw	r2,-4(fp)
 80144ec:	1889883a 	add	r4,r3,r2
 80144f0:	e0fffd17 	ldw	r3,-12(fp)
 80144f4:	e0bffe17 	ldw	r2,-8(fp)
 80144f8:	10c5883a 	add	r2,r2,r3
 80144fc:	10800003 	ldbu	r2,0(r2)
 8014500:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 8014504:	e0bffc17 	ldw	r2,-16(fp)
 8014508:	10800044 	addi	r2,r2,1
 801450c:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 8014510:	e0bffd17 	ldw	r2,-12(fp)
 8014514:	10800044 	addi	r2,r2,1
 8014518:	e0bffd15 	stw	r2,-12(fp)
 801451c:	e0bffd17 	ldw	r2,-12(fp)
 8014520:	10800210 	cmplti	r2,r2,8
 8014524:	103fe71e 	bne	r2,zero,80144c4 <copy_file_record_name_to_string+0x20>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
 8014528:	e0bffe17 	ldw	r2,-8(fp)
 801452c:	10800203 	ldbu	r2,8(r2)
 8014530:	10803fcc 	andi	r2,r2,255
 8014534:	10800820 	cmpeqi	r2,r2,32
 8014538:	1000261e 	bne	r2,zero,80145d4 <copy_file_record_name_to_string+0x130>
	{
		file_name[flength] = '.';
 801453c:	e0bffc17 	ldw	r2,-16(fp)
 8014540:	1007883a 	mov	r3,r2
 8014544:	e0bfff17 	ldw	r2,-4(fp)
 8014548:	1887883a 	add	r3,r3,r2
 801454c:	00800b84 	movi	r2,46
 8014550:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 8014554:	e0bffc17 	ldw	r2,-16(fp)
 8014558:	10800044 	addi	r2,r2,1
 801455c:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++)
 8014560:	e03ffd15 	stw	zero,-12(fp)
 8014564:	00001806 	br	80145c8 <copy_file_record_name_to_string+0x124>
		{
			if (file_record->extension[index] != ' ')
 8014568:	e0fffd17 	ldw	r3,-12(fp)
 801456c:	e0bffe17 	ldw	r2,-8(fp)
 8014570:	1885883a 	add	r2,r3,r2
 8014574:	10800204 	addi	r2,r2,8
 8014578:	10800003 	ldbu	r2,0(r2)
 801457c:	10803fcc 	andi	r2,r2,255
 8014580:	10800820 	cmpeqi	r2,r2,32
 8014584:	10000d1e 	bne	r2,zero,80145bc <copy_file_record_name_to_string+0x118>
			{
				file_name[flength] = file_record->extension[index];
 8014588:	e0bffc17 	ldw	r2,-16(fp)
 801458c:	1007883a 	mov	r3,r2
 8014590:	e0bfff17 	ldw	r2,-4(fp)
 8014594:	1889883a 	add	r4,r3,r2
 8014598:	e0fffd17 	ldw	r3,-12(fp)
 801459c:	e0bffe17 	ldw	r2,-8(fp)
 80145a0:	1885883a 	add	r2,r3,r2
 80145a4:	10800204 	addi	r2,r2,8
 80145a8:	10800003 	ldbu	r2,0(r2)
 80145ac:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 80145b0:	e0bffc17 	ldw	r2,-16(fp)
 80145b4:	10800044 	addi	r2,r2,1
 80145b8:	e0bffc15 	stw	r2,-16(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
 80145bc:	e0bffd17 	ldw	r2,-12(fp)
 80145c0:	10800044 	addi	r2,r2,1
 80145c4:	e0bffd15 	stw	r2,-12(fp)
 80145c8:	e0bffd17 	ldw	r2,-12(fp)
 80145cc:	108000d0 	cmplti	r2,r2,3
 80145d0:	103fe51e 	bne	r2,zero,8014568 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 80145d4:	e0bffc17 	ldw	r2,-16(fp)
 80145d8:	1007883a 	mov	r3,r2
 80145dc:	e0bfff17 	ldw	r2,-4(fp)
 80145e0:	1885883a 	add	r2,r3,r2
 80145e4:	10000005 	stb	zero,0(r2)
}
 80145e8:	e037883a 	mov	sp,fp
 80145ec:	df000017 	ldw	fp,0(sp)
 80145f0:	dec00104 	addi	sp,sp,4
 80145f4:	f800283a 	ret

080145f8 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
 80145f8:	defffc04 	addi	sp,sp,-16
 80145fc:	dfc00315 	stw	ra,12(sp)
 8014600:	df000215 	stw	fp,8(sp)
 8014604:	df000204 	addi	fp,sp,8
 8014608:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
 801460c:	e13fff17 	ldw	r4,-4(fp)
 8014610:	014200b4 	movhi	r5,2050
 8014614:	2964c704 	addi	r5,r5,-27876
 8014618:	801603c0 	call	801603c <alt_find_dev>
 801461c:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
 8014620:	e0bffe17 	ldw	r2,-8(fp)
 8014624:	1005003a 	cmpeq	r2,r2,zero
 8014628:	10001e1e 	bne	r2,zero,80146a4 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 801462c:	e0bffe17 	ldw	r2,-8(fp)
 8014630:	10800a17 	ldw	r2,40(r2)
 8014634:	10808d04 	addi	r2,r2,564
 8014638:	d0a6de15 	stw	r2,-25736(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 801463c:	e0bffe17 	ldw	r2,-8(fp)
 8014640:	10800a17 	ldw	r2,40(r2)
 8014644:	10808904 	addi	r2,r2,548
 8014648:	d0a6df15 	stw	r2,-25732(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 801464c:	e0bffe17 	ldw	r2,-8(fp)
 8014650:	10800a17 	ldw	r2,40(r2)
 8014654:	10808404 	addi	r2,r2,528
 8014658:	d0a6e015 	stw	r2,-25728(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 801465c:	e0bffe17 	ldw	r2,-8(fp)
 8014660:	10800a17 	ldw	r2,40(r2)
 8014664:	10808c04 	addi	r2,r2,560
 8014668:	d0a6e115 	stw	r2,-25724(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 801466c:	e0bffe17 	ldw	r2,-8(fp)
 8014670:	10800a17 	ldw	r2,40(r2)
 8014674:	10808b04 	addi	r2,r2,556
 8014678:	d0a6e215 	stw	r2,-25720(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 801467c:	e0bffe17 	ldw	r2,-8(fp)
 8014680:	10800a17 	ldw	r2,40(r2)
 8014684:	d0a6e315 	stw	r2,-25716(gp)
		device_pointer = dev;
 8014688:	e0bffe17 	ldw	r2,-8(fp)
 801468c:	d0a6e615 	stw	r2,-25704(gp)
		initialized = false;
 8014690:	d026dc15 	stw	zero,-25744(gp)
		is_sd_card_formated_as_FAT16 = false;
 8014694:	d026dd15 	stw	zero,-25740(gp)
		search_data.valid = false;
 8014698:	008200b4 	movhi	r2,2050
 801469c:	10abb504 	addi	r2,r2,-20780
 80146a0:	10000415 	stw	zero,16(r2)
	}
	return dev;
 80146a4:	e0bffe17 	ldw	r2,-8(fp)
}
 80146a8:	e037883a 	mov	sp,fp
 80146ac:	dfc00117 	ldw	ra,4(sp)
 80146b0:	df000017 	ldw	fp,0(sp)
 80146b4:	dec00204 	addi	sp,sp,8
 80146b8:	f800283a 	ret

080146bc <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 80146bc:	defffd04 	addi	sp,sp,-12
 80146c0:	df000215 	stw	fp,8(sp)
 80146c4:	df000204 	addi	fp,sp,8
    bool result = false;
 80146c8:	e03fff15 	stw	zero,-4(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
 80146cc:	d0a6e617 	ldw	r2,-25704(gp)
 80146d0:	1005003a 	cmpeq	r2,r2,zero
 80146d4:	1000081e 	bne	r2,zero,80146f8 <alt_up_sd_card_is_Present+0x3c>
 80146d8:	d0a6de17 	ldw	r2,-25736(gp)
 80146dc:	1080002b 	ldhuio	r2,0(r2)
 80146e0:	1080008c 	andi	r2,r2,2
 80146e4:	1005003a 	cmpeq	r2,r2,zero
 80146e8:	1000031e 	bne	r2,zero,80146f8 <alt_up_sd_card_is_Present+0x3c>
    {
        result = true;
 80146ec:	00800044 	movi	r2,1
 80146f0:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
 80146f4:	00001e06 	br	8014770 <alt_up_sd_card_is_Present+0xb4>
    {
        result = true;
    }
	else if (initialized == true)
 80146f8:	d0a6dc17 	ldw	r2,-25744(gp)
 80146fc:	10800058 	cmpnei	r2,r2,1
 8014700:	10001b1e 	bne	r2,zero,8014770 <alt_up_sd_card_is_Present+0xb4>
	{
		int index;

		initialized = false;
 8014704:	d026dc15 	stw	zero,-25744(gp)
		search_data.valid = false;
 8014708:	008200b4 	movhi	r2,2050
 801470c:	10abb504 	addi	r2,r2,-20780
 8014710:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 8014714:	d026dd15 	stw	zero,-25740(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
 8014718:	e03ffe15 	stw	zero,-8(fp)
 801471c:	00001106 	br	8014764 <alt_up_sd_card_is_Present+0xa8>
		{
			active_files[index].in_use = false;
 8014720:	e0bffe17 	ldw	r2,-8(fp)
 8014724:	00c200b4 	movhi	r3,2050
 8014728:	18ebcf04 	addi	r3,r3,-20676
 801472c:	100491ba 	slli	r2,r2,6
 8014730:	10c5883a 	add	r2,r2,r3
 8014734:	10800f04 	addi	r2,r2,60
 8014738:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 801473c:	e0bffe17 	ldw	r2,-8(fp)
 8014740:	00c200b4 	movhi	r3,2050
 8014744:	18ebcf04 	addi	r3,r3,-20676
 8014748:	100491ba 	slli	r2,r2,6
 801474c:	10c5883a 	add	r2,r2,r3
 8014750:	10800e04 	addi	r2,r2,56
 8014754:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
 8014758:	e0bffe17 	ldw	r2,-8(fp)
 801475c:	10800044 	addi	r2,r2,1
 8014760:	e0bffe15 	stw	r2,-8(fp)
 8014764:	e0bffe17 	ldw	r2,-8(fp)
 8014768:	10800510 	cmplti	r2,r2,20
 801476c:	103fec1e 	bne	r2,zero,8014720 <alt_up_sd_card_is_Present+0x64>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
 8014770:	e0bfff17 	ldw	r2,-4(fp)
}
 8014774:	e037883a 	mov	sp,fp
 8014778:	df000017 	ldw	fp,0(sp)
 801477c:	dec00104 	addi	sp,sp,4
 8014780:	f800283a 	ret

08014784 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 8014784:	defffd04 	addi	sp,sp,-12
 8014788:	dfc00215 	stw	ra,8(sp)
 801478c:	df000115 	stw	fp,4(sp)
 8014790:	df000104 	addi	fp,sp,4
	bool result = false;
 8014794:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
 8014798:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 801479c:	1005003a 	cmpeq	r2,r2,zero
 80147a0:	10000d1e 	bne	r2,zero,80147d8 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
 80147a4:	d0a6dc17 	ldw	r2,-25744(gp)
 80147a8:	1004c03a 	cmpne	r2,r2,zero
 80147ac:	1000071e 	bne	r2,zero,80147cc <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 80147b0:	80129800 	call	8012980 <Look_for_FAT16>
 80147b4:	d0a6dd15 	stw	r2,-25740(gp)
			initialized = is_sd_card_formated_as_FAT16;
 80147b8:	d0a6dd17 	ldw	r2,-25740(gp)
 80147bc:	d0a6dc15 	stw	r2,-25744(gp)
			search_data.valid = false;
 80147c0:	008200b4 	movhi	r2,2050
 80147c4:	10abb504 	addi	r2,r2,-20780
 80147c8:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 80147cc:	d0a6dd17 	ldw	r2,-25740(gp)
 80147d0:	e0bfff15 	stw	r2,-4(fp)
 80147d4:	00000206 	br	80147e0 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
 80147d8:	d026dc15 	stw	zero,-25744(gp)
		is_sd_card_formated_as_FAT16 = false;
 80147dc:	d026dd15 	stw	zero,-25740(gp)
	}

	return result;
 80147e0:	e0bfff17 	ldw	r2,-4(fp)
}
 80147e4:	e037883a 	mov	sp,fp
 80147e8:	dfc00117 	ldw	ra,4(sp)
 80147ec:	df000017 	ldw	fp,0(sp)
 80147f0:	dec00204 	addi	sp,sp,8
 80147f4:	f800283a 	ret

080147f8 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 80147f8:	deffea04 	addi	sp,sp,-88
 80147fc:	dfc01515 	stw	ra,84(sp)
 8014800:	df001415 	stw	fp,80(sp)
 8014804:	df001404 	addi	fp,sp,80
 8014808:	e13ffe15 	stw	r4,-8(fp)
 801480c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 8014810:	00800084 	movi	r2,2
 8014814:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8014818:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 801481c:	1005003a 	cmpeq	r2,r2,zero
 8014820:	1000241e 	bne	r2,zero,80148b4 <alt_up_sd_card_find_first+0xbc>
 8014824:	d0a6dd17 	ldw	r2,-25740(gp)
 8014828:	1005003a 	cmpeq	r2,r2,zero
 801482c:	1000211e 	bne	r2,zero,80148b4 <alt_up_sd_card_find_first+0xbc>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
 8014830:	e17fed04 	addi	r5,fp,-76
 8014834:	e1bfee04 	addi	r6,fp,-72
 8014838:	e13ffe17 	ldw	r4,-8(fp)
 801483c:	80131840 	call	8013184 <get_home_directory_cluster_for_file>
 8014840:	1005003a 	cmpeq	r2,r2,zero
 8014844:	1000191e 	bne	r2,zero,80148ac <alt_up_sd_card_find_first+0xb4>
		{
			search_data.directory_root_cluster = home_directory_cluster;
 8014848:	e0bfed17 	ldw	r2,-76(fp)
 801484c:	1007883a 	mov	r3,r2
 8014850:	008200b4 	movhi	r2,2050
 8014854:	10abb504 	addi	r2,r2,-20780
 8014858:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 801485c:	e0bfed17 	ldw	r2,-76(fp)
 8014860:	1007883a 	mov	r3,r2
 8014864:	008200b4 	movhi	r2,2050
 8014868:	10abb504 	addi	r2,r2,-20780
 801486c:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 8014870:	008200b4 	movhi	r2,2050
 8014874:	10abb504 	addi	r2,r2,-20780
 8014878:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 801487c:	00c200b4 	movhi	r3,2050
 8014880:	18ebb504 	addi	r3,r3,-20780
 8014884:	00bfffc4 	movi	r2,-1
 8014888:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 801488c:	00c200b4 	movhi	r3,2050
 8014890:	18ebb504 	addi	r3,r3,-20780
 8014894:	00800044 	movi	r2,1
 8014898:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 801489c:	e13fff17 	ldw	r4,-4(fp)
 80148a0:	80148cc0 	call	80148cc <alt_up_sd_card_find_next>
 80148a4:	e0bfec0d 	sth	r2,-80(fp)
 80148a8:	00000206 	br	80148b4 <alt_up_sd_card_find_first+0xbc>
		}
		else
		{
			result = 1;
 80148ac:	00800044 	movi	r2,1
 80148b0:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 80148b4:	e0bfec0f 	ldh	r2,-80(fp)
}
 80148b8:	e037883a 	mov	sp,fp
 80148bc:	dfc00117 	ldw	ra,4(sp)
 80148c0:	df000017 	ldw	fp,0(sp)
 80148c4:	dec00204 	addi	sp,sp,8
 80148c8:	f800283a 	ret

080148cc <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 80148cc:	deffe404 	addi	sp,sp,-112
 80148d0:	dfc01b15 	stw	ra,108(sp)
 80148d4:	df001a15 	stw	fp,104(sp)
 80148d8:	df001a04 	addi	fp,sp,104
 80148dc:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 80148e0:	00800084 	movi	r2,2
 80148e4:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 80148e8:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 80148ec:	1005003a 	cmpeq	r2,r2,zero
 80148f0:	1000da1e 	bne	r2,zero,8014c5c <alt_up_sd_card_find_next+0x390>
 80148f4:	d0a6dd17 	ldw	r2,-25740(gp)
 80148f8:	1005003a 	cmpeq	r2,r2,zero
 80148fc:	1000d71e 	bne	r2,zero,8014c5c <alt_up_sd_card_find_next+0x390>
	{
		if (search_data.valid)
 8014900:	008200b4 	movhi	r2,2050
 8014904:	10abb504 	addi	r2,r2,-20780
 8014908:	10800417 	ldw	r2,16(r2)
 801490c:	1005003a 	cmpeq	r2,r2,zero
 8014910:	1000d01e 	bne	r2,zero,8014c54 <alt_up_sd_card_find_next+0x388>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 8014914:	008200b4 	movhi	r2,2050
 8014918:	10abb504 	addi	r2,r2,-20780
 801491c:	10800117 	ldw	r2,4(r2)
 8014920:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0)
 8014924:	e0bfec17 	ldw	r2,-80(fp)
 8014928:	1004c03a 	cmpne	r2,r2,zero
 801492c:	1000511e 	bne	r2,zero,8014a74 <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 8014930:	008200b4 	movhi	r2,2050
 8014934:	10abba04 	addi	r2,r2,-20760
 8014938:	1080050b 	ldhu	r2,20(r2)
 801493c:	10bfffcc 	andi	r2,r2,65535
 8014940:	1006917a 	slli	r3,r2,5
 8014944:	008200b4 	movhi	r2,2050
 8014948:	10abba04 	addi	r2,r2,-20760
 801494c:	1080030b 	ldhu	r2,12(r2)
 8014950:	10bfffcc 	andi	r2,r2,65535
 8014954:	1885283a 	div	r2,r3,r2
 8014958:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 801495c:	008200b4 	movhi	r2,2050
 8014960:	10abb504 	addi	r2,r2,-20780
 8014964:	10800217 	ldw	r2,8(r2)
 8014968:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector+1;
 801496c:	008200b4 	movhi	r2,2050
 8014970:	10abb504 	addi	r2,r2,-20780
 8014974:	1080030b 	ldhu	r2,12(r2)
 8014978:	10bfffcc 	andi	r2,r2,65535
 801497c:	10a0001c 	xori	r2,r2,32768
 8014980:	10a00004 	addi	r2,r2,-32768
 8014984:	10800044 	addi	r2,r2,1
 8014988:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 801498c:	00003306 	br	8014a5c <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 8014990:	008200b4 	movhi	r2,2050
 8014994:	10abba04 	addi	r2,r2,-20760
 8014998:	10c01317 	ldw	r3,76(r2)
 801499c:	e0bfea17 	ldw	r2,-88(fp)
 80149a0:	1885883a 	add	r2,r3,r2
 80149a4:	1009883a 	mov	r4,r2
 80149a8:	d166e417 	ldw	r5,-25712(gp)
 80149ac:	80119bc0 	call	80119bc <Read_Sector_Data>
 80149b0:	1005003a 	cmpeq	r2,r2,zero
 80149b4:	10002c1e 	bne	r2,zero,8014a68 <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 80149b8:	00002106 	br	8014a40 <alt_up_sd_card_find_next+0x174>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
 80149bc:	e0bfe917 	ldw	r2,-92(fp)
 80149c0:	1008917a 	slli	r4,r2,5
 80149c4:	e1ffea17 	ldw	r7,-88(fp)
 80149c8:	e17fee04 	addi	r5,fp,-72
 80149cc:	000d883a 	mov	r6,zero
 80149d0:	8011e040 	call	8011e04 <Read_File_Record_At_Offset>
 80149d4:	1005003a 	cmpeq	r2,r2,zero
 80149d8:	1000161e 	bne	r2,zero,8014a34 <alt_up_sd_card_find_next+0x168>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 80149dc:	e0bfee03 	ldbu	r2,-72(fp)
 80149e0:	10803fcc 	andi	r2,r2,255
 80149e4:	1005003a 	cmpeq	r2,r2,zero
 80149e8:	1000121e 	bne	r2,zero,8014a34 <alt_up_sd_card_find_next+0x168>
 80149ec:	e0bfee03 	ldbu	r2,-72(fp)
 80149f0:	10803fcc 	andi	r2,r2,255
 80149f4:	10803960 	cmpeqi	r2,r2,229
 80149f8:	10000e1e 	bne	r2,zero,8014a34 <alt_up_sd_card_find_next+0x168>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
 80149fc:	e0bfe917 	ldw	r2,-92(fp)
 8014a00:	1007883a 	mov	r3,r2
 8014a04:	008200b4 	movhi	r2,2050
 8014a08:	10abb504 	addi	r2,r2,-20780
 8014a0c:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
 8014a10:	e0ffea17 	ldw	r3,-88(fp)
 8014a14:	008200b4 	movhi	r2,2050
 8014a18:	10abb504 	addi	r2,r2,-20780
 8014a1c:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
 8014a20:	e13fee04 	addi	r4,fp,-72
 8014a24:	e17ffe17 	ldw	r5,-8(fp)
 8014a28:	80144a40 	call	80144a4 <copy_file_record_name_to_string>
									return 0;
 8014a2c:	e03fff15 	stw	zero,-4(fp)
 8014a30:	00008c06 	br	8014c64 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 8014a34:	e0bfe917 	ldw	r2,-92(fp)
 8014a38:	10800044 	addi	r2,r2,1
 8014a3c:	e0bfe915 	stw	r2,-92(fp)
 8014a40:	e0bfe917 	ldw	r2,-92(fp)
 8014a44:	10800410 	cmplti	r2,r2,16
 8014a48:	103fdc1e 	bne	r2,zero,80149bc <alt_up_sd_card_find_next+0xf0>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 8014a4c:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 8014a50:	e0bfea17 	ldw	r2,-88(fp)
 8014a54:	10800044 	addi	r2,r2,1
 8014a58:	e0bfea15 	stw	r2,-88(fp)
 8014a5c:	e0ffea17 	ldw	r3,-88(fp)
 8014a60:	e0bfeb17 	ldw	r2,-84(fp)
 8014a64:	18bfca16 	blt	r3,r2,8014990 <alt_up_sd_card_find_next+0xc4>
					else
					{
						break;
					}
				}
				result = -1;
 8014a68:	00bfffc4 	movi	r2,-1
 8014a6c:	e0bfed0d 	sth	r2,-76(fp)
 8014a70:	00007a06 	br	8014c5c <alt_up_sd_card_find_next+0x390>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
 8014a74:	008200b4 	movhi	r2,2050
 8014a78:	10abb504 	addi	r2,r2,-20780
 8014a7c:	1080030b 	ldhu	r2,12(r2)
 8014a80:	10bfffcc 	andi	r2,r2,65535
 8014a84:	10a0001c 	xori	r2,r2,32768
 8014a88:	10a00004 	addi	r2,r2,-32768
 8014a8c:	10800044 	addi	r2,r2,1
 8014a90:	e0bfe815 	stw	r2,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 8014a94:	e0bfec17 	ldw	r2,-80(fp)
 8014a98:	10ffff84 	addi	r3,r2,-2
 8014a9c:	008200b4 	movhi	r2,2050
 8014aa0:	10abba04 	addi	r2,r2,-20760
 8014aa4:	10800383 	ldbu	r2,14(r2)
 8014aa8:	10803fcc 	andi	r2,r2,255
 8014aac:	1885383a 	mul	r2,r3,r2
 8014ab0:	1007883a 	mov	r3,r2
 8014ab4:	008200b4 	movhi	r2,2050
 8014ab8:	10abba04 	addi	r2,r2,-20760
 8014abc:	10801417 	ldw	r2,80(r2)
 8014ac0:	1885883a 	add	r2,r3,r2
 8014ac4:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 8014ac8:	008200b4 	movhi	r2,2050
 8014acc:	10abb504 	addi	r2,r2,-20780
 8014ad0:	10800217 	ldw	r2,8(r2)
 8014ad4:	e0bfe615 	stw	r2,-104(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8014ad8:	00003406 	br	8014bac <alt_up_sd_card_find_next+0x2e0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8014adc:	e0ffe617 	ldw	r3,-104(fp)
 8014ae0:	e0bfe717 	ldw	r2,-100(fp)
 8014ae4:	1889883a 	add	r4,r3,r2
 8014ae8:	d166e417 	ldw	r5,-25712(gp)
 8014aec:	80119bc0 	call	80119bc <Read_Sector_Data>
 8014af0:	1005003a 	cmpeq	r2,r2,zero
 8014af4:	1000331e 	bne	r2,zero,8014bc4 <alt_up_sd_card_find_next+0x2f8>
						{        
							for (; file_counter < 16; file_counter++)
 8014af8:	00002506 	br	8014b90 <alt_up_sd_card_find_next+0x2c4>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
 8014afc:	e0bfe817 	ldw	r2,-96(fp)
 8014b00:	1008917a 	slli	r4,r2,5
 8014b04:	e1bfec17 	ldw	r6,-80(fp)
 8014b08:	e1ffe617 	ldw	r7,-104(fp)
 8014b0c:	e17fee04 	addi	r5,fp,-72
 8014b10:	8011e040 	call	8011e04 <Read_File_Record_At_Offset>
 8014b14:	1005003a 	cmpeq	r2,r2,zero
 8014b18:	10001a1e 	bne	r2,zero,8014b84 <alt_up_sd_card_find_next+0x2b8>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 8014b1c:	e0bfee03 	ldbu	r2,-72(fp)
 8014b20:	10803fcc 	andi	r2,r2,255
 8014b24:	1005003a 	cmpeq	r2,r2,zero
 8014b28:	1000161e 	bne	r2,zero,8014b84 <alt_up_sd_card_find_next+0x2b8>
 8014b2c:	e0bfee03 	ldbu	r2,-72(fp)
 8014b30:	10803fcc 	andi	r2,r2,255
 8014b34:	10803960 	cmpeqi	r2,r2,229
 8014b38:	1000121e 	bne	r2,zero,8014b84 <alt_up_sd_card_find_next+0x2b8>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
 8014b3c:	e0ffec17 	ldw	r3,-80(fp)
 8014b40:	008200b4 	movhi	r2,2050
 8014b44:	10abb504 	addi	r2,r2,-20780
 8014b48:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
 8014b4c:	e0bfe817 	ldw	r2,-96(fp)
 8014b50:	1007883a 	mov	r3,r2
 8014b54:	008200b4 	movhi	r2,2050
 8014b58:	10abb504 	addi	r2,r2,-20780
 8014b5c:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
 8014b60:	e0ffe617 	ldw	r3,-104(fp)
 8014b64:	008200b4 	movhi	r2,2050
 8014b68:	10abb504 	addi	r2,r2,-20780
 8014b6c:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
 8014b70:	e13fee04 	addi	r4,fp,-72
 8014b74:	e17ffe17 	ldw	r5,-8(fp)
 8014b78:	80144a40 	call	80144a4 <copy_file_record_name_to_string>
										return 0;
 8014b7c:	e03fff15 	stw	zero,-4(fp)
 8014b80:	00003806 	br	8014c64 <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
 8014b84:	e0bfe817 	ldw	r2,-96(fp)
 8014b88:	10800044 	addi	r2,r2,1
 8014b8c:	e0bfe815 	stw	r2,-96(fp)
 8014b90:	e0bfe817 	ldw	r2,-96(fp)
 8014b94:	10800410 	cmplti	r2,r2,16
 8014b98:	103fd81e 	bne	r2,zero,8014afc <alt_up_sd_card_find_next+0x230>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 8014b9c:	e03fe815 	stw	zero,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8014ba0:	e0bfe617 	ldw	r2,-104(fp)
 8014ba4:	10800044 	addi	r2,r2,1
 8014ba8:	e0bfe615 	stw	r2,-104(fp)
 8014bac:	008200b4 	movhi	r2,2050
 8014bb0:	10abba04 	addi	r2,r2,-20760
 8014bb4:	10800383 	ldbu	r2,14(r2)
 8014bb8:	10c03fcc 	andi	r3,r2,255
 8014bbc:	e0bfe617 	ldw	r2,-104(fp)
 8014bc0:	10ffc616 	blt	r2,r3,8014adc <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
 8014bc4:	008200b4 	movhi	r2,2050
 8014bc8:	10abba04 	addi	r2,r2,-20760
 8014bcc:	10800383 	ldbu	r2,14(r2)
 8014bd0:	10c03fcc 	andi	r3,r2,255
 8014bd4:	e0bfe617 	ldw	r2,-104(fp)
 8014bd8:	10c01a16 	blt	r2,r3,8014c44 <alt_up_sd_card_find_next+0x378>
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
 8014bdc:	e13fec17 	ldw	r4,-80(fp)
 8014be0:	e17fed84 	addi	r5,fp,-74
 8014be4:	8011ab80 	call	8011ab8 <get_cluster_flag>
 8014be8:	1005003a 	cmpeq	r2,r2,zero
 8014bec:	1000131e 	bne	r2,zero,8014c3c <alt_up_sd_card_find_next+0x370>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 8014bf0:	e0bfed8b 	ldhu	r2,-74(fp)
 8014bf4:	10bfffcc 	andi	r2,r2,65535
 8014bf8:	10a0001c 	xori	r2,r2,32768
 8014bfc:	10a00004 	addi	r2,r2,-32768
 8014c00:	10fffe0c 	andi	r3,r2,65528
 8014c04:	00bffe14 	movui	r2,65528
 8014c08:	1880051e 	bne	r3,r2,8014c20 <alt_up_sd_card_find_next+0x354>
							{
								result = -1;
 8014c0c:	00bfffc4 	movi	r2,-1
 8014c10:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 8014c14:	008200b4 	movhi	r2,2050
 8014c18:	10abb504 	addi	r2,r2,-20780
 8014c1c:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 8014c20:	e0bfed8b 	ldhu	r2,-74(fp)
 8014c24:	10bfffcc 	andi	r2,r2,65535
 8014c28:	10a0001c 	xori	r2,r2,32768
 8014c2c:	10a00004 	addi	r2,r2,-32768
 8014c30:	10bffe0c 	andi	r2,r2,65528
 8014c34:	e0bfec15 	stw	r2,-80(fp)
 8014c38:	00000206 	br	8014c44 <alt_up_sd_card_find_next+0x378>
						}
						else
						{
							// Error encountered.                 
							result = -1;
 8014c3c:	00bfffc4 	movi	r2,-1
 8014c40:	e0bfed0d 	sth	r2,-76(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
 8014c44:	e0ffec17 	ldw	r3,-80(fp)
 8014c48:	00bffdd4 	movui	r2,65527
 8014c4c:	10ff910e 	bge	r2,r3,8014a94 <alt_up_sd_card_find_next+0x1c8>
 8014c50:	00000206 	br	8014c5c <alt_up_sd_card_find_next+0x390>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
 8014c54:	008000c4 	movi	r2,3
 8014c58:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 8014c5c:	e0bfed0f 	ldh	r2,-76(fp)
 8014c60:	e0bfff15 	stw	r2,-4(fp)
 8014c64:	e0bfff17 	ldw	r2,-4(fp)
}
 8014c68:	e037883a 	mov	sp,fp
 8014c6c:	dfc00117 	ldw	ra,4(sp)
 8014c70:	df000017 	ldw	fp,0(sp)
 8014c74:	dec00204 	addi	sp,sp,8
 8014c78:	f800283a 	ret

08014c7c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 8014c7c:	deffe804 	addi	sp,sp,-96
 8014c80:	dfc01715 	stw	ra,92(sp)
 8014c84:	df001615 	stw	fp,88(sp)
 8014c88:	df001604 	addi	fp,sp,88
 8014c8c:	e13ffd15 	stw	r4,-12(fp)
 8014c90:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 8014c94:	00bfffc4 	movi	r2,-1
 8014c98:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8014c9c:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 8014ca0:	1005003a 	cmpeq	r2,r2,zero
 8014ca4:	1000d71e 	bne	r2,zero,8015004 <alt_up_sd_card_fopen+0x388>
 8014ca8:	d0a6dd17 	ldw	r2,-25740(gp)
 8014cac:	1005003a 	cmpeq	r2,r2,zero
 8014cb0:	1000d41e 	bne	r2,zero,8015004 <alt_up_sd_card_fopen+0x388>
	{
        unsigned int home_directory_cluster = 0;
 8014cb4:	e03fec15 	stw	zero,-80(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
 8014cb8:	e13ffd17 	ldw	r4,-12(fp)
 8014cbc:	8012a780 	call	8012a78 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
 8014cc0:	e13ffd17 	ldw	r4,-12(fp)
 8014cc4:	8012b480 	call	8012b48 <check_file_name_for_FAT16_compliance>
 8014cc8:	1005003a 	cmpeq	r2,r2,zero
 8014ccc:	1000cd1e 	bne	r2,zero,8015004 <alt_up_sd_card_fopen+0x388>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
 8014cd0:	e17fec04 	addi	r5,fp,-80
 8014cd4:	e1bfed04 	addi	r6,fp,-76
 8014cd8:	e13ffd17 	ldw	r4,-12(fp)
 8014cdc:	80131840 	call	8013184 <get_home_directory_cluster_for_file>
 8014ce0:	1004c03a 	cmpne	r2,r2,zero
 8014ce4:	1000031e 	bne	r2,zero,8014cf4 <alt_up_sd_card_fopen+0x78>
            {
                return file_record_index;
 8014ce8:	e0bfeb0f 	ldh	r2,-84(fp)
 8014cec:	e0bfff15 	stw	r2,-4(fp)
 8014cf0:	0000c606 	br	801500c <alt_up_sd_card_fopen+0x390>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 8014cf4:	e03fea15 	stw	zero,-88(fp)
 8014cf8:	00000f06 	br	8014d38 <alt_up_sd_card_fopen+0xbc>
    		{
    			if (active_files[index].in_use == false)
 8014cfc:	e0bfea17 	ldw	r2,-88(fp)
 8014d00:	00c200b4 	movhi	r3,2050
 8014d04:	18ebcf04 	addi	r3,r3,-20676
 8014d08:	100491ba 	slli	r2,r2,6
 8014d0c:	10c5883a 	add	r2,r2,r3
 8014d10:	10800f04 	addi	r2,r2,60
 8014d14:	10800017 	ldw	r2,0(r2)
 8014d18:	1004c03a 	cmpne	r2,r2,zero
 8014d1c:	1000031e 	bne	r2,zero,8014d2c <alt_up_sd_card_fopen+0xb0>
    			{
    				file_record_index = index;
 8014d20:	e0bfea17 	ldw	r2,-88(fp)
 8014d24:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
 8014d28:	00000606 	br	8014d44 <alt_up_sd_card_fopen+0xc8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 8014d2c:	e0bfea17 	ldw	r2,-88(fp)
 8014d30:	10800044 	addi	r2,r2,1
 8014d34:	e0bfea15 	stw	r2,-88(fp)
 8014d38:	e0bfea17 	ldw	r2,-88(fp)
 8014d3c:	10800510 	cmplti	r2,r2,20
 8014d40:	103fee1e 	bne	r2,zero,8014cfc <alt_up_sd_card_fopen+0x80>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
 8014d44:	e0bfeb0f 	ldh	r2,-84(fp)
 8014d48:	1004803a 	cmplt	r2,r2,zero
 8014d4c:	1000ad1e 	bne	r2,zero,8015004 <alt_up_sd_card_fopen+0x388>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
 8014d50:	e0bfec17 	ldw	r2,-80(fp)
 8014d54:	1009883a 	mov	r4,r2
 8014d58:	e0bfeb0f 	ldh	r2,-84(fp)
 8014d5c:	100491ba 	slli	r2,r2,6
 8014d60:	1007883a 	mov	r3,r2
 8014d64:	008200b4 	movhi	r2,2050
 8014d68:	10abcf04 	addi	r2,r2,-20676
 8014d6c:	188d883a 	add	r6,r3,r2
 8014d70:	e17ffd17 	ldw	r5,-12(fp)
 8014d74:	80136980 	call	8013698 <find_file_in_directory>
 8014d78:	1005003a 	cmpeq	r2,r2,zero
 8014d7c:	10007d1e 	bne	r2,zero,8014f74 <alt_up_sd_card_fopen+0x2f8>
                {
                    if (create)
 8014d80:	e0bffe17 	ldw	r2,-8(fp)
 8014d84:	1005003a 	cmpeq	r2,r2,zero
 8014d88:	1000031e 	bne	r2,zero,8014d98 <alt_up_sd_card_fopen+0x11c>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
 8014d8c:	00bfffc4 	movi	r2,-1
 8014d90:	e0bfff15 	stw	r2,-4(fp)
 8014d94:	00009d06 	br	801500c <alt_up_sd_card_fopen+0x390>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
 8014d98:	e17feb0f 	ldh	r5,-84(fp)
 8014d9c:	e0bfeb0f 	ldh	r2,-84(fp)
 8014da0:	00c200b4 	movhi	r3,2050
 8014da4:	18ebcf04 	addi	r3,r3,-20676
 8014da8:	100491ba 	slli	r2,r2,6
 8014dac:	10c5883a 	add	r2,r2,r3
 8014db0:	10800504 	addi	r2,r2,20
 8014db4:	1080008b 	ldhu	r2,2(r2)
 8014db8:	113fffcc 	andi	r4,r2,65535
 8014dbc:	00c200b4 	movhi	r3,2050
 8014dc0:	18ebcf04 	addi	r3,r3,-20676
 8014dc4:	280491ba 	slli	r2,r5,6
 8014dc8:	10c5883a 	add	r2,r2,r3
 8014dcc:	10800704 	addi	r2,r2,28
 8014dd0:	11000015 	stw	r4,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
 8014dd4:	e0bfeb0f 	ldh	r2,-84(fp)
 8014dd8:	00c200b4 	movhi	r3,2050
 8014ddc:	18ebcf04 	addi	r3,r3,-20676
 8014de0:	100491ba 	slli	r2,r2,6
 8014de4:	10c5883a 	add	r2,r2,r3
 8014de8:	10800804 	addi	r2,r2,32
 8014dec:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
 8014df0:	e0bfeb0f 	ldh	r2,-84(fp)
 8014df4:	00c200b4 	movhi	r3,2050
 8014df8:	18ebcf04 	addi	r3,r3,-20676
 8014dfc:	100491ba 	slli	r2,r2,6
 8014e00:	10c5883a 	add	r2,r2,r3
 8014e04:	10800904 	addi	r2,r2,36
 8014e08:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
 8014e0c:	e0bfeb0f 	ldh	r2,-84(fp)
 8014e10:	00c200b4 	movhi	r3,2050
 8014e14:	18ebcf04 	addi	r3,r3,-20676
 8014e18:	100491ba 	slli	r2,r2,6
 8014e1c:	10c5883a 	add	r2,r2,r3
 8014e20:	10c00f04 	addi	r3,r2,60
 8014e24:	00800044 	movi	r2,1
 8014e28:	18800015 	stw	r2,0(r3)
    				active_files[file_record_index].modified = false;
 8014e2c:	e0bfeb0f 	ldh	r2,-84(fp)
 8014e30:	00c200b4 	movhi	r3,2050
 8014e34:	18ebcf04 	addi	r3,r3,-20676
 8014e38:	100491ba 	slli	r2,r2,6
 8014e3c:	10c5883a 	add	r2,r2,r3
 8014e40:	10800e04 	addi	r2,r2,56
 8014e44:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 8014e48:	e03fea15 	stw	zero,-88(fp)
 8014e4c:	00004506 	br	8014f64 <alt_up_sd_card_fopen+0x2e8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
 8014e50:	e0ffeb0f 	ldh	r3,-84(fp)
 8014e54:	e0bfea17 	ldw	r2,-88(fp)
 8014e58:	18803f26 	beq	r3,r2,8014f58 <alt_up_sd_card_fopen+0x2dc>
 8014e5c:	e0bfea17 	ldw	r2,-88(fp)
 8014e60:	00c200b4 	movhi	r3,2050
 8014e64:	18ebcf04 	addi	r3,r3,-20676
 8014e68:	100491ba 	slli	r2,r2,6
 8014e6c:	10c5883a 	add	r2,r2,r3
 8014e70:	10800f04 	addi	r2,r2,60
 8014e74:	10800017 	ldw	r2,0(r2)
 8014e78:	10800058 	cmpnei	r2,r2,1
 8014e7c:	1000361e 	bne	r2,zero,8014f58 <alt_up_sd_card_fopen+0x2dc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 8014e80:	e0bfeb0f 	ldh	r2,-84(fp)
 8014e84:	00c200b4 	movhi	r3,2050
 8014e88:	18ebcf04 	addi	r3,r3,-20676
 8014e8c:	100491ba 	slli	r2,r2,6
 8014e90:	10c5883a 	add	r2,r2,r3
 8014e94:	10800a04 	addi	r2,r2,40
 8014e98:	11000017 	ldw	r4,0(r2)
 8014e9c:	e0bfea17 	ldw	r2,-88(fp)
 8014ea0:	00c200b4 	movhi	r3,2050
 8014ea4:	18ebcf04 	addi	r3,r3,-20676
 8014ea8:	100491ba 	slli	r2,r2,6
 8014eac:	10c5883a 	add	r2,r2,r3
 8014eb0:	10800a04 	addi	r2,r2,40
 8014eb4:	10800017 	ldw	r2,0(r2)
 8014eb8:	2080271e 	bne	r4,r2,8014f58 <alt_up_sd_card_fopen+0x2dc>
 8014ebc:	e0bfeb0f 	ldh	r2,-84(fp)
 8014ec0:	00c200b4 	movhi	r3,2050
 8014ec4:	18ebcf04 	addi	r3,r3,-20676
 8014ec8:	100491ba 	slli	r2,r2,6
 8014ecc:	10c5883a 	add	r2,r2,r3
 8014ed0:	10800b04 	addi	r2,r2,44
 8014ed4:	11000017 	ldw	r4,0(r2)
 8014ed8:	e0bfea17 	ldw	r2,-88(fp)
 8014edc:	00c200b4 	movhi	r3,2050
 8014ee0:	18ebcf04 	addi	r3,r3,-20676
 8014ee4:	100491ba 	slli	r2,r2,6
 8014ee8:	10c5883a 	add	r2,r2,r3
 8014eec:	10800b04 	addi	r2,r2,44
 8014ef0:	10800017 	ldw	r2,0(r2)
 8014ef4:	2080181e 	bne	r4,r2,8014f58 <alt_up_sd_card_fopen+0x2dc>
 8014ef8:	e0bfeb0f 	ldh	r2,-84(fp)
 8014efc:	00c200b4 	movhi	r3,2050
 8014f00:	18ebcf04 	addi	r3,r3,-20676
 8014f04:	100491ba 	slli	r2,r2,6
 8014f08:	10c5883a 	add	r2,r2,r3
 8014f0c:	10800c04 	addi	r2,r2,48
 8014f10:	1100000b 	ldhu	r4,0(r2)
 8014f14:	e0bfea17 	ldw	r2,-88(fp)
 8014f18:	00c200b4 	movhi	r3,2050
 8014f1c:	18ebcf04 	addi	r3,r3,-20676
 8014f20:	100491ba 	slli	r2,r2,6
 8014f24:	10c5883a 	add	r2,r2,r3
 8014f28:	10800c04 	addi	r2,r2,48
 8014f2c:	1080000b 	ldhu	r2,0(r2)
 8014f30:	20ffffcc 	andi	r3,r4,65535
 8014f34:	18e0001c 	xori	r3,r3,32768
 8014f38:	18e00004 	addi	r3,r3,-32768
 8014f3c:	10bfffcc 	andi	r2,r2,65535
 8014f40:	10a0001c 	xori	r2,r2,32768
 8014f44:	10a00004 	addi	r2,r2,-32768
 8014f48:	1880031e 	bne	r3,r2,8014f58 <alt_up_sd_card_fopen+0x2dc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
 8014f4c:	00bfff84 	movi	r2,-2
 8014f50:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 8014f54:	00002b06 	br	8015004 <alt_up_sd_card_fopen+0x388>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 8014f58:	e0bfea17 	ldw	r2,-88(fp)
 8014f5c:	10800044 	addi	r2,r2,1
 8014f60:	e0bfea15 	stw	r2,-88(fp)
 8014f64:	e0bfea17 	ldw	r2,-88(fp)
 8014f68:	10800510 	cmplti	r2,r2,20
 8014f6c:	103fb81e 	bne	r2,zero,8014e50 <alt_up_sd_card_fopen+0x1d4>
 8014f70:	00002406 	br	8015004 <alt_up_sd_card_fopen+0x388>
							}
						}
					}

                }
                else if (create)
 8014f74:	e0bffe17 	ldw	r2,-8(fp)
 8014f78:	1005003a 	cmpeq	r2,r2,zero
 8014f7c:	10001f1e 	bne	r2,zero,8014ffc <alt_up_sd_card_fopen+0x380>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
 8014f80:	e0bfeb0f 	ldh	r2,-84(fp)
 8014f84:	100491ba 	slli	r2,r2,6
 8014f88:	1007883a 	mov	r3,r2
 8014f8c:	008200b4 	movhi	r2,2050
 8014f90:	10abcf04 	addi	r2,r2,-20676
 8014f94:	188b883a 	add	r5,r3,r2
 8014f98:	e1bfed04 	addi	r6,fp,-76
 8014f9c:	e13ffd17 	ldw	r4,-12(fp)
 8014fa0:	80141d00 	call	80141d0 <create_file>
 8014fa4:	1005003a 	cmpeq	r2,r2,zero
 8014fa8:	1000111e 	bne	r2,zero,8014ff0 <alt_up_sd_card_fopen+0x374>
                    {
                        active_files[file_record_index].in_use = true;
 8014fac:	e0bfeb0f 	ldh	r2,-84(fp)
 8014fb0:	00c200b4 	movhi	r3,2050
 8014fb4:	18ebcf04 	addi	r3,r3,-20676
 8014fb8:	100491ba 	slli	r2,r2,6
 8014fbc:	10c5883a 	add	r2,r2,r3
 8014fc0:	10c00f04 	addi	r3,r2,60
 8014fc4:	00800044 	movi	r2,1
 8014fc8:	18800015 	stw	r2,0(r3)
    					active_files[file_record_index].modified = true;
 8014fcc:	e0bfeb0f 	ldh	r2,-84(fp)
 8014fd0:	00c200b4 	movhi	r3,2050
 8014fd4:	18ebcf04 	addi	r3,r3,-20676
 8014fd8:	100491ba 	slli	r2,r2,6
 8014fdc:	10c5883a 	add	r2,r2,r3
 8014fe0:	10c00e04 	addi	r3,r2,56
 8014fe4:	00800044 	movi	r2,1
 8014fe8:	18800015 	stw	r2,0(r3)
 8014fec:	00000506 	br	8015004 <alt_up_sd_card_fopen+0x388>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
 8014ff0:	00bfffc4 	movi	r2,-1
 8014ff4:	e0bfeb0d 	sth	r2,-84(fp)
 8014ff8:	00000206 	br	8015004 <alt_up_sd_card_fopen+0x388>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
 8014ffc:	00bfffc4 	movi	r2,-1
 8015000:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
 8015004:	e0bfeb0f 	ldh	r2,-84(fp)
 8015008:	e0bfff15 	stw	r2,-4(fp)
 801500c:	e0bfff17 	ldw	r2,-4(fp)
}
 8015010:	e037883a 	mov	sp,fp
 8015014:	dfc00117 	ldw	ra,4(sp)
 8015018:	df000017 	ldw	fp,0(sp)
 801501c:	dec00204 	addi	sp,sp,8
 8015020:	f800283a 	ret

08015024 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 8015024:	defffd04 	addi	sp,sp,-12
 8015028:	df000215 	stw	fp,8(sp)
 801502c:	df000204 	addi	fp,sp,8
 8015030:	e13ffe0d 	sth	r4,-8(fp)
 8015034:	e17fff0d 	sth	r5,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 8015038:	e0bffe0f 	ldh	r2,-8(fp)
 801503c:	1004803a 	cmplt	r2,r2,zero
 8015040:	1000181e 	bne	r2,zero,80150a4 <alt_up_sd_card_set_attributes+0x80>
 8015044:	e0bffe0f 	ldh	r2,-8(fp)
 8015048:	10800508 	cmpgei	r2,r2,20
 801504c:	1000151e 	bne	r2,zero,80150a4 <alt_up_sd_card_set_attributes+0x80>
    {
        if (active_files[file_handle].in_use)
 8015050:	e0bffe0f 	ldh	r2,-8(fp)
 8015054:	00c200b4 	movhi	r3,2050
 8015058:	18ebcf04 	addi	r3,r3,-20676
 801505c:	100491ba 	slli	r2,r2,6
 8015060:	10c5883a 	add	r2,r2,r3
 8015064:	10800f04 	addi	r2,r2,60
 8015068:	10800017 	ldw	r2,0(r2)
 801506c:	1005003a 	cmpeq	r2,r2,zero
 8015070:	10000c1e 	bne	r2,zero,80150a4 <alt_up_sd_card_set_attributes+0x80>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
 8015074:	e17ffe0f 	ldh	r5,-8(fp)
 8015078:	e0bfff0b 	ldhu	r2,-4(fp)
 801507c:	1007883a 	mov	r3,r2
 8015080:	00bfffc4 	movi	r2,-1
 8015084:	1884703a 	and	r2,r3,r2
 8015088:	1009883a 	mov	r4,r2
 801508c:	00c200b4 	movhi	r3,2050
 8015090:	18ebcf04 	addi	r3,r3,-20676
 8015094:	280491ba 	slli	r2,r5,6
 8015098:	10c5883a 	add	r2,r2,r3
 801509c:	10800204 	addi	r2,r2,8
 80150a0:	110000c5 	stb	r4,3(r2)
        }
    }
}
 80150a4:	e037883a 	mov	sp,fp
 80150a8:	df000017 	ldw	fp,0(sp)
 80150ac:	dec00104 	addi	sp,sp,4
 80150b0:	f800283a 	ret

080150b4 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 80150b4:	defffd04 	addi	sp,sp,-12
 80150b8:	df000215 	stw	fp,8(sp)
 80150bc:	df000204 	addi	fp,sp,8
 80150c0:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 80150c4:	00bfffc4 	movi	r2,-1
 80150c8:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 80150cc:	e0bfff0f 	ldh	r2,-4(fp)
 80150d0:	1004803a 	cmplt	r2,r2,zero
 80150d4:	1000151e 	bne	r2,zero,801512c <alt_up_sd_card_get_attributes+0x78>
 80150d8:	e0bfff0f 	ldh	r2,-4(fp)
 80150dc:	10800508 	cmpgei	r2,r2,20
 80150e0:	1000121e 	bne	r2,zero,801512c <alt_up_sd_card_get_attributes+0x78>
    {
        if (active_files[file_handle].in_use)
 80150e4:	e0bfff0f 	ldh	r2,-4(fp)
 80150e8:	00c200b4 	movhi	r3,2050
 80150ec:	18ebcf04 	addi	r3,r3,-20676
 80150f0:	100491ba 	slli	r2,r2,6
 80150f4:	10c5883a 	add	r2,r2,r3
 80150f8:	10800f04 	addi	r2,r2,60
 80150fc:	10800017 	ldw	r2,0(r2)
 8015100:	1005003a 	cmpeq	r2,r2,zero
 8015104:	1000091e 	bne	r2,zero,801512c <alt_up_sd_card_get_attributes+0x78>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
 8015108:	e0bfff0f 	ldh	r2,-4(fp)
 801510c:	00c200b4 	movhi	r3,2050
 8015110:	18ebcf04 	addi	r3,r3,-20676
 8015114:	100491ba 	slli	r2,r2,6
 8015118:	10c5883a 	add	r2,r2,r3
 801511c:	10800204 	addi	r2,r2,8
 8015120:	108000c3 	ldbu	r2,3(r2)
 8015124:	10803fcc 	andi	r2,r2,255
 8015128:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 801512c:	e0bffe0f 	ldh	r2,-8(fp)
}
 8015130:	e037883a 	mov	sp,fp
 8015134:	df000017 	ldw	fp,0(sp)
 8015138:	dec00104 	addi	sp,sp,4
 801513c:	f800283a 	ret

08015140 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 8015140:	defffa04 	addi	sp,sp,-24
 8015144:	dfc00515 	stw	ra,20(sp)
 8015148:	df000415 	stw	fp,16(sp)
 801514c:	df000404 	addi	fp,sp,16
 8015150:	e13ffe0d 	sth	r4,-8(fp)
    short int ch = -1;
 8015154:	00bfffc4 	movi	r2,-1
 8015158:	e0bffd0d 	sth	r2,-12(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 801515c:	e0bffe0f 	ldh	r2,-8(fp)
 8015160:	1004803a 	cmplt	r2,r2,zero
 8015164:	1000d51e 	bne	r2,zero,80154bc <alt_up_sd_card_read+0x37c>
 8015168:	e0bffe0f 	ldh	r2,-8(fp)
 801516c:	10800508 	cmpgei	r2,r2,20
 8015170:	1000d21e 	bne	r2,zero,80154bc <alt_up_sd_card_read+0x37c>
    {
        if (active_files[file_handle].in_use)
 8015174:	e0bffe0f 	ldh	r2,-8(fp)
 8015178:	00c200b4 	movhi	r3,2050
 801517c:	18ebcf04 	addi	r3,r3,-20676
 8015180:	100491ba 	slli	r2,r2,6
 8015184:	10c5883a 	add	r2,r2,r3
 8015188:	10800f04 	addi	r2,r2,60
 801518c:	10800017 	ldw	r2,0(r2)
 8015190:	1005003a 	cmpeq	r2,r2,zero
 8015194:	1000c91e 	bne	r2,zero,80154bc <alt_up_sd_card_read+0x37c>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 8015198:	e0bffe0f 	ldh	r2,-8(fp)
 801519c:	00c200b4 	movhi	r3,2050
 80151a0:	18ebcf04 	addi	r3,r3,-20676
 80151a4:	100491ba 	slli	r2,r2,6
 80151a8:	10c5883a 	add	r2,r2,r3
 80151ac:	10800904 	addi	r2,r2,36
 80151b0:	11000017 	ldw	r4,0(r2)
 80151b4:	e0bffe0f 	ldh	r2,-8(fp)
 80151b8:	00c200b4 	movhi	r3,2050
 80151bc:	18ebcf04 	addi	r3,r3,-20676
 80151c0:	100491ba 	slli	r2,r2,6
 80151c4:	10c5883a 	add	r2,r2,r3
 80151c8:	10800604 	addi	r2,r2,24
 80151cc:	10800017 	ldw	r2,0(r2)
 80151d0:	2080ba2e 	bgeu	r4,r2,80154bc <alt_up_sd_card_read+0x37c>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
 80151d4:	008200b4 	movhi	r2,2050
 80151d8:	10abba04 	addi	r2,r2,-20760
 80151dc:	11001417 	ldw	r4,80(r2)
 80151e0:	e0bffe0f 	ldh	r2,-8(fp)
 80151e4:	00c200b4 	movhi	r3,2050
 80151e8:	18ebcf04 	addi	r3,r3,-20676
 80151ec:	100491ba 	slli	r2,r2,6
 80151f0:	10c5883a 	add	r2,r2,r3
 80151f4:	10800704 	addi	r2,r2,28
 80151f8:	10800017 	ldw	r2,0(r2)
 80151fc:	10ffff84 	addi	r3,r2,-2
 8015200:	008200b4 	movhi	r2,2050
 8015204:	10abba04 	addi	r2,r2,-20760
 8015208:	10800383 	ldbu	r2,14(r2)
 801520c:	10803fcc 	andi	r2,r2,255
 8015210:	1885383a 	mul	r2,r3,r2
 8015214:	2089883a 	add	r4,r4,r2
 8015218:	e0bffe0f 	ldh	r2,-8(fp)
 801521c:	00c200b4 	movhi	r3,2050
 8015220:	18ebcf04 	addi	r3,r3,-20676
 8015224:	100491ba 	slli	r2,r2,6
 8015228:	10c5883a 	add	r2,r2,r3
 801522c:	10800804 	addi	r2,r2,32
 8015230:	10800017 	ldw	r2,0(r2)
 8015234:	2085883a 	add	r2,r4,r2
 8015238:	e0bffc15 	stw	r2,-16(fp)
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
 801523c:	e0bffe0f 	ldh	r2,-8(fp)
 8015240:	00c200b4 	movhi	r3,2050
 8015244:	18ebcf04 	addi	r3,r3,-20676
 8015248:	100491ba 	slli	r2,r2,6
 801524c:	10c5883a 	add	r2,r2,r3
 8015250:	10800904 	addi	r2,r2,36
 8015254:	10800017 	ldw	r2,0(r2)
 8015258:	1005003a 	cmpeq	r2,r2,zero
 801525c:	10006a1e 	bne	r2,zero,8015408 <alt_up_sd_card_read+0x2c8>
 8015260:	e0bffe0f 	ldh	r2,-8(fp)
 8015264:	00c200b4 	movhi	r3,2050
 8015268:	18ebcf04 	addi	r3,r3,-20676
 801526c:	100491ba 	slli	r2,r2,6
 8015270:	10c5883a 	add	r2,r2,r3
 8015274:	10800904 	addi	r2,r2,36
 8015278:	10800017 	ldw	r2,0(r2)
 801527c:	10807fcc 	andi	r2,r2,511
 8015280:	1004c03a 	cmpne	r2,r2,zero
 8015284:	1000601e 	bne	r2,zero,8015408 <alt_up_sd_card_read+0x2c8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 8015288:	e0bffe0f 	ldh	r2,-8(fp)
 801528c:	00c200b4 	movhi	r3,2050
 8015290:	18ebcf04 	addi	r3,r3,-20676
 8015294:	100491ba 	slli	r2,r2,6
 8015298:	10c5883a 	add	r2,r2,r3
 801529c:	10800804 	addi	r2,r2,32
 80152a0:	10c00017 	ldw	r3,0(r2)
 80152a4:	008200b4 	movhi	r2,2050
 80152a8:	10abba04 	addi	r2,r2,-20760
 80152ac:	10800383 	ldbu	r2,14(r2)
 80152b0:	10803fcc 	andi	r2,r2,255
 80152b4:	10bfffc4 	addi	r2,r2,-1
 80152b8:	1880411e 	bne	r3,r2,80153c0 <alt_up_sd_card_read+0x280>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 80152bc:	e0bffe0f 	ldh	r2,-8(fp)
 80152c0:	00c200b4 	movhi	r3,2050
 80152c4:	18ebcf04 	addi	r3,r3,-20676
 80152c8:	100491ba 	slli	r2,r2,6
 80152cc:	10c5883a 	add	r2,r2,r3
 80152d0:	10800704 	addi	r2,r2,28
 80152d4:	11000017 	ldw	r4,0(r2)
 80152d8:	e17ffd84 	addi	r5,fp,-10
 80152dc:	8011ab80 	call	8011ab8 <get_cluster_flag>
 80152e0:	1005003a 	cmpeq	r2,r2,zero
 80152e4:	1000331e 	bne	r2,zero,80153b4 <alt_up_sd_card_read+0x274>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 80152e8:	e0bffd8b 	ldhu	r2,-10(fp)
 80152ec:	10bfffcc 	andi	r2,r2,65535
 80152f0:	10fffe0c 	andi	r3,r2,65528
 80152f4:	00bffe14 	movui	r2,65528
 80152f8:	1880031e 	bne	r3,r2,8015308 <alt_up_sd_card_read+0x1c8>
                            {
                                /* End of file */
                                return -1;
 80152fc:	00bfffc4 	movi	r2,-1
 8015300:	e0bfff15 	stw	r2,-4(fp)
 8015304:	00006f06 	br	80154c4 <alt_up_sd_card_read+0x384>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 8015308:	e13ffe0f 	ldh	r4,-8(fp)
 801530c:	e0bffd8b 	ldhu	r2,-10(fp)
 8015310:	117fffcc 	andi	r5,r2,65535
 8015314:	00c200b4 	movhi	r3,2050
 8015318:	18ebcf04 	addi	r3,r3,-20676
 801531c:	200491ba 	slli	r2,r4,6
 8015320:	10c5883a 	add	r2,r2,r3
 8015324:	10800704 	addi	r2,r2,28
 8015328:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 801532c:	e0bffe0f 	ldh	r2,-8(fp)
 8015330:	00c200b4 	movhi	r3,2050
 8015334:	18ebcf04 	addi	r3,r3,-20676
 8015338:	100491ba 	slli	r2,r2,6
 801533c:	10c5883a 	add	r2,r2,r3
 8015340:	10800804 	addi	r2,r2,32
 8015344:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8015348:	008200b4 	movhi	r2,2050
 801534c:	10abba04 	addi	r2,r2,-20760
 8015350:	11001417 	ldw	r4,80(r2)
 8015354:	e0bffe0f 	ldh	r2,-8(fp)
 8015358:	00c200b4 	movhi	r3,2050
 801535c:	18ebcf04 	addi	r3,r3,-20676
 8015360:	100491ba 	slli	r2,r2,6
 8015364:	10c5883a 	add	r2,r2,r3
 8015368:	10800704 	addi	r2,r2,28
 801536c:	10800017 	ldw	r2,0(r2)
 8015370:	10ffff84 	addi	r3,r2,-2
 8015374:	008200b4 	movhi	r2,2050
 8015378:	10abba04 	addi	r2,r2,-20760
 801537c:	10800383 	ldbu	r2,14(r2)
 8015380:	10803fcc 	andi	r2,r2,255
 8015384:	1885383a 	mul	r2,r3,r2
 8015388:	2089883a 	add	r4,r4,r2
 801538c:	e0bffe0f 	ldh	r2,-8(fp)
 8015390:	00c200b4 	movhi	r3,2050
 8015394:	18ebcf04 	addi	r3,r3,-20676
 8015398:	100491ba 	slli	r2,r2,6
 801539c:	10c5883a 	add	r2,r2,r3
 80153a0:	10800804 	addi	r2,r2,32
 80153a4:	10800017 	ldw	r2,0(r2)
 80153a8:	2085883a 	add	r2,r4,r2
 80153ac:	e0bffc15 	stw	r2,-16(fp)
 80153b0:	00001506 	br	8015408 <alt_up_sd_card_read+0x2c8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
 80153b4:	00bfff84 	movi	r2,-2
 80153b8:	e0bfff15 	stw	r2,-4(fp)
 80153bc:	00004106 	br	80154c4 <alt_up_sd_card_read+0x384>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 80153c0:	e17ffe0f 	ldh	r5,-8(fp)
 80153c4:	e0bffe0f 	ldh	r2,-8(fp)
 80153c8:	00c200b4 	movhi	r3,2050
 80153cc:	18ebcf04 	addi	r3,r3,-20676
 80153d0:	100491ba 	slli	r2,r2,6
 80153d4:	10c5883a 	add	r2,r2,r3
 80153d8:	10800804 	addi	r2,r2,32
 80153dc:	10800017 	ldw	r2,0(r2)
 80153e0:	11000044 	addi	r4,r2,1
 80153e4:	00c200b4 	movhi	r3,2050
 80153e8:	18ebcf04 	addi	r3,r3,-20676
 80153ec:	280491ba 	slli	r2,r5,6
 80153f0:	10c5883a 	add	r2,r2,r3
 80153f4:	10800804 	addi	r2,r2,32
 80153f8:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
 80153fc:	e0bffc17 	ldw	r2,-16(fp)
 8015400:	10800044 	addi	r2,r2,1
 8015404:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
 8015408:	d0e6e417 	ldw	r3,-25712(gp)
 801540c:	e0bffc17 	ldw	r2,-16(fp)
 8015410:	1885883a 	add	r2,r3,r2
 8015414:	1007883a 	mov	r3,r2
 8015418:	d0a6e817 	ldw	r2,-25696(gp)
 801541c:	18800826 	beq	r3,r2,8015440 <alt_up_sd_card_read+0x300>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 8015420:	d166e417 	ldw	r5,-25712(gp)
 8015424:	e13ffc17 	ldw	r4,-16(fp)
 8015428:	80119bc0 	call	80119bc <Read_Sector_Data>
 801542c:	1004c03a 	cmpne	r2,r2,zero
 8015430:	1000031e 	bne	r2,zero,8015440 <alt_up_sd_card_read+0x300>
                    {
						return -2;
 8015434:	00bfff84 	movi	r2,-2
 8015438:	e0bfff15 	stw	r2,-4(fp)
 801543c:	00002106 	br	80154c4 <alt_up_sd_card_read+0x384>
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
 8015440:	e0bffe0f 	ldh	r2,-8(fp)
 8015444:	00c200b4 	movhi	r3,2050
 8015448:	18ebcf04 	addi	r3,r3,-20676
 801544c:	100491ba 	slli	r2,r2,6
 8015450:	10c5883a 	add	r2,r2,r3
 8015454:	10800904 	addi	r2,r2,36
 8015458:	10800017 	ldw	r2,0(r2)
 801545c:	10807fcc 	andi	r2,r2,511
 8015460:	1007883a 	mov	r3,r2
 8015464:	d0a6e317 	ldw	r2,-25716(gp)
 8015468:	1885883a 	add	r2,r3,r2
 801546c:	10800023 	ldbuio	r2,0(r2)
 8015470:	10803fcc 	andi	r2,r2,255
 8015474:	1080201c 	xori	r2,r2,128
 8015478:	10bfe004 	addi	r2,r2,-128
 801547c:	e0bffd0d 	sth	r2,-12(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 8015480:	e17ffe0f 	ldh	r5,-8(fp)
 8015484:	e0bffe0f 	ldh	r2,-8(fp)
 8015488:	00c200b4 	movhi	r3,2050
 801548c:	18ebcf04 	addi	r3,r3,-20676
 8015490:	100491ba 	slli	r2,r2,6
 8015494:	10c5883a 	add	r2,r2,r3
 8015498:	10800904 	addi	r2,r2,36
 801549c:	10800017 	ldw	r2,0(r2)
 80154a0:	11000044 	addi	r4,r2,1
 80154a4:	00c200b4 	movhi	r3,2050
 80154a8:	18ebcf04 	addi	r3,r3,-20676
 80154ac:	280491ba 	slli	r2,r5,6
 80154b0:	10c5883a 	add	r2,r2,r3
 80154b4:	10800904 	addi	r2,r2,36
 80154b8:	11000015 	stw	r4,0(r2)
            }
        }
    }
    
    return ch;
 80154bc:	e0bffd0f 	ldh	r2,-12(fp)
 80154c0:	e0bfff15 	stw	r2,-4(fp)
 80154c4:	e0bfff17 	ldw	r2,-4(fp)
}
 80154c8:	e037883a 	mov	sp,fp
 80154cc:	dfc00117 	ldw	ra,4(sp)
 80154d0:	df000017 	ldw	fp,0(sp)
 80154d4:	dec00204 	addi	sp,sp,8
 80154d8:	f800283a 	ret

080154dc <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 80154dc:	defff604 	addi	sp,sp,-40
 80154e0:	dfc00915 	stw	ra,36(sp)
 80154e4:	df000815 	stw	fp,32(sp)
 80154e8:	df000804 	addi	fp,sp,32
 80154ec:	e13ffd0d 	sth	r4,-12(fp)
 80154f0:	e17ffe05 	stb	r5,-8(fp)
    bool result = false;
 80154f4:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 80154f8:	e0bffd0f 	ldh	r2,-12(fp)
 80154fc:	1004803a 	cmplt	r2,r2,zero
 8015500:	1001761e 	bne	r2,zero,8015adc <alt_up_sd_card_write+0x600>
 8015504:	e0bffd0f 	ldh	r2,-12(fp)
 8015508:	10800508 	cmpgei	r2,r2,20
 801550c:	1001731e 	bne	r2,zero,8015adc <alt_up_sd_card_write+0x600>
    {
        if (active_files[file_handle].in_use)
 8015510:	e0bffd0f 	ldh	r2,-12(fp)
 8015514:	00c200b4 	movhi	r3,2050
 8015518:	18ebcf04 	addi	r3,r3,-20676
 801551c:	100491ba 	slli	r2,r2,6
 8015520:	10c5883a 	add	r2,r2,r3
 8015524:	10800f04 	addi	r2,r2,60
 8015528:	10800017 	ldw	r2,0(r2)
 801552c:	1005003a 	cmpeq	r2,r2,zero
 8015530:	10016a1e 	bne	r2,zero,8015adc <alt_up_sd_card_write+0x600>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
 8015534:	008200b4 	movhi	r2,2050
 8015538:	10abba04 	addi	r2,r2,-20760
 801553c:	11001417 	ldw	r4,80(r2)
 8015540:	e0bffd0f 	ldh	r2,-12(fp)
 8015544:	00c200b4 	movhi	r3,2050
 8015548:	18ebcf04 	addi	r3,r3,-20676
 801554c:	100491ba 	slli	r2,r2,6
 8015550:	10c5883a 	add	r2,r2,r3
 8015554:	10800704 	addi	r2,r2,28
 8015558:	10800017 	ldw	r2,0(r2)
 801555c:	10ffff84 	addi	r3,r2,-2
 8015560:	008200b4 	movhi	r2,2050
 8015564:	10abba04 	addi	r2,r2,-20760
 8015568:	10800383 	ldbu	r2,14(r2)
 801556c:	10803fcc 	andi	r2,r2,255
 8015570:	1885383a 	mul	r2,r3,r2
 8015574:	2089883a 	add	r4,r4,r2
 8015578:	e0bffd0f 	ldh	r2,-12(fp)
 801557c:	00c200b4 	movhi	r3,2050
 8015580:	18ebcf04 	addi	r3,r3,-20676
 8015584:	100491ba 	slli	r2,r2,6
 8015588:	10c5883a 	add	r2,r2,r3
 801558c:	10800804 	addi	r2,r2,32
 8015590:	10800017 	ldw	r2,0(r2)
 8015594:	2085883a 	add	r2,r4,r2
 8015598:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
 801559c:	e0bffd0f 	ldh	r2,-12(fp)
 80155a0:	00c200b4 	movhi	r3,2050
 80155a4:	18ebcf04 	addi	r3,r3,-20676
 80155a8:	100491ba 	slli	r2,r2,6
 80155ac:	10c5883a 	add	r2,r2,r3
 80155b0:	10800904 	addi	r2,r2,36
 80155b4:	11000017 	ldw	r4,0(r2)
 80155b8:	008200b4 	movhi	r2,2050
 80155bc:	10abba04 	addi	r2,r2,-20760
 80155c0:	1080030b 	ldhu	r2,12(r2)
 80155c4:	10ffffcc 	andi	r3,r2,65535
 80155c8:	20c5203a 	divu	r2,r4,r3
 80155cc:	10c5383a 	mul	r2,r2,r3
 80155d0:	2085c83a 	sub	r2,r4,r2
 80155d4:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 80155d8:	e0bffd0f 	ldh	r2,-12(fp)
 80155dc:	00c200b4 	movhi	r3,2050
 80155e0:	18ebcf04 	addi	r3,r3,-20676
 80155e4:	100491ba 	slli	r2,r2,6
 80155e8:	10c5883a 	add	r2,r2,r3
 80155ec:	10800904 	addi	r2,r2,36
 80155f0:	11000017 	ldw	r4,0(r2)
 80155f4:	e0bffd0f 	ldh	r2,-12(fp)
 80155f8:	00c200b4 	movhi	r3,2050
 80155fc:	18ebcf04 	addi	r3,r3,-20676
 8015600:	100491ba 	slli	r2,r2,6
 8015604:	10c5883a 	add	r2,r2,r3
 8015608:	10800604 	addi	r2,r2,24
 801560c:	10800017 	ldw	r2,0(r2)
 8015610:	2080682e 	bgeu	r4,r2,80157b4 <alt_up_sd_card_write+0x2d8>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 8015614:	e0bffd0f 	ldh	r2,-12(fp)
 8015618:	00c200b4 	movhi	r3,2050
 801561c:	18ebcf04 	addi	r3,r3,-20676
 8015620:	100491ba 	slli	r2,r2,6
 8015624:	10c5883a 	add	r2,r2,r3
 8015628:	10800904 	addi	r2,r2,36
 801562c:	10800017 	ldw	r2,0(r2)
 8015630:	1005003a 	cmpeq	r2,r2,zero
 8015634:	1000dd1e 	bne	r2,zero,80159ac <alt_up_sd_card_write+0x4d0>
 8015638:	e0bff80f 	ldh	r2,-32(fp)
 801563c:	1004c03a 	cmpne	r2,r2,zero
 8015640:	1000da1e 	bne	r2,zero,80159ac <alt_up_sd_card_write+0x4d0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 8015644:	e0bffd0f 	ldh	r2,-12(fp)
 8015648:	00c200b4 	movhi	r3,2050
 801564c:	18ebcf04 	addi	r3,r3,-20676
 8015650:	100491ba 	slli	r2,r2,6
 8015654:	10c5883a 	add	r2,r2,r3
 8015658:	10800804 	addi	r2,r2,32
 801565c:	10c00017 	ldw	r3,0(r2)
 8015660:	008200b4 	movhi	r2,2050
 8015664:	10abba04 	addi	r2,r2,-20760
 8015668:	10800383 	ldbu	r2,14(r2)
 801566c:	10803fcc 	andi	r2,r2,255
 8015670:	10bfffc4 	addi	r2,r2,-1
 8015674:	18803c1e 	bne	r3,r2,8015768 <alt_up_sd_card_write+0x28c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 8015678:	e0bffd0f 	ldh	r2,-12(fp)
 801567c:	00c200b4 	movhi	r3,2050
 8015680:	18ebcf04 	addi	r3,r3,-20676
 8015684:	100491ba 	slli	r2,r2,6
 8015688:	10c5883a 	add	r2,r2,r3
 801568c:	10800704 	addi	r2,r2,28
 8015690:	11000017 	ldw	r4,0(r2)
 8015694:	e17ffb04 	addi	r5,fp,-20
 8015698:	8011ab80 	call	8011ab8 <get_cluster_flag>
 801569c:	1005003a 	cmpeq	r2,r2,zero
 80156a0:	10002f1e 	bne	r2,zero,8015760 <alt_up_sd_card_write+0x284>
                        {
                            if (next_cluster < 0x0000fff8)
 80156a4:	e0bffb0b 	ldhu	r2,-20(fp)
 80156a8:	10ffffcc 	andi	r3,r2,65535
 80156ac:	00bffdd4 	movui	r2,65527
 80156b0:	10c0be36 	bltu	r2,r3,80159ac <alt_up_sd_card_write+0x4d0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 80156b4:	e13ffd0f 	ldh	r4,-12(fp)
 80156b8:	e0bffb0b 	ldhu	r2,-20(fp)
 80156bc:	117fffcc 	andi	r5,r2,65535
 80156c0:	00c200b4 	movhi	r3,2050
 80156c4:	18ebcf04 	addi	r3,r3,-20676
 80156c8:	200491ba 	slli	r2,r4,6
 80156cc:	10c5883a 	add	r2,r2,r3
 80156d0:	10800704 	addi	r2,r2,28
 80156d4:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 80156d8:	e0bffd0f 	ldh	r2,-12(fp)
 80156dc:	00c200b4 	movhi	r3,2050
 80156e0:	18ebcf04 	addi	r3,r3,-20676
 80156e4:	100491ba 	slli	r2,r2,6
 80156e8:	10c5883a 	add	r2,r2,r3
 80156ec:	10800804 	addi	r2,r2,32
 80156f0:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 80156f4:	008200b4 	movhi	r2,2050
 80156f8:	10abba04 	addi	r2,r2,-20760
 80156fc:	11001417 	ldw	r4,80(r2)
 8015700:	e0bffd0f 	ldh	r2,-12(fp)
 8015704:	00c200b4 	movhi	r3,2050
 8015708:	18ebcf04 	addi	r3,r3,-20676
 801570c:	100491ba 	slli	r2,r2,6
 8015710:	10c5883a 	add	r2,r2,r3
 8015714:	10800704 	addi	r2,r2,28
 8015718:	10800017 	ldw	r2,0(r2)
 801571c:	10ffff84 	addi	r3,r2,-2
 8015720:	008200b4 	movhi	r2,2050
 8015724:	10abba04 	addi	r2,r2,-20760
 8015728:	10800383 	ldbu	r2,14(r2)
 801572c:	10803fcc 	andi	r2,r2,255
 8015730:	1885383a 	mul	r2,r3,r2
 8015734:	2089883a 	add	r4,r4,r2
 8015738:	e0bffd0f 	ldh	r2,-12(fp)
 801573c:	00c200b4 	movhi	r3,2050
 8015740:	18ebcf04 	addi	r3,r3,-20676
 8015744:	100491ba 	slli	r2,r2,6
 8015748:	10c5883a 	add	r2,r2,r3
 801574c:	10800804 	addi	r2,r2,32
 8015750:	10800017 	ldw	r2,0(r2)
 8015754:	2085883a 	add	r2,r4,r2
 8015758:	e0bff915 	stw	r2,-28(fp)
 801575c:	00009306 	br	80159ac <alt_up_sd_card_write+0x4d0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
 8015760:	e03fff15 	stw	zero,-4(fp)
 8015764:	0000df06 	br	8015ae4 <alt_up_sd_card_write+0x608>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 8015768:	e17ffd0f 	ldh	r5,-12(fp)
 801576c:	e0bffd0f 	ldh	r2,-12(fp)
 8015770:	00c200b4 	movhi	r3,2050
 8015774:	18ebcf04 	addi	r3,r3,-20676
 8015778:	100491ba 	slli	r2,r2,6
 801577c:	10c5883a 	add	r2,r2,r3
 8015780:	10800804 	addi	r2,r2,32
 8015784:	10800017 	ldw	r2,0(r2)
 8015788:	11000044 	addi	r4,r2,1
 801578c:	00c200b4 	movhi	r3,2050
 8015790:	18ebcf04 	addi	r3,r3,-20676
 8015794:	280491ba 	slli	r2,r5,6
 8015798:	10c5883a 	add	r2,r2,r3
 801579c:	10800804 	addi	r2,r2,32
 80157a0:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
 80157a4:	e0bff917 	ldw	r2,-28(fp)
 80157a8:	10800044 	addi	r2,r2,1
 80157ac:	e0bff915 	stw	r2,-28(fp)
 80157b0:	00007e06 	br	80159ac <alt_up_sd_card_write+0x4d0>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 80157b4:	e0bffd0f 	ldh	r2,-12(fp)
 80157b8:	00c200b4 	movhi	r3,2050
 80157bc:	18ebcf04 	addi	r3,r3,-20676
 80157c0:	100491ba 	slli	r2,r2,6
 80157c4:	10c5883a 	add	r2,r2,r3
 80157c8:	10800904 	addi	r2,r2,36
 80157cc:	10800017 	ldw	r2,0(r2)
 80157d0:	1005003a 	cmpeq	r2,r2,zero
 80157d4:	1000751e 	bne	r2,zero,80159ac <alt_up_sd_card_write+0x4d0>
 80157d8:	e0bff80f 	ldh	r2,-32(fp)
 80157dc:	1004c03a 	cmpne	r2,r2,zero
 80157e0:	1000721e 	bne	r2,zero,80159ac <alt_up_sd_card_write+0x4d0>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 80157e4:	e0bffd0f 	ldh	r2,-12(fp)
 80157e8:	00c200b4 	movhi	r3,2050
 80157ec:	18ebcf04 	addi	r3,r3,-20676
 80157f0:	100491ba 	slli	r2,r2,6
 80157f4:	10c5883a 	add	r2,r2,r3
 80157f8:	10800804 	addi	r2,r2,32
 80157fc:	10c00017 	ldw	r3,0(r2)
 8015800:	008200b4 	movhi	r2,2050
 8015804:	10abba04 	addi	r2,r2,-20760
 8015808:	10800383 	ldbu	r2,14(r2)
 801580c:	10803fcc 	andi	r2,r2,255
 8015810:	10bfffc4 	addi	r2,r2,-1
 8015814:	1880381e 	bne	r3,r2,80158f8 <alt_up_sd_card_write+0x41c>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
 8015818:	e13ffc04 	addi	r4,fp,-16
 801581c:	8013afc0 	call	8013afc <find_first_empty_cluster>
 8015820:	1005003a 	cmpeq	r2,r2,zero
 8015824:	1000321e 	bne	r2,zero,80158f0 <alt_up_sd_card_write+0x414>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
 8015828:	e0bffd0f 	ldh	r2,-12(fp)
 801582c:	00c200b4 	movhi	r3,2050
 8015830:	18ebcf04 	addi	r3,r3,-20676
 8015834:	100491ba 	slli	r2,r2,6
 8015838:	10c5883a 	add	r2,r2,r3
 801583c:	10800704 	addi	r2,r2,28
 8015840:	11000017 	ldw	r4,0(r2)
 8015844:	e0bffc17 	ldw	r2,-16(fp)
 8015848:	117fffcc 	andi	r5,r2,65535
 801584c:	2960001c 	xori	r5,r5,32768
 8015850:	29600004 	addi	r5,r5,-32768
 8015854:	01800044 	movi	r6,1
 8015858:	8011b700 	call	8011b70 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
 801585c:	e13ffc17 	ldw	r4,-16(fp)
 8015860:	017fffc4 	movi	r5,-1
 8015864:	01800044 	movi	r6,1
 8015868:	8011b700 	call	8011b70 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
 801586c:	e0bffd0f 	ldh	r2,-12(fp)
 8015870:	00c200b4 	movhi	r3,2050
 8015874:	18ebcf04 	addi	r3,r3,-20676
 8015878:	100491ba 	slli	r2,r2,6
 801587c:	10c5883a 	add	r2,r2,r3
 8015880:	10800704 	addi	r2,r2,28
 8015884:	11000017 	ldw	r4,0(r2)
 8015888:	e0bffc17 	ldw	r2,-16(fp)
 801588c:	117fffcc 	andi	r5,r2,65535
 8015890:	2960001c 	xori	r5,r5,32768
 8015894:	29600004 	addi	r5,r5,-32768
 8015898:	000d883a 	mov	r6,zero
 801589c:	8011b700 	call	8011b70 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
 80158a0:	e13ffc17 	ldw	r4,-16(fp)
 80158a4:	017fffc4 	movi	r5,-1
 80158a8:	000d883a 	mov	r6,zero
 80158ac:	8011b700 	call	8011b70 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
 80158b0:	e0bffd0f 	ldh	r2,-12(fp)
 80158b4:	e13ffc17 	ldw	r4,-16(fp)
 80158b8:	00c200b4 	movhi	r3,2050
 80158bc:	18ebcf04 	addi	r3,r3,-20676
 80158c0:	100491ba 	slli	r2,r2,6
 80158c4:	10c5883a 	add	r2,r2,r3
 80158c8:	10800704 	addi	r2,r2,28
 80158cc:	11000015 	stw	r4,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
 80158d0:	e0bffd0f 	ldh	r2,-12(fp)
 80158d4:	00c200b4 	movhi	r3,2050
 80158d8:	18ebcf04 	addi	r3,r3,-20676
 80158dc:	100491ba 	slli	r2,r2,6
 80158e0:	10c5883a 	add	r2,r2,r3
 80158e4:	10800804 	addi	r2,r2,32
 80158e8:	10000015 	stw	zero,0(r2)
 80158ec:	00001506 	br	8015944 <alt_up_sd_card_write+0x468>
						}
						else
						{
							return false;
 80158f0:	e03fff15 	stw	zero,-4(fp)
 80158f4:	00007b06 	br	8015ae4 <alt_up_sd_card_write+0x608>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
 80158f8:	e17ffd0f 	ldh	r5,-12(fp)
 80158fc:	e0bffd0f 	ldh	r2,-12(fp)
 8015900:	00c200b4 	movhi	r3,2050
 8015904:	18ebcf04 	addi	r3,r3,-20676
 8015908:	100491ba 	slli	r2,r2,6
 801590c:	10c5883a 	add	r2,r2,r3
 8015910:	10800904 	addi	r2,r2,36
 8015914:	10c00017 	ldw	r3,0(r2)
 8015918:	008200b4 	movhi	r2,2050
 801591c:	10abba04 	addi	r2,r2,-20760
 8015920:	1080030b 	ldhu	r2,12(r2)
 8015924:	10bfffcc 	andi	r2,r2,65535
 8015928:	1889203a 	divu	r4,r3,r2
 801592c:	00c200b4 	movhi	r3,2050
 8015930:	18ebcf04 	addi	r3,r3,-20676
 8015934:	280491ba 	slli	r2,r5,6
 8015938:	10c5883a 	add	r2,r2,r3
 801593c:	10800804 	addi	r2,r2,32
 8015940:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8015944:	008200b4 	movhi	r2,2050
 8015948:	10abba04 	addi	r2,r2,-20760
 801594c:	11001417 	ldw	r4,80(r2)
 8015950:	e0bffd0f 	ldh	r2,-12(fp)
 8015954:	00c200b4 	movhi	r3,2050
 8015958:	18ebcf04 	addi	r3,r3,-20676
 801595c:	100491ba 	slli	r2,r2,6
 8015960:	10c5883a 	add	r2,r2,r3
 8015964:	10800704 	addi	r2,r2,28
 8015968:	10800017 	ldw	r2,0(r2)
 801596c:	10ffff84 	addi	r3,r2,-2
 8015970:	008200b4 	movhi	r2,2050
 8015974:	10abba04 	addi	r2,r2,-20760
 8015978:	10800383 	ldbu	r2,14(r2)
 801597c:	10803fcc 	andi	r2,r2,255
 8015980:	1885383a 	mul	r2,r3,r2
 8015984:	2089883a 	add	r4,r4,r2
 8015988:	e0bffd0f 	ldh	r2,-12(fp)
 801598c:	00c200b4 	movhi	r3,2050
 8015990:	18ebcf04 	addi	r3,r3,-20676
 8015994:	100491ba 	slli	r2,r2,6
 8015998:	10c5883a 	add	r2,r2,r3
 801599c:	10800804 	addi	r2,r2,32
 80159a0:	10800017 	ldw	r2,0(r2)
 80159a4:	2085883a 	add	r2,r4,r2
 80159a8:	e0bff915 	stw	r2,-28(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
 80159ac:	d0e6e417 	ldw	r3,-25712(gp)
 80159b0:	e0bff917 	ldw	r2,-28(fp)
 80159b4:	1885883a 	add	r2,r3,r2
 80159b8:	1007883a 	mov	r3,r2
 80159bc:	d0a6e817 	ldw	r2,-25696(gp)
 80159c0:	18800726 	beq	r3,r2,80159e0 <alt_up_sd_card_write+0x504>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 80159c4:	d166e417 	ldw	r5,-25712(gp)
 80159c8:	e13ff917 	ldw	r4,-28(fp)
 80159cc:	80119bc0 	call	80119bc <Read_Sector_Data>
 80159d0:	1004c03a 	cmpne	r2,r2,zero
 80159d4:	1000021e 	bne	r2,zero,80159e0 <alt_up_sd_card_write+0x504>
                {
					return false;
 80159d8:	e03fff15 	stw	zero,-4(fp)
 80159dc:	00004106 	br	8015ae4 <alt_up_sd_card_write+0x608>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 80159e0:	e0bff80f 	ldh	r2,-32(fp)
 80159e4:	1007883a 	mov	r3,r2
 80159e8:	d0a6e317 	ldw	r2,-25716(gp)
 80159ec:	1885883a 	add	r2,r3,r2
 80159f0:	e0fffe07 	ldb	r3,-8(fp)
 80159f4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 80159f8:	e17ffd0f 	ldh	r5,-12(fp)
 80159fc:	e0bffd0f 	ldh	r2,-12(fp)
 8015a00:	00c200b4 	movhi	r3,2050
 8015a04:	18ebcf04 	addi	r3,r3,-20676
 8015a08:	100491ba 	slli	r2,r2,6
 8015a0c:	10c5883a 	add	r2,r2,r3
 8015a10:	10800904 	addi	r2,r2,36
 8015a14:	10800017 	ldw	r2,0(r2)
 8015a18:	11000044 	addi	r4,r2,1
 8015a1c:	00c200b4 	movhi	r3,2050
 8015a20:	18ebcf04 	addi	r3,r3,-20676
 8015a24:	280491ba 	slli	r2,r5,6
 8015a28:	10c5883a 	add	r2,r2,r3
 8015a2c:	10800904 	addi	r2,r2,36
 8015a30:	11000015 	stw	r4,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
 8015a34:	e0bffd0f 	ldh	r2,-12(fp)
 8015a38:	00c200b4 	movhi	r3,2050
 8015a3c:	18ebcf04 	addi	r3,r3,-20676
 8015a40:	100491ba 	slli	r2,r2,6
 8015a44:	10c5883a 	add	r2,r2,r3
 8015a48:	10800904 	addi	r2,r2,36
 8015a4c:	11000017 	ldw	r4,0(r2)
 8015a50:	e0bffd0f 	ldh	r2,-12(fp)
 8015a54:	00c200b4 	movhi	r3,2050
 8015a58:	18ebcf04 	addi	r3,r3,-20676
 8015a5c:	100491ba 	slli	r2,r2,6
 8015a60:	10c5883a 	add	r2,r2,r3
 8015a64:	10800604 	addi	r2,r2,24
 8015a68:	10800017 	ldw	r2,0(r2)
 8015a6c:	20801736 	bltu	r4,r2,8015acc <alt_up_sd_card_write+0x5f0>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
 8015a70:	e17ffd0f 	ldh	r5,-12(fp)
 8015a74:	e0bffd0f 	ldh	r2,-12(fp)
 8015a78:	00c200b4 	movhi	r3,2050
 8015a7c:	18ebcf04 	addi	r3,r3,-20676
 8015a80:	100491ba 	slli	r2,r2,6
 8015a84:	10c5883a 	add	r2,r2,r3
 8015a88:	10800604 	addi	r2,r2,24
 8015a8c:	10800017 	ldw	r2,0(r2)
 8015a90:	11000044 	addi	r4,r2,1
 8015a94:	00c200b4 	movhi	r3,2050
 8015a98:	18ebcf04 	addi	r3,r3,-20676
 8015a9c:	280491ba 	slli	r2,r5,6
 8015aa0:	10c5883a 	add	r2,r2,r3
 8015aa4:	10800604 	addi	r2,r2,24
 8015aa8:	11000015 	stw	r4,0(r2)
				active_files[file_handle].modified = true;
 8015aac:	e0bffd0f 	ldh	r2,-12(fp)
 8015ab0:	00c200b4 	movhi	r3,2050
 8015ab4:	18ebcf04 	addi	r3,r3,-20676
 8015ab8:	100491ba 	slli	r2,r2,6
 8015abc:	10c5883a 	add	r2,r2,r3
 8015ac0:	10c00e04 	addi	r3,r2,56
 8015ac4:	00800044 	movi	r2,1
 8015ac8:	18800015 	stw	r2,0(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
 8015acc:	00800044 	movi	r2,1
 8015ad0:	d0a6e715 	stw	r2,-25700(gp)
			result = true;
 8015ad4:	00800044 	movi	r2,1
 8015ad8:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
 8015adc:	e0bffa17 	ldw	r2,-24(fp)
 8015ae0:	e0bfff15 	stw	r2,-4(fp)
 8015ae4:	e0bfff17 	ldw	r2,-4(fp)
}
 8015ae8:	e037883a 	mov	sp,fp
 8015aec:	dfc00117 	ldw	ra,4(sp)
 8015af0:	df000017 	ldw	fp,0(sp)
 8015af4:	dec00204 	addi	sp,sp,8
 8015af8:	f800283a 	ret

08015afc <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 8015afc:	defffb04 	addi	sp,sp,-20
 8015b00:	dfc00415 	stw	ra,16(sp)
 8015b04:	df000315 	stw	fp,12(sp)
 8015b08:	df000304 	addi	fp,sp,12
 8015b0c:	e13fff0d 	sth	r4,-4(fp)
    bool result = false;
 8015b10:	e03ffe15 	stw	zero,-8(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8015b14:	80146bc0 	call	80146bc <alt_up_sd_card_is_Present>
 8015b18:	1005003a 	cmpeq	r2,r2,zero
 8015b1c:	1000641e 	bne	r2,zero,8015cb0 <alt_up_sd_card_fclose+0x1b4>
 8015b20:	d0a6dd17 	ldw	r2,-25740(gp)
 8015b24:	1005003a 	cmpeq	r2,r2,zero
 8015b28:	1000611e 	bne	r2,zero,8015cb0 <alt_up_sd_card_fclose+0x1b4>
    {
        if (active_files[file_handle].in_use) 
 8015b2c:	e0bfff0f 	ldh	r2,-4(fp)
 8015b30:	00c200b4 	movhi	r3,2050
 8015b34:	18ebcf04 	addi	r3,r3,-20676
 8015b38:	100491ba 	slli	r2,r2,6
 8015b3c:	10c5883a 	add	r2,r2,r3
 8015b40:	10800f04 	addi	r2,r2,60
 8015b44:	10800017 	ldw	r2,0(r2)
 8015b48:	1005003a 	cmpeq	r2,r2,zero
 8015b4c:	1000581e 	bne	r2,zero,8015cb0 <alt_up_sd_card_fclose+0x1b4>
        {
			if (active_files[file_handle].modified)
 8015b50:	e0bfff0f 	ldh	r2,-4(fp)
 8015b54:	00c200b4 	movhi	r3,2050
 8015b58:	18ebcf04 	addi	r3,r3,-20676
 8015b5c:	100491ba 	slli	r2,r2,6
 8015b60:	10c5883a 	add	r2,r2,r3
 8015b64:	10800e04 	addi	r2,r2,56
 8015b68:	10800017 	ldw	r2,0(r2)
 8015b6c:	1005003a 	cmpeq	r2,r2,zero
 8015b70:	1000461e 	bne	r2,zero,8015c8c <alt_up_sd_card_fclose+0x190>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
 8015b74:	e0bfff0f 	ldh	r2,-4(fp)
 8015b78:	00c200b4 	movhi	r3,2050
 8015b7c:	18ebcf04 	addi	r3,r3,-20676
 8015b80:	100491ba 	slli	r2,r2,6
 8015b84:	10c5883a 	add	r2,r2,r3
 8015b88:	10800b04 	addi	r2,r2,44
 8015b8c:	10800017 	ldw	r2,0(r2)
 8015b90:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
 8015b94:	e0bfff0f 	ldh	r2,-4(fp)
 8015b98:	00c200b4 	movhi	r3,2050
 8015b9c:	18ebcf04 	addi	r3,r3,-20676
 8015ba0:	100491ba 	slli	r2,r2,6
 8015ba4:	10c5883a 	add	r2,r2,r3
 8015ba8:	10800a04 	addi	r2,r2,40
 8015bac:	10800017 	ldw	r2,0(r2)
 8015bb0:	1004c03a 	cmpne	r2,r2,zero
 8015bb4:	1000071e 	bne	r2,zero,8015bd4 <alt_up_sd_card_fclose+0xd8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
 8015bb8:	008200b4 	movhi	r2,2050
 8015bbc:	10abba04 	addi	r2,r2,-20760
 8015bc0:	10c01317 	ldw	r3,76(r2)
 8015bc4:	e0bffd17 	ldw	r2,-12(fp)
 8015bc8:	10c5883a 	add	r2,r2,r3
 8015bcc:	e0bffd15 	stw	r2,-12(fp)
 8015bd0:	00001406 	br	8015c24 <alt_up_sd_card_fclose+0x128>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 8015bd4:	008200b4 	movhi	r2,2050
 8015bd8:	10abba04 	addi	r2,r2,-20760
 8015bdc:	10c01417 	ldw	r3,80(r2)
 8015be0:	e0bffd17 	ldw	r2,-12(fp)
 8015be4:	1889883a 	add	r4,r3,r2
 8015be8:	e0bfff0f 	ldh	r2,-4(fp)
 8015bec:	00c200b4 	movhi	r3,2050
 8015bf0:	18ebcf04 	addi	r3,r3,-20676
 8015bf4:	100491ba 	slli	r2,r2,6
 8015bf8:	10c5883a 	add	r2,r2,r3
 8015bfc:	10800a04 	addi	r2,r2,40
 8015c00:	10800017 	ldw	r2,0(r2)
 8015c04:	10ffff84 	addi	r3,r2,-2
 8015c08:	008200b4 	movhi	r2,2050
 8015c0c:	10abba04 	addi	r2,r2,-20760
 8015c10:	10800383 	ldbu	r2,14(r2)
 8015c14:	10803fcc 	andi	r2,r2,255
 8015c18:	1885383a 	mul	r2,r3,r2
 8015c1c:	2085883a 	add	r2,r4,r2
 8015c20:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
 8015c24:	e13ffd17 	ldw	r4,-12(fp)
 8015c28:	d166e417 	ldw	r5,-25712(gp)
 8015c2c:	80119bc0 	call	80119bc <Read_Sector_Data>
 8015c30:	1005003a 	cmpeq	r2,r2,zero
 8015c34:	1000151e 	bne	r2,zero,8015c8c <alt_up_sd_card_fclose+0x190>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
 8015c38:	e0bfff0f 	ldh	r2,-4(fp)
 8015c3c:	00c200b4 	movhi	r3,2050
 8015c40:	18ebcf04 	addi	r3,r3,-20676
 8015c44:	100491ba 	slli	r2,r2,6
 8015c48:	10c5883a 	add	r2,r2,r3
 8015c4c:	10800c04 	addi	r2,r2,48
 8015c50:	1080000b 	ldhu	r2,0(r2)
 8015c54:	113fffcc 	andi	r4,r2,65535
 8015c58:	2120001c 	xori	r4,r4,32768
 8015c5c:	21200004 	addi	r4,r4,-32768
 8015c60:	e0bfff0f 	ldh	r2,-4(fp)
 8015c64:	100491ba 	slli	r2,r2,6
 8015c68:	1007883a 	mov	r3,r2
 8015c6c:	008200b4 	movhi	r2,2050
 8015c70:	10abcf04 	addi	r2,r2,-20676
 8015c74:	188b883a 	add	r5,r3,r2
 8015c78:	80120880 	call	8012088 <Write_File_Record_At_Offset>
 8015c7c:	1005003a 	cmpeq	r2,r2,zero
 8015c80:	1000021e 	bne	r2,zero,8015c8c <alt_up_sd_card_fclose+0x190>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 8015c84:	801196c0 	call	801196c <Save_Modified_Sector>
 8015c88:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 8015c8c:	e0bfff0f 	ldh	r2,-4(fp)
 8015c90:	00c200b4 	movhi	r3,2050
 8015c94:	18ebcf04 	addi	r3,r3,-20676
 8015c98:	100491ba 	slli	r2,r2,6
 8015c9c:	10c5883a 	add	r2,r2,r3
 8015ca0:	10800f04 	addi	r2,r2,60
 8015ca4:	10000015 	stw	zero,0(r2)
			result = true;
 8015ca8:	00800044 	movi	r2,1
 8015cac:	e0bffe15 	stw	r2,-8(fp)
        }
    }
    
    return result;
 8015cb0:	e0bffe17 	ldw	r2,-8(fp)
}
 8015cb4:	e037883a 	mov	sp,fp
 8015cb8:	dfc00117 	ldw	ra,4(sp)
 8015cbc:	df000017 	ldw	fp,0(sp)
 8015cc0:	dec00204 	addi	sp,sp,8
 8015cc4:	f800283a 	ret

08015cc8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8015cc8:	defff404 	addi	sp,sp,-48
 8015ccc:	df000b15 	stw	fp,44(sp)
 8015cd0:	df000b04 	addi	fp,sp,44
 8015cd4:	e13ffb15 	stw	r4,-20(fp)
 8015cd8:	e17ffc15 	stw	r5,-16(fp)
 8015cdc:	e1bffd15 	stw	r6,-12(fp)
 8015ce0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8015ce4:	e03ff915 	stw	zero,-28(fp)
 8015ce8:	008200b4 	movhi	r2,2050
 8015cec:	10aba904 	addi	r2,r2,-20828
 8015cf0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8015cf4:	1005003a 	cmpeq	r2,r2,zero
 8015cf8:	1000411e 	bne	r2,zero,8015e00 <alt_alarm_start+0x138>
  {
    if (alarm)
 8015cfc:	e0bffb17 	ldw	r2,-20(fp)
 8015d00:	1005003a 	cmpeq	r2,r2,zero
 8015d04:	10003b1e 	bne	r2,zero,8015df4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 8015d08:	e0fffb17 	ldw	r3,-20(fp)
 8015d0c:	e0bffd17 	ldw	r2,-12(fp)
 8015d10:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 8015d14:	e0fffb17 	ldw	r3,-20(fp)
 8015d18:	e0bffe17 	ldw	r2,-8(fp)
 8015d1c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015d20:	0005303a 	rdctl	r2,status
 8015d24:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015d28:	e0fff817 	ldw	r3,-32(fp)
 8015d2c:	00bfff84 	movi	r2,-2
 8015d30:	1884703a 	and	r2,r3,r2
 8015d34:	1001703a 	wrctl	status,r2
  
  return context;
 8015d38:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8015d3c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8015d40:	008200b4 	movhi	r2,2050
 8015d44:	10abaa04 	addi	r2,r2,-20824
 8015d48:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8015d4c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8015d50:	e0fffc17 	ldw	r3,-16(fp)
 8015d54:	e0bff917 	ldw	r2,-28(fp)
 8015d58:	1885883a 	add	r2,r3,r2
 8015d5c:	10c00044 	addi	r3,r2,1
 8015d60:	e0bffb17 	ldw	r2,-20(fp)
 8015d64:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8015d68:	e0bffb17 	ldw	r2,-20(fp)
 8015d6c:	10c00217 	ldw	r3,8(r2)
 8015d70:	e0bff917 	ldw	r2,-28(fp)
 8015d74:	1880042e 	bgeu	r3,r2,8015d88 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 8015d78:	e0fffb17 	ldw	r3,-20(fp)
 8015d7c:	00800044 	movi	r2,1
 8015d80:	18800405 	stb	r2,16(r3)
 8015d84:	00000206 	br	8015d90 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 8015d88:	e0bffb17 	ldw	r2,-20(fp)
 8015d8c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8015d90:	e0fffb17 	ldw	r3,-20(fp)
 8015d94:	008200b4 	movhi	r2,2050
 8015d98:	10a4cd04 	addi	r2,r2,-27852
 8015d9c:	e0bff615 	stw	r2,-40(fp)
 8015da0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8015da4:	e0fff717 	ldw	r3,-36(fp)
 8015da8:	e0bff617 	ldw	r2,-40(fp)
 8015dac:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8015db0:	e0bff617 	ldw	r2,-40(fp)
 8015db4:	10c00017 	ldw	r3,0(r2)
 8015db8:	e0bff717 	ldw	r2,-36(fp)
 8015dbc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8015dc0:	e0bff617 	ldw	r2,-40(fp)
 8015dc4:	10c00017 	ldw	r3,0(r2)
 8015dc8:	e0bff717 	ldw	r2,-36(fp)
 8015dcc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8015dd0:	e0fff617 	ldw	r3,-40(fp)
 8015dd4:	e0bff717 	ldw	r2,-36(fp)
 8015dd8:	18800015 	stw	r2,0(r3)
 8015ddc:	e0bffa17 	ldw	r2,-24(fp)
 8015de0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015de4:	e0bff517 	ldw	r2,-44(fp)
 8015de8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8015dec:	e03fff15 	stw	zero,-4(fp)
 8015df0:	00000506 	br	8015e08 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 8015df4:	00bffa84 	movi	r2,-22
 8015df8:	e0bfff15 	stw	r2,-4(fp)
 8015dfc:	00000206 	br	8015e08 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 8015e00:	00bfde84 	movi	r2,-134
 8015e04:	e0bfff15 	stw	r2,-4(fp)
 8015e08:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 8015e0c:	e037883a 	mov	sp,fp
 8015e10:	df000017 	ldw	fp,0(sp)
 8015e14:	dec00104 	addi	sp,sp,4
 8015e18:	f800283a 	ret

08015e1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8015e1c:	defffe04 	addi	sp,sp,-8
 8015e20:	df000115 	stw	fp,4(sp)
 8015e24:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8015e28:	e03fff15 	stw	zero,-4(fp)
 8015e2c:	00000506 	br	8015e44 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8015e30:	e0bfff17 	ldw	r2,-4(fp)
 8015e34:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8015e38:	e0bfff17 	ldw	r2,-4(fp)
 8015e3c:	10800804 	addi	r2,r2,32
 8015e40:	e0bfff15 	stw	r2,-4(fp)
 8015e44:	e0bfff17 	ldw	r2,-4(fp)
 8015e48:	10880030 	cmpltui	r2,r2,8192
 8015e4c:	103ff81e 	bne	r2,zero,8015e30 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8015e50:	e037883a 	mov	sp,fp
 8015e54:	df000017 	ldw	fp,0(sp)
 8015e58:	dec00104 	addi	sp,sp,4
 8015e5c:	f800283a 	ret

08015e60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8015e60:	defff904 	addi	sp,sp,-28
 8015e64:	dfc00615 	stw	ra,24(sp)
 8015e68:	df000515 	stw	fp,20(sp)
 8015e6c:	df000504 	addi	fp,sp,20
 8015e70:	e13ffd15 	stw	r4,-12(fp)
 8015e74:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8015e78:	e0bffd17 	ldw	r2,-12(fp)
 8015e7c:	1005003a 	cmpeq	r2,r2,zero
 8015e80:	1000041e 	bne	r2,zero,8015e94 <alt_dev_llist_insert+0x34>
 8015e84:	e0bffd17 	ldw	r2,-12(fp)
 8015e88:	10800217 	ldw	r2,8(r2)
 8015e8c:	1004c03a 	cmpne	r2,r2,zero
 8015e90:	1000071e 	bne	r2,zero,8015eb0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 8015e94:	8015f140 	call	8015f14 <alt_get_errno>
 8015e98:	1007883a 	mov	r3,r2
 8015e9c:	00800584 	movi	r2,22
 8015ea0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8015ea4:	00bffa84 	movi	r2,-22
 8015ea8:	e0bfff15 	stw	r2,-4(fp)
 8015eac:	00001306 	br	8015efc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8015eb0:	e0fffd17 	ldw	r3,-12(fp)
 8015eb4:	e0bffe17 	ldw	r2,-8(fp)
 8015eb8:	e0bffb15 	stw	r2,-20(fp)
 8015ebc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8015ec0:	e0fffc17 	ldw	r3,-16(fp)
 8015ec4:	e0bffb17 	ldw	r2,-20(fp)
 8015ec8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8015ecc:	e0bffb17 	ldw	r2,-20(fp)
 8015ed0:	10c00017 	ldw	r3,0(r2)
 8015ed4:	e0bffc17 	ldw	r2,-16(fp)
 8015ed8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8015edc:	e0bffb17 	ldw	r2,-20(fp)
 8015ee0:	10c00017 	ldw	r3,0(r2)
 8015ee4:	e0bffc17 	ldw	r2,-16(fp)
 8015ee8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8015eec:	e0fffb17 	ldw	r3,-20(fp)
 8015ef0:	e0bffc17 	ldw	r2,-16(fp)
 8015ef4:	18800015 	stw	r2,0(r3)

  return 0;  
 8015ef8:	e03fff15 	stw	zero,-4(fp)
 8015efc:	e0bfff17 	ldw	r2,-4(fp)
}
 8015f00:	e037883a 	mov	sp,fp
 8015f04:	dfc00117 	ldw	ra,4(sp)
 8015f08:	df000017 	ldw	fp,0(sp)
 8015f0c:	dec00204 	addi	sp,sp,8
 8015f10:	f800283a 	ret

08015f14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015f14:	defffd04 	addi	sp,sp,-12
 8015f18:	dfc00215 	stw	ra,8(sp)
 8015f1c:	df000115 	stw	fp,4(sp)
 8015f20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8015f24:	008200b4 	movhi	r2,2050
 8015f28:	10a4ca04 	addi	r2,r2,-27864
 8015f2c:	10800017 	ldw	r2,0(r2)
 8015f30:	1005003a 	cmpeq	r2,r2,zero
 8015f34:	1000061e 	bne	r2,zero,8015f50 <alt_get_errno+0x3c>
 8015f38:	008200b4 	movhi	r2,2050
 8015f3c:	10a4ca04 	addi	r2,r2,-27864
 8015f40:	10800017 	ldw	r2,0(r2)
 8015f44:	103ee83a 	callr	r2
 8015f48:	e0bfff15 	stw	r2,-4(fp)
 8015f4c:	00000306 	br	8015f5c <alt_get_errno+0x48>
 8015f50:	008200b4 	movhi	r2,2050
 8015f54:	10ab9404 	addi	r2,r2,-20912
 8015f58:	e0bfff15 	stw	r2,-4(fp)
 8015f5c:	e0bfff17 	ldw	r2,-4(fp)
}
 8015f60:	e037883a 	mov	sp,fp
 8015f64:	dfc00117 	ldw	ra,4(sp)
 8015f68:	df000017 	ldw	fp,0(sp)
 8015f6c:	dec00204 	addi	sp,sp,8
 8015f70:	f800283a 	ret

08015f74 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8015f74:	defffd04 	addi	sp,sp,-12
 8015f78:	dfc00215 	stw	ra,8(sp)
 8015f7c:	df000115 	stw	fp,4(sp)
 8015f80:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8015f84:	00bfff04 	movi	r2,-4
 8015f88:	00c20074 	movhi	r3,2049
 8015f8c:	18dc0104 	addi	r3,r3,28676
 8015f90:	1885883a 	add	r2,r3,r2
 8015f94:	e0bfff15 	stw	r2,-4(fp)
 8015f98:	00000606 	br	8015fb4 <_do_ctors+0x40>
        (*ctor) (); 
 8015f9c:	e0bfff17 	ldw	r2,-4(fp)
 8015fa0:	10800017 	ldw	r2,0(r2)
 8015fa4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8015fa8:	e0bfff17 	ldw	r2,-4(fp)
 8015fac:	10bfff04 	addi	r2,r2,-4
 8015fb0:	e0bfff15 	stw	r2,-4(fp)
 8015fb4:	e0ffff17 	ldw	r3,-4(fp)
 8015fb8:	00820074 	movhi	r2,2049
 8015fbc:	109c0004 	addi	r2,r2,28672
 8015fc0:	18bff62e 	bgeu	r3,r2,8015f9c <_do_ctors+0x28>
        (*ctor) (); 
}
 8015fc4:	e037883a 	mov	sp,fp
 8015fc8:	dfc00117 	ldw	ra,4(sp)
 8015fcc:	df000017 	ldw	fp,0(sp)
 8015fd0:	dec00204 	addi	sp,sp,8
 8015fd4:	f800283a 	ret

08015fd8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8015fd8:	defffd04 	addi	sp,sp,-12
 8015fdc:	dfc00215 	stw	ra,8(sp)
 8015fe0:	df000115 	stw	fp,4(sp)
 8015fe4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8015fe8:	00bfff04 	movi	r2,-4
 8015fec:	00c20074 	movhi	r3,2049
 8015ff0:	18dc0104 	addi	r3,r3,28676
 8015ff4:	1885883a 	add	r2,r3,r2
 8015ff8:	e0bfff15 	stw	r2,-4(fp)
 8015ffc:	00000606 	br	8016018 <_do_dtors+0x40>
        (*dtor) (); 
 8016000:	e0bfff17 	ldw	r2,-4(fp)
 8016004:	10800017 	ldw	r2,0(r2)
 8016008:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801600c:	e0bfff17 	ldw	r2,-4(fp)
 8016010:	10bfff04 	addi	r2,r2,-4
 8016014:	e0bfff15 	stw	r2,-4(fp)
 8016018:	e0ffff17 	ldw	r3,-4(fp)
 801601c:	00820074 	movhi	r2,2049
 8016020:	109c0104 	addi	r2,r2,28676
 8016024:	18bff62e 	bgeu	r3,r2,8016000 <_do_dtors+0x28>
        (*dtor) (); 
}
 8016028:	e037883a 	mov	sp,fp
 801602c:	dfc00117 	ldw	ra,4(sp)
 8016030:	df000017 	ldw	fp,0(sp)
 8016034:	dec00204 	addi	sp,sp,8
 8016038:	f800283a 	ret

0801603c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801603c:	defff904 	addi	sp,sp,-28
 8016040:	dfc00615 	stw	ra,24(sp)
 8016044:	df000515 	stw	fp,20(sp)
 8016048:	df000504 	addi	fp,sp,20
 801604c:	e13ffd15 	stw	r4,-12(fp)
 8016050:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8016054:	e0bffe17 	ldw	r2,-8(fp)
 8016058:	10800017 	ldw	r2,0(r2)
 801605c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8016060:	e13ffd17 	ldw	r4,-12(fp)
 8016064:	80061000 	call	8006100 <strlen>
 8016068:	10800044 	addi	r2,r2,1
 801606c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8016070:	00000d06 	br	80160a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8016074:	e0bffc17 	ldw	r2,-16(fp)
 8016078:	11000217 	ldw	r4,8(r2)
 801607c:	e1bffb17 	ldw	r6,-20(fp)
 8016080:	e17ffd17 	ldw	r5,-12(fp)
 8016084:	8016c440 	call	8016c44 <memcmp>
 8016088:	1004c03a 	cmpne	r2,r2,zero
 801608c:	1000031e 	bne	r2,zero,801609c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8016090:	e0bffc17 	ldw	r2,-16(fp)
 8016094:	e0bfff15 	stw	r2,-4(fp)
 8016098:	00000706 	br	80160b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 801609c:	e0bffc17 	ldw	r2,-16(fp)
 80160a0:	10800017 	ldw	r2,0(r2)
 80160a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80160a8:	e0fffe17 	ldw	r3,-8(fp)
 80160ac:	e0bffc17 	ldw	r2,-16(fp)
 80160b0:	10fff01e 	bne	r2,r3,8016074 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80160b4:	e03fff15 	stw	zero,-4(fp)
 80160b8:	e0bfff17 	ldw	r2,-4(fp)
}
 80160bc:	e037883a 	mov	sp,fp
 80160c0:	dfc00117 	ldw	ra,4(sp)
 80160c4:	df000017 	ldw	fp,0(sp)
 80160c8:	dec00204 	addi	sp,sp,8
 80160cc:	f800283a 	ret

080160d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80160d0:	defffe04 	addi	sp,sp,-8
 80160d4:	dfc00115 	stw	ra,4(sp)
 80160d8:	df000015 	stw	fp,0(sp)
 80160dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80160e0:	0009883a 	mov	r4,zero
 80160e4:	01500004 	movi	r5,16384
 80160e8:	8016b680 	call	8016b68 <alt_icache_flush>
#endif
}
 80160ec:	e037883a 	mov	sp,fp
 80160f0:	dfc00117 	ldw	ra,4(sp)
 80160f4:	df000017 	ldw	fp,0(sp)
 80160f8:	dec00204 	addi	sp,sp,8
 80160fc:	f800283a 	ret

08016100 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8016100:	defff904 	addi	sp,sp,-28
 8016104:	dfc00615 	stw	ra,24(sp)
 8016108:	df000515 	stw	fp,20(sp)
 801610c:	df000504 	addi	fp,sp,20
 8016110:	e13ffc15 	stw	r4,-16(fp)
 8016114:	e17ffd15 	stw	r5,-12(fp)
 8016118:	e1bffe15 	stw	r6,-8(fp)
 801611c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8016120:	e0800217 	ldw	r2,8(fp)
 8016124:	d8800015 	stw	r2,0(sp)
 8016128:	e13ffc17 	ldw	r4,-16(fp)
 801612c:	e17ffd17 	ldw	r5,-12(fp)
 8016130:	e1bffe17 	ldw	r6,-8(fp)
 8016134:	e1ffff17 	ldw	r7,-4(fp)
 8016138:	80162d40 	call	80162d4 <alt_iic_isr_register>
}  
 801613c:	e037883a 	mov	sp,fp
 8016140:	dfc00117 	ldw	ra,4(sp)
 8016144:	df000017 	ldw	fp,0(sp)
 8016148:	dec00204 	addi	sp,sp,8
 801614c:	f800283a 	ret

08016150 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8016150:	defff904 	addi	sp,sp,-28
 8016154:	df000615 	stw	fp,24(sp)
 8016158:	df000604 	addi	fp,sp,24
 801615c:	e13ffe15 	stw	r4,-8(fp)
 8016160:	e17fff15 	stw	r5,-4(fp)
 8016164:	e0bfff17 	ldw	r2,-4(fp)
 8016168:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801616c:	0005303a 	rdctl	r2,status
 8016170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016174:	e0fffb17 	ldw	r3,-20(fp)
 8016178:	00bfff84 	movi	r2,-2
 801617c:	1884703a 	and	r2,r3,r2
 8016180:	1001703a 	wrctl	status,r2
  
  return context;
 8016184:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8016188:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 801618c:	e0fffc17 	ldw	r3,-16(fp)
 8016190:	00800044 	movi	r2,1
 8016194:	10c4983a 	sll	r2,r2,r3
 8016198:	1007883a 	mov	r3,r2
 801619c:	008200b4 	movhi	r2,2050
 80161a0:	10aba804 	addi	r2,r2,-20832
 80161a4:	10800017 	ldw	r2,0(r2)
 80161a8:	1886b03a 	or	r3,r3,r2
 80161ac:	008200b4 	movhi	r2,2050
 80161b0:	10aba804 	addi	r2,r2,-20832
 80161b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80161b8:	008200b4 	movhi	r2,2050
 80161bc:	10aba804 	addi	r2,r2,-20832
 80161c0:	10800017 	ldw	r2,0(r2)
 80161c4:	100170fa 	wrctl	ienable,r2
 80161c8:	e0bffd17 	ldw	r2,-12(fp)
 80161cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80161d0:	e0bffa17 	ldw	r2,-24(fp)
 80161d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80161d8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 80161dc:	e037883a 	mov	sp,fp
 80161e0:	df000017 	ldw	fp,0(sp)
 80161e4:	dec00104 	addi	sp,sp,4
 80161e8:	f800283a 	ret

080161ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80161ec:	defff904 	addi	sp,sp,-28
 80161f0:	df000615 	stw	fp,24(sp)
 80161f4:	df000604 	addi	fp,sp,24
 80161f8:	e13ffe15 	stw	r4,-8(fp)
 80161fc:	e17fff15 	stw	r5,-4(fp)
 8016200:	e0bfff17 	ldw	r2,-4(fp)
 8016204:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016208:	0005303a 	rdctl	r2,status
 801620c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016210:	e0fffb17 	ldw	r3,-20(fp)
 8016214:	00bfff84 	movi	r2,-2
 8016218:	1884703a 	and	r2,r3,r2
 801621c:	1001703a 	wrctl	status,r2
  
  return context;
 8016220:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8016224:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 8016228:	e0fffc17 	ldw	r3,-16(fp)
 801622c:	00800044 	movi	r2,1
 8016230:	10c4983a 	sll	r2,r2,r3
 8016234:	0084303a 	nor	r2,zero,r2
 8016238:	1007883a 	mov	r3,r2
 801623c:	008200b4 	movhi	r2,2050
 8016240:	10aba804 	addi	r2,r2,-20832
 8016244:	10800017 	ldw	r2,0(r2)
 8016248:	1886703a 	and	r3,r3,r2
 801624c:	008200b4 	movhi	r2,2050
 8016250:	10aba804 	addi	r2,r2,-20832
 8016254:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8016258:	008200b4 	movhi	r2,2050
 801625c:	10aba804 	addi	r2,r2,-20832
 8016260:	10800017 	ldw	r2,0(r2)
 8016264:	100170fa 	wrctl	ienable,r2
 8016268:	e0bffd17 	ldw	r2,-12(fp)
 801626c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016270:	e0bffa17 	ldw	r2,-24(fp)
 8016274:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8016278:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 801627c:	e037883a 	mov	sp,fp
 8016280:	df000017 	ldw	fp,0(sp)
 8016284:	dec00104 	addi	sp,sp,4
 8016288:	f800283a 	ret

0801628c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 801628c:	defffc04 	addi	sp,sp,-16
 8016290:	df000315 	stw	fp,12(sp)
 8016294:	df000304 	addi	fp,sp,12
 8016298:	e13ffe15 	stw	r4,-8(fp)
 801629c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80162a0:	000530fa 	rdctl	r2,ienable
 80162a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80162a8:	e0ffff17 	ldw	r3,-4(fp)
 80162ac:	00800044 	movi	r2,1
 80162b0:	10c4983a 	sll	r2,r2,r3
 80162b4:	1007883a 	mov	r3,r2
 80162b8:	e0bffd17 	ldw	r2,-12(fp)
 80162bc:	1884703a 	and	r2,r3,r2
 80162c0:	1004c03a 	cmpne	r2,r2,zero
}
 80162c4:	e037883a 	mov	sp,fp
 80162c8:	df000017 	ldw	fp,0(sp)
 80162cc:	dec00104 	addi	sp,sp,4
 80162d0:	f800283a 	ret

080162d4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80162d4:	defff404 	addi	sp,sp,-48
 80162d8:	dfc00b15 	stw	ra,44(sp)
 80162dc:	df000a15 	stw	fp,40(sp)
 80162e0:	df000a04 	addi	fp,sp,40
 80162e4:	e13ffb15 	stw	r4,-20(fp)
 80162e8:	e17ffc15 	stw	r5,-16(fp)
 80162ec:	e1bffd15 	stw	r6,-12(fp)
 80162f0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 80162f4:	00bffa84 	movi	r2,-22
 80162f8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80162fc:	e0bffc17 	ldw	r2,-16(fp)
 8016300:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8016304:	e0bff917 	ldw	r2,-28(fp)
 8016308:	10800808 	cmpgei	r2,r2,32
 801630c:	1000291e 	bne	r2,zero,80163b4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016310:	0005303a 	rdctl	r2,status
 8016314:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016318:	e0fff717 	ldw	r3,-36(fp)
 801631c:	00bfff84 	movi	r2,-2
 8016320:	1884703a 	and	r2,r3,r2
 8016324:	1001703a 	wrctl	status,r2
  
  return context;
 8016328:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801632c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8016330:	e0bff917 	ldw	r2,-28(fp)
 8016334:	00c200b4 	movhi	r3,2050
 8016338:	18ed0f04 	addi	r3,r3,-19396
 801633c:	100490fa 	slli	r2,r2,3
 8016340:	10c7883a 	add	r3,r2,r3
 8016344:	e0bffd17 	ldw	r2,-12(fp)
 8016348:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 801634c:	e0bff917 	ldw	r2,-28(fp)
 8016350:	00c200b4 	movhi	r3,2050
 8016354:	18ed0f04 	addi	r3,r3,-19396
 8016358:	100490fa 	slli	r2,r2,3
 801635c:	10c5883a 	add	r2,r2,r3
 8016360:	10c00104 	addi	r3,r2,4
 8016364:	e0bffe17 	ldw	r2,-8(fp)
 8016368:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801636c:	e0bffd17 	ldw	r2,-12(fp)
 8016370:	1005003a 	cmpeq	r2,r2,zero
 8016374:	1000051e 	bne	r2,zero,801638c <alt_iic_isr_register+0xb8>
 8016378:	e17ff917 	ldw	r5,-28(fp)
 801637c:	e13ffb17 	ldw	r4,-20(fp)
 8016380:	80161500 	call	8016150 <alt_ic_irq_enable>
 8016384:	e0bfff15 	stw	r2,-4(fp)
 8016388:	00000406 	br	801639c <alt_iic_isr_register+0xc8>
 801638c:	e17ff917 	ldw	r5,-28(fp)
 8016390:	e13ffb17 	ldw	r4,-20(fp)
 8016394:	80161ec0 	call	80161ec <alt_ic_irq_disable>
 8016398:	e0bfff15 	stw	r2,-4(fp)
 801639c:	e0bfff17 	ldw	r2,-4(fp)
 80163a0:	e0bffa15 	stw	r2,-24(fp)
 80163a4:	e0bff817 	ldw	r2,-32(fp)
 80163a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80163ac:	e0bff617 	ldw	r2,-40(fp)
 80163b0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80163b4:	e0bffa17 	ldw	r2,-24(fp)
}
 80163b8:	e037883a 	mov	sp,fp
 80163bc:	dfc00117 	ldw	ra,4(sp)
 80163c0:	df000017 	ldw	fp,0(sp)
 80163c4:	dec00204 	addi	sp,sp,8
 80163c8:	f800283a 	ret

080163cc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80163cc:	defff904 	addi	sp,sp,-28
 80163d0:	dfc00615 	stw	ra,24(sp)
 80163d4:	df000515 	stw	fp,20(sp)
 80163d8:	df000504 	addi	fp,sp,20
 80163dc:	e13ffc15 	stw	r4,-16(fp)
 80163e0:	e17ffd15 	stw	r5,-12(fp)
 80163e4:	e1bffe15 	stw	r6,-8(fp)
 80163e8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 80163ec:	e13ffd17 	ldw	r4,-12(fp)
 80163f0:	e17ffe17 	ldw	r5,-8(fp)
 80163f4:	e1bfff17 	ldw	r6,-4(fp)
 80163f8:	80165e40 	call	80165e4 <open>
 80163fc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8016400:	e0bffb17 	ldw	r2,-20(fp)
 8016404:	1004803a 	cmplt	r2,r2,zero
 8016408:	10001c1e 	bne	r2,zero,801647c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 801640c:	e0bffb17 	ldw	r2,-20(fp)
 8016410:	00c200b4 	movhi	r3,2050
 8016414:	18e02704 	addi	r3,r3,-32612
 8016418:	10800324 	muli	r2,r2,12
 801641c:	10c5883a 	add	r2,r2,r3
 8016420:	10c00017 	ldw	r3,0(r2)
 8016424:	e0bffc17 	ldw	r2,-16(fp)
 8016428:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801642c:	e0bffb17 	ldw	r2,-20(fp)
 8016430:	00c200b4 	movhi	r3,2050
 8016434:	18e02704 	addi	r3,r3,-32612
 8016438:	10800324 	muli	r2,r2,12
 801643c:	10c5883a 	add	r2,r2,r3
 8016440:	10800104 	addi	r2,r2,4
 8016444:	10c00017 	ldw	r3,0(r2)
 8016448:	e0bffc17 	ldw	r2,-16(fp)
 801644c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8016450:	e0bffb17 	ldw	r2,-20(fp)
 8016454:	00c200b4 	movhi	r3,2050
 8016458:	18e02704 	addi	r3,r3,-32612
 801645c:	10800324 	muli	r2,r2,12
 8016460:	10c5883a 	add	r2,r2,r3
 8016464:	10800204 	addi	r2,r2,8
 8016468:	10c00017 	ldw	r3,0(r2)
 801646c:	e0bffc17 	ldw	r2,-16(fp)
 8016470:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8016474:	e13ffb17 	ldw	r4,-20(fp)
 8016478:	800f33c0 	call	800f33c <alt_release_fd>
  }
} 
 801647c:	e037883a 	mov	sp,fp
 8016480:	dfc00117 	ldw	ra,4(sp)
 8016484:	df000017 	ldw	fp,0(sp)
 8016488:	dec00204 	addi	sp,sp,8
 801648c:	f800283a 	ret

08016490 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8016490:	defffb04 	addi	sp,sp,-20
 8016494:	dfc00415 	stw	ra,16(sp)
 8016498:	df000315 	stw	fp,12(sp)
 801649c:	df000304 	addi	fp,sp,12
 80164a0:	e13ffd15 	stw	r4,-12(fp)
 80164a4:	e17ffe15 	stw	r5,-8(fp)
 80164a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80164ac:	010200b4 	movhi	r4,2050
 80164b0:	21202a04 	addi	r4,r4,-32600
 80164b4:	e17ffd17 	ldw	r5,-12(fp)
 80164b8:	01800044 	movi	r6,1
 80164bc:	01c07fc4 	movi	r7,511
 80164c0:	80163cc0 	call	80163cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80164c4:	010200b4 	movhi	r4,2050
 80164c8:	21202704 	addi	r4,r4,-32612
 80164cc:	e17ffe17 	ldw	r5,-8(fp)
 80164d0:	000d883a 	mov	r6,zero
 80164d4:	01c07fc4 	movi	r7,511
 80164d8:	80163cc0 	call	80163cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80164dc:	010200b4 	movhi	r4,2050
 80164e0:	21202d04 	addi	r4,r4,-32588
 80164e4:	e17fff17 	ldw	r5,-4(fp)
 80164e8:	01800044 	movi	r6,1
 80164ec:	01c07fc4 	movi	r7,511
 80164f0:	80163cc0 	call	80163cc <alt_open_fd>
}  
 80164f4:	e037883a 	mov	sp,fp
 80164f8:	dfc00117 	ldw	ra,4(sp)
 80164fc:	df000017 	ldw	fp,0(sp)
 8016500:	dec00204 	addi	sp,sp,8
 8016504:	f800283a 	ret

08016508 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8016508:	defffc04 	addi	sp,sp,-16
 801650c:	df000315 	stw	fp,12(sp)
 8016510:	df000304 	addi	fp,sp,12
 8016514:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8016518:	e0bffe17 	ldw	r2,-8(fp)
 801651c:	10800217 	ldw	r2,8(r2)
 8016520:	10d00034 	orhi	r3,r2,16384
 8016524:	e0bffe17 	ldw	r2,-8(fp)
 8016528:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801652c:	e03ffd15 	stw	zero,-12(fp)
 8016530:	00002006 	br	80165b4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8016534:	e0bffd17 	ldw	r2,-12(fp)
 8016538:	00c200b4 	movhi	r3,2050
 801653c:	18e02704 	addi	r3,r3,-32612
 8016540:	10800324 	muli	r2,r2,12
 8016544:	10c5883a 	add	r2,r2,r3
 8016548:	10c00017 	ldw	r3,0(r2)
 801654c:	e0bffe17 	ldw	r2,-8(fp)
 8016550:	10800017 	ldw	r2,0(r2)
 8016554:	1880141e 	bne	r3,r2,80165a8 <alt_file_locked+0xa0>
 8016558:	e0bffd17 	ldw	r2,-12(fp)
 801655c:	00c200b4 	movhi	r3,2050
 8016560:	18e02704 	addi	r3,r3,-32612
 8016564:	10800324 	muli	r2,r2,12
 8016568:	10c5883a 	add	r2,r2,r3
 801656c:	10800204 	addi	r2,r2,8
 8016570:	10800017 	ldw	r2,0(r2)
 8016574:	1004403a 	cmpge	r2,r2,zero
 8016578:	10000b1e 	bne	r2,zero,80165a8 <alt_file_locked+0xa0>
 801657c:	e0bffd17 	ldw	r2,-12(fp)
 8016580:	10800324 	muli	r2,r2,12
 8016584:	1007883a 	mov	r3,r2
 8016588:	008200b4 	movhi	r2,2050
 801658c:	10a02704 	addi	r2,r2,-32612
 8016590:	1887883a 	add	r3,r3,r2
 8016594:	e0bffe17 	ldw	r2,-8(fp)
 8016598:	18800326 	beq	r3,r2,80165a8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 801659c:	00bffcc4 	movi	r2,-13
 80165a0:	e0bfff15 	stw	r2,-4(fp)
 80165a4:	00000a06 	br	80165d0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80165a8:	e0bffd17 	ldw	r2,-12(fp)
 80165ac:	10800044 	addi	r2,r2,1
 80165b0:	e0bffd15 	stw	r2,-12(fp)
 80165b4:	008200b4 	movhi	r2,2050
 80165b8:	10a4c904 	addi	r2,r2,-27868
 80165bc:	10800017 	ldw	r2,0(r2)
 80165c0:	1007883a 	mov	r3,r2
 80165c4:	e0bffd17 	ldw	r2,-12(fp)
 80165c8:	18bfda2e 	bgeu	r3,r2,8016534 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80165cc:	e03fff15 	stw	zero,-4(fp)
 80165d0:	e0bfff17 	ldw	r2,-4(fp)
}
 80165d4:	e037883a 	mov	sp,fp
 80165d8:	df000017 	ldw	fp,0(sp)
 80165dc:	dec00104 	addi	sp,sp,4
 80165e0:	f800283a 	ret

080165e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80165e4:	defff404 	addi	sp,sp,-48
 80165e8:	dfc00b15 	stw	ra,44(sp)
 80165ec:	df000a15 	stw	fp,40(sp)
 80165f0:	df000a04 	addi	fp,sp,40
 80165f4:	e13ffb15 	stw	r4,-20(fp)
 80165f8:	e17ffc15 	stw	r5,-16(fp)
 80165fc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8016600:	00bfffc4 	movi	r2,-1
 8016604:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8016608:	00bffb44 	movi	r2,-19
 801660c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8016610:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8016614:	e13ffb17 	ldw	r4,-20(fp)
 8016618:	014200b4 	movhi	r5,2050
 801661c:	2964c704 	addi	r5,r5,-27876
 8016620:	801603c0 	call	801603c <alt_find_dev>
 8016624:	e0bffa15 	stw	r2,-24(fp)
 8016628:	e0bffa17 	ldw	r2,-24(fp)
 801662c:	1004c03a 	cmpne	r2,r2,zero
 8016630:	1000051e 	bne	r2,zero,8016648 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8016634:	e13ffb17 	ldw	r4,-20(fp)
 8016638:	80169900 	call	8016990 <alt_find_file>
 801663c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8016640:	00800044 	movi	r2,1
 8016644:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8016648:	e0bffa17 	ldw	r2,-24(fp)
 801664c:	1005003a 	cmpeq	r2,r2,zero
 8016650:	1000301e 	bne	r2,zero,8016714 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8016654:	e13ffa17 	ldw	r4,-24(fp)
 8016658:	8016ab00 	call	8016ab0 <alt_get_fd>
 801665c:	e0bff815 	stw	r2,-32(fp)
 8016660:	e0bff817 	ldw	r2,-32(fp)
 8016664:	1004403a 	cmpge	r2,r2,zero
 8016668:	1000031e 	bne	r2,zero,8016678 <open+0x94>
    {
      status = index;
 801666c:	e0bff817 	ldw	r2,-32(fp)
 8016670:	e0bff715 	stw	r2,-36(fp)
 8016674:	00002906 	br	801671c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 8016678:	e0bff817 	ldw	r2,-32(fp)
 801667c:	10800324 	muli	r2,r2,12
 8016680:	1007883a 	mov	r3,r2
 8016684:	008200b4 	movhi	r2,2050
 8016688:	10a02704 	addi	r2,r2,-32612
 801668c:	1885883a 	add	r2,r3,r2
 8016690:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8016694:	e0fffc17 	ldw	r3,-16(fp)
 8016698:	00900034 	movhi	r2,16384
 801669c:	10bfffc4 	addi	r2,r2,-1
 80166a0:	1886703a 	and	r3,r3,r2
 80166a4:	e0bff917 	ldw	r2,-28(fp)
 80166a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80166ac:	e0bff617 	ldw	r2,-40(fp)
 80166b0:	1004c03a 	cmpne	r2,r2,zero
 80166b4:	1000061e 	bne	r2,zero,80166d0 <open+0xec>
 80166b8:	e13ff917 	ldw	r4,-28(fp)
 80166bc:	80165080 	call	8016508 <alt_file_locked>
 80166c0:	e0bff715 	stw	r2,-36(fp)
 80166c4:	e0bff717 	ldw	r2,-36(fp)
 80166c8:	1004803a 	cmplt	r2,r2,zero
 80166cc:	1000131e 	bne	r2,zero,801671c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80166d0:	e0bffa17 	ldw	r2,-24(fp)
 80166d4:	10800317 	ldw	r2,12(r2)
 80166d8:	1005003a 	cmpeq	r2,r2,zero
 80166dc:	1000091e 	bne	r2,zero,8016704 <open+0x120>
 80166e0:	e0bffa17 	ldw	r2,-24(fp)
 80166e4:	10800317 	ldw	r2,12(r2)
 80166e8:	e13ff917 	ldw	r4,-28(fp)
 80166ec:	e17ffb17 	ldw	r5,-20(fp)
 80166f0:	e1bffc17 	ldw	r6,-16(fp)
 80166f4:	e1fffd17 	ldw	r7,-12(fp)
 80166f8:	103ee83a 	callr	r2
 80166fc:	e0bfff15 	stw	r2,-4(fp)
 8016700:	00000106 	br	8016708 <open+0x124>
 8016704:	e03fff15 	stw	zero,-4(fp)
 8016708:	e0bfff17 	ldw	r2,-4(fp)
 801670c:	e0bff715 	stw	r2,-36(fp)
 8016710:	00000206 	br	801671c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8016714:	00bffb44 	movi	r2,-19
 8016718:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801671c:	e0bff717 	ldw	r2,-36(fp)
 8016720:	1004403a 	cmpge	r2,r2,zero
 8016724:	1000091e 	bne	r2,zero,801674c <open+0x168>
  {
    alt_release_fd (index);  
 8016728:	e13ff817 	ldw	r4,-32(fp)
 801672c:	800f33c0 	call	800f33c <alt_release_fd>
    ALT_ERRNO = -status;
 8016730:	801676c0 	call	801676c <alt_get_errno>
 8016734:	e0fff717 	ldw	r3,-36(fp)
 8016738:	00c7c83a 	sub	r3,zero,r3
 801673c:	10c00015 	stw	r3,0(r2)
    return -1;
 8016740:	00bfffc4 	movi	r2,-1
 8016744:	e0bffe15 	stw	r2,-8(fp)
 8016748:	00000206 	br	8016754 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 801674c:	e0bff817 	ldw	r2,-32(fp)
 8016750:	e0bffe15 	stw	r2,-8(fp)
 8016754:	e0bffe17 	ldw	r2,-8(fp)
}
 8016758:	e037883a 	mov	sp,fp
 801675c:	dfc00117 	ldw	ra,4(sp)
 8016760:	df000017 	ldw	fp,0(sp)
 8016764:	dec00204 	addi	sp,sp,8
 8016768:	f800283a 	ret

0801676c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801676c:	defffd04 	addi	sp,sp,-12
 8016770:	dfc00215 	stw	ra,8(sp)
 8016774:	df000115 	stw	fp,4(sp)
 8016778:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 801677c:	008200b4 	movhi	r2,2050
 8016780:	10a4ca04 	addi	r2,r2,-27864
 8016784:	10800017 	ldw	r2,0(r2)
 8016788:	1005003a 	cmpeq	r2,r2,zero
 801678c:	1000061e 	bne	r2,zero,80167a8 <alt_get_errno+0x3c>
 8016790:	008200b4 	movhi	r2,2050
 8016794:	10a4ca04 	addi	r2,r2,-27864
 8016798:	10800017 	ldw	r2,0(r2)
 801679c:	103ee83a 	callr	r2
 80167a0:	e0bfff15 	stw	r2,-4(fp)
 80167a4:	00000306 	br	80167b4 <alt_get_errno+0x48>
 80167a8:	008200b4 	movhi	r2,2050
 80167ac:	10ab9404 	addi	r2,r2,-20912
 80167b0:	e0bfff15 	stw	r2,-4(fp)
 80167b4:	e0bfff17 	ldw	r2,-4(fp)
}
 80167b8:	e037883a 	mov	sp,fp
 80167bc:	dfc00117 	ldw	ra,4(sp)
 80167c0:	df000017 	ldw	fp,0(sp)
 80167c4:	dec00204 	addi	sp,sp,8
 80167c8:	f800283a 	ret

080167cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80167cc:	defffa04 	addi	sp,sp,-24
 80167d0:	df000515 	stw	fp,20(sp)
 80167d4:	df000504 	addi	fp,sp,20
 80167d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80167dc:	0005303a 	rdctl	r2,status
 80167e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80167e4:	e0fffd17 	ldw	r3,-12(fp)
 80167e8:	00bfff84 	movi	r2,-2
 80167ec:	1884703a 	and	r2,r3,r2
 80167f0:	1001703a 	wrctl	status,r2
  
  return context;
 80167f4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80167f8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 80167fc:	e0bfff17 	ldw	r2,-4(fp)
 8016800:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8016804:	e0bffc17 	ldw	r2,-16(fp)
 8016808:	10c00017 	ldw	r3,0(r2)
 801680c:	e0bffc17 	ldw	r2,-16(fp)
 8016810:	10800117 	ldw	r2,4(r2)
 8016814:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8016818:	e0bffc17 	ldw	r2,-16(fp)
 801681c:	10c00117 	ldw	r3,4(r2)
 8016820:	e0bffc17 	ldw	r2,-16(fp)
 8016824:	10800017 	ldw	r2,0(r2)
 8016828:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801682c:	e0fffc17 	ldw	r3,-16(fp)
 8016830:	e0bffc17 	ldw	r2,-16(fp)
 8016834:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8016838:	e0fffc17 	ldw	r3,-16(fp)
 801683c:	e0bffc17 	ldw	r2,-16(fp)
 8016840:	18800015 	stw	r2,0(r3)
 8016844:	e0bffe17 	ldw	r2,-8(fp)
 8016848:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801684c:	e0bffb17 	ldw	r2,-20(fp)
 8016850:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8016854:	e037883a 	mov	sp,fp
 8016858:	df000017 	ldw	fp,0(sp)
 801685c:	dec00104 	addi	sp,sp,4
 8016860:	f800283a 	ret

08016864 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8016864:	defffb04 	addi	sp,sp,-20
 8016868:	dfc00415 	stw	ra,16(sp)
 801686c:	df000315 	stw	fp,12(sp)
 8016870:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8016874:	d0a00e17 	ldw	r2,-32712(gp)
 8016878:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 801687c:	d0a6eb17 	ldw	r2,-25684(gp)
 8016880:	10800044 	addi	r2,r2,1
 8016884:	d0a6eb15 	stw	r2,-25684(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8016888:	00003106 	br	8016950 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 801688c:	e0bffe17 	ldw	r2,-8(fp)
 8016890:	10800017 	ldw	r2,0(r2)
 8016894:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8016898:	e0bffe17 	ldw	r2,-8(fp)
 801689c:	10800403 	ldbu	r2,16(r2)
 80168a0:	10803fcc 	andi	r2,r2,255
 80168a4:	1005003a 	cmpeq	r2,r2,zero
 80168a8:	1000051e 	bne	r2,zero,80168c0 <alt_tick+0x5c>
 80168ac:	d0a6eb17 	ldw	r2,-25684(gp)
 80168b0:	1004c03a 	cmpne	r2,r2,zero
 80168b4:	1000021e 	bne	r2,zero,80168c0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 80168b8:	e0bffe17 	ldw	r2,-8(fp)
 80168bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80168c0:	e0bffe17 	ldw	r2,-8(fp)
 80168c4:	10c00217 	ldw	r3,8(r2)
 80168c8:	d0a6eb17 	ldw	r2,-25684(gp)
 80168cc:	10c01e36 	bltu	r2,r3,8016948 <alt_tick+0xe4>
 80168d0:	e0bffe17 	ldw	r2,-8(fp)
 80168d4:	10800403 	ldbu	r2,16(r2)
 80168d8:	10803fcc 	andi	r2,r2,255
 80168dc:	1004c03a 	cmpne	r2,r2,zero
 80168e0:	1000191e 	bne	r2,zero,8016948 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 80168e4:	e0bffe17 	ldw	r2,-8(fp)
 80168e8:	10c00317 	ldw	r3,12(r2)
 80168ec:	e0bffe17 	ldw	r2,-8(fp)
 80168f0:	11000517 	ldw	r4,20(r2)
 80168f4:	183ee83a 	callr	r3
 80168f8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80168fc:	e0bffd17 	ldw	r2,-12(fp)
 8016900:	1004c03a 	cmpne	r2,r2,zero
 8016904:	1000031e 	bne	r2,zero,8016914 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 8016908:	e13ffe17 	ldw	r4,-8(fp)
 801690c:	80167cc0 	call	80167cc <alt_alarm_stop>
 8016910:	00000d06 	br	8016948 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 8016914:	e0bffe17 	ldw	r2,-8(fp)
 8016918:	10c00217 	ldw	r3,8(r2)
 801691c:	e0bffd17 	ldw	r2,-12(fp)
 8016920:	1887883a 	add	r3,r3,r2
 8016924:	e0bffe17 	ldw	r2,-8(fp)
 8016928:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 801692c:	e0bffe17 	ldw	r2,-8(fp)
 8016930:	10c00217 	ldw	r3,8(r2)
 8016934:	d0a6eb17 	ldw	r2,-25684(gp)
 8016938:	1880032e 	bgeu	r3,r2,8016948 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 801693c:	e0fffe17 	ldw	r3,-8(fp)
 8016940:	00800044 	movi	r2,1
 8016944:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8016948:	e0bfff17 	ldw	r2,-4(fp)
 801694c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8016950:	d0e00e04 	addi	r3,gp,-32712
 8016954:	e0bffe17 	ldw	r2,-8(fp)
 8016958:	10ffcc1e 	bne	r2,r3,801688c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 801695c:	e037883a 	mov	sp,fp
 8016960:	dfc00117 	ldw	ra,4(sp)
 8016964:	df000017 	ldw	fp,0(sp)
 8016968:	dec00204 	addi	sp,sp,8
 801696c:	f800283a 	ret

08016970 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8016970:	deffff04 	addi	sp,sp,-4
 8016974:	df000015 	stw	fp,0(sp)
 8016978:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801697c:	000170fa 	wrctl	ienable,zero
}
 8016980:	e037883a 	mov	sp,fp
 8016984:	df000017 	ldw	fp,0(sp)
 8016988:	dec00104 	addi	sp,sp,4
 801698c:	f800283a 	ret

08016990 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8016990:	defffa04 	addi	sp,sp,-24
 8016994:	dfc00515 	stw	ra,20(sp)
 8016998:	df000415 	stw	fp,16(sp)
 801699c:	df000404 	addi	fp,sp,16
 80169a0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80169a4:	008200b4 	movhi	r2,2050
 80169a8:	10a4c504 	addi	r2,r2,-27884
 80169ac:	10800017 	ldw	r2,0(r2)
 80169b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80169b4:	00003306 	br	8016a84 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 80169b8:	e0bffd17 	ldw	r2,-12(fp)
 80169bc:	11000217 	ldw	r4,8(r2)
 80169c0:	80061000 	call	8006100 <strlen>
 80169c4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 80169c8:	e0bffd17 	ldw	r2,-12(fp)
 80169cc:	10c00217 	ldw	r3,8(r2)
 80169d0:	e0bffc17 	ldw	r2,-16(fp)
 80169d4:	1885883a 	add	r2,r3,r2
 80169d8:	10bfffc4 	addi	r2,r2,-1
 80169dc:	10800003 	ldbu	r2,0(r2)
 80169e0:	10803fcc 	andi	r2,r2,255
 80169e4:	1080201c 	xori	r2,r2,128
 80169e8:	10bfe004 	addi	r2,r2,-128
 80169ec:	10800bd8 	cmpnei	r2,r2,47
 80169f0:	1000031e 	bne	r2,zero,8016a00 <alt_find_file+0x70>
    {
      len -= 1;
 80169f4:	e0bffc17 	ldw	r2,-16(fp)
 80169f8:	10bfffc4 	addi	r2,r2,-1
 80169fc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8016a00:	e0bffc17 	ldw	r2,-16(fp)
 8016a04:	1007883a 	mov	r3,r2
 8016a08:	e0bffe17 	ldw	r2,-8(fp)
 8016a0c:	1885883a 	add	r2,r3,r2
 8016a10:	10800003 	ldbu	r2,0(r2)
 8016a14:	10803fcc 	andi	r2,r2,255
 8016a18:	1080201c 	xori	r2,r2,128
 8016a1c:	10bfe004 	addi	r2,r2,-128
 8016a20:	10800be0 	cmpeqi	r2,r2,47
 8016a24:	10000a1e 	bne	r2,zero,8016a50 <alt_find_file+0xc0>
 8016a28:	e0bffc17 	ldw	r2,-16(fp)
 8016a2c:	1007883a 	mov	r3,r2
 8016a30:	e0bffe17 	ldw	r2,-8(fp)
 8016a34:	1885883a 	add	r2,r3,r2
 8016a38:	10800003 	ldbu	r2,0(r2)
 8016a3c:	10803fcc 	andi	r2,r2,255
 8016a40:	1080201c 	xori	r2,r2,128
 8016a44:	10bfe004 	addi	r2,r2,-128
 8016a48:	1004c03a 	cmpne	r2,r2,zero
 8016a4c:	10000a1e 	bne	r2,zero,8016a78 <alt_find_file+0xe8>
 8016a50:	e0bffd17 	ldw	r2,-12(fp)
 8016a54:	11000217 	ldw	r4,8(r2)
 8016a58:	e1bffc17 	ldw	r6,-16(fp)
 8016a5c:	e17ffe17 	ldw	r5,-8(fp)
 8016a60:	8016c440 	call	8016c44 <memcmp>
 8016a64:	1004c03a 	cmpne	r2,r2,zero
 8016a68:	1000031e 	bne	r2,zero,8016a78 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8016a6c:	e0bffd17 	ldw	r2,-12(fp)
 8016a70:	e0bfff15 	stw	r2,-4(fp)
 8016a74:	00000806 	br	8016a98 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8016a78:	e0bffd17 	ldw	r2,-12(fp)
 8016a7c:	10800017 	ldw	r2,0(r2)
 8016a80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8016a84:	00c200b4 	movhi	r3,2050
 8016a88:	18e4c504 	addi	r3,r3,-27884
 8016a8c:	e0bffd17 	ldw	r2,-12(fp)
 8016a90:	10ffc91e 	bne	r2,r3,80169b8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8016a94:	e03fff15 	stw	zero,-4(fp)
 8016a98:	e0bfff17 	ldw	r2,-4(fp)
}
 8016a9c:	e037883a 	mov	sp,fp
 8016aa0:	dfc00117 	ldw	ra,4(sp)
 8016aa4:	df000017 	ldw	fp,0(sp)
 8016aa8:	dec00204 	addi	sp,sp,8
 8016aac:	f800283a 	ret

08016ab0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8016ab0:	defffc04 	addi	sp,sp,-16
 8016ab4:	df000315 	stw	fp,12(sp)
 8016ab8:	df000304 	addi	fp,sp,12
 8016abc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8016ac0:	00bffa04 	movi	r2,-24
 8016ac4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8016ac8:	e03ffe15 	stw	zero,-8(fp)
 8016acc:	00001e06 	br	8016b48 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 8016ad0:	e0bffe17 	ldw	r2,-8(fp)
 8016ad4:	00c200b4 	movhi	r3,2050
 8016ad8:	18e02704 	addi	r3,r3,-32612
 8016adc:	10800324 	muli	r2,r2,12
 8016ae0:	10c5883a 	add	r2,r2,r3
 8016ae4:	10800017 	ldw	r2,0(r2)
 8016ae8:	1004c03a 	cmpne	r2,r2,zero
 8016aec:	1000131e 	bne	r2,zero,8016b3c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 8016af0:	e0bffe17 	ldw	r2,-8(fp)
 8016af4:	00c200b4 	movhi	r3,2050
 8016af8:	18e02704 	addi	r3,r3,-32612
 8016afc:	10800324 	muli	r2,r2,12
 8016b00:	10c7883a 	add	r3,r2,r3
 8016b04:	e0bfff17 	ldw	r2,-4(fp)
 8016b08:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 8016b0c:	008200b4 	movhi	r2,2050
 8016b10:	10a4c904 	addi	r2,r2,-27868
 8016b14:	10c00017 	ldw	r3,0(r2)
 8016b18:	e0bffe17 	ldw	r2,-8(fp)
 8016b1c:	1880040e 	bge	r3,r2,8016b30 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 8016b20:	00c200b4 	movhi	r3,2050
 8016b24:	18e4c904 	addi	r3,r3,-27868
 8016b28:	e0bffe17 	ldw	r2,-8(fp)
 8016b2c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 8016b30:	e0bffe17 	ldw	r2,-8(fp)
 8016b34:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8016b38:	00000606 	br	8016b54 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8016b3c:	e0bffe17 	ldw	r2,-8(fp)
 8016b40:	10800044 	addi	r2,r2,1
 8016b44:	e0bffe15 	stw	r2,-8(fp)
 8016b48:	e0bffe17 	ldw	r2,-8(fp)
 8016b4c:	10800810 	cmplti	r2,r2,32
 8016b50:	103fdf1e 	bne	r2,zero,8016ad0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8016b54:	e0bffd17 	ldw	r2,-12(fp)
}
 8016b58:	e037883a 	mov	sp,fp
 8016b5c:	df000017 	ldw	fp,0(sp)
 8016b60:	dec00104 	addi	sp,sp,4
 8016b64:	f800283a 	ret

08016b68 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8016b68:	defffb04 	addi	sp,sp,-20
 8016b6c:	df000415 	stw	fp,16(sp)
 8016b70:	df000404 	addi	fp,sp,16
 8016b74:	e13ffe15 	stw	r4,-8(fp)
 8016b78:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8016b7c:	e0bfff17 	ldw	r2,-4(fp)
 8016b80:	10900070 	cmpltui	r2,r2,16385
 8016b84:	1000021e 	bne	r2,zero,8016b90 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8016b88:	00900004 	movi	r2,16384
 8016b8c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8016b90:	e0fffe17 	ldw	r3,-8(fp)
 8016b94:	e0bfff17 	ldw	r2,-4(fp)
 8016b98:	1885883a 	add	r2,r3,r2
 8016b9c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8016ba0:	e0bffe17 	ldw	r2,-8(fp)
 8016ba4:	e0bffd15 	stw	r2,-12(fp)
 8016ba8:	00000506 	br	8016bc0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8016bac:	e0bffd17 	ldw	r2,-12(fp)
 8016bb0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8016bb4:	e0bffd17 	ldw	r2,-12(fp)
 8016bb8:	10800804 	addi	r2,r2,32
 8016bbc:	e0bffd15 	stw	r2,-12(fp)
 8016bc0:	e0fffd17 	ldw	r3,-12(fp)
 8016bc4:	e0bffc17 	ldw	r2,-16(fp)
 8016bc8:	18bff836 	bltu	r3,r2,8016bac <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8016bcc:	e0bffe17 	ldw	r2,-8(fp)
 8016bd0:	108007cc 	andi	r2,r2,31
 8016bd4:	1005003a 	cmpeq	r2,r2,zero
 8016bd8:	1000021e 	bne	r2,zero,8016be4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8016bdc:	e0bffd17 	ldw	r2,-12(fp)
 8016be0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8016be4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8016be8:	e037883a 	mov	sp,fp
 8016bec:	df000017 	ldw	fp,0(sp)
 8016bf0:	dec00104 	addi	sp,sp,4
 8016bf4:	f800283a 	ret

08016bf8 <atexit>:
 8016bf8:	200b883a 	mov	r5,r4
 8016bfc:	000d883a 	mov	r6,zero
 8016c00:	0009883a 	mov	r4,zero
 8016c04:	000f883a 	mov	r7,zero
 8016c08:	8016cb81 	jmpi	8016cb8 <__register_exitproc>

08016c0c <exit>:
 8016c0c:	defffe04 	addi	sp,sp,-8
 8016c10:	000b883a 	mov	r5,zero
 8016c14:	dc000015 	stw	r16,0(sp)
 8016c18:	dfc00115 	stw	ra,4(sp)
 8016c1c:	2021883a 	mov	r16,r4
 8016c20:	8016df00 	call	8016df0 <__call_exitprocs>
 8016c24:	008200b4 	movhi	r2,2050
 8016c28:	10a4c004 	addi	r2,r2,-27904
 8016c2c:	11000017 	ldw	r4,0(r2)
 8016c30:	20800f17 	ldw	r2,60(r4)
 8016c34:	10000126 	beq	r2,zero,8016c3c <exit+0x30>
 8016c38:	103ee83a 	callr	r2
 8016c3c:	8009883a 	mov	r4,r16
 8016c40:	8016fe00 	call	8016fe0 <_exit>

08016c44 <memcmp>:
 8016c44:	00c000c4 	movi	r3,3
 8016c48:	1980032e 	bgeu	r3,r6,8016c58 <memcmp+0x14>
 8016c4c:	2144b03a 	or	r2,r4,r5
 8016c50:	10c4703a 	and	r2,r2,r3
 8016c54:	10000f26 	beq	r2,zero,8016c94 <memcmp+0x50>
 8016c58:	31ffffc4 	addi	r7,r6,-1
 8016c5c:	3000061e 	bne	r6,zero,8016c78 <memcmp+0x34>
 8016c60:	00000a06 	br	8016c8c <memcmp+0x48>
 8016c64:	39ffffc4 	addi	r7,r7,-1
 8016c68:	00bfffc4 	movi	r2,-1
 8016c6c:	21000044 	addi	r4,r4,1
 8016c70:	29400044 	addi	r5,r5,1
 8016c74:	38800526 	beq	r7,r2,8016c8c <memcmp+0x48>
 8016c78:	20c00003 	ldbu	r3,0(r4)
 8016c7c:	28800003 	ldbu	r2,0(r5)
 8016c80:	18bff826 	beq	r3,r2,8016c64 <memcmp+0x20>
 8016c84:	1885c83a 	sub	r2,r3,r2
 8016c88:	f800283a 	ret
 8016c8c:	0005883a 	mov	r2,zero
 8016c90:	f800283a 	ret
 8016c94:	180f883a 	mov	r7,r3
 8016c98:	20c00017 	ldw	r3,0(r4)
 8016c9c:	28800017 	ldw	r2,0(r5)
 8016ca0:	18bfed1e 	bne	r3,r2,8016c58 <memcmp+0x14>
 8016ca4:	31bfff04 	addi	r6,r6,-4
 8016ca8:	21000104 	addi	r4,r4,4
 8016cac:	29400104 	addi	r5,r5,4
 8016cb0:	39bff936 	bltu	r7,r6,8016c98 <memcmp+0x54>
 8016cb4:	003fe806 	br	8016c58 <memcmp+0x14>

08016cb8 <__register_exitproc>:
 8016cb8:	defffa04 	addi	sp,sp,-24
 8016cbc:	008200b4 	movhi	r2,2050
 8016cc0:	10a4c004 	addi	r2,r2,-27904
 8016cc4:	dc000015 	stw	r16,0(sp)
 8016cc8:	14000017 	ldw	r16,0(r2)
 8016ccc:	dd000415 	stw	r20,16(sp)
 8016cd0:	2829883a 	mov	r20,r5
 8016cd4:	81405217 	ldw	r5,328(r16)
 8016cd8:	dcc00315 	stw	r19,12(sp)
 8016cdc:	dc800215 	stw	r18,8(sp)
 8016ce0:	dc400115 	stw	r17,4(sp)
 8016ce4:	dfc00515 	stw	ra,20(sp)
 8016ce8:	2023883a 	mov	r17,r4
 8016cec:	3027883a 	mov	r19,r6
 8016cf0:	3825883a 	mov	r18,r7
 8016cf4:	28002526 	beq	r5,zero,8016d8c <__register_exitproc+0xd4>
 8016cf8:	29000117 	ldw	r4,4(r5)
 8016cfc:	008007c4 	movi	r2,31
 8016d00:	11002716 	blt	r2,r4,8016da0 <__register_exitproc+0xe8>
 8016d04:	8800101e 	bne	r17,zero,8016d48 <__register_exitproc+0x90>
 8016d08:	2105883a 	add	r2,r4,r4
 8016d0c:	1085883a 	add	r2,r2,r2
 8016d10:	20c00044 	addi	r3,r4,1
 8016d14:	1145883a 	add	r2,r2,r5
 8016d18:	0009883a 	mov	r4,zero
 8016d1c:	15000215 	stw	r20,8(r2)
 8016d20:	28c00115 	stw	r3,4(r5)
 8016d24:	2005883a 	mov	r2,r4
 8016d28:	dfc00517 	ldw	ra,20(sp)
 8016d2c:	dd000417 	ldw	r20,16(sp)
 8016d30:	dcc00317 	ldw	r19,12(sp)
 8016d34:	dc800217 	ldw	r18,8(sp)
 8016d38:	dc400117 	ldw	r17,4(sp)
 8016d3c:	dc000017 	ldw	r16,0(sp)
 8016d40:	dec00604 	addi	sp,sp,24
 8016d44:	f800283a 	ret
 8016d48:	29802204 	addi	r6,r5,136
 8016d4c:	00800044 	movi	r2,1
 8016d50:	110e983a 	sll	r7,r2,r4
 8016d54:	30c04017 	ldw	r3,256(r6)
 8016d58:	2105883a 	add	r2,r4,r4
 8016d5c:	1085883a 	add	r2,r2,r2
 8016d60:	1185883a 	add	r2,r2,r6
 8016d64:	19c6b03a 	or	r3,r3,r7
 8016d68:	14802015 	stw	r18,128(r2)
 8016d6c:	14c00015 	stw	r19,0(r2)
 8016d70:	00800084 	movi	r2,2
 8016d74:	30c04015 	stw	r3,256(r6)
 8016d78:	88bfe31e 	bne	r17,r2,8016d08 <__register_exitproc+0x50>
 8016d7c:	30804117 	ldw	r2,260(r6)
 8016d80:	11c4b03a 	or	r2,r2,r7
 8016d84:	30804115 	stw	r2,260(r6)
 8016d88:	003fdf06 	br	8016d08 <__register_exitproc+0x50>
 8016d8c:	008200b4 	movhi	r2,2050
 8016d90:	10ad4f04 	addi	r2,r2,-19140
 8016d94:	100b883a 	mov	r5,r2
 8016d98:	80805215 	stw	r2,328(r16)
 8016d9c:	003fd606 	br	8016cf8 <__register_exitproc+0x40>
 8016da0:	00820034 	movhi	r2,2048
 8016da4:	1094a904 	addi	r2,r2,21156
 8016da8:	1000021e 	bne	r2,zero,8016db4 <__register_exitproc+0xfc>
 8016dac:	013fffc4 	movi	r4,-1
 8016db0:	003fdc06 	br	8016d24 <__register_exitproc+0x6c>
 8016db4:	01006404 	movi	r4,400
 8016db8:	103ee83a 	callr	r2
 8016dbc:	1007883a 	mov	r3,r2
 8016dc0:	103ffa26 	beq	r2,zero,8016dac <__register_exitproc+0xf4>
 8016dc4:	80805217 	ldw	r2,328(r16)
 8016dc8:	180b883a 	mov	r5,r3
 8016dcc:	18000115 	stw	zero,4(r3)
 8016dd0:	18800015 	stw	r2,0(r3)
 8016dd4:	80c05215 	stw	r3,328(r16)
 8016dd8:	18006215 	stw	zero,392(r3)
 8016ddc:	18006315 	stw	zero,396(r3)
 8016de0:	0009883a 	mov	r4,zero
 8016de4:	883fc826 	beq	r17,zero,8016d08 <__register_exitproc+0x50>
 8016de8:	003fd706 	br	8016d48 <__register_exitproc+0x90>

08016dec <register_fini>:
 8016dec:	f800283a 	ret

08016df0 <__call_exitprocs>:
 8016df0:	008200b4 	movhi	r2,2050
 8016df4:	10a4c004 	addi	r2,r2,-27904
 8016df8:	10800017 	ldw	r2,0(r2)
 8016dfc:	defff304 	addi	sp,sp,-52
 8016e00:	df000b15 	stw	fp,44(sp)
 8016e04:	d8800115 	stw	r2,4(sp)
 8016e08:	00820034 	movhi	r2,2048
 8016e0c:	1094a404 	addi	r2,r2,21136
 8016e10:	1005003a 	cmpeq	r2,r2,zero
 8016e14:	d8800215 	stw	r2,8(sp)
 8016e18:	d8800117 	ldw	r2,4(sp)
 8016e1c:	dd400815 	stw	r21,32(sp)
 8016e20:	dd000715 	stw	r20,28(sp)
 8016e24:	10805204 	addi	r2,r2,328
 8016e28:	dfc00c15 	stw	ra,48(sp)
 8016e2c:	ddc00a15 	stw	r23,40(sp)
 8016e30:	dd800915 	stw	r22,36(sp)
 8016e34:	dcc00615 	stw	r19,24(sp)
 8016e38:	dc800515 	stw	r18,20(sp)
 8016e3c:	dc400415 	stw	r17,16(sp)
 8016e40:	dc000315 	stw	r16,12(sp)
 8016e44:	282b883a 	mov	r21,r5
 8016e48:	2039883a 	mov	fp,r4
 8016e4c:	d8800015 	stw	r2,0(sp)
 8016e50:	2829003a 	cmpeq	r20,r5,zero
 8016e54:	d8800117 	ldw	r2,4(sp)
 8016e58:	14405217 	ldw	r17,328(r2)
 8016e5c:	88001026 	beq	r17,zero,8016ea0 <__call_exitprocs+0xb0>
 8016e60:	ddc00017 	ldw	r23,0(sp)
 8016e64:	88800117 	ldw	r2,4(r17)
 8016e68:	8c802204 	addi	r18,r17,136
 8016e6c:	143fffc4 	addi	r16,r2,-1
 8016e70:	80000916 	blt	r16,zero,8016e98 <__call_exitprocs+0xa8>
 8016e74:	05bfffc4 	movi	r22,-1
 8016e78:	a000151e 	bne	r20,zero,8016ed0 <__call_exitprocs+0xe0>
 8016e7c:	8409883a 	add	r4,r16,r16
 8016e80:	2105883a 	add	r2,r4,r4
 8016e84:	1485883a 	add	r2,r2,r18
 8016e88:	10c02017 	ldw	r3,128(r2)
 8016e8c:	a8c01126 	beq	r21,r3,8016ed4 <__call_exitprocs+0xe4>
 8016e90:	843fffc4 	addi	r16,r16,-1
 8016e94:	85bff81e 	bne	r16,r22,8016e78 <__call_exitprocs+0x88>
 8016e98:	d8800217 	ldw	r2,8(sp)
 8016e9c:	10003126 	beq	r2,zero,8016f64 <__call_exitprocs+0x174>
 8016ea0:	dfc00c17 	ldw	ra,48(sp)
 8016ea4:	df000b17 	ldw	fp,44(sp)
 8016ea8:	ddc00a17 	ldw	r23,40(sp)
 8016eac:	dd800917 	ldw	r22,36(sp)
 8016eb0:	dd400817 	ldw	r21,32(sp)
 8016eb4:	dd000717 	ldw	r20,28(sp)
 8016eb8:	dcc00617 	ldw	r19,24(sp)
 8016ebc:	dc800517 	ldw	r18,20(sp)
 8016ec0:	dc400417 	ldw	r17,16(sp)
 8016ec4:	dc000317 	ldw	r16,12(sp)
 8016ec8:	dec00d04 	addi	sp,sp,52
 8016ecc:	f800283a 	ret
 8016ed0:	8409883a 	add	r4,r16,r16
 8016ed4:	88c00117 	ldw	r3,4(r17)
 8016ed8:	2105883a 	add	r2,r4,r4
 8016edc:	1445883a 	add	r2,r2,r17
 8016ee0:	18ffffc4 	addi	r3,r3,-1
 8016ee4:	11800217 	ldw	r6,8(r2)
 8016ee8:	1c001526 	beq	r3,r16,8016f40 <__call_exitprocs+0x150>
 8016eec:	10000215 	stw	zero,8(r2)
 8016ef0:	303fe726 	beq	r6,zero,8016e90 <__call_exitprocs+0xa0>
 8016ef4:	00c00044 	movi	r3,1
 8016ef8:	1c06983a 	sll	r3,r3,r16
 8016efc:	90804017 	ldw	r2,256(r18)
 8016f00:	8cc00117 	ldw	r19,4(r17)
 8016f04:	1884703a 	and	r2,r3,r2
 8016f08:	10001426 	beq	r2,zero,8016f5c <__call_exitprocs+0x16c>
 8016f0c:	90804117 	ldw	r2,260(r18)
 8016f10:	1884703a 	and	r2,r3,r2
 8016f14:	10000c1e 	bne	r2,zero,8016f48 <__call_exitprocs+0x158>
 8016f18:	2105883a 	add	r2,r4,r4
 8016f1c:	1485883a 	add	r2,r2,r18
 8016f20:	11400017 	ldw	r5,0(r2)
 8016f24:	e009883a 	mov	r4,fp
 8016f28:	303ee83a 	callr	r6
 8016f2c:	88800117 	ldw	r2,4(r17)
 8016f30:	98bfc81e 	bne	r19,r2,8016e54 <__call_exitprocs+0x64>
 8016f34:	b8800017 	ldw	r2,0(r23)
 8016f38:	147fd526 	beq	r2,r17,8016e90 <__call_exitprocs+0xa0>
 8016f3c:	003fc506 	br	8016e54 <__call_exitprocs+0x64>
 8016f40:	8c000115 	stw	r16,4(r17)
 8016f44:	003fea06 	br	8016ef0 <__call_exitprocs+0x100>
 8016f48:	2105883a 	add	r2,r4,r4
 8016f4c:	1485883a 	add	r2,r2,r18
 8016f50:	11000017 	ldw	r4,0(r2)
 8016f54:	303ee83a 	callr	r6
 8016f58:	003ff406 	br	8016f2c <__call_exitprocs+0x13c>
 8016f5c:	303ee83a 	callr	r6
 8016f60:	003ff206 	br	8016f2c <__call_exitprocs+0x13c>
 8016f64:	88800117 	ldw	r2,4(r17)
 8016f68:	1000081e 	bne	r2,zero,8016f8c <__call_exitprocs+0x19c>
 8016f6c:	89000017 	ldw	r4,0(r17)
 8016f70:	20000726 	beq	r4,zero,8016f90 <__call_exitprocs+0x1a0>
 8016f74:	b9000015 	stw	r4,0(r23)
 8016f78:	8809883a 	mov	r4,r17
 8016f7c:	80052900 	call	8005290 <free>
 8016f80:	bc400017 	ldw	r17,0(r23)
 8016f84:	883fb71e 	bne	r17,zero,8016e64 <__call_exitprocs+0x74>
 8016f88:	003fc506 	br	8016ea0 <__call_exitprocs+0xb0>
 8016f8c:	89000017 	ldw	r4,0(r17)
 8016f90:	882f883a 	mov	r23,r17
 8016f94:	2023883a 	mov	r17,r4
 8016f98:	883fb21e 	bne	r17,zero,8016e64 <__call_exitprocs+0x74>
 8016f9c:	003fc006 	br	8016ea0 <__call_exitprocs+0xb0>

08016fa0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 8016fa0:	defffd04 	addi	sp,sp,-12
 8016fa4:	df000215 	stw	fp,8(sp)
 8016fa8:	df000204 	addi	fp,sp,8
 8016fac:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 8016fb0:	e0bfff17 	ldw	r2,-4(fp)
 8016fb4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8016fb8:	e0bffe17 	ldw	r2,-8(fp)
 8016fbc:	1005003a 	cmpeq	r2,r2,zero
 8016fc0:	1000021e 	bne	r2,zero,8016fcc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 8016fc4:	002af070 	cmpltui	zero,zero,43969
 8016fc8:	00000106 	br	8016fd0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 8016fcc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 8016fd0:	e037883a 	mov	sp,fp
 8016fd4:	df000017 	ldw	fp,0(sp)
 8016fd8:	dec00104 	addi	sp,sp,4
 8016fdc:	f800283a 	ret

08016fe0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8016fe0:	defffd04 	addi	sp,sp,-12
 8016fe4:	dfc00215 	stw	ra,8(sp)
 8016fe8:	df000115 	stw	fp,4(sp)
 8016fec:	df000104 	addi	fp,sp,4
 8016ff0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 8016ff4:	e13fff17 	ldw	r4,-4(fp)
 8016ff8:	8016fa00 	call	8016fa0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8016ffc:	003fff06 	br	8016ffc <_exit+0x1c>
 8017000:	08016dec 	andhi	zero,at,1463
