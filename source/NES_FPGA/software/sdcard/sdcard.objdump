
sdcard.elf:     file format elf32-littlenios2
sdcard.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011148 memsz 0x00011148 flags r-x
    LOAD off    0x00012168 vaddr 0x08011168 paddr 0x08012bf0 align 2**12
         filesz 0x00001a88 memsz 0x00001a88 flags rw-
    LOAD off    0x00014678 vaddr 0x08014678 paddr 0x08014678 align 2**12
         filesz 0x00000000 memsz 0x0000089c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010b44  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000470  08010cf8  08010cf8  00011cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a88  08011168  08012bf0  00012168  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000089c  08014678  08014678  00014678  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00013bf0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c98  00000000  00000000  00013c18  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000018b3  00000000  00000000  000148b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000257e7  00000000  00000000  00016163  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007bc4  00000000  00000000  0003b94a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014cab  00000000  00000000  0004350e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001bdc  00000000  00000000  000581bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002432  00000000  00000000  00059d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c2e7  00000000  00000000  0005c1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000684b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000684c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006c557  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006c55a  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006c55f  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006c560  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006c564  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006c568  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0006c56c  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0006c577  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0006c582  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0006c58d  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000040  00000000  00000000  0006c598  2**0
                  CONTENTS, READONLY
 28 .jdi          000041c2  00000000  00000000  0006c5d8  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003f5a3  00000000  00000000  0007079a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b4 l    d  .text	00000000 .text
08010cf8 l    d  .rodata	00000000 .rodata
08011168 l    d  .rwdata	00000000 .rwdata
08014678 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
080001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 sdcard.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08000e60 l     F .text	00000058 __sprint_r
08010e6a l     O .rodata	00000010 blanks.3452
08010e5a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002edc l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004904 l     F .text	00000058 std
08004a10 l     F .text	00000008 __fp_lock
08004a18 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011570 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08012bc4 l     O .rwdata	00000004 charset
08010ea0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08010fe8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
08008614 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08009740 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0800a07c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800a0dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800a1e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800a304 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800a3e4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800a544 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800a774 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08012be0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800aa2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08011b24 l     O .rwdata	00001060 jtag_uart_0
08012b84 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0800ab10 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800ad50 l     F .text	00000228 altera_avalon_jtag_uart_irq
0800af78 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800fc60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08010104 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08010254 l     F .text	000000f8 alt_file_locked
080104d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08010ae0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
08010c94 l     F .text	00000040 alt_sim_halt
080146bc g     O .bss	00000004 aux_status_register
08005fb4 g     F .text	00000094 _mprec_log10
080060a0 g     F .text	00000088 __any_on
080077e8 g     F .text	00000070 _isatty_r
08010fc0 g     O .rodata	00000028 __mprec_tinytens
0800a5a4 g     F .text	0000006c alt_main
08000cc8 g     F .text	000000a0 _puts_r
08014c84 g     O .bss	00000100 alt_irq
08007858 g     F .text	00000078 _lseek_r
08012bf0 g       *ABS*	00000000 __flash_rwdata_start
08009134 g     F .text	00000088 __eqdf2
0800b9a4 g     F .text	000001b0 Check_for_Master_Boot_Record
08014f14 g       *ABS*	00000000 __alt_heap_start
0800f868 g     F .text	000001d4 alt_up_sd_card_fclose
08000c50 g     F .text	00000044 printf
080072a0 g     F .text	00000068 __sseek
0800496c g     F .text	000000a4 __sinit
08005678 g     F .text	00000084 _setlocale_r
08004a6c g     F .text	0000009c __sfmoreglue
0800a630 g     F .text	00000020 __malloc_unlock
080146e0 g     O .bss	00000004 current_sector_modified
08005a30 g     F .text	000000e0 memmove
08004a5c g     F .text	00000010 _cleanup
08006128 g     F .text	000000bc _Balloc
0800e41c g     F .text	000000c8 alt_up_sd_card_is_Present
0800b6bc g     F .text	00000050 Save_Modified_Sector
08009244 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
080146d8 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
08000020 g       *ABS*	00000000 __flash_exceptions_start
08007774 g     F .text	00000074 _fstat_r
08014698 g     O .bss	00000004 errno
080146ac g     O .bss	00000004 alt_argv
0801abb0 g       *ABS*	00000000 _gp
0800e9dc g     F .text	000003a8 alt_up_sd_card_fopen
0800e558 g     F .text	000000d4 alt_up_sd_card_find_first
080146cc g     O .bss	00000004 command_argument_register
080119a4 g     O .rwdata	00000180 alt_fd_list
0800dc44 g     F .text	0000012c find_first_empty_record_in_root_directory
0800fd88 g     F .text	00000094 alt_find_dev
08005990 g     F .text	000000a0 memcpy
08004a50 g     F .text	0000000c _cleanup_r
080093dc g     F .text	000000f8 __floatsidf
080101dc g     F .text	00000078 alt_io_redirect
08009354 g     F .text	00000088 __ltdf2
08010cf8 g       *ABS*	00000000 __DTOR_END__
08000d68 g     F .text	00000014 puts
0800d854 g     F .text	000001a4 find_first_empty_cluster
080106dc g     F .text	00000020 altera_nios2_irq_init
08005f04 g     F .text	000000b0 __ratio
0800e358 g     F .text	000000c4 alt_up_sd_card_open_dev
0800b190 g     F .text	00000224 altera_avalon_jtag_uart_read
080004fc g     F .text	00000014 malloc
08000c94 g     F .text	00000034 _printf_r
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800987c g     F .text	00000008 __udivsi3
0800a240 g     F .text	000000c4 isatty
08010ed0 g     O .rodata	000000c8 __mprec_tens
08005654 g     F .text	00000008 __locale_charset
08014678 g     O .bss	00000004 prg_size
0801468c g     O .bss	00000004 __malloc_top_pad
08012bc0 g     O .rwdata	00000004 __mb_cur_max
0800565c g     F .text	0000000c _localeconv_r
0800688c g     F .text	0000003c __i2b
08005038 g     F .text	0000049c __sfvwrite_r
0800cb30 g     F .text	000000c0 get_dir_divider_location
08000d7c g     F .text	00000070 _sbrk_r
0800c7d0 g     F .text	000000d0 filename_to_upper_case
0800ed84 g     F .text	00000090 alt_up_sd_card_set_attributes
0800bb54 g     F .text	00000284 Read_File_Record_At_Offset
080078d0 g     F .text	00000078 _read_r
08011970 g     O .rwdata	0000000c __lc_ctype
08012bd8 g     O .rwdata	00000004 alt_max_fd
08009d7c g     F .text	00000138 __unpack_d
0800d3f0 g     F .text	00000464 find_file_in_directory
08007650 g     F .text	00000110 _fclose_r
080048d0 g     F .text	00000034 fflush
08014690 g     O .bss	00000004 __malloc_max_sbrked_mem
0800e4e4 g     F .text	00000074 alt_up_sd_card_is_FAT16
08008aa4 g     F .text	00000074 __adddf3
08005de4 g     F .text	00000120 __b2d
08007fb4 g     F .text	00000660 __umoddi3
0800a450 g     F .text	000000f4 lseek
08012bbc g     O .rwdata	00000004 _global_impure_ptr
0800cedc g     F .text	00000514 get_home_directory_cluster_for_file
08006c34 g     F .text	000005f4 _realloc_r
08014f14 g       *ABS*	00000000 __bss_end
0801000c g     F .text	000000f8 alt_iic_isr_register
080105d0 g     F .text	0000010c alt_tick
08007948 g     F .text	0000066c __udivdi3
08010f98 g     O .rodata	00000028 __mprec_bigtens
08006b14 g     F .text	00000120 __s2b
080095ac g     F .text	00000194 __floatunsidf
08005d04 g     F .text	00000060 __mcmp
080146e4 g     O .bss	00000004 current_sector_index
08004a38 g     F .text	00000018 __fp_lock_all
0800ffc4 g     F .text	00000048 alt_ic_irq_enabled
0801467c g     O .bss	00000004 MEM
08010538 g     F .text	00000098 alt_alarm_stop
0800b8c0 g     F .text	000000e4 mark_cluster
080146e8 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000c8 alt_irq_handler
0801197c g     O .rwdata	00000028 alt_dev_null
0800dd70 g     F .text	000001b8 convert_filename_to_name_extension
0800fb90 g     F .text	0000001c alt_dcache_flush_all
08005bd0 g     F .text	00000070 __hi0bits
080146b8 g     O .bss	00000004 is_sd_card_formated_as_FAT16
080094d4 g     F .text	000000d8 __fixdfsi
0800d9f8 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
08012bf0 g       *ABS*	00000000 __ram_rwdata_end
08012bd0 g     O .rwdata	00000008 alt_dev_list
0800a908 g     F .text	00000124 write
080146dc g     O .bss	00000004 device_pointer
08011168 g       *ABS*	00000000 __ram_rodata_end
0800a108 g     F .text	000000d8 fstat
080069f4 g     F .text	00000120 __pow5mult
0801469c g     O .bss	00000004 __nlocale_changed
08009884 g     F .text	00000008 __umodsi3
08014f14 g       *ABS*	00000000 end
0800ac90 g     F .text	000000c0 altera_avalon_jtag_uart_init
08010cf4 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
080099e8 g     F .text	00000080 __clzsi2
0800b3b4 g     F .text	00000240 altera_avalon_jtag_uart_write
0800495c g     F .text	00000004 __sfp_lock_acquire
080058ac g     F .text	000000e4 memchr
08000eb8 g     F .text	00001ec4 ___vfprintf_internal_r
08004d24 g     F .text	00000314 _free_r
08010ae4 g     F .text	000001b0 __call_exitprocs
080146a0 g     O .bss	00000004 __mlocale_changed
08012bb4 g     O .rwdata	00000004 __malloc_sbrk_base
080001b4 g     F .text	0000003c _start
080146ec g     O .bss	00000004 _alt_tick_rate
080064ec g     F .text	0000014c __lshift
080146f0 g     O .bss	00000004 _alt_nticks
0800a650 g     F .text	00000124 read
0800aac0 g     F .text	00000050 alt_sys_init
080109ac g     F .text	00000134 __register_exitproc
08006638 g     F .text	00000254 __multiply
0800b028 g     F .text	00000074 altera_avalon_jtag_uart_close
0800988c g     F .text	00000038 __mulsi3
08011168 g       *ABS*	00000000 __ram_rwdata_start
08010cf8 g       *ABS*	00000000 __ram_rodata_start
080146f4 g     O .bss	00000028 __malloc_current_mallinfo
080061e4 g     F .text	0000017c __d2b
080146b4 g     O .bss	00000004 initialized
0800ab48 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0801081c g     F .text	000000d0 alt_get_fd
0801471c g     O .bss	00000014 search_data
08009eb4 g     F .text	000000c8 __fpcmp_parts_d
080075e0 g     F .text	00000070 _close_r
08010938 g     F .text	00000074 memcmp
0800abf8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
08014f14 g       *ABS*	00000000 __alt_stack_base
0800ac40 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08002da0 g     F .text	0000013c __swsetup_r
08008edc g     F .text	00000258 __divdf3
08004b08 g     F .text	000000f0 __sfp
08014730 g     O .bss	00000054 boot_sector_data
08006048 g     F .text	00000058 __copybits
08011168 g     O .rwdata	00000408 __malloc_av_
08004968 g     F .text	00000004 __sinit_lock_release
08008b18 g     F .text	000003c4 __muldf3
08007384 g     F .text	00000060 __sread
080106fc g     F .text	00000120 alt_find_file
0800fbac g     F .text	000000b4 alt_dev_llist_insert
0800a610 g     F .text	00000020 __malloc_lock
0800a84c g     F .text	000000bc sbrk
080046d4 g     F .text	000001fc _fflush_r
08007518 g     F .text	000000c8 _calloc_r
08014678 g       *ABS*	00000000 __bss_start
08005b10 g     F .text	00000098 memset
080001f0 g     F .text	000002f8 main
080146b0 g     O .bss	00000004 alt_envp
08014694 g     O .bss	00000004 __malloc_max_total_mem
0800aba0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0800ee14 g     F .text	0000008c alt_up_sd_card_get_attributes
0800b5f4 g     F .text	000000c8 Write_Sector_Data
0800f244 g     F .text	00000624 alt_up_sd_card_write
08007298 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08007760 g     F .text	00000014 fclose
08014d84 g     O .bss	00000190 _atexit0
08003120 g     F .text	000015b4 _dtoa_r
08000510 g     F .text	00000740 _malloc_r
08012bdc g     O .rwdata	00000004 alt_errno
0800559c g     F .text	000000b8 _fwalk
080097bc g     F .text	00000060 __divsi3
08010ff4 g     O .rodata	00000014 __thenan_df
08004bf8 g     F .text	0000012c _malloc_trim_r
08010cf8 g       *ABS*	00000000 __CTOR_END__
080146c0 g     O .bss	00000004 status_register
080073e4 g     F .text	000000bc strcmp
080146c8 g     O .bss	00000004 command_register
08010cf8 g       *ABS*	00000000 __flash_rodata_start
08010cf8 g       *ABS*	00000000 __DTOR_LIST__
080091bc g     F .text	00000088 __nedf2
0800aa8c g     F .text	00000034 alt_irq_init
0800a7d4 g     F .text	00000078 alt_release_fd
0800b808 g     F .text	000000b8 get_cluster_flag
08011008 g     O .rodata	00000100 __clz_tab
0800bdd8 g     F .text	000002b8 Write_File_Record_At_Offset
080146a4 g     O .bss	00000004 _PathLocale
080108ec g     F .text	00000014 atexit
080074a0 g     F .text	00000078 _write_r
080056fc g     F .text	0000001c setlocale
0800c090 g     F .text	00000648 Check_for_DOS_FAT
0800df28 g     F .text	000002dc create_file
08012bb8 g     O .rwdata	00000004 _impure_ptr
080146c4 g     O .bss	00000004 CSD_register_w0
080146a8 g     O .bss	00000004 alt_argc
08014680 g     O .bss	00000004 PRG_ROM
0800fd24 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08000020 g       .exceptions	00000000 alt_irq_entry
08005d64 g     F .text	00000080 __ulp
08007228 g     F .text	00000040 __isinfd
08004a20 g     F .text	00000018 __fp_unlock_all
08014684 g     O .bss	00000004 chr_size
08012bc8 g     O .rwdata	00000008 alt_fs_list
0800c8a0 g     F .text	00000290 check_file_name_for_FAT16_compliance
080146d0 g     O .bss	00000004 buffer_memory
08000020 g       *ABS*	00000000 __ram_exceptions_start
08005668 g     F .text	00000010 localeconv
0800fe38 g     F .text	00000050 alt_ic_isr_register
080146d4 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
08012bf0 g       *ABS*	00000000 _edata
08014f14 g       *ABS*	00000000 _end
08014784 g     O .bss	00000500 active_files
080001b4 g       *ABS*	00000000 __ram_exceptions_end
0800e204 g     F .text	00000154 copy_file_record_name_to_string
0800b09c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0800c6d8 g     F .text	000000f8 Look_for_FAT16
0800ff24 g     F .text	000000a0 alt_ic_irq_disable
08007308 g     F .text	0000007c __swrite
08012bb0 g     O .rwdata	00000004 __malloc_trim_threshold
08010900 g     F .text	00000038 exit
0800e62c g     F .text	000003b0 alt_up_sd_card_find_next
080054d4 g     F .text	000000c8 _fwalk_reent
08006360 g     F .text	0000018c __mdiff
0800981c g     F .text	00000060 __modsi3
0800b70c g     F .text	000000fc Read_Sector_Data
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004960 g     F .text	00000004 __sfp_lock_release
08010cd4 g     F .text	00000020 _exit
08007268 g     F .text	00000030 __isnand
0800fa3c g     F .text	00000154 alt_alarm_start
080098c4 g     F .text	00000124 __muldi3
0800eea0 g     F .text	000003a4 alt_up_sd_card_read
08005718 g     F .text	00000194 __smakebuf_r
08000dec g     F .text	00000074 strlen
0801034c g     F .text	0000018c open
080092cc g     F .text	00000088 __gedf2
0800fe1c g     F .text	0000001c alt_icache_flush_all
08012be4 g     O .rwdata	00000004 alt_priority_mask
0800fe88 g     F .text	0000009c alt_ic_irq_enable
08002d7c g     F .text	00000024 __vfprintf_internal
08008a24 g     F .text	00000080 __subdf3
08014688 g     O .bss	00000004 CHR_ROM
08005c40 g     F .text	000000c4 __lo0bits
08012be8 g     O .rwdata	00000008 alt_alarm_list
0800fcc0 g     F .text	00000064 _do_ctors
08009f7c g     F .text	00000100 close
0800a364 g     F .text	00000080 alt_load
08009a68 g     F .text	00000314 __pack_d
0800cbf0 g     F .text	000002ec match_file_record_to_name_ext
080004e8 g     F .text	00000014 free
08004964 g     F .text	00000004 __sinit_lock_acquire
080068c8 g     F .text	0000012c __multadd
08005ba8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406d14 	ori	at,at,436
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80000fc:	0005313a 	rdctl	r2,ipending
 8000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000110:	00800044 	movi	r2,1
 8000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8000118:	e0ffff17 	ldw	r3,-4(fp)
 800011c:	e0bffe17 	ldw	r2,-8(fp)
 8000120:	1884703a 	and	r2,r3,r2
 8000124:	1005003a 	cmpeq	r2,r2,zero
 8000128:	1000161e 	bne	r2,zero,8000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	e0bffd17 	ldw	r2,-12(fp)
 8000130:	00c20074 	movhi	r3,2049
 8000134:	18d32104 	addi	r3,r3,19588
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	11400017 	ldw	r5,0(r2)
 8000144:	e0bffd17 	ldw	r2,-12(fp)
 8000148:	00c20074 	movhi	r3,2049
 800014c:	18d32104 	addi	r3,r3,19588
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	10c5883a 	add	r2,r2,r3
 8000158:	10800104 	addi	r2,r2,4
 800015c:	11000017 	ldw	r4,0(r2)
 8000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000164:	0005313a 	rdctl	r2,ipending
 8000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	1004c03a 	cmpne	r2,r2,zero
 800017c:	103fe31e 	bne	r2,zero,800010c <alt_irq_handler+0x20>
 8000180:	00000706 	br	80001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000184:	e0bffe17 	ldw	r2,-8(fp)
 8000188:	1085883a 	add	r2,r2,r2
 800018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8000190:	e0bffd17 	ldw	r2,-12(fp)
 8000194:	10800044 	addi	r2,r2,1
 8000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800019c:	003fde06 	br	8000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a0:	e037883a 	mov	sp,fp
 80001a4:	dfc00117 	ldw	ra,4(sp)
 80001a8:	df000017 	ldw	fp,0(sp)
 80001ac:	dec00204 	addi	sp,sp,8
 80001b0:	f800283a 	ret

Disassembly of section .text:

080001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001b4:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 80001bc:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c0:	d6aaec14 	ori	gp,gp,43952
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001c4:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001c8:	10919e14 	ori	r2,r2,18040

    movhi r3, %hi(__bss_end)
 80001cc:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d0:	18d3c514 	ori	r3,r3,20244

    beq r2, r3, 1f
 80001d4:	10c00326 	beq	r2,r3,80001e4 <_start+0x30>

0:
    stw zero, (r2)
 80001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e0:	10fffd36 	bltu	r2,r3,80001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001e4:	800a3640 	call	800a364 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001e8:	800a5a40 	call	800a5a4 <alt_main>

080001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001ec:	003fff06 	br	80001ec <alt_after_alt_main>

080001f0 <main>:

unsigned int prg_size;
unsigned int chr_size;

int main()
{
 80001f0:	defff704 	addi	sp,sp,-36
 80001f4:	dfc00815 	stw	ra,32(sp)
 80001f8:	df000715 	stw	fp,28(sp)
 80001fc:	df000704 	addi	fp,sp,28
	char* rom = "SMB.nes";
 8000200:	00820074 	movhi	r2,2049
 8000204:	10833e04 	addi	r2,r2,3320
 8000208:	e0bffe15 	stw	r2,-8(fp)
	MEM = (byte*) malloc(sizeof(byte)*1024*64);
 800020c:	01000074 	movhi	r4,1
 8000210:	80004fc0 	call	80004fc <malloc>
 8000214:	d0a6b315 	stw	r2,-25908(gp)
	PRG_ROM = (byte*) malloc(sizeof(byte)*1024*32);
 8000218:	01200014 	movui	r4,32768
 800021c:	80004fc0 	call	80004fc <malloc>
 8000220:	d0a6b415 	stw	r2,-25904(gp)
	int sd_fileh;


	// This functions links the verilog modules with C
	alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
 8000224:	01020074 	movhi	r4,2049
 8000228:	21034004 	addi	r4,r4,3328
 800022c:	800e3580 	call	800e358 <alt_up_sd_card_open_dev>
 8000230:	e0bffc15 	stw	r2,-16(fp)

	// Checks if it was able to obtain the address of the SD Card Socket
	if(sd_card_dev == 0)
 8000234:	e0bffc17 	ldw	r2,-16(fp)
 8000238:	1004c03a 	cmpne	r2,r2,zero
 800023c:	1000051e 	bne	r2,zero,8000254 <main+0x64>
	{
		printf("ERROR: UNABLE TO OBATIN SD SOCKET ADDRESS\n");
 8000240:	01020074 	movhi	r4,2049
 8000244:	21034b04 	addi	r4,r4,3372
 8000248:	8000d680 	call	8000d68 <puts>
		return 0;
 800024c:	e03fff15 	stw	zero,-4(fp)
 8000250:	00009f06 	br	80004d0 <main+0x2e0>
	}

	// Checks if the SD Card is Present in the Socket
	if(!alt_up_sd_card_is_Present())
 8000254:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 8000258:	1004c03a 	cmpne	r2,r2,zero
 800025c:	1000051e 	bne	r2,zero,8000274 <main+0x84>
	{
		printf("ERROR: SD CARD NOT PRESENT\n");
 8000260:	01020074 	movhi	r4,2049
 8000264:	21035604 	addi	r4,r4,3416
 8000268:	8000d680 	call	8000d68 <puts>
		return 0;
 800026c:	e03fff15 	stw	zero,-4(fp)
 8000270:	00009706 	br	80004d0 <main+0x2e0>
	}

	// Check if the Card is Fat16
	if(alt_up_sd_card_is_FAT16())
 8000274:	800e4e40 	call	800e4e4 <alt_up_sd_card_is_FAT16>
 8000278:	1005003a 	cmpeq	r2,r2,zero
 800027c:	1000781e 	bne	r2,zero,8000460 <main+0x270>
	{
		//opens the file to be read - 0 if successful
		printf("Opening %s...\n", rom);
 8000280:	01020074 	movhi	r4,2049
 8000284:	21035d04 	addi	r4,r4,3444
 8000288:	e17ffe17 	ldw	r5,-8(fp)
 800028c:	8000c500 	call	8000c50 <printf>
		sd_fileh = alt_up_sd_card_fopen(rom, false);
 8000290:	e13ffe17 	ldw	r4,-8(fp)
 8000294:	000b883a 	mov	r5,zero
 8000298:	800e9dc0 	call	800e9dc <alt_up_sd_card_fopen>
 800029c:	10bfffcc 	andi	r2,r2,65535
 80002a0:	10a0001c 	xori	r2,r2,32768
 80002a4:	10a00004 	addi	r2,r2,-32768
 80002a8:	e0bffd15 	stw	r2,-12(fp)

		// Successful open
		if(sd_fileh == 0)
 80002ac:	e0bffd17 	ldw	r2,-12(fp)
 80002b0:	1004c03a 	cmpne	r2,r2,zero
 80002b4:	1000661e 	bne	r2,zero,8000450 <main+0x260>
		{
			char data = 0;
 80002b8:	e03ffa05 	stb	zero,-24(fp)
			int i = 0;
 80002bc:	e03ff915 	stw	zero,-28(fp)

			// Skip 'NES' (4 bytes)
			for(i = 0; i < 4; i++)
 80002c0:	e03ff915 	stw	zero,-28(fp)
 80002c4:	00000906 	br	80002ec <main+0xfc>
			  data = alt_up_sd_card_read(sd_fileh);
 80002c8:	e0bffd17 	ldw	r2,-12(fp)
 80002cc:	113fffcc 	andi	r4,r2,65535
 80002d0:	2120001c 	xori	r4,r4,32768
 80002d4:	21200004 	addi	r4,r4,-32768
 80002d8:	800eea00 	call	800eea0 <alt_up_sd_card_read>
 80002dc:	e0bffa05 	stb	r2,-24(fp)
		{
			char data = 0;
			int i = 0;

			// Skip 'NES' (4 bytes)
			for(i = 0; i < 4; i++)
 80002e0:	e0bff917 	ldw	r2,-28(fp)
 80002e4:	10800044 	addi	r2,r2,1
 80002e8:	e0bff915 	stw	r2,-28(fp)
 80002ec:	e0bff917 	ldw	r2,-28(fp)
 80002f0:	10800110 	cmplti	r2,r2,4
 80002f4:	103ff41e 	bne	r2,zero,80002c8 <main+0xd8>
			  data = alt_up_sd_card_read(sd_fileh);

			// Get PRG and CHR size
			prg_size = alt_up_sd_card_read(sd_fileh);
 80002f8:	e0bffd17 	ldw	r2,-12(fp)
 80002fc:	113fffcc 	andi	r4,r2,65535
 8000300:	2120001c 	xori	r4,r4,32768
 8000304:	21200004 	addi	r4,r4,-32768
 8000308:	800eea00 	call	800eea0 <alt_up_sd_card_read>
 800030c:	10bfffcc 	andi	r2,r2,65535
 8000310:	10a0001c 	xori	r2,r2,32768
 8000314:	10a00004 	addi	r2,r2,-32768
 8000318:	d0a6b215 	stw	r2,-25912(gp)
			PRG_ROM = (byte*) malloc(sizeof(byte)*16*1024*prg_size);
 800031c:	d0a6b217 	ldw	r2,-25912(gp)
 8000320:	100893ba 	slli	r4,r2,14
 8000324:	80004fc0 	call	80004fc <malloc>
 8000328:	d0a6b415 	stw	r2,-25904(gp)
			chr_size = alt_up_sd_card_read(sd_fileh);
 800032c:	e0bffd17 	ldw	r2,-12(fp)
 8000330:	113fffcc 	andi	r4,r2,65535
 8000334:	2120001c 	xori	r4,r4,32768
 8000338:	21200004 	addi	r4,r4,-32768
 800033c:	800eea00 	call	800eea0 <alt_up_sd_card_read>
 8000340:	10bfffcc 	andi	r2,r2,65535
 8000344:	10a0001c 	xori	r2,r2,32768
 8000348:	10a00004 	addi	r2,r2,-32768
 800034c:	d0a6b515 	stw	r2,-25900(gp)
			CHR_ROM = (byte*) malloc(sizeof(byte)*8*1024*chr_size);
 8000350:	d0a6b517 	ldw	r2,-25900(gp)
 8000354:	1008937a 	slli	r4,r2,13
 8000358:	80004fc0 	call	80004fc <malloc>
 800035c:	d0a6b615 	stw	r2,-25896(gp)

			// Skip last 10 bytes of header
			for(i = 0; i < 10; i++)
 8000360:	e03ff915 	stw	zero,-28(fp)
 8000364:	00000906 	br	800038c <main+0x19c>
			  data = alt_up_sd_card_read(sd_fileh);
 8000368:	e0bffd17 	ldw	r2,-12(fp)
 800036c:	113fffcc 	andi	r4,r2,65535
 8000370:	2120001c 	xori	r4,r4,32768
 8000374:	21200004 	addi	r4,r4,-32768
 8000378:	800eea00 	call	800eea0 <alt_up_sd_card_read>
 800037c:	e0bffa05 	stb	r2,-24(fp)
			PRG_ROM = (byte*) malloc(sizeof(byte)*16*1024*prg_size);
			chr_size = alt_up_sd_card_read(sd_fileh);
			CHR_ROM = (byte*) malloc(sizeof(byte)*8*1024*chr_size);

			// Skip last 10 bytes of header
			for(i = 0; i < 10; i++)
 8000380:	e0bff917 	ldw	r2,-28(fp)
 8000384:	10800044 	addi	r2,r2,1
 8000388:	e0bff915 	stw	r2,-28(fp)
 800038c:	e0bff917 	ldw	r2,-28(fp)
 8000390:	10800290 	cmplti	r2,r2,10
 8000394:	103ff41e 	bne	r2,zero,8000368 <main+0x178>
			  data = alt_up_sd_card_read(sd_fileh);

			// Extract the PRG Data
			for(i = 0; i < (prg_size*16*1024); ++i)
 8000398:	e03ff915 	stw	zero,-28(fp)
 800039c:	00001006 	br	80003e0 <main+0x1f0>
			{
			  data = alt_up_sd_card_read(sd_fileh);
 80003a0:	e0bffd17 	ldw	r2,-12(fp)
 80003a4:	113fffcc 	andi	r4,r2,65535
 80003a8:	2120001c 	xori	r4,r4,32768
 80003ac:	21200004 	addi	r4,r4,-32768
 80003b0:	800eea00 	call	800eea0 <alt_up_sd_card_read>
 80003b4:	e0bffa05 	stb	r2,-24(fp)
			  MEM[i+0x8000] = (byte)data;
 80003b8:	d0e6b317 	ldw	r3,-25908(gp)
 80003bc:	e0bff917 	ldw	r2,-28(fp)
 80003c0:	1887883a 	add	r3,r3,r2
 80003c4:	00a00014 	movui	r2,32768
 80003c8:	1887883a 	add	r3,r3,r2
 80003cc:	e0bffa03 	ldbu	r2,-24(fp)
 80003d0:	18800005 	stb	r2,0(r3)
			// Skip last 10 bytes of header
			for(i = 0; i < 10; i++)
			  data = alt_up_sd_card_read(sd_fileh);

			// Extract the PRG Data
			for(i = 0; i < (prg_size*16*1024); ++i)
 80003d4:	e0bff917 	ldw	r2,-28(fp)
 80003d8:	10800044 	addi	r2,r2,1
 80003dc:	e0bff915 	stw	r2,-28(fp)
 80003e0:	e0bff917 	ldw	r2,-28(fp)
 80003e4:	d0e6b217 	ldw	r3,-25912(gp)
 80003e8:	180693ba 	slli	r3,r3,14
 80003ec:	10ffec36 	bltu	r2,r3,80003a0 <main+0x1b0>
			  data = alt_up_sd_card_read(sd_fileh);
			  MEM[i+0x8000] = (byte)data;
			}

			// Extract CHR Data
			for(i = 0; i < (chr_size*8*1024); ++i)
 80003f0:	e03ff915 	stw	zero,-28(fp)
 80003f4:	00000e06 	br	8000430 <main+0x240>
			{
			  data = alt_up_sd_card_read(sd_fileh);
 80003f8:	e0bffd17 	ldw	r2,-12(fp)
 80003fc:	113fffcc 	andi	r4,r2,65535
 8000400:	2120001c 	xori	r4,r4,32768
 8000404:	21200004 	addi	r4,r4,-32768
 8000408:	800eea00 	call	800eea0 <alt_up_sd_card_read>
 800040c:	e0bffa05 	stb	r2,-24(fp)
			  CHR_ROM[i] = (byte)data;
 8000410:	d0e6b617 	ldw	r3,-25896(gp)
 8000414:	e0bff917 	ldw	r2,-28(fp)
 8000418:	1887883a 	add	r3,r3,r2
 800041c:	e0bffa03 	ldbu	r2,-24(fp)
 8000420:	18800005 	stb	r2,0(r3)
			  data = alt_up_sd_card_read(sd_fileh);
			  MEM[i+0x8000] = (byte)data;
			}

			// Extract CHR Data
			for(i = 0; i < (chr_size*8*1024); ++i)
 8000424:	e0bff917 	ldw	r2,-28(fp)
 8000428:	10800044 	addi	r2,r2,1
 800042c:	e0bff915 	stw	r2,-28(fp)
 8000430:	e0bff917 	ldw	r2,-28(fp)
 8000434:	d0e6b517 	ldw	r3,-25900(gp)
 8000438:	1806937a 	slli	r3,r3,13
 800043c:	10ffee36 	bltu	r2,r3,80003f8 <main+0x208>
			{
			  data = alt_up_sd_card_read(sd_fileh);
			  CHR_ROM[i] = (byte)data;
			}

			printf("Successfully Completed\n");
 8000440:	01020074 	movhi	r4,2049
 8000444:	21036104 	addi	r4,r4,3460
 8000448:	8000d680 	call	8000d68 <puts>
 800044c:	00000706 	br	800046c <main+0x27c>
		}
		else
			printf("ERROR: OPENING FILE\n");
 8000450:	01020074 	movhi	r4,2049
 8000454:	21036704 	addi	r4,r4,3484
 8000458:	8000d680 	call	8000d68 <puts>
 800045c:	00000306 	br	800046c <main+0x27c>
	}
	else
		printf("ERROR: SD CARD NOT FAT16 FORMAT\n");
 8000460:	01020074 	movhi	r4,2049
 8000464:	21036c04 	addi	r4,r4,3504
 8000468:	8000d680 	call	8000d68 <puts>


	int i = 0;
 800046c:	e03ffb15 	stw	zero,-20(fp)
	printf("prg_size, chr_size: %d %d", prg_size, chr_size);
 8000470:	d166b217 	ldw	r5,-25912(gp)
 8000474:	d1a6b517 	ldw	r6,-25900(gp)
 8000478:	01020074 	movhi	r4,2049
 800047c:	21037404 	addi	r4,r4,3536
 8000480:	8000c500 	call	8000c50 <printf>

	for(i = 0xF000; i < 0xFFFF+1; ++i)
 8000484:	00bc0014 	movui	r2,61440
 8000488:	e0bffb15 	stw	r2,-20(fp)
 800048c:	00000c06 	br	80004c0 <main+0x2d0>
	{
		printf("At %d: %x \n", i, MEM[i]);
 8000490:	d0e6b317 	ldw	r3,-25908(gp)
 8000494:	e0bffb17 	ldw	r2,-20(fp)
 8000498:	1885883a 	add	r2,r3,r2
 800049c:	10800003 	ldbu	r2,0(r2)
 80004a0:	11803fcc 	andi	r6,r2,255
 80004a4:	01020074 	movhi	r4,2049
 80004a8:	21037b04 	addi	r4,r4,3564
 80004ac:	e17ffb17 	ldw	r5,-20(fp)
 80004b0:	8000c500 	call	8000c50 <printf>


	int i = 0;
	printf("prg_size, chr_size: %d %d", prg_size, chr_size);

	for(i = 0xF000; i < 0xFFFF+1; ++i)
 80004b4:	e0bffb17 	ldw	r2,-20(fp)
 80004b8:	10800044 	addi	r2,r2,1
 80004bc:	e0bffb15 	stw	r2,-20(fp)
 80004c0:	e0fffb17 	ldw	r3,-20(fp)
 80004c4:	00bfffd4 	movui	r2,65535
 80004c8:	10fff10e 	bge	r2,r3,8000490 <main+0x2a0>
	{
		printf("At %d: %x \n", i, MEM[i]);
	}

	return 0;
 80004cc:	e03fff15 	stw	zero,-4(fp)
 80004d0:	e0bfff17 	ldw	r2,-4(fp)

}
 80004d4:	e037883a 	mov	sp,fp
 80004d8:	dfc00117 	ldw	ra,4(sp)
 80004dc:	df000017 	ldw	fp,0(sp)
 80004e0:	dec00204 	addi	sp,sp,8
 80004e4:	f800283a 	ret

080004e8 <free>:
 80004e8:	00820074 	movhi	r2,2049
 80004ec:	108aee04 	addi	r2,r2,11192
 80004f0:	200b883a 	mov	r5,r4
 80004f4:	11000017 	ldw	r4,0(r2)
 80004f8:	8004d241 	jmpi	8004d24 <_free_r>

080004fc <malloc>:
 80004fc:	00820074 	movhi	r2,2049
 8000500:	108aee04 	addi	r2,r2,11192
 8000504:	200b883a 	mov	r5,r4
 8000508:	11000017 	ldw	r4,0(r2)
 800050c:	80005101 	jmpi	8000510 <_malloc_r>

08000510 <_malloc_r>:
 8000510:	defff604 	addi	sp,sp,-40
 8000514:	28c002c4 	addi	r3,r5,11
 8000518:	00800584 	movi	r2,22
 800051c:	dc800215 	stw	r18,8(sp)
 8000520:	dfc00915 	stw	ra,36(sp)
 8000524:	df000815 	stw	fp,32(sp)
 8000528:	ddc00715 	stw	r23,28(sp)
 800052c:	dd800615 	stw	r22,24(sp)
 8000530:	dd400515 	stw	r21,20(sp)
 8000534:	dd000415 	stw	r20,16(sp)
 8000538:	dcc00315 	stw	r19,12(sp)
 800053c:	dc400115 	stw	r17,4(sp)
 8000540:	dc000015 	stw	r16,0(sp)
 8000544:	2025883a 	mov	r18,r4
 8000548:	10c01236 	bltu	r2,r3,8000594 <_malloc_r+0x84>
 800054c:	04400404 	movi	r17,16
 8000550:	8940142e 	bgeu	r17,r5,80005a4 <_malloc_r+0x94>
 8000554:	00800304 	movi	r2,12
 8000558:	0007883a 	mov	r3,zero
 800055c:	90800015 	stw	r2,0(r18)
 8000560:	1805883a 	mov	r2,r3
 8000564:	dfc00917 	ldw	ra,36(sp)
 8000568:	df000817 	ldw	fp,32(sp)
 800056c:	ddc00717 	ldw	r23,28(sp)
 8000570:	dd800617 	ldw	r22,24(sp)
 8000574:	dd400517 	ldw	r21,20(sp)
 8000578:	dd000417 	ldw	r20,16(sp)
 800057c:	dcc00317 	ldw	r19,12(sp)
 8000580:	dc800217 	ldw	r18,8(sp)
 8000584:	dc400117 	ldw	r17,4(sp)
 8000588:	dc000017 	ldw	r16,0(sp)
 800058c:	dec00a04 	addi	sp,sp,40
 8000590:	f800283a 	ret
 8000594:	00bffe04 	movi	r2,-8
 8000598:	18a2703a 	and	r17,r3,r2
 800059c:	883fed16 	blt	r17,zero,8000554 <_malloc_r+0x44>
 80005a0:	897fec36 	bltu	r17,r5,8000554 <_malloc_r+0x44>
 80005a4:	9009883a 	mov	r4,r18
 80005a8:	800a6100 	call	800a610 <__malloc_lock>
 80005ac:	00807dc4 	movi	r2,503
 80005b0:	14402b2e 	bgeu	r2,r17,8000660 <_malloc_r+0x150>
 80005b4:	8806d27a 	srli	r3,r17,9
 80005b8:	18003f1e 	bne	r3,zero,80006b8 <_malloc_r+0x1a8>
 80005bc:	880cd0fa 	srli	r6,r17,3
 80005c0:	300490fa 	slli	r2,r6,3
 80005c4:	02c20074 	movhi	r11,2049
 80005c8:	5ac45a04 	addi	r11,r11,4456
 80005cc:	12cb883a 	add	r5,r2,r11
 80005d0:	2c000317 	ldw	r16,12(r5)
 80005d4:	580f883a 	mov	r7,r11
 80005d8:	2c00041e 	bne	r5,r16,80005ec <_malloc_r+0xdc>
 80005dc:	00000a06 	br	8000608 <_malloc_r+0xf8>
 80005e0:	1800860e 	bge	r3,zero,80007fc <_malloc_r+0x2ec>
 80005e4:	84000317 	ldw	r16,12(r16)
 80005e8:	2c000726 	beq	r5,r16,8000608 <_malloc_r+0xf8>
 80005ec:	80800117 	ldw	r2,4(r16)
 80005f0:	00ffff04 	movi	r3,-4
 80005f4:	10c8703a 	and	r4,r2,r3
 80005f8:	2447c83a 	sub	r3,r4,r17
 80005fc:	008003c4 	movi	r2,15
 8000600:	10fff70e 	bge	r2,r3,80005e0 <_malloc_r+0xd0>
 8000604:	31bfffc4 	addi	r6,r6,-1
 8000608:	32400044 	addi	r9,r6,1
 800060c:	02820074 	movhi	r10,2049
 8000610:	52845c04 	addi	r10,r10,4464
 8000614:	54000217 	ldw	r16,8(r10)
 8000618:	8280a026 	beq	r16,r10,800089c <_malloc_r+0x38c>
 800061c:	80800117 	ldw	r2,4(r16)
 8000620:	00ffff04 	movi	r3,-4
 8000624:	10ca703a 	and	r5,r2,r3
 8000628:	2c4dc83a 	sub	r6,r5,r17
 800062c:	008003c4 	movi	r2,15
 8000630:	11808316 	blt	r2,r6,8000840 <_malloc_r+0x330>
 8000634:	52800315 	stw	r10,12(r10)
 8000638:	52800215 	stw	r10,8(r10)
 800063c:	30002916 	blt	r6,zero,80006e4 <_malloc_r+0x1d4>
 8000640:	8147883a 	add	r3,r16,r5
 8000644:	18800117 	ldw	r2,4(r3)
 8000648:	9009883a 	mov	r4,r18
 800064c:	10800054 	ori	r2,r2,1
 8000650:	18800115 	stw	r2,4(r3)
 8000654:	800a6300 	call	800a630 <__malloc_unlock>
 8000658:	80c00204 	addi	r3,r16,8
 800065c:	003fc006 	br	8000560 <_malloc_r+0x50>
 8000660:	02c20074 	movhi	r11,2049
 8000664:	5ac45a04 	addi	r11,r11,4456
 8000668:	8ac5883a 	add	r2,r17,r11
 800066c:	14000317 	ldw	r16,12(r2)
 8000670:	580f883a 	mov	r7,r11
 8000674:	8806d0fa 	srli	r3,r17,3
 8000678:	14006c26 	beq	r2,r16,800082c <_malloc_r+0x31c>
 800067c:	80c00117 	ldw	r3,4(r16)
 8000680:	00bfff04 	movi	r2,-4
 8000684:	81800317 	ldw	r6,12(r16)
 8000688:	1886703a 	and	r3,r3,r2
 800068c:	80c7883a 	add	r3,r16,r3
 8000690:	18800117 	ldw	r2,4(r3)
 8000694:	81400217 	ldw	r5,8(r16)
 8000698:	9009883a 	mov	r4,r18
 800069c:	10800054 	ori	r2,r2,1
 80006a0:	18800115 	stw	r2,4(r3)
 80006a4:	31400215 	stw	r5,8(r6)
 80006a8:	29800315 	stw	r6,12(r5)
 80006ac:	800a6300 	call	800a630 <__malloc_unlock>
 80006b0:	80c00204 	addi	r3,r16,8
 80006b4:	003faa06 	br	8000560 <_malloc_r+0x50>
 80006b8:	00800104 	movi	r2,4
 80006bc:	10c0052e 	bgeu	r2,r3,80006d4 <_malloc_r+0x1c4>
 80006c0:	00800504 	movi	r2,20
 80006c4:	10c07836 	bltu	r2,r3,80008a8 <_malloc_r+0x398>
 80006c8:	198016c4 	addi	r6,r3,91
 80006cc:	300490fa 	slli	r2,r6,3
 80006d0:	003fbc06 	br	80005c4 <_malloc_r+0xb4>
 80006d4:	8804d1ba 	srli	r2,r17,6
 80006d8:	11800e04 	addi	r6,r2,56
 80006dc:	300490fa 	slli	r2,r6,3
 80006e0:	003fb806 	br	80005c4 <_malloc_r+0xb4>
 80006e4:	00807fc4 	movi	r2,511
 80006e8:	1140bb36 	bltu	r2,r5,80009d8 <_malloc_r+0x4c8>
 80006ec:	2806d0fa 	srli	r3,r5,3
 80006f0:	573ffe04 	addi	fp,r10,-8
 80006f4:	00800044 	movi	r2,1
 80006f8:	180890fa 	slli	r4,r3,3
 80006fc:	1807d0ba 	srai	r3,r3,2
 8000700:	e1c00117 	ldw	r7,4(fp)
 8000704:	5909883a 	add	r4,r11,r4
 8000708:	21400217 	ldw	r5,8(r4)
 800070c:	10c4983a 	sll	r2,r2,r3
 8000710:	81000315 	stw	r4,12(r16)
 8000714:	81400215 	stw	r5,8(r16)
 8000718:	388eb03a 	or	r7,r7,r2
 800071c:	2c000315 	stw	r16,12(r5)
 8000720:	24000215 	stw	r16,8(r4)
 8000724:	e1c00115 	stw	r7,4(fp)
 8000728:	4807883a 	mov	r3,r9
 800072c:	4800cd16 	blt	r9,zero,8000a64 <_malloc_r+0x554>
 8000730:	1807d0ba 	srai	r3,r3,2
 8000734:	00800044 	movi	r2,1
 8000738:	10c8983a 	sll	r4,r2,r3
 800073c:	39004436 	bltu	r7,r4,8000850 <_malloc_r+0x340>
 8000740:	21c4703a 	and	r2,r4,r7
 8000744:	10000a1e 	bne	r2,zero,8000770 <_malloc_r+0x260>
 8000748:	2109883a 	add	r4,r4,r4
 800074c:	00bfff04 	movi	r2,-4
 8000750:	4884703a 	and	r2,r9,r2
 8000754:	3906703a 	and	r3,r7,r4
 8000758:	12400104 	addi	r9,r2,4
 800075c:	1800041e 	bne	r3,zero,8000770 <_malloc_r+0x260>
 8000760:	2109883a 	add	r4,r4,r4
 8000764:	3904703a 	and	r2,r7,r4
 8000768:	4a400104 	addi	r9,r9,4
 800076c:	103ffc26 	beq	r2,zero,8000760 <_malloc_r+0x250>
 8000770:	480490fa 	slli	r2,r9,3
 8000774:	4819883a 	mov	r12,r9
 8000778:	023fff04 	movi	r8,-4
 800077c:	589b883a 	add	r13,r11,r2
 8000780:	6807883a 	mov	r3,r13
 8000784:	014003c4 	movi	r5,15
 8000788:	1c000317 	ldw	r16,12(r3)
 800078c:	1c00041e 	bne	r3,r16,80007a0 <_malloc_r+0x290>
 8000790:	0000a706 	br	8000a30 <_malloc_r+0x520>
 8000794:	3000ab0e 	bge	r6,zero,8000a44 <_malloc_r+0x534>
 8000798:	84000317 	ldw	r16,12(r16)
 800079c:	1c00a426 	beq	r3,r16,8000a30 <_malloc_r+0x520>
 80007a0:	80800117 	ldw	r2,4(r16)
 80007a4:	1204703a 	and	r2,r2,r8
 80007a8:	144dc83a 	sub	r6,r2,r17
 80007ac:	29bff90e 	bge	r5,r6,8000794 <_malloc_r+0x284>
 80007b0:	81000317 	ldw	r4,12(r16)
 80007b4:	80c00217 	ldw	r3,8(r16)
 80007b8:	89400054 	ori	r5,r17,1
 80007bc:	8445883a 	add	r2,r16,r17
 80007c0:	20c00215 	stw	r3,8(r4)
 80007c4:	19000315 	stw	r4,12(r3)
 80007c8:	81400115 	stw	r5,4(r16)
 80007cc:	1187883a 	add	r3,r2,r6
 80007d0:	31000054 	ori	r4,r6,1
 80007d4:	50800315 	stw	r2,12(r10)
 80007d8:	50800215 	stw	r2,8(r10)
 80007dc:	19800015 	stw	r6,0(r3)
 80007e0:	11000115 	stw	r4,4(r2)
 80007e4:	12800215 	stw	r10,8(r2)
 80007e8:	12800315 	stw	r10,12(r2)
 80007ec:	9009883a 	mov	r4,r18
 80007f0:	800a6300 	call	800a630 <__malloc_unlock>
 80007f4:	80c00204 	addi	r3,r16,8
 80007f8:	003f5906 	br	8000560 <_malloc_r+0x50>
 80007fc:	8109883a 	add	r4,r16,r4
 8000800:	20800117 	ldw	r2,4(r4)
 8000804:	80c00217 	ldw	r3,8(r16)
 8000808:	81400317 	ldw	r5,12(r16)
 800080c:	10800054 	ori	r2,r2,1
 8000810:	20800115 	stw	r2,4(r4)
 8000814:	28c00215 	stw	r3,8(r5)
 8000818:	19400315 	stw	r5,12(r3)
 800081c:	9009883a 	mov	r4,r18
 8000820:	800a6300 	call	800a630 <__malloc_unlock>
 8000824:	80c00204 	addi	r3,r16,8
 8000828:	003f4d06 	br	8000560 <_malloc_r+0x50>
 800082c:	80800204 	addi	r2,r16,8
 8000830:	14000317 	ldw	r16,12(r2)
 8000834:	143f911e 	bne	r2,r16,800067c <_malloc_r+0x16c>
 8000838:	1a400084 	addi	r9,r3,2
 800083c:	003f7306 	br	800060c <_malloc_r+0xfc>
 8000840:	88c00054 	ori	r3,r17,1
 8000844:	8445883a 	add	r2,r16,r17
 8000848:	80c00115 	stw	r3,4(r16)
 800084c:	003fdf06 	br	80007cc <_malloc_r+0x2bc>
 8000850:	e4000217 	ldw	r16,8(fp)
 8000854:	00bfff04 	movi	r2,-4
 8000858:	80c00117 	ldw	r3,4(r16)
 800085c:	802d883a 	mov	r22,r16
 8000860:	18aa703a 	and	r21,r3,r2
 8000864:	ac401636 	bltu	r21,r17,80008c0 <_malloc_r+0x3b0>
 8000868:	ac49c83a 	sub	r4,r21,r17
 800086c:	008003c4 	movi	r2,15
 8000870:	1100130e 	bge	r2,r4,80008c0 <_malloc_r+0x3b0>
 8000874:	88800054 	ori	r2,r17,1
 8000878:	8447883a 	add	r3,r16,r17
 800087c:	80800115 	stw	r2,4(r16)
 8000880:	20800054 	ori	r2,r4,1
 8000884:	18800115 	stw	r2,4(r3)
 8000888:	e0c00215 	stw	r3,8(fp)
 800088c:	9009883a 	mov	r4,r18
 8000890:	800a6300 	call	800a630 <__malloc_unlock>
 8000894:	80c00204 	addi	r3,r16,8
 8000898:	003f3106 	br	8000560 <_malloc_r+0x50>
 800089c:	39c00117 	ldw	r7,4(r7)
 80008a0:	573ffe04 	addi	fp,r10,-8
 80008a4:	003fa006 	br	8000728 <_malloc_r+0x218>
 80008a8:	00801504 	movi	r2,84
 80008ac:	10c06736 	bltu	r2,r3,8000a4c <_malloc_r+0x53c>
 80008b0:	8804d33a 	srli	r2,r17,12
 80008b4:	11801b84 	addi	r6,r2,110
 80008b8:	300490fa 	slli	r2,r6,3
 80008bc:	003f4106 	br	80005c4 <_malloc_r+0xb4>
 80008c0:	d0a6b717 	ldw	r2,-25892(gp)
 80008c4:	d0e00117 	ldw	r3,-32764(gp)
 80008c8:	053fffc4 	movi	r20,-1
 80008cc:	10800404 	addi	r2,r2,16
 80008d0:	88a7883a 	add	r19,r17,r2
 80008d4:	1d000326 	beq	r3,r20,80008e4 <_malloc_r+0x3d4>
 80008d8:	98c3ffc4 	addi	r3,r19,4095
 80008dc:	00bc0004 	movi	r2,-4096
 80008e0:	18a6703a 	and	r19,r3,r2
 80008e4:	9009883a 	mov	r4,r18
 80008e8:	980b883a 	mov	r5,r19
 80008ec:	8000d7c0 	call	8000d7c <_sbrk_r>
 80008f0:	1009883a 	mov	r4,r2
 80008f4:	15000426 	beq	r2,r20,8000908 <_malloc_r+0x3f8>
 80008f8:	854b883a 	add	r5,r16,r21
 80008fc:	1029883a 	mov	r20,r2
 8000900:	11405a2e 	bgeu	r2,r5,8000a6c <_malloc_r+0x55c>
 8000904:	87000c26 	beq	r16,fp,8000938 <_malloc_r+0x428>
 8000908:	e4000217 	ldw	r16,8(fp)
 800090c:	80c00117 	ldw	r3,4(r16)
 8000910:	00bfff04 	movi	r2,-4
 8000914:	1884703a 	and	r2,r3,r2
 8000918:	14400336 	bltu	r2,r17,8000928 <_malloc_r+0x418>
 800091c:	1449c83a 	sub	r4,r2,r17
 8000920:	008003c4 	movi	r2,15
 8000924:	113fd316 	blt	r2,r4,8000874 <_malloc_r+0x364>
 8000928:	9009883a 	mov	r4,r18
 800092c:	800a6300 	call	800a630 <__malloc_unlock>
 8000930:	0007883a 	mov	r3,zero
 8000934:	003f0a06 	br	8000560 <_malloc_r+0x50>
 8000938:	05c20074 	movhi	r23,2049
 800093c:	bdd1bd04 	addi	r23,r23,18164
 8000940:	b8800017 	ldw	r2,0(r23)
 8000944:	988d883a 	add	r6,r19,r2
 8000948:	b9800015 	stw	r6,0(r23)
 800094c:	d0e00117 	ldw	r3,-32764(gp)
 8000950:	00bfffc4 	movi	r2,-1
 8000954:	18808e26 	beq	r3,r2,8000b90 <_malloc_r+0x680>
 8000958:	2145c83a 	sub	r2,r4,r5
 800095c:	3085883a 	add	r2,r6,r2
 8000960:	b8800015 	stw	r2,0(r23)
 8000964:	20c001cc 	andi	r3,r4,7
 8000968:	18005f1e 	bne	r3,zero,8000ae8 <_malloc_r+0x5d8>
 800096c:	000b883a 	mov	r5,zero
 8000970:	a4c5883a 	add	r2,r20,r19
 8000974:	1083ffcc 	andi	r2,r2,4095
 8000978:	00c40004 	movi	r3,4096
 800097c:	1887c83a 	sub	r3,r3,r2
 8000980:	28e7883a 	add	r19,r5,r3
 8000984:	9009883a 	mov	r4,r18
 8000988:	980b883a 	mov	r5,r19
 800098c:	8000d7c0 	call	8000d7c <_sbrk_r>
 8000990:	1007883a 	mov	r3,r2
 8000994:	00bfffc4 	movi	r2,-1
 8000998:	18807a26 	beq	r3,r2,8000b84 <_malloc_r+0x674>
 800099c:	1d05c83a 	sub	r2,r3,r20
 80009a0:	9885883a 	add	r2,r19,r2
 80009a4:	10c00054 	ori	r3,r2,1
 80009a8:	b8800017 	ldw	r2,0(r23)
 80009ac:	a021883a 	mov	r16,r20
 80009b0:	a0c00115 	stw	r3,4(r20)
 80009b4:	9885883a 	add	r2,r19,r2
 80009b8:	b8800015 	stw	r2,0(r23)
 80009bc:	e5000215 	stw	r20,8(fp)
 80009c0:	b7003626 	beq	r22,fp,8000a9c <_malloc_r+0x58c>
 80009c4:	018003c4 	movi	r6,15
 80009c8:	35404b36 	bltu	r6,r21,8000af8 <_malloc_r+0x5e8>
 80009cc:	00800044 	movi	r2,1
 80009d0:	a0800115 	stw	r2,4(r20)
 80009d4:	003fcd06 	br	800090c <_malloc_r+0x3fc>
 80009d8:	2808d27a 	srli	r4,r5,9
 80009dc:	2000371e 	bne	r4,zero,8000abc <_malloc_r+0x5ac>
 80009e0:	2808d0fa 	srli	r4,r5,3
 80009e4:	200690fa 	slli	r3,r4,3
 80009e8:	1ad1883a 	add	r8,r3,r11
 80009ec:	41800217 	ldw	r6,8(r8)
 80009f0:	41805b26 	beq	r8,r6,8000b60 <_malloc_r+0x650>
 80009f4:	30800117 	ldw	r2,4(r6)
 80009f8:	00ffff04 	movi	r3,-4
 80009fc:	10c4703a 	and	r2,r2,r3
 8000a00:	2880022e 	bgeu	r5,r2,8000a0c <_malloc_r+0x4fc>
 8000a04:	31800217 	ldw	r6,8(r6)
 8000a08:	41bffa1e 	bne	r8,r6,80009f4 <_malloc_r+0x4e4>
 8000a0c:	32000317 	ldw	r8,12(r6)
 8000a10:	39c00117 	ldw	r7,4(r7)
 8000a14:	82000315 	stw	r8,12(r16)
 8000a18:	81800215 	stw	r6,8(r16)
 8000a1c:	07020074 	movhi	fp,2049
 8000a20:	e7045a04 	addi	fp,fp,4456
 8000a24:	34000315 	stw	r16,12(r6)
 8000a28:	44000215 	stw	r16,8(r8)
 8000a2c:	003f3e06 	br	8000728 <_malloc_r+0x218>
 8000a30:	63000044 	addi	r12,r12,1
 8000a34:	608000cc 	andi	r2,r12,3
 8000a38:	10005d26 	beq	r2,zero,8000bb0 <_malloc_r+0x6a0>
 8000a3c:	18c00204 	addi	r3,r3,8
 8000a40:	003f5106 	br	8000788 <_malloc_r+0x278>
 8000a44:	8089883a 	add	r4,r16,r2
 8000a48:	003f6d06 	br	8000800 <_malloc_r+0x2f0>
 8000a4c:	00805504 	movi	r2,340
 8000a50:	10c02036 	bltu	r2,r3,8000ad4 <_malloc_r+0x5c4>
 8000a54:	8804d3fa 	srli	r2,r17,15
 8000a58:	11801dc4 	addi	r6,r2,119
 8000a5c:	300490fa 	slli	r2,r6,3
 8000a60:	003ed806 	br	80005c4 <_malloc_r+0xb4>
 8000a64:	48c000c4 	addi	r3,r9,3
 8000a68:	003f3106 	br	8000730 <_malloc_r+0x220>
 8000a6c:	05c20074 	movhi	r23,2049
 8000a70:	bdd1bd04 	addi	r23,r23,18164
 8000a74:	b8800017 	ldw	r2,0(r23)
 8000a78:	988d883a 	add	r6,r19,r2
 8000a7c:	b9800015 	stw	r6,0(r23)
 8000a80:	293fb21e 	bne	r5,r4,800094c <_malloc_r+0x43c>
 8000a84:	2083ffcc 	andi	r2,r4,4095
 8000a88:	103fb01e 	bne	r2,zero,800094c <_malloc_r+0x43c>
 8000a8c:	e4000217 	ldw	r16,8(fp)
 8000a90:	9d45883a 	add	r2,r19,r21
 8000a94:	10800054 	ori	r2,r2,1
 8000a98:	80800115 	stw	r2,4(r16)
 8000a9c:	b8c00017 	ldw	r3,0(r23)
 8000aa0:	d0a6b817 	ldw	r2,-25888(gp)
 8000aa4:	10c0012e 	bgeu	r2,r3,8000aac <_malloc_r+0x59c>
 8000aa8:	d0e6b815 	stw	r3,-25888(gp)
 8000aac:	d0a6b917 	ldw	r2,-25884(gp)
 8000ab0:	10ff962e 	bgeu	r2,r3,800090c <_malloc_r+0x3fc>
 8000ab4:	d0e6b915 	stw	r3,-25884(gp)
 8000ab8:	003f9406 	br	800090c <_malloc_r+0x3fc>
 8000abc:	00800104 	movi	r2,4
 8000ac0:	11001e36 	bltu	r2,r4,8000b3c <_malloc_r+0x62c>
 8000ac4:	2804d1ba 	srli	r2,r5,6
 8000ac8:	11000e04 	addi	r4,r2,56
 8000acc:	200690fa 	slli	r3,r4,3
 8000ad0:	003fc506 	br	80009e8 <_malloc_r+0x4d8>
 8000ad4:	00815504 	movi	r2,1364
 8000ad8:	10c01d2e 	bgeu	r2,r3,8000b50 <_malloc_r+0x640>
 8000adc:	01801f84 	movi	r6,126
 8000ae0:	0080fc04 	movi	r2,1008
 8000ae4:	003eb706 	br	80005c4 <_malloc_r+0xb4>
 8000ae8:	00800204 	movi	r2,8
 8000aec:	10cbc83a 	sub	r5,r2,r3
 8000af0:	2169883a 	add	r20,r4,r5
 8000af4:	003f9e06 	br	8000970 <_malloc_r+0x460>
 8000af8:	00bffe04 	movi	r2,-8
 8000afc:	a93ffd04 	addi	r4,r21,-12
 8000b00:	2088703a 	and	r4,r4,r2
 8000b04:	b10b883a 	add	r5,r22,r4
 8000b08:	00c00144 	movi	r3,5
 8000b0c:	28c00215 	stw	r3,8(r5)
 8000b10:	28c00115 	stw	r3,4(r5)
 8000b14:	b0800117 	ldw	r2,4(r22)
 8000b18:	1080004c 	andi	r2,r2,1
 8000b1c:	2084b03a 	or	r2,r4,r2
 8000b20:	b0800115 	stw	r2,4(r22)
 8000b24:	313fdd2e 	bgeu	r6,r4,8000a9c <_malloc_r+0x58c>
 8000b28:	b1400204 	addi	r5,r22,8
 8000b2c:	9009883a 	mov	r4,r18
 8000b30:	8004d240 	call	8004d24 <_free_r>
 8000b34:	e4000217 	ldw	r16,8(fp)
 8000b38:	003fd806 	br	8000a9c <_malloc_r+0x58c>
 8000b3c:	00800504 	movi	r2,20
 8000b40:	11001536 	bltu	r2,r4,8000b98 <_malloc_r+0x688>
 8000b44:	210016c4 	addi	r4,r4,91
 8000b48:	200690fa 	slli	r3,r4,3
 8000b4c:	003fa606 	br	80009e8 <_malloc_r+0x4d8>
 8000b50:	8804d4ba 	srli	r2,r17,18
 8000b54:	11801f04 	addi	r6,r2,124
 8000b58:	300490fa 	slli	r2,r6,3
 8000b5c:	003e9906 	br	80005c4 <_malloc_r+0xb4>
 8000b60:	2009d0ba 	srai	r4,r4,2
 8000b64:	01420074 	movhi	r5,2049
 8000b68:	29445a04 	addi	r5,r5,4456
 8000b6c:	00c00044 	movi	r3,1
 8000b70:	28800117 	ldw	r2,4(r5)
 8000b74:	1906983a 	sll	r3,r3,r4
 8000b78:	10c4b03a 	or	r2,r2,r3
 8000b7c:	28800115 	stw	r2,4(r5)
 8000b80:	003fa306 	br	8000a10 <_malloc_r+0x500>
 8000b84:	0027883a 	mov	r19,zero
 8000b88:	00c00044 	movi	r3,1
 8000b8c:	003f8606 	br	80009a8 <_malloc_r+0x498>
 8000b90:	d1200115 	stw	r4,-32764(gp)
 8000b94:	003f7306 	br	8000964 <_malloc_r+0x454>
 8000b98:	00801504 	movi	r2,84
 8000b9c:	11001936 	bltu	r2,r4,8000c04 <_malloc_r+0x6f4>
 8000ba0:	2804d33a 	srli	r2,r5,12
 8000ba4:	11001b84 	addi	r4,r2,110
 8000ba8:	200690fa 	slli	r3,r4,3
 8000bac:	003f8e06 	br	80009e8 <_malloc_r+0x4d8>
 8000bb0:	480b883a 	mov	r5,r9
 8000bb4:	6807883a 	mov	r3,r13
 8000bb8:	288000cc 	andi	r2,r5,3
 8000bbc:	18fffe04 	addi	r3,r3,-8
 8000bc0:	297fffc4 	addi	r5,r5,-1
 8000bc4:	10001526 	beq	r2,zero,8000c1c <_malloc_r+0x70c>
 8000bc8:	18800217 	ldw	r2,8(r3)
 8000bcc:	10fffa26 	beq	r2,r3,8000bb8 <_malloc_r+0x6a8>
 8000bd0:	2109883a 	add	r4,r4,r4
 8000bd4:	393f1e36 	bltu	r7,r4,8000850 <_malloc_r+0x340>
 8000bd8:	203f1d26 	beq	r4,zero,8000850 <_malloc_r+0x340>
 8000bdc:	21c4703a 	and	r2,r4,r7
 8000be0:	10000226 	beq	r2,zero,8000bec <_malloc_r+0x6dc>
 8000be4:	6013883a 	mov	r9,r12
 8000be8:	003ee106 	br	8000770 <_malloc_r+0x260>
 8000bec:	2109883a 	add	r4,r4,r4
 8000bf0:	3904703a 	and	r2,r7,r4
 8000bf4:	63000104 	addi	r12,r12,4
 8000bf8:	103ffc26 	beq	r2,zero,8000bec <_malloc_r+0x6dc>
 8000bfc:	6013883a 	mov	r9,r12
 8000c00:	003edb06 	br	8000770 <_malloc_r+0x260>
 8000c04:	00805504 	movi	r2,340
 8000c08:	11000836 	bltu	r2,r4,8000c2c <_malloc_r+0x71c>
 8000c0c:	2804d3fa 	srli	r2,r5,15
 8000c10:	11001dc4 	addi	r4,r2,119
 8000c14:	200690fa 	slli	r3,r4,3
 8000c18:	003f7306 	br	80009e8 <_malloc_r+0x4d8>
 8000c1c:	0104303a 	nor	r2,zero,r4
 8000c20:	388e703a 	and	r7,r7,r2
 8000c24:	e1c00115 	stw	r7,4(fp)
 8000c28:	003fe906 	br	8000bd0 <_malloc_r+0x6c0>
 8000c2c:	00815504 	movi	r2,1364
 8000c30:	1100032e 	bgeu	r2,r4,8000c40 <_malloc_r+0x730>
 8000c34:	01001f84 	movi	r4,126
 8000c38:	00c0fc04 	movi	r3,1008
 8000c3c:	003f6a06 	br	80009e8 <_malloc_r+0x4d8>
 8000c40:	2804d4ba 	srli	r2,r5,18
 8000c44:	11001f04 	addi	r4,r2,124
 8000c48:	200690fa 	slli	r3,r4,3
 8000c4c:	003f6606 	br	80009e8 <_malloc_r+0x4d8>

08000c50 <printf>:
 8000c50:	defffb04 	addi	sp,sp,-20
 8000c54:	dfc00115 	stw	ra,4(sp)
 8000c58:	d9400215 	stw	r5,8(sp)
 8000c5c:	d9800315 	stw	r6,12(sp)
 8000c60:	d9c00415 	stw	r7,16(sp)
 8000c64:	00820074 	movhi	r2,2049
 8000c68:	108aee04 	addi	r2,r2,11192
 8000c6c:	10c00017 	ldw	r3,0(r2)
 8000c70:	200b883a 	mov	r5,r4
 8000c74:	d8800204 	addi	r2,sp,8
 8000c78:	19000217 	ldw	r4,8(r3)
 8000c7c:	100d883a 	mov	r6,r2
 8000c80:	d8800015 	stw	r2,0(sp)
 8000c84:	8002d7c0 	call	8002d7c <__vfprintf_internal>
 8000c88:	dfc00117 	ldw	ra,4(sp)
 8000c8c:	dec00504 	addi	sp,sp,20
 8000c90:	f800283a 	ret

08000c94 <_printf_r>:
 8000c94:	defffc04 	addi	sp,sp,-16
 8000c98:	dfc00115 	stw	ra,4(sp)
 8000c9c:	d9800215 	stw	r6,8(sp)
 8000ca0:	d9c00315 	stw	r7,12(sp)
 8000ca4:	280d883a 	mov	r6,r5
 8000ca8:	21400217 	ldw	r5,8(r4)
 8000cac:	d8c00204 	addi	r3,sp,8
 8000cb0:	180f883a 	mov	r7,r3
 8000cb4:	d8c00015 	stw	r3,0(sp)
 8000cb8:	8000eb80 	call	8000eb8 <___vfprintf_internal_r>
 8000cbc:	dfc00117 	ldw	ra,4(sp)
 8000cc0:	dec00404 	addi	sp,sp,16
 8000cc4:	f800283a 	ret

08000cc8 <_puts_r>:
 8000cc8:	defff604 	addi	sp,sp,-40
 8000ccc:	dc400715 	stw	r17,28(sp)
 8000cd0:	2023883a 	mov	r17,r4
 8000cd4:	2809883a 	mov	r4,r5
 8000cd8:	dfc00915 	stw	ra,36(sp)
 8000cdc:	dcc00815 	stw	r19,32(sp)
 8000ce0:	2827883a 	mov	r19,r5
 8000ce4:	8000dec0 	call	8000dec <strlen>
 8000ce8:	89400217 	ldw	r5,8(r17)
 8000cec:	00c20074 	movhi	r3,2049
 8000cf0:	18c37e04 	addi	r3,r3,3576
 8000cf4:	01c00044 	movi	r7,1
 8000cf8:	12000044 	addi	r8,r2,1
 8000cfc:	d8c00515 	stw	r3,20(sp)
 8000d00:	d9c00615 	stw	r7,24(sp)
 8000d04:	d8c00304 	addi	r3,sp,12
 8000d08:	01c00084 	movi	r7,2
 8000d0c:	8809883a 	mov	r4,r17
 8000d10:	d80d883a 	mov	r6,sp
 8000d14:	d8c00015 	stw	r3,0(sp)
 8000d18:	dcc00315 	stw	r19,12(sp)
 8000d1c:	da000215 	stw	r8,8(sp)
 8000d20:	d9c00115 	stw	r7,4(sp)
 8000d24:	d8800415 	stw	r2,16(sp)
 8000d28:	80050380 	call	8005038 <__sfvwrite_r>
 8000d2c:	00ffffc4 	movi	r3,-1
 8000d30:	10000626 	beq	r2,zero,8000d4c <_puts_r+0x84>
 8000d34:	1805883a 	mov	r2,r3
 8000d38:	dfc00917 	ldw	ra,36(sp)
 8000d3c:	dcc00817 	ldw	r19,32(sp)
 8000d40:	dc400717 	ldw	r17,28(sp)
 8000d44:	dec00a04 	addi	sp,sp,40
 8000d48:	f800283a 	ret
 8000d4c:	00c00284 	movi	r3,10
 8000d50:	1805883a 	mov	r2,r3
 8000d54:	dfc00917 	ldw	ra,36(sp)
 8000d58:	dcc00817 	ldw	r19,32(sp)
 8000d5c:	dc400717 	ldw	r17,28(sp)
 8000d60:	dec00a04 	addi	sp,sp,40
 8000d64:	f800283a 	ret

08000d68 <puts>:
 8000d68:	00820074 	movhi	r2,2049
 8000d6c:	108aee04 	addi	r2,r2,11192
 8000d70:	200b883a 	mov	r5,r4
 8000d74:	11000017 	ldw	r4,0(r2)
 8000d78:	8000cc81 	jmpi	8000cc8 <_puts_r>

08000d7c <_sbrk_r>:
 8000d7c:	defffd04 	addi	sp,sp,-12
 8000d80:	dc000015 	stw	r16,0(sp)
 8000d84:	04020074 	movhi	r16,2049
 8000d88:	8411a604 	addi	r16,r16,18072
 8000d8c:	dc400115 	stw	r17,4(sp)
 8000d90:	80000015 	stw	zero,0(r16)
 8000d94:	2023883a 	mov	r17,r4
 8000d98:	2809883a 	mov	r4,r5
 8000d9c:	dfc00215 	stw	ra,8(sp)
 8000da0:	800a84c0 	call	800a84c <sbrk>
 8000da4:	1007883a 	mov	r3,r2
 8000da8:	00bfffc4 	movi	r2,-1
 8000dac:	18800626 	beq	r3,r2,8000dc8 <_sbrk_r+0x4c>
 8000db0:	1805883a 	mov	r2,r3
 8000db4:	dfc00217 	ldw	ra,8(sp)
 8000db8:	dc400117 	ldw	r17,4(sp)
 8000dbc:	dc000017 	ldw	r16,0(sp)
 8000dc0:	dec00304 	addi	sp,sp,12
 8000dc4:	f800283a 	ret
 8000dc8:	80800017 	ldw	r2,0(r16)
 8000dcc:	103ff826 	beq	r2,zero,8000db0 <_sbrk_r+0x34>
 8000dd0:	88800015 	stw	r2,0(r17)
 8000dd4:	1805883a 	mov	r2,r3
 8000dd8:	dfc00217 	ldw	ra,8(sp)
 8000ddc:	dc400117 	ldw	r17,4(sp)
 8000de0:	dc000017 	ldw	r16,0(sp)
 8000de4:	dec00304 	addi	sp,sp,12
 8000de8:	f800283a 	ret

08000dec <strlen>:
 8000dec:	208000cc 	andi	r2,r4,3
 8000df0:	2011883a 	mov	r8,r4
 8000df4:	1000161e 	bne	r2,zero,8000e50 <strlen+0x64>
 8000df8:	20c00017 	ldw	r3,0(r4)
 8000dfc:	017fbff4 	movhi	r5,65279
 8000e00:	297fbfc4 	addi	r5,r5,-257
 8000e04:	01e02074 	movhi	r7,32897
 8000e08:	39e02004 	addi	r7,r7,-32640
 8000e0c:	1945883a 	add	r2,r3,r5
 8000e10:	11c4703a 	and	r2,r2,r7
 8000e14:	00c6303a 	nor	r3,zero,r3
 8000e18:	1886703a 	and	r3,r3,r2
 8000e1c:	18000c1e 	bne	r3,zero,8000e50 <strlen+0x64>
 8000e20:	280d883a 	mov	r6,r5
 8000e24:	380b883a 	mov	r5,r7
 8000e28:	21000104 	addi	r4,r4,4
 8000e2c:	20800017 	ldw	r2,0(r4)
 8000e30:	1187883a 	add	r3,r2,r6
 8000e34:	1946703a 	and	r3,r3,r5
 8000e38:	0084303a 	nor	r2,zero,r2
 8000e3c:	10c4703a 	and	r2,r2,r3
 8000e40:	103ff926 	beq	r2,zero,8000e28 <strlen+0x3c>
 8000e44:	20800007 	ldb	r2,0(r4)
 8000e48:	10000326 	beq	r2,zero,8000e58 <strlen+0x6c>
 8000e4c:	21000044 	addi	r4,r4,1
 8000e50:	20800007 	ldb	r2,0(r4)
 8000e54:	103ffd1e 	bne	r2,zero,8000e4c <strlen+0x60>
 8000e58:	2205c83a 	sub	r2,r4,r8
 8000e5c:	f800283a 	ret

08000e60 <__sprint_r>:
 8000e60:	30800217 	ldw	r2,8(r6)
 8000e64:	defffe04 	addi	sp,sp,-8
 8000e68:	dc000015 	stw	r16,0(sp)
 8000e6c:	dfc00115 	stw	ra,4(sp)
 8000e70:	3021883a 	mov	r16,r6
 8000e74:	0007883a 	mov	r3,zero
 8000e78:	1000061e 	bne	r2,zero,8000e94 <__sprint_r+0x34>
 8000e7c:	1805883a 	mov	r2,r3
 8000e80:	30000115 	stw	zero,4(r6)
 8000e84:	dfc00117 	ldw	ra,4(sp)
 8000e88:	dc000017 	ldw	r16,0(sp)
 8000e8c:	dec00204 	addi	sp,sp,8
 8000e90:	f800283a 	ret
 8000e94:	80050380 	call	8005038 <__sfvwrite_r>
 8000e98:	1007883a 	mov	r3,r2
 8000e9c:	1805883a 	mov	r2,r3
 8000ea0:	80000115 	stw	zero,4(r16)
 8000ea4:	80000215 	stw	zero,8(r16)
 8000ea8:	dfc00117 	ldw	ra,4(sp)
 8000eac:	dc000017 	ldw	r16,0(sp)
 8000eb0:	dec00204 	addi	sp,sp,8
 8000eb4:	f800283a 	ret

08000eb8 <___vfprintf_internal_r>:
 8000eb8:	defea404 	addi	sp,sp,-1392
 8000ebc:	dd815815 	stw	r22,1376(sp)
 8000ec0:	dc015215 	stw	r16,1352(sp)
 8000ec4:	d9c15115 	stw	r7,1348(sp)
 8000ec8:	dfc15b15 	stw	ra,1388(sp)
 8000ecc:	df015a15 	stw	fp,1384(sp)
 8000ed0:	ddc15915 	stw	r23,1380(sp)
 8000ed4:	dd415715 	stw	r21,1372(sp)
 8000ed8:	dd015615 	stw	r20,1368(sp)
 8000edc:	dcc15515 	stw	r19,1364(sp)
 8000ee0:	dc815415 	stw	r18,1360(sp)
 8000ee4:	dc415315 	stw	r17,1356(sp)
 8000ee8:	282d883a 	mov	r22,r5
 8000eec:	3021883a 	mov	r16,r6
 8000ef0:	d9014f15 	stw	r4,1340(sp)
 8000ef4:	800565c0 	call	800565c <_localeconv_r>
 8000ef8:	10800017 	ldw	r2,0(r2)
 8000efc:	d9c15117 	ldw	r7,1348(sp)
 8000f00:	d8814915 	stw	r2,1316(sp)
 8000f04:	d8814f17 	ldw	r2,1340(sp)
 8000f08:	10000226 	beq	r2,zero,8000f14 <___vfprintf_internal_r+0x5c>
 8000f0c:	10800e17 	ldw	r2,56(r2)
 8000f10:	10020d26 	beq	r2,zero,8001748 <___vfprintf_internal_r+0x890>
 8000f14:	b080030b 	ldhu	r2,12(r22)
 8000f18:	1080020c 	andi	r2,r2,8
 8000f1c:	10020e26 	beq	r2,zero,8001758 <___vfprintf_internal_r+0x8a0>
 8000f20:	b0800417 	ldw	r2,16(r22)
 8000f24:	10020c26 	beq	r2,zero,8001758 <___vfprintf_internal_r+0x8a0>
 8000f28:	b200030b 	ldhu	r8,12(r22)
 8000f2c:	00800284 	movi	r2,10
 8000f30:	40c0068c 	andi	r3,r8,26
 8000f34:	18802f1e 	bne	r3,r2,8000ff4 <___vfprintf_internal_r+0x13c>
 8000f38:	b080038f 	ldh	r2,14(r22)
 8000f3c:	10002d16 	blt	r2,zero,8000ff4 <___vfprintf_internal_r+0x13c>
 8000f40:	b240038b 	ldhu	r9,14(r22)
 8000f44:	b2800717 	ldw	r10,28(r22)
 8000f48:	b2c00917 	ldw	r11,36(r22)
 8000f4c:	d9014f17 	ldw	r4,1340(sp)
 8000f50:	dc402904 	addi	r17,sp,164
 8000f54:	d8804004 	addi	r2,sp,256
 8000f58:	00c10004 	movi	r3,1024
 8000f5c:	423fff4c 	andi	r8,r8,65533
 8000f60:	800d883a 	mov	r6,r16
 8000f64:	880b883a 	mov	r5,r17
 8000f68:	da002c0d 	sth	r8,176(sp)
 8000f6c:	da402c8d 	sth	r9,178(sp)
 8000f70:	da803015 	stw	r10,192(sp)
 8000f74:	dac03215 	stw	r11,200(sp)
 8000f78:	d8802d15 	stw	r2,180(sp)
 8000f7c:	d8c02e15 	stw	r3,184(sp)
 8000f80:	d8802915 	stw	r2,164(sp)
 8000f84:	d8c02b15 	stw	r3,172(sp)
 8000f88:	d8002f15 	stw	zero,188(sp)
 8000f8c:	8000eb80 	call	8000eb8 <___vfprintf_internal_r>
 8000f90:	d8814b15 	stw	r2,1324(sp)
 8000f94:	10000416 	blt	r2,zero,8000fa8 <___vfprintf_internal_r+0xf0>
 8000f98:	d9014f17 	ldw	r4,1340(sp)
 8000f9c:	880b883a 	mov	r5,r17
 8000fa0:	80046d40 	call	80046d4 <_fflush_r>
 8000fa4:	1002321e 	bne	r2,zero,8001870 <___vfprintf_internal_r+0x9b8>
 8000fa8:	d8802c0b 	ldhu	r2,176(sp)
 8000fac:	1080100c 	andi	r2,r2,64
 8000fb0:	10000326 	beq	r2,zero,8000fc0 <___vfprintf_internal_r+0x108>
 8000fb4:	b080030b 	ldhu	r2,12(r22)
 8000fb8:	10801014 	ori	r2,r2,64
 8000fbc:	b080030d 	sth	r2,12(r22)
 8000fc0:	d8814b17 	ldw	r2,1324(sp)
 8000fc4:	dfc15b17 	ldw	ra,1388(sp)
 8000fc8:	df015a17 	ldw	fp,1384(sp)
 8000fcc:	ddc15917 	ldw	r23,1380(sp)
 8000fd0:	dd815817 	ldw	r22,1376(sp)
 8000fd4:	dd415717 	ldw	r21,1372(sp)
 8000fd8:	dd015617 	ldw	r20,1368(sp)
 8000fdc:	dcc15517 	ldw	r19,1364(sp)
 8000fe0:	dc815417 	ldw	r18,1360(sp)
 8000fe4:	dc415317 	ldw	r17,1356(sp)
 8000fe8:	dc015217 	ldw	r16,1352(sp)
 8000fec:	dec15c04 	addi	sp,sp,1392
 8000ff0:	f800283a 	ret
 8000ff4:	0005883a 	mov	r2,zero
 8000ff8:	0007883a 	mov	r3,zero
 8000ffc:	dd401904 	addi	r21,sp,100
 8001000:	d8814215 	stw	r2,1288(sp)
 8001004:	802f883a 	mov	r23,r16
 8001008:	d8c14315 	stw	r3,1292(sp)
 800100c:	d8014b15 	stw	zero,1324(sp)
 8001010:	d8014815 	stw	zero,1312(sp)
 8001014:	d8014415 	stw	zero,1296(sp)
 8001018:	d8014715 	stw	zero,1308(sp)
 800101c:	dd400c15 	stw	r21,48(sp)
 8001020:	d8000e15 	stw	zero,56(sp)
 8001024:	d8000d15 	stw	zero,52(sp)
 8001028:	b8800007 	ldb	r2,0(r23)
 800102c:	10001926 	beq	r2,zero,8001094 <___vfprintf_internal_r+0x1dc>
 8001030:	00c00944 	movi	r3,37
 8001034:	10c01726 	beq	r2,r3,8001094 <___vfprintf_internal_r+0x1dc>
 8001038:	b821883a 	mov	r16,r23
 800103c:	00000106 	br	8001044 <___vfprintf_internal_r+0x18c>
 8001040:	10c00326 	beq	r2,r3,8001050 <___vfprintf_internal_r+0x198>
 8001044:	84000044 	addi	r16,r16,1
 8001048:	80800007 	ldb	r2,0(r16)
 800104c:	103ffc1e 	bne	r2,zero,8001040 <___vfprintf_internal_r+0x188>
 8001050:	85e7c83a 	sub	r19,r16,r23
 8001054:	98000e26 	beq	r19,zero,8001090 <___vfprintf_internal_r+0x1d8>
 8001058:	dc800e17 	ldw	r18,56(sp)
 800105c:	dc400d17 	ldw	r17,52(sp)
 8001060:	008001c4 	movi	r2,7
 8001064:	94e5883a 	add	r18,r18,r19
 8001068:	8c400044 	addi	r17,r17,1
 800106c:	adc00015 	stw	r23,0(r21)
 8001070:	dc800e15 	stw	r18,56(sp)
 8001074:	acc00115 	stw	r19,4(r21)
 8001078:	dc400d15 	stw	r17,52(sp)
 800107c:	14428b16 	blt	r2,r17,8001aac <___vfprintf_internal_r+0xbf4>
 8001080:	ad400204 	addi	r21,r21,8
 8001084:	d9014b17 	ldw	r4,1324(sp)
 8001088:	24c9883a 	add	r4,r4,r19
 800108c:	d9014b15 	stw	r4,1324(sp)
 8001090:	802f883a 	mov	r23,r16
 8001094:	b8800007 	ldb	r2,0(r23)
 8001098:	10013c26 	beq	r2,zero,800158c <___vfprintf_internal_r+0x6d4>
 800109c:	bdc00044 	addi	r23,r23,1
 80010a0:	d8000405 	stb	zero,16(sp)
 80010a4:	b8c00007 	ldb	r3,0(r23)
 80010a8:	04ffffc4 	movi	r19,-1
 80010ac:	d8014c15 	stw	zero,1328(sp)
 80010b0:	d8014a15 	stw	zero,1320(sp)
 80010b4:	d8c14d15 	stw	r3,1332(sp)
 80010b8:	bdc00044 	addi	r23,r23,1
 80010bc:	d9414d17 	ldw	r5,1332(sp)
 80010c0:	00801604 	movi	r2,88
 80010c4:	28fff804 	addi	r3,r5,-32
 80010c8:	10c06036 	bltu	r2,r3,800124c <___vfprintf_internal_r+0x394>
 80010cc:	18c5883a 	add	r2,r3,r3
 80010d0:	1085883a 	add	r2,r2,r2
 80010d4:	00c20034 	movhi	r3,2048
 80010d8:	18c43a04 	addi	r3,r3,4328
 80010dc:	10c5883a 	add	r2,r2,r3
 80010e0:	11000017 	ldw	r4,0(r2)
 80010e4:	2000683a 	jmp	r4
 80010e8:	0800205c 	xori	zero,at,129
 80010ec:	0800124c 	andi	zero,at,73
 80010f0:	0800124c 	andi	zero,at,73
 80010f4:	08002048 	cmpgei	zero,at,129
 80010f8:	0800124c 	andi	zero,at,73
 80010fc:	0800124c 	andi	zero,at,73
 8001100:	0800124c 	andi	zero,at,73
 8001104:	0800124c 	andi	zero,at,73
 8001108:	0800124c 	andi	zero,at,73
 800110c:	0800124c 	andi	zero,at,73
 8001110:	08001e28 	cmpgeui	zero,at,120
 8001114:	08002038 	rdprs	zero,at,128
 8001118:	0800124c 	andi	zero,at,73
 800111c:	08001e40 	call	8001e4 <__alt_mem_onchip_memory2_0+0x7fe1e4>
 8001120:	080020e0 	cmpeqi	zero,at,131
 8001124:	0800124c 	andi	zero,at,73
 8001128:	080020cc 	andi	zero,at,131
 800112c:	08002088 	cmpgei	zero,at,130
 8001130:	08002088 	cmpgei	zero,at,130
 8001134:	08002088 	cmpgei	zero,at,130
 8001138:	08002088 	cmpgei	zero,at,130
 800113c:	08002088 	cmpgei	zero,at,130
 8001140:	08002088 	cmpgei	zero,at,130
 8001144:	08002088 	cmpgei	zero,at,130
 8001148:	08002088 	cmpgei	zero,at,130
 800114c:	08002088 	cmpgei	zero,at,130
 8001150:	0800124c 	andi	zero,at,73
 8001154:	0800124c 	andi	zero,at,73
 8001158:	0800124c 	andi	zero,at,73
 800115c:	0800124c 	andi	zero,at,73
 8001160:	0800124c 	andi	zero,at,73
 8001164:	0800124c 	andi	zero,at,73
 8001168:	0800124c 	andi	zero,at,73
 800116c:	0800124c 	andi	zero,at,73
 8001170:	0800124c 	andi	zero,at,73
 8001174:	0800124c 	andi	zero,at,73
 8001178:	080018a4 	muli	zero,at,98
 800117c:	08001f10 	cmplti	zero,at,124
 8001180:	0800124c 	andi	zero,at,73
 8001184:	08001f10 	cmplti	zero,at,124
 8001188:	0800124c 	andi	zero,at,73
 800118c:	0800124c 	andi	zero,at,73
 8001190:	0800124c 	andi	zero,at,73
 8001194:	0800124c 	andi	zero,at,73
 8001198:	08002074 	orhi	zero,at,129
 800119c:	0800124c 	andi	zero,at,73
 80011a0:	0800124c 	andi	zero,at,73
 80011a4:	08001958 	cmpnei	zero,at,101
 80011a8:	0800124c 	andi	zero,at,73
 80011ac:	0800124c 	andi	zero,at,73
 80011b0:	0800124c 	andi	zero,at,73
 80011b4:	0800124c 	andi	zero,at,73
 80011b8:	0800124c 	andi	zero,at,73
 80011bc:	080019a4 	muli	zero,at,102
 80011c0:	0800124c 	andi	zero,at,73
 80011c4:	0800124c 	andi	zero,at,73
 80011c8:	08001fc4 	addi	zero,at,127
 80011cc:	0800124c 	andi	zero,at,73
 80011d0:	0800124c 	andi	zero,at,73
 80011d4:	0800124c 	andi	zero,at,73
 80011d8:	0800124c 	andi	zero,at,73
 80011dc:	0800124c 	andi	zero,at,73
 80011e0:	0800124c 	andi	zero,at,73
 80011e4:	0800124c 	andi	zero,at,73
 80011e8:	0800124c 	andi	zero,at,73
 80011ec:	0800124c 	andi	zero,at,73
 80011f0:	0800124c 	andi	zero,at,73
 80011f4:	08001f98 	cmpnei	zero,at,126
 80011f8:	080018b0 	cmpltui	zero,at,98
 80011fc:	08001f10 	cmplti	zero,at,124
 8001200:	08001f10 	cmplti	zero,at,124
 8001204:	08001f10 	cmplti	zero,at,124
 8001208:	08001efc 	xorhi	zero,at,123
 800120c:	080018b0 	cmpltui	zero,at,98
 8001210:	0800124c 	andi	zero,at,73
 8001214:	0800124c 	andi	zero,at,73
 8001218:	08001e84 	addi	zero,at,122
 800121c:	0800124c 	andi	zero,at,73
 8001220:	08001e54 	ori	zero,at,121
 8001224:	08001964 	muli	zero,at,101
 8001228:	08001eb4 	orhi	zero,at,122
 800122c:	08001ea0 	cmpeqi	zero,at,122
 8001230:	0800124c 	andi	zero,at,73
 8001234:	08002148 	cmpgei	zero,at,133
 8001238:	0800124c 	andi	zero,at,73
 800123c:	080019b0 	cmpltui	zero,at,102
 8001240:	0800124c 	andi	zero,at,73
 8001244:	0800124c 	andi	zero,at,73
 8001248:	08002028 	cmpgeui	zero,at,128
 800124c:	d9014d17 	ldw	r4,1332(sp)
 8001250:	2000ce26 	beq	r4,zero,800158c <___vfprintf_internal_r+0x6d4>
 8001254:	01400044 	movi	r5,1
 8001258:	d9800f04 	addi	r6,sp,60
 800125c:	d9c14015 	stw	r7,1280(sp)
 8001260:	d9414515 	stw	r5,1300(sp)
 8001264:	d9814115 	stw	r6,1284(sp)
 8001268:	280f883a 	mov	r7,r5
 800126c:	d9000f05 	stb	r4,60(sp)
 8001270:	d8000405 	stb	zero,16(sp)
 8001274:	d8014615 	stw	zero,1304(sp)
 8001278:	d8c14c17 	ldw	r3,1328(sp)
 800127c:	1880008c 	andi	r2,r3,2
 8001280:	1005003a 	cmpeq	r2,r2,zero
 8001284:	d8815015 	stw	r2,1344(sp)
 8001288:	1000031e 	bne	r2,zero,8001298 <___vfprintf_internal_r+0x3e0>
 800128c:	d9014517 	ldw	r4,1300(sp)
 8001290:	21000084 	addi	r4,r4,2
 8001294:	d9014515 	stw	r4,1300(sp)
 8001298:	d9414c17 	ldw	r5,1328(sp)
 800129c:	2940210c 	andi	r5,r5,132
 80012a0:	d9414e15 	stw	r5,1336(sp)
 80012a4:	28002d1e 	bne	r5,zero,800135c <___vfprintf_internal_r+0x4a4>
 80012a8:	d9814a17 	ldw	r6,1320(sp)
 80012ac:	d8814517 	ldw	r2,1300(sp)
 80012b0:	30a1c83a 	sub	r16,r6,r2
 80012b4:	0400290e 	bge	zero,r16,800135c <___vfprintf_internal_r+0x4a4>
 80012b8:	00800404 	movi	r2,16
 80012bc:	14045e0e 	bge	r2,r16,8002438 <___vfprintf_internal_r+0x1580>
 80012c0:	dc800e17 	ldw	r18,56(sp)
 80012c4:	dc400d17 	ldw	r17,52(sp)
 80012c8:	1027883a 	mov	r19,r2
 80012cc:	07020074 	movhi	fp,2049
 80012d0:	e7039a84 	addi	fp,fp,3690
 80012d4:	050001c4 	movi	r20,7
 80012d8:	00000306 	br	80012e8 <___vfprintf_internal_r+0x430>
 80012dc:	843ffc04 	addi	r16,r16,-16
 80012e0:	ad400204 	addi	r21,r21,8
 80012e4:	9c00130e 	bge	r19,r16,8001334 <___vfprintf_internal_r+0x47c>
 80012e8:	94800404 	addi	r18,r18,16
 80012ec:	8c400044 	addi	r17,r17,1
 80012f0:	af000015 	stw	fp,0(r21)
 80012f4:	acc00115 	stw	r19,4(r21)
 80012f8:	dc800e15 	stw	r18,56(sp)
 80012fc:	dc400d15 	stw	r17,52(sp)
 8001300:	a47ff60e 	bge	r20,r17,80012dc <___vfprintf_internal_r+0x424>
 8001304:	d9014f17 	ldw	r4,1340(sp)
 8001308:	b00b883a 	mov	r5,r22
 800130c:	d9800c04 	addi	r6,sp,48
 8001310:	d9c15115 	stw	r7,1348(sp)
 8001314:	8000e600 	call	8000e60 <__sprint_r>
 8001318:	d9c15117 	ldw	r7,1348(sp)
 800131c:	10009e1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001320:	843ffc04 	addi	r16,r16,-16
 8001324:	dc800e17 	ldw	r18,56(sp)
 8001328:	dc400d17 	ldw	r17,52(sp)
 800132c:	dd401904 	addi	r21,sp,100
 8001330:	9c3fed16 	blt	r19,r16,80012e8 <___vfprintf_internal_r+0x430>
 8001334:	9425883a 	add	r18,r18,r16
 8001338:	8c400044 	addi	r17,r17,1
 800133c:	008001c4 	movi	r2,7
 8001340:	af000015 	stw	fp,0(r21)
 8001344:	ac000115 	stw	r16,4(r21)
 8001348:	dc800e15 	stw	r18,56(sp)
 800134c:	dc400d15 	stw	r17,52(sp)
 8001350:	1441f516 	blt	r2,r17,8001b28 <___vfprintf_internal_r+0xc70>
 8001354:	ad400204 	addi	r21,r21,8
 8001358:	00000206 	br	8001364 <___vfprintf_internal_r+0x4ac>
 800135c:	dc800e17 	ldw	r18,56(sp)
 8001360:	dc400d17 	ldw	r17,52(sp)
 8001364:	d8800407 	ldb	r2,16(sp)
 8001368:	10000b26 	beq	r2,zero,8001398 <___vfprintf_internal_r+0x4e0>
 800136c:	00800044 	movi	r2,1
 8001370:	94800044 	addi	r18,r18,1
 8001374:	8c400044 	addi	r17,r17,1
 8001378:	a8800115 	stw	r2,4(r21)
 800137c:	d8c00404 	addi	r3,sp,16
 8001380:	008001c4 	movi	r2,7
 8001384:	a8c00015 	stw	r3,0(r21)
 8001388:	dc800e15 	stw	r18,56(sp)
 800138c:	dc400d15 	stw	r17,52(sp)
 8001390:	1441da16 	blt	r2,r17,8001afc <___vfprintf_internal_r+0xc44>
 8001394:	ad400204 	addi	r21,r21,8
 8001398:	d9015017 	ldw	r4,1344(sp)
 800139c:	20000b1e 	bne	r4,zero,80013cc <___vfprintf_internal_r+0x514>
 80013a0:	d8800444 	addi	r2,sp,17
 80013a4:	94800084 	addi	r18,r18,2
 80013a8:	8c400044 	addi	r17,r17,1
 80013ac:	a8800015 	stw	r2,0(r21)
 80013b0:	00c00084 	movi	r3,2
 80013b4:	008001c4 	movi	r2,7
 80013b8:	a8c00115 	stw	r3,4(r21)
 80013bc:	dc800e15 	stw	r18,56(sp)
 80013c0:	dc400d15 	stw	r17,52(sp)
 80013c4:	1441c216 	blt	r2,r17,8001ad0 <___vfprintf_internal_r+0xc18>
 80013c8:	ad400204 	addi	r21,r21,8
 80013cc:	d9414e17 	ldw	r5,1336(sp)
 80013d0:	00802004 	movi	r2,128
 80013d4:	2880b126 	beq	r5,r2,800169c <___vfprintf_internal_r+0x7e4>
 80013d8:	d8c14617 	ldw	r3,1304(sp)
 80013dc:	19e1c83a 	sub	r16,r3,r7
 80013e0:	0400260e 	bge	zero,r16,800147c <___vfprintf_internal_r+0x5c4>
 80013e4:	00800404 	movi	r2,16
 80013e8:	1403cf0e 	bge	r2,r16,8002328 <___vfprintf_internal_r+0x1470>
 80013ec:	1027883a 	mov	r19,r2
 80013f0:	07020074 	movhi	fp,2049
 80013f4:	e7039684 	addi	fp,fp,3674
 80013f8:	050001c4 	movi	r20,7
 80013fc:	00000306 	br	800140c <___vfprintf_internal_r+0x554>
 8001400:	843ffc04 	addi	r16,r16,-16
 8001404:	ad400204 	addi	r21,r21,8
 8001408:	9c00130e 	bge	r19,r16,8001458 <___vfprintf_internal_r+0x5a0>
 800140c:	94800404 	addi	r18,r18,16
 8001410:	8c400044 	addi	r17,r17,1
 8001414:	af000015 	stw	fp,0(r21)
 8001418:	acc00115 	stw	r19,4(r21)
 800141c:	dc800e15 	stw	r18,56(sp)
 8001420:	dc400d15 	stw	r17,52(sp)
 8001424:	a47ff60e 	bge	r20,r17,8001400 <___vfprintf_internal_r+0x548>
 8001428:	d9014f17 	ldw	r4,1340(sp)
 800142c:	b00b883a 	mov	r5,r22
 8001430:	d9800c04 	addi	r6,sp,48
 8001434:	d9c15115 	stw	r7,1348(sp)
 8001438:	8000e600 	call	8000e60 <__sprint_r>
 800143c:	d9c15117 	ldw	r7,1348(sp)
 8001440:	1000551e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001444:	843ffc04 	addi	r16,r16,-16
 8001448:	dc800e17 	ldw	r18,56(sp)
 800144c:	dc400d17 	ldw	r17,52(sp)
 8001450:	dd401904 	addi	r21,sp,100
 8001454:	9c3fed16 	blt	r19,r16,800140c <___vfprintf_internal_r+0x554>
 8001458:	9425883a 	add	r18,r18,r16
 800145c:	8c400044 	addi	r17,r17,1
 8001460:	008001c4 	movi	r2,7
 8001464:	af000015 	stw	fp,0(r21)
 8001468:	ac000115 	stw	r16,4(r21)
 800146c:	dc800e15 	stw	r18,56(sp)
 8001470:	dc400d15 	stw	r17,52(sp)
 8001474:	14418216 	blt	r2,r17,8001a80 <___vfprintf_internal_r+0xbc8>
 8001478:	ad400204 	addi	r21,r21,8
 800147c:	d9014c17 	ldw	r4,1328(sp)
 8001480:	2080400c 	andi	r2,r4,256
 8001484:	10004a1e 	bne	r2,zero,80015b0 <___vfprintf_internal_r+0x6f8>
 8001488:	d9414117 	ldw	r5,1284(sp)
 800148c:	91e5883a 	add	r18,r18,r7
 8001490:	8c400044 	addi	r17,r17,1
 8001494:	008001c4 	movi	r2,7
 8001498:	a9400015 	stw	r5,0(r21)
 800149c:	a9c00115 	stw	r7,4(r21)
 80014a0:	dc800e15 	stw	r18,56(sp)
 80014a4:	dc400d15 	stw	r17,52(sp)
 80014a8:	14416716 	blt	r2,r17,8001a48 <___vfprintf_internal_r+0xb90>
 80014ac:	a8c00204 	addi	r3,r21,8
 80014b0:	d9814c17 	ldw	r6,1328(sp)
 80014b4:	3080010c 	andi	r2,r6,4
 80014b8:	10002826 	beq	r2,zero,800155c <___vfprintf_internal_r+0x6a4>
 80014bc:	d8814a17 	ldw	r2,1320(sp)
 80014c0:	d9014517 	ldw	r4,1300(sp)
 80014c4:	1121c83a 	sub	r16,r2,r4
 80014c8:	0400240e 	bge	zero,r16,800155c <___vfprintf_internal_r+0x6a4>
 80014cc:	00800404 	movi	r2,16
 80014d0:	1404550e 	bge	r2,r16,8002628 <___vfprintf_internal_r+0x1770>
 80014d4:	dc400d17 	ldw	r17,52(sp)
 80014d8:	1027883a 	mov	r19,r2
 80014dc:	07020074 	movhi	fp,2049
 80014e0:	e7039a84 	addi	fp,fp,3690
 80014e4:	050001c4 	movi	r20,7
 80014e8:	00000306 	br	80014f8 <___vfprintf_internal_r+0x640>
 80014ec:	843ffc04 	addi	r16,r16,-16
 80014f0:	18c00204 	addi	r3,r3,8
 80014f4:	9c00110e 	bge	r19,r16,800153c <___vfprintf_internal_r+0x684>
 80014f8:	94800404 	addi	r18,r18,16
 80014fc:	8c400044 	addi	r17,r17,1
 8001500:	1f000015 	stw	fp,0(r3)
 8001504:	1cc00115 	stw	r19,4(r3)
 8001508:	dc800e15 	stw	r18,56(sp)
 800150c:	dc400d15 	stw	r17,52(sp)
 8001510:	a47ff60e 	bge	r20,r17,80014ec <___vfprintf_internal_r+0x634>
 8001514:	d9014f17 	ldw	r4,1340(sp)
 8001518:	b00b883a 	mov	r5,r22
 800151c:	d9800c04 	addi	r6,sp,48
 8001520:	8000e600 	call	8000e60 <__sprint_r>
 8001524:	10001c1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001528:	843ffc04 	addi	r16,r16,-16
 800152c:	dc800e17 	ldw	r18,56(sp)
 8001530:	dc400d17 	ldw	r17,52(sp)
 8001534:	d8c01904 	addi	r3,sp,100
 8001538:	9c3fef16 	blt	r19,r16,80014f8 <___vfprintf_internal_r+0x640>
 800153c:	9425883a 	add	r18,r18,r16
 8001540:	8c400044 	addi	r17,r17,1
 8001544:	008001c4 	movi	r2,7
 8001548:	1f000015 	stw	fp,0(r3)
 800154c:	1c000115 	stw	r16,4(r3)
 8001550:	dc800e15 	stw	r18,56(sp)
 8001554:	dc400d15 	stw	r17,52(sp)
 8001558:	1440cb16 	blt	r2,r17,8001888 <___vfprintf_internal_r+0x9d0>
 800155c:	d8814a17 	ldw	r2,1320(sp)
 8001560:	d9414517 	ldw	r5,1300(sp)
 8001564:	1140010e 	bge	r2,r5,800156c <___vfprintf_internal_r+0x6b4>
 8001568:	2805883a 	mov	r2,r5
 800156c:	d9814b17 	ldw	r6,1324(sp)
 8001570:	308d883a 	add	r6,r6,r2
 8001574:	d9814b15 	stw	r6,1324(sp)
 8001578:	90013b1e 	bne	r18,zero,8001a68 <___vfprintf_internal_r+0xbb0>
 800157c:	d9c14017 	ldw	r7,1280(sp)
 8001580:	dd401904 	addi	r21,sp,100
 8001584:	d8000d15 	stw	zero,52(sp)
 8001588:	003ea706 	br	8001028 <___vfprintf_internal_r+0x170>
 800158c:	d8800e17 	ldw	r2,56(sp)
 8001590:	1005451e 	bne	r2,zero,8002aa8 <___vfprintf_internal_r+0x1bf0>
 8001594:	d8000d15 	stw	zero,52(sp)
 8001598:	b080030b 	ldhu	r2,12(r22)
 800159c:	1080100c 	andi	r2,r2,64
 80015a0:	103e8726 	beq	r2,zero,8000fc0 <___vfprintf_internal_r+0x108>
 80015a4:	00bfffc4 	movi	r2,-1
 80015a8:	d8814b15 	stw	r2,1324(sp)
 80015ac:	003e8406 	br	8000fc0 <___vfprintf_internal_r+0x108>
 80015b0:	d9814d17 	ldw	r6,1332(sp)
 80015b4:	00801944 	movi	r2,101
 80015b8:	11806e16 	blt	r2,r6,8001774 <___vfprintf_internal_r+0x8bc>
 80015bc:	d9414717 	ldw	r5,1308(sp)
 80015c0:	00c00044 	movi	r3,1
 80015c4:	1943490e 	bge	r3,r5,80022ec <___vfprintf_internal_r+0x1434>
 80015c8:	d8814117 	ldw	r2,1284(sp)
 80015cc:	94800044 	addi	r18,r18,1
 80015d0:	8c400044 	addi	r17,r17,1
 80015d4:	a8800015 	stw	r2,0(r21)
 80015d8:	008001c4 	movi	r2,7
 80015dc:	a8c00115 	stw	r3,4(r21)
 80015e0:	dc800e15 	stw	r18,56(sp)
 80015e4:	dc400d15 	stw	r17,52(sp)
 80015e8:	1441ca16 	blt	r2,r17,8001d14 <___vfprintf_internal_r+0xe5c>
 80015ec:	a8c00204 	addi	r3,r21,8
 80015f0:	d9014917 	ldw	r4,1316(sp)
 80015f4:	00800044 	movi	r2,1
 80015f8:	94800044 	addi	r18,r18,1
 80015fc:	8c400044 	addi	r17,r17,1
 8001600:	18800115 	stw	r2,4(r3)
 8001604:	008001c4 	movi	r2,7
 8001608:	19000015 	stw	r4,0(r3)
 800160c:	dc800e15 	stw	r18,56(sp)
 8001610:	dc400d15 	stw	r17,52(sp)
 8001614:	1441b616 	blt	r2,r17,8001cf0 <___vfprintf_internal_r+0xe38>
 8001618:	1cc00204 	addi	r19,r3,8
 800161c:	d9014217 	ldw	r4,1288(sp)
 8001620:	d9414317 	ldw	r5,1292(sp)
 8001624:	000d883a 	mov	r6,zero
 8001628:	000f883a 	mov	r7,zero
 800162c:	80091bc0 	call	80091bc <__nedf2>
 8001630:	10017426 	beq	r2,zero,8001c04 <___vfprintf_internal_r+0xd4c>
 8001634:	d9414717 	ldw	r5,1308(sp)
 8001638:	d9814117 	ldw	r6,1284(sp)
 800163c:	8c400044 	addi	r17,r17,1
 8001640:	2c85883a 	add	r2,r5,r18
 8001644:	14bfffc4 	addi	r18,r2,-1
 8001648:	28bfffc4 	addi	r2,r5,-1
 800164c:	30c00044 	addi	r3,r6,1
 8001650:	98800115 	stw	r2,4(r19)
 8001654:	008001c4 	movi	r2,7
 8001658:	98c00015 	stw	r3,0(r19)
 800165c:	dc800e15 	stw	r18,56(sp)
 8001660:	dc400d15 	stw	r17,52(sp)
 8001664:	14418e16 	blt	r2,r17,8001ca0 <___vfprintf_internal_r+0xde8>
 8001668:	9cc00204 	addi	r19,r19,8
 800166c:	d9414817 	ldw	r5,1312(sp)
 8001670:	d8800804 	addi	r2,sp,32
 8001674:	8c400044 	addi	r17,r17,1
 8001678:	9165883a 	add	r18,r18,r5
 800167c:	98800015 	stw	r2,0(r19)
 8001680:	008001c4 	movi	r2,7
 8001684:	99400115 	stw	r5,4(r19)
 8001688:	dc800e15 	stw	r18,56(sp)
 800168c:	dc400d15 	stw	r17,52(sp)
 8001690:	1440ed16 	blt	r2,r17,8001a48 <___vfprintf_internal_r+0xb90>
 8001694:	98c00204 	addi	r3,r19,8
 8001698:	003f8506 	br	80014b0 <___vfprintf_internal_r+0x5f8>
 800169c:	d9814a17 	ldw	r6,1320(sp)
 80016a0:	d8814517 	ldw	r2,1300(sp)
 80016a4:	30a1c83a 	sub	r16,r6,r2
 80016a8:	043f4b0e 	bge	zero,r16,80013d8 <___vfprintf_internal_r+0x520>
 80016ac:	00800404 	movi	r2,16
 80016b0:	14043a0e 	bge	r2,r16,800279c <___vfprintf_internal_r+0x18e4>
 80016b4:	1027883a 	mov	r19,r2
 80016b8:	07020074 	movhi	fp,2049
 80016bc:	e7039684 	addi	fp,fp,3674
 80016c0:	050001c4 	movi	r20,7
 80016c4:	00000306 	br	80016d4 <___vfprintf_internal_r+0x81c>
 80016c8:	843ffc04 	addi	r16,r16,-16
 80016cc:	ad400204 	addi	r21,r21,8
 80016d0:	9c00130e 	bge	r19,r16,8001720 <___vfprintf_internal_r+0x868>
 80016d4:	94800404 	addi	r18,r18,16
 80016d8:	8c400044 	addi	r17,r17,1
 80016dc:	af000015 	stw	fp,0(r21)
 80016e0:	acc00115 	stw	r19,4(r21)
 80016e4:	dc800e15 	stw	r18,56(sp)
 80016e8:	dc400d15 	stw	r17,52(sp)
 80016ec:	a47ff60e 	bge	r20,r17,80016c8 <___vfprintf_internal_r+0x810>
 80016f0:	d9014f17 	ldw	r4,1340(sp)
 80016f4:	b00b883a 	mov	r5,r22
 80016f8:	d9800c04 	addi	r6,sp,48
 80016fc:	d9c15115 	stw	r7,1348(sp)
 8001700:	8000e600 	call	8000e60 <__sprint_r>
 8001704:	d9c15117 	ldw	r7,1348(sp)
 8001708:	103fa31e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 800170c:	843ffc04 	addi	r16,r16,-16
 8001710:	dc800e17 	ldw	r18,56(sp)
 8001714:	dc400d17 	ldw	r17,52(sp)
 8001718:	dd401904 	addi	r21,sp,100
 800171c:	9c3fed16 	blt	r19,r16,80016d4 <___vfprintf_internal_r+0x81c>
 8001720:	9425883a 	add	r18,r18,r16
 8001724:	8c400044 	addi	r17,r17,1
 8001728:	008001c4 	movi	r2,7
 800172c:	af000015 	stw	fp,0(r21)
 8001730:	ac000115 	stw	r16,4(r21)
 8001734:	dc800e15 	stw	r18,56(sp)
 8001738:	dc400d15 	stw	r17,52(sp)
 800173c:	14416116 	blt	r2,r17,8001cc4 <___vfprintf_internal_r+0xe0c>
 8001740:	ad400204 	addi	r21,r21,8
 8001744:	003f2406 	br	80013d8 <___vfprintf_internal_r+0x520>
 8001748:	d9014f17 	ldw	r4,1340(sp)
 800174c:	800496c0 	call	800496c <__sinit>
 8001750:	d9c15117 	ldw	r7,1348(sp)
 8001754:	003def06 	br	8000f14 <___vfprintf_internal_r+0x5c>
 8001758:	d9014f17 	ldw	r4,1340(sp)
 800175c:	b00b883a 	mov	r5,r22
 8001760:	d9c15115 	stw	r7,1348(sp)
 8001764:	8002da00 	call	8002da0 <__swsetup_r>
 8001768:	d9c15117 	ldw	r7,1348(sp)
 800176c:	103dee26 	beq	r2,zero,8000f28 <___vfprintf_internal_r+0x70>
 8001770:	003f8c06 	br	80015a4 <___vfprintf_internal_r+0x6ec>
 8001774:	d9014217 	ldw	r4,1288(sp)
 8001778:	d9414317 	ldw	r5,1292(sp)
 800177c:	000d883a 	mov	r6,zero
 8001780:	000f883a 	mov	r7,zero
 8001784:	80091340 	call	8009134 <__eqdf2>
 8001788:	1000f21e 	bne	r2,zero,8001b54 <___vfprintf_internal_r+0xc9c>
 800178c:	00820074 	movhi	r2,2049
 8001790:	10839604 	addi	r2,r2,3672
 8001794:	94800044 	addi	r18,r18,1
 8001798:	8c400044 	addi	r17,r17,1
 800179c:	a8800015 	stw	r2,0(r21)
 80017a0:	00c00044 	movi	r3,1
 80017a4:	008001c4 	movi	r2,7
 80017a8:	a8c00115 	stw	r3,4(r21)
 80017ac:	dc800e15 	stw	r18,56(sp)
 80017b0:	dc400d15 	stw	r17,52(sp)
 80017b4:	14430016 	blt	r2,r17,80023b8 <___vfprintf_internal_r+0x1500>
 80017b8:	a8c00204 	addi	r3,r21,8
 80017bc:	d8800517 	ldw	r2,20(sp)
 80017c0:	d9014717 	ldw	r4,1308(sp)
 80017c4:	11015c0e 	bge	r2,r4,8001d38 <___vfprintf_internal_r+0xe80>
 80017c8:	dc400d17 	ldw	r17,52(sp)
 80017cc:	d9814917 	ldw	r6,1316(sp)
 80017d0:	00800044 	movi	r2,1
 80017d4:	94800044 	addi	r18,r18,1
 80017d8:	8c400044 	addi	r17,r17,1
 80017dc:	18800115 	stw	r2,4(r3)
 80017e0:	008001c4 	movi	r2,7
 80017e4:	19800015 	stw	r6,0(r3)
 80017e8:	dc800e15 	stw	r18,56(sp)
 80017ec:	dc400d15 	stw	r17,52(sp)
 80017f0:	14431616 	blt	r2,r17,800244c <___vfprintf_internal_r+0x1594>
 80017f4:	18c00204 	addi	r3,r3,8
 80017f8:	d8814717 	ldw	r2,1308(sp)
 80017fc:	143fffc4 	addi	r16,r2,-1
 8001800:	043f2b0e 	bge	zero,r16,80014b0 <___vfprintf_internal_r+0x5f8>
 8001804:	00800404 	movi	r2,16
 8001808:	1402a80e 	bge	r2,r16,80022ac <___vfprintf_internal_r+0x13f4>
 800180c:	dc400d17 	ldw	r17,52(sp)
 8001810:	1027883a 	mov	r19,r2
 8001814:	07020074 	movhi	fp,2049
 8001818:	e7039684 	addi	fp,fp,3674
 800181c:	050001c4 	movi	r20,7
 8001820:	00000306 	br	8001830 <___vfprintf_internal_r+0x978>
 8001824:	18c00204 	addi	r3,r3,8
 8001828:	843ffc04 	addi	r16,r16,-16
 800182c:	9c02a20e 	bge	r19,r16,80022b8 <___vfprintf_internal_r+0x1400>
 8001830:	94800404 	addi	r18,r18,16
 8001834:	8c400044 	addi	r17,r17,1
 8001838:	1f000015 	stw	fp,0(r3)
 800183c:	1cc00115 	stw	r19,4(r3)
 8001840:	dc800e15 	stw	r18,56(sp)
 8001844:	dc400d15 	stw	r17,52(sp)
 8001848:	a47ff60e 	bge	r20,r17,8001824 <___vfprintf_internal_r+0x96c>
 800184c:	d9014f17 	ldw	r4,1340(sp)
 8001850:	b00b883a 	mov	r5,r22
 8001854:	d9800c04 	addi	r6,sp,48
 8001858:	8000e600 	call	8000e60 <__sprint_r>
 800185c:	103f4e1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001860:	dc800e17 	ldw	r18,56(sp)
 8001864:	dc400d17 	ldw	r17,52(sp)
 8001868:	d8c01904 	addi	r3,sp,100
 800186c:	003fee06 	br	8001828 <___vfprintf_internal_r+0x970>
 8001870:	d8802c0b 	ldhu	r2,176(sp)
 8001874:	00ffffc4 	movi	r3,-1
 8001878:	d8c14b15 	stw	r3,1324(sp)
 800187c:	1080100c 	andi	r2,r2,64
 8001880:	103dcc1e 	bne	r2,zero,8000fb4 <___vfprintf_internal_r+0xfc>
 8001884:	003dce06 	br	8000fc0 <___vfprintf_internal_r+0x108>
 8001888:	d9014f17 	ldw	r4,1340(sp)
 800188c:	b00b883a 	mov	r5,r22
 8001890:	d9800c04 	addi	r6,sp,48
 8001894:	8000e600 	call	8000e60 <__sprint_r>
 8001898:	103f3f1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 800189c:	dc800e17 	ldw	r18,56(sp)
 80018a0:	003f2e06 	br	800155c <___vfprintf_internal_r+0x6a4>
 80018a4:	d9414c17 	ldw	r5,1328(sp)
 80018a8:	29400414 	ori	r5,r5,16
 80018ac:	d9414c15 	stw	r5,1328(sp)
 80018b0:	d9814c17 	ldw	r6,1328(sp)
 80018b4:	3080080c 	andi	r2,r6,32
 80018b8:	10014f1e 	bne	r2,zero,8001df8 <___vfprintf_internal_r+0xf40>
 80018bc:	d8c14c17 	ldw	r3,1328(sp)
 80018c0:	1880040c 	andi	r2,r3,16
 80018c4:	1002f01e 	bne	r2,zero,8002488 <___vfprintf_internal_r+0x15d0>
 80018c8:	d9014c17 	ldw	r4,1328(sp)
 80018cc:	2080100c 	andi	r2,r4,64
 80018d0:	1002ed26 	beq	r2,zero,8002488 <___vfprintf_internal_r+0x15d0>
 80018d4:	3880000f 	ldh	r2,0(r7)
 80018d8:	39c00104 	addi	r7,r7,4
 80018dc:	d9c14015 	stw	r7,1280(sp)
 80018e0:	1023d7fa 	srai	r17,r2,31
 80018e4:	1021883a 	mov	r16,r2
 80018e8:	88037816 	blt	r17,zero,80026cc <___vfprintf_internal_r+0x1814>
 80018ec:	01000044 	movi	r4,1
 80018f0:	98000416 	blt	r19,zero,8001904 <___vfprintf_internal_r+0xa4c>
 80018f4:	d8c14c17 	ldw	r3,1328(sp)
 80018f8:	00bfdfc4 	movi	r2,-129
 80018fc:	1886703a 	and	r3,r3,r2
 8001900:	d8c14c15 	stw	r3,1328(sp)
 8001904:	8444b03a 	or	r2,r16,r17
 8001908:	10022c1e 	bne	r2,zero,80021bc <___vfprintf_internal_r+0x1304>
 800190c:	98022b1e 	bne	r19,zero,80021bc <___vfprintf_internal_r+0x1304>
 8001910:	20803fcc 	andi	r2,r4,255
 8001914:	1002a126 	beq	r2,zero,800239c <___vfprintf_internal_r+0x14e4>
 8001918:	d8c01904 	addi	r3,sp,100
 800191c:	dd000f04 	addi	r20,sp,60
 8001920:	d8c14115 	stw	r3,1284(sp)
 8001924:	d8c14117 	ldw	r3,1284(sp)
 8001928:	dcc14515 	stw	r19,1300(sp)
 800192c:	a0c5c83a 	sub	r2,r20,r3
 8001930:	11c00a04 	addi	r7,r2,40
 8001934:	99c0010e 	bge	r19,r7,800193c <___vfprintf_internal_r+0xa84>
 8001938:	d9c14515 	stw	r7,1300(sp)
 800193c:	dcc14615 	stw	r19,1304(sp)
 8001940:	d8800407 	ldb	r2,16(sp)
 8001944:	103e4c26 	beq	r2,zero,8001278 <___vfprintf_internal_r+0x3c0>
 8001948:	d8814517 	ldw	r2,1300(sp)
 800194c:	10800044 	addi	r2,r2,1
 8001950:	d8814515 	stw	r2,1300(sp)
 8001954:	003e4806 	br	8001278 <___vfprintf_internal_r+0x3c0>
 8001958:	d9814c17 	ldw	r6,1328(sp)
 800195c:	31800414 	ori	r6,r6,16
 8001960:	d9814c15 	stw	r6,1328(sp)
 8001964:	d8c14c17 	ldw	r3,1328(sp)
 8001968:	1880080c 	andi	r2,r3,32
 800196c:	1001271e 	bne	r2,zero,8001e0c <___vfprintf_internal_r+0xf54>
 8001970:	d9414c17 	ldw	r5,1328(sp)
 8001974:	2880040c 	andi	r2,r5,16
 8001978:	1002bc1e 	bne	r2,zero,800246c <___vfprintf_internal_r+0x15b4>
 800197c:	d9814c17 	ldw	r6,1328(sp)
 8001980:	3080100c 	andi	r2,r6,64
 8001984:	1002b926 	beq	r2,zero,800246c <___vfprintf_internal_r+0x15b4>
 8001988:	3c00000b 	ldhu	r16,0(r7)
 800198c:	0009883a 	mov	r4,zero
 8001990:	39c00104 	addi	r7,r7,4
 8001994:	0023883a 	mov	r17,zero
 8001998:	d9c14015 	stw	r7,1280(sp)
 800199c:	d8000405 	stb	zero,16(sp)
 80019a0:	003fd306 	br	80018f0 <___vfprintf_internal_r+0xa38>
 80019a4:	d9014c17 	ldw	r4,1328(sp)
 80019a8:	21000414 	ori	r4,r4,16
 80019ac:	d9014c15 	stw	r4,1328(sp)
 80019b0:	d9414c17 	ldw	r5,1328(sp)
 80019b4:	2880080c 	andi	r2,r5,32
 80019b8:	1001081e 	bne	r2,zero,8001ddc <___vfprintf_internal_r+0xf24>
 80019bc:	d8c14c17 	ldw	r3,1328(sp)
 80019c0:	1880040c 	andi	r2,r3,16
 80019c4:	1002b61e 	bne	r2,zero,80024a0 <___vfprintf_internal_r+0x15e8>
 80019c8:	d9014c17 	ldw	r4,1328(sp)
 80019cc:	2080100c 	andi	r2,r4,64
 80019d0:	1002b326 	beq	r2,zero,80024a0 <___vfprintf_internal_r+0x15e8>
 80019d4:	3c00000b 	ldhu	r16,0(r7)
 80019d8:	01000044 	movi	r4,1
 80019dc:	39c00104 	addi	r7,r7,4
 80019e0:	0023883a 	mov	r17,zero
 80019e4:	d9c14015 	stw	r7,1280(sp)
 80019e8:	d8000405 	stb	zero,16(sp)
 80019ec:	003fc006 	br	80018f0 <___vfprintf_internal_r+0xa38>
 80019f0:	d9014f17 	ldw	r4,1340(sp)
 80019f4:	b00b883a 	mov	r5,r22
 80019f8:	d9800c04 	addi	r6,sp,48
 80019fc:	8000e600 	call	8000e60 <__sprint_r>
 8001a00:	103ee51e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001a04:	dc800e17 	ldw	r18,56(sp)
 8001a08:	d8c01904 	addi	r3,sp,100
 8001a0c:	d9814c17 	ldw	r6,1328(sp)
 8001a10:	3080004c 	andi	r2,r6,1
 8001a14:	1005003a 	cmpeq	r2,r2,zero
 8001a18:	103ea51e 	bne	r2,zero,80014b0 <___vfprintf_internal_r+0x5f8>
 8001a1c:	00800044 	movi	r2,1
 8001a20:	dc400d17 	ldw	r17,52(sp)
 8001a24:	18800115 	stw	r2,4(r3)
 8001a28:	d8814917 	ldw	r2,1316(sp)
 8001a2c:	94800044 	addi	r18,r18,1
 8001a30:	8c400044 	addi	r17,r17,1
 8001a34:	18800015 	stw	r2,0(r3)
 8001a38:	008001c4 	movi	r2,7
 8001a3c:	dc800e15 	stw	r18,56(sp)
 8001a40:	dc400d15 	stw	r17,52(sp)
 8001a44:	1442240e 	bge	r2,r17,80022d8 <___vfprintf_internal_r+0x1420>
 8001a48:	d9014f17 	ldw	r4,1340(sp)
 8001a4c:	b00b883a 	mov	r5,r22
 8001a50:	d9800c04 	addi	r6,sp,48
 8001a54:	8000e600 	call	8000e60 <__sprint_r>
 8001a58:	103ecf1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001a5c:	dc800e17 	ldw	r18,56(sp)
 8001a60:	d8c01904 	addi	r3,sp,100
 8001a64:	003e9206 	br	80014b0 <___vfprintf_internal_r+0x5f8>
 8001a68:	d9014f17 	ldw	r4,1340(sp)
 8001a6c:	b00b883a 	mov	r5,r22
 8001a70:	d9800c04 	addi	r6,sp,48
 8001a74:	8000e600 	call	8000e60 <__sprint_r>
 8001a78:	103ec026 	beq	r2,zero,800157c <___vfprintf_internal_r+0x6c4>
 8001a7c:	003ec606 	br	8001598 <___vfprintf_internal_r+0x6e0>
 8001a80:	d9014f17 	ldw	r4,1340(sp)
 8001a84:	b00b883a 	mov	r5,r22
 8001a88:	d9800c04 	addi	r6,sp,48
 8001a8c:	d9c15115 	stw	r7,1348(sp)
 8001a90:	8000e600 	call	8000e60 <__sprint_r>
 8001a94:	d9c15117 	ldw	r7,1348(sp)
 8001a98:	103ebf1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001a9c:	dc800e17 	ldw	r18,56(sp)
 8001aa0:	dc400d17 	ldw	r17,52(sp)
 8001aa4:	dd401904 	addi	r21,sp,100
 8001aa8:	003e7406 	br	800147c <___vfprintf_internal_r+0x5c4>
 8001aac:	d9014f17 	ldw	r4,1340(sp)
 8001ab0:	b00b883a 	mov	r5,r22
 8001ab4:	d9800c04 	addi	r6,sp,48
 8001ab8:	d9c15115 	stw	r7,1348(sp)
 8001abc:	8000e600 	call	8000e60 <__sprint_r>
 8001ac0:	d9c15117 	ldw	r7,1348(sp)
 8001ac4:	103eb41e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001ac8:	dd401904 	addi	r21,sp,100
 8001acc:	003d6d06 	br	8001084 <___vfprintf_internal_r+0x1cc>
 8001ad0:	d9014f17 	ldw	r4,1340(sp)
 8001ad4:	b00b883a 	mov	r5,r22
 8001ad8:	d9800c04 	addi	r6,sp,48
 8001adc:	d9c15115 	stw	r7,1348(sp)
 8001ae0:	8000e600 	call	8000e60 <__sprint_r>
 8001ae4:	d9c15117 	ldw	r7,1348(sp)
 8001ae8:	103eab1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001aec:	dc800e17 	ldw	r18,56(sp)
 8001af0:	dc400d17 	ldw	r17,52(sp)
 8001af4:	dd401904 	addi	r21,sp,100
 8001af8:	003e3406 	br	80013cc <___vfprintf_internal_r+0x514>
 8001afc:	d9014f17 	ldw	r4,1340(sp)
 8001b00:	b00b883a 	mov	r5,r22
 8001b04:	d9800c04 	addi	r6,sp,48
 8001b08:	d9c15115 	stw	r7,1348(sp)
 8001b0c:	8000e600 	call	8000e60 <__sprint_r>
 8001b10:	d9c15117 	ldw	r7,1348(sp)
 8001b14:	103ea01e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001b18:	dc800e17 	ldw	r18,56(sp)
 8001b1c:	dc400d17 	ldw	r17,52(sp)
 8001b20:	dd401904 	addi	r21,sp,100
 8001b24:	003e1c06 	br	8001398 <___vfprintf_internal_r+0x4e0>
 8001b28:	d9014f17 	ldw	r4,1340(sp)
 8001b2c:	b00b883a 	mov	r5,r22
 8001b30:	d9800c04 	addi	r6,sp,48
 8001b34:	d9c15115 	stw	r7,1348(sp)
 8001b38:	8000e600 	call	8000e60 <__sprint_r>
 8001b3c:	d9c15117 	ldw	r7,1348(sp)
 8001b40:	103e951e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001b44:	dc800e17 	ldw	r18,56(sp)
 8001b48:	dc400d17 	ldw	r17,52(sp)
 8001b4c:	dd401904 	addi	r21,sp,100
 8001b50:	003e0406 	br	8001364 <___vfprintf_internal_r+0x4ac>
 8001b54:	d9000517 	ldw	r4,20(sp)
 8001b58:	0102580e 	bge	zero,r4,80024bc <___vfprintf_internal_r+0x1604>
 8001b5c:	d9814717 	ldw	r6,1308(sp)
 8001b60:	21807a16 	blt	r4,r6,8001d4c <___vfprintf_internal_r+0xe94>
 8001b64:	d8814117 	ldw	r2,1284(sp)
 8001b68:	91a5883a 	add	r18,r18,r6
 8001b6c:	8c400044 	addi	r17,r17,1
 8001b70:	a8800015 	stw	r2,0(r21)
 8001b74:	008001c4 	movi	r2,7
 8001b78:	a9800115 	stw	r6,4(r21)
 8001b7c:	dc800e15 	stw	r18,56(sp)
 8001b80:	dc400d15 	stw	r17,52(sp)
 8001b84:	1442fc16 	blt	r2,r17,8002778 <___vfprintf_internal_r+0x18c0>
 8001b88:	a8c00204 	addi	r3,r21,8
 8001b8c:	d9414717 	ldw	r5,1308(sp)
 8001b90:	2161c83a 	sub	r16,r4,r5
 8001b94:	043f9d0e 	bge	zero,r16,8001a0c <___vfprintf_internal_r+0xb54>
 8001b98:	00800404 	movi	r2,16
 8001b9c:	1402190e 	bge	r2,r16,8002404 <___vfprintf_internal_r+0x154c>
 8001ba0:	dc400d17 	ldw	r17,52(sp)
 8001ba4:	1027883a 	mov	r19,r2
 8001ba8:	07020074 	movhi	fp,2049
 8001bac:	e7039684 	addi	fp,fp,3674
 8001bb0:	050001c4 	movi	r20,7
 8001bb4:	00000306 	br	8001bc4 <___vfprintf_internal_r+0xd0c>
 8001bb8:	18c00204 	addi	r3,r3,8
 8001bbc:	843ffc04 	addi	r16,r16,-16
 8001bc0:	9c02130e 	bge	r19,r16,8002410 <___vfprintf_internal_r+0x1558>
 8001bc4:	94800404 	addi	r18,r18,16
 8001bc8:	8c400044 	addi	r17,r17,1
 8001bcc:	1f000015 	stw	fp,0(r3)
 8001bd0:	1cc00115 	stw	r19,4(r3)
 8001bd4:	dc800e15 	stw	r18,56(sp)
 8001bd8:	dc400d15 	stw	r17,52(sp)
 8001bdc:	a47ff60e 	bge	r20,r17,8001bb8 <___vfprintf_internal_r+0xd00>
 8001be0:	d9014f17 	ldw	r4,1340(sp)
 8001be4:	b00b883a 	mov	r5,r22
 8001be8:	d9800c04 	addi	r6,sp,48
 8001bec:	8000e600 	call	8000e60 <__sprint_r>
 8001bf0:	103e691e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001bf4:	dc800e17 	ldw	r18,56(sp)
 8001bf8:	dc400d17 	ldw	r17,52(sp)
 8001bfc:	d8c01904 	addi	r3,sp,100
 8001c00:	003fee06 	br	8001bbc <___vfprintf_internal_r+0xd04>
 8001c04:	d8814717 	ldw	r2,1308(sp)
 8001c08:	143fffc4 	addi	r16,r2,-1
 8001c0c:	043e970e 	bge	zero,r16,800166c <___vfprintf_internal_r+0x7b4>
 8001c10:	00800404 	movi	r2,16
 8001c14:	1400180e 	bge	r2,r16,8001c78 <___vfprintf_internal_r+0xdc0>
 8001c18:	1029883a 	mov	r20,r2
 8001c1c:	07020074 	movhi	fp,2049
 8001c20:	e7039684 	addi	fp,fp,3674
 8001c24:	054001c4 	movi	r21,7
 8001c28:	00000306 	br	8001c38 <___vfprintf_internal_r+0xd80>
 8001c2c:	9cc00204 	addi	r19,r19,8
 8001c30:	843ffc04 	addi	r16,r16,-16
 8001c34:	a400120e 	bge	r20,r16,8001c80 <___vfprintf_internal_r+0xdc8>
 8001c38:	94800404 	addi	r18,r18,16
 8001c3c:	8c400044 	addi	r17,r17,1
 8001c40:	9f000015 	stw	fp,0(r19)
 8001c44:	9d000115 	stw	r20,4(r19)
 8001c48:	dc800e15 	stw	r18,56(sp)
 8001c4c:	dc400d15 	stw	r17,52(sp)
 8001c50:	ac7ff60e 	bge	r21,r17,8001c2c <___vfprintf_internal_r+0xd74>
 8001c54:	d9014f17 	ldw	r4,1340(sp)
 8001c58:	b00b883a 	mov	r5,r22
 8001c5c:	d9800c04 	addi	r6,sp,48
 8001c60:	8000e600 	call	8000e60 <__sprint_r>
 8001c64:	103e4c1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001c68:	dc800e17 	ldw	r18,56(sp)
 8001c6c:	dc400d17 	ldw	r17,52(sp)
 8001c70:	dcc01904 	addi	r19,sp,100
 8001c74:	003fee06 	br	8001c30 <___vfprintf_internal_r+0xd78>
 8001c78:	07020074 	movhi	fp,2049
 8001c7c:	e7039684 	addi	fp,fp,3674
 8001c80:	9425883a 	add	r18,r18,r16
 8001c84:	8c400044 	addi	r17,r17,1
 8001c88:	008001c4 	movi	r2,7
 8001c8c:	9f000015 	stw	fp,0(r19)
 8001c90:	9c000115 	stw	r16,4(r19)
 8001c94:	dc800e15 	stw	r18,56(sp)
 8001c98:	dc400d15 	stw	r17,52(sp)
 8001c9c:	147e720e 	bge	r2,r17,8001668 <___vfprintf_internal_r+0x7b0>
 8001ca0:	d9014f17 	ldw	r4,1340(sp)
 8001ca4:	b00b883a 	mov	r5,r22
 8001ca8:	d9800c04 	addi	r6,sp,48
 8001cac:	8000e600 	call	8000e60 <__sprint_r>
 8001cb0:	103e391e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001cb4:	dc800e17 	ldw	r18,56(sp)
 8001cb8:	dc400d17 	ldw	r17,52(sp)
 8001cbc:	dcc01904 	addi	r19,sp,100
 8001cc0:	003e6a06 	br	800166c <___vfprintf_internal_r+0x7b4>
 8001cc4:	d9014f17 	ldw	r4,1340(sp)
 8001cc8:	b00b883a 	mov	r5,r22
 8001ccc:	d9800c04 	addi	r6,sp,48
 8001cd0:	d9c15115 	stw	r7,1348(sp)
 8001cd4:	8000e600 	call	8000e60 <__sprint_r>
 8001cd8:	d9c15117 	ldw	r7,1348(sp)
 8001cdc:	103e2e1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001ce0:	dc800e17 	ldw	r18,56(sp)
 8001ce4:	dc400d17 	ldw	r17,52(sp)
 8001ce8:	dd401904 	addi	r21,sp,100
 8001cec:	003dba06 	br	80013d8 <___vfprintf_internal_r+0x520>
 8001cf0:	d9014f17 	ldw	r4,1340(sp)
 8001cf4:	b00b883a 	mov	r5,r22
 8001cf8:	d9800c04 	addi	r6,sp,48
 8001cfc:	8000e600 	call	8000e60 <__sprint_r>
 8001d00:	103e251e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001d04:	dc800e17 	ldw	r18,56(sp)
 8001d08:	dc400d17 	ldw	r17,52(sp)
 8001d0c:	dcc01904 	addi	r19,sp,100
 8001d10:	003e4206 	br	800161c <___vfprintf_internal_r+0x764>
 8001d14:	d9014f17 	ldw	r4,1340(sp)
 8001d18:	b00b883a 	mov	r5,r22
 8001d1c:	d9800c04 	addi	r6,sp,48
 8001d20:	8000e600 	call	8000e60 <__sprint_r>
 8001d24:	103e1c1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8001d28:	dc800e17 	ldw	r18,56(sp)
 8001d2c:	dc400d17 	ldw	r17,52(sp)
 8001d30:	d8c01904 	addi	r3,sp,100
 8001d34:	003e2e06 	br	80015f0 <___vfprintf_internal_r+0x738>
 8001d38:	d9414c17 	ldw	r5,1328(sp)
 8001d3c:	2880004c 	andi	r2,r5,1
 8001d40:	1005003a 	cmpeq	r2,r2,zero
 8001d44:	103dda1e 	bne	r2,zero,80014b0 <___vfprintf_internal_r+0x5f8>
 8001d48:	003e9f06 	br	80017c8 <___vfprintf_internal_r+0x910>
 8001d4c:	d8c14117 	ldw	r3,1284(sp)
 8001d50:	9125883a 	add	r18,r18,r4
 8001d54:	8c400044 	addi	r17,r17,1
 8001d58:	008001c4 	movi	r2,7
 8001d5c:	a8c00015 	stw	r3,0(r21)
 8001d60:	a9000115 	stw	r4,4(r21)
 8001d64:	dc800e15 	stw	r18,56(sp)
 8001d68:	dc400d15 	stw	r17,52(sp)
 8001d6c:	14426c16 	blt	r2,r17,8002720 <___vfprintf_internal_r+0x1868>
 8001d70:	a8c00204 	addi	r3,r21,8
 8001d74:	d9414917 	ldw	r5,1316(sp)
 8001d78:	00800044 	movi	r2,1
 8001d7c:	94800044 	addi	r18,r18,1
 8001d80:	8c400044 	addi	r17,r17,1
 8001d84:	18800115 	stw	r2,4(r3)
 8001d88:	008001c4 	movi	r2,7
 8001d8c:	19400015 	stw	r5,0(r3)
 8001d90:	dc800e15 	stw	r18,56(sp)
 8001d94:	dc400d15 	stw	r17,52(sp)
 8001d98:	2021883a 	mov	r16,r4
 8001d9c:	14425616 	blt	r2,r17,80026f8 <___vfprintf_internal_r+0x1840>
 8001da0:	19400204 	addi	r5,r3,8
 8001da4:	d9814717 	ldw	r6,1308(sp)
 8001da8:	8c400044 	addi	r17,r17,1
 8001dac:	dc400d15 	stw	r17,52(sp)
 8001db0:	3107c83a 	sub	r3,r6,r4
 8001db4:	d9014117 	ldw	r4,1284(sp)
 8001db8:	90e5883a 	add	r18,r18,r3
 8001dbc:	28c00115 	stw	r3,4(r5)
 8001dc0:	8105883a 	add	r2,r16,r4
 8001dc4:	28800015 	stw	r2,0(r5)
 8001dc8:	008001c4 	movi	r2,7
 8001dcc:	dc800e15 	stw	r18,56(sp)
 8001dd0:	147f1d16 	blt	r2,r17,8001a48 <___vfprintf_internal_r+0xb90>
 8001dd4:	28c00204 	addi	r3,r5,8
 8001dd8:	003db506 	br	80014b0 <___vfprintf_internal_r+0x5f8>
 8001ddc:	3c000017 	ldw	r16,0(r7)
 8001de0:	3c400117 	ldw	r17,4(r7)
 8001de4:	39800204 	addi	r6,r7,8
 8001de8:	01000044 	movi	r4,1
 8001dec:	d9814015 	stw	r6,1280(sp)
 8001df0:	d8000405 	stb	zero,16(sp)
 8001df4:	003ebe06 	br	80018f0 <___vfprintf_internal_r+0xa38>
 8001df8:	3c000017 	ldw	r16,0(r7)
 8001dfc:	3c400117 	ldw	r17,4(r7)
 8001e00:	38800204 	addi	r2,r7,8
 8001e04:	d8814015 	stw	r2,1280(sp)
 8001e08:	003eb706 	br	80018e8 <___vfprintf_internal_r+0xa30>
 8001e0c:	3c000017 	ldw	r16,0(r7)
 8001e10:	3c400117 	ldw	r17,4(r7)
 8001e14:	39000204 	addi	r4,r7,8
 8001e18:	d9014015 	stw	r4,1280(sp)
 8001e1c:	0009883a 	mov	r4,zero
 8001e20:	d8000405 	stb	zero,16(sp)
 8001e24:	003eb206 	br	80018f0 <___vfprintf_internal_r+0xa38>
 8001e28:	38c00017 	ldw	r3,0(r7)
 8001e2c:	39c00104 	addi	r7,r7,4
 8001e30:	d8c14a15 	stw	r3,1320(sp)
 8001e34:	1800d70e 	bge	r3,zero,8002194 <___vfprintf_internal_r+0x12dc>
 8001e38:	00c7c83a 	sub	r3,zero,r3
 8001e3c:	d8c14a15 	stw	r3,1320(sp)
 8001e40:	d9014c17 	ldw	r4,1328(sp)
 8001e44:	b8c00007 	ldb	r3,0(r23)
 8001e48:	21000114 	ori	r4,r4,4
 8001e4c:	d9014c15 	stw	r4,1328(sp)
 8001e50:	003c9806 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 8001e54:	d9814c17 	ldw	r6,1328(sp)
 8001e58:	3080080c 	andi	r2,r6,32
 8001e5c:	1001f626 	beq	r2,zero,8002638 <___vfprintf_internal_r+0x1780>
 8001e60:	d9014b17 	ldw	r4,1324(sp)
 8001e64:	38800017 	ldw	r2,0(r7)
 8001e68:	39c00104 	addi	r7,r7,4
 8001e6c:	d9c14015 	stw	r7,1280(sp)
 8001e70:	2007d7fa 	srai	r3,r4,31
 8001e74:	d9c14017 	ldw	r7,1280(sp)
 8001e78:	11000015 	stw	r4,0(r2)
 8001e7c:	10c00115 	stw	r3,4(r2)
 8001e80:	003c6906 	br	8001028 <___vfprintf_internal_r+0x170>
 8001e84:	b8c00007 	ldb	r3,0(r23)
 8001e88:	00801b04 	movi	r2,108
 8001e8c:	18825526 	beq	r3,r2,80027e4 <___vfprintf_internal_r+0x192c>
 8001e90:	d9414c17 	ldw	r5,1328(sp)
 8001e94:	29400414 	ori	r5,r5,16
 8001e98:	d9414c15 	stw	r5,1328(sp)
 8001e9c:	003c8506 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 8001ea0:	d9814c17 	ldw	r6,1328(sp)
 8001ea4:	b8c00007 	ldb	r3,0(r23)
 8001ea8:	31800814 	ori	r6,r6,32
 8001eac:	d9814c15 	stw	r6,1328(sp)
 8001eb0:	003c8006 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 8001eb4:	d8814c17 	ldw	r2,1328(sp)
 8001eb8:	3c000017 	ldw	r16,0(r7)
 8001ebc:	00c01e04 	movi	r3,120
 8001ec0:	10800094 	ori	r2,r2,2
 8001ec4:	d8814c15 	stw	r2,1328(sp)
 8001ec8:	39c00104 	addi	r7,r7,4
 8001ecc:	01420074 	movhi	r5,2049
 8001ed0:	29437f04 	addi	r5,r5,3580
 8001ed4:	00800c04 	movi	r2,48
 8001ed8:	0023883a 	mov	r17,zero
 8001edc:	01000084 	movi	r4,2
 8001ee0:	d9c14015 	stw	r7,1280(sp)
 8001ee4:	d8c14d15 	stw	r3,1332(sp)
 8001ee8:	d9414415 	stw	r5,1296(sp)
 8001eec:	d8800445 	stb	r2,17(sp)
 8001ef0:	d8c00485 	stb	r3,18(sp)
 8001ef4:	d8000405 	stb	zero,16(sp)
 8001ef8:	003e7d06 	br	80018f0 <___vfprintf_internal_r+0xa38>
 8001efc:	d8814c17 	ldw	r2,1328(sp)
 8001f00:	b8c00007 	ldb	r3,0(r23)
 8001f04:	10801014 	ori	r2,r2,64
 8001f08:	d8814c15 	stw	r2,1328(sp)
 8001f0c:	003c6906 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 8001f10:	d9414c17 	ldw	r5,1328(sp)
 8001f14:	2880020c 	andi	r2,r5,8
 8001f18:	1001e526 	beq	r2,zero,80026b0 <___vfprintf_internal_r+0x17f8>
 8001f1c:	39800017 	ldw	r6,0(r7)
 8001f20:	38800204 	addi	r2,r7,8
 8001f24:	d8814015 	stw	r2,1280(sp)
 8001f28:	d9814215 	stw	r6,1288(sp)
 8001f2c:	39c00117 	ldw	r7,4(r7)
 8001f30:	d9c14315 	stw	r7,1292(sp)
 8001f34:	d9014217 	ldw	r4,1288(sp)
 8001f38:	d9414317 	ldw	r5,1292(sp)
 8001f3c:	80072280 	call	8007228 <__isinfd>
 8001f40:	10021d26 	beq	r2,zero,80027b8 <___vfprintf_internal_r+0x1900>
 8001f44:	d9014217 	ldw	r4,1288(sp)
 8001f48:	d9414317 	ldw	r5,1292(sp)
 8001f4c:	000d883a 	mov	r6,zero
 8001f50:	000f883a 	mov	r7,zero
 8001f54:	80093540 	call	8009354 <__ltdf2>
 8001f58:	1002d016 	blt	r2,zero,8002a9c <___vfprintf_internal_r+0x1be4>
 8001f5c:	d9414d17 	ldw	r5,1332(sp)
 8001f60:	008011c4 	movi	r2,71
 8001f64:	11421016 	blt	r2,r5,80027a8 <___vfprintf_internal_r+0x18f0>
 8001f68:	01820074 	movhi	r6,2049
 8001f6c:	31838404 	addi	r6,r6,3600
 8001f70:	d9814115 	stw	r6,1284(sp)
 8001f74:	d9014c17 	ldw	r4,1328(sp)
 8001f78:	00c000c4 	movi	r3,3
 8001f7c:	00bfdfc4 	movi	r2,-129
 8001f80:	2088703a 	and	r4,r4,r2
 8001f84:	180f883a 	mov	r7,r3
 8001f88:	d8c14515 	stw	r3,1300(sp)
 8001f8c:	d9014c15 	stw	r4,1328(sp)
 8001f90:	d8014615 	stw	zero,1304(sp)
 8001f94:	003e6a06 	br	8001940 <___vfprintf_internal_r+0xa88>
 8001f98:	38800017 	ldw	r2,0(r7)
 8001f9c:	00c00044 	movi	r3,1
 8001fa0:	39c00104 	addi	r7,r7,4
 8001fa4:	d9c14015 	stw	r7,1280(sp)
 8001fa8:	d9000f04 	addi	r4,sp,60
 8001fac:	180f883a 	mov	r7,r3
 8001fb0:	d8c14515 	stw	r3,1300(sp)
 8001fb4:	d9014115 	stw	r4,1284(sp)
 8001fb8:	d8800f05 	stb	r2,60(sp)
 8001fbc:	d8000405 	stb	zero,16(sp)
 8001fc0:	003cac06 	br	8001274 <___vfprintf_internal_r+0x3bc>
 8001fc4:	01420074 	movhi	r5,2049
 8001fc8:	29438a04 	addi	r5,r5,3624
 8001fcc:	d9414415 	stw	r5,1296(sp)
 8001fd0:	d9814c17 	ldw	r6,1328(sp)
 8001fd4:	3080080c 	andi	r2,r6,32
 8001fd8:	1000ff26 	beq	r2,zero,80023d8 <___vfprintf_internal_r+0x1520>
 8001fdc:	3c000017 	ldw	r16,0(r7)
 8001fe0:	3c400117 	ldw	r17,4(r7)
 8001fe4:	38800204 	addi	r2,r7,8
 8001fe8:	d8814015 	stw	r2,1280(sp)
 8001fec:	d9414c17 	ldw	r5,1328(sp)
 8001ff0:	2880004c 	andi	r2,r5,1
 8001ff4:	1005003a 	cmpeq	r2,r2,zero
 8001ff8:	1000b91e 	bne	r2,zero,80022e0 <___vfprintf_internal_r+0x1428>
 8001ffc:	8444b03a 	or	r2,r16,r17
 8002000:	1000b726 	beq	r2,zero,80022e0 <___vfprintf_internal_r+0x1428>
 8002004:	d9814d17 	ldw	r6,1332(sp)
 8002008:	29400094 	ori	r5,r5,2
 800200c:	00800c04 	movi	r2,48
 8002010:	01000084 	movi	r4,2
 8002014:	d9414c15 	stw	r5,1328(sp)
 8002018:	d8800445 	stb	r2,17(sp)
 800201c:	d9800485 	stb	r6,18(sp)
 8002020:	d8000405 	stb	zero,16(sp)
 8002024:	003e3206 	br	80018f0 <___vfprintf_internal_r+0xa38>
 8002028:	01820074 	movhi	r6,2049
 800202c:	31837f04 	addi	r6,r6,3580
 8002030:	d9814415 	stw	r6,1296(sp)
 8002034:	003fe606 	br	8001fd0 <___vfprintf_internal_r+0x1118>
 8002038:	00800ac4 	movi	r2,43
 800203c:	d8800405 	stb	r2,16(sp)
 8002040:	b8c00007 	ldb	r3,0(r23)
 8002044:	003c1b06 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 8002048:	d8814c17 	ldw	r2,1328(sp)
 800204c:	b8c00007 	ldb	r3,0(r23)
 8002050:	10800054 	ori	r2,r2,1
 8002054:	d8814c15 	stw	r2,1328(sp)
 8002058:	003c1606 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 800205c:	d8800407 	ldb	r2,16(sp)
 8002060:	10004c1e 	bne	r2,zero,8002194 <___vfprintf_internal_r+0x12dc>
 8002064:	00800804 	movi	r2,32
 8002068:	d8800405 	stb	r2,16(sp)
 800206c:	b8c00007 	ldb	r3,0(r23)
 8002070:	003c1006 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 8002074:	d9814c17 	ldw	r6,1328(sp)
 8002078:	b8c00007 	ldb	r3,0(r23)
 800207c:	31800214 	ori	r6,r6,8
 8002080:	d9814c15 	stw	r6,1328(sp)
 8002084:	003c0b06 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 8002088:	0009883a 	mov	r4,zero
 800208c:	04000244 	movi	r16,9
 8002090:	01400284 	movi	r5,10
 8002094:	d9c15115 	stw	r7,1348(sp)
 8002098:	800988c0 	call	800988c <__mulsi3>
 800209c:	b9000007 	ldb	r4,0(r23)
 80020a0:	d8c14d17 	ldw	r3,1332(sp)
 80020a4:	bdc00044 	addi	r23,r23,1
 80020a8:	d9014d15 	stw	r4,1332(sp)
 80020ac:	d9414d17 	ldw	r5,1332(sp)
 80020b0:	1885883a 	add	r2,r3,r2
 80020b4:	113ff404 	addi	r4,r2,-48
 80020b8:	28bff404 	addi	r2,r5,-48
 80020bc:	d9c15117 	ldw	r7,1348(sp)
 80020c0:	80bff32e 	bgeu	r16,r2,8002090 <___vfprintf_internal_r+0x11d8>
 80020c4:	d9014a15 	stw	r4,1320(sp)
 80020c8:	003bfc06 	br	80010bc <___vfprintf_internal_r+0x204>
 80020cc:	d8814c17 	ldw	r2,1328(sp)
 80020d0:	b8c00007 	ldb	r3,0(r23)
 80020d4:	10802014 	ori	r2,r2,128
 80020d8:	d8814c15 	stw	r2,1328(sp)
 80020dc:	003bf506 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 80020e0:	b8c00007 	ldb	r3,0(r23)
 80020e4:	00800a84 	movi	r2,42
 80020e8:	bdc00044 	addi	r23,r23,1
 80020ec:	18831826 	beq	r3,r2,8002d50 <___vfprintf_internal_r+0x1e98>
 80020f0:	d8c14d15 	stw	r3,1332(sp)
 80020f4:	18bff404 	addi	r2,r3,-48
 80020f8:	00c00244 	movi	r3,9
 80020fc:	18827b36 	bltu	r3,r2,8002aec <___vfprintf_internal_r+0x1c34>
 8002100:	1821883a 	mov	r16,r3
 8002104:	0009883a 	mov	r4,zero
 8002108:	01400284 	movi	r5,10
 800210c:	d9c15115 	stw	r7,1348(sp)
 8002110:	800988c0 	call	800988c <__mulsi3>
 8002114:	d9414d17 	ldw	r5,1332(sp)
 8002118:	b9800007 	ldb	r6,0(r23)
 800211c:	d9c15117 	ldw	r7,1348(sp)
 8002120:	1145883a 	add	r2,r2,r5
 8002124:	113ff404 	addi	r4,r2,-48
 8002128:	30bff404 	addi	r2,r6,-48
 800212c:	d9814d15 	stw	r6,1332(sp)
 8002130:	bdc00044 	addi	r23,r23,1
 8002134:	80bff42e 	bgeu	r16,r2,8002108 <___vfprintf_internal_r+0x1250>
 8002138:	2027883a 	mov	r19,r4
 800213c:	203bdf0e 	bge	r4,zero,80010bc <___vfprintf_internal_r+0x204>
 8002140:	04ffffc4 	movi	r19,-1
 8002144:	003bdd06 	br	80010bc <___vfprintf_internal_r+0x204>
 8002148:	d8000405 	stb	zero,16(sp)
 800214c:	39800017 	ldw	r6,0(r7)
 8002150:	39c00104 	addi	r7,r7,4
 8002154:	d9c14015 	stw	r7,1280(sp)
 8002158:	d9814115 	stw	r6,1284(sp)
 800215c:	3001c926 	beq	r6,zero,8002884 <___vfprintf_internal_r+0x19cc>
 8002160:	98000e16 	blt	r19,zero,800219c <___vfprintf_internal_r+0x12e4>
 8002164:	d9014117 	ldw	r4,1284(sp)
 8002168:	000b883a 	mov	r5,zero
 800216c:	980d883a 	mov	r6,r19
 8002170:	80058ac0 	call	80058ac <memchr>
 8002174:	10025926 	beq	r2,zero,8002adc <___vfprintf_internal_r+0x1c24>
 8002178:	d8c14117 	ldw	r3,1284(sp)
 800217c:	10cfc83a 	sub	r7,r2,r3
 8002180:	99c19e16 	blt	r19,r7,80027fc <___vfprintf_internal_r+0x1944>
 8002184:	d9c14515 	stw	r7,1300(sp)
 8002188:	38000916 	blt	r7,zero,80021b0 <___vfprintf_internal_r+0x12f8>
 800218c:	d8014615 	stw	zero,1304(sp)
 8002190:	003deb06 	br	8001940 <___vfprintf_internal_r+0xa88>
 8002194:	b8c00007 	ldb	r3,0(r23)
 8002198:	003bc606 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 800219c:	d9014117 	ldw	r4,1284(sp)
 80021a0:	8000dec0 	call	8000dec <strlen>
 80021a4:	d8814515 	stw	r2,1300(sp)
 80021a8:	100f883a 	mov	r7,r2
 80021ac:	103ff70e 	bge	r2,zero,800218c <___vfprintf_internal_r+0x12d4>
 80021b0:	d8014515 	stw	zero,1300(sp)
 80021b4:	d8014615 	stw	zero,1304(sp)
 80021b8:	003de106 	br	8001940 <___vfprintf_internal_r+0xa88>
 80021bc:	20c03fcc 	andi	r3,r4,255
 80021c0:	00800044 	movi	r2,1
 80021c4:	18802d26 	beq	r3,r2,800227c <___vfprintf_internal_r+0x13c4>
 80021c8:	18800e36 	bltu	r3,r2,8002204 <___vfprintf_internal_r+0x134c>
 80021cc:	00800084 	movi	r2,2
 80021d0:	1880fa26 	beq	r3,r2,80025bc <___vfprintf_internal_r+0x1704>
 80021d4:	01020074 	movhi	r4,2049
 80021d8:	21038f04 	addi	r4,r4,3644
 80021dc:	8000dec0 	call	8000dec <strlen>
 80021e0:	100f883a 	mov	r7,r2
 80021e4:	dcc14515 	stw	r19,1300(sp)
 80021e8:	9880010e 	bge	r19,r2,80021f0 <___vfprintf_internal_r+0x1338>
 80021ec:	d8814515 	stw	r2,1300(sp)
 80021f0:	00820074 	movhi	r2,2049
 80021f4:	10838f04 	addi	r2,r2,3644
 80021f8:	dcc14615 	stw	r19,1304(sp)
 80021fc:	d8814115 	stw	r2,1284(sp)
 8002200:	003dcf06 	br	8001940 <___vfprintf_internal_r+0xa88>
 8002204:	d9401904 	addi	r5,sp,100
 8002208:	dd000f04 	addi	r20,sp,60
 800220c:	d9414115 	stw	r5,1284(sp)
 8002210:	880a977a 	slli	r5,r17,29
 8002214:	d9814117 	ldw	r6,1284(sp)
 8002218:	8004d0fa 	srli	r2,r16,3
 800221c:	8806d0fa 	srli	r3,r17,3
 8002220:	810001cc 	andi	r4,r16,7
 8002224:	2884b03a 	or	r2,r5,r2
 8002228:	31bfffc4 	addi	r6,r6,-1
 800222c:	21000c04 	addi	r4,r4,48
 8002230:	d9814115 	stw	r6,1284(sp)
 8002234:	10cab03a 	or	r5,r2,r3
 8002238:	31000005 	stb	r4,0(r6)
 800223c:	1021883a 	mov	r16,r2
 8002240:	1823883a 	mov	r17,r3
 8002244:	283ff21e 	bne	r5,zero,8002210 <___vfprintf_internal_r+0x1358>
 8002248:	d8c14c17 	ldw	r3,1328(sp)
 800224c:	1880004c 	andi	r2,r3,1
 8002250:	1005003a 	cmpeq	r2,r2,zero
 8002254:	103db31e 	bne	r2,zero,8001924 <___vfprintf_internal_r+0xa6c>
 8002258:	20803fcc 	andi	r2,r4,255
 800225c:	1080201c 	xori	r2,r2,128
 8002260:	10bfe004 	addi	r2,r2,-128
 8002264:	00c00c04 	movi	r3,48
 8002268:	10fdae26 	beq	r2,r3,8001924 <___vfprintf_internal_r+0xa6c>
 800226c:	31bfffc4 	addi	r6,r6,-1
 8002270:	d9814115 	stw	r6,1284(sp)
 8002274:	30c00005 	stb	r3,0(r6)
 8002278:	003daa06 	br	8001924 <___vfprintf_internal_r+0xa6c>
 800227c:	88800068 	cmpgeui	r2,r17,1
 8002280:	10002c1e 	bne	r2,zero,8002334 <___vfprintf_internal_r+0x147c>
 8002284:	8800021e 	bne	r17,zero,8002290 <___vfprintf_internal_r+0x13d8>
 8002288:	00800244 	movi	r2,9
 800228c:	14002936 	bltu	r2,r16,8002334 <___vfprintf_internal_r+0x147c>
 8002290:	d90018c4 	addi	r4,sp,99
 8002294:	dd000f04 	addi	r20,sp,60
 8002298:	d9014115 	stw	r4,1284(sp)
 800229c:	d9014117 	ldw	r4,1284(sp)
 80022a0:	80800c04 	addi	r2,r16,48
 80022a4:	20800005 	stb	r2,0(r4)
 80022a8:	003d9e06 	br	8001924 <___vfprintf_internal_r+0xa6c>
 80022ac:	dc400d17 	ldw	r17,52(sp)
 80022b0:	07020074 	movhi	fp,2049
 80022b4:	e7039684 	addi	fp,fp,3674
 80022b8:	9425883a 	add	r18,r18,r16
 80022bc:	8c400044 	addi	r17,r17,1
 80022c0:	008001c4 	movi	r2,7
 80022c4:	1f000015 	stw	fp,0(r3)
 80022c8:	1c000115 	stw	r16,4(r3)
 80022cc:	dc800e15 	stw	r18,56(sp)
 80022d0:	dc400d15 	stw	r17,52(sp)
 80022d4:	147ddc16 	blt	r2,r17,8001a48 <___vfprintf_internal_r+0xb90>
 80022d8:	18c00204 	addi	r3,r3,8
 80022dc:	003c7406 	br	80014b0 <___vfprintf_internal_r+0x5f8>
 80022e0:	01000084 	movi	r4,2
 80022e4:	d8000405 	stb	zero,16(sp)
 80022e8:	003d8106 	br	80018f0 <___vfprintf_internal_r+0xa38>
 80022ec:	d9814c17 	ldw	r6,1328(sp)
 80022f0:	30c4703a 	and	r2,r6,r3
 80022f4:	1005003a 	cmpeq	r2,r2,zero
 80022f8:	103cb326 	beq	r2,zero,80015c8 <___vfprintf_internal_r+0x710>
 80022fc:	d9014117 	ldw	r4,1284(sp)
 8002300:	94800044 	addi	r18,r18,1
 8002304:	8c400044 	addi	r17,r17,1
 8002308:	008001c4 	movi	r2,7
 800230c:	a9000015 	stw	r4,0(r21)
 8002310:	a8c00115 	stw	r3,4(r21)
 8002314:	dc800e15 	stw	r18,56(sp)
 8002318:	dc400d15 	stw	r17,52(sp)
 800231c:	147e6016 	blt	r2,r17,8001ca0 <___vfprintf_internal_r+0xde8>
 8002320:	acc00204 	addi	r19,r21,8
 8002324:	003cd106 	br	800166c <___vfprintf_internal_r+0x7b4>
 8002328:	07020074 	movhi	fp,2049
 800232c:	e7039684 	addi	fp,fp,3674
 8002330:	003c4906 	br	8001458 <___vfprintf_internal_r+0x5a0>
 8002334:	dd000f04 	addi	r20,sp,60
 8002338:	dc801904 	addi	r18,sp,100
 800233c:	8009883a 	mov	r4,r16
 8002340:	880b883a 	mov	r5,r17
 8002344:	01800284 	movi	r6,10
 8002348:	000f883a 	mov	r7,zero
 800234c:	8007fb40 	call	8007fb4 <__umoddi3>
 8002350:	12000c04 	addi	r8,r2,48
 8002354:	94bfffc4 	addi	r18,r18,-1
 8002358:	8009883a 	mov	r4,r16
 800235c:	880b883a 	mov	r5,r17
 8002360:	01800284 	movi	r6,10
 8002364:	000f883a 	mov	r7,zero
 8002368:	92000005 	stb	r8,0(r18)
 800236c:	80079480 	call	8007948 <__udivdi3>
 8002370:	1009883a 	mov	r4,r2
 8002374:	1021883a 	mov	r16,r2
 8002378:	18800068 	cmpgeui	r2,r3,1
 800237c:	1823883a 	mov	r17,r3
 8002380:	103fee1e 	bne	r2,zero,800233c <___vfprintf_internal_r+0x1484>
 8002384:	1800021e 	bne	r3,zero,8002390 <___vfprintf_internal_r+0x14d8>
 8002388:	00800244 	movi	r2,9
 800238c:	113feb36 	bltu	r2,r4,800233c <___vfprintf_internal_r+0x1484>
 8002390:	94bfffc4 	addi	r18,r18,-1
 8002394:	dc814115 	stw	r18,1284(sp)
 8002398:	003fc006 	br	800229c <___vfprintf_internal_r+0x13e4>
 800239c:	d9014c17 	ldw	r4,1328(sp)
 80023a0:	2080004c 	andi	r2,r4,1
 80023a4:	10009a1e 	bne	r2,zero,8002610 <___vfprintf_internal_r+0x1758>
 80023a8:	d9401904 	addi	r5,sp,100
 80023ac:	dd000f04 	addi	r20,sp,60
 80023b0:	d9414115 	stw	r5,1284(sp)
 80023b4:	003d5b06 	br	8001924 <___vfprintf_internal_r+0xa6c>
 80023b8:	d9014f17 	ldw	r4,1340(sp)
 80023bc:	b00b883a 	mov	r5,r22
 80023c0:	d9800c04 	addi	r6,sp,48
 80023c4:	8000e600 	call	8000e60 <__sprint_r>
 80023c8:	103c731e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 80023cc:	dc800e17 	ldw	r18,56(sp)
 80023d0:	d8c01904 	addi	r3,sp,100
 80023d4:	003cf906 	br	80017bc <___vfprintf_internal_r+0x904>
 80023d8:	d8c14c17 	ldw	r3,1328(sp)
 80023dc:	1880040c 	andi	r2,r3,16
 80023e0:	1000711e 	bne	r2,zero,80025a8 <___vfprintf_internal_r+0x16f0>
 80023e4:	d9014c17 	ldw	r4,1328(sp)
 80023e8:	2080100c 	andi	r2,r4,64
 80023ec:	10006e26 	beq	r2,zero,80025a8 <___vfprintf_internal_r+0x16f0>
 80023f0:	3c00000b 	ldhu	r16,0(r7)
 80023f4:	0023883a 	mov	r17,zero
 80023f8:	39c00104 	addi	r7,r7,4
 80023fc:	d9c14015 	stw	r7,1280(sp)
 8002400:	003efa06 	br	8001fec <___vfprintf_internal_r+0x1134>
 8002404:	dc400d17 	ldw	r17,52(sp)
 8002408:	07020074 	movhi	fp,2049
 800240c:	e7039684 	addi	fp,fp,3674
 8002410:	9425883a 	add	r18,r18,r16
 8002414:	8c400044 	addi	r17,r17,1
 8002418:	008001c4 	movi	r2,7
 800241c:	1f000015 	stw	fp,0(r3)
 8002420:	1c000115 	stw	r16,4(r3)
 8002424:	dc800e15 	stw	r18,56(sp)
 8002428:	dc400d15 	stw	r17,52(sp)
 800242c:	147d7016 	blt	r2,r17,80019f0 <___vfprintf_internal_r+0xb38>
 8002430:	18c00204 	addi	r3,r3,8
 8002434:	003d7506 	br	8001a0c <___vfprintf_internal_r+0xb54>
 8002438:	dc800e17 	ldw	r18,56(sp)
 800243c:	dc400d17 	ldw	r17,52(sp)
 8002440:	07020074 	movhi	fp,2049
 8002444:	e7039a84 	addi	fp,fp,3690
 8002448:	003bba06 	br	8001334 <___vfprintf_internal_r+0x47c>
 800244c:	d9014f17 	ldw	r4,1340(sp)
 8002450:	b00b883a 	mov	r5,r22
 8002454:	d9800c04 	addi	r6,sp,48
 8002458:	8000e600 	call	8000e60 <__sprint_r>
 800245c:	103c4e1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8002460:	dc800e17 	ldw	r18,56(sp)
 8002464:	d8c01904 	addi	r3,sp,100
 8002468:	003ce306 	br	80017f8 <___vfprintf_internal_r+0x940>
 800246c:	3c000017 	ldw	r16,0(r7)
 8002470:	0009883a 	mov	r4,zero
 8002474:	39c00104 	addi	r7,r7,4
 8002478:	0023883a 	mov	r17,zero
 800247c:	d9c14015 	stw	r7,1280(sp)
 8002480:	d8000405 	stb	zero,16(sp)
 8002484:	003d1a06 	br	80018f0 <___vfprintf_internal_r+0xa38>
 8002488:	38800017 	ldw	r2,0(r7)
 800248c:	39c00104 	addi	r7,r7,4
 8002490:	d9c14015 	stw	r7,1280(sp)
 8002494:	1023d7fa 	srai	r17,r2,31
 8002498:	1021883a 	mov	r16,r2
 800249c:	003d1206 	br	80018e8 <___vfprintf_internal_r+0xa30>
 80024a0:	3c000017 	ldw	r16,0(r7)
 80024a4:	01000044 	movi	r4,1
 80024a8:	39c00104 	addi	r7,r7,4
 80024ac:	0023883a 	mov	r17,zero
 80024b0:	d9c14015 	stw	r7,1280(sp)
 80024b4:	d8000405 	stb	zero,16(sp)
 80024b8:	003d0d06 	br	80018f0 <___vfprintf_internal_r+0xa38>
 80024bc:	00820074 	movhi	r2,2049
 80024c0:	10839604 	addi	r2,r2,3672
 80024c4:	94800044 	addi	r18,r18,1
 80024c8:	8c400044 	addi	r17,r17,1
 80024cc:	a8800015 	stw	r2,0(r21)
 80024d0:	00c00044 	movi	r3,1
 80024d4:	008001c4 	movi	r2,7
 80024d8:	a8c00115 	stw	r3,4(r21)
 80024dc:	dc800e15 	stw	r18,56(sp)
 80024e0:	dc400d15 	stw	r17,52(sp)
 80024e4:	1440ca16 	blt	r2,r17,8002810 <___vfprintf_internal_r+0x1958>
 80024e8:	a8c00204 	addi	r3,r21,8
 80024ec:	2000061e 	bne	r4,zero,8002508 <___vfprintf_internal_r+0x1650>
 80024f0:	d9414717 	ldw	r5,1308(sp)
 80024f4:	2800041e 	bne	r5,zero,8002508 <___vfprintf_internal_r+0x1650>
 80024f8:	d9814c17 	ldw	r6,1328(sp)
 80024fc:	3080004c 	andi	r2,r6,1
 8002500:	1005003a 	cmpeq	r2,r2,zero
 8002504:	103bea1e 	bne	r2,zero,80014b0 <___vfprintf_internal_r+0x5f8>
 8002508:	00800044 	movi	r2,1
 800250c:	dc400d17 	ldw	r17,52(sp)
 8002510:	18800115 	stw	r2,4(r3)
 8002514:	d8814917 	ldw	r2,1316(sp)
 8002518:	94800044 	addi	r18,r18,1
 800251c:	8c400044 	addi	r17,r17,1
 8002520:	18800015 	stw	r2,0(r3)
 8002524:	008001c4 	movi	r2,7
 8002528:	dc800e15 	stw	r18,56(sp)
 800252c:	dc400d15 	stw	r17,52(sp)
 8002530:	1440ca16 	blt	r2,r17,800285c <___vfprintf_internal_r+0x19a4>
 8002534:	18c00204 	addi	r3,r3,8
 8002538:	0121c83a 	sub	r16,zero,r4
 800253c:	0400500e 	bge	zero,r16,8002680 <___vfprintf_internal_r+0x17c8>
 8002540:	00800404 	movi	r2,16
 8002544:	1400800e 	bge	r2,r16,8002748 <___vfprintf_internal_r+0x1890>
 8002548:	1027883a 	mov	r19,r2
 800254c:	07020074 	movhi	fp,2049
 8002550:	e7039684 	addi	fp,fp,3674
 8002554:	050001c4 	movi	r20,7
 8002558:	00000306 	br	8002568 <___vfprintf_internal_r+0x16b0>
 800255c:	18c00204 	addi	r3,r3,8
 8002560:	843ffc04 	addi	r16,r16,-16
 8002564:	9c007a0e 	bge	r19,r16,8002750 <___vfprintf_internal_r+0x1898>
 8002568:	94800404 	addi	r18,r18,16
 800256c:	8c400044 	addi	r17,r17,1
 8002570:	1f000015 	stw	fp,0(r3)
 8002574:	1cc00115 	stw	r19,4(r3)
 8002578:	dc800e15 	stw	r18,56(sp)
 800257c:	dc400d15 	stw	r17,52(sp)
 8002580:	a47ff60e 	bge	r20,r17,800255c <___vfprintf_internal_r+0x16a4>
 8002584:	d9014f17 	ldw	r4,1340(sp)
 8002588:	b00b883a 	mov	r5,r22
 800258c:	d9800c04 	addi	r6,sp,48
 8002590:	8000e600 	call	8000e60 <__sprint_r>
 8002594:	103c001e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8002598:	dc800e17 	ldw	r18,56(sp)
 800259c:	dc400d17 	ldw	r17,52(sp)
 80025a0:	d8c01904 	addi	r3,sp,100
 80025a4:	003fee06 	br	8002560 <___vfprintf_internal_r+0x16a8>
 80025a8:	3c000017 	ldw	r16,0(r7)
 80025ac:	0023883a 	mov	r17,zero
 80025b0:	39c00104 	addi	r7,r7,4
 80025b4:	d9c14015 	stw	r7,1280(sp)
 80025b8:	003e8c06 	br	8001fec <___vfprintf_internal_r+0x1134>
 80025bc:	d9401904 	addi	r5,sp,100
 80025c0:	dd000f04 	addi	r20,sp,60
 80025c4:	d9414115 	stw	r5,1284(sp)
 80025c8:	d9814417 	ldw	r6,1296(sp)
 80025cc:	880a973a 	slli	r5,r17,28
 80025d0:	8004d13a 	srli	r2,r16,4
 80025d4:	810003cc 	andi	r4,r16,15
 80025d8:	3109883a 	add	r4,r6,r4
 80025dc:	2884b03a 	or	r2,r5,r2
 80025e0:	21400003 	ldbu	r5,0(r4)
 80025e4:	d9014117 	ldw	r4,1284(sp)
 80025e8:	8806d13a 	srli	r3,r17,4
 80025ec:	1021883a 	mov	r16,r2
 80025f0:	213fffc4 	addi	r4,r4,-1
 80025f4:	d9014115 	stw	r4,1284(sp)
 80025f8:	d9814117 	ldw	r6,1284(sp)
 80025fc:	10c8b03a 	or	r4,r2,r3
 8002600:	1823883a 	mov	r17,r3
 8002604:	31400005 	stb	r5,0(r6)
 8002608:	203fef1e 	bne	r4,zero,80025c8 <___vfprintf_internal_r+0x1710>
 800260c:	003cc506 	br	8001924 <___vfprintf_internal_r+0xa6c>
 8002610:	00800c04 	movi	r2,48
 8002614:	d98018c4 	addi	r6,sp,99
 8002618:	dd000f04 	addi	r20,sp,60
 800261c:	d88018c5 	stb	r2,99(sp)
 8002620:	d9814115 	stw	r6,1284(sp)
 8002624:	003cbf06 	br	8001924 <___vfprintf_internal_r+0xa6c>
 8002628:	dc400d17 	ldw	r17,52(sp)
 800262c:	07020074 	movhi	fp,2049
 8002630:	e7039a84 	addi	fp,fp,3690
 8002634:	003bc106 	br	800153c <___vfprintf_internal_r+0x684>
 8002638:	d9414c17 	ldw	r5,1328(sp)
 800263c:	2880040c 	andi	r2,r5,16
 8002640:	10007c26 	beq	r2,zero,8002834 <___vfprintf_internal_r+0x197c>
 8002644:	38800017 	ldw	r2,0(r7)
 8002648:	39c00104 	addi	r7,r7,4
 800264c:	d9c14015 	stw	r7,1280(sp)
 8002650:	d9814b17 	ldw	r6,1324(sp)
 8002654:	d9c14017 	ldw	r7,1280(sp)
 8002658:	11800015 	stw	r6,0(r2)
 800265c:	003a7206 	br	8001028 <___vfprintf_internal_r+0x170>
 8002660:	d9014f17 	ldw	r4,1340(sp)
 8002664:	b00b883a 	mov	r5,r22
 8002668:	d9800c04 	addi	r6,sp,48
 800266c:	8000e600 	call	8000e60 <__sprint_r>
 8002670:	103bc91e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8002674:	dc800e17 	ldw	r18,56(sp)
 8002678:	dc400d17 	ldw	r17,52(sp)
 800267c:	d8c01904 	addi	r3,sp,100
 8002680:	d9014717 	ldw	r4,1308(sp)
 8002684:	d9414117 	ldw	r5,1284(sp)
 8002688:	8c400044 	addi	r17,r17,1
 800268c:	9125883a 	add	r18,r18,r4
 8002690:	008001c4 	movi	r2,7
 8002694:	19400015 	stw	r5,0(r3)
 8002698:	19000115 	stw	r4,4(r3)
 800269c:	dc800e15 	stw	r18,56(sp)
 80026a0:	dc400d15 	stw	r17,52(sp)
 80026a4:	147ce816 	blt	r2,r17,8001a48 <___vfprintf_internal_r+0xb90>
 80026a8:	18c00204 	addi	r3,r3,8
 80026ac:	003b8006 	br	80014b0 <___vfprintf_internal_r+0x5f8>
 80026b0:	38c00017 	ldw	r3,0(r7)
 80026b4:	39000204 	addi	r4,r7,8
 80026b8:	d9014015 	stw	r4,1280(sp)
 80026bc:	d8c14215 	stw	r3,1288(sp)
 80026c0:	39c00117 	ldw	r7,4(r7)
 80026c4:	d9c14315 	stw	r7,1292(sp)
 80026c8:	003e1a06 	br	8001f34 <___vfprintf_internal_r+0x107c>
 80026cc:	0005883a 	mov	r2,zero
 80026d0:	1409c83a 	sub	r4,r2,r16
 80026d4:	1105803a 	cmpltu	r2,r2,r4
 80026d8:	044bc83a 	sub	r5,zero,r17
 80026dc:	2885c83a 	sub	r2,r5,r2
 80026e0:	2021883a 	mov	r16,r4
 80026e4:	1023883a 	mov	r17,r2
 80026e8:	01000044 	movi	r4,1
 80026ec:	00800b44 	movi	r2,45
 80026f0:	d8800405 	stb	r2,16(sp)
 80026f4:	003c7e06 	br	80018f0 <___vfprintf_internal_r+0xa38>
 80026f8:	d9014f17 	ldw	r4,1340(sp)
 80026fc:	b00b883a 	mov	r5,r22
 8002700:	d9800c04 	addi	r6,sp,48
 8002704:	8000e600 	call	8000e60 <__sprint_r>
 8002708:	103ba31e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 800270c:	dc800e17 	ldw	r18,56(sp)
 8002710:	dc400d17 	ldw	r17,52(sp)
 8002714:	d9000517 	ldw	r4,20(sp)
 8002718:	d9401904 	addi	r5,sp,100
 800271c:	003da106 	br	8001da4 <___vfprintf_internal_r+0xeec>
 8002720:	d9014f17 	ldw	r4,1340(sp)
 8002724:	b00b883a 	mov	r5,r22
 8002728:	d9800c04 	addi	r6,sp,48
 800272c:	8000e600 	call	8000e60 <__sprint_r>
 8002730:	103b991e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8002734:	dc800e17 	ldw	r18,56(sp)
 8002738:	dc400d17 	ldw	r17,52(sp)
 800273c:	d9000517 	ldw	r4,20(sp)
 8002740:	d8c01904 	addi	r3,sp,100
 8002744:	003d8b06 	br	8001d74 <___vfprintf_internal_r+0xebc>
 8002748:	07020074 	movhi	fp,2049
 800274c:	e7039684 	addi	fp,fp,3674
 8002750:	9425883a 	add	r18,r18,r16
 8002754:	8c400044 	addi	r17,r17,1
 8002758:	008001c4 	movi	r2,7
 800275c:	1f000015 	stw	fp,0(r3)
 8002760:	1c000115 	stw	r16,4(r3)
 8002764:	dc800e15 	stw	r18,56(sp)
 8002768:	dc400d15 	stw	r17,52(sp)
 800276c:	147fbc16 	blt	r2,r17,8002660 <___vfprintf_internal_r+0x17a8>
 8002770:	18c00204 	addi	r3,r3,8
 8002774:	003fc206 	br	8002680 <___vfprintf_internal_r+0x17c8>
 8002778:	d9014f17 	ldw	r4,1340(sp)
 800277c:	b00b883a 	mov	r5,r22
 8002780:	d9800c04 	addi	r6,sp,48
 8002784:	8000e600 	call	8000e60 <__sprint_r>
 8002788:	103b831e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 800278c:	dc800e17 	ldw	r18,56(sp)
 8002790:	d9000517 	ldw	r4,20(sp)
 8002794:	d8c01904 	addi	r3,sp,100
 8002798:	003cfc06 	br	8001b8c <___vfprintf_internal_r+0xcd4>
 800279c:	07020074 	movhi	fp,2049
 80027a0:	e7039684 	addi	fp,fp,3674
 80027a4:	003bde06 	br	8001720 <___vfprintf_internal_r+0x868>
 80027a8:	00820074 	movhi	r2,2049
 80027ac:	10838504 	addi	r2,r2,3604
 80027b0:	d8814115 	stw	r2,1284(sp)
 80027b4:	003def06 	br	8001f74 <___vfprintf_internal_r+0x10bc>
 80027b8:	d9014217 	ldw	r4,1288(sp)
 80027bc:	d9414317 	ldw	r5,1292(sp)
 80027c0:	80072680 	call	8007268 <__isnand>
 80027c4:	10003926 	beq	r2,zero,80028ac <___vfprintf_internal_r+0x19f4>
 80027c8:	d9414d17 	ldw	r5,1332(sp)
 80027cc:	008011c4 	movi	r2,71
 80027d0:	1140ce16 	blt	r2,r5,8002b0c <___vfprintf_internal_r+0x1c54>
 80027d4:	01820074 	movhi	r6,2049
 80027d8:	31838604 	addi	r6,r6,3608
 80027dc:	d9814115 	stw	r6,1284(sp)
 80027e0:	003de406 	br	8001f74 <___vfprintf_internal_r+0x10bc>
 80027e4:	d9014c17 	ldw	r4,1328(sp)
 80027e8:	bdc00044 	addi	r23,r23,1
 80027ec:	b8c00007 	ldb	r3,0(r23)
 80027f0:	21000814 	ori	r4,r4,32
 80027f4:	d9014c15 	stw	r4,1328(sp)
 80027f8:	003a2e06 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 80027fc:	dcc14515 	stw	r19,1300(sp)
 8002800:	98011016 	blt	r19,zero,8002c44 <___vfprintf_internal_r+0x1d8c>
 8002804:	980f883a 	mov	r7,r19
 8002808:	d8014615 	stw	zero,1304(sp)
 800280c:	003c4c06 	br	8001940 <___vfprintf_internal_r+0xa88>
 8002810:	d9014f17 	ldw	r4,1340(sp)
 8002814:	b00b883a 	mov	r5,r22
 8002818:	d9800c04 	addi	r6,sp,48
 800281c:	8000e600 	call	8000e60 <__sprint_r>
 8002820:	103b5d1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8002824:	dc800e17 	ldw	r18,56(sp)
 8002828:	d9000517 	ldw	r4,20(sp)
 800282c:	d8c01904 	addi	r3,sp,100
 8002830:	003f2e06 	br	80024ec <___vfprintf_internal_r+0x1634>
 8002834:	d8c14c17 	ldw	r3,1328(sp)
 8002838:	1880100c 	andi	r2,r3,64
 800283c:	1000a026 	beq	r2,zero,8002ac0 <___vfprintf_internal_r+0x1c08>
 8002840:	38800017 	ldw	r2,0(r7)
 8002844:	39c00104 	addi	r7,r7,4
 8002848:	d9c14015 	stw	r7,1280(sp)
 800284c:	d9014b17 	ldw	r4,1324(sp)
 8002850:	d9c14017 	ldw	r7,1280(sp)
 8002854:	1100000d 	sth	r4,0(r2)
 8002858:	0039f306 	br	8001028 <___vfprintf_internal_r+0x170>
 800285c:	d9014f17 	ldw	r4,1340(sp)
 8002860:	b00b883a 	mov	r5,r22
 8002864:	d9800c04 	addi	r6,sp,48
 8002868:	8000e600 	call	8000e60 <__sprint_r>
 800286c:	103b4a1e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8002870:	dc800e17 	ldw	r18,56(sp)
 8002874:	dc400d17 	ldw	r17,52(sp)
 8002878:	d9000517 	ldw	r4,20(sp)
 800287c:	d8c01904 	addi	r3,sp,100
 8002880:	003f2d06 	br	8002538 <___vfprintf_internal_r+0x1680>
 8002884:	00800184 	movi	r2,6
 8002888:	14c09a36 	bltu	r2,r19,8002af4 <___vfprintf_internal_r+0x1c3c>
 800288c:	dcc14515 	stw	r19,1300(sp)
 8002890:	9800010e 	bge	r19,zero,8002898 <___vfprintf_internal_r+0x19e0>
 8002894:	d8014515 	stw	zero,1300(sp)
 8002898:	00820074 	movhi	r2,2049
 800289c:	10838804 	addi	r2,r2,3616
 80028a0:	980f883a 	mov	r7,r19
 80028a4:	d8814115 	stw	r2,1284(sp)
 80028a8:	003a7206 	br	8001274 <___vfprintf_internal_r+0x3bc>
 80028ac:	00bfffc4 	movi	r2,-1
 80028b0:	9880e226 	beq	r19,r2,8002c3c <___vfprintf_internal_r+0x1d84>
 80028b4:	d9414d17 	ldw	r5,1332(sp)
 80028b8:	008019c4 	movi	r2,103
 80028bc:	2880dc26 	beq	r5,r2,8002c30 <___vfprintf_internal_r+0x1d78>
 80028c0:	008011c4 	movi	r2,71
 80028c4:	2880da26 	beq	r5,r2,8002c30 <___vfprintf_internal_r+0x1d78>
 80028c8:	d9414c17 	ldw	r5,1328(sp)
 80028cc:	d9014317 	ldw	r4,1292(sp)
 80028d0:	d9814217 	ldw	r6,1288(sp)
 80028d4:	29404014 	ori	r5,r5,256
 80028d8:	d9414c15 	stw	r5,1328(sp)
 80028dc:	2000cc16 	blt	r4,zero,8002c10 <___vfprintf_internal_r+0x1d58>
 80028e0:	3021883a 	mov	r16,r6
 80028e4:	2023883a 	mov	r17,r4
 80028e8:	0039883a 	mov	fp,zero
 80028ec:	d9414d17 	ldw	r5,1332(sp)
 80028f0:	00801984 	movi	r2,102
 80028f4:	2880b726 	beq	r5,r2,8002bd4 <___vfprintf_internal_r+0x1d1c>
 80028f8:	00801184 	movi	r2,70
 80028fc:	2880b526 	beq	r5,r2,8002bd4 <___vfprintf_internal_r+0x1d1c>
 8002900:	00801944 	movi	r2,101
 8002904:	2880c826 	beq	r5,r2,8002c28 <___vfprintf_internal_r+0x1d70>
 8002908:	00801144 	movi	r2,69
 800290c:	2880c626 	beq	r5,r2,8002c28 <___vfprintf_internal_r+0x1d70>
 8002910:	9829883a 	mov	r20,r19
 8002914:	d9014f17 	ldw	r4,1340(sp)
 8002918:	d8800504 	addi	r2,sp,20
 800291c:	880d883a 	mov	r6,r17
 8002920:	d8800115 	stw	r2,4(sp)
 8002924:	d8c00604 	addi	r3,sp,24
 8002928:	d8800704 	addi	r2,sp,28
 800292c:	800b883a 	mov	r5,r16
 8002930:	01c00084 	movi	r7,2
 8002934:	d8c00215 	stw	r3,8(sp)
 8002938:	d8800315 	stw	r2,12(sp)
 800293c:	dd000015 	stw	r20,0(sp)
 8002940:	80031200 	call	8003120 <_dtoa_r>
 8002944:	d9814d17 	ldw	r6,1332(sp)
 8002948:	d8814115 	stw	r2,1284(sp)
 800294c:	008019c4 	movi	r2,103
 8002950:	30809526 	beq	r6,r2,8002ba8 <___vfprintf_internal_r+0x1cf0>
 8002954:	d8c14d17 	ldw	r3,1332(sp)
 8002958:	008011c4 	movi	r2,71
 800295c:	18809226 	beq	r3,r2,8002ba8 <___vfprintf_internal_r+0x1cf0>
 8002960:	d9414117 	ldw	r5,1284(sp)
 8002964:	d9814d17 	ldw	r6,1332(sp)
 8002968:	00801984 	movi	r2,102
 800296c:	2d25883a 	add	r18,r5,r20
 8002970:	30808626 	beq	r6,r2,8002b8c <___vfprintf_internal_r+0x1cd4>
 8002974:	00801184 	movi	r2,70
 8002978:	30808426 	beq	r6,r2,8002b8c <___vfprintf_internal_r+0x1cd4>
 800297c:	000d883a 	mov	r6,zero
 8002980:	000f883a 	mov	r7,zero
 8002984:	880b883a 	mov	r5,r17
 8002988:	8009883a 	mov	r4,r16
 800298c:	80091340 	call	8009134 <__eqdf2>
 8002990:	1000751e 	bne	r2,zero,8002b68 <___vfprintf_internal_r+0x1cb0>
 8002994:	9005883a 	mov	r2,r18
 8002998:	dc800715 	stw	r18,28(sp)
 800299c:	d9014117 	ldw	r4,1284(sp)
 80029a0:	d9414d17 	ldw	r5,1332(sp)
 80029a4:	00c019c4 	movi	r3,103
 80029a8:	1125c83a 	sub	r18,r2,r4
 80029ac:	28c06826 	beq	r5,r3,8002b50 <___vfprintf_internal_r+0x1c98>
 80029b0:	008011c4 	movi	r2,71
 80029b4:	28806626 	beq	r5,r2,8002b50 <___vfprintf_internal_r+0x1c98>
 80029b8:	d9000517 	ldw	r4,20(sp)
 80029bc:	d8c14d17 	ldw	r3,1332(sp)
 80029c0:	00801944 	movi	r2,101
 80029c4:	10c05516 	blt	r2,r3,8002b1c <___vfprintf_internal_r+0x1c64>
 80029c8:	213fffc4 	addi	r4,r4,-1
 80029cc:	d9000515 	stw	r4,20(sp)
 80029d0:	d8c00805 	stb	r3,32(sp)
 80029d4:	2021883a 	mov	r16,r4
 80029d8:	2000c116 	blt	r4,zero,8002ce0 <___vfprintf_internal_r+0x1e28>
 80029dc:	00800ac4 	movi	r2,43
 80029e0:	d8800845 	stb	r2,33(sp)
 80029e4:	00800244 	movi	r2,9
 80029e8:	1400af0e 	bge	r2,r16,8002ca8 <___vfprintf_internal_r+0x1df0>
 80029ec:	1027883a 	mov	r19,r2
 80029f0:	dc400b84 	addi	r17,sp,46
 80029f4:	8009883a 	mov	r4,r16
 80029f8:	01400284 	movi	r5,10
 80029fc:	800981c0 	call	800981c <__modsi3>
 8002a00:	10800c04 	addi	r2,r2,48
 8002a04:	8c7fffc4 	addi	r17,r17,-1
 8002a08:	8009883a 	mov	r4,r16
 8002a0c:	01400284 	movi	r5,10
 8002a10:	88800005 	stb	r2,0(r17)
 8002a14:	80097bc0 	call	80097bc <__divsi3>
 8002a18:	1021883a 	mov	r16,r2
 8002a1c:	98bff516 	blt	r19,r2,80029f4 <___vfprintf_internal_r+0x1b3c>
 8002a20:	10c00c04 	addi	r3,r2,48
 8002a24:	d88009c4 	addi	r2,sp,39
 8002a28:	108001c4 	addi	r2,r2,7
 8002a2c:	897fffc4 	addi	r5,r17,-1
 8002a30:	88ffffc5 	stb	r3,-1(r17)
 8002a34:	2880a72e 	bgeu	r5,r2,8002cd4 <___vfprintf_internal_r+0x1e1c>
 8002a38:	1009883a 	mov	r4,r2
 8002a3c:	d9800804 	addi	r6,sp,32
 8002a40:	d8c00884 	addi	r3,sp,34
 8002a44:	28800003 	ldbu	r2,0(r5)
 8002a48:	29400044 	addi	r5,r5,1
 8002a4c:	18800005 	stb	r2,0(r3)
 8002a50:	18c00044 	addi	r3,r3,1
 8002a54:	293ffb36 	bltu	r5,r4,8002a44 <___vfprintf_internal_r+0x1b8c>
 8002a58:	1987c83a 	sub	r3,r3,r6
 8002a5c:	00800044 	movi	r2,1
 8002a60:	d8c14815 	stw	r3,1312(sp)
 8002a64:	90cf883a 	add	r7,r18,r3
 8002a68:	1480960e 	bge	r2,r18,8002cc4 <___vfprintf_internal_r+0x1e0c>
 8002a6c:	39c00044 	addi	r7,r7,1
 8002a70:	d9c14515 	stw	r7,1300(sp)
 8002a74:	38003416 	blt	r7,zero,8002b48 <___vfprintf_internal_r+0x1c90>
 8002a78:	e0803fcc 	andi	r2,fp,255
 8002a7c:	1080201c 	xori	r2,r2,128
 8002a80:	10bfe004 	addi	r2,r2,-128
 8002a84:	10004e26 	beq	r2,zero,8002bc0 <___vfprintf_internal_r+0x1d08>
 8002a88:	00800b44 	movi	r2,45
 8002a8c:	dc814715 	stw	r18,1308(sp)
 8002a90:	d8014615 	stw	zero,1304(sp)
 8002a94:	d8800405 	stb	r2,16(sp)
 8002a98:	003bab06 	br	8001948 <___vfprintf_internal_r+0xa90>
 8002a9c:	00800b44 	movi	r2,45
 8002aa0:	d8800405 	stb	r2,16(sp)
 8002aa4:	003d2d06 	br	8001f5c <___vfprintf_internal_r+0x10a4>
 8002aa8:	d9014f17 	ldw	r4,1340(sp)
 8002aac:	b00b883a 	mov	r5,r22
 8002ab0:	d9800c04 	addi	r6,sp,48
 8002ab4:	8000e600 	call	8000e60 <__sprint_r>
 8002ab8:	103ab71e 	bne	r2,zero,8001598 <___vfprintf_internal_r+0x6e0>
 8002abc:	003ab506 	br	8001594 <___vfprintf_internal_r+0x6dc>
 8002ac0:	38800017 	ldw	r2,0(r7)
 8002ac4:	39c00104 	addi	r7,r7,4
 8002ac8:	d9c14015 	stw	r7,1280(sp)
 8002acc:	d9414b17 	ldw	r5,1324(sp)
 8002ad0:	d9c14017 	ldw	r7,1280(sp)
 8002ad4:	11400015 	stw	r5,0(r2)
 8002ad8:	00395306 	br	8001028 <___vfprintf_internal_r+0x170>
 8002adc:	980f883a 	mov	r7,r19
 8002ae0:	dcc14515 	stw	r19,1300(sp)
 8002ae4:	d8014615 	stw	zero,1304(sp)
 8002ae8:	003b9506 	br	8001940 <___vfprintf_internal_r+0xa88>
 8002aec:	0027883a 	mov	r19,zero
 8002af0:	00397206 	br	80010bc <___vfprintf_internal_r+0x204>
 8002af4:	00c20074 	movhi	r3,2049
 8002af8:	18c38804 	addi	r3,r3,3616
 8002afc:	100f883a 	mov	r7,r2
 8002b00:	d8814515 	stw	r2,1300(sp)
 8002b04:	d8c14115 	stw	r3,1284(sp)
 8002b08:	0039da06 	br	8001274 <___vfprintf_internal_r+0x3bc>
 8002b0c:	00820074 	movhi	r2,2049
 8002b10:	10838704 	addi	r2,r2,3612
 8002b14:	d8814115 	stw	r2,1284(sp)
 8002b18:	003d1606 	br	8001f74 <___vfprintf_internal_r+0x10bc>
 8002b1c:	d9414d17 	ldw	r5,1332(sp)
 8002b20:	00801984 	movi	r2,102
 8002b24:	28804926 	beq	r5,r2,8002c4c <___vfprintf_internal_r+0x1d94>
 8002b28:	200f883a 	mov	r7,r4
 8002b2c:	24805716 	blt	r4,r18,8002c8c <___vfprintf_internal_r+0x1dd4>
 8002b30:	d9414c17 	ldw	r5,1328(sp)
 8002b34:	2880004c 	andi	r2,r5,1
 8002b38:	10000126 	beq	r2,zero,8002b40 <___vfprintf_internal_r+0x1c88>
 8002b3c:	21c00044 	addi	r7,r4,1
 8002b40:	d9c14515 	stw	r7,1300(sp)
 8002b44:	383fcc0e 	bge	r7,zero,8002a78 <___vfprintf_internal_r+0x1bc0>
 8002b48:	d8014515 	stw	zero,1300(sp)
 8002b4c:	003fca06 	br	8002a78 <___vfprintf_internal_r+0x1bc0>
 8002b50:	d9000517 	ldw	r4,20(sp)
 8002b54:	00bfff04 	movi	r2,-4
 8002b58:	1100480e 	bge	r2,r4,8002c7c <___vfprintf_internal_r+0x1dc4>
 8002b5c:	99004716 	blt	r19,r4,8002c7c <___vfprintf_internal_r+0x1dc4>
 8002b60:	d8c14d15 	stw	r3,1332(sp)
 8002b64:	003ff006 	br	8002b28 <___vfprintf_internal_r+0x1c70>
 8002b68:	d8800717 	ldw	r2,28(sp)
 8002b6c:	14bf8b2e 	bgeu	r2,r18,800299c <___vfprintf_internal_r+0x1ae4>
 8002b70:	9007883a 	mov	r3,r18
 8002b74:	01000c04 	movi	r4,48
 8002b78:	11000005 	stb	r4,0(r2)
 8002b7c:	10800044 	addi	r2,r2,1
 8002b80:	d8800715 	stw	r2,28(sp)
 8002b84:	18bffc1e 	bne	r3,r2,8002b78 <___vfprintf_internal_r+0x1cc0>
 8002b88:	003f8406 	br	800299c <___vfprintf_internal_r+0x1ae4>
 8002b8c:	d8814117 	ldw	r2,1284(sp)
 8002b90:	10c00007 	ldb	r3,0(r2)
 8002b94:	00800c04 	movi	r2,48
 8002b98:	18805b26 	beq	r3,r2,8002d08 <___vfprintf_internal_r+0x1e50>
 8002b9c:	d9000517 	ldw	r4,20(sp)
 8002ba0:	9125883a 	add	r18,r18,r4
 8002ba4:	003f7506 	br	800297c <___vfprintf_internal_r+0x1ac4>
 8002ba8:	d9014c17 	ldw	r4,1328(sp)
 8002bac:	2080004c 	andi	r2,r4,1
 8002bb0:	1005003a 	cmpeq	r2,r2,zero
 8002bb4:	103f6a26 	beq	r2,zero,8002960 <___vfprintf_internal_r+0x1aa8>
 8002bb8:	d8800717 	ldw	r2,28(sp)
 8002bbc:	003f7706 	br	800299c <___vfprintf_internal_r+0x1ae4>
 8002bc0:	d9c14515 	stw	r7,1300(sp)
 8002bc4:	38004d16 	blt	r7,zero,8002cfc <___vfprintf_internal_r+0x1e44>
 8002bc8:	dc814715 	stw	r18,1308(sp)
 8002bcc:	d8014615 	stw	zero,1304(sp)
 8002bd0:	003b5b06 	br	8001940 <___vfprintf_internal_r+0xa88>
 8002bd4:	d9014f17 	ldw	r4,1340(sp)
 8002bd8:	d8800504 	addi	r2,sp,20
 8002bdc:	d8800115 	stw	r2,4(sp)
 8002be0:	d8c00604 	addi	r3,sp,24
 8002be4:	d8800704 	addi	r2,sp,28
 8002be8:	800b883a 	mov	r5,r16
 8002bec:	880d883a 	mov	r6,r17
 8002bf0:	01c000c4 	movi	r7,3
 8002bf4:	d8c00215 	stw	r3,8(sp)
 8002bf8:	d8800315 	stw	r2,12(sp)
 8002bfc:	dcc00015 	stw	r19,0(sp)
 8002c00:	9829883a 	mov	r20,r19
 8002c04:	80031200 	call	8003120 <_dtoa_r>
 8002c08:	d8814115 	stw	r2,1284(sp)
 8002c0c:	003f5106 	br	8002954 <___vfprintf_internal_r+0x1a9c>
 8002c10:	d8c14217 	ldw	r3,1288(sp)
 8002c14:	d9014317 	ldw	r4,1292(sp)
 8002c18:	07000b44 	movi	fp,45
 8002c1c:	1821883a 	mov	r16,r3
 8002c20:	2460003c 	xorhi	r17,r4,32768
 8002c24:	003f3106 	br	80028ec <___vfprintf_internal_r+0x1a34>
 8002c28:	9d000044 	addi	r20,r19,1
 8002c2c:	003f3906 	br	8002914 <___vfprintf_internal_r+0x1a5c>
 8002c30:	983f251e 	bne	r19,zero,80028c8 <___vfprintf_internal_r+0x1a10>
 8002c34:	04c00044 	movi	r19,1
 8002c38:	003f2306 	br	80028c8 <___vfprintf_internal_r+0x1a10>
 8002c3c:	04c00184 	movi	r19,6
 8002c40:	003f2106 	br	80028c8 <___vfprintf_internal_r+0x1a10>
 8002c44:	d8014515 	stw	zero,1300(sp)
 8002c48:	003eee06 	br	8002804 <___vfprintf_internal_r+0x194c>
 8002c4c:	200f883a 	mov	r7,r4
 8002c50:	0100370e 	bge	zero,r4,8002d30 <___vfprintf_internal_r+0x1e78>
 8002c54:	9800031e 	bne	r19,zero,8002c64 <___vfprintf_internal_r+0x1dac>
 8002c58:	d9814c17 	ldw	r6,1328(sp)
 8002c5c:	3080004c 	andi	r2,r6,1
 8002c60:	103fb726 	beq	r2,zero,8002b40 <___vfprintf_internal_r+0x1c88>
 8002c64:	20800044 	addi	r2,r4,1
 8002c68:	98a7883a 	add	r19,r19,r2
 8002c6c:	dcc14515 	stw	r19,1300(sp)
 8002c70:	980f883a 	mov	r7,r19
 8002c74:	983f800e 	bge	r19,zero,8002a78 <___vfprintf_internal_r+0x1bc0>
 8002c78:	003fb306 	br	8002b48 <___vfprintf_internal_r+0x1c90>
 8002c7c:	d9814d17 	ldw	r6,1332(sp)
 8002c80:	31bfff84 	addi	r6,r6,-2
 8002c84:	d9814d15 	stw	r6,1332(sp)
 8002c88:	003f4c06 	br	80029bc <___vfprintf_internal_r+0x1b04>
 8002c8c:	0100180e 	bge	zero,r4,8002cf0 <___vfprintf_internal_r+0x1e38>
 8002c90:	00800044 	movi	r2,1
 8002c94:	1485883a 	add	r2,r2,r18
 8002c98:	d8814515 	stw	r2,1300(sp)
 8002c9c:	100f883a 	mov	r7,r2
 8002ca0:	103f750e 	bge	r2,zero,8002a78 <___vfprintf_internal_r+0x1bc0>
 8002ca4:	003fa806 	br	8002b48 <___vfprintf_internal_r+0x1c90>
 8002ca8:	80c00c04 	addi	r3,r16,48
 8002cac:	00800c04 	movi	r2,48
 8002cb0:	d8c008c5 	stb	r3,35(sp)
 8002cb4:	d9800804 	addi	r6,sp,32
 8002cb8:	d8c00904 	addi	r3,sp,36
 8002cbc:	d8800885 	stb	r2,34(sp)
 8002cc0:	003f6506 	br	8002a58 <___vfprintf_internal_r+0x1ba0>
 8002cc4:	d9014c17 	ldw	r4,1328(sp)
 8002cc8:	2084703a 	and	r2,r4,r2
 8002ccc:	103f9c26 	beq	r2,zero,8002b40 <___vfprintf_internal_r+0x1c88>
 8002cd0:	003f6606 	br	8002a6c <___vfprintf_internal_r+0x1bb4>
 8002cd4:	d9800804 	addi	r6,sp,32
 8002cd8:	d8c00884 	addi	r3,sp,34
 8002cdc:	003f5e06 	br	8002a58 <___vfprintf_internal_r+0x1ba0>
 8002ce0:	00800b44 	movi	r2,45
 8002ce4:	0121c83a 	sub	r16,zero,r4
 8002ce8:	d8800845 	stb	r2,33(sp)
 8002cec:	003f3d06 	br	80029e4 <___vfprintf_internal_r+0x1b2c>
 8002cf0:	00800084 	movi	r2,2
 8002cf4:	1105c83a 	sub	r2,r2,r4
 8002cf8:	003fe606 	br	8002c94 <___vfprintf_internal_r+0x1ddc>
 8002cfc:	d8014515 	stw	zero,1300(sp)
 8002d00:	dc814715 	stw	r18,1308(sp)
 8002d04:	003fb106 	br	8002bcc <___vfprintf_internal_r+0x1d14>
 8002d08:	000d883a 	mov	r6,zero
 8002d0c:	000f883a 	mov	r7,zero
 8002d10:	8009883a 	mov	r4,r16
 8002d14:	880b883a 	mov	r5,r17
 8002d18:	80091bc0 	call	80091bc <__nedf2>
 8002d1c:	103f9f26 	beq	r2,zero,8002b9c <___vfprintf_internal_r+0x1ce4>
 8002d20:	00800044 	movi	r2,1
 8002d24:	1509c83a 	sub	r4,r2,r20
 8002d28:	d9000515 	stw	r4,20(sp)
 8002d2c:	003f9b06 	br	8002b9c <___vfprintf_internal_r+0x1ce4>
 8002d30:	98000d1e 	bne	r19,zero,8002d68 <___vfprintf_internal_r+0x1eb0>
 8002d34:	d8c14c17 	ldw	r3,1328(sp)
 8002d38:	1880004c 	andi	r2,r3,1
 8002d3c:	10000a1e 	bne	r2,zero,8002d68 <___vfprintf_internal_r+0x1eb0>
 8002d40:	01000044 	movi	r4,1
 8002d44:	200f883a 	mov	r7,r4
 8002d48:	d9014515 	stw	r4,1300(sp)
 8002d4c:	003f4a06 	br	8002a78 <___vfprintf_internal_r+0x1bc0>
 8002d50:	3cc00017 	ldw	r19,0(r7)
 8002d54:	39c00104 	addi	r7,r7,4
 8002d58:	983d0e0e 	bge	r19,zero,8002194 <___vfprintf_internal_r+0x12dc>
 8002d5c:	b8c00007 	ldb	r3,0(r23)
 8002d60:	04ffffc4 	movi	r19,-1
 8002d64:	0038d306 	br	80010b4 <___vfprintf_internal_r+0x1fc>
 8002d68:	9cc00084 	addi	r19,r19,2
 8002d6c:	dcc14515 	stw	r19,1300(sp)
 8002d70:	980f883a 	mov	r7,r19
 8002d74:	983f400e 	bge	r19,zero,8002a78 <___vfprintf_internal_r+0x1bc0>
 8002d78:	003f7306 	br	8002b48 <___vfprintf_internal_r+0x1c90>

08002d7c <__vfprintf_internal>:
 8002d7c:	00820074 	movhi	r2,2049
 8002d80:	108aee04 	addi	r2,r2,11192
 8002d84:	2013883a 	mov	r9,r4
 8002d88:	11000017 	ldw	r4,0(r2)
 8002d8c:	2805883a 	mov	r2,r5
 8002d90:	300f883a 	mov	r7,r6
 8002d94:	480b883a 	mov	r5,r9
 8002d98:	100d883a 	mov	r6,r2
 8002d9c:	8000eb81 	jmpi	8000eb8 <___vfprintf_internal_r>

08002da0 <__swsetup_r>:
 8002da0:	00820074 	movhi	r2,2049
 8002da4:	108aee04 	addi	r2,r2,11192
 8002da8:	10c00017 	ldw	r3,0(r2)
 8002dac:	defffd04 	addi	sp,sp,-12
 8002db0:	dc400115 	stw	r17,4(sp)
 8002db4:	dc000015 	stw	r16,0(sp)
 8002db8:	dfc00215 	stw	ra,8(sp)
 8002dbc:	2023883a 	mov	r17,r4
 8002dc0:	2821883a 	mov	r16,r5
 8002dc4:	18000226 	beq	r3,zero,8002dd0 <__swsetup_r+0x30>
 8002dc8:	18800e17 	ldw	r2,56(r3)
 8002dcc:	10001f26 	beq	r2,zero,8002e4c <__swsetup_r+0xac>
 8002dd0:	8100030b 	ldhu	r4,12(r16)
 8002dd4:	2080020c 	andi	r2,r4,8
 8002dd8:	10002826 	beq	r2,zero,8002e7c <__swsetup_r+0xdc>
 8002ddc:	81400417 	ldw	r5,16(r16)
 8002de0:	28001d26 	beq	r5,zero,8002e58 <__swsetup_r+0xb8>
 8002de4:	2080004c 	andi	r2,r4,1
 8002de8:	1005003a 	cmpeq	r2,r2,zero
 8002dec:	10000b26 	beq	r2,zero,8002e1c <__swsetup_r+0x7c>
 8002df0:	2080008c 	andi	r2,r4,2
 8002df4:	10001226 	beq	r2,zero,8002e40 <__swsetup_r+0xa0>
 8002df8:	0005883a 	mov	r2,zero
 8002dfc:	80800215 	stw	r2,8(r16)
 8002e00:	28000b26 	beq	r5,zero,8002e30 <__swsetup_r+0x90>
 8002e04:	0005883a 	mov	r2,zero
 8002e08:	dfc00217 	ldw	ra,8(sp)
 8002e0c:	dc400117 	ldw	r17,4(sp)
 8002e10:	dc000017 	ldw	r16,0(sp)
 8002e14:	dec00304 	addi	sp,sp,12
 8002e18:	f800283a 	ret
 8002e1c:	80800517 	ldw	r2,20(r16)
 8002e20:	80000215 	stw	zero,8(r16)
 8002e24:	0085c83a 	sub	r2,zero,r2
 8002e28:	80800615 	stw	r2,24(r16)
 8002e2c:	283ff51e 	bne	r5,zero,8002e04 <__swsetup_r+0x64>
 8002e30:	2080200c 	andi	r2,r4,128
 8002e34:	103ff326 	beq	r2,zero,8002e04 <__swsetup_r+0x64>
 8002e38:	00bfffc4 	movi	r2,-1
 8002e3c:	003ff206 	br	8002e08 <__swsetup_r+0x68>
 8002e40:	80800517 	ldw	r2,20(r16)
 8002e44:	80800215 	stw	r2,8(r16)
 8002e48:	003fed06 	br	8002e00 <__swsetup_r+0x60>
 8002e4c:	1809883a 	mov	r4,r3
 8002e50:	800496c0 	call	800496c <__sinit>
 8002e54:	003fde06 	br	8002dd0 <__swsetup_r+0x30>
 8002e58:	20c0a00c 	andi	r3,r4,640
 8002e5c:	00808004 	movi	r2,512
 8002e60:	18bfe026 	beq	r3,r2,8002de4 <__swsetup_r+0x44>
 8002e64:	8809883a 	mov	r4,r17
 8002e68:	800b883a 	mov	r5,r16
 8002e6c:	80057180 	call	8005718 <__smakebuf_r>
 8002e70:	8100030b 	ldhu	r4,12(r16)
 8002e74:	81400417 	ldw	r5,16(r16)
 8002e78:	003fda06 	br	8002de4 <__swsetup_r+0x44>
 8002e7c:	2080040c 	andi	r2,r4,16
 8002e80:	103fed26 	beq	r2,zero,8002e38 <__swsetup_r+0x98>
 8002e84:	2080010c 	andi	r2,r4,4
 8002e88:	10001226 	beq	r2,zero,8002ed4 <__swsetup_r+0x134>
 8002e8c:	81400c17 	ldw	r5,48(r16)
 8002e90:	28000526 	beq	r5,zero,8002ea8 <__swsetup_r+0x108>
 8002e94:	80801004 	addi	r2,r16,64
 8002e98:	28800226 	beq	r5,r2,8002ea4 <__swsetup_r+0x104>
 8002e9c:	8809883a 	mov	r4,r17
 8002ea0:	8004d240 	call	8004d24 <_free_r>
 8002ea4:	80000c15 	stw	zero,48(r16)
 8002ea8:	8080030b 	ldhu	r2,12(r16)
 8002eac:	81400417 	ldw	r5,16(r16)
 8002eb0:	80000115 	stw	zero,4(r16)
 8002eb4:	10bff6cc 	andi	r2,r2,65499
 8002eb8:	8080030d 	sth	r2,12(r16)
 8002ebc:	81400015 	stw	r5,0(r16)
 8002ec0:	8080030b 	ldhu	r2,12(r16)
 8002ec4:	10800214 	ori	r2,r2,8
 8002ec8:	113fffcc 	andi	r4,r2,65535
 8002ecc:	8080030d 	sth	r2,12(r16)
 8002ed0:	003fc306 	br	8002de0 <__swsetup_r+0x40>
 8002ed4:	81400417 	ldw	r5,16(r16)
 8002ed8:	003ff906 	br	8002ec0 <__swsetup_r+0x120>

08002edc <quorem>:
 8002edc:	28c00417 	ldw	r3,16(r5)
 8002ee0:	20800417 	ldw	r2,16(r4)
 8002ee4:	defff104 	addi	sp,sp,-60
 8002ee8:	dfc00e15 	stw	ra,56(sp)
 8002eec:	df000d15 	stw	fp,52(sp)
 8002ef0:	ddc00c15 	stw	r23,48(sp)
 8002ef4:	dd800b15 	stw	r22,44(sp)
 8002ef8:	dd400a15 	stw	r21,40(sp)
 8002efc:	dd000915 	stw	r20,36(sp)
 8002f00:	dcc00815 	stw	r19,32(sp)
 8002f04:	dc800715 	stw	r18,28(sp)
 8002f08:	dc400615 	stw	r17,24(sp)
 8002f0c:	dc000515 	stw	r16,20(sp)
 8002f10:	d9000315 	stw	r4,12(sp)
 8002f14:	d9400415 	stw	r5,16(sp)
 8002f18:	10c07f16 	blt	r2,r3,8003118 <quorem+0x23c>
 8002f1c:	1d3fffc4 	addi	r20,r3,-1
 8002f20:	d8c00417 	ldw	r3,16(sp)
 8002f24:	d9000317 	ldw	r4,12(sp)
 8002f28:	a505883a 	add	r2,r20,r20
 8002f2c:	1085883a 	add	r2,r2,r2
 8002f30:	1cc00504 	addi	r19,r3,20
 8002f34:	25c00504 	addi	r23,r4,20
 8002f38:	98ad883a 	add	r22,r19,r2
 8002f3c:	15c7883a 	add	r3,r2,r23
 8002f40:	b1400017 	ldw	r5,0(r22)
 8002f44:	19000017 	ldw	r4,0(r3)
 8002f48:	d8c00015 	stw	r3,0(sp)
 8002f4c:	29400044 	addi	r5,r5,1
 8002f50:	d9000215 	stw	r4,8(sp)
 8002f54:	800987c0 	call	800987c <__udivsi3>
 8002f58:	1039883a 	mov	fp,r2
 8002f5c:	10003d1e 	bne	r2,zero,8003054 <quorem+0x178>
 8002f60:	d9400417 	ldw	r5,16(sp)
 8002f64:	d9000317 	ldw	r4,12(sp)
 8002f68:	8005d040 	call	8005d04 <__mcmp>
 8002f6c:	10002c16 	blt	r2,zero,8003020 <quorem+0x144>
 8002f70:	e7000044 	addi	fp,fp,1
 8002f74:	b80f883a 	mov	r7,r23
 8002f78:	0011883a 	mov	r8,zero
 8002f7c:	0009883a 	mov	r4,zero
 8002f80:	99400017 	ldw	r5,0(r19)
 8002f84:	38c00017 	ldw	r3,0(r7)
 8002f88:	9cc00104 	addi	r19,r19,4
 8002f8c:	28bfffcc 	andi	r2,r5,65535
 8002f90:	2085883a 	add	r2,r4,r2
 8002f94:	11bfffcc 	andi	r6,r2,65535
 8002f98:	193fffcc 	andi	r4,r3,65535
 8002f9c:	1004d43a 	srli	r2,r2,16
 8002fa0:	280ad43a 	srli	r5,r5,16
 8002fa4:	2189c83a 	sub	r4,r4,r6
 8002fa8:	2209883a 	add	r4,r4,r8
 8002fac:	1806d43a 	srli	r3,r3,16
 8002fb0:	288b883a 	add	r5,r5,r2
 8002fb4:	200dd43a 	srai	r6,r4,16
 8002fb8:	28bfffcc 	andi	r2,r5,65535
 8002fbc:	1887c83a 	sub	r3,r3,r2
 8002fc0:	1987883a 	add	r3,r3,r6
 8002fc4:	3900000d 	sth	r4,0(r7)
 8002fc8:	38c0008d 	sth	r3,2(r7)
 8002fcc:	2808d43a 	srli	r4,r5,16
 8002fd0:	39c00104 	addi	r7,r7,4
 8002fd4:	1811d43a 	srai	r8,r3,16
 8002fd8:	b4ffe92e 	bgeu	r22,r19,8002f80 <quorem+0xa4>
 8002fdc:	a505883a 	add	r2,r20,r20
 8002fe0:	1085883a 	add	r2,r2,r2
 8002fe4:	b885883a 	add	r2,r23,r2
 8002fe8:	10c00017 	ldw	r3,0(r2)
 8002fec:	18000c1e 	bne	r3,zero,8003020 <quorem+0x144>
 8002ff0:	113fff04 	addi	r4,r2,-4
 8002ff4:	b900082e 	bgeu	r23,r4,8003018 <quorem+0x13c>
 8002ff8:	10bfff17 	ldw	r2,-4(r2)
 8002ffc:	10000326 	beq	r2,zero,800300c <quorem+0x130>
 8003000:	00000506 	br	8003018 <quorem+0x13c>
 8003004:	20800017 	ldw	r2,0(r4)
 8003008:	1000031e 	bne	r2,zero,8003018 <quorem+0x13c>
 800300c:	213fff04 	addi	r4,r4,-4
 8003010:	a53fffc4 	addi	r20,r20,-1
 8003014:	b93ffb36 	bltu	r23,r4,8003004 <quorem+0x128>
 8003018:	d9000317 	ldw	r4,12(sp)
 800301c:	25000415 	stw	r20,16(r4)
 8003020:	e005883a 	mov	r2,fp
 8003024:	dfc00e17 	ldw	ra,56(sp)
 8003028:	df000d17 	ldw	fp,52(sp)
 800302c:	ddc00c17 	ldw	r23,48(sp)
 8003030:	dd800b17 	ldw	r22,44(sp)
 8003034:	dd400a17 	ldw	r21,40(sp)
 8003038:	dd000917 	ldw	r20,36(sp)
 800303c:	dcc00817 	ldw	r19,32(sp)
 8003040:	dc800717 	ldw	r18,28(sp)
 8003044:	dc400617 	ldw	r17,24(sp)
 8003048:	dc000517 	ldw	r16,20(sp)
 800304c:	dec00f04 	addi	sp,sp,60
 8003050:	f800283a 	ret
 8003054:	b823883a 	mov	r17,r23
 8003058:	9825883a 	mov	r18,r19
 800305c:	d8000115 	stw	zero,4(sp)
 8003060:	002b883a 	mov	r21,zero
 8003064:	94000017 	ldw	r16,0(r18)
 8003068:	e009883a 	mov	r4,fp
 800306c:	94800104 	addi	r18,r18,4
 8003070:	817fffcc 	andi	r5,r16,65535
 8003074:	800988c0 	call	800988c <__mulsi3>
 8003078:	800ad43a 	srli	r5,r16,16
 800307c:	e009883a 	mov	r4,fp
 8003080:	a8a1883a 	add	r16,r21,r2
 8003084:	800988c0 	call	800988c <__mulsi3>
 8003088:	89000017 	ldw	r4,0(r17)
 800308c:	80ffffcc 	andi	r3,r16,65535
 8003090:	8020d43a 	srli	r16,r16,16
 8003094:	217fffcc 	andi	r5,r4,65535
 8003098:	28cbc83a 	sub	r5,r5,r3
 800309c:	d8c00117 	ldw	r3,4(sp)
 80030a0:	2008d43a 	srli	r4,r4,16
 80030a4:	1405883a 	add	r2,r2,r16
 80030a8:	28cb883a 	add	r5,r5,r3
 80030ac:	280dd43a 	srai	r6,r5,16
 80030b0:	10ffffcc 	andi	r3,r2,65535
 80030b4:	20c9c83a 	sub	r4,r4,r3
 80030b8:	2189883a 	add	r4,r4,r6
 80030bc:	8900008d 	sth	r4,2(r17)
 80030c0:	2009d43a 	srai	r4,r4,16
 80030c4:	8940000d 	sth	r5,0(r17)
 80030c8:	102ad43a 	srli	r21,r2,16
 80030cc:	8c400104 	addi	r17,r17,4
 80030d0:	d9000115 	stw	r4,4(sp)
 80030d4:	b4bfe32e 	bgeu	r22,r18,8003064 <quorem+0x188>
 80030d8:	d9000217 	ldw	r4,8(sp)
 80030dc:	203fa01e 	bne	r4,zero,8002f60 <quorem+0x84>
 80030e0:	d8800017 	ldw	r2,0(sp)
 80030e4:	10ffff04 	addi	r3,r2,-4
 80030e8:	b8c0082e 	bgeu	r23,r3,800310c <quorem+0x230>
 80030ec:	10bfff17 	ldw	r2,-4(r2)
 80030f0:	10000326 	beq	r2,zero,8003100 <quorem+0x224>
 80030f4:	00000506 	br	800310c <quorem+0x230>
 80030f8:	18800017 	ldw	r2,0(r3)
 80030fc:	1000031e 	bne	r2,zero,800310c <quorem+0x230>
 8003100:	18ffff04 	addi	r3,r3,-4
 8003104:	a53fffc4 	addi	r20,r20,-1
 8003108:	b8fffb36 	bltu	r23,r3,80030f8 <quorem+0x21c>
 800310c:	d8c00317 	ldw	r3,12(sp)
 8003110:	1d000415 	stw	r20,16(r3)
 8003114:	003f9206 	br	8002f60 <quorem+0x84>
 8003118:	0005883a 	mov	r2,zero
 800311c:	003fc106 	br	8003024 <quorem+0x148>

08003120 <_dtoa_r>:
 8003120:	22001017 	ldw	r8,64(r4)
 8003124:	deffda04 	addi	sp,sp,-152
 8003128:	dd402115 	stw	r21,132(sp)
 800312c:	dd002015 	stw	r20,128(sp)
 8003130:	dc801e15 	stw	r18,120(sp)
 8003134:	dc401d15 	stw	r17,116(sp)
 8003138:	dfc02515 	stw	ra,148(sp)
 800313c:	df002415 	stw	fp,144(sp)
 8003140:	ddc02315 	stw	r23,140(sp)
 8003144:	dd802215 	stw	r22,136(sp)
 8003148:	dcc01f15 	stw	r19,124(sp)
 800314c:	dc001c15 	stw	r16,112(sp)
 8003150:	d9001615 	stw	r4,88(sp)
 8003154:	3023883a 	mov	r17,r6
 8003158:	2829883a 	mov	r20,r5
 800315c:	d9c01715 	stw	r7,92(sp)
 8003160:	dc802817 	ldw	r18,160(sp)
 8003164:	302b883a 	mov	r21,r6
 8003168:	40000a26 	beq	r8,zero,8003194 <_dtoa_r+0x74>
 800316c:	20801117 	ldw	r2,68(r4)
 8003170:	400b883a 	mov	r5,r8
 8003174:	40800115 	stw	r2,4(r8)
 8003178:	20c01117 	ldw	r3,68(r4)
 800317c:	00800044 	movi	r2,1
 8003180:	10c4983a 	sll	r2,r2,r3
 8003184:	40800215 	stw	r2,8(r8)
 8003188:	8005ba80 	call	8005ba8 <_Bfree>
 800318c:	d8c01617 	ldw	r3,88(sp)
 8003190:	18001015 	stw	zero,64(r3)
 8003194:	8800a316 	blt	r17,zero,8003424 <_dtoa_r+0x304>
 8003198:	90000015 	stw	zero,0(r18)
 800319c:	a8dffc2c 	andhi	r3,r21,32752
 80031a0:	009ffc34 	movhi	r2,32752
 80031a4:	18809126 	beq	r3,r2,80033ec <_dtoa_r+0x2cc>
 80031a8:	000d883a 	mov	r6,zero
 80031ac:	000f883a 	mov	r7,zero
 80031b0:	a009883a 	mov	r4,r20
 80031b4:	a80b883a 	mov	r5,r21
 80031b8:	dd001215 	stw	r20,72(sp)
 80031bc:	dd401315 	stw	r21,76(sp)
 80031c0:	80091bc0 	call	80091bc <__nedf2>
 80031c4:	1000171e 	bne	r2,zero,8003224 <_dtoa_r+0x104>
 80031c8:	d9802717 	ldw	r6,156(sp)
 80031cc:	00800044 	movi	r2,1
 80031d0:	30800015 	stw	r2,0(r6)
 80031d4:	d8802917 	ldw	r2,164(sp)
 80031d8:	10029b26 	beq	r2,zero,8003c48 <_dtoa_r+0xb28>
 80031dc:	d9002917 	ldw	r4,164(sp)
 80031e0:	00820074 	movhi	r2,2049
 80031e4:	10839644 	addi	r2,r2,3673
 80031e8:	10ffffc4 	addi	r3,r2,-1
 80031ec:	20800015 	stw	r2,0(r4)
 80031f0:	1805883a 	mov	r2,r3
 80031f4:	dfc02517 	ldw	ra,148(sp)
 80031f8:	df002417 	ldw	fp,144(sp)
 80031fc:	ddc02317 	ldw	r23,140(sp)
 8003200:	dd802217 	ldw	r22,136(sp)
 8003204:	dd402117 	ldw	r21,132(sp)
 8003208:	dd002017 	ldw	r20,128(sp)
 800320c:	dcc01f17 	ldw	r19,124(sp)
 8003210:	dc801e17 	ldw	r18,120(sp)
 8003214:	dc401d17 	ldw	r17,116(sp)
 8003218:	dc001c17 	ldw	r16,112(sp)
 800321c:	dec02604 	addi	sp,sp,152
 8003220:	f800283a 	ret
 8003224:	d9001617 	ldw	r4,88(sp)
 8003228:	d9401217 	ldw	r5,72(sp)
 800322c:	d8800104 	addi	r2,sp,4
 8003230:	a80d883a 	mov	r6,r21
 8003234:	d9c00204 	addi	r7,sp,8
 8003238:	d8800015 	stw	r2,0(sp)
 800323c:	80061e40 	call	80061e4 <__d2b>
 8003240:	d8800715 	stw	r2,28(sp)
 8003244:	a804d53a 	srli	r2,r21,20
 8003248:	1101ffcc 	andi	r4,r2,2047
 800324c:	20008626 	beq	r4,zero,8003468 <_dtoa_r+0x348>
 8003250:	d8c01217 	ldw	r3,72(sp)
 8003254:	00800434 	movhi	r2,16
 8003258:	10bfffc4 	addi	r2,r2,-1
 800325c:	ddc00117 	ldw	r23,4(sp)
 8003260:	a884703a 	and	r2,r21,r2
 8003264:	1811883a 	mov	r8,r3
 8003268:	124ffc34 	orhi	r9,r2,16368
 800326c:	25bf0044 	addi	r22,r4,-1023
 8003270:	d8000815 	stw	zero,32(sp)
 8003274:	0005883a 	mov	r2,zero
 8003278:	00cffe34 	movhi	r3,16376
 800327c:	480b883a 	mov	r5,r9
 8003280:	4009883a 	mov	r4,r8
 8003284:	180f883a 	mov	r7,r3
 8003288:	100d883a 	mov	r6,r2
 800328c:	8008a240 	call	8008a24 <__subdf3>
 8003290:	0218dbf4 	movhi	r8,25455
 8003294:	4210d844 	addi	r8,r8,17249
 8003298:	024ff4f4 	movhi	r9,16339
 800329c:	4a61e9c4 	addi	r9,r9,-30809
 80032a0:	480f883a 	mov	r7,r9
 80032a4:	400d883a 	mov	r6,r8
 80032a8:	180b883a 	mov	r5,r3
 80032ac:	1009883a 	mov	r4,r2
 80032b0:	8008b180 	call	8008b18 <__muldf3>
 80032b4:	0222d874 	movhi	r8,35681
 80032b8:	42322cc4 	addi	r8,r8,-14157
 80032bc:	024ff1f4 	movhi	r9,16327
 80032c0:	4a628a04 	addi	r9,r9,-30168
 80032c4:	480f883a 	mov	r7,r9
 80032c8:	400d883a 	mov	r6,r8
 80032cc:	180b883a 	mov	r5,r3
 80032d0:	1009883a 	mov	r4,r2
 80032d4:	8008aa40 	call	8008aa4 <__adddf3>
 80032d8:	b009883a 	mov	r4,r22
 80032dc:	1021883a 	mov	r16,r2
 80032e0:	1823883a 	mov	r17,r3
 80032e4:	80093dc0 	call	80093dc <__floatsidf>
 80032e8:	021427f4 	movhi	r8,20639
 80032ec:	421e7ec4 	addi	r8,r8,31227
 80032f0:	024ff4f4 	movhi	r9,16339
 80032f4:	4a5104c4 	addi	r9,r9,17427
 80032f8:	480f883a 	mov	r7,r9
 80032fc:	400d883a 	mov	r6,r8
 8003300:	180b883a 	mov	r5,r3
 8003304:	1009883a 	mov	r4,r2
 8003308:	8008b180 	call	8008b18 <__muldf3>
 800330c:	180f883a 	mov	r7,r3
 8003310:	880b883a 	mov	r5,r17
 8003314:	100d883a 	mov	r6,r2
 8003318:	8009883a 	mov	r4,r16
 800331c:	8008aa40 	call	8008aa4 <__adddf3>
 8003320:	1009883a 	mov	r4,r2
 8003324:	180b883a 	mov	r5,r3
 8003328:	1021883a 	mov	r16,r2
 800332c:	1823883a 	mov	r17,r3
 8003330:	80094d40 	call	80094d4 <__fixdfsi>
 8003334:	000d883a 	mov	r6,zero
 8003338:	000f883a 	mov	r7,zero
 800333c:	8009883a 	mov	r4,r16
 8003340:	880b883a 	mov	r5,r17
 8003344:	d8800d15 	stw	r2,52(sp)
 8003348:	80093540 	call	8009354 <__ltdf2>
 800334c:	10031716 	blt	r2,zero,8003fac <_dtoa_r+0xe8c>
 8003350:	d8c00d17 	ldw	r3,52(sp)
 8003354:	00800584 	movi	r2,22
 8003358:	10c1482e 	bgeu	r2,r3,800387c <_dtoa_r+0x75c>
 800335c:	01000044 	movi	r4,1
 8003360:	d9000c15 	stw	r4,48(sp)
 8003364:	bd85c83a 	sub	r2,r23,r22
 8003368:	11bfffc4 	addi	r6,r2,-1
 800336c:	30030b16 	blt	r6,zero,8003f9c <_dtoa_r+0xe7c>
 8003370:	d9800a15 	stw	r6,40(sp)
 8003374:	d8001115 	stw	zero,68(sp)
 8003378:	d8c00d17 	ldw	r3,52(sp)
 800337c:	1802ff16 	blt	r3,zero,8003f7c <_dtoa_r+0xe5c>
 8003380:	d9000a17 	ldw	r4,40(sp)
 8003384:	d8c00915 	stw	r3,36(sp)
 8003388:	d8001015 	stw	zero,64(sp)
 800338c:	20c9883a 	add	r4,r4,r3
 8003390:	d9000a15 	stw	r4,40(sp)
 8003394:	d9001717 	ldw	r4,92(sp)
 8003398:	00800244 	movi	r2,9
 800339c:	11004636 	bltu	r2,r4,80034b8 <_dtoa_r+0x398>
 80033a0:	00800144 	movi	r2,5
 80033a4:	11020416 	blt	r2,r4,8003bb8 <_dtoa_r+0xa98>
 80033a8:	04400044 	movi	r17,1
 80033ac:	d8c01717 	ldw	r3,92(sp)
 80033b0:	00800144 	movi	r2,5
 80033b4:	10c1ed36 	bltu	r2,r3,8003b6c <_dtoa_r+0xa4c>
 80033b8:	18c5883a 	add	r2,r3,r3
 80033bc:	1085883a 	add	r2,r2,r2
 80033c0:	00c20034 	movhi	r3,2048
 80033c4:	18ccf504 	addi	r3,r3,13268
 80033c8:	10c5883a 	add	r2,r2,r3
 80033cc:	11000017 	ldw	r4,0(r2)
 80033d0:	2000683a 	jmp	r4
 80033d4:	080034c0 	call	80034c <__alt_mem_onchip_memory2_0+0x7fe34c>
 80033d8:	080034c0 	call	80034c <__alt_mem_onchip_memory2_0+0x7fe34c>
 80033dc:	08003ec0 	call	8003ec <__alt_mem_onchip_memory2_0+0x7fe3ec>
 80033e0:	08003e98 	cmpnei	zero,at,250
 80033e4:	08003edc 	xori	zero,at,251
 80033e8:	08003ee8 	cmpgeui	zero,at,251
 80033ec:	d9002717 	ldw	r4,156(sp)
 80033f0:	0089c3c4 	movi	r2,9999
 80033f4:	20800015 	stw	r2,0(r4)
 80033f8:	a0001026 	beq	r20,zero,800343c <_dtoa_r+0x31c>
 80033fc:	00c20074 	movhi	r3,2049
 8003400:	18c3a204 	addi	r3,r3,3720
 8003404:	d9802917 	ldw	r6,164(sp)
 8003408:	303f7926 	beq	r6,zero,80031f0 <_dtoa_r+0xd0>
 800340c:	188000c7 	ldb	r2,3(r3)
 8003410:	190000c4 	addi	r4,r3,3
 8003414:	1000101e 	bne	r2,zero,8003458 <_dtoa_r+0x338>
 8003418:	d8802917 	ldw	r2,164(sp)
 800341c:	11000015 	stw	r4,0(r2)
 8003420:	003f7306 	br	80031f0 <_dtoa_r+0xd0>
 8003424:	00a00034 	movhi	r2,32768
 8003428:	10bfffc4 	addi	r2,r2,-1
 800342c:	00c00044 	movi	r3,1
 8003430:	88aa703a 	and	r21,r17,r2
 8003434:	90c00015 	stw	r3,0(r18)
 8003438:	003f5806 	br	800319c <_dtoa_r+0x7c>
 800343c:	00800434 	movhi	r2,16
 8003440:	10bfffc4 	addi	r2,r2,-1
 8003444:	a884703a 	and	r2,r21,r2
 8003448:	103fec1e 	bne	r2,zero,80033fc <_dtoa_r+0x2dc>
 800344c:	00c20074 	movhi	r3,2049
 8003450:	18c39f04 	addi	r3,r3,3708
 8003454:	003feb06 	br	8003404 <_dtoa_r+0x2e4>
 8003458:	d8802917 	ldw	r2,164(sp)
 800345c:	19000204 	addi	r4,r3,8
 8003460:	11000015 	stw	r4,0(r2)
 8003464:	003f6206 	br	80031f0 <_dtoa_r+0xd0>
 8003468:	ddc00117 	ldw	r23,4(sp)
 800346c:	d8800217 	ldw	r2,8(sp)
 8003470:	01000804 	movi	r4,32
 8003474:	b8c10c84 	addi	r3,r23,1074
 8003478:	18a3883a 	add	r17,r3,r2
 800347c:	2441b80e 	bge	r4,r17,8003b60 <_dtoa_r+0xa40>
 8003480:	00c01004 	movi	r3,64
 8003484:	1c47c83a 	sub	r3,r3,r17
 8003488:	88bff804 	addi	r2,r17,-32
 800348c:	a8c6983a 	sll	r3,r21,r3
 8003490:	a084d83a 	srl	r2,r20,r2
 8003494:	1888b03a 	or	r4,r3,r2
 8003498:	80095ac0 	call	80095ac <__floatunsidf>
 800349c:	1011883a 	mov	r8,r2
 80034a0:	00bf8434 	movhi	r2,65040
 80034a4:	01000044 	movi	r4,1
 80034a8:	10d3883a 	add	r9,r2,r3
 80034ac:	8dbef344 	addi	r22,r17,-1075
 80034b0:	d9000815 	stw	r4,32(sp)
 80034b4:	003f6f06 	br	8003274 <_dtoa_r+0x154>
 80034b8:	d8001715 	stw	zero,92(sp)
 80034bc:	04400044 	movi	r17,1
 80034c0:	00bfffc4 	movi	r2,-1
 80034c4:	00c00044 	movi	r3,1
 80034c8:	d8800e15 	stw	r2,56(sp)
 80034cc:	d8002615 	stw	zero,152(sp)
 80034d0:	d8800f15 	stw	r2,60(sp)
 80034d4:	d8c00b15 	stw	r3,44(sp)
 80034d8:	1021883a 	mov	r16,r2
 80034dc:	d8801617 	ldw	r2,88(sp)
 80034e0:	10001115 	stw	zero,68(r2)
 80034e4:	d8801617 	ldw	r2,88(sp)
 80034e8:	11401117 	ldw	r5,68(r2)
 80034ec:	1009883a 	mov	r4,r2
 80034f0:	80061280 	call	8006128 <_Balloc>
 80034f4:	d8c01617 	ldw	r3,88(sp)
 80034f8:	d8800515 	stw	r2,20(sp)
 80034fc:	18801015 	stw	r2,64(r3)
 8003500:	00800384 	movi	r2,14
 8003504:	14006836 	bltu	r2,r16,80036a8 <_dtoa_r+0x588>
 8003508:	8805003a 	cmpeq	r2,r17,zero
 800350c:	1000661e 	bne	r2,zero,80036a8 <_dtoa_r+0x588>
 8003510:	d9000d17 	ldw	r4,52(sp)
 8003514:	0102300e 	bge	zero,r4,8003dd8 <_dtoa_r+0xcb8>
 8003518:	208003cc 	andi	r2,r4,15
 800351c:	100490fa 	slli	r2,r2,3
 8003520:	2025d13a 	srai	r18,r4,4
 8003524:	00c20074 	movhi	r3,2049
 8003528:	18c3b404 	addi	r3,r3,3792
 800352c:	10c5883a 	add	r2,r2,r3
 8003530:	90c0040c 	andi	r3,r18,16
 8003534:	14000017 	ldw	r16,0(r2)
 8003538:	14400117 	ldw	r17,4(r2)
 800353c:	18036a1e 	bne	r3,zero,80042e8 <_dtoa_r+0x11c8>
 8003540:	05800084 	movi	r22,2
 8003544:	90001026 	beq	r18,zero,8003588 <_dtoa_r+0x468>
 8003548:	04c20074 	movhi	r19,2049
 800354c:	9cc3e604 	addi	r19,r19,3992
 8003550:	9080004c 	andi	r2,r18,1
 8003554:	1005003a 	cmpeq	r2,r2,zero
 8003558:	1000081e 	bne	r2,zero,800357c <_dtoa_r+0x45c>
 800355c:	99800017 	ldw	r6,0(r19)
 8003560:	99c00117 	ldw	r7,4(r19)
 8003564:	880b883a 	mov	r5,r17
 8003568:	8009883a 	mov	r4,r16
 800356c:	8008b180 	call	8008b18 <__muldf3>
 8003570:	1021883a 	mov	r16,r2
 8003574:	b5800044 	addi	r22,r22,1
 8003578:	1823883a 	mov	r17,r3
 800357c:	9025d07a 	srai	r18,r18,1
 8003580:	9cc00204 	addi	r19,r19,8
 8003584:	903ff21e 	bne	r18,zero,8003550 <_dtoa_r+0x430>
 8003588:	a80b883a 	mov	r5,r21
 800358c:	a009883a 	mov	r4,r20
 8003590:	880f883a 	mov	r7,r17
 8003594:	800d883a 	mov	r6,r16
 8003598:	8008edc0 	call	8008edc <__divdf3>
 800359c:	1029883a 	mov	r20,r2
 80035a0:	182b883a 	mov	r21,r3
 80035a4:	d8c00c17 	ldw	r3,48(sp)
 80035a8:	1805003a 	cmpeq	r2,r3,zero
 80035ac:	1000081e 	bne	r2,zero,80035d0 <_dtoa_r+0x4b0>
 80035b0:	0005883a 	mov	r2,zero
 80035b4:	00cffc34 	movhi	r3,16368
 80035b8:	180f883a 	mov	r7,r3
 80035bc:	a009883a 	mov	r4,r20
 80035c0:	a80b883a 	mov	r5,r21
 80035c4:	100d883a 	mov	r6,r2
 80035c8:	80093540 	call	8009354 <__ltdf2>
 80035cc:	1003fe16 	blt	r2,zero,80045c8 <_dtoa_r+0x14a8>
 80035d0:	b009883a 	mov	r4,r22
 80035d4:	80093dc0 	call	80093dc <__floatsidf>
 80035d8:	180b883a 	mov	r5,r3
 80035dc:	1009883a 	mov	r4,r2
 80035e0:	a00d883a 	mov	r6,r20
 80035e4:	a80f883a 	mov	r7,r21
 80035e8:	8008b180 	call	8008b18 <__muldf3>
 80035ec:	0011883a 	mov	r8,zero
 80035f0:	02500734 	movhi	r9,16412
 80035f4:	1009883a 	mov	r4,r2
 80035f8:	180b883a 	mov	r5,r3
 80035fc:	480f883a 	mov	r7,r9
 8003600:	400d883a 	mov	r6,r8
 8003604:	8008aa40 	call	8008aa4 <__adddf3>
 8003608:	d9000f17 	ldw	r4,60(sp)
 800360c:	102d883a 	mov	r22,r2
 8003610:	00bf3034 	movhi	r2,64704
 8003614:	18b9883a 	add	fp,r3,r2
 8003618:	e02f883a 	mov	r23,fp
 800361c:	20028f1e 	bne	r4,zero,800405c <_dtoa_r+0xf3c>
 8003620:	0005883a 	mov	r2,zero
 8003624:	00d00534 	movhi	r3,16404
 8003628:	a009883a 	mov	r4,r20
 800362c:	a80b883a 	mov	r5,r21
 8003630:	180f883a 	mov	r7,r3
 8003634:	100d883a 	mov	r6,r2
 8003638:	8008a240 	call	8008a24 <__subdf3>
 800363c:	1009883a 	mov	r4,r2
 8003640:	e00f883a 	mov	r7,fp
 8003644:	180b883a 	mov	r5,r3
 8003648:	b00d883a 	mov	r6,r22
 800364c:	1025883a 	mov	r18,r2
 8003650:	1827883a 	mov	r19,r3
 8003654:	80092440 	call	8009244 <__gtdf2>
 8003658:	00834f16 	blt	zero,r2,8004398 <_dtoa_r+0x1278>
 800365c:	e0e0003c 	xorhi	r3,fp,32768
 8003660:	9009883a 	mov	r4,r18
 8003664:	980b883a 	mov	r5,r19
 8003668:	180f883a 	mov	r7,r3
 800366c:	b00d883a 	mov	r6,r22
 8003670:	80093540 	call	8009354 <__ltdf2>
 8003674:	1000080e 	bge	r2,zero,8003698 <_dtoa_r+0x578>
 8003678:	0027883a 	mov	r19,zero
 800367c:	0025883a 	mov	r18,zero
 8003680:	d8802617 	ldw	r2,152(sp)
 8003684:	df000517 	ldw	fp,20(sp)
 8003688:	d8000615 	stw	zero,24(sp)
 800368c:	0084303a 	nor	r2,zero,r2
 8003690:	d8800d15 	stw	r2,52(sp)
 8003694:	00019b06 	br	8003d04 <_dtoa_r+0xbe4>
 8003698:	d9801217 	ldw	r6,72(sp)
 800369c:	d8801317 	ldw	r2,76(sp)
 80036a0:	3029883a 	mov	r20,r6
 80036a4:	102b883a 	mov	r21,r2
 80036a8:	d8c00217 	ldw	r3,8(sp)
 80036ac:	18008516 	blt	r3,zero,80038c4 <_dtoa_r+0x7a4>
 80036b0:	d9000d17 	ldw	r4,52(sp)
 80036b4:	00800384 	movi	r2,14
 80036b8:	11008216 	blt	r2,r4,80038c4 <_dtoa_r+0x7a4>
 80036bc:	200490fa 	slli	r2,r4,3
 80036c0:	d9802617 	ldw	r6,152(sp)
 80036c4:	00c20074 	movhi	r3,2049
 80036c8:	18c3b404 	addi	r3,r3,3792
 80036cc:	10c5883a 	add	r2,r2,r3
 80036d0:	14800017 	ldw	r18,0(r2)
 80036d4:	14c00117 	ldw	r19,4(r2)
 80036d8:	30031e16 	blt	r6,zero,8004354 <_dtoa_r+0x1234>
 80036dc:	d9000517 	ldw	r4,20(sp)
 80036e0:	d8c00f17 	ldw	r3,60(sp)
 80036e4:	a823883a 	mov	r17,r21
 80036e8:	a021883a 	mov	r16,r20
 80036ec:	192b883a 	add	r21,r3,r4
 80036f0:	2039883a 	mov	fp,r4
 80036f4:	00000f06 	br	8003734 <_dtoa_r+0x614>
 80036f8:	0005883a 	mov	r2,zero
 80036fc:	00d00934 	movhi	r3,16420
 8003700:	5009883a 	mov	r4,r10
 8003704:	580b883a 	mov	r5,r11
 8003708:	180f883a 	mov	r7,r3
 800370c:	100d883a 	mov	r6,r2
 8003710:	8008b180 	call	8008b18 <__muldf3>
 8003714:	180b883a 	mov	r5,r3
 8003718:	000d883a 	mov	r6,zero
 800371c:	000f883a 	mov	r7,zero
 8003720:	1009883a 	mov	r4,r2
 8003724:	1021883a 	mov	r16,r2
 8003728:	1823883a 	mov	r17,r3
 800372c:	80091bc0 	call	80091bc <__nedf2>
 8003730:	10004526 	beq	r2,zero,8003848 <_dtoa_r+0x728>
 8003734:	900d883a 	mov	r6,r18
 8003738:	980f883a 	mov	r7,r19
 800373c:	8009883a 	mov	r4,r16
 8003740:	880b883a 	mov	r5,r17
 8003744:	8008edc0 	call	8008edc <__divdf3>
 8003748:	180b883a 	mov	r5,r3
 800374c:	1009883a 	mov	r4,r2
 8003750:	80094d40 	call	80094d4 <__fixdfsi>
 8003754:	1009883a 	mov	r4,r2
 8003758:	1029883a 	mov	r20,r2
 800375c:	80093dc0 	call	80093dc <__floatsidf>
 8003760:	180f883a 	mov	r7,r3
 8003764:	9009883a 	mov	r4,r18
 8003768:	980b883a 	mov	r5,r19
 800376c:	100d883a 	mov	r6,r2
 8003770:	8008b180 	call	8008b18 <__muldf3>
 8003774:	180f883a 	mov	r7,r3
 8003778:	880b883a 	mov	r5,r17
 800377c:	8009883a 	mov	r4,r16
 8003780:	100d883a 	mov	r6,r2
 8003784:	8008a240 	call	8008a24 <__subdf3>
 8003788:	1015883a 	mov	r10,r2
 800378c:	a0800c04 	addi	r2,r20,48
 8003790:	e0800005 	stb	r2,0(fp)
 8003794:	e7000044 	addi	fp,fp,1
 8003798:	1817883a 	mov	r11,r3
 800379c:	e57fd61e 	bne	fp,r21,80036f8 <_dtoa_r+0x5d8>
 80037a0:	500d883a 	mov	r6,r10
 80037a4:	180f883a 	mov	r7,r3
 80037a8:	5009883a 	mov	r4,r10
 80037ac:	180b883a 	mov	r5,r3
 80037b0:	8008aa40 	call	8008aa4 <__adddf3>
 80037b4:	100d883a 	mov	r6,r2
 80037b8:	9009883a 	mov	r4,r18
 80037bc:	980b883a 	mov	r5,r19
 80037c0:	180f883a 	mov	r7,r3
 80037c4:	1021883a 	mov	r16,r2
 80037c8:	1823883a 	mov	r17,r3
 80037cc:	80093540 	call	8009354 <__ltdf2>
 80037d0:	10000816 	blt	r2,zero,80037f4 <_dtoa_r+0x6d4>
 80037d4:	980b883a 	mov	r5,r19
 80037d8:	800d883a 	mov	r6,r16
 80037dc:	880f883a 	mov	r7,r17
 80037e0:	9009883a 	mov	r4,r18
 80037e4:	80091340 	call	8009134 <__eqdf2>
 80037e8:	1000171e 	bne	r2,zero,8003848 <_dtoa_r+0x728>
 80037ec:	a080004c 	andi	r2,r20,1
 80037f0:	10001526 	beq	r2,zero,8003848 <_dtoa_r+0x728>
 80037f4:	d8800d17 	ldw	r2,52(sp)
 80037f8:	d8800415 	stw	r2,16(sp)
 80037fc:	e009883a 	mov	r4,fp
 8003800:	213fffc4 	addi	r4,r4,-1
 8003804:	20c00007 	ldb	r3,0(r4)
 8003808:	00800e44 	movi	r2,57
 800380c:	1880081e 	bne	r3,r2,8003830 <_dtoa_r+0x710>
 8003810:	d8800517 	ldw	r2,20(sp)
 8003814:	113ffa1e 	bne	r2,r4,8003800 <_dtoa_r+0x6e0>
 8003818:	d8c00417 	ldw	r3,16(sp)
 800381c:	d9800517 	ldw	r6,20(sp)
 8003820:	00800c04 	movi	r2,48
 8003824:	18c00044 	addi	r3,r3,1
 8003828:	d8c00415 	stw	r3,16(sp)
 800382c:	30800005 	stb	r2,0(r6)
 8003830:	20800003 	ldbu	r2,0(r4)
 8003834:	d8c00417 	ldw	r3,16(sp)
 8003838:	27000044 	addi	fp,r4,1
 800383c:	10800044 	addi	r2,r2,1
 8003840:	d8c00d15 	stw	r3,52(sp)
 8003844:	20800005 	stb	r2,0(r4)
 8003848:	d9001617 	ldw	r4,88(sp)
 800384c:	d9400717 	ldw	r5,28(sp)
 8003850:	8005ba80 	call	8005ba8 <_Bfree>
 8003854:	e0000005 	stb	zero,0(fp)
 8003858:	d9800d17 	ldw	r6,52(sp)
 800385c:	d8c02717 	ldw	r3,156(sp)
 8003860:	d9002917 	ldw	r4,164(sp)
 8003864:	30800044 	addi	r2,r6,1
 8003868:	18800015 	stw	r2,0(r3)
 800386c:	20029c26 	beq	r4,zero,80042e0 <_dtoa_r+0x11c0>
 8003870:	d8c00517 	ldw	r3,20(sp)
 8003874:	27000015 	stw	fp,0(r4)
 8003878:	003e5d06 	br	80031f0 <_dtoa_r+0xd0>
 800387c:	d9800d17 	ldw	r6,52(sp)
 8003880:	00c20074 	movhi	r3,2049
 8003884:	18c3b404 	addi	r3,r3,3792
 8003888:	d9001217 	ldw	r4,72(sp)
 800388c:	300490fa 	slli	r2,r6,3
 8003890:	d9401317 	ldw	r5,76(sp)
 8003894:	10c5883a 	add	r2,r2,r3
 8003898:	12000017 	ldw	r8,0(r2)
 800389c:	12400117 	ldw	r9,4(r2)
 80038a0:	400d883a 	mov	r6,r8
 80038a4:	480f883a 	mov	r7,r9
 80038a8:	80093540 	call	8009354 <__ltdf2>
 80038ac:	1000030e 	bge	r2,zero,80038bc <_dtoa_r+0x79c>
 80038b0:	d8800d17 	ldw	r2,52(sp)
 80038b4:	10bfffc4 	addi	r2,r2,-1
 80038b8:	d8800d15 	stw	r2,52(sp)
 80038bc:	d8000c15 	stw	zero,48(sp)
 80038c0:	003ea806 	br	8003364 <_dtoa_r+0x244>
 80038c4:	d9000b17 	ldw	r4,44(sp)
 80038c8:	202cc03a 	cmpne	r22,r4,zero
 80038cc:	b000c71e 	bne	r22,zero,8003bec <_dtoa_r+0xacc>
 80038d0:	dc001117 	ldw	r16,68(sp)
 80038d4:	dc801017 	ldw	r18,64(sp)
 80038d8:	0027883a 	mov	r19,zero
 80038dc:	04000b0e 	bge	zero,r16,800390c <_dtoa_r+0x7ec>
 80038e0:	d8c00a17 	ldw	r3,40(sp)
 80038e4:	00c0090e 	bge	zero,r3,800390c <_dtoa_r+0x7ec>
 80038e8:	8005883a 	mov	r2,r16
 80038ec:	1c011316 	blt	r3,r16,8003d3c <_dtoa_r+0xc1c>
 80038f0:	d9000a17 	ldw	r4,40(sp)
 80038f4:	d9801117 	ldw	r6,68(sp)
 80038f8:	80a1c83a 	sub	r16,r16,r2
 80038fc:	2089c83a 	sub	r4,r4,r2
 8003900:	308dc83a 	sub	r6,r6,r2
 8003904:	d9000a15 	stw	r4,40(sp)
 8003908:	d9801115 	stw	r6,68(sp)
 800390c:	d8801017 	ldw	r2,64(sp)
 8003910:	0080150e 	bge	zero,r2,8003968 <_dtoa_r+0x848>
 8003914:	d8c00b17 	ldw	r3,44(sp)
 8003918:	1805003a 	cmpeq	r2,r3,zero
 800391c:	1001c91e 	bne	r2,zero,8004044 <_dtoa_r+0xf24>
 8003920:	04800e0e 	bge	zero,r18,800395c <_dtoa_r+0x83c>
 8003924:	d9001617 	ldw	r4,88(sp)
 8003928:	980b883a 	mov	r5,r19
 800392c:	900d883a 	mov	r6,r18
 8003930:	80069f40 	call	80069f4 <__pow5mult>
 8003934:	d9001617 	ldw	r4,88(sp)
 8003938:	d9800717 	ldw	r6,28(sp)
 800393c:	100b883a 	mov	r5,r2
 8003940:	1027883a 	mov	r19,r2
 8003944:	80066380 	call	8006638 <__multiply>
 8003948:	d9001617 	ldw	r4,88(sp)
 800394c:	d9400717 	ldw	r5,28(sp)
 8003950:	1023883a 	mov	r17,r2
 8003954:	8005ba80 	call	8005ba8 <_Bfree>
 8003958:	dc400715 	stw	r17,28(sp)
 800395c:	d9001017 	ldw	r4,64(sp)
 8003960:	248dc83a 	sub	r6,r4,r18
 8003964:	30010e1e 	bne	r6,zero,8003da0 <_dtoa_r+0xc80>
 8003968:	d9001617 	ldw	r4,88(sp)
 800396c:	04400044 	movi	r17,1
 8003970:	880b883a 	mov	r5,r17
 8003974:	800688c0 	call	800688c <__i2b>
 8003978:	d9800917 	ldw	r6,36(sp)
 800397c:	1025883a 	mov	r18,r2
 8003980:	0180040e 	bge	zero,r6,8003994 <_dtoa_r+0x874>
 8003984:	d9001617 	ldw	r4,88(sp)
 8003988:	100b883a 	mov	r5,r2
 800398c:	80069f40 	call	80069f4 <__pow5mult>
 8003990:	1025883a 	mov	r18,r2
 8003994:	d8801717 	ldw	r2,92(sp)
 8003998:	8880f30e 	bge	r17,r2,8003d68 <_dtoa_r+0xc48>
 800399c:	0023883a 	mov	r17,zero
 80039a0:	d9800917 	ldw	r6,36(sp)
 80039a4:	30019e1e 	bne	r6,zero,8004020 <_dtoa_r+0xf00>
 80039a8:	00c00044 	movi	r3,1
 80039ac:	d9000a17 	ldw	r4,40(sp)
 80039b0:	20c5883a 	add	r2,r4,r3
 80039b4:	10c007cc 	andi	r3,r2,31
 80039b8:	1800841e 	bne	r3,zero,8003bcc <_dtoa_r+0xaac>
 80039bc:	00800704 	movi	r2,28
 80039c0:	d9000a17 	ldw	r4,40(sp)
 80039c4:	d9801117 	ldw	r6,68(sp)
 80039c8:	80a1883a 	add	r16,r16,r2
 80039cc:	2089883a 	add	r4,r4,r2
 80039d0:	308d883a 	add	r6,r6,r2
 80039d4:	d9000a15 	stw	r4,40(sp)
 80039d8:	d9801115 	stw	r6,68(sp)
 80039dc:	d8801117 	ldw	r2,68(sp)
 80039e0:	0080050e 	bge	zero,r2,80039f8 <_dtoa_r+0x8d8>
 80039e4:	d9400717 	ldw	r5,28(sp)
 80039e8:	d9001617 	ldw	r4,88(sp)
 80039ec:	100d883a 	mov	r6,r2
 80039f0:	80064ec0 	call	80064ec <__lshift>
 80039f4:	d8800715 	stw	r2,28(sp)
 80039f8:	d8c00a17 	ldw	r3,40(sp)
 80039fc:	00c0050e 	bge	zero,r3,8003a14 <_dtoa_r+0x8f4>
 8003a00:	d9001617 	ldw	r4,88(sp)
 8003a04:	900b883a 	mov	r5,r18
 8003a08:	180d883a 	mov	r6,r3
 8003a0c:	80064ec0 	call	80064ec <__lshift>
 8003a10:	1025883a 	mov	r18,r2
 8003a14:	d9000c17 	ldw	r4,48(sp)
 8003a18:	2005003a 	cmpeq	r2,r4,zero
 8003a1c:	10016f26 	beq	r2,zero,8003fdc <_dtoa_r+0xebc>
 8003a20:	d9000f17 	ldw	r4,60(sp)
 8003a24:	0102170e 	bge	zero,r4,8004284 <_dtoa_r+0x1164>
 8003a28:	d9800b17 	ldw	r6,44(sp)
 8003a2c:	3005003a 	cmpeq	r2,r6,zero
 8003a30:	1000881e 	bne	r2,zero,8003c54 <_dtoa_r+0xb34>
 8003a34:	0400050e 	bge	zero,r16,8003a4c <_dtoa_r+0x92c>
 8003a38:	d9001617 	ldw	r4,88(sp)
 8003a3c:	980b883a 	mov	r5,r19
 8003a40:	800d883a 	mov	r6,r16
 8003a44:	80064ec0 	call	80064ec <__lshift>
 8003a48:	1027883a 	mov	r19,r2
 8003a4c:	8804c03a 	cmpne	r2,r17,zero
 8003a50:	1002541e 	bne	r2,zero,80043a4 <_dtoa_r+0x1284>
 8003a54:	980b883a 	mov	r5,r19
 8003a58:	dd800517 	ldw	r22,20(sp)
 8003a5c:	dcc00615 	stw	r19,24(sp)
 8003a60:	a700004c 	andi	fp,r20,1
 8003a64:	2827883a 	mov	r19,r5
 8003a68:	d9000717 	ldw	r4,28(sp)
 8003a6c:	900b883a 	mov	r5,r18
 8003a70:	8002edc0 	call	8002edc <quorem>
 8003a74:	d9000717 	ldw	r4,28(sp)
 8003a78:	d9400617 	ldw	r5,24(sp)
 8003a7c:	1023883a 	mov	r17,r2
 8003a80:	8dc00c04 	addi	r23,r17,48
 8003a84:	8005d040 	call	8005d04 <__mcmp>
 8003a88:	d9001617 	ldw	r4,88(sp)
 8003a8c:	900b883a 	mov	r5,r18
 8003a90:	980d883a 	mov	r6,r19
 8003a94:	1029883a 	mov	r20,r2
 8003a98:	80063600 	call	8006360 <__mdiff>
 8003a9c:	102b883a 	mov	r21,r2
 8003aa0:	10800317 	ldw	r2,12(r2)
 8003aa4:	1001281e 	bne	r2,zero,8003f48 <_dtoa_r+0xe28>
 8003aa8:	d9000717 	ldw	r4,28(sp)
 8003aac:	a80b883a 	mov	r5,r21
 8003ab0:	8005d040 	call	8005d04 <__mcmp>
 8003ab4:	d9001617 	ldw	r4,88(sp)
 8003ab8:	1021883a 	mov	r16,r2
 8003abc:	a80b883a 	mov	r5,r21
 8003ac0:	8005ba80 	call	8005ba8 <_Bfree>
 8003ac4:	8000041e 	bne	r16,zero,8003ad8 <_dtoa_r+0x9b8>
 8003ac8:	d8801717 	ldw	r2,92(sp)
 8003acc:	1000021e 	bne	r2,zero,8003ad8 <_dtoa_r+0x9b8>
 8003ad0:	e004c03a 	cmpne	r2,fp,zero
 8003ad4:	10011726 	beq	r2,zero,8003f34 <_dtoa_r+0xe14>
 8003ad8:	a0010616 	blt	r20,zero,8003ef4 <_dtoa_r+0xdd4>
 8003adc:	a000041e 	bne	r20,zero,8003af0 <_dtoa_r+0x9d0>
 8003ae0:	d8c01717 	ldw	r3,92(sp)
 8003ae4:	1800021e 	bne	r3,zero,8003af0 <_dtoa_r+0x9d0>
 8003ae8:	e004c03a 	cmpne	r2,fp,zero
 8003aec:	10010126 	beq	r2,zero,8003ef4 <_dtoa_r+0xdd4>
 8003af0:	04023d16 	blt	zero,r16,80043e8 <_dtoa_r+0x12c8>
 8003af4:	b5c00005 	stb	r23,0(r22)
 8003af8:	d9800517 	ldw	r6,20(sp)
 8003afc:	d9000f17 	ldw	r4,60(sp)
 8003b00:	b5800044 	addi	r22,r22,1
 8003b04:	3105883a 	add	r2,r6,r4
 8003b08:	b0806526 	beq	r22,r2,8003ca0 <_dtoa_r+0xb80>
 8003b0c:	d9400717 	ldw	r5,28(sp)
 8003b10:	d9001617 	ldw	r4,88(sp)
 8003b14:	01800284 	movi	r6,10
 8003b18:	000f883a 	mov	r7,zero
 8003b1c:	80068c80 	call	80068c8 <__multadd>
 8003b20:	d8800715 	stw	r2,28(sp)
 8003b24:	d8800617 	ldw	r2,24(sp)
 8003b28:	14c10c26 	beq	r2,r19,8003f5c <_dtoa_r+0xe3c>
 8003b2c:	d9400617 	ldw	r5,24(sp)
 8003b30:	d9001617 	ldw	r4,88(sp)
 8003b34:	01800284 	movi	r6,10
 8003b38:	000f883a 	mov	r7,zero
 8003b3c:	80068c80 	call	80068c8 <__multadd>
 8003b40:	d9001617 	ldw	r4,88(sp)
 8003b44:	980b883a 	mov	r5,r19
 8003b48:	01800284 	movi	r6,10
 8003b4c:	000f883a 	mov	r7,zero
 8003b50:	d8800615 	stw	r2,24(sp)
 8003b54:	80068c80 	call	80068c8 <__multadd>
 8003b58:	1027883a 	mov	r19,r2
 8003b5c:	003fc206 	br	8003a68 <_dtoa_r+0x948>
 8003b60:	2445c83a 	sub	r2,r4,r17
 8003b64:	a088983a 	sll	r4,r20,r2
 8003b68:	003e4b06 	br	8003498 <_dtoa_r+0x378>
 8003b6c:	01bfffc4 	movi	r6,-1
 8003b70:	00800044 	movi	r2,1
 8003b74:	d9800e15 	stw	r6,56(sp)
 8003b78:	d9800f15 	stw	r6,60(sp)
 8003b7c:	d8800b15 	stw	r2,44(sp)
 8003b80:	d8c01617 	ldw	r3,88(sp)
 8003b84:	008005c4 	movi	r2,23
 8003b88:	18001115 	stw	zero,68(r3)
 8003b8c:	1580082e 	bgeu	r2,r22,8003bb0 <_dtoa_r+0xa90>
 8003b90:	00c00104 	movi	r3,4
 8003b94:	0009883a 	mov	r4,zero
 8003b98:	18c7883a 	add	r3,r3,r3
 8003b9c:	18800504 	addi	r2,r3,20
 8003ba0:	21000044 	addi	r4,r4,1
 8003ba4:	b0bffc2e 	bgeu	r22,r2,8003b98 <_dtoa_r+0xa78>
 8003ba8:	d9801617 	ldw	r6,88(sp)
 8003bac:	31001115 	stw	r4,68(r6)
 8003bb0:	dc000f17 	ldw	r16,60(sp)
 8003bb4:	003e4b06 	br	80034e4 <_dtoa_r+0x3c4>
 8003bb8:	d9801717 	ldw	r6,92(sp)
 8003bbc:	0023883a 	mov	r17,zero
 8003bc0:	31bfff04 	addi	r6,r6,-4
 8003bc4:	d9801715 	stw	r6,92(sp)
 8003bc8:	003df806 	br	80033ac <_dtoa_r+0x28c>
 8003bcc:	00800804 	movi	r2,32
 8003bd0:	10c9c83a 	sub	r4,r2,r3
 8003bd4:	00c00104 	movi	r3,4
 8003bd8:	19005a16 	blt	r3,r4,8003d44 <_dtoa_r+0xc24>
 8003bdc:	008000c4 	movi	r2,3
 8003be0:	113f7e16 	blt	r2,r4,80039dc <_dtoa_r+0x8bc>
 8003be4:	20800704 	addi	r2,r4,28
 8003be8:	003f7506 	br	80039c0 <_dtoa_r+0x8a0>
 8003bec:	d9801717 	ldw	r6,92(sp)
 8003bf0:	00800044 	movi	r2,1
 8003bf4:	1180a10e 	bge	r2,r6,8003e7c <_dtoa_r+0xd5c>
 8003bf8:	d9800f17 	ldw	r6,60(sp)
 8003bfc:	d8c01017 	ldw	r3,64(sp)
 8003c00:	30bfffc4 	addi	r2,r6,-1
 8003c04:	1881c616 	blt	r3,r2,8004320 <_dtoa_r+0x1200>
 8003c08:	18a5c83a 	sub	r18,r3,r2
 8003c0c:	d8800f17 	ldw	r2,60(sp)
 8003c10:	10026216 	blt	r2,zero,800459c <_dtoa_r+0x147c>
 8003c14:	dc001117 	ldw	r16,68(sp)
 8003c18:	1007883a 	mov	r3,r2
 8003c1c:	d9800a17 	ldw	r6,40(sp)
 8003c20:	d8801117 	ldw	r2,68(sp)
 8003c24:	d9001617 	ldw	r4,88(sp)
 8003c28:	30cd883a 	add	r6,r6,r3
 8003c2c:	10c5883a 	add	r2,r2,r3
 8003c30:	01400044 	movi	r5,1
 8003c34:	d9800a15 	stw	r6,40(sp)
 8003c38:	d8801115 	stw	r2,68(sp)
 8003c3c:	800688c0 	call	800688c <__i2b>
 8003c40:	1027883a 	mov	r19,r2
 8003c44:	003f2506 	br	80038dc <_dtoa_r+0x7bc>
 8003c48:	00c20074 	movhi	r3,2049
 8003c4c:	18c39604 	addi	r3,r3,3672
 8003c50:	003d6706 	br	80031f0 <_dtoa_r+0xd0>
 8003c54:	dd800517 	ldw	r22,20(sp)
 8003c58:	04000044 	movi	r16,1
 8003c5c:	00000706 	br	8003c7c <_dtoa_r+0xb5c>
 8003c60:	d9400717 	ldw	r5,28(sp)
 8003c64:	d9001617 	ldw	r4,88(sp)
 8003c68:	01800284 	movi	r6,10
 8003c6c:	000f883a 	mov	r7,zero
 8003c70:	80068c80 	call	80068c8 <__multadd>
 8003c74:	d8800715 	stw	r2,28(sp)
 8003c78:	84000044 	addi	r16,r16,1
 8003c7c:	d9000717 	ldw	r4,28(sp)
 8003c80:	900b883a 	mov	r5,r18
 8003c84:	8002edc0 	call	8002edc <quorem>
 8003c88:	15c00c04 	addi	r23,r2,48
 8003c8c:	b5c00005 	stb	r23,0(r22)
 8003c90:	d8c00f17 	ldw	r3,60(sp)
 8003c94:	b5800044 	addi	r22,r22,1
 8003c98:	80fff116 	blt	r16,r3,8003c60 <_dtoa_r+0xb40>
 8003c9c:	d8000615 	stw	zero,24(sp)
 8003ca0:	d9400717 	ldw	r5,28(sp)
 8003ca4:	d9001617 	ldw	r4,88(sp)
 8003ca8:	01800044 	movi	r6,1
 8003cac:	80064ec0 	call	80064ec <__lshift>
 8003cb0:	1009883a 	mov	r4,r2
 8003cb4:	900b883a 	mov	r5,r18
 8003cb8:	d8800715 	stw	r2,28(sp)
 8003cbc:	8005d040 	call	8005d04 <__mcmp>
 8003cc0:	00803c0e 	bge	zero,r2,8003db4 <_dtoa_r+0xc94>
 8003cc4:	b009883a 	mov	r4,r22
 8003cc8:	213fffc4 	addi	r4,r4,-1
 8003ccc:	21400003 	ldbu	r5,0(r4)
 8003cd0:	00800e44 	movi	r2,57
 8003cd4:	28c03fcc 	andi	r3,r5,255
 8003cd8:	18c0201c 	xori	r3,r3,128
 8003cdc:	18ffe004 	addi	r3,r3,-128
 8003ce0:	1881981e 	bne	r3,r2,8004344 <_dtoa_r+0x1224>
 8003ce4:	d9800517 	ldw	r6,20(sp)
 8003ce8:	21bff71e 	bne	r4,r6,8003cc8 <_dtoa_r+0xba8>
 8003cec:	d8800d17 	ldw	r2,52(sp)
 8003cf0:	37000044 	addi	fp,r6,1
 8003cf4:	10800044 	addi	r2,r2,1
 8003cf8:	d8800d15 	stw	r2,52(sp)
 8003cfc:	00800c44 	movi	r2,49
 8003d00:	30800005 	stb	r2,0(r6)
 8003d04:	d9001617 	ldw	r4,88(sp)
 8003d08:	900b883a 	mov	r5,r18
 8003d0c:	8005ba80 	call	8005ba8 <_Bfree>
 8003d10:	983ecd26 	beq	r19,zero,8003848 <_dtoa_r+0x728>
 8003d14:	d8c00617 	ldw	r3,24(sp)
 8003d18:	18000426 	beq	r3,zero,8003d2c <_dtoa_r+0xc0c>
 8003d1c:	1cc00326 	beq	r3,r19,8003d2c <_dtoa_r+0xc0c>
 8003d20:	d9001617 	ldw	r4,88(sp)
 8003d24:	180b883a 	mov	r5,r3
 8003d28:	8005ba80 	call	8005ba8 <_Bfree>
 8003d2c:	d9001617 	ldw	r4,88(sp)
 8003d30:	980b883a 	mov	r5,r19
 8003d34:	8005ba80 	call	8005ba8 <_Bfree>
 8003d38:	003ec306 	br	8003848 <_dtoa_r+0x728>
 8003d3c:	1805883a 	mov	r2,r3
 8003d40:	003eeb06 	br	80038f0 <_dtoa_r+0x7d0>
 8003d44:	d9800a17 	ldw	r6,40(sp)
 8003d48:	d8c01117 	ldw	r3,68(sp)
 8003d4c:	20bfff04 	addi	r2,r4,-4
 8003d50:	308d883a 	add	r6,r6,r2
 8003d54:	1887883a 	add	r3,r3,r2
 8003d58:	80a1883a 	add	r16,r16,r2
 8003d5c:	d9800a15 	stw	r6,40(sp)
 8003d60:	d8c01115 	stw	r3,68(sp)
 8003d64:	003f1d06 	br	80039dc <_dtoa_r+0x8bc>
 8003d68:	a03f0c1e 	bne	r20,zero,800399c <_dtoa_r+0x87c>
 8003d6c:	00800434 	movhi	r2,16
 8003d70:	10bfffc4 	addi	r2,r2,-1
 8003d74:	a884703a 	and	r2,r21,r2
 8003d78:	103f081e 	bne	r2,zero,800399c <_dtoa_r+0x87c>
 8003d7c:	a89ffc2c 	andhi	r2,r21,32752
 8003d80:	103f0626 	beq	r2,zero,800399c <_dtoa_r+0x87c>
 8003d84:	d8c01117 	ldw	r3,68(sp)
 8003d88:	d9000a17 	ldw	r4,40(sp)
 8003d8c:	18c00044 	addi	r3,r3,1
 8003d90:	21000044 	addi	r4,r4,1
 8003d94:	d8c01115 	stw	r3,68(sp)
 8003d98:	d9000a15 	stw	r4,40(sp)
 8003d9c:	003f0006 	br	80039a0 <_dtoa_r+0x880>
 8003da0:	d9400717 	ldw	r5,28(sp)
 8003da4:	d9001617 	ldw	r4,88(sp)
 8003da8:	80069f40 	call	80069f4 <__pow5mult>
 8003dac:	d8800715 	stw	r2,28(sp)
 8003db0:	003eed06 	br	8003968 <_dtoa_r+0x848>
 8003db4:	1000021e 	bne	r2,zero,8003dc0 <_dtoa_r+0xca0>
 8003db8:	b880004c 	andi	r2,r23,1
 8003dbc:	103fc11e 	bne	r2,zero,8003cc4 <_dtoa_r+0xba4>
 8003dc0:	b5bfffc4 	addi	r22,r22,-1
 8003dc4:	b0c00007 	ldb	r3,0(r22)
 8003dc8:	00800c04 	movi	r2,48
 8003dcc:	18bffc26 	beq	r3,r2,8003dc0 <_dtoa_r+0xca0>
 8003dd0:	b7000044 	addi	fp,r22,1
 8003dd4:	003fcb06 	br	8003d04 <_dtoa_r+0xbe4>
 8003dd8:	d9800d17 	ldw	r6,52(sp)
 8003ddc:	018fc83a 	sub	r7,zero,r6
 8003de0:	3801f726 	beq	r7,zero,80045c0 <_dtoa_r+0x14a0>
 8003de4:	398003cc 	andi	r6,r7,15
 8003de8:	300c90fa 	slli	r6,r6,3
 8003dec:	01420074 	movhi	r5,2049
 8003df0:	2943b404 	addi	r5,r5,3792
 8003df4:	d9001217 	ldw	r4,72(sp)
 8003df8:	314d883a 	add	r6,r6,r5
 8003dfc:	30c00117 	ldw	r3,4(r6)
 8003e00:	30800017 	ldw	r2,0(r6)
 8003e04:	d9401317 	ldw	r5,76(sp)
 8003e08:	3821d13a 	srai	r16,r7,4
 8003e0c:	100d883a 	mov	r6,r2
 8003e10:	180f883a 	mov	r7,r3
 8003e14:	8008b180 	call	8008b18 <__muldf3>
 8003e18:	1011883a 	mov	r8,r2
 8003e1c:	1813883a 	mov	r9,r3
 8003e20:	1029883a 	mov	r20,r2
 8003e24:	182b883a 	mov	r21,r3
 8003e28:	8001e526 	beq	r16,zero,80045c0 <_dtoa_r+0x14a0>
 8003e2c:	05800084 	movi	r22,2
 8003e30:	04420074 	movhi	r17,2049
 8003e34:	8c43e604 	addi	r17,r17,3992
 8003e38:	8080004c 	andi	r2,r16,1
 8003e3c:	1005003a 	cmpeq	r2,r2,zero
 8003e40:	1000081e 	bne	r2,zero,8003e64 <_dtoa_r+0xd44>
 8003e44:	89800017 	ldw	r6,0(r17)
 8003e48:	89c00117 	ldw	r7,4(r17)
 8003e4c:	480b883a 	mov	r5,r9
 8003e50:	4009883a 	mov	r4,r8
 8003e54:	8008b180 	call	8008b18 <__muldf3>
 8003e58:	1011883a 	mov	r8,r2
 8003e5c:	b5800044 	addi	r22,r22,1
 8003e60:	1813883a 	mov	r9,r3
 8003e64:	8021d07a 	srai	r16,r16,1
 8003e68:	8c400204 	addi	r17,r17,8
 8003e6c:	803ff21e 	bne	r16,zero,8003e38 <_dtoa_r+0xd18>
 8003e70:	4029883a 	mov	r20,r8
 8003e74:	482b883a 	mov	r21,r9
 8003e78:	003dca06 	br	80035a4 <_dtoa_r+0x484>
 8003e7c:	d9000817 	ldw	r4,32(sp)
 8003e80:	2005003a 	cmpeq	r2,r4,zero
 8003e84:	1001f61e 	bne	r2,zero,8004660 <_dtoa_r+0x1540>
 8003e88:	dc001117 	ldw	r16,68(sp)
 8003e8c:	dc801017 	ldw	r18,64(sp)
 8003e90:	18c10cc4 	addi	r3,r3,1075
 8003e94:	003f6106 	br	8003c1c <_dtoa_r+0xafc>
 8003e98:	d8000b15 	stw	zero,44(sp)
 8003e9c:	d9802617 	ldw	r6,152(sp)
 8003ea0:	d8c00d17 	ldw	r3,52(sp)
 8003ea4:	30800044 	addi	r2,r6,1
 8003ea8:	18ad883a 	add	r22,r3,r2
 8003eac:	b13fffc4 	addi	r4,r22,-1
 8003eb0:	d9000e15 	stw	r4,56(sp)
 8003eb4:	0581f60e 	bge	zero,r22,8004690 <_dtoa_r+0x1570>
 8003eb8:	dd800f15 	stw	r22,60(sp)
 8003ebc:	003f3006 	br	8003b80 <_dtoa_r+0xa60>
 8003ec0:	d8000b15 	stw	zero,44(sp)
 8003ec4:	d9002617 	ldw	r4,152(sp)
 8003ec8:	0101eb0e 	bge	zero,r4,8004678 <_dtoa_r+0x1558>
 8003ecc:	202d883a 	mov	r22,r4
 8003ed0:	d9000e15 	stw	r4,56(sp)
 8003ed4:	d9000f15 	stw	r4,60(sp)
 8003ed8:	003f2906 	br	8003b80 <_dtoa_r+0xa60>
 8003edc:	01800044 	movi	r6,1
 8003ee0:	d9800b15 	stw	r6,44(sp)
 8003ee4:	003ff706 	br	8003ec4 <_dtoa_r+0xda4>
 8003ee8:	01000044 	movi	r4,1
 8003eec:	d9000b15 	stw	r4,44(sp)
 8003ef0:	003fea06 	br	8003e9c <_dtoa_r+0xd7c>
 8003ef4:	04000c0e 	bge	zero,r16,8003f28 <_dtoa_r+0xe08>
 8003ef8:	d9400717 	ldw	r5,28(sp)
 8003efc:	d9001617 	ldw	r4,88(sp)
 8003f00:	01800044 	movi	r6,1
 8003f04:	80064ec0 	call	80064ec <__lshift>
 8003f08:	1009883a 	mov	r4,r2
 8003f0c:	900b883a 	mov	r5,r18
 8003f10:	d8800715 	stw	r2,28(sp)
 8003f14:	8005d040 	call	8005d04 <__mcmp>
 8003f18:	0081e00e 	bge	zero,r2,800469c <_dtoa_r+0x157c>
 8003f1c:	bdc00044 	addi	r23,r23,1
 8003f20:	00800e84 	movi	r2,58
 8003f24:	b881a226 	beq	r23,r2,80045b0 <_dtoa_r+0x1490>
 8003f28:	b7000044 	addi	fp,r22,1
 8003f2c:	b5c00005 	stb	r23,0(r22)
 8003f30:	003f7406 	br	8003d04 <_dtoa_r+0xbe4>
 8003f34:	00800e44 	movi	r2,57
 8003f38:	b8819d26 	beq	r23,r2,80045b0 <_dtoa_r+0x1490>
 8003f3c:	053ffa0e 	bge	zero,r20,8003f28 <_dtoa_r+0xe08>
 8003f40:	8dc00c44 	addi	r23,r17,49
 8003f44:	003ff806 	br	8003f28 <_dtoa_r+0xe08>
 8003f48:	d9001617 	ldw	r4,88(sp)
 8003f4c:	a80b883a 	mov	r5,r21
 8003f50:	04000044 	movi	r16,1
 8003f54:	8005ba80 	call	8005ba8 <_Bfree>
 8003f58:	003edf06 	br	8003ad8 <_dtoa_r+0x9b8>
 8003f5c:	d9001617 	ldw	r4,88(sp)
 8003f60:	980b883a 	mov	r5,r19
 8003f64:	01800284 	movi	r6,10
 8003f68:	000f883a 	mov	r7,zero
 8003f6c:	80068c80 	call	80068c8 <__multadd>
 8003f70:	1027883a 	mov	r19,r2
 8003f74:	d8800615 	stw	r2,24(sp)
 8003f78:	003ebb06 	br	8003a68 <_dtoa_r+0x948>
 8003f7c:	d9801117 	ldw	r6,68(sp)
 8003f80:	d8800d17 	ldw	r2,52(sp)
 8003f84:	d8000915 	stw	zero,36(sp)
 8003f88:	308dc83a 	sub	r6,r6,r2
 8003f8c:	0087c83a 	sub	r3,zero,r2
 8003f90:	d9801115 	stw	r6,68(sp)
 8003f94:	d8c01015 	stw	r3,64(sp)
 8003f98:	003cfe06 	br	8003394 <_dtoa_r+0x274>
 8003f9c:	018dc83a 	sub	r6,zero,r6
 8003fa0:	d9801115 	stw	r6,68(sp)
 8003fa4:	d8000a15 	stw	zero,40(sp)
 8003fa8:	003cf306 	br	8003378 <_dtoa_r+0x258>
 8003fac:	d9000d17 	ldw	r4,52(sp)
 8003fb0:	80093dc0 	call	80093dc <__floatsidf>
 8003fb4:	880b883a 	mov	r5,r17
 8003fb8:	8009883a 	mov	r4,r16
 8003fbc:	180f883a 	mov	r7,r3
 8003fc0:	100d883a 	mov	r6,r2
 8003fc4:	80091bc0 	call	80091bc <__nedf2>
 8003fc8:	103ce126 	beq	r2,zero,8003350 <_dtoa_r+0x230>
 8003fcc:	d9800d17 	ldw	r6,52(sp)
 8003fd0:	31bfffc4 	addi	r6,r6,-1
 8003fd4:	d9800d15 	stw	r6,52(sp)
 8003fd8:	003cdd06 	br	8003350 <_dtoa_r+0x230>
 8003fdc:	d9000717 	ldw	r4,28(sp)
 8003fe0:	900b883a 	mov	r5,r18
 8003fe4:	8005d040 	call	8005d04 <__mcmp>
 8003fe8:	103e8d0e 	bge	r2,zero,8003a20 <_dtoa_r+0x900>
 8003fec:	d9400717 	ldw	r5,28(sp)
 8003ff0:	d9001617 	ldw	r4,88(sp)
 8003ff4:	01800284 	movi	r6,10
 8003ff8:	000f883a 	mov	r7,zero
 8003ffc:	80068c80 	call	80068c8 <__multadd>
 8004000:	d9800d17 	ldw	r6,52(sp)
 8004004:	d8800715 	stw	r2,28(sp)
 8004008:	31bfffc4 	addi	r6,r6,-1
 800400c:	d9800d15 	stw	r6,52(sp)
 8004010:	b001a71e 	bne	r22,zero,80046b0 <_dtoa_r+0x1590>
 8004014:	d8800e17 	ldw	r2,56(sp)
 8004018:	d8800f15 	stw	r2,60(sp)
 800401c:	003e8006 	br	8003a20 <_dtoa_r+0x900>
 8004020:	90800417 	ldw	r2,16(r18)
 8004024:	1085883a 	add	r2,r2,r2
 8004028:	1085883a 	add	r2,r2,r2
 800402c:	1485883a 	add	r2,r2,r18
 8004030:	11000417 	ldw	r4,16(r2)
 8004034:	8005bd00 	call	8005bd0 <__hi0bits>
 8004038:	00c00804 	movi	r3,32
 800403c:	1887c83a 	sub	r3,r3,r2
 8004040:	003e5a06 	br	80039ac <_dtoa_r+0x88c>
 8004044:	d9400717 	ldw	r5,28(sp)
 8004048:	d9801017 	ldw	r6,64(sp)
 800404c:	d9001617 	ldw	r4,88(sp)
 8004050:	80069f40 	call	80069f4 <__pow5mult>
 8004054:	d8800715 	stw	r2,28(sp)
 8004058:	003e4306 	br	8003968 <_dtoa_r+0x848>
 800405c:	d9800f17 	ldw	r6,60(sp)
 8004060:	d8800d17 	ldw	r2,52(sp)
 8004064:	d9800315 	stw	r6,12(sp)
 8004068:	d8800415 	stw	r2,16(sp)
 800406c:	d8c00b17 	ldw	r3,44(sp)
 8004070:	1805003a 	cmpeq	r2,r3,zero
 8004074:	1000e21e 	bne	r2,zero,8004400 <_dtoa_r+0x12e0>
 8004078:	d9000317 	ldw	r4,12(sp)
 800407c:	0005883a 	mov	r2,zero
 8004080:	00cff834 	movhi	r3,16352
 8004084:	200c90fa 	slli	r6,r4,3
 8004088:	01020074 	movhi	r4,2049
 800408c:	2103b404 	addi	r4,r4,3792
 8004090:	180b883a 	mov	r5,r3
 8004094:	310d883a 	add	r6,r6,r4
 8004098:	327fff17 	ldw	r9,-4(r6)
 800409c:	323ffe17 	ldw	r8,-8(r6)
 80040a0:	1009883a 	mov	r4,r2
 80040a4:	480f883a 	mov	r7,r9
 80040a8:	400d883a 	mov	r6,r8
 80040ac:	8008edc0 	call	8008edc <__divdf3>
 80040b0:	180b883a 	mov	r5,r3
 80040b4:	b00d883a 	mov	r6,r22
 80040b8:	b80f883a 	mov	r7,r23
 80040bc:	1009883a 	mov	r4,r2
 80040c0:	8008a240 	call	8008a24 <__subdf3>
 80040c4:	a80b883a 	mov	r5,r21
 80040c8:	a009883a 	mov	r4,r20
 80040cc:	d8c01915 	stw	r3,100(sp)
 80040d0:	d8801815 	stw	r2,96(sp)
 80040d4:	80094d40 	call	80094d4 <__fixdfsi>
 80040d8:	1009883a 	mov	r4,r2
 80040dc:	1027883a 	mov	r19,r2
 80040e0:	80093dc0 	call	80093dc <__floatsidf>
 80040e4:	a80b883a 	mov	r5,r21
 80040e8:	a009883a 	mov	r4,r20
 80040ec:	180f883a 	mov	r7,r3
 80040f0:	100d883a 	mov	r6,r2
 80040f4:	8008a240 	call	8008a24 <__subdf3>
 80040f8:	d9801817 	ldw	r6,96(sp)
 80040fc:	1823883a 	mov	r17,r3
 8004100:	d8801415 	stw	r2,80(sp)
 8004104:	302d883a 	mov	r22,r6
 8004108:	d9800517 	ldw	r6,20(sp)
 800410c:	9cc00c04 	addi	r19,r19,48
 8004110:	dc401515 	stw	r17,84(sp)
 8004114:	d8c01917 	ldw	r3,100(sp)
 8004118:	34c00005 	stb	r19,0(r6)
 800411c:	d8800517 	ldw	r2,20(sp)
 8004120:	d9401917 	ldw	r5,100(sp)
 8004124:	d9801417 	ldw	r6,80(sp)
 8004128:	b009883a 	mov	r4,r22
 800412c:	880f883a 	mov	r7,r17
 8004130:	182f883a 	mov	r23,r3
 8004134:	17000044 	addi	fp,r2,1
 8004138:	80092440 	call	8009244 <__gtdf2>
 800413c:	00804e16 	blt	zero,r2,8004278 <_dtoa_r+0x1158>
 8004140:	d9801417 	ldw	r6,80(sp)
 8004144:	0005883a 	mov	r2,zero
 8004148:	00cffc34 	movhi	r3,16368
 800414c:	180b883a 	mov	r5,r3
 8004150:	880f883a 	mov	r7,r17
 8004154:	1009883a 	mov	r4,r2
 8004158:	8008a240 	call	8008a24 <__subdf3>
 800415c:	d9401917 	ldw	r5,100(sp)
 8004160:	180f883a 	mov	r7,r3
 8004164:	b009883a 	mov	r4,r22
 8004168:	100d883a 	mov	r6,r2
 800416c:	80092440 	call	8009244 <__gtdf2>
 8004170:	00bda216 	blt	zero,r2,80037fc <_dtoa_r+0x6dc>
 8004174:	d8c00317 	ldw	r3,12(sp)
 8004178:	00800044 	movi	r2,1
 800417c:	10c01216 	blt	r2,r3,80041c8 <_dtoa_r+0x10a8>
 8004180:	003d4506 	br	8003698 <_dtoa_r+0x578>
 8004184:	d9801417 	ldw	r6,80(sp)
 8004188:	0005883a 	mov	r2,zero
 800418c:	00cffc34 	movhi	r3,16368
 8004190:	180b883a 	mov	r5,r3
 8004194:	880f883a 	mov	r7,r17
 8004198:	1009883a 	mov	r4,r2
 800419c:	8008a240 	call	8008a24 <__subdf3>
 80041a0:	d9c01b17 	ldw	r7,108(sp)
 80041a4:	180b883a 	mov	r5,r3
 80041a8:	1009883a 	mov	r4,r2
 80041ac:	b00d883a 	mov	r6,r22
 80041b0:	80093540 	call	8009354 <__ltdf2>
 80041b4:	103d9116 	blt	r2,zero,80037fc <_dtoa_r+0x6dc>
 80041b8:	d9800517 	ldw	r6,20(sp)
 80041bc:	d9000317 	ldw	r4,12(sp)
 80041c0:	3105883a 	add	r2,r6,r4
 80041c4:	e0bd3426 	beq	fp,r2,8003698 <_dtoa_r+0x578>
 80041c8:	04500934 	movhi	r17,16420
 80041cc:	0021883a 	mov	r16,zero
 80041d0:	b80b883a 	mov	r5,r23
 80041d4:	b009883a 	mov	r4,r22
 80041d8:	800d883a 	mov	r6,r16
 80041dc:	880f883a 	mov	r7,r17
 80041e0:	8008b180 	call	8008b18 <__muldf3>
 80041e4:	d9401517 	ldw	r5,84(sp)
 80041e8:	d9001417 	ldw	r4,80(sp)
 80041ec:	880f883a 	mov	r7,r17
 80041f0:	000d883a 	mov	r6,zero
 80041f4:	d8801a15 	stw	r2,104(sp)
 80041f8:	d8c01b15 	stw	r3,108(sp)
 80041fc:	8008b180 	call	8008b18 <__muldf3>
 8004200:	180b883a 	mov	r5,r3
 8004204:	1009883a 	mov	r4,r2
 8004208:	1823883a 	mov	r17,r3
 800420c:	1021883a 	mov	r16,r2
 8004210:	80094d40 	call	80094d4 <__fixdfsi>
 8004214:	1009883a 	mov	r4,r2
 8004218:	102b883a 	mov	r21,r2
 800421c:	80093dc0 	call	80093dc <__floatsidf>
 8004220:	880b883a 	mov	r5,r17
 8004224:	8009883a 	mov	r4,r16
 8004228:	180f883a 	mov	r7,r3
 800422c:	100d883a 	mov	r6,r2
 8004230:	8008a240 	call	8008a24 <__subdf3>
 8004234:	1021883a 	mov	r16,r2
 8004238:	d9001b17 	ldw	r4,108(sp)
 800423c:	1823883a 	mov	r17,r3
 8004240:	dc001415 	stw	r16,80(sp)
 8004244:	ad400c04 	addi	r21,r21,48
 8004248:	dc401515 	stw	r17,84(sp)
 800424c:	d8801a17 	ldw	r2,104(sp)
 8004250:	e5400005 	stb	r21,0(fp)
 8004254:	202f883a 	mov	r23,r4
 8004258:	d9c01b17 	ldw	r7,108(sp)
 800425c:	d9001417 	ldw	r4,80(sp)
 8004260:	880b883a 	mov	r5,r17
 8004264:	100d883a 	mov	r6,r2
 8004268:	102d883a 	mov	r22,r2
 800426c:	e7000044 	addi	fp,fp,1
 8004270:	80093540 	call	8009354 <__ltdf2>
 8004274:	103fc30e 	bge	r2,zero,8004184 <_dtoa_r+0x1064>
 8004278:	d9000417 	ldw	r4,16(sp)
 800427c:	d9000d15 	stw	r4,52(sp)
 8004280:	003d7106 	br	8003848 <_dtoa_r+0x728>
 8004284:	d9801717 	ldw	r6,92(sp)
 8004288:	00800084 	movi	r2,2
 800428c:	11bde60e 	bge	r2,r6,8003a28 <_dtoa_r+0x908>
 8004290:	203cfb1e 	bne	r4,zero,8003680 <_dtoa_r+0x560>
 8004294:	d9001617 	ldw	r4,88(sp)
 8004298:	900b883a 	mov	r5,r18
 800429c:	01800144 	movi	r6,5
 80042a0:	000f883a 	mov	r7,zero
 80042a4:	80068c80 	call	80068c8 <__multadd>
 80042a8:	d9000717 	ldw	r4,28(sp)
 80042ac:	100b883a 	mov	r5,r2
 80042b0:	1025883a 	mov	r18,r2
 80042b4:	8005d040 	call	8005d04 <__mcmp>
 80042b8:	00bcf10e 	bge	zero,r2,8003680 <_dtoa_r+0x560>
 80042bc:	d8c00d17 	ldw	r3,52(sp)
 80042c0:	d9000517 	ldw	r4,20(sp)
 80042c4:	d8000615 	stw	zero,24(sp)
 80042c8:	18c00044 	addi	r3,r3,1
 80042cc:	d8c00d15 	stw	r3,52(sp)
 80042d0:	00800c44 	movi	r2,49
 80042d4:	27000044 	addi	fp,r4,1
 80042d8:	20800005 	stb	r2,0(r4)
 80042dc:	003e8906 	br	8003d04 <_dtoa_r+0xbe4>
 80042e0:	d8c00517 	ldw	r3,20(sp)
 80042e4:	003bc206 	br	80031f0 <_dtoa_r+0xd0>
 80042e8:	01820074 	movhi	r6,2049
 80042ec:	3183e604 	addi	r6,r6,3992
 80042f0:	30c00917 	ldw	r3,36(r6)
 80042f4:	30800817 	ldw	r2,32(r6)
 80042f8:	d9001217 	ldw	r4,72(sp)
 80042fc:	d9401317 	ldw	r5,76(sp)
 8004300:	180f883a 	mov	r7,r3
 8004304:	100d883a 	mov	r6,r2
 8004308:	8008edc0 	call	8008edc <__divdf3>
 800430c:	948003cc 	andi	r18,r18,15
 8004310:	058000c4 	movi	r22,3
 8004314:	1029883a 	mov	r20,r2
 8004318:	182b883a 	mov	r21,r3
 800431c:	003c8906 	br	8003544 <_dtoa_r+0x424>
 8004320:	d9001017 	ldw	r4,64(sp)
 8004324:	d9800917 	ldw	r6,36(sp)
 8004328:	0025883a 	mov	r18,zero
 800432c:	1105c83a 	sub	r2,r2,r4
 8004330:	2089883a 	add	r4,r4,r2
 8004334:	308d883a 	add	r6,r6,r2
 8004338:	d9001015 	stw	r4,64(sp)
 800433c:	d9800915 	stw	r6,36(sp)
 8004340:	003e3206 	br	8003c0c <_dtoa_r+0xaec>
 8004344:	28800044 	addi	r2,r5,1
 8004348:	27000044 	addi	fp,r4,1
 800434c:	20800005 	stb	r2,0(r4)
 8004350:	003e6c06 	br	8003d04 <_dtoa_r+0xbe4>
 8004354:	d8800f17 	ldw	r2,60(sp)
 8004358:	00bce016 	blt	zero,r2,80036dc <_dtoa_r+0x5bc>
 800435c:	d9800f17 	ldw	r6,60(sp)
 8004360:	303cc51e 	bne	r6,zero,8003678 <_dtoa_r+0x558>
 8004364:	0005883a 	mov	r2,zero
 8004368:	00d00534 	movhi	r3,16404
 800436c:	980b883a 	mov	r5,r19
 8004370:	180f883a 	mov	r7,r3
 8004374:	9009883a 	mov	r4,r18
 8004378:	100d883a 	mov	r6,r2
 800437c:	8008b180 	call	8008b18 <__muldf3>
 8004380:	180b883a 	mov	r5,r3
 8004384:	a80f883a 	mov	r7,r21
 8004388:	1009883a 	mov	r4,r2
 800438c:	a00d883a 	mov	r6,r20
 8004390:	80092cc0 	call	80092cc <__gedf2>
 8004394:	103cb80e 	bge	r2,zero,8003678 <_dtoa_r+0x558>
 8004398:	0027883a 	mov	r19,zero
 800439c:	0025883a 	mov	r18,zero
 80043a0:	003fc606 	br	80042bc <_dtoa_r+0x119c>
 80043a4:	99400117 	ldw	r5,4(r19)
 80043a8:	d9001617 	ldw	r4,88(sp)
 80043ac:	80061280 	call	8006128 <_Balloc>
 80043b0:	99800417 	ldw	r6,16(r19)
 80043b4:	11000304 	addi	r4,r2,12
 80043b8:	99400304 	addi	r5,r19,12
 80043bc:	318d883a 	add	r6,r6,r6
 80043c0:	318d883a 	add	r6,r6,r6
 80043c4:	31800204 	addi	r6,r6,8
 80043c8:	1023883a 	mov	r17,r2
 80043cc:	80059900 	call	8005990 <memcpy>
 80043d0:	d9001617 	ldw	r4,88(sp)
 80043d4:	880b883a 	mov	r5,r17
 80043d8:	01800044 	movi	r6,1
 80043dc:	80064ec0 	call	80064ec <__lshift>
 80043e0:	100b883a 	mov	r5,r2
 80043e4:	003d9c06 	br	8003a58 <_dtoa_r+0x938>
 80043e8:	00800e44 	movi	r2,57
 80043ec:	b8807026 	beq	r23,r2,80045b0 <_dtoa_r+0x1490>
 80043f0:	b8800044 	addi	r2,r23,1
 80043f4:	b7000044 	addi	fp,r22,1
 80043f8:	b0800005 	stb	r2,0(r22)
 80043fc:	003e4106 	br	8003d04 <_dtoa_r+0xbe4>
 8004400:	d8800317 	ldw	r2,12(sp)
 8004404:	01820074 	movhi	r6,2049
 8004408:	3183b404 	addi	r6,r6,3792
 800440c:	b009883a 	mov	r4,r22
 8004410:	100e90fa 	slli	r7,r2,3
 8004414:	b80b883a 	mov	r5,r23
 8004418:	398f883a 	add	r7,r7,r6
 800441c:	38bffe17 	ldw	r2,-8(r7)
 8004420:	d9800517 	ldw	r6,20(sp)
 8004424:	38ffff17 	ldw	r3,-4(r7)
 8004428:	37000044 	addi	fp,r6,1
 800442c:	180f883a 	mov	r7,r3
 8004430:	100d883a 	mov	r6,r2
 8004434:	8008b180 	call	8008b18 <__muldf3>
 8004438:	a80b883a 	mov	r5,r21
 800443c:	a009883a 	mov	r4,r20
 8004440:	182f883a 	mov	r23,r3
 8004444:	102d883a 	mov	r22,r2
 8004448:	80094d40 	call	80094d4 <__fixdfsi>
 800444c:	1009883a 	mov	r4,r2
 8004450:	1027883a 	mov	r19,r2
 8004454:	80093dc0 	call	80093dc <__floatsidf>
 8004458:	a80b883a 	mov	r5,r21
 800445c:	a009883a 	mov	r4,r20
 8004460:	180f883a 	mov	r7,r3
 8004464:	100d883a 	mov	r6,r2
 8004468:	8008a240 	call	8008a24 <__subdf3>
 800446c:	180b883a 	mov	r5,r3
 8004470:	d8c00517 	ldw	r3,20(sp)
 8004474:	9cc00c04 	addi	r19,r19,48
 8004478:	1009883a 	mov	r4,r2
 800447c:	1cc00005 	stb	r19,0(r3)
 8004480:	2021883a 	mov	r16,r4
 8004484:	d9000317 	ldw	r4,12(sp)
 8004488:	00800044 	movi	r2,1
 800448c:	2823883a 	mov	r17,r5
 8004490:	20802226 	beq	r4,r2,800451c <_dtoa_r+0x13fc>
 8004494:	1029883a 	mov	r20,r2
 8004498:	0005883a 	mov	r2,zero
 800449c:	00d00934 	movhi	r3,16420
 80044a0:	180f883a 	mov	r7,r3
 80044a4:	100d883a 	mov	r6,r2
 80044a8:	880b883a 	mov	r5,r17
 80044ac:	8009883a 	mov	r4,r16
 80044b0:	8008b180 	call	8008b18 <__muldf3>
 80044b4:	180b883a 	mov	r5,r3
 80044b8:	1009883a 	mov	r4,r2
 80044bc:	1823883a 	mov	r17,r3
 80044c0:	1021883a 	mov	r16,r2
 80044c4:	80094d40 	call	80094d4 <__fixdfsi>
 80044c8:	1009883a 	mov	r4,r2
 80044cc:	102b883a 	mov	r21,r2
 80044d0:	80093dc0 	call	80093dc <__floatsidf>
 80044d4:	880b883a 	mov	r5,r17
 80044d8:	8009883a 	mov	r4,r16
 80044dc:	180f883a 	mov	r7,r3
 80044e0:	100d883a 	mov	r6,r2
 80044e4:	8008a240 	call	8008a24 <__subdf3>
 80044e8:	180b883a 	mov	r5,r3
 80044ec:	d8c00517 	ldw	r3,20(sp)
 80044f0:	1009883a 	mov	r4,r2
 80044f4:	ad400c04 	addi	r21,r21,48
 80044f8:	1d05883a 	add	r2,r3,r20
 80044fc:	15400005 	stb	r21,0(r2)
 8004500:	2021883a 	mov	r16,r4
 8004504:	d9000317 	ldw	r4,12(sp)
 8004508:	a5000044 	addi	r20,r20,1
 800450c:	2823883a 	mov	r17,r5
 8004510:	a13fe11e 	bne	r20,r4,8004498 <_dtoa_r+0x1378>
 8004514:	e505883a 	add	r2,fp,r20
 8004518:	173fffc4 	addi	fp,r2,-1
 800451c:	0025883a 	mov	r18,zero
 8004520:	04cff834 	movhi	r19,16352
 8004524:	b009883a 	mov	r4,r22
 8004528:	b80b883a 	mov	r5,r23
 800452c:	900d883a 	mov	r6,r18
 8004530:	980f883a 	mov	r7,r19
 8004534:	8008aa40 	call	8008aa4 <__adddf3>
 8004538:	180b883a 	mov	r5,r3
 800453c:	1009883a 	mov	r4,r2
 8004540:	800d883a 	mov	r6,r16
 8004544:	880f883a 	mov	r7,r17
 8004548:	80093540 	call	8009354 <__ltdf2>
 800454c:	103cab16 	blt	r2,zero,80037fc <_dtoa_r+0x6dc>
 8004550:	0009883a 	mov	r4,zero
 8004554:	980b883a 	mov	r5,r19
 8004558:	b80f883a 	mov	r7,r23
 800455c:	b00d883a 	mov	r6,r22
 8004560:	8008a240 	call	8008a24 <__subdf3>
 8004564:	180b883a 	mov	r5,r3
 8004568:	880f883a 	mov	r7,r17
 800456c:	1009883a 	mov	r4,r2
 8004570:	800d883a 	mov	r6,r16
 8004574:	80092440 	call	8009244 <__gtdf2>
 8004578:	00bc470e 	bge	zero,r2,8003698 <_dtoa_r+0x578>
 800457c:	00c00c04 	movi	r3,48
 8004580:	e73fffc4 	addi	fp,fp,-1
 8004584:	e0800007 	ldb	r2,0(fp)
 8004588:	10fffd26 	beq	r2,r3,8004580 <_dtoa_r+0x1460>
 800458c:	d9800417 	ldw	r6,16(sp)
 8004590:	e7000044 	addi	fp,fp,1
 8004594:	d9800d15 	stw	r6,52(sp)
 8004598:	003cab06 	br	8003848 <_dtoa_r+0x728>
 800459c:	d8c00f17 	ldw	r3,60(sp)
 80045a0:	d9001117 	ldw	r4,68(sp)
 80045a4:	20e1c83a 	sub	r16,r4,r3
 80045a8:	0007883a 	mov	r3,zero
 80045ac:	003d9b06 	br	8003c1c <_dtoa_r+0xafc>
 80045b0:	00800e44 	movi	r2,57
 80045b4:	b0800005 	stb	r2,0(r22)
 80045b8:	b5800044 	addi	r22,r22,1
 80045bc:	003dc106 	br	8003cc4 <_dtoa_r+0xba4>
 80045c0:	05800084 	movi	r22,2
 80045c4:	003bf706 	br	80035a4 <_dtoa_r+0x484>
 80045c8:	d9000f17 	ldw	r4,60(sp)
 80045cc:	013c000e 	bge	zero,r4,80035d0 <_dtoa_r+0x4b0>
 80045d0:	d9800e17 	ldw	r6,56(sp)
 80045d4:	01bc300e 	bge	zero,r6,8003698 <_dtoa_r+0x578>
 80045d8:	0005883a 	mov	r2,zero
 80045dc:	00d00934 	movhi	r3,16420
 80045e0:	a80b883a 	mov	r5,r21
 80045e4:	180f883a 	mov	r7,r3
 80045e8:	a009883a 	mov	r4,r20
 80045ec:	100d883a 	mov	r6,r2
 80045f0:	8008b180 	call	8008b18 <__muldf3>
 80045f4:	b1000044 	addi	r4,r22,1
 80045f8:	1021883a 	mov	r16,r2
 80045fc:	1823883a 	mov	r17,r3
 8004600:	80093dc0 	call	80093dc <__floatsidf>
 8004604:	880b883a 	mov	r5,r17
 8004608:	8009883a 	mov	r4,r16
 800460c:	180f883a 	mov	r7,r3
 8004610:	100d883a 	mov	r6,r2
 8004614:	8008b180 	call	8008b18 <__muldf3>
 8004618:	0011883a 	mov	r8,zero
 800461c:	02500734 	movhi	r9,16412
 8004620:	180b883a 	mov	r5,r3
 8004624:	480f883a 	mov	r7,r9
 8004628:	1009883a 	mov	r4,r2
 800462c:	400d883a 	mov	r6,r8
 8004630:	8008aa40 	call	8008aa4 <__adddf3>
 8004634:	102d883a 	mov	r22,r2
 8004638:	00bf3034 	movhi	r2,64704
 800463c:	10ef883a 	add	r23,r2,r3
 8004640:	d8800d17 	ldw	r2,52(sp)
 8004644:	d8c00e17 	ldw	r3,56(sp)
 8004648:	8029883a 	mov	r20,r16
 800464c:	10bfffc4 	addi	r2,r2,-1
 8004650:	882b883a 	mov	r21,r17
 8004654:	d8800415 	stw	r2,16(sp)
 8004658:	d8c00315 	stw	r3,12(sp)
 800465c:	003e8306 	br	800406c <_dtoa_r+0xf4c>
 8004660:	d8800117 	ldw	r2,4(sp)
 8004664:	dc001117 	ldw	r16,68(sp)
 8004668:	dc801017 	ldw	r18,64(sp)
 800466c:	00c00d84 	movi	r3,54
 8004670:	1887c83a 	sub	r3,r3,r2
 8004674:	003d6906 	br	8003c1c <_dtoa_r+0xafc>
 8004678:	01800044 	movi	r6,1
 800467c:	3021883a 	mov	r16,r6
 8004680:	d9800f15 	stw	r6,60(sp)
 8004684:	d9802615 	stw	r6,152(sp)
 8004688:	d9800e15 	stw	r6,56(sp)
 800468c:	003b9306 	br	80034dc <_dtoa_r+0x3bc>
 8004690:	b021883a 	mov	r16,r22
 8004694:	dd800f15 	stw	r22,60(sp)
 8004698:	003b9006 	br	80034dc <_dtoa_r+0x3bc>
 800469c:	103e221e 	bne	r2,zero,8003f28 <_dtoa_r+0xe08>
 80046a0:	b880004c 	andi	r2,r23,1
 80046a4:	1005003a 	cmpeq	r2,r2,zero
 80046a8:	103e1f1e 	bne	r2,zero,8003f28 <_dtoa_r+0xe08>
 80046ac:	003e1b06 	br	8003f1c <_dtoa_r+0xdfc>
 80046b0:	d9001617 	ldw	r4,88(sp)
 80046b4:	980b883a 	mov	r5,r19
 80046b8:	01800284 	movi	r6,10
 80046bc:	000f883a 	mov	r7,zero
 80046c0:	80068c80 	call	80068c8 <__multadd>
 80046c4:	d8c00e17 	ldw	r3,56(sp)
 80046c8:	1027883a 	mov	r19,r2
 80046cc:	d8c00f15 	stw	r3,60(sp)
 80046d0:	003cd306 	br	8003a20 <_dtoa_r+0x900>

080046d4 <_fflush_r>:
 80046d4:	defffb04 	addi	sp,sp,-20
 80046d8:	dcc00315 	stw	r19,12(sp)
 80046dc:	dc800215 	stw	r18,8(sp)
 80046e0:	dfc00415 	stw	ra,16(sp)
 80046e4:	dc400115 	stw	r17,4(sp)
 80046e8:	dc000015 	stw	r16,0(sp)
 80046ec:	2027883a 	mov	r19,r4
 80046f0:	2825883a 	mov	r18,r5
 80046f4:	20000226 	beq	r4,zero,8004700 <_fflush_r+0x2c>
 80046f8:	20800e17 	ldw	r2,56(r4)
 80046fc:	10005626 	beq	r2,zero,8004858 <_fflush_r+0x184>
 8004700:	9100030b 	ldhu	r4,12(r18)
 8004704:	20ffffcc 	andi	r3,r4,65535
 8004708:	18e0001c 	xori	r3,r3,32768
 800470c:	18e00004 	addi	r3,r3,-32768
 8004710:	1880020c 	andi	r2,r3,8
 8004714:	1000261e 	bne	r2,zero,80047b0 <_fflush_r+0xdc>
 8004718:	90c00117 	ldw	r3,4(r18)
 800471c:	20820014 	ori	r2,r4,2048
 8004720:	9080030d 	sth	r2,12(r18)
 8004724:	1009883a 	mov	r4,r2
 8004728:	00c0400e 	bge	zero,r3,800482c <_fflush_r+0x158>
 800472c:	92000a17 	ldw	r8,40(r18)
 8004730:	40004026 	beq	r8,zero,8004834 <_fflush_r+0x160>
 8004734:	2084000c 	andi	r2,r4,4096
 8004738:	10005326 	beq	r2,zero,8004888 <_fflush_r+0x1b4>
 800473c:	94001417 	ldw	r16,80(r18)
 8004740:	9080030b 	ldhu	r2,12(r18)
 8004744:	1080010c 	andi	r2,r2,4
 8004748:	1000481e 	bne	r2,zero,800486c <_fflush_r+0x198>
 800474c:	91400717 	ldw	r5,28(r18)
 8004750:	9809883a 	mov	r4,r19
 8004754:	800d883a 	mov	r6,r16
 8004758:	000f883a 	mov	r7,zero
 800475c:	403ee83a 	callr	r8
 8004760:	8080261e 	bne	r16,r2,80047fc <_fflush_r+0x128>
 8004764:	9080030b 	ldhu	r2,12(r18)
 8004768:	91000417 	ldw	r4,16(r18)
 800476c:	90000115 	stw	zero,4(r18)
 8004770:	10bdffcc 	andi	r2,r2,63487
 8004774:	10ffffcc 	andi	r3,r2,65535
 8004778:	18c4000c 	andi	r3,r3,4096
 800477c:	9080030d 	sth	r2,12(r18)
 8004780:	91000015 	stw	r4,0(r18)
 8004784:	18002b26 	beq	r3,zero,8004834 <_fflush_r+0x160>
 8004788:	0007883a 	mov	r3,zero
 800478c:	1805883a 	mov	r2,r3
 8004790:	94001415 	stw	r16,80(r18)
 8004794:	dfc00417 	ldw	ra,16(sp)
 8004798:	dcc00317 	ldw	r19,12(sp)
 800479c:	dc800217 	ldw	r18,8(sp)
 80047a0:	dc400117 	ldw	r17,4(sp)
 80047a4:	dc000017 	ldw	r16,0(sp)
 80047a8:	dec00504 	addi	sp,sp,20
 80047ac:	f800283a 	ret
 80047b0:	94400417 	ldw	r17,16(r18)
 80047b4:	88001f26 	beq	r17,zero,8004834 <_fflush_r+0x160>
 80047b8:	90800017 	ldw	r2,0(r18)
 80047bc:	18c000cc 	andi	r3,r3,3
 80047c0:	94400015 	stw	r17,0(r18)
 80047c4:	1461c83a 	sub	r16,r2,r17
 80047c8:	18002526 	beq	r3,zero,8004860 <_fflush_r+0x18c>
 80047cc:	0005883a 	mov	r2,zero
 80047d0:	90800215 	stw	r2,8(r18)
 80047d4:	0400170e 	bge	zero,r16,8004834 <_fflush_r+0x160>
 80047d8:	90c00917 	ldw	r3,36(r18)
 80047dc:	91400717 	ldw	r5,28(r18)
 80047e0:	880d883a 	mov	r6,r17
 80047e4:	800f883a 	mov	r7,r16
 80047e8:	9809883a 	mov	r4,r19
 80047ec:	183ee83a 	callr	r3
 80047f0:	88a3883a 	add	r17,r17,r2
 80047f4:	80a1c83a 	sub	r16,r16,r2
 80047f8:	00bff616 	blt	zero,r2,80047d4 <_fflush_r+0x100>
 80047fc:	9080030b 	ldhu	r2,12(r18)
 8004800:	00ffffc4 	movi	r3,-1
 8004804:	10801014 	ori	r2,r2,64
 8004808:	9080030d 	sth	r2,12(r18)
 800480c:	1805883a 	mov	r2,r3
 8004810:	dfc00417 	ldw	ra,16(sp)
 8004814:	dcc00317 	ldw	r19,12(sp)
 8004818:	dc800217 	ldw	r18,8(sp)
 800481c:	dc400117 	ldw	r17,4(sp)
 8004820:	dc000017 	ldw	r16,0(sp)
 8004824:	dec00504 	addi	sp,sp,20
 8004828:	f800283a 	ret
 800482c:	90800f17 	ldw	r2,60(r18)
 8004830:	00bfbe16 	blt	zero,r2,800472c <_fflush_r+0x58>
 8004834:	0007883a 	mov	r3,zero
 8004838:	1805883a 	mov	r2,r3
 800483c:	dfc00417 	ldw	ra,16(sp)
 8004840:	dcc00317 	ldw	r19,12(sp)
 8004844:	dc800217 	ldw	r18,8(sp)
 8004848:	dc400117 	ldw	r17,4(sp)
 800484c:	dc000017 	ldw	r16,0(sp)
 8004850:	dec00504 	addi	sp,sp,20
 8004854:	f800283a 	ret
 8004858:	800496c0 	call	800496c <__sinit>
 800485c:	003fa806 	br	8004700 <_fflush_r+0x2c>
 8004860:	90800517 	ldw	r2,20(r18)
 8004864:	90800215 	stw	r2,8(r18)
 8004868:	003fda06 	br	80047d4 <_fflush_r+0x100>
 800486c:	90800117 	ldw	r2,4(r18)
 8004870:	90c00c17 	ldw	r3,48(r18)
 8004874:	80a1c83a 	sub	r16,r16,r2
 8004878:	183fb426 	beq	r3,zero,800474c <_fflush_r+0x78>
 800487c:	90800f17 	ldw	r2,60(r18)
 8004880:	80a1c83a 	sub	r16,r16,r2
 8004884:	003fb106 	br	800474c <_fflush_r+0x78>
 8004888:	91400717 	ldw	r5,28(r18)
 800488c:	9809883a 	mov	r4,r19
 8004890:	000d883a 	mov	r6,zero
 8004894:	01c00044 	movi	r7,1
 8004898:	403ee83a 	callr	r8
 800489c:	1021883a 	mov	r16,r2
 80048a0:	00bfffc4 	movi	r2,-1
 80048a4:	80800226 	beq	r16,r2,80048b0 <_fflush_r+0x1dc>
 80048a8:	92000a17 	ldw	r8,40(r18)
 80048ac:	003fa406 	br	8004740 <_fflush_r+0x6c>
 80048b0:	98c00017 	ldw	r3,0(r19)
 80048b4:	00800744 	movi	r2,29
 80048b8:	18bfde26 	beq	r3,r2,8004834 <_fflush_r+0x160>
 80048bc:	9080030b 	ldhu	r2,12(r18)
 80048c0:	8007883a 	mov	r3,r16
 80048c4:	10801014 	ori	r2,r2,64
 80048c8:	9080030d 	sth	r2,12(r18)
 80048cc:	003fcf06 	br	800480c <_fflush_r+0x138>

080048d0 <fflush>:
 80048d0:	01420034 	movhi	r5,2048
 80048d4:	2951b504 	addi	r5,r5,18132
 80048d8:	2007883a 	mov	r3,r4
 80048dc:	20000526 	beq	r4,zero,80048f4 <fflush+0x24>
 80048e0:	00820074 	movhi	r2,2049
 80048e4:	108aee04 	addi	r2,r2,11192
 80048e8:	11000017 	ldw	r4,0(r2)
 80048ec:	180b883a 	mov	r5,r3
 80048f0:	80046d41 	jmpi	80046d4 <_fflush_r>
 80048f4:	00820074 	movhi	r2,2049
 80048f8:	108aef04 	addi	r2,r2,11196
 80048fc:	11000017 	ldw	r4,0(r2)
 8004900:	80054d41 	jmpi	80054d4 <_fwalk_reent>

08004904 <std>:
 8004904:	00820034 	movhi	r2,2048
 8004908:	109ca604 	addi	r2,r2,29336
 800490c:	20800b15 	stw	r2,44(r4)
 8004910:	00820034 	movhi	r2,2048
 8004914:	109ce104 	addi	r2,r2,29572
 8004918:	20800815 	stw	r2,32(r4)
 800491c:	00c20034 	movhi	r3,2048
 8004920:	18dcc204 	addi	r3,r3,29448
 8004924:	00820034 	movhi	r2,2048
 8004928:	109ca804 	addi	r2,r2,29344
 800492c:	2140030d 	sth	r5,12(r4)
 8004930:	2180038d 	sth	r6,14(r4)
 8004934:	20c00915 	stw	r3,36(r4)
 8004938:	20800a15 	stw	r2,40(r4)
 800493c:	20000015 	stw	zero,0(r4)
 8004940:	20000115 	stw	zero,4(r4)
 8004944:	20000215 	stw	zero,8(r4)
 8004948:	20000415 	stw	zero,16(r4)
 800494c:	20000515 	stw	zero,20(r4)
 8004950:	20000615 	stw	zero,24(r4)
 8004954:	21000715 	stw	r4,28(r4)
 8004958:	f800283a 	ret

0800495c <__sfp_lock_acquire>:
 800495c:	f800283a 	ret

08004960 <__sfp_lock_release>:
 8004960:	f800283a 	ret

08004964 <__sinit_lock_acquire>:
 8004964:	f800283a 	ret

08004968 <__sinit_lock_release>:
 8004968:	f800283a 	ret

0800496c <__sinit>:
 800496c:	20800e17 	ldw	r2,56(r4)
 8004970:	defffd04 	addi	sp,sp,-12
 8004974:	dc400115 	stw	r17,4(sp)
 8004978:	dc000015 	stw	r16,0(sp)
 800497c:	dfc00215 	stw	ra,8(sp)
 8004980:	04400044 	movi	r17,1
 8004984:	01400104 	movi	r5,4
 8004988:	000d883a 	mov	r6,zero
 800498c:	2021883a 	mov	r16,r4
 8004990:	2200bb04 	addi	r8,r4,748
 8004994:	200f883a 	mov	r7,r4
 8004998:	10000526 	beq	r2,zero,80049b0 <__sinit+0x44>
 800499c:	dfc00217 	ldw	ra,8(sp)
 80049a0:	dc400117 	ldw	r17,4(sp)
 80049a4:	dc000017 	ldw	r16,0(sp)
 80049a8:	dec00304 	addi	sp,sp,12
 80049ac:	f800283a 	ret
 80049b0:	21000117 	ldw	r4,4(r4)
 80049b4:	00820034 	movhi	r2,2048
 80049b8:	10929404 	addi	r2,r2,19024
 80049bc:	00c000c4 	movi	r3,3
 80049c0:	80800f15 	stw	r2,60(r16)
 80049c4:	80c0b915 	stw	r3,740(r16)
 80049c8:	8200ba15 	stw	r8,744(r16)
 80049cc:	84400e15 	stw	r17,56(r16)
 80049d0:	8000b815 	stw	zero,736(r16)
 80049d4:	80049040 	call	8004904 <std>
 80049d8:	81000217 	ldw	r4,8(r16)
 80049dc:	880d883a 	mov	r6,r17
 80049e0:	800f883a 	mov	r7,r16
 80049e4:	01400284 	movi	r5,10
 80049e8:	80049040 	call	8004904 <std>
 80049ec:	81000317 	ldw	r4,12(r16)
 80049f0:	800f883a 	mov	r7,r16
 80049f4:	01400484 	movi	r5,18
 80049f8:	01800084 	movi	r6,2
 80049fc:	dfc00217 	ldw	ra,8(sp)
 8004a00:	dc400117 	ldw	r17,4(sp)
 8004a04:	dc000017 	ldw	r16,0(sp)
 8004a08:	dec00304 	addi	sp,sp,12
 8004a0c:	80049041 	jmpi	8004904 <std>

08004a10 <__fp_lock>:
 8004a10:	0005883a 	mov	r2,zero
 8004a14:	f800283a 	ret

08004a18 <__fp_unlock>:
 8004a18:	0005883a 	mov	r2,zero
 8004a1c:	f800283a 	ret

08004a20 <__fp_unlock_all>:
 8004a20:	00820074 	movhi	r2,2049
 8004a24:	108aee04 	addi	r2,r2,11192
 8004a28:	11000017 	ldw	r4,0(r2)
 8004a2c:	01420034 	movhi	r5,2048
 8004a30:	29528604 	addi	r5,r5,18968
 8004a34:	800559c1 	jmpi	800559c <_fwalk>

08004a38 <__fp_lock_all>:
 8004a38:	00820074 	movhi	r2,2049
 8004a3c:	108aee04 	addi	r2,r2,11192
 8004a40:	11000017 	ldw	r4,0(r2)
 8004a44:	01420034 	movhi	r5,2048
 8004a48:	29528404 	addi	r5,r5,18960
 8004a4c:	800559c1 	jmpi	800559c <_fwalk>

08004a50 <_cleanup_r>:
 8004a50:	01420034 	movhi	r5,2048
 8004a54:	295dd804 	addi	r5,r5,30560
 8004a58:	800559c1 	jmpi	800559c <_fwalk>

08004a5c <_cleanup>:
 8004a5c:	00820074 	movhi	r2,2049
 8004a60:	108aef04 	addi	r2,r2,11196
 8004a64:	11000017 	ldw	r4,0(r2)
 8004a68:	8004a501 	jmpi	8004a50 <_cleanup_r>

08004a6c <__sfmoreglue>:
 8004a6c:	defffc04 	addi	sp,sp,-16
 8004a70:	dc000015 	stw	r16,0(sp)
 8004a74:	2821883a 	mov	r16,r5
 8004a78:	dc400115 	stw	r17,4(sp)
 8004a7c:	01401704 	movi	r5,92
 8004a80:	2023883a 	mov	r17,r4
 8004a84:	8009883a 	mov	r4,r16
 8004a88:	dfc00315 	stw	ra,12(sp)
 8004a8c:	dcc00215 	stw	r19,8(sp)
 8004a90:	800988c0 	call	800988c <__mulsi3>
 8004a94:	11400304 	addi	r5,r2,12
 8004a98:	8809883a 	mov	r4,r17
 8004a9c:	1027883a 	mov	r19,r2
 8004aa0:	80005100 	call	8000510 <_malloc_r>
 8004aa4:	10c00304 	addi	r3,r2,12
 8004aa8:	1023883a 	mov	r17,r2
 8004aac:	1809883a 	mov	r4,r3
 8004ab0:	980d883a 	mov	r6,r19
 8004ab4:	000b883a 	mov	r5,zero
 8004ab8:	10000b26 	beq	r2,zero,8004ae8 <__sfmoreglue+0x7c>
 8004abc:	14000115 	stw	r16,4(r2)
 8004ac0:	10c00215 	stw	r3,8(r2)
 8004ac4:	10000015 	stw	zero,0(r2)
 8004ac8:	8005b100 	call	8005b10 <memset>
 8004acc:	8805883a 	mov	r2,r17
 8004ad0:	dfc00317 	ldw	ra,12(sp)
 8004ad4:	dcc00217 	ldw	r19,8(sp)
 8004ad8:	dc400117 	ldw	r17,4(sp)
 8004adc:	dc000017 	ldw	r16,0(sp)
 8004ae0:	dec00404 	addi	sp,sp,16
 8004ae4:	f800283a 	ret
 8004ae8:	0023883a 	mov	r17,zero
 8004aec:	8805883a 	mov	r2,r17
 8004af0:	dfc00317 	ldw	ra,12(sp)
 8004af4:	dcc00217 	ldw	r19,8(sp)
 8004af8:	dc400117 	ldw	r17,4(sp)
 8004afc:	dc000017 	ldw	r16,0(sp)
 8004b00:	dec00404 	addi	sp,sp,16
 8004b04:	f800283a 	ret

08004b08 <__sfp>:
 8004b08:	defffd04 	addi	sp,sp,-12
 8004b0c:	00820074 	movhi	r2,2049
 8004b10:	108aef04 	addi	r2,r2,11196
 8004b14:	dc000015 	stw	r16,0(sp)
 8004b18:	14000017 	ldw	r16,0(r2)
 8004b1c:	dc400115 	stw	r17,4(sp)
 8004b20:	dfc00215 	stw	ra,8(sp)
 8004b24:	80800e17 	ldw	r2,56(r16)
 8004b28:	2023883a 	mov	r17,r4
 8004b2c:	10002626 	beq	r2,zero,8004bc8 <__sfp+0xc0>
 8004b30:	8400b804 	addi	r16,r16,736
 8004b34:	80800117 	ldw	r2,4(r16)
 8004b38:	81000217 	ldw	r4,8(r16)
 8004b3c:	10ffffc4 	addi	r3,r2,-1
 8004b40:	18000916 	blt	r3,zero,8004b68 <__sfp+0x60>
 8004b44:	2080030f 	ldh	r2,12(r4)
 8004b48:	10000b26 	beq	r2,zero,8004b78 <__sfp+0x70>
 8004b4c:	017fffc4 	movi	r5,-1
 8004b50:	00000206 	br	8004b5c <__sfp+0x54>
 8004b54:	2080030f 	ldh	r2,12(r4)
 8004b58:	10000726 	beq	r2,zero,8004b78 <__sfp+0x70>
 8004b5c:	18ffffc4 	addi	r3,r3,-1
 8004b60:	21001704 	addi	r4,r4,92
 8004b64:	197ffb1e 	bne	r3,r5,8004b54 <__sfp+0x4c>
 8004b68:	80800017 	ldw	r2,0(r16)
 8004b6c:	10001926 	beq	r2,zero,8004bd4 <__sfp+0xcc>
 8004b70:	1021883a 	mov	r16,r2
 8004b74:	003fef06 	br	8004b34 <__sfp+0x2c>
 8004b78:	00bfffc4 	movi	r2,-1
 8004b7c:	00c00044 	movi	r3,1
 8004b80:	2080038d 	sth	r2,14(r4)
 8004b84:	20c0030d 	sth	r3,12(r4)
 8004b88:	20000015 	stw	zero,0(r4)
 8004b8c:	20000215 	stw	zero,8(r4)
 8004b90:	20000115 	stw	zero,4(r4)
 8004b94:	20000415 	stw	zero,16(r4)
 8004b98:	20000515 	stw	zero,20(r4)
 8004b9c:	20000615 	stw	zero,24(r4)
 8004ba0:	20000c15 	stw	zero,48(r4)
 8004ba4:	20000d15 	stw	zero,52(r4)
 8004ba8:	20001115 	stw	zero,68(r4)
 8004bac:	20001215 	stw	zero,72(r4)
 8004bb0:	2005883a 	mov	r2,r4
 8004bb4:	dfc00217 	ldw	ra,8(sp)
 8004bb8:	dc400117 	ldw	r17,4(sp)
 8004bbc:	dc000017 	ldw	r16,0(sp)
 8004bc0:	dec00304 	addi	sp,sp,12
 8004bc4:	f800283a 	ret
 8004bc8:	8009883a 	mov	r4,r16
 8004bcc:	800496c0 	call	800496c <__sinit>
 8004bd0:	003fd706 	br	8004b30 <__sfp+0x28>
 8004bd4:	8809883a 	mov	r4,r17
 8004bd8:	01400104 	movi	r5,4
 8004bdc:	8004a6c0 	call	8004a6c <__sfmoreglue>
 8004be0:	80800015 	stw	r2,0(r16)
 8004be4:	103fe21e 	bne	r2,zero,8004b70 <__sfp+0x68>
 8004be8:	00800304 	movi	r2,12
 8004bec:	0009883a 	mov	r4,zero
 8004bf0:	88800015 	stw	r2,0(r17)
 8004bf4:	003fee06 	br	8004bb0 <__sfp+0xa8>

08004bf8 <_malloc_trim_r>:
 8004bf8:	defffb04 	addi	sp,sp,-20
 8004bfc:	dcc00315 	stw	r19,12(sp)
 8004c00:	04c20074 	movhi	r19,2049
 8004c04:	9cc45a04 	addi	r19,r19,4456
 8004c08:	dc800215 	stw	r18,8(sp)
 8004c0c:	dc400115 	stw	r17,4(sp)
 8004c10:	dc000015 	stw	r16,0(sp)
 8004c14:	2823883a 	mov	r17,r5
 8004c18:	2025883a 	mov	r18,r4
 8004c1c:	dfc00415 	stw	ra,16(sp)
 8004c20:	800a6100 	call	800a610 <__malloc_lock>
 8004c24:	98800217 	ldw	r2,8(r19)
 8004c28:	9009883a 	mov	r4,r18
 8004c2c:	000b883a 	mov	r5,zero
 8004c30:	10c00117 	ldw	r3,4(r2)
 8004c34:	00bfff04 	movi	r2,-4
 8004c38:	18a0703a 	and	r16,r3,r2
 8004c3c:	8463c83a 	sub	r17,r16,r17
 8004c40:	8c43fbc4 	addi	r17,r17,4079
 8004c44:	8822d33a 	srli	r17,r17,12
 8004c48:	0083ffc4 	movi	r2,4095
 8004c4c:	8c7fffc4 	addi	r17,r17,-1
 8004c50:	8822933a 	slli	r17,r17,12
 8004c54:	1440060e 	bge	r2,r17,8004c70 <_malloc_trim_r+0x78>
 8004c58:	8000d7c0 	call	8000d7c <_sbrk_r>
 8004c5c:	98c00217 	ldw	r3,8(r19)
 8004c60:	9009883a 	mov	r4,r18
 8004c64:	044bc83a 	sub	r5,zero,r17
 8004c68:	80c7883a 	add	r3,r16,r3
 8004c6c:	10c00926 	beq	r2,r3,8004c94 <_malloc_trim_r+0x9c>
 8004c70:	800a6300 	call	800a630 <__malloc_unlock>
 8004c74:	0005883a 	mov	r2,zero
 8004c78:	dfc00417 	ldw	ra,16(sp)
 8004c7c:	dcc00317 	ldw	r19,12(sp)
 8004c80:	dc800217 	ldw	r18,8(sp)
 8004c84:	dc400117 	ldw	r17,4(sp)
 8004c88:	dc000017 	ldw	r16,0(sp)
 8004c8c:	dec00504 	addi	sp,sp,20
 8004c90:	f800283a 	ret
 8004c94:	9009883a 	mov	r4,r18
 8004c98:	8000d7c0 	call	8000d7c <_sbrk_r>
 8004c9c:	844dc83a 	sub	r6,r16,r17
 8004ca0:	00ffffc4 	movi	r3,-1
 8004ca4:	9009883a 	mov	r4,r18
 8004ca8:	000b883a 	mov	r5,zero
 8004cac:	01c20074 	movhi	r7,2049
 8004cb0:	39d1bd04 	addi	r7,r7,18164
 8004cb4:	31800054 	ori	r6,r6,1
 8004cb8:	10c00926 	beq	r2,r3,8004ce0 <_malloc_trim_r+0xe8>
 8004cbc:	38800017 	ldw	r2,0(r7)
 8004cc0:	98c00217 	ldw	r3,8(r19)
 8004cc4:	9009883a 	mov	r4,r18
 8004cc8:	1445c83a 	sub	r2,r2,r17
 8004ccc:	38800015 	stw	r2,0(r7)
 8004cd0:	19800115 	stw	r6,4(r3)
 8004cd4:	800a6300 	call	800a630 <__malloc_unlock>
 8004cd8:	00800044 	movi	r2,1
 8004cdc:	003fe606 	br	8004c78 <_malloc_trim_r+0x80>
 8004ce0:	8000d7c0 	call	8000d7c <_sbrk_r>
 8004ce4:	99800217 	ldw	r6,8(r19)
 8004ce8:	100f883a 	mov	r7,r2
 8004cec:	9009883a 	mov	r4,r18
 8004cf0:	1187c83a 	sub	r3,r2,r6
 8004cf4:	008003c4 	movi	r2,15
 8004cf8:	19400054 	ori	r5,r3,1
 8004cfc:	10ffdc0e 	bge	r2,r3,8004c70 <_malloc_trim_r+0x78>
 8004d00:	00820074 	movhi	r2,2049
 8004d04:	108aed04 	addi	r2,r2,11188
 8004d08:	10c00017 	ldw	r3,0(r2)
 8004d0c:	00820074 	movhi	r2,2049
 8004d10:	1091bd04 	addi	r2,r2,18164
 8004d14:	31400115 	stw	r5,4(r6)
 8004d18:	38c7c83a 	sub	r3,r7,r3
 8004d1c:	10c00015 	stw	r3,0(r2)
 8004d20:	003fd306 	br	8004c70 <_malloc_trim_r+0x78>

08004d24 <_free_r>:
 8004d24:	defffd04 	addi	sp,sp,-12
 8004d28:	dc400115 	stw	r17,4(sp)
 8004d2c:	dc000015 	stw	r16,0(sp)
 8004d30:	dfc00215 	stw	ra,8(sp)
 8004d34:	2821883a 	mov	r16,r5
 8004d38:	2023883a 	mov	r17,r4
 8004d3c:	28005a26 	beq	r5,zero,8004ea8 <_free_r+0x184>
 8004d40:	800a6100 	call	800a610 <__malloc_lock>
 8004d44:	823ffe04 	addi	r8,r16,-8
 8004d48:	41400117 	ldw	r5,4(r8)
 8004d4c:	00bfff84 	movi	r2,-2
 8004d50:	02820074 	movhi	r10,2049
 8004d54:	52845a04 	addi	r10,r10,4456
 8004d58:	288e703a 	and	r7,r5,r2
 8004d5c:	41cd883a 	add	r6,r8,r7
 8004d60:	30c00117 	ldw	r3,4(r6)
 8004d64:	51000217 	ldw	r4,8(r10)
 8004d68:	00bfff04 	movi	r2,-4
 8004d6c:	1892703a 	and	r9,r3,r2
 8004d70:	5017883a 	mov	r11,r10
 8004d74:	31006726 	beq	r6,r4,8004f14 <_free_r+0x1f0>
 8004d78:	2880004c 	andi	r2,r5,1
 8004d7c:	1005003a 	cmpeq	r2,r2,zero
 8004d80:	32400115 	stw	r9,4(r6)
 8004d84:	10001a1e 	bne	r2,zero,8004df0 <_free_r+0xcc>
 8004d88:	000b883a 	mov	r5,zero
 8004d8c:	3247883a 	add	r3,r6,r9
 8004d90:	18800117 	ldw	r2,4(r3)
 8004d94:	1080004c 	andi	r2,r2,1
 8004d98:	1000231e 	bne	r2,zero,8004e28 <_free_r+0x104>
 8004d9c:	280ac03a 	cmpne	r5,r5,zero
 8004da0:	3a4f883a 	add	r7,r7,r9
 8004da4:	2800451e 	bne	r5,zero,8004ebc <_free_r+0x198>
 8004da8:	31000217 	ldw	r4,8(r6)
 8004dac:	00820074 	movhi	r2,2049
 8004db0:	10845c04 	addi	r2,r2,4464
 8004db4:	20807b26 	beq	r4,r2,8004fa4 <_free_r+0x280>
 8004db8:	30800317 	ldw	r2,12(r6)
 8004dbc:	3a07883a 	add	r3,r7,r8
 8004dc0:	19c00015 	stw	r7,0(r3)
 8004dc4:	11000215 	stw	r4,8(r2)
 8004dc8:	20800315 	stw	r2,12(r4)
 8004dcc:	38800054 	ori	r2,r7,1
 8004dd0:	40800115 	stw	r2,4(r8)
 8004dd4:	28001a26 	beq	r5,zero,8004e40 <_free_r+0x11c>
 8004dd8:	8809883a 	mov	r4,r17
 8004ddc:	dfc00217 	ldw	ra,8(sp)
 8004de0:	dc400117 	ldw	r17,4(sp)
 8004de4:	dc000017 	ldw	r16,0(sp)
 8004de8:	dec00304 	addi	sp,sp,12
 8004dec:	800a6301 	jmpi	800a630 <__malloc_unlock>
 8004df0:	80bffe17 	ldw	r2,-8(r16)
 8004df4:	50c00204 	addi	r3,r10,8
 8004df8:	4091c83a 	sub	r8,r8,r2
 8004dfc:	41000217 	ldw	r4,8(r8)
 8004e00:	388f883a 	add	r7,r7,r2
 8004e04:	20c06126 	beq	r4,r3,8004f8c <_free_r+0x268>
 8004e08:	40800317 	ldw	r2,12(r8)
 8004e0c:	3247883a 	add	r3,r6,r9
 8004e10:	000b883a 	mov	r5,zero
 8004e14:	11000215 	stw	r4,8(r2)
 8004e18:	20800315 	stw	r2,12(r4)
 8004e1c:	18800117 	ldw	r2,4(r3)
 8004e20:	1080004c 	andi	r2,r2,1
 8004e24:	103fdd26 	beq	r2,zero,8004d9c <_free_r+0x78>
 8004e28:	38800054 	ori	r2,r7,1
 8004e2c:	3a07883a 	add	r3,r7,r8
 8004e30:	280ac03a 	cmpne	r5,r5,zero
 8004e34:	40800115 	stw	r2,4(r8)
 8004e38:	19c00015 	stw	r7,0(r3)
 8004e3c:	283fe61e 	bne	r5,zero,8004dd8 <_free_r+0xb4>
 8004e40:	00807fc4 	movi	r2,511
 8004e44:	11c01f2e 	bgeu	r2,r7,8004ec4 <_free_r+0x1a0>
 8004e48:	3806d27a 	srli	r3,r7,9
 8004e4c:	1800481e 	bne	r3,zero,8004f70 <_free_r+0x24c>
 8004e50:	3804d0fa 	srli	r2,r7,3
 8004e54:	100690fa 	slli	r3,r2,3
 8004e58:	1acd883a 	add	r6,r3,r11
 8004e5c:	31400217 	ldw	r5,8(r6)
 8004e60:	31405926 	beq	r6,r5,8004fc8 <_free_r+0x2a4>
 8004e64:	28800117 	ldw	r2,4(r5)
 8004e68:	00ffff04 	movi	r3,-4
 8004e6c:	10c4703a 	and	r2,r2,r3
 8004e70:	3880022e 	bgeu	r7,r2,8004e7c <_free_r+0x158>
 8004e74:	29400217 	ldw	r5,8(r5)
 8004e78:	317ffa1e 	bne	r6,r5,8004e64 <_free_r+0x140>
 8004e7c:	29800317 	ldw	r6,12(r5)
 8004e80:	41800315 	stw	r6,12(r8)
 8004e84:	41400215 	stw	r5,8(r8)
 8004e88:	8809883a 	mov	r4,r17
 8004e8c:	2a000315 	stw	r8,12(r5)
 8004e90:	32000215 	stw	r8,8(r6)
 8004e94:	dfc00217 	ldw	ra,8(sp)
 8004e98:	dc400117 	ldw	r17,4(sp)
 8004e9c:	dc000017 	ldw	r16,0(sp)
 8004ea0:	dec00304 	addi	sp,sp,12
 8004ea4:	800a6301 	jmpi	800a630 <__malloc_unlock>
 8004ea8:	dfc00217 	ldw	ra,8(sp)
 8004eac:	dc400117 	ldw	r17,4(sp)
 8004eb0:	dc000017 	ldw	r16,0(sp)
 8004eb4:	dec00304 	addi	sp,sp,12
 8004eb8:	f800283a 	ret
 8004ebc:	31000217 	ldw	r4,8(r6)
 8004ec0:	003fbd06 	br	8004db8 <_free_r+0x94>
 8004ec4:	3806d0fa 	srli	r3,r7,3
 8004ec8:	00800044 	movi	r2,1
 8004ecc:	51400117 	ldw	r5,4(r10)
 8004ed0:	180890fa 	slli	r4,r3,3
 8004ed4:	1807d0ba 	srai	r3,r3,2
 8004ed8:	22c9883a 	add	r4,r4,r11
 8004edc:	21800217 	ldw	r6,8(r4)
 8004ee0:	10c4983a 	sll	r2,r2,r3
 8004ee4:	41000315 	stw	r4,12(r8)
 8004ee8:	41800215 	stw	r6,8(r8)
 8004eec:	288ab03a 	or	r5,r5,r2
 8004ef0:	22000215 	stw	r8,8(r4)
 8004ef4:	8809883a 	mov	r4,r17
 8004ef8:	51400115 	stw	r5,4(r10)
 8004efc:	32000315 	stw	r8,12(r6)
 8004f00:	dfc00217 	ldw	ra,8(sp)
 8004f04:	dc400117 	ldw	r17,4(sp)
 8004f08:	dc000017 	ldw	r16,0(sp)
 8004f0c:	dec00304 	addi	sp,sp,12
 8004f10:	800a6301 	jmpi	800a630 <__malloc_unlock>
 8004f14:	2880004c 	andi	r2,r5,1
 8004f18:	3a4d883a 	add	r6,r7,r9
 8004f1c:	1000071e 	bne	r2,zero,8004f3c <_free_r+0x218>
 8004f20:	80bffe17 	ldw	r2,-8(r16)
 8004f24:	4091c83a 	sub	r8,r8,r2
 8004f28:	41000317 	ldw	r4,12(r8)
 8004f2c:	40c00217 	ldw	r3,8(r8)
 8004f30:	308d883a 	add	r6,r6,r2
 8004f34:	20c00215 	stw	r3,8(r4)
 8004f38:	19000315 	stw	r4,12(r3)
 8004f3c:	00820074 	movhi	r2,2049
 8004f40:	108aec04 	addi	r2,r2,11184
 8004f44:	11000017 	ldw	r4,0(r2)
 8004f48:	30c00054 	ori	r3,r6,1
 8004f4c:	52000215 	stw	r8,8(r10)
 8004f50:	40c00115 	stw	r3,4(r8)
 8004f54:	313fa036 	bltu	r6,r4,8004dd8 <_free_r+0xb4>
 8004f58:	00820074 	movhi	r2,2049
 8004f5c:	1091a304 	addi	r2,r2,18060
 8004f60:	11400017 	ldw	r5,0(r2)
 8004f64:	8809883a 	mov	r4,r17
 8004f68:	8004bf80 	call	8004bf8 <_malloc_trim_r>
 8004f6c:	003f9a06 	br	8004dd8 <_free_r+0xb4>
 8004f70:	00800104 	movi	r2,4
 8004f74:	10c0072e 	bgeu	r2,r3,8004f94 <_free_r+0x270>
 8004f78:	00800504 	movi	r2,20
 8004f7c:	10c01936 	bltu	r2,r3,8004fe4 <_free_r+0x2c0>
 8004f80:	188016c4 	addi	r2,r3,91
 8004f84:	100690fa 	slli	r3,r2,3
 8004f88:	003fb306 	br	8004e58 <_free_r+0x134>
 8004f8c:	01400044 	movi	r5,1
 8004f90:	003f7e06 	br	8004d8c <_free_r+0x68>
 8004f94:	3804d1ba 	srli	r2,r7,6
 8004f98:	10800e04 	addi	r2,r2,56
 8004f9c:	100690fa 	slli	r3,r2,3
 8004fa0:	003fad06 	br	8004e58 <_free_r+0x134>
 8004fa4:	22000315 	stw	r8,12(r4)
 8004fa8:	22000215 	stw	r8,8(r4)
 8004fac:	3a05883a 	add	r2,r7,r8
 8004fb0:	38c00054 	ori	r3,r7,1
 8004fb4:	11c00015 	stw	r7,0(r2)
 8004fb8:	41000215 	stw	r4,8(r8)
 8004fbc:	40c00115 	stw	r3,4(r8)
 8004fc0:	41000315 	stw	r4,12(r8)
 8004fc4:	003f8406 	br	8004dd8 <_free_r+0xb4>
 8004fc8:	1005d0ba 	srai	r2,r2,2
 8004fcc:	00c00044 	movi	r3,1
 8004fd0:	51000117 	ldw	r4,4(r10)
 8004fd4:	1886983a 	sll	r3,r3,r2
 8004fd8:	20c8b03a 	or	r4,r4,r3
 8004fdc:	51000115 	stw	r4,4(r10)
 8004fe0:	003fa706 	br	8004e80 <_free_r+0x15c>
 8004fe4:	00801504 	movi	r2,84
 8004fe8:	10c00436 	bltu	r2,r3,8004ffc <_free_r+0x2d8>
 8004fec:	3804d33a 	srli	r2,r7,12
 8004ff0:	10801b84 	addi	r2,r2,110
 8004ff4:	100690fa 	slli	r3,r2,3
 8004ff8:	003f9706 	br	8004e58 <_free_r+0x134>
 8004ffc:	00805504 	movi	r2,340
 8005000:	10c00436 	bltu	r2,r3,8005014 <_free_r+0x2f0>
 8005004:	3804d3fa 	srli	r2,r7,15
 8005008:	10801dc4 	addi	r2,r2,119
 800500c:	100690fa 	slli	r3,r2,3
 8005010:	003f9106 	br	8004e58 <_free_r+0x134>
 8005014:	00815504 	movi	r2,1364
 8005018:	10c0032e 	bgeu	r2,r3,8005028 <_free_r+0x304>
 800501c:	00801f84 	movi	r2,126
 8005020:	00c0fc04 	movi	r3,1008
 8005024:	003f8c06 	br	8004e58 <_free_r+0x134>
 8005028:	3804d4ba 	srli	r2,r7,18
 800502c:	10801f04 	addi	r2,r2,124
 8005030:	100690fa 	slli	r3,r2,3
 8005034:	003f8806 	br	8004e58 <_free_r+0x134>

08005038 <__sfvwrite_r>:
 8005038:	30800217 	ldw	r2,8(r6)
 800503c:	defff504 	addi	sp,sp,-44
 8005040:	df000915 	stw	fp,36(sp)
 8005044:	dd800715 	stw	r22,28(sp)
 8005048:	dc800315 	stw	r18,12(sp)
 800504c:	dfc00a15 	stw	ra,40(sp)
 8005050:	ddc00815 	stw	r23,32(sp)
 8005054:	dd400615 	stw	r21,24(sp)
 8005058:	dd000515 	stw	r20,20(sp)
 800505c:	dcc00415 	stw	r19,16(sp)
 8005060:	dc400215 	stw	r17,8(sp)
 8005064:	dc000115 	stw	r16,4(sp)
 8005068:	302d883a 	mov	r22,r6
 800506c:	2039883a 	mov	fp,r4
 8005070:	2825883a 	mov	r18,r5
 8005074:	10001c26 	beq	r2,zero,80050e8 <__sfvwrite_r+0xb0>
 8005078:	29c0030b 	ldhu	r7,12(r5)
 800507c:	3880020c 	andi	r2,r7,8
 8005080:	10002726 	beq	r2,zero,8005120 <__sfvwrite_r+0xe8>
 8005084:	28800417 	ldw	r2,16(r5)
 8005088:	10002526 	beq	r2,zero,8005120 <__sfvwrite_r+0xe8>
 800508c:	3880008c 	andi	r2,r7,2
 8005090:	b5400017 	ldw	r21,0(r22)
 8005094:	10002826 	beq	r2,zero,8005138 <__sfvwrite_r+0x100>
 8005098:	0021883a 	mov	r16,zero
 800509c:	0023883a 	mov	r17,zero
 80050a0:	880d883a 	mov	r6,r17
 80050a4:	e009883a 	mov	r4,fp
 80050a8:	00810004 	movi	r2,1024
 80050ac:	80006e26 	beq	r16,zero,8005268 <__sfvwrite_r+0x230>
 80050b0:	800f883a 	mov	r7,r16
 80050b4:	91400717 	ldw	r5,28(r18)
 80050b8:	1400012e 	bgeu	r2,r16,80050c0 <__sfvwrite_r+0x88>
 80050bc:	100f883a 	mov	r7,r2
 80050c0:	90c00917 	ldw	r3,36(r18)
 80050c4:	183ee83a 	callr	r3
 80050c8:	1007883a 	mov	r3,r2
 80050cc:	80a1c83a 	sub	r16,r16,r2
 80050d0:	88a3883a 	add	r17,r17,r2
 80050d4:	00806d0e 	bge	zero,r2,800528c <__sfvwrite_r+0x254>
 80050d8:	b0800217 	ldw	r2,8(r22)
 80050dc:	10c5c83a 	sub	r2,r2,r3
 80050e0:	b0800215 	stw	r2,8(r22)
 80050e4:	103fee1e 	bne	r2,zero,80050a0 <__sfvwrite_r+0x68>
 80050e8:	0009883a 	mov	r4,zero
 80050ec:	2005883a 	mov	r2,r4
 80050f0:	dfc00a17 	ldw	ra,40(sp)
 80050f4:	df000917 	ldw	fp,36(sp)
 80050f8:	ddc00817 	ldw	r23,32(sp)
 80050fc:	dd800717 	ldw	r22,28(sp)
 8005100:	dd400617 	ldw	r21,24(sp)
 8005104:	dd000517 	ldw	r20,20(sp)
 8005108:	dcc00417 	ldw	r19,16(sp)
 800510c:	dc800317 	ldw	r18,12(sp)
 8005110:	dc400217 	ldw	r17,8(sp)
 8005114:	dc000117 	ldw	r16,4(sp)
 8005118:	dec00b04 	addi	sp,sp,44
 800511c:	f800283a 	ret
 8005120:	8002da00 	call	8002da0 <__swsetup_r>
 8005124:	1000e41e 	bne	r2,zero,80054b8 <__sfvwrite_r+0x480>
 8005128:	91c0030b 	ldhu	r7,12(r18)
 800512c:	b5400017 	ldw	r21,0(r22)
 8005130:	3880008c 	andi	r2,r7,2
 8005134:	103fd81e 	bne	r2,zero,8005098 <__sfvwrite_r+0x60>
 8005138:	3880004c 	andi	r2,r7,1
 800513c:	1005003a 	cmpeq	r2,r2,zero
 8005140:	10005726 	beq	r2,zero,80052a0 <__sfvwrite_r+0x268>
 8005144:	0029883a 	mov	r20,zero
 8005148:	002f883a 	mov	r23,zero
 800514c:	a0004226 	beq	r20,zero,8005258 <__sfvwrite_r+0x220>
 8005150:	3880800c 	andi	r2,r7,512
 8005154:	94000217 	ldw	r16,8(r18)
 8005158:	10008b26 	beq	r2,zero,8005388 <__sfvwrite_r+0x350>
 800515c:	800d883a 	mov	r6,r16
 8005160:	a400a536 	bltu	r20,r16,80053f8 <__sfvwrite_r+0x3c0>
 8005164:	3881200c 	andi	r2,r7,1152
 8005168:	10002726 	beq	r2,zero,8005208 <__sfvwrite_r+0x1d0>
 800516c:	90800517 	ldw	r2,20(r18)
 8005170:	92000417 	ldw	r8,16(r18)
 8005174:	91400017 	ldw	r5,0(r18)
 8005178:	1087883a 	add	r3,r2,r2
 800517c:	1887883a 	add	r3,r3,r2
 8005180:	1808d7fa 	srli	r4,r3,31
 8005184:	2a21c83a 	sub	r16,r5,r8
 8005188:	80800044 	addi	r2,r16,1
 800518c:	20c9883a 	add	r4,r4,r3
 8005190:	2027d07a 	srai	r19,r4,1
 8005194:	a085883a 	add	r2,r20,r2
 8005198:	980d883a 	mov	r6,r19
 800519c:	9880022e 	bgeu	r19,r2,80051a8 <__sfvwrite_r+0x170>
 80051a0:	1027883a 	mov	r19,r2
 80051a4:	100d883a 	mov	r6,r2
 80051a8:	3881000c 	andi	r2,r7,1024
 80051ac:	1000b826 	beq	r2,zero,8005490 <__sfvwrite_r+0x458>
 80051b0:	300b883a 	mov	r5,r6
 80051b4:	e009883a 	mov	r4,fp
 80051b8:	80005100 	call	8000510 <_malloc_r>
 80051bc:	10003126 	beq	r2,zero,8005284 <__sfvwrite_r+0x24c>
 80051c0:	91400417 	ldw	r5,16(r18)
 80051c4:	1009883a 	mov	r4,r2
 80051c8:	800d883a 	mov	r6,r16
 80051cc:	1023883a 	mov	r17,r2
 80051d0:	80059900 	call	8005990 <memcpy>
 80051d4:	90c0030b 	ldhu	r3,12(r18)
 80051d8:	00beffc4 	movi	r2,-1025
 80051dc:	1886703a 	and	r3,r3,r2
 80051e0:	18c02014 	ori	r3,r3,128
 80051e4:	90c0030d 	sth	r3,12(r18)
 80051e8:	9c07c83a 	sub	r3,r19,r16
 80051ec:	8c05883a 	add	r2,r17,r16
 80051f0:	a00d883a 	mov	r6,r20
 80051f4:	a021883a 	mov	r16,r20
 80051f8:	90800015 	stw	r2,0(r18)
 80051fc:	90c00215 	stw	r3,8(r18)
 8005200:	94400415 	stw	r17,16(r18)
 8005204:	94c00515 	stw	r19,20(r18)
 8005208:	91000017 	ldw	r4,0(r18)
 800520c:	b80b883a 	mov	r5,r23
 8005210:	a023883a 	mov	r17,r20
 8005214:	8005a300 	call	8005a30 <memmove>
 8005218:	90c00217 	ldw	r3,8(r18)
 800521c:	90800017 	ldw	r2,0(r18)
 8005220:	a027883a 	mov	r19,r20
 8005224:	1c07c83a 	sub	r3,r3,r16
 8005228:	1405883a 	add	r2,r2,r16
 800522c:	90c00215 	stw	r3,8(r18)
 8005230:	a021883a 	mov	r16,r20
 8005234:	90800015 	stw	r2,0(r18)
 8005238:	b0800217 	ldw	r2,8(r22)
 800523c:	1405c83a 	sub	r2,r2,r16
 8005240:	b0800215 	stw	r2,8(r22)
 8005244:	103fa826 	beq	r2,zero,80050e8 <__sfvwrite_r+0xb0>
 8005248:	a469c83a 	sub	r20,r20,r17
 800524c:	91c0030b 	ldhu	r7,12(r18)
 8005250:	bcef883a 	add	r23,r23,r19
 8005254:	a03fbe1e 	bne	r20,zero,8005150 <__sfvwrite_r+0x118>
 8005258:	adc00017 	ldw	r23,0(r21)
 800525c:	ad000117 	ldw	r20,4(r21)
 8005260:	ad400204 	addi	r21,r21,8
 8005264:	003fb906 	br	800514c <__sfvwrite_r+0x114>
 8005268:	ac400017 	ldw	r17,0(r21)
 800526c:	ac000117 	ldw	r16,4(r21)
 8005270:	ad400204 	addi	r21,r21,8
 8005274:	003f8a06 	br	80050a0 <__sfvwrite_r+0x68>
 8005278:	91400417 	ldw	r5,16(r18)
 800527c:	e009883a 	mov	r4,fp
 8005280:	8004d240 	call	8004d24 <_free_r>
 8005284:	00800304 	movi	r2,12
 8005288:	e0800015 	stw	r2,0(fp)
 800528c:	9080030b 	ldhu	r2,12(r18)
 8005290:	013fffc4 	movi	r4,-1
 8005294:	10801014 	ori	r2,r2,64
 8005298:	9080030d 	sth	r2,12(r18)
 800529c:	003f9306 	br	80050ec <__sfvwrite_r+0xb4>
 80052a0:	0027883a 	mov	r19,zero
 80052a4:	002f883a 	mov	r23,zero
 80052a8:	d8000015 	stw	zero,0(sp)
 80052ac:	0029883a 	mov	r20,zero
 80052b0:	98001e26 	beq	r19,zero,800532c <__sfvwrite_r+0x2f4>
 80052b4:	d8c00017 	ldw	r3,0(sp)
 80052b8:	1804c03a 	cmpne	r2,r3,zero
 80052bc:	10005e26 	beq	r2,zero,8005438 <__sfvwrite_r+0x400>
 80052c0:	9821883a 	mov	r16,r19
 80052c4:	a4c0012e 	bgeu	r20,r19,80052cc <__sfvwrite_r+0x294>
 80052c8:	a021883a 	mov	r16,r20
 80052cc:	91000017 	ldw	r4,0(r18)
 80052d0:	90800417 	ldw	r2,16(r18)
 80052d4:	91800217 	ldw	r6,8(r18)
 80052d8:	91c00517 	ldw	r7,20(r18)
 80052dc:	1100022e 	bgeu	r2,r4,80052e8 <__sfvwrite_r+0x2b0>
 80052e0:	31e3883a 	add	r17,r6,r7
 80052e4:	8c001616 	blt	r17,r16,8005340 <__sfvwrite_r+0x308>
 80052e8:	81c03816 	blt	r16,r7,80053cc <__sfvwrite_r+0x394>
 80052ec:	90c00917 	ldw	r3,36(r18)
 80052f0:	91400717 	ldw	r5,28(r18)
 80052f4:	e009883a 	mov	r4,fp
 80052f8:	b80d883a 	mov	r6,r23
 80052fc:	183ee83a 	callr	r3
 8005300:	1023883a 	mov	r17,r2
 8005304:	00bfe10e 	bge	zero,r2,800528c <__sfvwrite_r+0x254>
 8005308:	a469c83a 	sub	r20,r20,r17
 800530c:	a0001826 	beq	r20,zero,8005370 <__sfvwrite_r+0x338>
 8005310:	b0800217 	ldw	r2,8(r22)
 8005314:	1445c83a 	sub	r2,r2,r17
 8005318:	b0800215 	stw	r2,8(r22)
 800531c:	103f7226 	beq	r2,zero,80050e8 <__sfvwrite_r+0xb0>
 8005320:	9c67c83a 	sub	r19,r19,r17
 8005324:	bc6f883a 	add	r23,r23,r17
 8005328:	983fe21e 	bne	r19,zero,80052b4 <__sfvwrite_r+0x27c>
 800532c:	adc00017 	ldw	r23,0(r21)
 8005330:	acc00117 	ldw	r19,4(r21)
 8005334:	ad400204 	addi	r21,r21,8
 8005338:	d8000015 	stw	zero,0(sp)
 800533c:	003fdc06 	br	80052b0 <__sfvwrite_r+0x278>
 8005340:	b80b883a 	mov	r5,r23
 8005344:	880d883a 	mov	r6,r17
 8005348:	8005a300 	call	8005a30 <memmove>
 800534c:	90c00017 	ldw	r3,0(r18)
 8005350:	e009883a 	mov	r4,fp
 8005354:	900b883a 	mov	r5,r18
 8005358:	1c47883a 	add	r3,r3,r17
 800535c:	90c00015 	stw	r3,0(r18)
 8005360:	80046d40 	call	80046d4 <_fflush_r>
 8005364:	103fc91e 	bne	r2,zero,800528c <__sfvwrite_r+0x254>
 8005368:	a469c83a 	sub	r20,r20,r17
 800536c:	a03fe81e 	bne	r20,zero,8005310 <__sfvwrite_r+0x2d8>
 8005370:	e009883a 	mov	r4,fp
 8005374:	900b883a 	mov	r5,r18
 8005378:	80046d40 	call	80046d4 <_fflush_r>
 800537c:	103fc31e 	bne	r2,zero,800528c <__sfvwrite_r+0x254>
 8005380:	d8000015 	stw	zero,0(sp)
 8005384:	003fe206 	br	8005310 <__sfvwrite_r+0x2d8>
 8005388:	91000017 	ldw	r4,0(r18)
 800538c:	90800417 	ldw	r2,16(r18)
 8005390:	1100022e 	bgeu	r2,r4,800539c <__sfvwrite_r+0x364>
 8005394:	8023883a 	mov	r17,r16
 8005398:	85003136 	bltu	r16,r20,8005460 <__sfvwrite_r+0x428>
 800539c:	91c00517 	ldw	r7,20(r18)
 80053a0:	a1c01836 	bltu	r20,r7,8005404 <__sfvwrite_r+0x3cc>
 80053a4:	90c00917 	ldw	r3,36(r18)
 80053a8:	91400717 	ldw	r5,28(r18)
 80053ac:	e009883a 	mov	r4,fp
 80053b0:	b80d883a 	mov	r6,r23
 80053b4:	183ee83a 	callr	r3
 80053b8:	1021883a 	mov	r16,r2
 80053bc:	00bfb30e 	bge	zero,r2,800528c <__sfvwrite_r+0x254>
 80053c0:	1023883a 	mov	r17,r2
 80053c4:	1027883a 	mov	r19,r2
 80053c8:	003f9b06 	br	8005238 <__sfvwrite_r+0x200>
 80053cc:	b80b883a 	mov	r5,r23
 80053d0:	800d883a 	mov	r6,r16
 80053d4:	8005a300 	call	8005a30 <memmove>
 80053d8:	90c00217 	ldw	r3,8(r18)
 80053dc:	90800017 	ldw	r2,0(r18)
 80053e0:	8023883a 	mov	r17,r16
 80053e4:	1c07c83a 	sub	r3,r3,r16
 80053e8:	1405883a 	add	r2,r2,r16
 80053ec:	90c00215 	stw	r3,8(r18)
 80053f0:	90800015 	stw	r2,0(r18)
 80053f4:	003fc406 	br	8005308 <__sfvwrite_r+0x2d0>
 80053f8:	a00d883a 	mov	r6,r20
 80053fc:	a021883a 	mov	r16,r20
 8005400:	003f8106 	br	8005208 <__sfvwrite_r+0x1d0>
 8005404:	b80b883a 	mov	r5,r23
 8005408:	a00d883a 	mov	r6,r20
 800540c:	8005a300 	call	8005a30 <memmove>
 8005410:	90c00217 	ldw	r3,8(r18)
 8005414:	90800017 	ldw	r2,0(r18)
 8005418:	a021883a 	mov	r16,r20
 800541c:	1d07c83a 	sub	r3,r3,r20
 8005420:	1505883a 	add	r2,r2,r20
 8005424:	a023883a 	mov	r17,r20
 8005428:	a027883a 	mov	r19,r20
 800542c:	90c00215 	stw	r3,8(r18)
 8005430:	90800015 	stw	r2,0(r18)
 8005434:	003f8006 	br	8005238 <__sfvwrite_r+0x200>
 8005438:	b809883a 	mov	r4,r23
 800543c:	01400284 	movi	r5,10
 8005440:	980d883a 	mov	r6,r19
 8005444:	80058ac0 	call	80058ac <memchr>
 8005448:	10001726 	beq	r2,zero,80054a8 <__sfvwrite_r+0x470>
 800544c:	15c5c83a 	sub	r2,r2,r23
 8005450:	15000044 	addi	r20,r2,1
 8005454:	00800044 	movi	r2,1
 8005458:	d8800015 	stw	r2,0(sp)
 800545c:	003f9806 	br	80052c0 <__sfvwrite_r+0x288>
 8005460:	b80b883a 	mov	r5,r23
 8005464:	800d883a 	mov	r6,r16
 8005468:	8005a300 	call	8005a30 <memmove>
 800546c:	90c00017 	ldw	r3,0(r18)
 8005470:	e009883a 	mov	r4,fp
 8005474:	900b883a 	mov	r5,r18
 8005478:	1c07883a 	add	r3,r3,r16
 800547c:	90c00015 	stw	r3,0(r18)
 8005480:	8027883a 	mov	r19,r16
 8005484:	80046d40 	call	80046d4 <_fflush_r>
 8005488:	103f6b26 	beq	r2,zero,8005238 <__sfvwrite_r+0x200>
 800548c:	003f7f06 	br	800528c <__sfvwrite_r+0x254>
 8005490:	400b883a 	mov	r5,r8
 8005494:	e009883a 	mov	r4,fp
 8005498:	8006c340 	call	8006c34 <_realloc_r>
 800549c:	103f7626 	beq	r2,zero,8005278 <__sfvwrite_r+0x240>
 80054a0:	1023883a 	mov	r17,r2
 80054a4:	003f5006 	br	80051e8 <__sfvwrite_r+0x1b0>
 80054a8:	00c00044 	movi	r3,1
 80054ac:	9d000044 	addi	r20,r19,1
 80054b0:	d8c00015 	stw	r3,0(sp)
 80054b4:	003f8206 	br	80052c0 <__sfvwrite_r+0x288>
 80054b8:	9080030b 	ldhu	r2,12(r18)
 80054bc:	00c00244 	movi	r3,9
 80054c0:	013fffc4 	movi	r4,-1
 80054c4:	10801014 	ori	r2,r2,64
 80054c8:	9080030d 	sth	r2,12(r18)
 80054cc:	e0c00015 	stw	r3,0(fp)
 80054d0:	003f0606 	br	80050ec <__sfvwrite_r+0xb4>

080054d4 <_fwalk_reent>:
 80054d4:	defff704 	addi	sp,sp,-36
 80054d8:	dcc00315 	stw	r19,12(sp)
 80054dc:	24c0b804 	addi	r19,r4,736
 80054e0:	dd800615 	stw	r22,24(sp)
 80054e4:	dd400515 	stw	r21,20(sp)
 80054e8:	dfc00815 	stw	ra,32(sp)
 80054ec:	ddc00715 	stw	r23,28(sp)
 80054f0:	dd000415 	stw	r20,16(sp)
 80054f4:	dc800215 	stw	r18,8(sp)
 80054f8:	dc400115 	stw	r17,4(sp)
 80054fc:	dc000015 	stw	r16,0(sp)
 8005500:	202b883a 	mov	r21,r4
 8005504:	282d883a 	mov	r22,r5
 8005508:	800495c0 	call	800495c <__sfp_lock_acquire>
 800550c:	98002126 	beq	r19,zero,8005594 <_fwalk_reent+0xc0>
 8005510:	002f883a 	mov	r23,zero
 8005514:	9c800117 	ldw	r18,4(r19)
 8005518:	9c000217 	ldw	r16,8(r19)
 800551c:	90bfffc4 	addi	r2,r18,-1
 8005520:	10000d16 	blt	r2,zero,8005558 <_fwalk_reent+0x84>
 8005524:	0023883a 	mov	r17,zero
 8005528:	053fffc4 	movi	r20,-1
 800552c:	8080030f 	ldh	r2,12(r16)
 8005530:	8c400044 	addi	r17,r17,1
 8005534:	10000626 	beq	r2,zero,8005550 <_fwalk_reent+0x7c>
 8005538:	8080038f 	ldh	r2,14(r16)
 800553c:	800b883a 	mov	r5,r16
 8005540:	a809883a 	mov	r4,r21
 8005544:	15000226 	beq	r2,r20,8005550 <_fwalk_reent+0x7c>
 8005548:	b03ee83a 	callr	r22
 800554c:	b8aeb03a 	or	r23,r23,r2
 8005550:	84001704 	addi	r16,r16,92
 8005554:	947ff51e 	bne	r18,r17,800552c <_fwalk_reent+0x58>
 8005558:	9cc00017 	ldw	r19,0(r19)
 800555c:	983fed1e 	bne	r19,zero,8005514 <_fwalk_reent+0x40>
 8005560:	80049600 	call	8004960 <__sfp_lock_release>
 8005564:	b805883a 	mov	r2,r23
 8005568:	dfc00817 	ldw	ra,32(sp)
 800556c:	ddc00717 	ldw	r23,28(sp)
 8005570:	dd800617 	ldw	r22,24(sp)
 8005574:	dd400517 	ldw	r21,20(sp)
 8005578:	dd000417 	ldw	r20,16(sp)
 800557c:	dcc00317 	ldw	r19,12(sp)
 8005580:	dc800217 	ldw	r18,8(sp)
 8005584:	dc400117 	ldw	r17,4(sp)
 8005588:	dc000017 	ldw	r16,0(sp)
 800558c:	dec00904 	addi	sp,sp,36
 8005590:	f800283a 	ret
 8005594:	002f883a 	mov	r23,zero
 8005598:	003ff106 	br	8005560 <_fwalk_reent+0x8c>

0800559c <_fwalk>:
 800559c:	defff804 	addi	sp,sp,-32
 80055a0:	dcc00315 	stw	r19,12(sp)
 80055a4:	24c0b804 	addi	r19,r4,736
 80055a8:	dd400515 	stw	r21,20(sp)
 80055ac:	dfc00715 	stw	ra,28(sp)
 80055b0:	dd800615 	stw	r22,24(sp)
 80055b4:	dd000415 	stw	r20,16(sp)
 80055b8:	dc800215 	stw	r18,8(sp)
 80055bc:	dc400115 	stw	r17,4(sp)
 80055c0:	dc000015 	stw	r16,0(sp)
 80055c4:	282b883a 	mov	r21,r5
 80055c8:	800495c0 	call	800495c <__sfp_lock_acquire>
 80055cc:	98001f26 	beq	r19,zero,800564c <_fwalk+0xb0>
 80055d0:	002d883a 	mov	r22,zero
 80055d4:	9c800117 	ldw	r18,4(r19)
 80055d8:	9c000217 	ldw	r16,8(r19)
 80055dc:	90bfffc4 	addi	r2,r18,-1
 80055e0:	10000c16 	blt	r2,zero,8005614 <_fwalk+0x78>
 80055e4:	0023883a 	mov	r17,zero
 80055e8:	053fffc4 	movi	r20,-1
 80055ec:	8080030f 	ldh	r2,12(r16)
 80055f0:	8c400044 	addi	r17,r17,1
 80055f4:	10000526 	beq	r2,zero,800560c <_fwalk+0x70>
 80055f8:	8080038f 	ldh	r2,14(r16)
 80055fc:	8009883a 	mov	r4,r16
 8005600:	15000226 	beq	r2,r20,800560c <_fwalk+0x70>
 8005604:	a83ee83a 	callr	r21
 8005608:	b0acb03a 	or	r22,r22,r2
 800560c:	84001704 	addi	r16,r16,92
 8005610:	947ff61e 	bne	r18,r17,80055ec <_fwalk+0x50>
 8005614:	9cc00017 	ldw	r19,0(r19)
 8005618:	983fee1e 	bne	r19,zero,80055d4 <_fwalk+0x38>
 800561c:	80049600 	call	8004960 <__sfp_lock_release>
 8005620:	b005883a 	mov	r2,r22
 8005624:	dfc00717 	ldw	ra,28(sp)
 8005628:	dd800617 	ldw	r22,24(sp)
 800562c:	dd400517 	ldw	r21,20(sp)
 8005630:	dd000417 	ldw	r20,16(sp)
 8005634:	dcc00317 	ldw	r19,12(sp)
 8005638:	dc800217 	ldw	r18,8(sp)
 800563c:	dc400117 	ldw	r17,4(sp)
 8005640:	dc000017 	ldw	r16,0(sp)
 8005644:	dec00804 	addi	sp,sp,32
 8005648:	f800283a 	ret
 800564c:	002d883a 	mov	r22,zero
 8005650:	003ff206 	br	800561c <_fwalk+0x80>

08005654 <__locale_charset>:
 8005654:	d0a00517 	ldw	r2,-32748(gp)
 8005658:	f800283a 	ret

0800565c <_localeconv_r>:
 800565c:	00820074 	movhi	r2,2049
 8005660:	1083a804 	addi	r2,r2,3744
 8005664:	f800283a 	ret

08005668 <localeconv>:
 8005668:	00820074 	movhi	r2,2049
 800566c:	108aee04 	addi	r2,r2,11192
 8005670:	11000017 	ldw	r4,0(r2)
 8005674:	800565c1 	jmpi	800565c <_localeconv_r>

08005678 <_setlocale_r>:
 8005678:	defffc04 	addi	sp,sp,-16
 800567c:	00c20074 	movhi	r3,2049
 8005680:	18c3a304 	addi	r3,r3,3724
 8005684:	dc800215 	stw	r18,8(sp)
 8005688:	dc400115 	stw	r17,4(sp)
 800568c:	dc000015 	stw	r16,0(sp)
 8005690:	2023883a 	mov	r17,r4
 8005694:	2825883a 	mov	r18,r5
 8005698:	dfc00315 	stw	ra,12(sp)
 800569c:	3021883a 	mov	r16,r6
 80056a0:	3009883a 	mov	r4,r6
 80056a4:	180b883a 	mov	r5,r3
 80056a8:	30000926 	beq	r6,zero,80056d0 <_setlocale_r+0x58>
 80056ac:	80073e40 	call	80073e4 <strcmp>
 80056b0:	8009883a 	mov	r4,r16
 80056b4:	01420074 	movhi	r5,2049
 80056b8:	29438e04 	addi	r5,r5,3640
 80056bc:	10000b1e 	bne	r2,zero,80056ec <_setlocale_r+0x74>
 80056c0:	8c000d15 	stw	r16,52(r17)
 80056c4:	8c800c15 	stw	r18,48(r17)
 80056c8:	00c20074 	movhi	r3,2049
 80056cc:	18c3a304 	addi	r3,r3,3724
 80056d0:	1805883a 	mov	r2,r3
 80056d4:	dfc00317 	ldw	ra,12(sp)
 80056d8:	dc800217 	ldw	r18,8(sp)
 80056dc:	dc400117 	ldw	r17,4(sp)
 80056e0:	dc000017 	ldw	r16,0(sp)
 80056e4:	dec00404 	addi	sp,sp,16
 80056e8:	f800283a 	ret
 80056ec:	80073e40 	call	80073e4 <strcmp>
 80056f0:	0007883a 	mov	r3,zero
 80056f4:	103ff226 	beq	r2,zero,80056c0 <_setlocale_r+0x48>
 80056f8:	003ff506 	br	80056d0 <_setlocale_r+0x58>

080056fc <setlocale>:
 80056fc:	01820074 	movhi	r6,2049
 8005700:	318aee04 	addi	r6,r6,11192
 8005704:	2007883a 	mov	r3,r4
 8005708:	31000017 	ldw	r4,0(r6)
 800570c:	280d883a 	mov	r6,r5
 8005710:	180b883a 	mov	r5,r3
 8005714:	80056781 	jmpi	8005678 <_setlocale_r>

08005718 <__smakebuf_r>:
 8005718:	2880030b 	ldhu	r2,12(r5)
 800571c:	deffed04 	addi	sp,sp,-76
 8005720:	dc401015 	stw	r17,64(sp)
 8005724:	1080008c 	andi	r2,r2,2
 8005728:	dc000f15 	stw	r16,60(sp)
 800572c:	dfc01215 	stw	ra,72(sp)
 8005730:	dc801115 	stw	r18,68(sp)
 8005734:	2821883a 	mov	r16,r5
 8005738:	2023883a 	mov	r17,r4
 800573c:	10000b26 	beq	r2,zero,800576c <__smakebuf_r+0x54>
 8005740:	28c010c4 	addi	r3,r5,67
 8005744:	00800044 	movi	r2,1
 8005748:	28800515 	stw	r2,20(r5)
 800574c:	28c00415 	stw	r3,16(r5)
 8005750:	28c00015 	stw	r3,0(r5)
 8005754:	dfc01217 	ldw	ra,72(sp)
 8005758:	dc801117 	ldw	r18,68(sp)
 800575c:	dc401017 	ldw	r17,64(sp)
 8005760:	dc000f17 	ldw	r16,60(sp)
 8005764:	dec01304 	addi	sp,sp,76
 8005768:	f800283a 	ret
 800576c:	2940038f 	ldh	r5,14(r5)
 8005770:	28002116 	blt	r5,zero,80057f8 <__smakebuf_r+0xe0>
 8005774:	d80d883a 	mov	r6,sp
 8005778:	80077740 	call	8007774 <_fstat_r>
 800577c:	10001e16 	blt	r2,zero,80057f8 <__smakebuf_r+0xe0>
 8005780:	d8800117 	ldw	r2,4(sp)
 8005784:	00e00014 	movui	r3,32768
 8005788:	113c000c 	andi	r4,r2,61440
 800578c:	20c03126 	beq	r4,r3,8005854 <__smakebuf_r+0x13c>
 8005790:	8080030b 	ldhu	r2,12(r16)
 8005794:	00c80004 	movi	r3,8192
 8005798:	10820014 	ori	r2,r2,2048
 800579c:	8080030d 	sth	r2,12(r16)
 80057a0:	20c01e26 	beq	r4,r3,800581c <__smakebuf_r+0x104>
 80057a4:	04810004 	movi	r18,1024
 80057a8:	8809883a 	mov	r4,r17
 80057ac:	900b883a 	mov	r5,r18
 80057b0:	80005100 	call	8000510 <_malloc_r>
 80057b4:	1009883a 	mov	r4,r2
 80057b8:	10003126 	beq	r2,zero,8005880 <__smakebuf_r+0x168>
 80057bc:	80c0030b 	ldhu	r3,12(r16)
 80057c0:	00820034 	movhi	r2,2048
 80057c4:	10929404 	addi	r2,r2,19024
 80057c8:	88800f15 	stw	r2,60(r17)
 80057cc:	18c02014 	ori	r3,r3,128
 80057d0:	84800515 	stw	r18,20(r16)
 80057d4:	80c0030d 	sth	r3,12(r16)
 80057d8:	81000415 	stw	r4,16(r16)
 80057dc:	81000015 	stw	r4,0(r16)
 80057e0:	dfc01217 	ldw	ra,72(sp)
 80057e4:	dc801117 	ldw	r18,68(sp)
 80057e8:	dc401017 	ldw	r17,64(sp)
 80057ec:	dc000f17 	ldw	r16,60(sp)
 80057f0:	dec01304 	addi	sp,sp,76
 80057f4:	f800283a 	ret
 80057f8:	80c0030b 	ldhu	r3,12(r16)
 80057fc:	1880200c 	andi	r2,r3,128
 8005800:	10000426 	beq	r2,zero,8005814 <__smakebuf_r+0xfc>
 8005804:	04801004 	movi	r18,64
 8005808:	18820014 	ori	r2,r3,2048
 800580c:	8080030d 	sth	r2,12(r16)
 8005810:	003fe506 	br	80057a8 <__smakebuf_r+0x90>
 8005814:	04810004 	movi	r18,1024
 8005818:	003ffb06 	br	8005808 <__smakebuf_r+0xf0>
 800581c:	8140038f 	ldh	r5,14(r16)
 8005820:	8809883a 	mov	r4,r17
 8005824:	80077e80 	call	80077e8 <_isatty_r>
 8005828:	103fde26 	beq	r2,zero,80057a4 <__smakebuf_r+0x8c>
 800582c:	8080030b 	ldhu	r2,12(r16)
 8005830:	80c010c4 	addi	r3,r16,67
 8005834:	04810004 	movi	r18,1024
 8005838:	10800054 	ori	r2,r2,1
 800583c:	8080030d 	sth	r2,12(r16)
 8005840:	00800044 	movi	r2,1
 8005844:	80c00415 	stw	r3,16(r16)
 8005848:	80800515 	stw	r2,20(r16)
 800584c:	80c00015 	stw	r3,0(r16)
 8005850:	003fd506 	br	80057a8 <__smakebuf_r+0x90>
 8005854:	80c00a17 	ldw	r3,40(r16)
 8005858:	00820034 	movhi	r2,2048
 800585c:	109ca804 	addi	r2,r2,29344
 8005860:	18bfcb1e 	bne	r3,r2,8005790 <__smakebuf_r+0x78>
 8005864:	8080030b 	ldhu	r2,12(r16)
 8005868:	00c10004 	movi	r3,1024
 800586c:	1825883a 	mov	r18,r3
 8005870:	10c4b03a 	or	r2,r2,r3
 8005874:	8080030d 	sth	r2,12(r16)
 8005878:	80c01315 	stw	r3,76(r16)
 800587c:	003fca06 	br	80057a8 <__smakebuf_r+0x90>
 8005880:	8100030b 	ldhu	r4,12(r16)
 8005884:	2080800c 	andi	r2,r4,512
 8005888:	103fb21e 	bne	r2,zero,8005754 <__smakebuf_r+0x3c>
 800588c:	80c010c4 	addi	r3,r16,67
 8005890:	21000094 	ori	r4,r4,2
 8005894:	00800044 	movi	r2,1
 8005898:	80800515 	stw	r2,20(r16)
 800589c:	8100030d 	sth	r4,12(r16)
 80058a0:	80c00415 	stw	r3,16(r16)
 80058a4:	80c00015 	stw	r3,0(r16)
 80058a8:	003faa06 	br	8005754 <__smakebuf_r+0x3c>

080058ac <memchr>:
 80058ac:	008000c4 	movi	r2,3
 80058b0:	29403fcc 	andi	r5,r5,255
 80058b4:	2007883a 	mov	r3,r4
 80058b8:	1180022e 	bgeu	r2,r6,80058c4 <memchr+0x18>
 80058bc:	2084703a 	and	r2,r4,r2
 80058c0:	10000b26 	beq	r2,zero,80058f0 <memchr+0x44>
 80058c4:	313fffc4 	addi	r4,r6,-1
 80058c8:	3000051e 	bne	r6,zero,80058e0 <memchr+0x34>
 80058cc:	00002c06 	br	8005980 <memchr+0xd4>
 80058d0:	213fffc4 	addi	r4,r4,-1
 80058d4:	00bfffc4 	movi	r2,-1
 80058d8:	18c00044 	addi	r3,r3,1
 80058dc:	20802826 	beq	r4,r2,8005980 <memchr+0xd4>
 80058e0:	18800003 	ldbu	r2,0(r3)
 80058e4:	28bffa1e 	bne	r5,r2,80058d0 <memchr+0x24>
 80058e8:	1805883a 	mov	r2,r3
 80058ec:	f800283a 	ret
 80058f0:	0011883a 	mov	r8,zero
 80058f4:	0007883a 	mov	r3,zero
 80058f8:	01c00104 	movi	r7,4
 80058fc:	4004923a 	slli	r2,r8,8
 8005900:	18c00044 	addi	r3,r3,1
 8005904:	1151883a 	add	r8,r2,r5
 8005908:	19fffc1e 	bne	r3,r7,80058fc <memchr+0x50>
 800590c:	02bfbff4 	movhi	r10,65279
 8005910:	52bfbfc4 	addi	r10,r10,-257
 8005914:	02602074 	movhi	r9,32897
 8005918:	4a602004 	addi	r9,r9,-32640
 800591c:	02c000c4 	movi	r11,3
 8005920:	20800017 	ldw	r2,0(r4)
 8005924:	31bfff04 	addi	r6,r6,-4
 8005928:	200f883a 	mov	r7,r4
 800592c:	1204f03a 	xor	r2,r2,r8
 8005930:	1287883a 	add	r3,r2,r10
 8005934:	1a46703a 	and	r3,r3,r9
 8005938:	0084303a 	nor	r2,zero,r2
 800593c:	10c4703a 	and	r2,r2,r3
 8005940:	10000b26 	beq	r2,zero,8005970 <memchr+0xc4>
 8005944:	20800003 	ldbu	r2,0(r4)
 8005948:	28800f26 	beq	r5,r2,8005988 <memchr+0xdc>
 800594c:	20800043 	ldbu	r2,1(r4)
 8005950:	21c00044 	addi	r7,r4,1
 8005954:	28800c26 	beq	r5,r2,8005988 <memchr+0xdc>
 8005958:	20800083 	ldbu	r2,2(r4)
 800595c:	21c00084 	addi	r7,r4,2
 8005960:	28800926 	beq	r5,r2,8005988 <memchr+0xdc>
 8005964:	208000c3 	ldbu	r2,3(r4)
 8005968:	21c000c4 	addi	r7,r4,3
 800596c:	28800626 	beq	r5,r2,8005988 <memchr+0xdc>
 8005970:	21000104 	addi	r4,r4,4
 8005974:	59bfea36 	bltu	r11,r6,8005920 <memchr+0x74>
 8005978:	2007883a 	mov	r3,r4
 800597c:	003fd106 	br	80058c4 <memchr+0x18>
 8005980:	0005883a 	mov	r2,zero
 8005984:	f800283a 	ret
 8005988:	3805883a 	mov	r2,r7
 800598c:	f800283a 	ret

08005990 <memcpy>:
 8005990:	01c003c4 	movi	r7,15
 8005994:	2007883a 	mov	r3,r4
 8005998:	3980032e 	bgeu	r7,r6,80059a8 <memcpy+0x18>
 800599c:	2904b03a 	or	r2,r5,r4
 80059a0:	108000cc 	andi	r2,r2,3
 80059a4:	10000926 	beq	r2,zero,80059cc <memcpy+0x3c>
 80059a8:	30000626 	beq	r6,zero,80059c4 <memcpy+0x34>
 80059ac:	30cd883a 	add	r6,r6,r3
 80059b0:	28800003 	ldbu	r2,0(r5)
 80059b4:	29400044 	addi	r5,r5,1
 80059b8:	18800005 	stb	r2,0(r3)
 80059bc:	18c00044 	addi	r3,r3,1
 80059c0:	30fffb1e 	bne	r6,r3,80059b0 <memcpy+0x20>
 80059c4:	2005883a 	mov	r2,r4
 80059c8:	f800283a 	ret
 80059cc:	3811883a 	mov	r8,r7
 80059d0:	200f883a 	mov	r7,r4
 80059d4:	28c00017 	ldw	r3,0(r5)
 80059d8:	31bffc04 	addi	r6,r6,-16
 80059dc:	38c00015 	stw	r3,0(r7)
 80059e0:	28800117 	ldw	r2,4(r5)
 80059e4:	38800115 	stw	r2,4(r7)
 80059e8:	28c00217 	ldw	r3,8(r5)
 80059ec:	38c00215 	stw	r3,8(r7)
 80059f0:	28800317 	ldw	r2,12(r5)
 80059f4:	29400404 	addi	r5,r5,16
 80059f8:	38800315 	stw	r2,12(r7)
 80059fc:	39c00404 	addi	r7,r7,16
 8005a00:	41bff436 	bltu	r8,r6,80059d4 <memcpy+0x44>
 8005a04:	008000c4 	movi	r2,3
 8005a08:	1180072e 	bgeu	r2,r6,8005a28 <memcpy+0x98>
 8005a0c:	1007883a 	mov	r3,r2
 8005a10:	28800017 	ldw	r2,0(r5)
 8005a14:	31bfff04 	addi	r6,r6,-4
 8005a18:	29400104 	addi	r5,r5,4
 8005a1c:	38800015 	stw	r2,0(r7)
 8005a20:	39c00104 	addi	r7,r7,4
 8005a24:	19bffa36 	bltu	r3,r6,8005a10 <memcpy+0x80>
 8005a28:	3807883a 	mov	r3,r7
 8005a2c:	003fde06 	br	80059a8 <memcpy+0x18>

08005a30 <memmove>:
 8005a30:	2807883a 	mov	r3,r5
 8005a34:	2011883a 	mov	r8,r4
 8005a38:	29000c2e 	bgeu	r5,r4,8005a6c <memmove+0x3c>
 8005a3c:	298f883a 	add	r7,r5,r6
 8005a40:	21c00a2e 	bgeu	r4,r7,8005a6c <memmove+0x3c>
 8005a44:	30000726 	beq	r6,zero,8005a64 <memmove+0x34>
 8005a48:	2187883a 	add	r3,r4,r6
 8005a4c:	198dc83a 	sub	r6,r3,r6
 8005a50:	39ffffc4 	addi	r7,r7,-1
 8005a54:	38800003 	ldbu	r2,0(r7)
 8005a58:	18ffffc4 	addi	r3,r3,-1
 8005a5c:	18800005 	stb	r2,0(r3)
 8005a60:	19bffb1e 	bne	r3,r6,8005a50 <memmove+0x20>
 8005a64:	2005883a 	mov	r2,r4
 8005a68:	f800283a 	ret
 8005a6c:	01c003c4 	movi	r7,15
 8005a70:	39800a36 	bltu	r7,r6,8005a9c <memmove+0x6c>
 8005a74:	303ffb26 	beq	r6,zero,8005a64 <memmove+0x34>
 8005a78:	400f883a 	mov	r7,r8
 8005a7c:	320d883a 	add	r6,r6,r8
 8005a80:	28800003 	ldbu	r2,0(r5)
 8005a84:	29400044 	addi	r5,r5,1
 8005a88:	38800005 	stb	r2,0(r7)
 8005a8c:	39c00044 	addi	r7,r7,1
 8005a90:	39bffb1e 	bne	r7,r6,8005a80 <memmove+0x50>
 8005a94:	2005883a 	mov	r2,r4
 8005a98:	f800283a 	ret
 8005a9c:	1904b03a 	or	r2,r3,r4
 8005aa0:	108000cc 	andi	r2,r2,3
 8005aa4:	103ff31e 	bne	r2,zero,8005a74 <memmove+0x44>
 8005aa8:	3811883a 	mov	r8,r7
 8005aac:	180b883a 	mov	r5,r3
 8005ab0:	200f883a 	mov	r7,r4
 8005ab4:	28c00017 	ldw	r3,0(r5)
 8005ab8:	31bffc04 	addi	r6,r6,-16
 8005abc:	38c00015 	stw	r3,0(r7)
 8005ac0:	28800117 	ldw	r2,4(r5)
 8005ac4:	38800115 	stw	r2,4(r7)
 8005ac8:	28c00217 	ldw	r3,8(r5)
 8005acc:	38c00215 	stw	r3,8(r7)
 8005ad0:	28800317 	ldw	r2,12(r5)
 8005ad4:	29400404 	addi	r5,r5,16
 8005ad8:	38800315 	stw	r2,12(r7)
 8005adc:	39c00404 	addi	r7,r7,16
 8005ae0:	41bff436 	bltu	r8,r6,8005ab4 <memmove+0x84>
 8005ae4:	008000c4 	movi	r2,3
 8005ae8:	1180072e 	bgeu	r2,r6,8005b08 <memmove+0xd8>
 8005aec:	1007883a 	mov	r3,r2
 8005af0:	28800017 	ldw	r2,0(r5)
 8005af4:	31bfff04 	addi	r6,r6,-4
 8005af8:	29400104 	addi	r5,r5,4
 8005afc:	38800015 	stw	r2,0(r7)
 8005b00:	39c00104 	addi	r7,r7,4
 8005b04:	19bffa36 	bltu	r3,r6,8005af0 <memmove+0xc0>
 8005b08:	3811883a 	mov	r8,r7
 8005b0c:	003fd906 	br	8005a74 <memmove+0x44>

08005b10 <memset>:
 8005b10:	008000c4 	movi	r2,3
 8005b14:	29403fcc 	andi	r5,r5,255
 8005b18:	2007883a 	mov	r3,r4
 8005b1c:	1180022e 	bgeu	r2,r6,8005b28 <memset+0x18>
 8005b20:	2084703a 	and	r2,r4,r2
 8005b24:	10000826 	beq	r2,zero,8005b48 <memset+0x38>
 8005b28:	30000526 	beq	r6,zero,8005b40 <memset+0x30>
 8005b2c:	2805883a 	mov	r2,r5
 8005b30:	30cd883a 	add	r6,r6,r3
 8005b34:	18800005 	stb	r2,0(r3)
 8005b38:	18c00044 	addi	r3,r3,1
 8005b3c:	19bffd1e 	bne	r3,r6,8005b34 <memset+0x24>
 8005b40:	2005883a 	mov	r2,r4
 8005b44:	f800283a 	ret
 8005b48:	2804923a 	slli	r2,r5,8
 8005b4c:	020003c4 	movi	r8,15
 8005b50:	200f883a 	mov	r7,r4
 8005b54:	2884b03a 	or	r2,r5,r2
 8005b58:	1006943a 	slli	r3,r2,16
 8005b5c:	10c6b03a 	or	r3,r2,r3
 8005b60:	41800a2e 	bgeu	r8,r6,8005b8c <memset+0x7c>
 8005b64:	4005883a 	mov	r2,r8
 8005b68:	31bffc04 	addi	r6,r6,-16
 8005b6c:	38c00015 	stw	r3,0(r7)
 8005b70:	38c00115 	stw	r3,4(r7)
 8005b74:	38c00215 	stw	r3,8(r7)
 8005b78:	38c00315 	stw	r3,12(r7)
 8005b7c:	39c00404 	addi	r7,r7,16
 8005b80:	11bff936 	bltu	r2,r6,8005b68 <memset+0x58>
 8005b84:	008000c4 	movi	r2,3
 8005b88:	1180052e 	bgeu	r2,r6,8005ba0 <memset+0x90>
 8005b8c:	31bfff04 	addi	r6,r6,-4
 8005b90:	008000c4 	movi	r2,3
 8005b94:	38c00015 	stw	r3,0(r7)
 8005b98:	39c00104 	addi	r7,r7,4
 8005b9c:	11bffb36 	bltu	r2,r6,8005b8c <memset+0x7c>
 8005ba0:	3807883a 	mov	r3,r7
 8005ba4:	003fe006 	br	8005b28 <memset+0x18>

08005ba8 <_Bfree>:
 8005ba8:	28000826 	beq	r5,zero,8005bcc <_Bfree+0x24>
 8005bac:	28800117 	ldw	r2,4(r5)
 8005bb0:	21001317 	ldw	r4,76(r4)
 8005bb4:	1085883a 	add	r2,r2,r2
 8005bb8:	1085883a 	add	r2,r2,r2
 8005bbc:	1105883a 	add	r2,r2,r4
 8005bc0:	10c00017 	ldw	r3,0(r2)
 8005bc4:	28c00015 	stw	r3,0(r5)
 8005bc8:	11400015 	stw	r5,0(r2)
 8005bcc:	f800283a 	ret

08005bd0 <__hi0bits>:
 8005bd0:	20bfffec 	andhi	r2,r4,65535
 8005bd4:	10001426 	beq	r2,zero,8005c28 <__hi0bits+0x58>
 8005bd8:	0007883a 	mov	r3,zero
 8005bdc:	20bfc02c 	andhi	r2,r4,65280
 8005be0:	1000021e 	bne	r2,zero,8005bec <__hi0bits+0x1c>
 8005be4:	2008923a 	slli	r4,r4,8
 8005be8:	18c00204 	addi	r3,r3,8
 8005bec:	20bc002c 	andhi	r2,r4,61440
 8005bf0:	1000021e 	bne	r2,zero,8005bfc <__hi0bits+0x2c>
 8005bf4:	2008913a 	slli	r4,r4,4
 8005bf8:	18c00104 	addi	r3,r3,4
 8005bfc:	20b0002c 	andhi	r2,r4,49152
 8005c00:	1000031e 	bne	r2,zero,8005c10 <__hi0bits+0x40>
 8005c04:	2105883a 	add	r2,r4,r4
 8005c08:	18c00084 	addi	r3,r3,2
 8005c0c:	1089883a 	add	r4,r2,r2
 8005c10:	20000316 	blt	r4,zero,8005c20 <__hi0bits+0x50>
 8005c14:	2090002c 	andhi	r2,r4,16384
 8005c18:	10000626 	beq	r2,zero,8005c34 <__hi0bits+0x64>
 8005c1c:	18c00044 	addi	r3,r3,1
 8005c20:	1805883a 	mov	r2,r3
 8005c24:	f800283a 	ret
 8005c28:	2008943a 	slli	r4,r4,16
 8005c2c:	00c00404 	movi	r3,16
 8005c30:	003fea06 	br	8005bdc <__hi0bits+0xc>
 8005c34:	00c00804 	movi	r3,32
 8005c38:	1805883a 	mov	r2,r3
 8005c3c:	f800283a 	ret

08005c40 <__lo0bits>:
 8005c40:	20c00017 	ldw	r3,0(r4)
 8005c44:	188001cc 	andi	r2,r3,7
 8005c48:	10000a26 	beq	r2,zero,8005c74 <__lo0bits+0x34>
 8005c4c:	1880004c 	andi	r2,r3,1
 8005c50:	1005003a 	cmpeq	r2,r2,zero
 8005c54:	10002126 	beq	r2,zero,8005cdc <__lo0bits+0x9c>
 8005c58:	1880008c 	andi	r2,r3,2
 8005c5c:	1000251e 	bne	r2,zero,8005cf4 <__lo0bits+0xb4>
 8005c60:	1804d0ba 	srli	r2,r3,2
 8005c64:	01400084 	movi	r5,2
 8005c68:	20800015 	stw	r2,0(r4)
 8005c6c:	2805883a 	mov	r2,r5
 8005c70:	f800283a 	ret
 8005c74:	18bfffcc 	andi	r2,r3,65535
 8005c78:	10001526 	beq	r2,zero,8005cd0 <__lo0bits+0x90>
 8005c7c:	000b883a 	mov	r5,zero
 8005c80:	18803fcc 	andi	r2,r3,255
 8005c84:	1000021e 	bne	r2,zero,8005c90 <__lo0bits+0x50>
 8005c88:	1806d23a 	srli	r3,r3,8
 8005c8c:	29400204 	addi	r5,r5,8
 8005c90:	188003cc 	andi	r2,r3,15
 8005c94:	1000021e 	bne	r2,zero,8005ca0 <__lo0bits+0x60>
 8005c98:	1806d13a 	srli	r3,r3,4
 8005c9c:	29400104 	addi	r5,r5,4
 8005ca0:	188000cc 	andi	r2,r3,3
 8005ca4:	1000021e 	bne	r2,zero,8005cb0 <__lo0bits+0x70>
 8005ca8:	1806d0ba 	srli	r3,r3,2
 8005cac:	29400084 	addi	r5,r5,2
 8005cb0:	1880004c 	andi	r2,r3,1
 8005cb4:	1000031e 	bne	r2,zero,8005cc4 <__lo0bits+0x84>
 8005cb8:	1806d07a 	srli	r3,r3,1
 8005cbc:	18000a26 	beq	r3,zero,8005ce8 <__lo0bits+0xa8>
 8005cc0:	29400044 	addi	r5,r5,1
 8005cc4:	2805883a 	mov	r2,r5
 8005cc8:	20c00015 	stw	r3,0(r4)
 8005ccc:	f800283a 	ret
 8005cd0:	1806d43a 	srli	r3,r3,16
 8005cd4:	01400404 	movi	r5,16
 8005cd8:	003fe906 	br	8005c80 <__lo0bits+0x40>
 8005cdc:	000b883a 	mov	r5,zero
 8005ce0:	2805883a 	mov	r2,r5
 8005ce4:	f800283a 	ret
 8005ce8:	01400804 	movi	r5,32
 8005cec:	2805883a 	mov	r2,r5
 8005cf0:	f800283a 	ret
 8005cf4:	1804d07a 	srli	r2,r3,1
 8005cf8:	01400044 	movi	r5,1
 8005cfc:	20800015 	stw	r2,0(r4)
 8005d00:	003fda06 	br	8005c6c <__lo0bits+0x2c>

08005d04 <__mcmp>:
 8005d04:	20800417 	ldw	r2,16(r4)
 8005d08:	28c00417 	ldw	r3,16(r5)
 8005d0c:	10cfc83a 	sub	r7,r2,r3
 8005d10:	38000c1e 	bne	r7,zero,8005d44 <__mcmp+0x40>
 8005d14:	18c5883a 	add	r2,r3,r3
 8005d18:	1085883a 	add	r2,r2,r2
 8005d1c:	10c00504 	addi	r3,r2,20
 8005d20:	21000504 	addi	r4,r4,20
 8005d24:	28cb883a 	add	r5,r5,r3
 8005d28:	2085883a 	add	r2,r4,r2
 8005d2c:	10bfff04 	addi	r2,r2,-4
 8005d30:	297fff04 	addi	r5,r5,-4
 8005d34:	11800017 	ldw	r6,0(r2)
 8005d38:	28c00017 	ldw	r3,0(r5)
 8005d3c:	30c0031e 	bne	r6,r3,8005d4c <__mcmp+0x48>
 8005d40:	20bffa36 	bltu	r4,r2,8005d2c <__mcmp+0x28>
 8005d44:	3805883a 	mov	r2,r7
 8005d48:	f800283a 	ret
 8005d4c:	30c00336 	bltu	r6,r3,8005d5c <__mcmp+0x58>
 8005d50:	01c00044 	movi	r7,1
 8005d54:	3805883a 	mov	r2,r7
 8005d58:	f800283a 	ret
 8005d5c:	01ffffc4 	movi	r7,-1
 8005d60:	003ff806 	br	8005d44 <__mcmp+0x40>

08005d64 <__ulp>:
 8005d64:	295ffc2c 	andhi	r5,r5,32752
 8005d68:	013f3034 	movhi	r4,64704
 8005d6c:	290b883a 	add	r5,r5,r4
 8005d70:	0145c83a 	sub	r2,zero,r5
 8005d74:	1007d53a 	srai	r3,r2,20
 8005d78:	000d883a 	mov	r6,zero
 8005d7c:	0140040e 	bge	zero,r5,8005d90 <__ulp+0x2c>
 8005d80:	280f883a 	mov	r7,r5
 8005d84:	3807883a 	mov	r3,r7
 8005d88:	3005883a 	mov	r2,r6
 8005d8c:	f800283a 	ret
 8005d90:	008004c4 	movi	r2,19
 8005d94:	193ffb04 	addi	r4,r3,-20
 8005d98:	10c00c0e 	bge	r2,r3,8005dcc <__ulp+0x68>
 8005d9c:	008007c4 	movi	r2,31
 8005da0:	1107c83a 	sub	r3,r2,r4
 8005da4:	00800784 	movi	r2,30
 8005da8:	01400044 	movi	r5,1
 8005dac:	11000216 	blt	r2,r4,8005db8 <__ulp+0x54>
 8005db0:	00800044 	movi	r2,1
 8005db4:	10ca983a 	sll	r5,r2,r3
 8005db8:	000f883a 	mov	r7,zero
 8005dbc:	280d883a 	mov	r6,r5
 8005dc0:	3807883a 	mov	r3,r7
 8005dc4:	3005883a 	mov	r2,r6
 8005dc8:	f800283a 	ret
 8005dcc:	00800234 	movhi	r2,8
 8005dd0:	10cfd83a 	sra	r7,r2,r3
 8005dd4:	000d883a 	mov	r6,zero
 8005dd8:	3005883a 	mov	r2,r6
 8005ddc:	3807883a 	mov	r3,r7
 8005de0:	f800283a 	ret

08005de4 <__b2d>:
 8005de4:	20800417 	ldw	r2,16(r4)
 8005de8:	defff904 	addi	sp,sp,-28
 8005dec:	dd000415 	stw	r20,16(sp)
 8005df0:	1085883a 	add	r2,r2,r2
 8005df4:	25000504 	addi	r20,r4,20
 8005df8:	1085883a 	add	r2,r2,r2
 8005dfc:	dc000015 	stw	r16,0(sp)
 8005e00:	a0a1883a 	add	r16,r20,r2
 8005e04:	dd400515 	stw	r21,20(sp)
 8005e08:	857fff17 	ldw	r21,-4(r16)
 8005e0c:	dc400115 	stw	r17,4(sp)
 8005e10:	dfc00615 	stw	ra,24(sp)
 8005e14:	a809883a 	mov	r4,r21
 8005e18:	2823883a 	mov	r17,r5
 8005e1c:	dcc00315 	stw	r19,12(sp)
 8005e20:	dc800215 	stw	r18,8(sp)
 8005e24:	8005bd00 	call	8005bd0 <__hi0bits>
 8005e28:	100b883a 	mov	r5,r2
 8005e2c:	00800804 	movi	r2,32
 8005e30:	1145c83a 	sub	r2,r2,r5
 8005e34:	88800015 	stw	r2,0(r17)
 8005e38:	00800284 	movi	r2,10
 8005e3c:	80ffff04 	addi	r3,r16,-4
 8005e40:	11401416 	blt	r2,r5,8005e94 <__b2d+0xb0>
 8005e44:	008002c4 	movi	r2,11
 8005e48:	1149c83a 	sub	r4,r2,r5
 8005e4c:	a0c02736 	bltu	r20,r3,8005eec <__b2d+0x108>
 8005e50:	000d883a 	mov	r6,zero
 8005e54:	28800544 	addi	r2,r5,21
 8005e58:	a906d83a 	srl	r3,r21,r4
 8005e5c:	a884983a 	sll	r2,r21,r2
 8005e60:	1ccffc34 	orhi	r19,r3,16368
 8005e64:	11a4b03a 	or	r18,r2,r6
 8005e68:	9005883a 	mov	r2,r18
 8005e6c:	9807883a 	mov	r3,r19
 8005e70:	dfc00617 	ldw	ra,24(sp)
 8005e74:	dd400517 	ldw	r21,20(sp)
 8005e78:	dd000417 	ldw	r20,16(sp)
 8005e7c:	dcc00317 	ldw	r19,12(sp)
 8005e80:	dc800217 	ldw	r18,8(sp)
 8005e84:	dc400117 	ldw	r17,4(sp)
 8005e88:	dc000017 	ldw	r16,0(sp)
 8005e8c:	dec00704 	addi	sp,sp,28
 8005e90:	f800283a 	ret
 8005e94:	a0c00e36 	bltu	r20,r3,8005ed0 <__b2d+0xec>
 8005e98:	293ffd44 	addi	r4,r5,-11
 8005e9c:	000d883a 	mov	r6,zero
 8005ea0:	20000f26 	beq	r4,zero,8005ee0 <__b2d+0xfc>
 8005ea4:	00800804 	movi	r2,32
 8005ea8:	110bc83a 	sub	r5,r2,r4
 8005eac:	a0c01236 	bltu	r20,r3,8005ef8 <__b2d+0x114>
 8005eb0:	000f883a 	mov	r7,zero
 8005eb4:	a904983a 	sll	r2,r21,r4
 8005eb8:	3146d83a 	srl	r3,r6,r5
 8005ebc:	3108983a 	sll	r4,r6,r4
 8005ec0:	108ffc34 	orhi	r2,r2,16368
 8005ec4:	18a6b03a 	or	r19,r3,r2
 8005ec8:	3924b03a 	or	r18,r7,r4
 8005ecc:	003fe606 	br	8005e68 <__b2d+0x84>
 8005ed0:	293ffd44 	addi	r4,r5,-11
 8005ed4:	81bffe17 	ldw	r6,-8(r16)
 8005ed8:	80fffe04 	addi	r3,r16,-8
 8005edc:	203ff11e 	bne	r4,zero,8005ea4 <__b2d+0xc0>
 8005ee0:	accffc34 	orhi	r19,r21,16368
 8005ee4:	3025883a 	mov	r18,r6
 8005ee8:	003fdf06 	br	8005e68 <__b2d+0x84>
 8005eec:	18bfff17 	ldw	r2,-4(r3)
 8005ef0:	110cd83a 	srl	r6,r2,r4
 8005ef4:	003fd706 	br	8005e54 <__b2d+0x70>
 8005ef8:	18bfff17 	ldw	r2,-4(r3)
 8005efc:	114ed83a 	srl	r7,r2,r5
 8005f00:	003fec06 	br	8005eb4 <__b2d+0xd0>

08005f04 <__ratio>:
 8005f04:	defff904 	addi	sp,sp,-28
 8005f08:	dc400215 	stw	r17,8(sp)
 8005f0c:	2823883a 	mov	r17,r5
 8005f10:	d80b883a 	mov	r5,sp
 8005f14:	dfc00615 	stw	ra,24(sp)
 8005f18:	dd000515 	stw	r20,20(sp)
 8005f1c:	dcc00415 	stw	r19,16(sp)
 8005f20:	dc800315 	stw	r18,12(sp)
 8005f24:	2025883a 	mov	r18,r4
 8005f28:	8005de40 	call	8005de4 <__b2d>
 8005f2c:	8809883a 	mov	r4,r17
 8005f30:	d9400104 	addi	r5,sp,4
 8005f34:	1027883a 	mov	r19,r2
 8005f38:	1829883a 	mov	r20,r3
 8005f3c:	8005de40 	call	8005de4 <__b2d>
 8005f40:	89000417 	ldw	r4,16(r17)
 8005f44:	91c00417 	ldw	r7,16(r18)
 8005f48:	d9800117 	ldw	r6,4(sp)
 8005f4c:	180b883a 	mov	r5,r3
 8005f50:	390fc83a 	sub	r7,r7,r4
 8005f54:	1009883a 	mov	r4,r2
 8005f58:	d8800017 	ldw	r2,0(sp)
 8005f5c:	380e917a 	slli	r7,r7,5
 8005f60:	2011883a 	mov	r8,r4
 8005f64:	1185c83a 	sub	r2,r2,r6
 8005f68:	11c5883a 	add	r2,r2,r7
 8005f6c:	1006953a 	slli	r3,r2,20
 8005f70:	2813883a 	mov	r9,r5
 8005f74:	00800d0e 	bge	zero,r2,8005fac <__ratio+0xa8>
 8005f78:	1d29883a 	add	r20,r3,r20
 8005f7c:	a00b883a 	mov	r5,r20
 8005f80:	480f883a 	mov	r7,r9
 8005f84:	9809883a 	mov	r4,r19
 8005f88:	400d883a 	mov	r6,r8
 8005f8c:	8008edc0 	call	8008edc <__divdf3>
 8005f90:	dfc00617 	ldw	ra,24(sp)
 8005f94:	dd000517 	ldw	r20,20(sp)
 8005f98:	dcc00417 	ldw	r19,16(sp)
 8005f9c:	dc800317 	ldw	r18,12(sp)
 8005fa0:	dc400217 	ldw	r17,8(sp)
 8005fa4:	dec00704 	addi	sp,sp,28
 8005fa8:	f800283a 	ret
 8005fac:	28d3c83a 	sub	r9,r5,r3
 8005fb0:	003ff206 	br	8005f7c <__ratio+0x78>

08005fb4 <_mprec_log10>:
 8005fb4:	defffe04 	addi	sp,sp,-8
 8005fb8:	008005c4 	movi	r2,23
 8005fbc:	dc000015 	stw	r16,0(sp)
 8005fc0:	dfc00115 	stw	ra,4(sp)
 8005fc4:	2021883a 	mov	r16,r4
 8005fc8:	11000c16 	blt	r2,r4,8005ffc <_mprec_log10+0x48>
 8005fcc:	200490fa 	slli	r2,r4,3
 8005fd0:	00c20074 	movhi	r3,2049
 8005fd4:	18c3b404 	addi	r3,r3,3792
 8005fd8:	10c5883a 	add	r2,r2,r3
 8005fdc:	12400117 	ldw	r9,4(r2)
 8005fe0:	12000017 	ldw	r8,0(r2)
 8005fe4:	4807883a 	mov	r3,r9
 8005fe8:	4005883a 	mov	r2,r8
 8005fec:	dfc00117 	ldw	ra,4(sp)
 8005ff0:	dc000017 	ldw	r16,0(sp)
 8005ff4:	dec00204 	addi	sp,sp,8
 8005ff8:	f800283a 	ret
 8005ffc:	0011883a 	mov	r8,zero
 8006000:	024ffc34 	movhi	r9,16368
 8006004:	0005883a 	mov	r2,zero
 8006008:	00d00934 	movhi	r3,16420
 800600c:	480b883a 	mov	r5,r9
 8006010:	4009883a 	mov	r4,r8
 8006014:	180f883a 	mov	r7,r3
 8006018:	100d883a 	mov	r6,r2
 800601c:	8008b180 	call	8008b18 <__muldf3>
 8006020:	843fffc4 	addi	r16,r16,-1
 8006024:	1011883a 	mov	r8,r2
 8006028:	1813883a 	mov	r9,r3
 800602c:	803ff51e 	bne	r16,zero,8006004 <_mprec_log10+0x50>
 8006030:	4005883a 	mov	r2,r8
 8006034:	4807883a 	mov	r3,r9
 8006038:	dfc00117 	ldw	ra,4(sp)
 800603c:	dc000017 	ldw	r16,0(sp)
 8006040:	dec00204 	addi	sp,sp,8
 8006044:	f800283a 	ret

08006048 <__copybits>:
 8006048:	297fffc4 	addi	r5,r5,-1
 800604c:	30800417 	ldw	r2,16(r6)
 8006050:	280bd17a 	srai	r5,r5,5
 8006054:	31800504 	addi	r6,r6,20
 8006058:	1085883a 	add	r2,r2,r2
 800605c:	294b883a 	add	r5,r5,r5
 8006060:	294b883a 	add	r5,r5,r5
 8006064:	1085883a 	add	r2,r2,r2
 8006068:	290b883a 	add	r5,r5,r4
 800606c:	3087883a 	add	r3,r6,r2
 8006070:	29400104 	addi	r5,r5,4
 8006074:	30c0052e 	bgeu	r6,r3,800608c <__copybits+0x44>
 8006078:	30800017 	ldw	r2,0(r6)
 800607c:	31800104 	addi	r6,r6,4
 8006080:	20800015 	stw	r2,0(r4)
 8006084:	21000104 	addi	r4,r4,4
 8006088:	30fffb36 	bltu	r6,r3,8006078 <__copybits+0x30>
 800608c:	2140032e 	bgeu	r4,r5,800609c <__copybits+0x54>
 8006090:	20000015 	stw	zero,0(r4)
 8006094:	21000104 	addi	r4,r4,4
 8006098:	217ffd36 	bltu	r4,r5,8006090 <__copybits+0x48>
 800609c:	f800283a 	ret

080060a0 <__any_on>:
 80060a0:	20800417 	ldw	r2,16(r4)
 80060a4:	2807d17a 	srai	r3,r5,5
 80060a8:	21000504 	addi	r4,r4,20
 80060ac:	10c00d0e 	bge	r2,r3,80060e4 <__any_on+0x44>
 80060b0:	1085883a 	add	r2,r2,r2
 80060b4:	1085883a 	add	r2,r2,r2
 80060b8:	208d883a 	add	r6,r4,r2
 80060bc:	2180182e 	bgeu	r4,r6,8006120 <__any_on+0x80>
 80060c0:	30bfff17 	ldw	r2,-4(r6)
 80060c4:	30ffff04 	addi	r3,r6,-4
 80060c8:	1000041e 	bne	r2,zero,80060dc <__any_on+0x3c>
 80060cc:	20c0142e 	bgeu	r4,r3,8006120 <__any_on+0x80>
 80060d0:	18ffff04 	addi	r3,r3,-4
 80060d4:	18800017 	ldw	r2,0(r3)
 80060d8:	103ffc26 	beq	r2,zero,80060cc <__any_on+0x2c>
 80060dc:	00800044 	movi	r2,1
 80060e0:	f800283a 	ret
 80060e4:	18800a0e 	bge	r3,r2,8006110 <__any_on+0x70>
 80060e8:	294007cc 	andi	r5,r5,31
 80060ec:	28000826 	beq	r5,zero,8006110 <__any_on+0x70>
 80060f0:	18c5883a 	add	r2,r3,r3
 80060f4:	1085883a 	add	r2,r2,r2
 80060f8:	208d883a 	add	r6,r4,r2
 80060fc:	30c00017 	ldw	r3,0(r6)
 8006100:	1944d83a 	srl	r2,r3,r5
 8006104:	1144983a 	sll	r2,r2,r5
 8006108:	18bff41e 	bne	r3,r2,80060dc <__any_on+0x3c>
 800610c:	003feb06 	br	80060bc <__any_on+0x1c>
 8006110:	18c5883a 	add	r2,r3,r3
 8006114:	1085883a 	add	r2,r2,r2
 8006118:	208d883a 	add	r6,r4,r2
 800611c:	003fe706 	br	80060bc <__any_on+0x1c>
 8006120:	0005883a 	mov	r2,zero
 8006124:	f800283a 	ret

08006128 <_Balloc>:
 8006128:	20c01317 	ldw	r3,76(r4)
 800612c:	defffb04 	addi	sp,sp,-20
 8006130:	dcc00315 	stw	r19,12(sp)
 8006134:	dc800215 	stw	r18,8(sp)
 8006138:	dfc00415 	stw	ra,16(sp)
 800613c:	2825883a 	mov	r18,r5
 8006140:	dc400115 	stw	r17,4(sp)
 8006144:	dc000015 	stw	r16,0(sp)
 8006148:	2027883a 	mov	r19,r4
 800614c:	01800404 	movi	r6,16
 8006150:	01400104 	movi	r5,4
 8006154:	18001726 	beq	r3,zero,80061b4 <_Balloc+0x8c>
 8006158:	01400044 	movi	r5,1
 800615c:	9485883a 	add	r2,r18,r18
 8006160:	2ca2983a 	sll	r17,r5,r18
 8006164:	1085883a 	add	r2,r2,r2
 8006168:	10c7883a 	add	r3,r2,r3
 800616c:	1c000017 	ldw	r16,0(r3)
 8006170:	8c4d883a 	add	r6,r17,r17
 8006174:	318d883a 	add	r6,r6,r6
 8006178:	9809883a 	mov	r4,r19
 800617c:	31800504 	addi	r6,r6,20
 8006180:	80001226 	beq	r16,zero,80061cc <_Balloc+0xa4>
 8006184:	80800017 	ldw	r2,0(r16)
 8006188:	18800015 	stw	r2,0(r3)
 800618c:	80000415 	stw	zero,16(r16)
 8006190:	80000315 	stw	zero,12(r16)
 8006194:	8005883a 	mov	r2,r16
 8006198:	dfc00417 	ldw	ra,16(sp)
 800619c:	dcc00317 	ldw	r19,12(sp)
 80061a0:	dc800217 	ldw	r18,8(sp)
 80061a4:	dc400117 	ldw	r17,4(sp)
 80061a8:	dc000017 	ldw	r16,0(sp)
 80061ac:	dec00504 	addi	sp,sp,20
 80061b0:	f800283a 	ret
 80061b4:	80075180 	call	8007518 <_calloc_r>
 80061b8:	1007883a 	mov	r3,r2
 80061bc:	0021883a 	mov	r16,zero
 80061c0:	98801315 	stw	r2,76(r19)
 80061c4:	103fe41e 	bne	r2,zero,8006158 <_Balloc+0x30>
 80061c8:	003ff206 	br	8006194 <_Balloc+0x6c>
 80061cc:	80075180 	call	8007518 <_calloc_r>
 80061d0:	103ff026 	beq	r2,zero,8006194 <_Balloc+0x6c>
 80061d4:	1021883a 	mov	r16,r2
 80061d8:	14800115 	stw	r18,4(r2)
 80061dc:	14400215 	stw	r17,8(r2)
 80061e0:	003fea06 	br	800618c <_Balloc+0x64>

080061e4 <__d2b>:
 80061e4:	defff504 	addi	sp,sp,-44
 80061e8:	dcc00515 	stw	r19,20(sp)
 80061ec:	04c00044 	movi	r19,1
 80061f0:	dc000215 	stw	r16,8(sp)
 80061f4:	2821883a 	mov	r16,r5
 80061f8:	980b883a 	mov	r5,r19
 80061fc:	ddc00915 	stw	r23,36(sp)
 8006200:	dd800815 	stw	r22,32(sp)
 8006204:	dd400715 	stw	r21,28(sp)
 8006208:	dd000615 	stw	r20,24(sp)
 800620c:	dc800415 	stw	r18,16(sp)
 8006210:	dc400315 	stw	r17,12(sp)
 8006214:	dfc00a15 	stw	ra,40(sp)
 8006218:	3023883a 	mov	r17,r6
 800621c:	382d883a 	mov	r22,r7
 8006220:	ddc00b17 	ldw	r23,44(sp)
 8006224:	80061280 	call	8006128 <_Balloc>
 8006228:	1025883a 	mov	r18,r2
 800622c:	00a00034 	movhi	r2,32768
 8006230:	10bfffc4 	addi	r2,r2,-1
 8006234:	8888703a 	and	r4,r17,r2
 8006238:	202ad53a 	srli	r21,r4,20
 800623c:	00800434 	movhi	r2,16
 8006240:	10bfffc4 	addi	r2,r2,-1
 8006244:	8886703a 	and	r3,r17,r2
 8006248:	a829003a 	cmpeq	r20,r21,zero
 800624c:	800b883a 	mov	r5,r16
 8006250:	d8c00115 	stw	r3,4(sp)
 8006254:	94000504 	addi	r16,r18,20
 8006258:	a000021e 	bne	r20,zero,8006264 <__d2b+0x80>
 800625c:	18c00434 	orhi	r3,r3,16
 8006260:	d8c00115 	stw	r3,4(sp)
 8006264:	28002726 	beq	r5,zero,8006304 <__d2b+0x120>
 8006268:	d809883a 	mov	r4,sp
 800626c:	d9400015 	stw	r5,0(sp)
 8006270:	8005c400 	call	8005c40 <__lo0bits>
 8006274:	100d883a 	mov	r6,r2
 8006278:	10003526 	beq	r2,zero,8006350 <__d2b+0x16c>
 800627c:	d8c00117 	ldw	r3,4(sp)
 8006280:	00800804 	movi	r2,32
 8006284:	1185c83a 	sub	r2,r2,r6
 8006288:	d9000017 	ldw	r4,0(sp)
 800628c:	1886983a 	sll	r3,r3,r2
 8006290:	1906b03a 	or	r3,r3,r4
 8006294:	90c00515 	stw	r3,20(r18)
 8006298:	d8c00117 	ldw	r3,4(sp)
 800629c:	1986d83a 	srl	r3,r3,r6
 80062a0:	d8c00115 	stw	r3,4(sp)
 80062a4:	180b003a 	cmpeq	r5,r3,zero
 80062a8:	00800084 	movi	r2,2
 80062ac:	114bc83a 	sub	r5,r2,r5
 80062b0:	80c00115 	stw	r3,4(r16)
 80062b4:	91400415 	stw	r5,16(r18)
 80062b8:	a0001a1e 	bne	r20,zero,8006324 <__d2b+0x140>
 80062bc:	3545883a 	add	r2,r6,r21
 80062c0:	10bef344 	addi	r2,r2,-1075
 80062c4:	00c00d44 	movi	r3,53
 80062c8:	b0800015 	stw	r2,0(r22)
 80062cc:	1987c83a 	sub	r3,r3,r6
 80062d0:	b8c00015 	stw	r3,0(r23)
 80062d4:	9005883a 	mov	r2,r18
 80062d8:	dfc00a17 	ldw	ra,40(sp)
 80062dc:	ddc00917 	ldw	r23,36(sp)
 80062e0:	dd800817 	ldw	r22,32(sp)
 80062e4:	dd400717 	ldw	r21,28(sp)
 80062e8:	dd000617 	ldw	r20,24(sp)
 80062ec:	dcc00517 	ldw	r19,20(sp)
 80062f0:	dc800417 	ldw	r18,16(sp)
 80062f4:	dc400317 	ldw	r17,12(sp)
 80062f8:	dc000217 	ldw	r16,8(sp)
 80062fc:	dec00b04 	addi	sp,sp,44
 8006300:	f800283a 	ret
 8006304:	d9000104 	addi	r4,sp,4
 8006308:	8005c400 	call	8005c40 <__lo0bits>
 800630c:	11800804 	addi	r6,r2,32
 8006310:	d8800117 	ldw	r2,4(sp)
 8006314:	94c00415 	stw	r19,16(r18)
 8006318:	980b883a 	mov	r5,r19
 800631c:	90800515 	stw	r2,20(r18)
 8006320:	a03fe626 	beq	r20,zero,80062bc <__d2b+0xd8>
 8006324:	2945883a 	add	r2,r5,r5
 8006328:	1085883a 	add	r2,r2,r2
 800632c:	1405883a 	add	r2,r2,r16
 8006330:	113fff17 	ldw	r4,-4(r2)
 8006334:	30fef384 	addi	r3,r6,-1074
 8006338:	2820917a 	slli	r16,r5,5
 800633c:	b0c00015 	stw	r3,0(r22)
 8006340:	8005bd00 	call	8005bd0 <__hi0bits>
 8006344:	80a1c83a 	sub	r16,r16,r2
 8006348:	bc000015 	stw	r16,0(r23)
 800634c:	003fe106 	br	80062d4 <__d2b+0xf0>
 8006350:	d8800017 	ldw	r2,0(sp)
 8006354:	90800515 	stw	r2,20(r18)
 8006358:	d8c00117 	ldw	r3,4(sp)
 800635c:	003fd106 	br	80062a4 <__d2b+0xc0>

08006360 <__mdiff>:
 8006360:	defffb04 	addi	sp,sp,-20
 8006364:	dc000015 	stw	r16,0(sp)
 8006368:	2821883a 	mov	r16,r5
 800636c:	dc800215 	stw	r18,8(sp)
 8006370:	300b883a 	mov	r5,r6
 8006374:	2025883a 	mov	r18,r4
 8006378:	8009883a 	mov	r4,r16
 800637c:	dc400115 	stw	r17,4(sp)
 8006380:	dfc00415 	stw	ra,16(sp)
 8006384:	dcc00315 	stw	r19,12(sp)
 8006388:	3023883a 	mov	r17,r6
 800638c:	8005d040 	call	8005d04 <__mcmp>
 8006390:	10004226 	beq	r2,zero,800649c <__mdiff+0x13c>
 8006394:	10005016 	blt	r2,zero,80064d8 <__mdiff+0x178>
 8006398:	0027883a 	mov	r19,zero
 800639c:	81400117 	ldw	r5,4(r16)
 80063a0:	9009883a 	mov	r4,r18
 80063a4:	80061280 	call	8006128 <_Balloc>
 80063a8:	1019883a 	mov	r12,r2
 80063ac:	82800417 	ldw	r10,16(r16)
 80063b0:	88800417 	ldw	r2,16(r17)
 80063b4:	81800504 	addi	r6,r16,20
 80063b8:	5287883a 	add	r3,r10,r10
 80063bc:	1085883a 	add	r2,r2,r2
 80063c0:	18c7883a 	add	r3,r3,r3
 80063c4:	1085883a 	add	r2,r2,r2
 80063c8:	8a000504 	addi	r8,r17,20
 80063cc:	64c00315 	stw	r19,12(r12)
 80063d0:	30db883a 	add	r13,r6,r3
 80063d4:	4097883a 	add	r11,r8,r2
 80063d8:	61c00504 	addi	r7,r12,20
 80063dc:	0013883a 	mov	r9,zero
 80063e0:	31000017 	ldw	r4,0(r6)
 80063e4:	41400017 	ldw	r5,0(r8)
 80063e8:	42000104 	addi	r8,r8,4
 80063ec:	20bfffcc 	andi	r2,r4,65535
 80063f0:	28ffffcc 	andi	r3,r5,65535
 80063f4:	10c5c83a 	sub	r2,r2,r3
 80063f8:	1245883a 	add	r2,r2,r9
 80063fc:	2008d43a 	srli	r4,r4,16
 8006400:	280ad43a 	srli	r5,r5,16
 8006404:	1007d43a 	srai	r3,r2,16
 8006408:	3880000d 	sth	r2,0(r7)
 800640c:	2149c83a 	sub	r4,r4,r5
 8006410:	20c9883a 	add	r4,r4,r3
 8006414:	3900008d 	sth	r4,2(r7)
 8006418:	31800104 	addi	r6,r6,4
 800641c:	39c00104 	addi	r7,r7,4
 8006420:	2013d43a 	srai	r9,r4,16
 8006424:	42ffee36 	bltu	r8,r11,80063e0 <__mdiff+0x80>
 8006428:	33400c2e 	bgeu	r6,r13,800645c <__mdiff+0xfc>
 800642c:	30800017 	ldw	r2,0(r6)
 8006430:	31800104 	addi	r6,r6,4
 8006434:	10ffffcc 	andi	r3,r2,65535
 8006438:	1a47883a 	add	r3,r3,r9
 800643c:	1004d43a 	srli	r2,r2,16
 8006440:	1809d43a 	srai	r4,r3,16
 8006444:	38c0000d 	sth	r3,0(r7)
 8006448:	1105883a 	add	r2,r2,r4
 800644c:	3880008d 	sth	r2,2(r7)
 8006450:	1013d43a 	srai	r9,r2,16
 8006454:	39c00104 	addi	r7,r7,4
 8006458:	337ff436 	bltu	r6,r13,800642c <__mdiff+0xcc>
 800645c:	38bfff17 	ldw	r2,-4(r7)
 8006460:	38ffff04 	addi	r3,r7,-4
 8006464:	1000041e 	bne	r2,zero,8006478 <__mdiff+0x118>
 8006468:	18ffff04 	addi	r3,r3,-4
 800646c:	18800017 	ldw	r2,0(r3)
 8006470:	52bfffc4 	addi	r10,r10,-1
 8006474:	103ffc26 	beq	r2,zero,8006468 <__mdiff+0x108>
 8006478:	6005883a 	mov	r2,r12
 800647c:	62800415 	stw	r10,16(r12)
 8006480:	dfc00417 	ldw	ra,16(sp)
 8006484:	dcc00317 	ldw	r19,12(sp)
 8006488:	dc800217 	ldw	r18,8(sp)
 800648c:	dc400117 	ldw	r17,4(sp)
 8006490:	dc000017 	ldw	r16,0(sp)
 8006494:	dec00504 	addi	sp,sp,20
 8006498:	f800283a 	ret
 800649c:	9009883a 	mov	r4,r18
 80064a0:	000b883a 	mov	r5,zero
 80064a4:	80061280 	call	8006128 <_Balloc>
 80064a8:	1019883a 	mov	r12,r2
 80064ac:	00800044 	movi	r2,1
 80064b0:	60800415 	stw	r2,16(r12)
 80064b4:	6005883a 	mov	r2,r12
 80064b8:	60000515 	stw	zero,20(r12)
 80064bc:	dfc00417 	ldw	ra,16(sp)
 80064c0:	dcc00317 	ldw	r19,12(sp)
 80064c4:	dc800217 	ldw	r18,8(sp)
 80064c8:	dc400117 	ldw	r17,4(sp)
 80064cc:	dc000017 	ldw	r16,0(sp)
 80064d0:	dec00504 	addi	sp,sp,20
 80064d4:	f800283a 	ret
 80064d8:	880d883a 	mov	r6,r17
 80064dc:	04c00044 	movi	r19,1
 80064e0:	8023883a 	mov	r17,r16
 80064e4:	3021883a 	mov	r16,r6
 80064e8:	003fac06 	br	800639c <__mdiff+0x3c>

080064ec <__lshift>:
 80064ec:	defff904 	addi	sp,sp,-28
 80064f0:	28800417 	ldw	r2,16(r5)
 80064f4:	dc000015 	stw	r16,0(sp)
 80064f8:	3021d17a 	srai	r16,r6,5
 80064fc:	28c00217 	ldw	r3,8(r5)
 8006500:	10800044 	addi	r2,r2,1
 8006504:	dc400115 	stw	r17,4(sp)
 8006508:	80a3883a 	add	r17,r16,r2
 800650c:	dd400515 	stw	r21,20(sp)
 8006510:	dd000415 	stw	r20,16(sp)
 8006514:	dc800215 	stw	r18,8(sp)
 8006518:	dfc00615 	stw	ra,24(sp)
 800651c:	2825883a 	mov	r18,r5
 8006520:	dcc00315 	stw	r19,12(sp)
 8006524:	3029883a 	mov	r20,r6
 8006528:	202b883a 	mov	r21,r4
 800652c:	29400117 	ldw	r5,4(r5)
 8006530:	1c40030e 	bge	r3,r17,8006540 <__lshift+0x54>
 8006534:	18c7883a 	add	r3,r3,r3
 8006538:	29400044 	addi	r5,r5,1
 800653c:	1c7ffd16 	blt	r3,r17,8006534 <__lshift+0x48>
 8006540:	a809883a 	mov	r4,r21
 8006544:	80061280 	call	8006128 <_Balloc>
 8006548:	1027883a 	mov	r19,r2
 800654c:	11400504 	addi	r5,r2,20
 8006550:	0400090e 	bge	zero,r16,8006578 <__lshift+0x8c>
 8006554:	2805883a 	mov	r2,r5
 8006558:	0007883a 	mov	r3,zero
 800655c:	18c00044 	addi	r3,r3,1
 8006560:	10000015 	stw	zero,0(r2)
 8006564:	10800104 	addi	r2,r2,4
 8006568:	80fffc1e 	bne	r16,r3,800655c <__lshift+0x70>
 800656c:	8405883a 	add	r2,r16,r16
 8006570:	1085883a 	add	r2,r2,r2
 8006574:	288b883a 	add	r5,r5,r2
 8006578:	90800417 	ldw	r2,16(r18)
 800657c:	91000504 	addi	r4,r18,20
 8006580:	a18007cc 	andi	r6,r20,31
 8006584:	1085883a 	add	r2,r2,r2
 8006588:	1085883a 	add	r2,r2,r2
 800658c:	208f883a 	add	r7,r4,r2
 8006590:	30001e26 	beq	r6,zero,800660c <__lshift+0x120>
 8006594:	00800804 	movi	r2,32
 8006598:	1191c83a 	sub	r8,r2,r6
 800659c:	0007883a 	mov	r3,zero
 80065a0:	20800017 	ldw	r2,0(r4)
 80065a4:	1184983a 	sll	r2,r2,r6
 80065a8:	1884b03a 	or	r2,r3,r2
 80065ac:	28800015 	stw	r2,0(r5)
 80065b0:	20c00017 	ldw	r3,0(r4)
 80065b4:	21000104 	addi	r4,r4,4
 80065b8:	29400104 	addi	r5,r5,4
 80065bc:	1a06d83a 	srl	r3,r3,r8
 80065c0:	21fff736 	bltu	r4,r7,80065a0 <__lshift+0xb4>
 80065c4:	28c00015 	stw	r3,0(r5)
 80065c8:	18000126 	beq	r3,zero,80065d0 <__lshift+0xe4>
 80065cc:	8c400044 	addi	r17,r17,1
 80065d0:	88bfffc4 	addi	r2,r17,-1
 80065d4:	98800415 	stw	r2,16(r19)
 80065d8:	a809883a 	mov	r4,r21
 80065dc:	900b883a 	mov	r5,r18
 80065e0:	8005ba80 	call	8005ba8 <_Bfree>
 80065e4:	9805883a 	mov	r2,r19
 80065e8:	dfc00617 	ldw	ra,24(sp)
 80065ec:	dd400517 	ldw	r21,20(sp)
 80065f0:	dd000417 	ldw	r20,16(sp)
 80065f4:	dcc00317 	ldw	r19,12(sp)
 80065f8:	dc800217 	ldw	r18,8(sp)
 80065fc:	dc400117 	ldw	r17,4(sp)
 8006600:	dc000017 	ldw	r16,0(sp)
 8006604:	dec00704 	addi	sp,sp,28
 8006608:	f800283a 	ret
 800660c:	20800017 	ldw	r2,0(r4)
 8006610:	21000104 	addi	r4,r4,4
 8006614:	28800015 	stw	r2,0(r5)
 8006618:	29400104 	addi	r5,r5,4
 800661c:	21ffec2e 	bgeu	r4,r7,80065d0 <__lshift+0xe4>
 8006620:	20800017 	ldw	r2,0(r4)
 8006624:	21000104 	addi	r4,r4,4
 8006628:	28800015 	stw	r2,0(r5)
 800662c:	29400104 	addi	r5,r5,4
 8006630:	21fff636 	bltu	r4,r7,800660c <__lshift+0x120>
 8006634:	003fe606 	br	80065d0 <__lshift+0xe4>

08006638 <__multiply>:
 8006638:	defff004 	addi	sp,sp,-64
 800663c:	dc800815 	stw	r18,32(sp)
 8006640:	dc400715 	stw	r17,28(sp)
 8006644:	2c800417 	ldw	r18,16(r5)
 8006648:	34400417 	ldw	r17,16(r6)
 800664c:	dcc00915 	stw	r19,36(sp)
 8006650:	dc000615 	stw	r16,24(sp)
 8006654:	dfc00f15 	stw	ra,60(sp)
 8006658:	df000e15 	stw	fp,56(sp)
 800665c:	ddc00d15 	stw	r23,52(sp)
 8006660:	dd800c15 	stw	r22,48(sp)
 8006664:	dd400b15 	stw	r21,44(sp)
 8006668:	dd000a15 	stw	r20,40(sp)
 800666c:	2821883a 	mov	r16,r5
 8006670:	3027883a 	mov	r19,r6
 8006674:	9440040e 	bge	r18,r17,8006688 <__multiply+0x50>
 8006678:	8825883a 	mov	r18,r17
 800667c:	2c400417 	ldw	r17,16(r5)
 8006680:	2827883a 	mov	r19,r5
 8006684:	3021883a 	mov	r16,r6
 8006688:	80800217 	ldw	r2,8(r16)
 800668c:	9447883a 	add	r3,r18,r17
 8006690:	d8c00415 	stw	r3,16(sp)
 8006694:	81400117 	ldw	r5,4(r16)
 8006698:	10c0010e 	bge	r2,r3,80066a0 <__multiply+0x68>
 800669c:	29400044 	addi	r5,r5,1
 80066a0:	80061280 	call	8006128 <_Balloc>
 80066a4:	d8800515 	stw	r2,20(sp)
 80066a8:	d9000417 	ldw	r4,16(sp)
 80066ac:	d8c00517 	ldw	r3,20(sp)
 80066b0:	2105883a 	add	r2,r4,r4
 80066b4:	1085883a 	add	r2,r2,r2
 80066b8:	19000504 	addi	r4,r3,20
 80066bc:	2085883a 	add	r2,r4,r2
 80066c0:	d8800315 	stw	r2,12(sp)
 80066c4:	2080052e 	bgeu	r4,r2,80066dc <__multiply+0xa4>
 80066c8:	2005883a 	mov	r2,r4
 80066cc:	d8c00317 	ldw	r3,12(sp)
 80066d0:	10000015 	stw	zero,0(r2)
 80066d4:	10800104 	addi	r2,r2,4
 80066d8:	10fffc36 	bltu	r2,r3,80066cc <__multiply+0x94>
 80066dc:	8c45883a 	add	r2,r17,r17
 80066e0:	9487883a 	add	r3,r18,r18
 80066e4:	9dc00504 	addi	r23,r19,20
 80066e8:	1085883a 	add	r2,r2,r2
 80066ec:	84000504 	addi	r16,r16,20
 80066f0:	18c7883a 	add	r3,r3,r3
 80066f4:	b885883a 	add	r2,r23,r2
 80066f8:	dc000015 	stw	r16,0(sp)
 80066fc:	d8800215 	stw	r2,8(sp)
 8006700:	80f9883a 	add	fp,r16,r3
 8006704:	b880432e 	bgeu	r23,r2,8006814 <__multiply+0x1dc>
 8006708:	d9000115 	stw	r4,4(sp)
 800670c:	b9000017 	ldw	r4,0(r23)
 8006710:	253fffcc 	andi	r20,r4,65535
 8006714:	a0001a26 	beq	r20,zero,8006780 <__multiply+0x148>
 8006718:	dcc00017 	ldw	r19,0(sp)
 800671c:	dc800117 	ldw	r18,4(sp)
 8006720:	002b883a 	mov	r21,zero
 8006724:	9c400017 	ldw	r17,0(r19)
 8006728:	94000017 	ldw	r16,0(r18)
 800672c:	a009883a 	mov	r4,r20
 8006730:	897fffcc 	andi	r5,r17,65535
 8006734:	800988c0 	call	800988c <__mulsi3>
 8006738:	880ad43a 	srli	r5,r17,16
 800673c:	80ffffcc 	andi	r3,r16,65535
 8006740:	a8c7883a 	add	r3,r21,r3
 8006744:	a009883a 	mov	r4,r20
 8006748:	10e3883a 	add	r17,r2,r3
 800674c:	8020d43a 	srli	r16,r16,16
 8006750:	800988c0 	call	800988c <__mulsi3>
 8006754:	8806d43a 	srli	r3,r17,16
 8006758:	1405883a 	add	r2,r2,r16
 800675c:	9cc00104 	addi	r19,r19,4
 8006760:	1887883a 	add	r3,r3,r2
 8006764:	90c0008d 	sth	r3,2(r18)
 8006768:	9440000d 	sth	r17,0(r18)
 800676c:	182ad43a 	srli	r21,r3,16
 8006770:	94800104 	addi	r18,r18,4
 8006774:	9f3feb36 	bltu	r19,fp,8006724 <__multiply+0xec>
 8006778:	95400015 	stw	r21,0(r18)
 800677c:	b9000017 	ldw	r4,0(r23)
 8006780:	202ad43a 	srli	r21,r4,16
 8006784:	a8001c26 	beq	r21,zero,80067f8 <__multiply+0x1c0>
 8006788:	d9000117 	ldw	r4,4(sp)
 800678c:	dd000017 	ldw	r20,0(sp)
 8006790:	002d883a 	mov	r22,zero
 8006794:	24c00017 	ldw	r19,0(r4)
 8006798:	2025883a 	mov	r18,r4
 800679c:	9823883a 	mov	r17,r19
 80067a0:	a4000017 	ldw	r16,0(r20)
 80067a4:	a809883a 	mov	r4,r21
 80067a8:	a5000104 	addi	r20,r20,4
 80067ac:	817fffcc 	andi	r5,r16,65535
 80067b0:	800988c0 	call	800988c <__mulsi3>
 80067b4:	8806d43a 	srli	r3,r17,16
 80067b8:	800ad43a 	srli	r5,r16,16
 80067bc:	94c0000d 	sth	r19,0(r18)
 80067c0:	b0c7883a 	add	r3,r22,r3
 80067c4:	10e1883a 	add	r16,r2,r3
 80067c8:	9400008d 	sth	r16,2(r18)
 80067cc:	a809883a 	mov	r4,r21
 80067d0:	94800104 	addi	r18,r18,4
 80067d4:	800988c0 	call	800988c <__mulsi3>
 80067d8:	94400017 	ldw	r17,0(r18)
 80067dc:	8020d43a 	srli	r16,r16,16
 80067e0:	88ffffcc 	andi	r3,r17,65535
 80067e4:	10c5883a 	add	r2,r2,r3
 80067e8:	80a7883a 	add	r19,r16,r2
 80067ec:	982cd43a 	srli	r22,r19,16
 80067f0:	a73feb36 	bltu	r20,fp,80067a0 <__multiply+0x168>
 80067f4:	94c00015 	stw	r19,0(r18)
 80067f8:	d8800217 	ldw	r2,8(sp)
 80067fc:	bdc00104 	addi	r23,r23,4
 8006800:	b880042e 	bgeu	r23,r2,8006814 <__multiply+0x1dc>
 8006804:	d8c00117 	ldw	r3,4(sp)
 8006808:	18c00104 	addi	r3,r3,4
 800680c:	d8c00115 	stw	r3,4(sp)
 8006810:	003fbe06 	br	800670c <__multiply+0xd4>
 8006814:	d9000417 	ldw	r4,16(sp)
 8006818:	01000c0e 	bge	zero,r4,800684c <__multiply+0x214>
 800681c:	d8c00317 	ldw	r3,12(sp)
 8006820:	18bfff17 	ldw	r2,-4(r3)
 8006824:	18ffff04 	addi	r3,r3,-4
 8006828:	10000326 	beq	r2,zero,8006838 <__multiply+0x200>
 800682c:	00000706 	br	800684c <__multiply+0x214>
 8006830:	18800017 	ldw	r2,0(r3)
 8006834:	1000051e 	bne	r2,zero,800684c <__multiply+0x214>
 8006838:	d9000417 	ldw	r4,16(sp)
 800683c:	18ffff04 	addi	r3,r3,-4
 8006840:	213fffc4 	addi	r4,r4,-1
 8006844:	d9000415 	stw	r4,16(sp)
 8006848:	203ff91e 	bne	r4,zero,8006830 <__multiply+0x1f8>
 800684c:	d8800417 	ldw	r2,16(sp)
 8006850:	d8c00517 	ldw	r3,20(sp)
 8006854:	18800415 	stw	r2,16(r3)
 8006858:	1805883a 	mov	r2,r3
 800685c:	dfc00f17 	ldw	ra,60(sp)
 8006860:	df000e17 	ldw	fp,56(sp)
 8006864:	ddc00d17 	ldw	r23,52(sp)
 8006868:	dd800c17 	ldw	r22,48(sp)
 800686c:	dd400b17 	ldw	r21,44(sp)
 8006870:	dd000a17 	ldw	r20,40(sp)
 8006874:	dcc00917 	ldw	r19,36(sp)
 8006878:	dc800817 	ldw	r18,32(sp)
 800687c:	dc400717 	ldw	r17,28(sp)
 8006880:	dc000617 	ldw	r16,24(sp)
 8006884:	dec01004 	addi	sp,sp,64
 8006888:	f800283a 	ret

0800688c <__i2b>:
 800688c:	defffd04 	addi	sp,sp,-12
 8006890:	dc000015 	stw	r16,0(sp)
 8006894:	04000044 	movi	r16,1
 8006898:	dc800115 	stw	r18,4(sp)
 800689c:	2825883a 	mov	r18,r5
 80068a0:	800b883a 	mov	r5,r16
 80068a4:	dfc00215 	stw	ra,8(sp)
 80068a8:	80061280 	call	8006128 <_Balloc>
 80068ac:	14000415 	stw	r16,16(r2)
 80068b0:	14800515 	stw	r18,20(r2)
 80068b4:	dfc00217 	ldw	ra,8(sp)
 80068b8:	dc800117 	ldw	r18,4(sp)
 80068bc:	dc000017 	ldw	r16,0(sp)
 80068c0:	dec00304 	addi	sp,sp,12
 80068c4:	f800283a 	ret

080068c8 <__multadd>:
 80068c8:	defff604 	addi	sp,sp,-40
 80068cc:	dd800615 	stw	r22,24(sp)
 80068d0:	2d800417 	ldw	r22,16(r5)
 80068d4:	df000815 	stw	fp,32(sp)
 80068d8:	ddc00715 	stw	r23,28(sp)
 80068dc:	dd400515 	stw	r21,20(sp)
 80068e0:	dd000415 	stw	r20,16(sp)
 80068e4:	dcc00315 	stw	r19,12(sp)
 80068e8:	dc800215 	stw	r18,8(sp)
 80068ec:	dfc00915 	stw	ra,36(sp)
 80068f0:	dc400115 	stw	r17,4(sp)
 80068f4:	dc000015 	stw	r16,0(sp)
 80068f8:	282f883a 	mov	r23,r5
 80068fc:	2039883a 	mov	fp,r4
 8006900:	302b883a 	mov	r21,r6
 8006904:	3829883a 	mov	r20,r7
 8006908:	2c800504 	addi	r18,r5,20
 800690c:	0027883a 	mov	r19,zero
 8006910:	94400017 	ldw	r17,0(r18)
 8006914:	a80b883a 	mov	r5,r21
 8006918:	9cc00044 	addi	r19,r19,1
 800691c:	893fffcc 	andi	r4,r17,65535
 8006920:	800988c0 	call	800988c <__mulsi3>
 8006924:	8808d43a 	srli	r4,r17,16
 8006928:	1521883a 	add	r16,r2,r20
 800692c:	a80b883a 	mov	r5,r21
 8006930:	800988c0 	call	800988c <__mulsi3>
 8006934:	8008d43a 	srli	r4,r16,16
 8006938:	843fffcc 	andi	r16,r16,65535
 800693c:	1105883a 	add	r2,r2,r4
 8006940:	1006943a 	slli	r3,r2,16
 8006944:	1028d43a 	srli	r20,r2,16
 8006948:	1c07883a 	add	r3,r3,r16
 800694c:	90c00015 	stw	r3,0(r18)
 8006950:	94800104 	addi	r18,r18,4
 8006954:	9dbfee16 	blt	r19,r22,8006910 <__multadd+0x48>
 8006958:	a0000826 	beq	r20,zero,800697c <__multadd+0xb4>
 800695c:	b8800217 	ldw	r2,8(r23)
 8006960:	b080130e 	bge	r22,r2,80069b0 <__multadd+0xe8>
 8006964:	b585883a 	add	r2,r22,r22
 8006968:	1085883a 	add	r2,r2,r2
 800696c:	15c5883a 	add	r2,r2,r23
 8006970:	b0c00044 	addi	r3,r22,1
 8006974:	15000515 	stw	r20,20(r2)
 8006978:	b8c00415 	stw	r3,16(r23)
 800697c:	b805883a 	mov	r2,r23
 8006980:	dfc00917 	ldw	ra,36(sp)
 8006984:	df000817 	ldw	fp,32(sp)
 8006988:	ddc00717 	ldw	r23,28(sp)
 800698c:	dd800617 	ldw	r22,24(sp)
 8006990:	dd400517 	ldw	r21,20(sp)
 8006994:	dd000417 	ldw	r20,16(sp)
 8006998:	dcc00317 	ldw	r19,12(sp)
 800699c:	dc800217 	ldw	r18,8(sp)
 80069a0:	dc400117 	ldw	r17,4(sp)
 80069a4:	dc000017 	ldw	r16,0(sp)
 80069a8:	dec00a04 	addi	sp,sp,40
 80069ac:	f800283a 	ret
 80069b0:	b9400117 	ldw	r5,4(r23)
 80069b4:	e009883a 	mov	r4,fp
 80069b8:	29400044 	addi	r5,r5,1
 80069bc:	80061280 	call	8006128 <_Balloc>
 80069c0:	b9800417 	ldw	r6,16(r23)
 80069c4:	b9400304 	addi	r5,r23,12
 80069c8:	11000304 	addi	r4,r2,12
 80069cc:	318d883a 	add	r6,r6,r6
 80069d0:	318d883a 	add	r6,r6,r6
 80069d4:	31800204 	addi	r6,r6,8
 80069d8:	1023883a 	mov	r17,r2
 80069dc:	80059900 	call	8005990 <memcpy>
 80069e0:	b80b883a 	mov	r5,r23
 80069e4:	e009883a 	mov	r4,fp
 80069e8:	8005ba80 	call	8005ba8 <_Bfree>
 80069ec:	882f883a 	mov	r23,r17
 80069f0:	003fdc06 	br	8006964 <__multadd+0x9c>

080069f4 <__pow5mult>:
 80069f4:	defffa04 	addi	sp,sp,-24
 80069f8:	308000cc 	andi	r2,r6,3
 80069fc:	dd000415 	stw	r20,16(sp)
 8006a00:	dcc00315 	stw	r19,12(sp)
 8006a04:	dc000015 	stw	r16,0(sp)
 8006a08:	dfc00515 	stw	ra,20(sp)
 8006a0c:	dc800215 	stw	r18,8(sp)
 8006a10:	dc400115 	stw	r17,4(sp)
 8006a14:	3021883a 	mov	r16,r6
 8006a18:	2027883a 	mov	r19,r4
 8006a1c:	2829883a 	mov	r20,r5
 8006a20:	10002b1e 	bne	r2,zero,8006ad0 <__pow5mult+0xdc>
 8006a24:	8025d0ba 	srai	r18,r16,2
 8006a28:	90001b26 	beq	r18,zero,8006a98 <__pow5mult+0xa4>
 8006a2c:	9c001217 	ldw	r16,72(r19)
 8006a30:	8000081e 	bne	r16,zero,8006a54 <__pow5mult+0x60>
 8006a34:	00003006 	br	8006af8 <__pow5mult+0x104>
 8006a38:	800b883a 	mov	r5,r16
 8006a3c:	800d883a 	mov	r6,r16
 8006a40:	9809883a 	mov	r4,r19
 8006a44:	90001426 	beq	r18,zero,8006a98 <__pow5mult+0xa4>
 8006a48:	80800017 	ldw	r2,0(r16)
 8006a4c:	10001b26 	beq	r2,zero,8006abc <__pow5mult+0xc8>
 8006a50:	1021883a 	mov	r16,r2
 8006a54:	9080004c 	andi	r2,r18,1
 8006a58:	1005003a 	cmpeq	r2,r2,zero
 8006a5c:	9025d07a 	srai	r18,r18,1
 8006a60:	800d883a 	mov	r6,r16
 8006a64:	9809883a 	mov	r4,r19
 8006a68:	a00b883a 	mov	r5,r20
 8006a6c:	103ff21e 	bne	r2,zero,8006a38 <__pow5mult+0x44>
 8006a70:	80066380 	call	8006638 <__multiply>
 8006a74:	a00b883a 	mov	r5,r20
 8006a78:	9809883a 	mov	r4,r19
 8006a7c:	1023883a 	mov	r17,r2
 8006a80:	8005ba80 	call	8005ba8 <_Bfree>
 8006a84:	8829883a 	mov	r20,r17
 8006a88:	800b883a 	mov	r5,r16
 8006a8c:	800d883a 	mov	r6,r16
 8006a90:	9809883a 	mov	r4,r19
 8006a94:	903fec1e 	bne	r18,zero,8006a48 <__pow5mult+0x54>
 8006a98:	a005883a 	mov	r2,r20
 8006a9c:	dfc00517 	ldw	ra,20(sp)
 8006aa0:	dd000417 	ldw	r20,16(sp)
 8006aa4:	dcc00317 	ldw	r19,12(sp)
 8006aa8:	dc800217 	ldw	r18,8(sp)
 8006aac:	dc400117 	ldw	r17,4(sp)
 8006ab0:	dc000017 	ldw	r16,0(sp)
 8006ab4:	dec00604 	addi	sp,sp,24
 8006ab8:	f800283a 	ret
 8006abc:	80066380 	call	8006638 <__multiply>
 8006ac0:	80800015 	stw	r2,0(r16)
 8006ac4:	1021883a 	mov	r16,r2
 8006ac8:	10000015 	stw	zero,0(r2)
 8006acc:	003fe106 	br	8006a54 <__pow5mult+0x60>
 8006ad0:	1085883a 	add	r2,r2,r2
 8006ad4:	00c20074 	movhi	r3,2049
 8006ad8:	18c3fa04 	addi	r3,r3,4072
 8006adc:	1085883a 	add	r2,r2,r2
 8006ae0:	10c5883a 	add	r2,r2,r3
 8006ae4:	11bfff17 	ldw	r6,-4(r2)
 8006ae8:	000f883a 	mov	r7,zero
 8006aec:	80068c80 	call	80068c8 <__multadd>
 8006af0:	1029883a 	mov	r20,r2
 8006af4:	003fcb06 	br	8006a24 <__pow5mult+0x30>
 8006af8:	9809883a 	mov	r4,r19
 8006afc:	01409c44 	movi	r5,625
 8006b00:	800688c0 	call	800688c <__i2b>
 8006b04:	98801215 	stw	r2,72(r19)
 8006b08:	1021883a 	mov	r16,r2
 8006b0c:	10000015 	stw	zero,0(r2)
 8006b10:	003fd006 	br	8006a54 <__pow5mult+0x60>

08006b14 <__s2b>:
 8006b14:	defff904 	addi	sp,sp,-28
 8006b18:	dcc00315 	stw	r19,12(sp)
 8006b1c:	dc800215 	stw	r18,8(sp)
 8006b20:	2827883a 	mov	r19,r5
 8006b24:	2025883a 	mov	r18,r4
 8006b28:	01400244 	movi	r5,9
 8006b2c:	39000204 	addi	r4,r7,8
 8006b30:	dd000415 	stw	r20,16(sp)
 8006b34:	dc400115 	stw	r17,4(sp)
 8006b38:	dfc00615 	stw	ra,24(sp)
 8006b3c:	dd400515 	stw	r21,20(sp)
 8006b40:	dc000015 	stw	r16,0(sp)
 8006b44:	3829883a 	mov	r20,r7
 8006b48:	3023883a 	mov	r17,r6
 8006b4c:	80097bc0 	call	80097bc <__divsi3>
 8006b50:	00c00044 	movi	r3,1
 8006b54:	1880350e 	bge	r3,r2,8006c2c <__s2b+0x118>
 8006b58:	000b883a 	mov	r5,zero
 8006b5c:	18c7883a 	add	r3,r3,r3
 8006b60:	29400044 	addi	r5,r5,1
 8006b64:	18bffd16 	blt	r3,r2,8006b5c <__s2b+0x48>
 8006b68:	9009883a 	mov	r4,r18
 8006b6c:	80061280 	call	8006128 <_Balloc>
 8006b70:	1011883a 	mov	r8,r2
 8006b74:	d8800717 	ldw	r2,28(sp)
 8006b78:	00c00044 	movi	r3,1
 8006b7c:	01800244 	movi	r6,9
 8006b80:	40800515 	stw	r2,20(r8)
 8006b84:	40c00415 	stw	r3,16(r8)
 8006b88:	3440260e 	bge	r6,r17,8006c24 <__s2b+0x110>
 8006b8c:	3021883a 	mov	r16,r6
 8006b90:	99ab883a 	add	r21,r19,r6
 8006b94:	9c05883a 	add	r2,r19,r16
 8006b98:	11c00007 	ldb	r7,0(r2)
 8006b9c:	400b883a 	mov	r5,r8
 8006ba0:	9009883a 	mov	r4,r18
 8006ba4:	39fff404 	addi	r7,r7,-48
 8006ba8:	01800284 	movi	r6,10
 8006bac:	80068c80 	call	80068c8 <__multadd>
 8006bb0:	84000044 	addi	r16,r16,1
 8006bb4:	1011883a 	mov	r8,r2
 8006bb8:	8c3ff61e 	bne	r17,r16,8006b94 <__s2b+0x80>
 8006bbc:	ac45883a 	add	r2,r21,r17
 8006bc0:	117ffe04 	addi	r5,r2,-8
 8006bc4:	880d883a 	mov	r6,r17
 8006bc8:	35000c0e 	bge	r6,r20,8006bfc <__s2b+0xe8>
 8006bcc:	a185c83a 	sub	r2,r20,r6
 8006bd0:	2821883a 	mov	r16,r5
 8006bd4:	28a3883a 	add	r17,r5,r2
 8006bd8:	81c00007 	ldb	r7,0(r16)
 8006bdc:	400b883a 	mov	r5,r8
 8006be0:	9009883a 	mov	r4,r18
 8006be4:	39fff404 	addi	r7,r7,-48
 8006be8:	01800284 	movi	r6,10
 8006bec:	80068c80 	call	80068c8 <__multadd>
 8006bf0:	84000044 	addi	r16,r16,1
 8006bf4:	1011883a 	mov	r8,r2
 8006bf8:	847ff71e 	bne	r16,r17,8006bd8 <__s2b+0xc4>
 8006bfc:	4005883a 	mov	r2,r8
 8006c00:	dfc00617 	ldw	ra,24(sp)
 8006c04:	dd400517 	ldw	r21,20(sp)
 8006c08:	dd000417 	ldw	r20,16(sp)
 8006c0c:	dcc00317 	ldw	r19,12(sp)
 8006c10:	dc800217 	ldw	r18,8(sp)
 8006c14:	dc400117 	ldw	r17,4(sp)
 8006c18:	dc000017 	ldw	r16,0(sp)
 8006c1c:	dec00704 	addi	sp,sp,28
 8006c20:	f800283a 	ret
 8006c24:	99400284 	addi	r5,r19,10
 8006c28:	003fe706 	br	8006bc8 <__s2b+0xb4>
 8006c2c:	000b883a 	mov	r5,zero
 8006c30:	003fcd06 	br	8006b68 <__s2b+0x54>

08006c34 <_realloc_r>:
 8006c34:	defff404 	addi	sp,sp,-48
 8006c38:	dd800815 	stw	r22,32(sp)
 8006c3c:	dc800415 	stw	r18,16(sp)
 8006c40:	dc400315 	stw	r17,12(sp)
 8006c44:	dfc00b15 	stw	ra,44(sp)
 8006c48:	df000a15 	stw	fp,40(sp)
 8006c4c:	ddc00915 	stw	r23,36(sp)
 8006c50:	dd400715 	stw	r21,28(sp)
 8006c54:	dd000615 	stw	r20,24(sp)
 8006c58:	dcc00515 	stw	r19,20(sp)
 8006c5c:	dc000215 	stw	r16,8(sp)
 8006c60:	2825883a 	mov	r18,r5
 8006c64:	3023883a 	mov	r17,r6
 8006c68:	202d883a 	mov	r22,r4
 8006c6c:	2800c926 	beq	r5,zero,8006f94 <_realloc_r+0x360>
 8006c70:	800a6100 	call	800a610 <__malloc_lock>
 8006c74:	943ffe04 	addi	r16,r18,-8
 8006c78:	88c002c4 	addi	r3,r17,11
 8006c7c:	00800584 	movi	r2,22
 8006c80:	82000117 	ldw	r8,4(r16)
 8006c84:	10c01b2e 	bgeu	r2,r3,8006cf4 <_realloc_r+0xc0>
 8006c88:	00bffe04 	movi	r2,-8
 8006c8c:	188e703a 	and	r7,r3,r2
 8006c90:	3839883a 	mov	fp,r7
 8006c94:	38001a16 	blt	r7,zero,8006d00 <_realloc_r+0xcc>
 8006c98:	e4401936 	bltu	fp,r17,8006d00 <_realloc_r+0xcc>
 8006c9c:	013fff04 	movi	r4,-4
 8006ca0:	4126703a 	and	r19,r8,r4
 8006ca4:	99c02616 	blt	r19,r7,8006d40 <_realloc_r+0x10c>
 8006ca8:	802b883a 	mov	r21,r16
 8006cac:	9829883a 	mov	r20,r19
 8006cb0:	84000204 	addi	r16,r16,8
 8006cb4:	a80f883a 	mov	r7,r21
 8006cb8:	a70dc83a 	sub	r6,r20,fp
 8006cbc:	008003c4 	movi	r2,15
 8006cc0:	1180c136 	bltu	r2,r6,8006fc8 <_realloc_r+0x394>
 8006cc4:	38800117 	ldw	r2,4(r7)
 8006cc8:	a549883a 	add	r4,r20,r21
 8006ccc:	1080004c 	andi	r2,r2,1
 8006cd0:	a084b03a 	or	r2,r20,r2
 8006cd4:	38800115 	stw	r2,4(r7)
 8006cd8:	20c00117 	ldw	r3,4(r4)
 8006cdc:	18c00054 	ori	r3,r3,1
 8006ce0:	20c00115 	stw	r3,4(r4)
 8006ce4:	b009883a 	mov	r4,r22
 8006ce8:	800a6300 	call	800a630 <__malloc_unlock>
 8006cec:	8023883a 	mov	r17,r16
 8006cf0:	00000606 	br	8006d0c <_realloc_r+0xd8>
 8006cf4:	01c00404 	movi	r7,16
 8006cf8:	3839883a 	mov	fp,r7
 8006cfc:	e47fe72e 	bgeu	fp,r17,8006c9c <_realloc_r+0x68>
 8006d00:	00800304 	movi	r2,12
 8006d04:	0023883a 	mov	r17,zero
 8006d08:	b0800015 	stw	r2,0(r22)
 8006d0c:	8805883a 	mov	r2,r17
 8006d10:	dfc00b17 	ldw	ra,44(sp)
 8006d14:	df000a17 	ldw	fp,40(sp)
 8006d18:	ddc00917 	ldw	r23,36(sp)
 8006d1c:	dd800817 	ldw	r22,32(sp)
 8006d20:	dd400717 	ldw	r21,28(sp)
 8006d24:	dd000617 	ldw	r20,24(sp)
 8006d28:	dcc00517 	ldw	r19,20(sp)
 8006d2c:	dc800417 	ldw	r18,16(sp)
 8006d30:	dc400317 	ldw	r17,12(sp)
 8006d34:	dc000217 	ldw	r16,8(sp)
 8006d38:	dec00c04 	addi	sp,sp,48
 8006d3c:	f800283a 	ret
 8006d40:	00820074 	movhi	r2,2049
 8006d44:	10845a04 	addi	r2,r2,4456
 8006d48:	12400217 	ldw	r9,8(r2)
 8006d4c:	84cd883a 	add	r6,r16,r19
 8006d50:	802b883a 	mov	r21,r16
 8006d54:	3240b926 	beq	r6,r9,800703c <_realloc_r+0x408>
 8006d58:	31400117 	ldw	r5,4(r6)
 8006d5c:	00bfff84 	movi	r2,-2
 8006d60:	2884703a 	and	r2,r5,r2
 8006d64:	1185883a 	add	r2,r2,r6
 8006d68:	10c00117 	ldw	r3,4(r2)
 8006d6c:	18c0004c 	andi	r3,r3,1
 8006d70:	1807003a 	cmpeq	r3,r3,zero
 8006d74:	1800a326 	beq	r3,zero,8007004 <_realloc_r+0x3d0>
 8006d78:	2908703a 	and	r4,r5,r4
 8006d7c:	9929883a 	add	r20,r19,r4
 8006d80:	a1c0a30e 	bge	r20,r7,8007010 <_realloc_r+0x3dc>
 8006d84:	4080004c 	andi	r2,r8,1
 8006d88:	1000551e 	bne	r2,zero,8006ee0 <_realloc_r+0x2ac>
 8006d8c:	80800017 	ldw	r2,0(r16)
 8006d90:	80afc83a 	sub	r23,r16,r2
 8006d94:	b8c00117 	ldw	r3,4(r23)
 8006d98:	00bfff04 	movi	r2,-4
 8006d9c:	1884703a 	and	r2,r3,r2
 8006da0:	30002e26 	beq	r6,zero,8006e5c <_realloc_r+0x228>
 8006da4:	3240b926 	beq	r6,r9,800708c <_realloc_r+0x458>
 8006da8:	98a9883a 	add	r20,r19,r2
 8006dac:	2509883a 	add	r4,r4,r20
 8006db0:	d9000015 	stw	r4,0(sp)
 8006db4:	21c02a16 	blt	r4,r7,8006e60 <_realloc_r+0x22c>
 8006db8:	30800317 	ldw	r2,12(r6)
 8006dbc:	30c00217 	ldw	r3,8(r6)
 8006dc0:	01400904 	movi	r5,36
 8006dc4:	99bfff04 	addi	r6,r19,-4
 8006dc8:	18800315 	stw	r2,12(r3)
 8006dcc:	10c00215 	stw	r3,8(r2)
 8006dd0:	b9000317 	ldw	r4,12(r23)
 8006dd4:	b8800217 	ldw	r2,8(r23)
 8006dd8:	b82b883a 	mov	r21,r23
 8006ddc:	bc000204 	addi	r16,r23,8
 8006de0:	20800215 	stw	r2,8(r4)
 8006de4:	11000315 	stw	r4,12(r2)
 8006de8:	2980e436 	bltu	r5,r6,800717c <_realloc_r+0x548>
 8006dec:	008004c4 	movi	r2,19
 8006df0:	9009883a 	mov	r4,r18
 8006df4:	8011883a 	mov	r8,r16
 8006df8:	11800f2e 	bgeu	r2,r6,8006e38 <_realloc_r+0x204>
 8006dfc:	90800017 	ldw	r2,0(r18)
 8006e00:	ba000404 	addi	r8,r23,16
 8006e04:	91000204 	addi	r4,r18,8
 8006e08:	b8800215 	stw	r2,8(r23)
 8006e0c:	90c00117 	ldw	r3,4(r18)
 8006e10:	008006c4 	movi	r2,27
 8006e14:	b8c00315 	stw	r3,12(r23)
 8006e18:	1180072e 	bgeu	r2,r6,8006e38 <_realloc_r+0x204>
 8006e1c:	90c00217 	ldw	r3,8(r18)
 8006e20:	ba000604 	addi	r8,r23,24
 8006e24:	91000404 	addi	r4,r18,16
 8006e28:	b8c00415 	stw	r3,16(r23)
 8006e2c:	90800317 	ldw	r2,12(r18)
 8006e30:	b8800515 	stw	r2,20(r23)
 8006e34:	3140e726 	beq	r6,r5,80071d4 <_realloc_r+0x5a0>
 8006e38:	20800017 	ldw	r2,0(r4)
 8006e3c:	dd000017 	ldw	r20,0(sp)
 8006e40:	b80f883a 	mov	r7,r23
 8006e44:	40800015 	stw	r2,0(r8)
 8006e48:	20c00117 	ldw	r3,4(r4)
 8006e4c:	40c00115 	stw	r3,4(r8)
 8006e50:	20800217 	ldw	r2,8(r4)
 8006e54:	40800215 	stw	r2,8(r8)
 8006e58:	003f9706 	br	8006cb8 <_realloc_r+0x84>
 8006e5c:	98a9883a 	add	r20,r19,r2
 8006e60:	a1c01f16 	blt	r20,r7,8006ee0 <_realloc_r+0x2ac>
 8006e64:	b8c00317 	ldw	r3,12(r23)
 8006e68:	b8800217 	ldw	r2,8(r23)
 8006e6c:	99bfff04 	addi	r6,r19,-4
 8006e70:	01400904 	movi	r5,36
 8006e74:	b82b883a 	mov	r21,r23
 8006e78:	18800215 	stw	r2,8(r3)
 8006e7c:	10c00315 	stw	r3,12(r2)
 8006e80:	bc000204 	addi	r16,r23,8
 8006e84:	2980c336 	bltu	r5,r6,8007194 <_realloc_r+0x560>
 8006e88:	008004c4 	movi	r2,19
 8006e8c:	9009883a 	mov	r4,r18
 8006e90:	8011883a 	mov	r8,r16
 8006e94:	11800f2e 	bgeu	r2,r6,8006ed4 <_realloc_r+0x2a0>
 8006e98:	90800017 	ldw	r2,0(r18)
 8006e9c:	ba000404 	addi	r8,r23,16
 8006ea0:	91000204 	addi	r4,r18,8
 8006ea4:	b8800215 	stw	r2,8(r23)
 8006ea8:	90c00117 	ldw	r3,4(r18)
 8006eac:	008006c4 	movi	r2,27
 8006eb0:	b8c00315 	stw	r3,12(r23)
 8006eb4:	1180072e 	bgeu	r2,r6,8006ed4 <_realloc_r+0x2a0>
 8006eb8:	90c00217 	ldw	r3,8(r18)
 8006ebc:	ba000604 	addi	r8,r23,24
 8006ec0:	91000404 	addi	r4,r18,16
 8006ec4:	b8c00415 	stw	r3,16(r23)
 8006ec8:	90800317 	ldw	r2,12(r18)
 8006ecc:	b8800515 	stw	r2,20(r23)
 8006ed0:	3140c726 	beq	r6,r5,80071f0 <_realloc_r+0x5bc>
 8006ed4:	20800017 	ldw	r2,0(r4)
 8006ed8:	b80f883a 	mov	r7,r23
 8006edc:	003fd906 	br	8006e44 <_realloc_r+0x210>
 8006ee0:	880b883a 	mov	r5,r17
 8006ee4:	b009883a 	mov	r4,r22
 8006ee8:	80005100 	call	8000510 <_malloc_r>
 8006eec:	1023883a 	mov	r17,r2
 8006ef0:	10002526 	beq	r2,zero,8006f88 <_realloc_r+0x354>
 8006ef4:	80800117 	ldw	r2,4(r16)
 8006ef8:	00ffff84 	movi	r3,-2
 8006efc:	893ffe04 	addi	r4,r17,-8
 8006f00:	10c4703a 	and	r2,r2,r3
 8006f04:	8085883a 	add	r2,r16,r2
 8006f08:	20809526 	beq	r4,r2,8007160 <_realloc_r+0x52c>
 8006f0c:	99bfff04 	addi	r6,r19,-4
 8006f10:	01c00904 	movi	r7,36
 8006f14:	39804536 	bltu	r7,r6,800702c <_realloc_r+0x3f8>
 8006f18:	008004c4 	movi	r2,19
 8006f1c:	9009883a 	mov	r4,r18
 8006f20:	880b883a 	mov	r5,r17
 8006f24:	11800f2e 	bgeu	r2,r6,8006f64 <_realloc_r+0x330>
 8006f28:	90800017 	ldw	r2,0(r18)
 8006f2c:	89400204 	addi	r5,r17,8
 8006f30:	91000204 	addi	r4,r18,8
 8006f34:	88800015 	stw	r2,0(r17)
 8006f38:	90c00117 	ldw	r3,4(r18)
 8006f3c:	008006c4 	movi	r2,27
 8006f40:	88c00115 	stw	r3,4(r17)
 8006f44:	1180072e 	bgeu	r2,r6,8006f64 <_realloc_r+0x330>
 8006f48:	90c00217 	ldw	r3,8(r18)
 8006f4c:	89400404 	addi	r5,r17,16
 8006f50:	91000404 	addi	r4,r18,16
 8006f54:	88c00215 	stw	r3,8(r17)
 8006f58:	90800317 	ldw	r2,12(r18)
 8006f5c:	88800315 	stw	r2,12(r17)
 8006f60:	31c09126 	beq	r6,r7,80071a8 <_realloc_r+0x574>
 8006f64:	20800017 	ldw	r2,0(r4)
 8006f68:	28800015 	stw	r2,0(r5)
 8006f6c:	20c00117 	ldw	r3,4(r4)
 8006f70:	28c00115 	stw	r3,4(r5)
 8006f74:	20800217 	ldw	r2,8(r4)
 8006f78:	28800215 	stw	r2,8(r5)
 8006f7c:	900b883a 	mov	r5,r18
 8006f80:	b009883a 	mov	r4,r22
 8006f84:	8004d240 	call	8004d24 <_free_r>
 8006f88:	b009883a 	mov	r4,r22
 8006f8c:	800a6300 	call	800a630 <__malloc_unlock>
 8006f90:	003f5e06 	br	8006d0c <_realloc_r+0xd8>
 8006f94:	300b883a 	mov	r5,r6
 8006f98:	dfc00b17 	ldw	ra,44(sp)
 8006f9c:	df000a17 	ldw	fp,40(sp)
 8006fa0:	ddc00917 	ldw	r23,36(sp)
 8006fa4:	dd800817 	ldw	r22,32(sp)
 8006fa8:	dd400717 	ldw	r21,28(sp)
 8006fac:	dd000617 	ldw	r20,24(sp)
 8006fb0:	dcc00517 	ldw	r19,20(sp)
 8006fb4:	dc800417 	ldw	r18,16(sp)
 8006fb8:	dc400317 	ldw	r17,12(sp)
 8006fbc:	dc000217 	ldw	r16,8(sp)
 8006fc0:	dec00c04 	addi	sp,sp,48
 8006fc4:	80005101 	jmpi	8000510 <_malloc_r>
 8006fc8:	38800117 	ldw	r2,4(r7)
 8006fcc:	e54b883a 	add	r5,fp,r21
 8006fd0:	31000054 	ori	r4,r6,1
 8006fd4:	1080004c 	andi	r2,r2,1
 8006fd8:	1704b03a 	or	r2,r2,fp
 8006fdc:	38800115 	stw	r2,4(r7)
 8006fe0:	29000115 	stw	r4,4(r5)
 8006fe4:	2987883a 	add	r3,r5,r6
 8006fe8:	18800117 	ldw	r2,4(r3)
 8006fec:	29400204 	addi	r5,r5,8
 8006ff0:	b009883a 	mov	r4,r22
 8006ff4:	10800054 	ori	r2,r2,1
 8006ff8:	18800115 	stw	r2,4(r3)
 8006ffc:	8004d240 	call	8004d24 <_free_r>
 8007000:	003f3806 	br	8006ce4 <_realloc_r+0xb0>
 8007004:	000d883a 	mov	r6,zero
 8007008:	0009883a 	mov	r4,zero
 800700c:	003f5d06 	br	8006d84 <_realloc_r+0x150>
 8007010:	30c00217 	ldw	r3,8(r6)
 8007014:	30800317 	ldw	r2,12(r6)
 8007018:	800f883a 	mov	r7,r16
 800701c:	84000204 	addi	r16,r16,8
 8007020:	10c00215 	stw	r3,8(r2)
 8007024:	18800315 	stw	r2,12(r3)
 8007028:	003f2306 	br	8006cb8 <_realloc_r+0x84>
 800702c:	8809883a 	mov	r4,r17
 8007030:	900b883a 	mov	r5,r18
 8007034:	8005a300 	call	8005a30 <memmove>
 8007038:	003fd006 	br	8006f7c <_realloc_r+0x348>
 800703c:	30800117 	ldw	r2,4(r6)
 8007040:	e0c00404 	addi	r3,fp,16
 8007044:	1108703a 	and	r4,r2,r4
 8007048:	9905883a 	add	r2,r19,r4
 800704c:	10ff4d16 	blt	r2,r3,8006d84 <_realloc_r+0x150>
 8007050:	1705c83a 	sub	r2,r2,fp
 8007054:	870b883a 	add	r5,r16,fp
 8007058:	10800054 	ori	r2,r2,1
 800705c:	28800115 	stw	r2,4(r5)
 8007060:	80c00117 	ldw	r3,4(r16)
 8007064:	00820074 	movhi	r2,2049
 8007068:	10845a04 	addi	r2,r2,4456
 800706c:	b009883a 	mov	r4,r22
 8007070:	18c0004c 	andi	r3,r3,1
 8007074:	e0c6b03a 	or	r3,fp,r3
 8007078:	11400215 	stw	r5,8(r2)
 800707c:	80c00115 	stw	r3,4(r16)
 8007080:	800a6300 	call	800a630 <__malloc_unlock>
 8007084:	84400204 	addi	r17,r16,8
 8007088:	003f2006 	br	8006d0c <_realloc_r+0xd8>
 800708c:	98a9883a 	add	r20,r19,r2
 8007090:	2509883a 	add	r4,r4,r20
 8007094:	e0800404 	addi	r2,fp,16
 8007098:	d9000115 	stw	r4,4(sp)
 800709c:	20bf7016 	blt	r4,r2,8006e60 <_realloc_r+0x22c>
 80070a0:	b8c00317 	ldw	r3,12(r23)
 80070a4:	b8800217 	ldw	r2,8(r23)
 80070a8:	99bfff04 	addi	r6,r19,-4
 80070ac:	01400904 	movi	r5,36
 80070b0:	18800215 	stw	r2,8(r3)
 80070b4:	10c00315 	stw	r3,12(r2)
 80070b8:	bc400204 	addi	r17,r23,8
 80070bc:	29804136 	bltu	r5,r6,80071c4 <_realloc_r+0x590>
 80070c0:	008004c4 	movi	r2,19
 80070c4:	9009883a 	mov	r4,r18
 80070c8:	880f883a 	mov	r7,r17
 80070cc:	11800f2e 	bgeu	r2,r6,800710c <_realloc_r+0x4d8>
 80070d0:	90800017 	ldw	r2,0(r18)
 80070d4:	b9c00404 	addi	r7,r23,16
 80070d8:	91000204 	addi	r4,r18,8
 80070dc:	b8800215 	stw	r2,8(r23)
 80070e0:	90c00117 	ldw	r3,4(r18)
 80070e4:	008006c4 	movi	r2,27
 80070e8:	b8c00315 	stw	r3,12(r23)
 80070ec:	1180072e 	bgeu	r2,r6,800710c <_realloc_r+0x4d8>
 80070f0:	90c00217 	ldw	r3,8(r18)
 80070f4:	b9c00604 	addi	r7,r23,24
 80070f8:	91000404 	addi	r4,r18,16
 80070fc:	b8c00415 	stw	r3,16(r23)
 8007100:	90800317 	ldw	r2,12(r18)
 8007104:	b8800515 	stw	r2,20(r23)
 8007108:	31404026 	beq	r6,r5,800720c <_realloc_r+0x5d8>
 800710c:	20800017 	ldw	r2,0(r4)
 8007110:	38800015 	stw	r2,0(r7)
 8007114:	20c00117 	ldw	r3,4(r4)
 8007118:	38c00115 	stw	r3,4(r7)
 800711c:	20800217 	ldw	r2,8(r4)
 8007120:	38800215 	stw	r2,8(r7)
 8007124:	d8c00117 	ldw	r3,4(sp)
 8007128:	bf0b883a 	add	r5,r23,fp
 800712c:	b009883a 	mov	r4,r22
 8007130:	1f05c83a 	sub	r2,r3,fp
 8007134:	10800054 	ori	r2,r2,1
 8007138:	28800115 	stw	r2,4(r5)
 800713c:	b8c00117 	ldw	r3,4(r23)
 8007140:	00820074 	movhi	r2,2049
 8007144:	10845a04 	addi	r2,r2,4456
 8007148:	11400215 	stw	r5,8(r2)
 800714c:	18c0004c 	andi	r3,r3,1
 8007150:	e0c6b03a 	or	r3,fp,r3
 8007154:	b8c00115 	stw	r3,4(r23)
 8007158:	800a6300 	call	800a630 <__malloc_unlock>
 800715c:	003eeb06 	br	8006d0c <_realloc_r+0xd8>
 8007160:	20800117 	ldw	r2,4(r4)
 8007164:	00ffff04 	movi	r3,-4
 8007168:	800f883a 	mov	r7,r16
 800716c:	10c4703a 	and	r2,r2,r3
 8007170:	98a9883a 	add	r20,r19,r2
 8007174:	84000204 	addi	r16,r16,8
 8007178:	003ecf06 	br	8006cb8 <_realloc_r+0x84>
 800717c:	900b883a 	mov	r5,r18
 8007180:	8009883a 	mov	r4,r16
 8007184:	8005a300 	call	8005a30 <memmove>
 8007188:	dd000017 	ldw	r20,0(sp)
 800718c:	b80f883a 	mov	r7,r23
 8007190:	003ec906 	br	8006cb8 <_realloc_r+0x84>
 8007194:	900b883a 	mov	r5,r18
 8007198:	8009883a 	mov	r4,r16
 800719c:	8005a300 	call	8005a30 <memmove>
 80071a0:	b80f883a 	mov	r7,r23
 80071a4:	003ec406 	br	8006cb8 <_realloc_r+0x84>
 80071a8:	90c00417 	ldw	r3,16(r18)
 80071ac:	89400604 	addi	r5,r17,24
 80071b0:	91000604 	addi	r4,r18,24
 80071b4:	88c00415 	stw	r3,16(r17)
 80071b8:	90800517 	ldw	r2,20(r18)
 80071bc:	88800515 	stw	r2,20(r17)
 80071c0:	003f6806 	br	8006f64 <_realloc_r+0x330>
 80071c4:	900b883a 	mov	r5,r18
 80071c8:	8809883a 	mov	r4,r17
 80071cc:	8005a300 	call	8005a30 <memmove>
 80071d0:	003fd406 	br	8007124 <_realloc_r+0x4f0>
 80071d4:	90c00417 	ldw	r3,16(r18)
 80071d8:	91000604 	addi	r4,r18,24
 80071dc:	ba000804 	addi	r8,r23,32
 80071e0:	b8c00615 	stw	r3,24(r23)
 80071e4:	90800517 	ldw	r2,20(r18)
 80071e8:	b8800715 	stw	r2,28(r23)
 80071ec:	003f1206 	br	8006e38 <_realloc_r+0x204>
 80071f0:	90c00417 	ldw	r3,16(r18)
 80071f4:	91000604 	addi	r4,r18,24
 80071f8:	ba000804 	addi	r8,r23,32
 80071fc:	b8c00615 	stw	r3,24(r23)
 8007200:	90800517 	ldw	r2,20(r18)
 8007204:	b8800715 	stw	r2,28(r23)
 8007208:	003f3206 	br	8006ed4 <_realloc_r+0x2a0>
 800720c:	90c00417 	ldw	r3,16(r18)
 8007210:	91000604 	addi	r4,r18,24
 8007214:	b9c00804 	addi	r7,r23,32
 8007218:	b8c00615 	stw	r3,24(r23)
 800721c:	90800517 	ldw	r2,20(r18)
 8007220:	b8800715 	stw	r2,28(r23)
 8007224:	003fb906 	br	800710c <_realloc_r+0x4d8>

08007228 <__isinfd>:
 8007228:	200d883a 	mov	r6,r4
 800722c:	0109c83a 	sub	r4,zero,r4
 8007230:	2188b03a 	or	r4,r4,r6
 8007234:	2008d7fa 	srli	r4,r4,31
 8007238:	00a00034 	movhi	r2,32768
 800723c:	10bfffc4 	addi	r2,r2,-1
 8007240:	1144703a 	and	r2,r2,r5
 8007244:	2088b03a 	or	r4,r4,r2
 8007248:	009ffc34 	movhi	r2,32752
 800724c:	1105c83a 	sub	r2,r2,r4
 8007250:	0087c83a 	sub	r3,zero,r2
 8007254:	10c4b03a 	or	r2,r2,r3
 8007258:	1004d7fa 	srli	r2,r2,31
 800725c:	00c00044 	movi	r3,1
 8007260:	1885c83a 	sub	r2,r3,r2
 8007264:	f800283a 	ret

08007268 <__isnand>:
 8007268:	200d883a 	mov	r6,r4
 800726c:	0109c83a 	sub	r4,zero,r4
 8007270:	2188b03a 	or	r4,r4,r6
 8007274:	2008d7fa 	srli	r4,r4,31
 8007278:	00a00034 	movhi	r2,32768
 800727c:	10bfffc4 	addi	r2,r2,-1
 8007280:	1144703a 	and	r2,r2,r5
 8007284:	2088b03a 	or	r4,r4,r2
 8007288:	009ffc34 	movhi	r2,32752
 800728c:	1105c83a 	sub	r2,r2,r4
 8007290:	1004d7fa 	srli	r2,r2,31
 8007294:	f800283a 	ret

08007298 <__sclose>:
 8007298:	2940038f 	ldh	r5,14(r5)
 800729c:	80075e01 	jmpi	80075e0 <_close_r>

080072a0 <__sseek>:
 80072a0:	defffe04 	addi	sp,sp,-8
 80072a4:	dc000015 	stw	r16,0(sp)
 80072a8:	2821883a 	mov	r16,r5
 80072ac:	2940038f 	ldh	r5,14(r5)
 80072b0:	dfc00115 	stw	ra,4(sp)
 80072b4:	80078580 	call	8007858 <_lseek_r>
 80072b8:	1007883a 	mov	r3,r2
 80072bc:	00bfffc4 	movi	r2,-1
 80072c0:	18800926 	beq	r3,r2,80072e8 <__sseek+0x48>
 80072c4:	8080030b 	ldhu	r2,12(r16)
 80072c8:	80c01415 	stw	r3,80(r16)
 80072cc:	10840014 	ori	r2,r2,4096
 80072d0:	8080030d 	sth	r2,12(r16)
 80072d4:	1805883a 	mov	r2,r3
 80072d8:	dfc00117 	ldw	ra,4(sp)
 80072dc:	dc000017 	ldw	r16,0(sp)
 80072e0:	dec00204 	addi	sp,sp,8
 80072e4:	f800283a 	ret
 80072e8:	8080030b 	ldhu	r2,12(r16)
 80072ec:	10bbffcc 	andi	r2,r2,61439
 80072f0:	8080030d 	sth	r2,12(r16)
 80072f4:	1805883a 	mov	r2,r3
 80072f8:	dfc00117 	ldw	ra,4(sp)
 80072fc:	dc000017 	ldw	r16,0(sp)
 8007300:	dec00204 	addi	sp,sp,8
 8007304:	f800283a 	ret

08007308 <__swrite>:
 8007308:	2880030b 	ldhu	r2,12(r5)
 800730c:	defffb04 	addi	sp,sp,-20
 8007310:	dcc00315 	stw	r19,12(sp)
 8007314:	1080400c 	andi	r2,r2,256
 8007318:	dc800215 	stw	r18,8(sp)
 800731c:	dc400115 	stw	r17,4(sp)
 8007320:	dc000015 	stw	r16,0(sp)
 8007324:	3027883a 	mov	r19,r6
 8007328:	3825883a 	mov	r18,r7
 800732c:	dfc00415 	stw	ra,16(sp)
 8007330:	2821883a 	mov	r16,r5
 8007334:	000d883a 	mov	r6,zero
 8007338:	01c00084 	movi	r7,2
 800733c:	2023883a 	mov	r17,r4
 8007340:	10000226 	beq	r2,zero,800734c <__swrite+0x44>
 8007344:	2940038f 	ldh	r5,14(r5)
 8007348:	80078580 	call	8007858 <_lseek_r>
 800734c:	8080030b 	ldhu	r2,12(r16)
 8007350:	8140038f 	ldh	r5,14(r16)
 8007354:	8809883a 	mov	r4,r17
 8007358:	10bbffcc 	andi	r2,r2,61439
 800735c:	980d883a 	mov	r6,r19
 8007360:	900f883a 	mov	r7,r18
 8007364:	8080030d 	sth	r2,12(r16)
 8007368:	dfc00417 	ldw	ra,16(sp)
 800736c:	dcc00317 	ldw	r19,12(sp)
 8007370:	dc800217 	ldw	r18,8(sp)
 8007374:	dc400117 	ldw	r17,4(sp)
 8007378:	dc000017 	ldw	r16,0(sp)
 800737c:	dec00504 	addi	sp,sp,20
 8007380:	80074a01 	jmpi	80074a0 <_write_r>

08007384 <__sread>:
 8007384:	defffe04 	addi	sp,sp,-8
 8007388:	dc000015 	stw	r16,0(sp)
 800738c:	2821883a 	mov	r16,r5
 8007390:	2940038f 	ldh	r5,14(r5)
 8007394:	dfc00115 	stw	ra,4(sp)
 8007398:	80078d00 	call	80078d0 <_read_r>
 800739c:	1007883a 	mov	r3,r2
 80073a0:	10000816 	blt	r2,zero,80073c4 <__sread+0x40>
 80073a4:	80801417 	ldw	r2,80(r16)
 80073a8:	10c5883a 	add	r2,r2,r3
 80073ac:	80801415 	stw	r2,80(r16)
 80073b0:	1805883a 	mov	r2,r3
 80073b4:	dfc00117 	ldw	ra,4(sp)
 80073b8:	dc000017 	ldw	r16,0(sp)
 80073bc:	dec00204 	addi	sp,sp,8
 80073c0:	f800283a 	ret
 80073c4:	8080030b 	ldhu	r2,12(r16)
 80073c8:	10bbffcc 	andi	r2,r2,61439
 80073cc:	8080030d 	sth	r2,12(r16)
 80073d0:	1805883a 	mov	r2,r3
 80073d4:	dfc00117 	ldw	ra,4(sp)
 80073d8:	dc000017 	ldw	r16,0(sp)
 80073dc:	dec00204 	addi	sp,sp,8
 80073e0:	f800283a 	ret

080073e4 <strcmp>:
 80073e4:	2144b03a 	or	r2,r4,r5
 80073e8:	108000cc 	andi	r2,r2,3
 80073ec:	10001d1e 	bne	r2,zero,8007464 <strcmp+0x80>
 80073f0:	200f883a 	mov	r7,r4
 80073f4:	28800017 	ldw	r2,0(r5)
 80073f8:	21000017 	ldw	r4,0(r4)
 80073fc:	280d883a 	mov	r6,r5
 8007400:	2080161e 	bne	r4,r2,800745c <strcmp+0x78>
 8007404:	023fbff4 	movhi	r8,65279
 8007408:	423fbfc4 	addi	r8,r8,-257
 800740c:	2207883a 	add	r3,r4,r8
 8007410:	01602074 	movhi	r5,32897
 8007414:	29602004 	addi	r5,r5,-32640
 8007418:	1946703a 	and	r3,r3,r5
 800741c:	0104303a 	nor	r2,zero,r4
 8007420:	10c4703a 	and	r2,r2,r3
 8007424:	10001c1e 	bne	r2,zero,8007498 <strcmp+0xb4>
 8007428:	4013883a 	mov	r9,r8
 800742c:	2811883a 	mov	r8,r5
 8007430:	00000106 	br	8007438 <strcmp+0x54>
 8007434:	1800181e 	bne	r3,zero,8007498 <strcmp+0xb4>
 8007438:	39c00104 	addi	r7,r7,4
 800743c:	39000017 	ldw	r4,0(r7)
 8007440:	31800104 	addi	r6,r6,4
 8007444:	31400017 	ldw	r5,0(r6)
 8007448:	2245883a 	add	r2,r4,r9
 800744c:	1204703a 	and	r2,r2,r8
 8007450:	0106303a 	nor	r3,zero,r4
 8007454:	1886703a 	and	r3,r3,r2
 8007458:	217ff626 	beq	r4,r5,8007434 <strcmp+0x50>
 800745c:	3809883a 	mov	r4,r7
 8007460:	300b883a 	mov	r5,r6
 8007464:	20c00007 	ldb	r3,0(r4)
 8007468:	1800051e 	bne	r3,zero,8007480 <strcmp+0x9c>
 800746c:	00000606 	br	8007488 <strcmp+0xa4>
 8007470:	21000044 	addi	r4,r4,1
 8007474:	20c00007 	ldb	r3,0(r4)
 8007478:	29400044 	addi	r5,r5,1
 800747c:	18000226 	beq	r3,zero,8007488 <strcmp+0xa4>
 8007480:	28800007 	ldb	r2,0(r5)
 8007484:	18bffa26 	beq	r3,r2,8007470 <strcmp+0x8c>
 8007488:	20c00003 	ldbu	r3,0(r4)
 800748c:	28800003 	ldbu	r2,0(r5)
 8007490:	1885c83a 	sub	r2,r3,r2
 8007494:	f800283a 	ret
 8007498:	0005883a 	mov	r2,zero
 800749c:	f800283a 	ret

080074a0 <_write_r>:
 80074a0:	defffd04 	addi	sp,sp,-12
 80074a4:	dc000015 	stw	r16,0(sp)
 80074a8:	04020074 	movhi	r16,2049
 80074ac:	8411a604 	addi	r16,r16,18072
 80074b0:	dc400115 	stw	r17,4(sp)
 80074b4:	80000015 	stw	zero,0(r16)
 80074b8:	2023883a 	mov	r17,r4
 80074bc:	2809883a 	mov	r4,r5
 80074c0:	300b883a 	mov	r5,r6
 80074c4:	380d883a 	mov	r6,r7
 80074c8:	dfc00215 	stw	ra,8(sp)
 80074cc:	800a9080 	call	800a908 <write>
 80074d0:	1007883a 	mov	r3,r2
 80074d4:	00bfffc4 	movi	r2,-1
 80074d8:	18800626 	beq	r3,r2,80074f4 <_write_r+0x54>
 80074dc:	1805883a 	mov	r2,r3
 80074e0:	dfc00217 	ldw	ra,8(sp)
 80074e4:	dc400117 	ldw	r17,4(sp)
 80074e8:	dc000017 	ldw	r16,0(sp)
 80074ec:	dec00304 	addi	sp,sp,12
 80074f0:	f800283a 	ret
 80074f4:	80800017 	ldw	r2,0(r16)
 80074f8:	103ff826 	beq	r2,zero,80074dc <_write_r+0x3c>
 80074fc:	88800015 	stw	r2,0(r17)
 8007500:	1805883a 	mov	r2,r3
 8007504:	dfc00217 	ldw	ra,8(sp)
 8007508:	dc400117 	ldw	r17,4(sp)
 800750c:	dc000017 	ldw	r16,0(sp)
 8007510:	dec00304 	addi	sp,sp,12
 8007514:	f800283a 	ret

08007518 <_calloc_r>:
 8007518:	defffe04 	addi	sp,sp,-8
 800751c:	dc400015 	stw	r17,0(sp)
 8007520:	2023883a 	mov	r17,r4
 8007524:	2809883a 	mov	r4,r5
 8007528:	300b883a 	mov	r5,r6
 800752c:	dfc00115 	stw	ra,4(sp)
 8007530:	800988c0 	call	800988c <__mulsi3>
 8007534:	100b883a 	mov	r5,r2
 8007538:	8809883a 	mov	r4,r17
 800753c:	80005100 	call	8000510 <_malloc_r>
 8007540:	1023883a 	mov	r17,r2
 8007544:	01c00904 	movi	r7,36
 8007548:	10000d26 	beq	r2,zero,8007580 <_calloc_r+0x68>
 800754c:	10ffff17 	ldw	r3,-4(r2)
 8007550:	1009883a 	mov	r4,r2
 8007554:	00bfff04 	movi	r2,-4
 8007558:	1886703a 	and	r3,r3,r2
 800755c:	1887883a 	add	r3,r3,r2
 8007560:	180d883a 	mov	r6,r3
 8007564:	000b883a 	mov	r5,zero
 8007568:	38c01736 	bltu	r7,r3,80075c8 <_calloc_r+0xb0>
 800756c:	008004c4 	movi	r2,19
 8007570:	10c00836 	bltu	r2,r3,8007594 <_calloc_r+0x7c>
 8007574:	20000215 	stw	zero,8(r4)
 8007578:	20000015 	stw	zero,0(r4)
 800757c:	20000115 	stw	zero,4(r4)
 8007580:	8805883a 	mov	r2,r17
 8007584:	dfc00117 	ldw	ra,4(sp)
 8007588:	dc400017 	ldw	r17,0(sp)
 800758c:	dec00204 	addi	sp,sp,8
 8007590:	f800283a 	ret
 8007594:	008006c4 	movi	r2,27
 8007598:	88000015 	stw	zero,0(r17)
 800759c:	88000115 	stw	zero,4(r17)
 80075a0:	89000204 	addi	r4,r17,8
 80075a4:	10fff32e 	bgeu	r2,r3,8007574 <_calloc_r+0x5c>
 80075a8:	88000215 	stw	zero,8(r17)
 80075ac:	88000315 	stw	zero,12(r17)
 80075b0:	89000404 	addi	r4,r17,16
 80075b4:	19ffef1e 	bne	r3,r7,8007574 <_calloc_r+0x5c>
 80075b8:	89000604 	addi	r4,r17,24
 80075bc:	88000415 	stw	zero,16(r17)
 80075c0:	88000515 	stw	zero,20(r17)
 80075c4:	003feb06 	br	8007574 <_calloc_r+0x5c>
 80075c8:	8005b100 	call	8005b10 <memset>
 80075cc:	8805883a 	mov	r2,r17
 80075d0:	dfc00117 	ldw	ra,4(sp)
 80075d4:	dc400017 	ldw	r17,0(sp)
 80075d8:	dec00204 	addi	sp,sp,8
 80075dc:	f800283a 	ret

080075e0 <_close_r>:
 80075e0:	defffd04 	addi	sp,sp,-12
 80075e4:	dc000015 	stw	r16,0(sp)
 80075e8:	04020074 	movhi	r16,2049
 80075ec:	8411a604 	addi	r16,r16,18072
 80075f0:	dc400115 	stw	r17,4(sp)
 80075f4:	80000015 	stw	zero,0(r16)
 80075f8:	2023883a 	mov	r17,r4
 80075fc:	2809883a 	mov	r4,r5
 8007600:	dfc00215 	stw	ra,8(sp)
 8007604:	8009f7c0 	call	8009f7c <close>
 8007608:	1007883a 	mov	r3,r2
 800760c:	00bfffc4 	movi	r2,-1
 8007610:	18800626 	beq	r3,r2,800762c <_close_r+0x4c>
 8007614:	1805883a 	mov	r2,r3
 8007618:	dfc00217 	ldw	ra,8(sp)
 800761c:	dc400117 	ldw	r17,4(sp)
 8007620:	dc000017 	ldw	r16,0(sp)
 8007624:	dec00304 	addi	sp,sp,12
 8007628:	f800283a 	ret
 800762c:	80800017 	ldw	r2,0(r16)
 8007630:	103ff826 	beq	r2,zero,8007614 <_close_r+0x34>
 8007634:	88800015 	stw	r2,0(r17)
 8007638:	1805883a 	mov	r2,r3
 800763c:	dfc00217 	ldw	ra,8(sp)
 8007640:	dc400117 	ldw	r17,4(sp)
 8007644:	dc000017 	ldw	r16,0(sp)
 8007648:	dec00304 	addi	sp,sp,12
 800764c:	f800283a 	ret

08007650 <_fclose_r>:
 8007650:	defffc04 	addi	sp,sp,-16
 8007654:	dc400115 	stw	r17,4(sp)
 8007658:	dc000015 	stw	r16,0(sp)
 800765c:	dfc00315 	stw	ra,12(sp)
 8007660:	dc800215 	stw	r18,8(sp)
 8007664:	2821883a 	mov	r16,r5
 8007668:	2023883a 	mov	r17,r4
 800766c:	28002926 	beq	r5,zero,8007714 <_fclose_r+0xc4>
 8007670:	800495c0 	call	800495c <__sfp_lock_acquire>
 8007674:	88000226 	beq	r17,zero,8007680 <_fclose_r+0x30>
 8007678:	88800e17 	ldw	r2,56(r17)
 800767c:	10002d26 	beq	r2,zero,8007734 <_fclose_r+0xe4>
 8007680:	8080030f 	ldh	r2,12(r16)
 8007684:	10002226 	beq	r2,zero,8007710 <_fclose_r+0xc0>
 8007688:	8809883a 	mov	r4,r17
 800768c:	800b883a 	mov	r5,r16
 8007690:	80046d40 	call	80046d4 <_fflush_r>
 8007694:	1025883a 	mov	r18,r2
 8007698:	80800b17 	ldw	r2,44(r16)
 800769c:	10000426 	beq	r2,zero,80076b0 <_fclose_r+0x60>
 80076a0:	81400717 	ldw	r5,28(r16)
 80076a4:	8809883a 	mov	r4,r17
 80076a8:	103ee83a 	callr	r2
 80076ac:	10002a16 	blt	r2,zero,8007758 <_fclose_r+0x108>
 80076b0:	8080030b 	ldhu	r2,12(r16)
 80076b4:	1080200c 	andi	r2,r2,128
 80076b8:	1000231e 	bne	r2,zero,8007748 <_fclose_r+0xf8>
 80076bc:	81400c17 	ldw	r5,48(r16)
 80076c0:	28000526 	beq	r5,zero,80076d8 <_fclose_r+0x88>
 80076c4:	80801004 	addi	r2,r16,64
 80076c8:	28800226 	beq	r5,r2,80076d4 <_fclose_r+0x84>
 80076cc:	8809883a 	mov	r4,r17
 80076d0:	8004d240 	call	8004d24 <_free_r>
 80076d4:	80000c15 	stw	zero,48(r16)
 80076d8:	81401117 	ldw	r5,68(r16)
 80076dc:	28000326 	beq	r5,zero,80076ec <_fclose_r+0x9c>
 80076e0:	8809883a 	mov	r4,r17
 80076e4:	8004d240 	call	8004d24 <_free_r>
 80076e8:	80001115 	stw	zero,68(r16)
 80076ec:	8000030d 	sth	zero,12(r16)
 80076f0:	80049600 	call	8004960 <__sfp_lock_release>
 80076f4:	9005883a 	mov	r2,r18
 80076f8:	dfc00317 	ldw	ra,12(sp)
 80076fc:	dc800217 	ldw	r18,8(sp)
 8007700:	dc400117 	ldw	r17,4(sp)
 8007704:	dc000017 	ldw	r16,0(sp)
 8007708:	dec00404 	addi	sp,sp,16
 800770c:	f800283a 	ret
 8007710:	80049600 	call	8004960 <__sfp_lock_release>
 8007714:	0025883a 	mov	r18,zero
 8007718:	9005883a 	mov	r2,r18
 800771c:	dfc00317 	ldw	ra,12(sp)
 8007720:	dc800217 	ldw	r18,8(sp)
 8007724:	dc400117 	ldw	r17,4(sp)
 8007728:	dc000017 	ldw	r16,0(sp)
 800772c:	dec00404 	addi	sp,sp,16
 8007730:	f800283a 	ret
 8007734:	8809883a 	mov	r4,r17
 8007738:	800496c0 	call	800496c <__sinit>
 800773c:	8080030f 	ldh	r2,12(r16)
 8007740:	103fd11e 	bne	r2,zero,8007688 <_fclose_r+0x38>
 8007744:	003ff206 	br	8007710 <_fclose_r+0xc0>
 8007748:	81400417 	ldw	r5,16(r16)
 800774c:	8809883a 	mov	r4,r17
 8007750:	8004d240 	call	8004d24 <_free_r>
 8007754:	003fd906 	br	80076bc <_fclose_r+0x6c>
 8007758:	04bfffc4 	movi	r18,-1
 800775c:	003fd406 	br	80076b0 <_fclose_r+0x60>

08007760 <fclose>:
 8007760:	00820074 	movhi	r2,2049
 8007764:	108aee04 	addi	r2,r2,11192
 8007768:	200b883a 	mov	r5,r4
 800776c:	11000017 	ldw	r4,0(r2)
 8007770:	80076501 	jmpi	8007650 <_fclose_r>

08007774 <_fstat_r>:
 8007774:	defffd04 	addi	sp,sp,-12
 8007778:	dc000015 	stw	r16,0(sp)
 800777c:	04020074 	movhi	r16,2049
 8007780:	8411a604 	addi	r16,r16,18072
 8007784:	dc400115 	stw	r17,4(sp)
 8007788:	80000015 	stw	zero,0(r16)
 800778c:	2023883a 	mov	r17,r4
 8007790:	2809883a 	mov	r4,r5
 8007794:	300b883a 	mov	r5,r6
 8007798:	dfc00215 	stw	ra,8(sp)
 800779c:	800a1080 	call	800a108 <fstat>
 80077a0:	1007883a 	mov	r3,r2
 80077a4:	00bfffc4 	movi	r2,-1
 80077a8:	18800626 	beq	r3,r2,80077c4 <_fstat_r+0x50>
 80077ac:	1805883a 	mov	r2,r3
 80077b0:	dfc00217 	ldw	ra,8(sp)
 80077b4:	dc400117 	ldw	r17,4(sp)
 80077b8:	dc000017 	ldw	r16,0(sp)
 80077bc:	dec00304 	addi	sp,sp,12
 80077c0:	f800283a 	ret
 80077c4:	80800017 	ldw	r2,0(r16)
 80077c8:	103ff826 	beq	r2,zero,80077ac <_fstat_r+0x38>
 80077cc:	88800015 	stw	r2,0(r17)
 80077d0:	1805883a 	mov	r2,r3
 80077d4:	dfc00217 	ldw	ra,8(sp)
 80077d8:	dc400117 	ldw	r17,4(sp)
 80077dc:	dc000017 	ldw	r16,0(sp)
 80077e0:	dec00304 	addi	sp,sp,12
 80077e4:	f800283a 	ret

080077e8 <_isatty_r>:
 80077e8:	defffd04 	addi	sp,sp,-12
 80077ec:	dc000015 	stw	r16,0(sp)
 80077f0:	04020074 	movhi	r16,2049
 80077f4:	8411a604 	addi	r16,r16,18072
 80077f8:	dc400115 	stw	r17,4(sp)
 80077fc:	80000015 	stw	zero,0(r16)
 8007800:	2023883a 	mov	r17,r4
 8007804:	2809883a 	mov	r4,r5
 8007808:	dfc00215 	stw	ra,8(sp)
 800780c:	800a2400 	call	800a240 <isatty>
 8007810:	1007883a 	mov	r3,r2
 8007814:	00bfffc4 	movi	r2,-1
 8007818:	18800626 	beq	r3,r2,8007834 <_isatty_r+0x4c>
 800781c:	1805883a 	mov	r2,r3
 8007820:	dfc00217 	ldw	ra,8(sp)
 8007824:	dc400117 	ldw	r17,4(sp)
 8007828:	dc000017 	ldw	r16,0(sp)
 800782c:	dec00304 	addi	sp,sp,12
 8007830:	f800283a 	ret
 8007834:	80800017 	ldw	r2,0(r16)
 8007838:	103ff826 	beq	r2,zero,800781c <_isatty_r+0x34>
 800783c:	88800015 	stw	r2,0(r17)
 8007840:	1805883a 	mov	r2,r3
 8007844:	dfc00217 	ldw	ra,8(sp)
 8007848:	dc400117 	ldw	r17,4(sp)
 800784c:	dc000017 	ldw	r16,0(sp)
 8007850:	dec00304 	addi	sp,sp,12
 8007854:	f800283a 	ret

08007858 <_lseek_r>:
 8007858:	defffd04 	addi	sp,sp,-12
 800785c:	dc000015 	stw	r16,0(sp)
 8007860:	04020074 	movhi	r16,2049
 8007864:	8411a604 	addi	r16,r16,18072
 8007868:	dc400115 	stw	r17,4(sp)
 800786c:	80000015 	stw	zero,0(r16)
 8007870:	2023883a 	mov	r17,r4
 8007874:	2809883a 	mov	r4,r5
 8007878:	300b883a 	mov	r5,r6
 800787c:	380d883a 	mov	r6,r7
 8007880:	dfc00215 	stw	ra,8(sp)
 8007884:	800a4500 	call	800a450 <lseek>
 8007888:	1007883a 	mov	r3,r2
 800788c:	00bfffc4 	movi	r2,-1
 8007890:	18800626 	beq	r3,r2,80078ac <_lseek_r+0x54>
 8007894:	1805883a 	mov	r2,r3
 8007898:	dfc00217 	ldw	ra,8(sp)
 800789c:	dc400117 	ldw	r17,4(sp)
 80078a0:	dc000017 	ldw	r16,0(sp)
 80078a4:	dec00304 	addi	sp,sp,12
 80078a8:	f800283a 	ret
 80078ac:	80800017 	ldw	r2,0(r16)
 80078b0:	103ff826 	beq	r2,zero,8007894 <_lseek_r+0x3c>
 80078b4:	88800015 	stw	r2,0(r17)
 80078b8:	1805883a 	mov	r2,r3
 80078bc:	dfc00217 	ldw	ra,8(sp)
 80078c0:	dc400117 	ldw	r17,4(sp)
 80078c4:	dc000017 	ldw	r16,0(sp)
 80078c8:	dec00304 	addi	sp,sp,12
 80078cc:	f800283a 	ret

080078d0 <_read_r>:
 80078d0:	defffd04 	addi	sp,sp,-12
 80078d4:	dc000015 	stw	r16,0(sp)
 80078d8:	04020074 	movhi	r16,2049
 80078dc:	8411a604 	addi	r16,r16,18072
 80078e0:	dc400115 	stw	r17,4(sp)
 80078e4:	80000015 	stw	zero,0(r16)
 80078e8:	2023883a 	mov	r17,r4
 80078ec:	2809883a 	mov	r4,r5
 80078f0:	300b883a 	mov	r5,r6
 80078f4:	380d883a 	mov	r6,r7
 80078f8:	dfc00215 	stw	ra,8(sp)
 80078fc:	800a6500 	call	800a650 <read>
 8007900:	1007883a 	mov	r3,r2
 8007904:	00bfffc4 	movi	r2,-1
 8007908:	18800626 	beq	r3,r2,8007924 <_read_r+0x54>
 800790c:	1805883a 	mov	r2,r3
 8007910:	dfc00217 	ldw	ra,8(sp)
 8007914:	dc400117 	ldw	r17,4(sp)
 8007918:	dc000017 	ldw	r16,0(sp)
 800791c:	dec00304 	addi	sp,sp,12
 8007920:	f800283a 	ret
 8007924:	80800017 	ldw	r2,0(r16)
 8007928:	103ff826 	beq	r2,zero,800790c <_read_r+0x3c>
 800792c:	88800015 	stw	r2,0(r17)
 8007930:	1805883a 	mov	r2,r3
 8007934:	dfc00217 	ldw	ra,8(sp)
 8007938:	dc400117 	ldw	r17,4(sp)
 800793c:	dc000017 	ldw	r16,0(sp)
 8007940:	dec00304 	addi	sp,sp,12
 8007944:	f800283a 	ret

08007948 <__udivdi3>:
 8007948:	defff104 	addi	sp,sp,-60
 800794c:	0015883a 	mov	r10,zero
 8007950:	2005883a 	mov	r2,r4
 8007954:	3011883a 	mov	r8,r6
 8007958:	df000d15 	stw	fp,52(sp)
 800795c:	dd400a15 	stw	r21,40(sp)
 8007960:	dcc00815 	stw	r19,32(sp)
 8007964:	dfc00e15 	stw	ra,56(sp)
 8007968:	ddc00c15 	stw	r23,48(sp)
 800796c:	dd800b15 	stw	r22,44(sp)
 8007970:	dd000915 	stw	r20,36(sp)
 8007974:	dc800715 	stw	r18,28(sp)
 8007978:	dc400615 	stw	r17,24(sp)
 800797c:	dc000515 	stw	r16,20(sp)
 8007980:	da800315 	stw	r10,12(sp)
 8007984:	4027883a 	mov	r19,r8
 8007988:	1039883a 	mov	fp,r2
 800798c:	282b883a 	mov	r21,r5
 8007990:	da800415 	stw	r10,16(sp)
 8007994:	3800401e 	bne	r7,zero,8007a98 <__udivdi3+0x150>
 8007998:	2a006536 	bltu	r5,r8,8007b30 <__udivdi3+0x1e8>
 800799c:	4000b526 	beq	r8,zero,8007c74 <__udivdi3+0x32c>
 80079a0:	00bfffd4 	movui	r2,65535
 80079a4:	14c0ad36 	bltu	r2,r19,8007c5c <__udivdi3+0x314>
 80079a8:	00803fc4 	movi	r2,255
 80079ac:	14c15e36 	bltu	r2,r19,8007f28 <__udivdi3+0x5e0>
 80079b0:	000b883a 	mov	r5,zero
 80079b4:	0005883a 	mov	r2,zero
 80079b8:	9884d83a 	srl	r2,r19,r2
 80079bc:	01020074 	movhi	r4,2049
 80079c0:	21040204 	addi	r4,r4,4104
 80079c4:	01800804 	movi	r6,32
 80079c8:	1105883a 	add	r2,r2,r4
 80079cc:	10c00003 	ldbu	r3,0(r2)
 80079d0:	28c7883a 	add	r3,r5,r3
 80079d4:	30e9c83a 	sub	r20,r6,r3
 80079d8:	a0010a1e 	bne	r20,zero,8007e04 <__udivdi3+0x4bc>
 80079dc:	982ed43a 	srli	r23,r19,16
 80079e0:	acebc83a 	sub	r21,r21,r19
 80079e4:	9dbfffcc 	andi	r22,r19,65535
 80079e8:	05000044 	movi	r20,1
 80079ec:	a809883a 	mov	r4,r21
 80079f0:	b80b883a 	mov	r5,r23
 80079f4:	800987c0 	call	800987c <__udivsi3>
 80079f8:	100b883a 	mov	r5,r2
 80079fc:	b009883a 	mov	r4,r22
 8007a00:	1021883a 	mov	r16,r2
 8007a04:	800988c0 	call	800988c <__mulsi3>
 8007a08:	a809883a 	mov	r4,r21
 8007a0c:	b80b883a 	mov	r5,r23
 8007a10:	1023883a 	mov	r17,r2
 8007a14:	80098840 	call	8009884 <__umodsi3>
 8007a18:	1004943a 	slli	r2,r2,16
 8007a1c:	e006d43a 	srli	r3,fp,16
 8007a20:	10c4b03a 	or	r2,r2,r3
 8007a24:	1440042e 	bgeu	r2,r17,8007a38 <__udivdi3+0xf0>
 8007a28:	14c5883a 	add	r2,r2,r19
 8007a2c:	843fffc4 	addi	r16,r16,-1
 8007a30:	14c00136 	bltu	r2,r19,8007a38 <__udivdi3+0xf0>
 8007a34:	14415c36 	bltu	r2,r17,8007fa8 <__udivdi3+0x660>
 8007a38:	1463c83a 	sub	r17,r2,r17
 8007a3c:	8809883a 	mov	r4,r17
 8007a40:	b80b883a 	mov	r5,r23
 8007a44:	800987c0 	call	800987c <__udivsi3>
 8007a48:	100b883a 	mov	r5,r2
 8007a4c:	b009883a 	mov	r4,r22
 8007a50:	102b883a 	mov	r21,r2
 8007a54:	800988c0 	call	800988c <__mulsi3>
 8007a58:	8809883a 	mov	r4,r17
 8007a5c:	b80b883a 	mov	r5,r23
 8007a60:	1025883a 	mov	r18,r2
 8007a64:	80098840 	call	8009884 <__umodsi3>
 8007a68:	1004943a 	slli	r2,r2,16
 8007a6c:	e0ffffcc 	andi	r3,fp,65535
 8007a70:	10c4b03a 	or	r2,r2,r3
 8007a74:	1480042e 	bgeu	r2,r18,8007a88 <__udivdi3+0x140>
 8007a78:	9885883a 	add	r2,r19,r2
 8007a7c:	ad7fffc4 	addi	r21,r21,-1
 8007a80:	14c00136 	bltu	r2,r19,8007a88 <__udivdi3+0x140>
 8007a84:	14813c36 	bltu	r2,r18,8007f78 <__udivdi3+0x630>
 8007a88:	8004943a 	slli	r2,r16,16
 8007a8c:	a009883a 	mov	r4,r20
 8007a90:	a884b03a 	or	r2,r21,r2
 8007a94:	00001506 	br	8007aec <__udivdi3+0x1a4>
 8007a98:	380d883a 	mov	r6,r7
 8007a9c:	29c06c36 	bltu	r5,r7,8007c50 <__udivdi3+0x308>
 8007aa0:	00bfffd4 	movui	r2,65535
 8007aa4:	11c06436 	bltu	r2,r7,8007c38 <__udivdi3+0x2f0>
 8007aa8:	00803fc4 	movi	r2,255
 8007aac:	11c11836 	bltu	r2,r7,8007f10 <__udivdi3+0x5c8>
 8007ab0:	000b883a 	mov	r5,zero
 8007ab4:	0005883a 	mov	r2,zero
 8007ab8:	3084d83a 	srl	r2,r6,r2
 8007abc:	01020074 	movhi	r4,2049
 8007ac0:	21040204 	addi	r4,r4,4104
 8007ac4:	01c00804 	movi	r7,32
 8007ac8:	1105883a 	add	r2,r2,r4
 8007acc:	10c00003 	ldbu	r3,0(r2)
 8007ad0:	28c7883a 	add	r3,r5,r3
 8007ad4:	38edc83a 	sub	r22,r7,r3
 8007ad8:	b000731e 	bne	r22,zero,8007ca8 <__udivdi3+0x360>
 8007adc:	35400136 	bltu	r6,r21,8007ae4 <__udivdi3+0x19c>
 8007ae0:	e4c05b36 	bltu	fp,r19,8007c50 <__udivdi3+0x308>
 8007ae4:	00800044 	movi	r2,1
 8007ae8:	0009883a 	mov	r4,zero
 8007aec:	d8800315 	stw	r2,12(sp)
 8007af0:	d9400317 	ldw	r5,12(sp)
 8007af4:	2007883a 	mov	r3,r4
 8007af8:	d9000415 	stw	r4,16(sp)
 8007afc:	2805883a 	mov	r2,r5
 8007b00:	dfc00e17 	ldw	ra,56(sp)
 8007b04:	df000d17 	ldw	fp,52(sp)
 8007b08:	ddc00c17 	ldw	r23,48(sp)
 8007b0c:	dd800b17 	ldw	r22,44(sp)
 8007b10:	dd400a17 	ldw	r21,40(sp)
 8007b14:	dd000917 	ldw	r20,36(sp)
 8007b18:	dcc00817 	ldw	r19,32(sp)
 8007b1c:	dc800717 	ldw	r18,28(sp)
 8007b20:	dc400617 	ldw	r17,24(sp)
 8007b24:	dc000517 	ldw	r16,20(sp)
 8007b28:	dec00f04 	addi	sp,sp,60
 8007b2c:	f800283a 	ret
 8007b30:	00bfffd4 	movui	r2,65535
 8007b34:	12005636 	bltu	r2,r8,8007c90 <__udivdi3+0x348>
 8007b38:	00803fc4 	movi	r2,255
 8007b3c:	12010036 	bltu	r2,r8,8007f40 <__udivdi3+0x5f8>
 8007b40:	000b883a 	mov	r5,zero
 8007b44:	0005883a 	mov	r2,zero
 8007b48:	9884d83a 	srl	r2,r19,r2
 8007b4c:	01020074 	movhi	r4,2049
 8007b50:	21040204 	addi	r4,r4,4104
 8007b54:	01800804 	movi	r6,32
 8007b58:	1105883a 	add	r2,r2,r4
 8007b5c:	10c00003 	ldbu	r3,0(r2)
 8007b60:	28c7883a 	add	r3,r5,r3
 8007b64:	30cbc83a 	sub	r5,r6,r3
 8007b68:	28000626 	beq	r5,zero,8007b84 <__udivdi3+0x23c>
 8007b6c:	3145c83a 	sub	r2,r6,r5
 8007b70:	e084d83a 	srl	r2,fp,r2
 8007b74:	a946983a 	sll	r3,r21,r5
 8007b78:	e178983a 	sll	fp,fp,r5
 8007b7c:	9966983a 	sll	r19,r19,r5
 8007b80:	18aab03a 	or	r21,r3,r2
 8007b84:	982ed43a 	srli	r23,r19,16
 8007b88:	a809883a 	mov	r4,r21
 8007b8c:	9cbfffcc 	andi	r18,r19,65535
 8007b90:	b80b883a 	mov	r5,r23
 8007b94:	800987c0 	call	800987c <__udivsi3>
 8007b98:	100b883a 	mov	r5,r2
 8007b9c:	9009883a 	mov	r4,r18
 8007ba0:	1021883a 	mov	r16,r2
 8007ba4:	800988c0 	call	800988c <__mulsi3>
 8007ba8:	a809883a 	mov	r4,r21
 8007bac:	b80b883a 	mov	r5,r23
 8007bb0:	1023883a 	mov	r17,r2
 8007bb4:	80098840 	call	8009884 <__umodsi3>
 8007bb8:	1004943a 	slli	r2,r2,16
 8007bbc:	e006d43a 	srli	r3,fp,16
 8007bc0:	10c4b03a 	or	r2,r2,r3
 8007bc4:	1440042e 	bgeu	r2,r17,8007bd8 <__udivdi3+0x290>
 8007bc8:	14c5883a 	add	r2,r2,r19
 8007bcc:	843fffc4 	addi	r16,r16,-1
 8007bd0:	14c00136 	bltu	r2,r19,8007bd8 <__udivdi3+0x290>
 8007bd4:	1440ea36 	bltu	r2,r17,8007f80 <__udivdi3+0x638>
 8007bd8:	1463c83a 	sub	r17,r2,r17
 8007bdc:	8809883a 	mov	r4,r17
 8007be0:	b80b883a 	mov	r5,r23
 8007be4:	800987c0 	call	800987c <__udivsi3>
 8007be8:	100b883a 	mov	r5,r2
 8007bec:	9009883a 	mov	r4,r18
 8007bf0:	102b883a 	mov	r21,r2
 8007bf4:	800988c0 	call	800988c <__mulsi3>
 8007bf8:	8809883a 	mov	r4,r17
 8007bfc:	b80b883a 	mov	r5,r23
 8007c00:	1025883a 	mov	r18,r2
 8007c04:	80098840 	call	8009884 <__umodsi3>
 8007c08:	1004943a 	slli	r2,r2,16
 8007c0c:	e0ffffcc 	andi	r3,fp,65535
 8007c10:	10c4b03a 	or	r2,r2,r3
 8007c14:	1480042e 	bgeu	r2,r18,8007c28 <__udivdi3+0x2e0>
 8007c18:	9885883a 	add	r2,r19,r2
 8007c1c:	ad7fffc4 	addi	r21,r21,-1
 8007c20:	14c00136 	bltu	r2,r19,8007c28 <__udivdi3+0x2e0>
 8007c24:	1480d936 	bltu	r2,r18,8007f8c <__udivdi3+0x644>
 8007c28:	8004943a 	slli	r2,r16,16
 8007c2c:	0009883a 	mov	r4,zero
 8007c30:	a884b03a 	or	r2,r21,r2
 8007c34:	003fad06 	br	8007aec <__udivdi3+0x1a4>
 8007c38:	00804034 	movhi	r2,256
 8007c3c:	10bfffc4 	addi	r2,r2,-1
 8007c40:	11c0b636 	bltu	r2,r7,8007f1c <__udivdi3+0x5d4>
 8007c44:	01400404 	movi	r5,16
 8007c48:	2805883a 	mov	r2,r5
 8007c4c:	003f9a06 	br	8007ab8 <__udivdi3+0x170>
 8007c50:	0005883a 	mov	r2,zero
 8007c54:	0009883a 	mov	r4,zero
 8007c58:	003fa406 	br	8007aec <__udivdi3+0x1a4>
 8007c5c:	00804034 	movhi	r2,256
 8007c60:	10bfffc4 	addi	r2,r2,-1
 8007c64:	14c0b336 	bltu	r2,r19,8007f34 <__udivdi3+0x5ec>
 8007c68:	01400404 	movi	r5,16
 8007c6c:	2805883a 	mov	r2,r5
 8007c70:	003f5106 	br	80079b8 <__udivdi3+0x70>
 8007c74:	01000044 	movi	r4,1
 8007c78:	000b883a 	mov	r5,zero
 8007c7c:	800987c0 	call	800987c <__udivsi3>
 8007c80:	1027883a 	mov	r19,r2
 8007c84:	00bfffd4 	movui	r2,65535
 8007c88:	14fff436 	bltu	r2,r19,8007c5c <__udivdi3+0x314>
 8007c8c:	003f4606 	br	80079a8 <__udivdi3+0x60>
 8007c90:	00804034 	movhi	r2,256
 8007c94:	10bfffc4 	addi	r2,r2,-1
 8007c98:	1200ac36 	bltu	r2,r8,8007f4c <__udivdi3+0x604>
 8007c9c:	01400404 	movi	r5,16
 8007ca0:	2805883a 	mov	r2,r5
 8007ca4:	003fa806 	br	8007b48 <__udivdi3+0x200>
 8007ca8:	3d85c83a 	sub	r2,r7,r22
 8007cac:	3588983a 	sll	r4,r6,r22
 8007cb0:	9886d83a 	srl	r3,r19,r2
 8007cb4:	a8a2d83a 	srl	r17,r21,r2
 8007cb8:	e084d83a 	srl	r2,fp,r2
 8007cbc:	20eeb03a 	or	r23,r4,r3
 8007cc0:	b824d43a 	srli	r18,r23,16
 8007cc4:	ad86983a 	sll	r3,r21,r22
 8007cc8:	8809883a 	mov	r4,r17
 8007ccc:	900b883a 	mov	r5,r18
 8007cd0:	1886b03a 	or	r3,r3,r2
 8007cd4:	d8c00115 	stw	r3,4(sp)
 8007cd8:	bc3fffcc 	andi	r16,r23,65535
 8007cdc:	800987c0 	call	800987c <__udivsi3>
 8007ce0:	100b883a 	mov	r5,r2
 8007ce4:	8009883a 	mov	r4,r16
 8007ce8:	1029883a 	mov	r20,r2
 8007cec:	800988c0 	call	800988c <__mulsi3>
 8007cf0:	900b883a 	mov	r5,r18
 8007cf4:	8809883a 	mov	r4,r17
 8007cf8:	102b883a 	mov	r21,r2
 8007cfc:	80098840 	call	8009884 <__umodsi3>
 8007d00:	d9400117 	ldw	r5,4(sp)
 8007d04:	1004943a 	slli	r2,r2,16
 8007d08:	9da6983a 	sll	r19,r19,r22
 8007d0c:	2806d43a 	srli	r3,r5,16
 8007d10:	10c4b03a 	or	r2,r2,r3
 8007d14:	1540032e 	bgeu	r2,r21,8007d24 <__udivdi3+0x3dc>
 8007d18:	15c5883a 	add	r2,r2,r23
 8007d1c:	a53fffc4 	addi	r20,r20,-1
 8007d20:	15c0912e 	bgeu	r2,r23,8007f68 <__udivdi3+0x620>
 8007d24:	1563c83a 	sub	r17,r2,r21
 8007d28:	8809883a 	mov	r4,r17
 8007d2c:	900b883a 	mov	r5,r18
 8007d30:	800987c0 	call	800987c <__udivsi3>
 8007d34:	100b883a 	mov	r5,r2
 8007d38:	8009883a 	mov	r4,r16
 8007d3c:	102b883a 	mov	r21,r2
 8007d40:	800988c0 	call	800988c <__mulsi3>
 8007d44:	8809883a 	mov	r4,r17
 8007d48:	900b883a 	mov	r5,r18
 8007d4c:	1021883a 	mov	r16,r2
 8007d50:	80098840 	call	8009884 <__umodsi3>
 8007d54:	da800117 	ldw	r10,4(sp)
 8007d58:	1004943a 	slli	r2,r2,16
 8007d5c:	50ffffcc 	andi	r3,r10,65535
 8007d60:	10c6b03a 	or	r3,r2,r3
 8007d64:	1c00032e 	bgeu	r3,r16,8007d74 <__udivdi3+0x42c>
 8007d68:	1dc7883a 	add	r3,r3,r23
 8007d6c:	ad7fffc4 	addi	r21,r21,-1
 8007d70:	1dc0792e 	bgeu	r3,r23,8007f58 <__udivdi3+0x610>
 8007d74:	a004943a 	slli	r2,r20,16
 8007d78:	982ed43a 	srli	r23,r19,16
 8007d7c:	9cffffcc 	andi	r19,r19,65535
 8007d80:	a8a4b03a 	or	r18,r21,r2
 8007d84:	947fffcc 	andi	r17,r18,65535
 8007d88:	902ad43a 	srli	r21,r18,16
 8007d8c:	8809883a 	mov	r4,r17
 8007d90:	980b883a 	mov	r5,r19
 8007d94:	1c21c83a 	sub	r16,r3,r16
 8007d98:	800988c0 	call	800988c <__mulsi3>
 8007d9c:	8809883a 	mov	r4,r17
 8007da0:	b80b883a 	mov	r5,r23
 8007da4:	1029883a 	mov	r20,r2
 8007da8:	800988c0 	call	800988c <__mulsi3>
 8007dac:	980b883a 	mov	r5,r19
 8007db0:	a809883a 	mov	r4,r21
 8007db4:	1023883a 	mov	r17,r2
 8007db8:	800988c0 	call	800988c <__mulsi3>
 8007dbc:	a809883a 	mov	r4,r21
 8007dc0:	b80b883a 	mov	r5,r23
 8007dc4:	1027883a 	mov	r19,r2
 8007dc8:	800988c0 	call	800988c <__mulsi3>
 8007dcc:	1009883a 	mov	r4,r2
 8007dd0:	a004d43a 	srli	r2,r20,16
 8007dd4:	8ce3883a 	add	r17,r17,r19
 8007dd8:	1447883a 	add	r3,r2,r17
 8007ddc:	1cc0022e 	bgeu	r3,r19,8007de8 <__udivdi3+0x4a0>
 8007de0:	00800074 	movhi	r2,1
 8007de4:	2089883a 	add	r4,r4,r2
 8007de8:	1804d43a 	srli	r2,r3,16
 8007dec:	2085883a 	add	r2,r4,r2
 8007df0:	80804436 	bltu	r16,r2,8007f04 <__udivdi3+0x5bc>
 8007df4:	80803e26 	beq	r16,r2,8007ef0 <__udivdi3+0x5a8>
 8007df8:	9005883a 	mov	r2,r18
 8007dfc:	0009883a 	mov	r4,zero
 8007e00:	003f3a06 	br	8007aec <__udivdi3+0x1a4>
 8007e04:	9d26983a 	sll	r19,r19,r20
 8007e08:	3505c83a 	sub	r2,r6,r20
 8007e0c:	a8a2d83a 	srl	r17,r21,r2
 8007e10:	982ed43a 	srli	r23,r19,16
 8007e14:	e084d83a 	srl	r2,fp,r2
 8007e18:	ad06983a 	sll	r3,r21,r20
 8007e1c:	8809883a 	mov	r4,r17
 8007e20:	b80b883a 	mov	r5,r23
 8007e24:	1886b03a 	or	r3,r3,r2
 8007e28:	d8c00015 	stw	r3,0(sp)
 8007e2c:	9dbfffcc 	andi	r22,r19,65535
 8007e30:	800987c0 	call	800987c <__udivsi3>
 8007e34:	100b883a 	mov	r5,r2
 8007e38:	b009883a 	mov	r4,r22
 8007e3c:	d8800215 	stw	r2,8(sp)
 8007e40:	800988c0 	call	800988c <__mulsi3>
 8007e44:	8809883a 	mov	r4,r17
 8007e48:	b80b883a 	mov	r5,r23
 8007e4c:	102b883a 	mov	r21,r2
 8007e50:	80098840 	call	8009884 <__umodsi3>
 8007e54:	d9000017 	ldw	r4,0(sp)
 8007e58:	1004943a 	slli	r2,r2,16
 8007e5c:	2006d43a 	srli	r3,r4,16
 8007e60:	10c4b03a 	or	r2,r2,r3
 8007e64:	1540052e 	bgeu	r2,r21,8007e7c <__udivdi3+0x534>
 8007e68:	d9400217 	ldw	r5,8(sp)
 8007e6c:	14c5883a 	add	r2,r2,r19
 8007e70:	297fffc4 	addi	r5,r5,-1
 8007e74:	d9400215 	stw	r5,8(sp)
 8007e78:	14c0462e 	bgeu	r2,r19,8007f94 <__udivdi3+0x64c>
 8007e7c:	1563c83a 	sub	r17,r2,r21
 8007e80:	8809883a 	mov	r4,r17
 8007e84:	b80b883a 	mov	r5,r23
 8007e88:	800987c0 	call	800987c <__udivsi3>
 8007e8c:	100b883a 	mov	r5,r2
 8007e90:	b009883a 	mov	r4,r22
 8007e94:	1025883a 	mov	r18,r2
 8007e98:	800988c0 	call	800988c <__mulsi3>
 8007e9c:	8809883a 	mov	r4,r17
 8007ea0:	b80b883a 	mov	r5,r23
 8007ea4:	1021883a 	mov	r16,r2
 8007ea8:	80098840 	call	8009884 <__umodsi3>
 8007eac:	da800017 	ldw	r10,0(sp)
 8007eb0:	1004943a 	slli	r2,r2,16
 8007eb4:	50ffffcc 	andi	r3,r10,65535
 8007eb8:	10c6b03a 	or	r3,r2,r3
 8007ebc:	1c00062e 	bgeu	r3,r16,8007ed8 <__udivdi3+0x590>
 8007ec0:	1cc7883a 	add	r3,r3,r19
 8007ec4:	94bfffc4 	addi	r18,r18,-1
 8007ec8:	1cc00336 	bltu	r3,r19,8007ed8 <__udivdi3+0x590>
 8007ecc:	1c00022e 	bgeu	r3,r16,8007ed8 <__udivdi3+0x590>
 8007ed0:	94bfffc4 	addi	r18,r18,-1
 8007ed4:	1cc7883a 	add	r3,r3,r19
 8007ed8:	d9000217 	ldw	r4,8(sp)
 8007edc:	e538983a 	sll	fp,fp,r20
 8007ee0:	1c2bc83a 	sub	r21,r3,r16
 8007ee4:	2004943a 	slli	r2,r4,16
 8007ee8:	90a8b03a 	or	r20,r18,r2
 8007eec:	003ebf06 	br	80079ec <__udivdi3+0xa4>
 8007ef0:	1804943a 	slli	r2,r3,16
 8007ef4:	e588983a 	sll	r4,fp,r22
 8007ef8:	a0ffffcc 	andi	r3,r20,65535
 8007efc:	10c5883a 	add	r2,r2,r3
 8007f00:	20bfbd2e 	bgeu	r4,r2,8007df8 <__udivdi3+0x4b0>
 8007f04:	90bfffc4 	addi	r2,r18,-1
 8007f08:	0009883a 	mov	r4,zero
 8007f0c:	003ef706 	br	8007aec <__udivdi3+0x1a4>
 8007f10:	01400204 	movi	r5,8
 8007f14:	2805883a 	mov	r2,r5
 8007f18:	003ee706 	br	8007ab8 <__udivdi3+0x170>
 8007f1c:	01400604 	movi	r5,24
 8007f20:	2805883a 	mov	r2,r5
 8007f24:	003ee406 	br	8007ab8 <__udivdi3+0x170>
 8007f28:	01400204 	movi	r5,8
 8007f2c:	2805883a 	mov	r2,r5
 8007f30:	003ea106 	br	80079b8 <__udivdi3+0x70>
 8007f34:	01400604 	movi	r5,24
 8007f38:	2805883a 	mov	r2,r5
 8007f3c:	003e9e06 	br	80079b8 <__udivdi3+0x70>
 8007f40:	01400204 	movi	r5,8
 8007f44:	2805883a 	mov	r2,r5
 8007f48:	003eff06 	br	8007b48 <__udivdi3+0x200>
 8007f4c:	01400604 	movi	r5,24
 8007f50:	2805883a 	mov	r2,r5
 8007f54:	003efc06 	br	8007b48 <__udivdi3+0x200>
 8007f58:	1c3f862e 	bgeu	r3,r16,8007d74 <__udivdi3+0x42c>
 8007f5c:	1dc7883a 	add	r3,r3,r23
 8007f60:	ad7fffc4 	addi	r21,r21,-1
 8007f64:	003f8306 	br	8007d74 <__udivdi3+0x42c>
 8007f68:	157f6e2e 	bgeu	r2,r21,8007d24 <__udivdi3+0x3dc>
 8007f6c:	a53fffc4 	addi	r20,r20,-1
 8007f70:	15c5883a 	add	r2,r2,r23
 8007f74:	003f6b06 	br	8007d24 <__udivdi3+0x3dc>
 8007f78:	ad7fffc4 	addi	r21,r21,-1
 8007f7c:	003ec206 	br	8007a88 <__udivdi3+0x140>
 8007f80:	843fffc4 	addi	r16,r16,-1
 8007f84:	14c5883a 	add	r2,r2,r19
 8007f88:	003f1306 	br	8007bd8 <__udivdi3+0x290>
 8007f8c:	ad7fffc4 	addi	r21,r21,-1
 8007f90:	003f2506 	br	8007c28 <__udivdi3+0x2e0>
 8007f94:	157fb92e 	bgeu	r2,r21,8007e7c <__udivdi3+0x534>
 8007f98:	297fffc4 	addi	r5,r5,-1
 8007f9c:	14c5883a 	add	r2,r2,r19
 8007fa0:	d9400215 	stw	r5,8(sp)
 8007fa4:	003fb506 	br	8007e7c <__udivdi3+0x534>
 8007fa8:	843fffc4 	addi	r16,r16,-1
 8007fac:	14c5883a 	add	r2,r2,r19
 8007fb0:	003ea106 	br	8007a38 <__udivdi3+0xf0>

08007fb4 <__umoddi3>:
 8007fb4:	defff004 	addi	sp,sp,-64
 8007fb8:	3011883a 	mov	r8,r6
 8007fbc:	000d883a 	mov	r6,zero
 8007fc0:	dd400b15 	stw	r21,44(sp)
 8007fc4:	dcc00915 	stw	r19,36(sp)
 8007fc8:	dc000615 	stw	r16,24(sp)
 8007fcc:	dfc00f15 	stw	ra,60(sp)
 8007fd0:	df000e15 	stw	fp,56(sp)
 8007fd4:	ddc00d15 	stw	r23,52(sp)
 8007fd8:	dd800c15 	stw	r22,48(sp)
 8007fdc:	dd000a15 	stw	r20,40(sp)
 8007fe0:	dc800815 	stw	r18,32(sp)
 8007fe4:	dc400715 	stw	r17,28(sp)
 8007fe8:	2817883a 	mov	r11,r5
 8007fec:	d9800415 	stw	r6,16(sp)
 8007ff0:	4027883a 	mov	r19,r8
 8007ff4:	d9800515 	stw	r6,20(sp)
 8007ff8:	2021883a 	mov	r16,r4
 8007ffc:	282b883a 	mov	r21,r5
 8008000:	38002c1e 	bne	r7,zero,80080b4 <__umoddi3+0x100>
 8008004:	2a005636 	bltu	r5,r8,8008160 <__umoddi3+0x1ac>
 8008008:	40009a26 	beq	r8,zero,8008274 <__umoddi3+0x2c0>
 800800c:	00bfffd4 	movui	r2,65535
 8008010:	14c09236 	bltu	r2,r19,800825c <__umoddi3+0x2a8>
 8008014:	00803fc4 	movi	r2,255
 8008018:	14c15c36 	bltu	r2,r19,800858c <__umoddi3+0x5d8>
 800801c:	000b883a 	mov	r5,zero
 8008020:	0005883a 	mov	r2,zero
 8008024:	9884d83a 	srl	r2,r19,r2
 8008028:	01020074 	movhi	r4,2049
 800802c:	21040204 	addi	r4,r4,4104
 8008030:	01800804 	movi	r6,32
 8008034:	1105883a 	add	r2,r2,r4
 8008038:	10c00003 	ldbu	r3,0(r2)
 800803c:	28c7883a 	add	r3,r5,r3
 8008040:	30e5c83a 	sub	r18,r6,r3
 8008044:	9000a41e 	bne	r18,zero,80082d8 <__umoddi3+0x324>
 8008048:	982ed43a 	srli	r23,r19,16
 800804c:	acebc83a 	sub	r21,r21,r19
 8008050:	9d3fffcc 	andi	r20,r19,65535
 8008054:	002d883a 	mov	r22,zero
 8008058:	a809883a 	mov	r4,r21
 800805c:	b80b883a 	mov	r5,r23
 8008060:	800987c0 	call	800987c <__udivsi3>
 8008064:	100b883a 	mov	r5,r2
 8008068:	a009883a 	mov	r4,r20
 800806c:	800988c0 	call	800988c <__mulsi3>
 8008070:	a809883a 	mov	r4,r21
 8008074:	b80b883a 	mov	r5,r23
 8008078:	1023883a 	mov	r17,r2
 800807c:	80098840 	call	8009884 <__umodsi3>
 8008080:	1004943a 	slli	r2,r2,16
 8008084:	8006d43a 	srli	r3,r16,16
 8008088:	10c4b03a 	or	r2,r2,r3
 800808c:	1440032e 	bgeu	r2,r17,800809c <__umoddi3+0xe8>
 8008090:	14c5883a 	add	r2,r2,r19
 8008094:	14c00136 	bltu	r2,r19,800809c <__umoddi3+0xe8>
 8008098:	14415836 	bltu	r2,r17,80085fc <__umoddi3+0x648>
 800809c:	1463c83a 	sub	r17,r2,r17
 80080a0:	8809883a 	mov	r4,r17
 80080a4:	b80b883a 	mov	r5,r23
 80080a8:	800987c0 	call	800987c <__udivsi3>
 80080ac:	a009883a 	mov	r4,r20
 80080b0:	00005306 	br	8008200 <__umoddi3+0x24c>
 80080b4:	380d883a 	mov	r6,r7
 80080b8:	29c0132e 	bgeu	r5,r7,8008108 <__umoddi3+0x154>
 80080bc:	d9000415 	stw	r4,16(sp)
 80080c0:	d9400515 	stw	r5,20(sp)
 80080c4:	d9400417 	ldw	r5,16(sp)
 80080c8:	5813883a 	mov	r9,r11
 80080cc:	2811883a 	mov	r8,r5
 80080d0:	4005883a 	mov	r2,r8
 80080d4:	4807883a 	mov	r3,r9
 80080d8:	dfc00f17 	ldw	ra,60(sp)
 80080dc:	df000e17 	ldw	fp,56(sp)
 80080e0:	ddc00d17 	ldw	r23,52(sp)
 80080e4:	dd800c17 	ldw	r22,48(sp)
 80080e8:	dd400b17 	ldw	r21,44(sp)
 80080ec:	dd000a17 	ldw	r20,40(sp)
 80080f0:	dcc00917 	ldw	r19,36(sp)
 80080f4:	dc800817 	ldw	r18,32(sp)
 80080f8:	dc400717 	ldw	r17,28(sp)
 80080fc:	dc000617 	ldw	r16,24(sp)
 8008100:	dec01004 	addi	sp,sp,64
 8008104:	f800283a 	ret
 8008108:	00bfffd4 	movui	r2,65535
 800810c:	11c06636 	bltu	r2,r7,80082a8 <__umoddi3+0x2f4>
 8008110:	00803fc4 	movi	r2,255
 8008114:	11c12036 	bltu	r2,r7,8008598 <__umoddi3+0x5e4>
 8008118:	000b883a 	mov	r5,zero
 800811c:	0005883a 	mov	r2,zero
 8008120:	3084d83a 	srl	r2,r6,r2
 8008124:	01020074 	movhi	r4,2049
 8008128:	21040204 	addi	r4,r4,4104
 800812c:	01c00804 	movi	r7,32
 8008130:	1105883a 	add	r2,r2,r4
 8008134:	10c00003 	ldbu	r3,0(r2)
 8008138:	28c7883a 	add	r3,r5,r3
 800813c:	38e5c83a 	sub	r18,r7,r3
 8008140:	9000941e 	bne	r18,zero,8008394 <__umoddi3+0x3e0>
 8008144:	35405e36 	bltu	r6,r21,80082c0 <__umoddi3+0x30c>
 8008148:	84c05d2e 	bgeu	r16,r19,80082c0 <__umoddi3+0x30c>
 800814c:	8011883a 	mov	r8,r16
 8008150:	a813883a 	mov	r9,r21
 8008154:	dc000415 	stw	r16,16(sp)
 8008158:	dd400515 	stw	r21,20(sp)
 800815c:	003fdc06 	br	80080d0 <__umoddi3+0x11c>
 8008160:	00bfffd4 	movui	r2,65535
 8008164:	12004a36 	bltu	r2,r8,8008290 <__umoddi3+0x2dc>
 8008168:	00803fc4 	movi	r2,255
 800816c:	12010d36 	bltu	r2,r8,80085a4 <__umoddi3+0x5f0>
 8008170:	000b883a 	mov	r5,zero
 8008174:	0005883a 	mov	r2,zero
 8008178:	9884d83a 	srl	r2,r19,r2
 800817c:	01020074 	movhi	r4,2049
 8008180:	21040204 	addi	r4,r4,4104
 8008184:	01800804 	movi	r6,32
 8008188:	1105883a 	add	r2,r2,r4
 800818c:	10c00003 	ldbu	r3,0(r2)
 8008190:	28c7883a 	add	r3,r5,r3
 8008194:	30c7c83a 	sub	r3,r6,r3
 8008198:	1800dc1e 	bne	r3,zero,800850c <__umoddi3+0x558>
 800819c:	002d883a 	mov	r22,zero
 80081a0:	982ed43a 	srli	r23,r19,16
 80081a4:	a809883a 	mov	r4,r21
 80081a8:	9cbfffcc 	andi	r18,r19,65535
 80081ac:	b80b883a 	mov	r5,r23
 80081b0:	800987c0 	call	800987c <__udivsi3>
 80081b4:	100b883a 	mov	r5,r2
 80081b8:	9009883a 	mov	r4,r18
 80081bc:	800988c0 	call	800988c <__mulsi3>
 80081c0:	a809883a 	mov	r4,r21
 80081c4:	b80b883a 	mov	r5,r23
 80081c8:	1023883a 	mov	r17,r2
 80081cc:	80098840 	call	8009884 <__umodsi3>
 80081d0:	1004943a 	slli	r2,r2,16
 80081d4:	8006d43a 	srli	r3,r16,16
 80081d8:	10c4b03a 	or	r2,r2,r3
 80081dc:	1440032e 	bgeu	r2,r17,80081ec <__umoddi3+0x238>
 80081e0:	14c5883a 	add	r2,r2,r19
 80081e4:	14c00136 	bltu	r2,r19,80081ec <__umoddi3+0x238>
 80081e8:	14410236 	bltu	r2,r17,80085f4 <__umoddi3+0x640>
 80081ec:	1463c83a 	sub	r17,r2,r17
 80081f0:	8809883a 	mov	r4,r17
 80081f4:	b80b883a 	mov	r5,r23
 80081f8:	800987c0 	call	800987c <__udivsi3>
 80081fc:	9009883a 	mov	r4,r18
 8008200:	100b883a 	mov	r5,r2
 8008204:	800988c0 	call	800988c <__mulsi3>
 8008208:	8809883a 	mov	r4,r17
 800820c:	b80b883a 	mov	r5,r23
 8008210:	102b883a 	mov	r21,r2
 8008214:	80098840 	call	8009884 <__umodsi3>
 8008218:	1004943a 	slli	r2,r2,16
 800821c:	80ffffcc 	andi	r3,r16,65535
 8008220:	10c4b03a 	or	r2,r2,r3
 8008224:	1540042e 	bgeu	r2,r21,8008238 <__umoddi3+0x284>
 8008228:	14c5883a 	add	r2,r2,r19
 800822c:	14c00236 	bltu	r2,r19,8008238 <__umoddi3+0x284>
 8008230:	1540012e 	bgeu	r2,r21,8008238 <__umoddi3+0x284>
 8008234:	14c5883a 	add	r2,r2,r19
 8008238:	1545c83a 	sub	r2,r2,r21
 800823c:	1584d83a 	srl	r2,r2,r22
 8008240:	0013883a 	mov	r9,zero
 8008244:	d8800415 	stw	r2,16(sp)
 8008248:	d8c00417 	ldw	r3,16(sp)
 800824c:	0005883a 	mov	r2,zero
 8008250:	d8800515 	stw	r2,20(sp)
 8008254:	1811883a 	mov	r8,r3
 8008258:	003f9d06 	br	80080d0 <__umoddi3+0x11c>
 800825c:	00804034 	movhi	r2,256
 8008260:	10bfffc4 	addi	r2,r2,-1
 8008264:	14c0c636 	bltu	r2,r19,8008580 <__umoddi3+0x5cc>
 8008268:	01400404 	movi	r5,16
 800826c:	2805883a 	mov	r2,r5
 8008270:	003f6c06 	br	8008024 <__umoddi3+0x70>
 8008274:	01000044 	movi	r4,1
 8008278:	000b883a 	mov	r5,zero
 800827c:	800987c0 	call	800987c <__udivsi3>
 8008280:	1027883a 	mov	r19,r2
 8008284:	00bfffd4 	movui	r2,65535
 8008288:	14fff436 	bltu	r2,r19,800825c <__umoddi3+0x2a8>
 800828c:	003f6106 	br	8008014 <__umoddi3+0x60>
 8008290:	00804034 	movhi	r2,256
 8008294:	10bfffc4 	addi	r2,r2,-1
 8008298:	1200c536 	bltu	r2,r8,80085b0 <__umoddi3+0x5fc>
 800829c:	01400404 	movi	r5,16
 80082a0:	2805883a 	mov	r2,r5
 80082a4:	003fb406 	br	8008178 <__umoddi3+0x1c4>
 80082a8:	00804034 	movhi	r2,256
 80082ac:	10bfffc4 	addi	r2,r2,-1
 80082b0:	11c0c236 	bltu	r2,r7,80085bc <__umoddi3+0x608>
 80082b4:	01400404 	movi	r5,16
 80082b8:	2805883a 	mov	r2,r5
 80082bc:	003f9806 	br	8008120 <__umoddi3+0x16c>
 80082c0:	84c9c83a 	sub	r4,r16,r19
 80082c4:	8105803a 	cmpltu	r2,r16,r4
 80082c8:	a987c83a 	sub	r3,r21,r6
 80082cc:	18abc83a 	sub	r21,r3,r2
 80082d0:	2021883a 	mov	r16,r4
 80082d4:	003f9d06 	br	800814c <__umoddi3+0x198>
 80082d8:	9ca6983a 	sll	r19,r19,r18
 80082dc:	3485c83a 	sub	r2,r6,r18
 80082e0:	a8a2d83a 	srl	r17,r21,r2
 80082e4:	982ed43a 	srli	r23,r19,16
 80082e8:	ac86983a 	sll	r3,r21,r18
 80082ec:	8084d83a 	srl	r2,r16,r2
 80082f0:	8809883a 	mov	r4,r17
 80082f4:	b80b883a 	mov	r5,r23
 80082f8:	18b8b03a 	or	fp,r3,r2
 80082fc:	9d3fffcc 	andi	r20,r19,65535
 8008300:	800987c0 	call	800987c <__udivsi3>
 8008304:	100b883a 	mov	r5,r2
 8008308:	a009883a 	mov	r4,r20
 800830c:	800988c0 	call	800988c <__mulsi3>
 8008310:	8809883a 	mov	r4,r17
 8008314:	b80b883a 	mov	r5,r23
 8008318:	102b883a 	mov	r21,r2
 800831c:	80098840 	call	8009884 <__umodsi3>
 8008320:	1004943a 	slli	r2,r2,16
 8008324:	e006d43a 	srli	r3,fp,16
 8008328:	902d883a 	mov	r22,r18
 800832c:	10c4b03a 	or	r2,r2,r3
 8008330:	1540022e 	bgeu	r2,r21,800833c <__umoddi3+0x388>
 8008334:	14c5883a 	add	r2,r2,r19
 8008338:	14c0ab2e 	bgeu	r2,r19,80085e8 <__umoddi3+0x634>
 800833c:	1563c83a 	sub	r17,r2,r21
 8008340:	8809883a 	mov	r4,r17
 8008344:	b80b883a 	mov	r5,r23
 8008348:	800987c0 	call	800987c <__udivsi3>
 800834c:	100b883a 	mov	r5,r2
 8008350:	a009883a 	mov	r4,r20
 8008354:	800988c0 	call	800988c <__mulsi3>
 8008358:	8809883a 	mov	r4,r17
 800835c:	b80b883a 	mov	r5,r23
 8008360:	102b883a 	mov	r21,r2
 8008364:	80098840 	call	8009884 <__umodsi3>
 8008368:	1004943a 	slli	r2,r2,16
 800836c:	e0ffffcc 	andi	r3,fp,65535
 8008370:	10c4b03a 	or	r2,r2,r3
 8008374:	1540042e 	bgeu	r2,r21,8008388 <__umoddi3+0x3d4>
 8008378:	14c5883a 	add	r2,r2,r19
 800837c:	14c00236 	bltu	r2,r19,8008388 <__umoddi3+0x3d4>
 8008380:	1540012e 	bgeu	r2,r21,8008388 <__umoddi3+0x3d4>
 8008384:	14c5883a 	add	r2,r2,r19
 8008388:	84a0983a 	sll	r16,r16,r18
 800838c:	156bc83a 	sub	r21,r2,r21
 8008390:	003f3106 	br	8008058 <__umoddi3+0xa4>
 8008394:	3c8fc83a 	sub	r7,r7,r18
 8008398:	3486983a 	sll	r3,r6,r18
 800839c:	99c4d83a 	srl	r2,r19,r7
 80083a0:	a9e2d83a 	srl	r17,r21,r7
 80083a4:	ac8c983a 	sll	r6,r21,r18
 80083a8:	18acb03a 	or	r22,r3,r2
 80083ac:	b02ed43a 	srli	r23,r22,16
 80083b0:	81c4d83a 	srl	r2,r16,r7
 80083b4:	8809883a 	mov	r4,r17
 80083b8:	b80b883a 	mov	r5,r23
 80083bc:	308cb03a 	or	r6,r6,r2
 80083c0:	d9c00315 	stw	r7,12(sp)
 80083c4:	d9800215 	stw	r6,8(sp)
 80083c8:	b53fffcc 	andi	r20,r22,65535
 80083cc:	800987c0 	call	800987c <__udivsi3>
 80083d0:	100b883a 	mov	r5,r2
 80083d4:	a009883a 	mov	r4,r20
 80083d8:	1039883a 	mov	fp,r2
 80083dc:	800988c0 	call	800988c <__mulsi3>
 80083e0:	8809883a 	mov	r4,r17
 80083e4:	b80b883a 	mov	r5,r23
 80083e8:	102b883a 	mov	r21,r2
 80083ec:	80098840 	call	8009884 <__umodsi3>
 80083f0:	d9000217 	ldw	r4,8(sp)
 80083f4:	1004943a 	slli	r2,r2,16
 80083f8:	9ca6983a 	sll	r19,r19,r18
 80083fc:	2006d43a 	srli	r3,r4,16
 8008400:	84a0983a 	sll	r16,r16,r18
 8008404:	dcc00015 	stw	r19,0(sp)
 8008408:	10c4b03a 	or	r2,r2,r3
 800840c:	dc000115 	stw	r16,4(sp)
 8008410:	1540032e 	bgeu	r2,r21,8008420 <__umoddi3+0x46c>
 8008414:	1585883a 	add	r2,r2,r22
 8008418:	e73fffc4 	addi	fp,fp,-1
 800841c:	15806e2e 	bgeu	r2,r22,80085d8 <__umoddi3+0x624>
 8008420:	1563c83a 	sub	r17,r2,r21
 8008424:	8809883a 	mov	r4,r17
 8008428:	b80b883a 	mov	r5,r23
 800842c:	800987c0 	call	800987c <__udivsi3>
 8008430:	100b883a 	mov	r5,r2
 8008434:	a009883a 	mov	r4,r20
 8008438:	1021883a 	mov	r16,r2
 800843c:	800988c0 	call	800988c <__mulsi3>
 8008440:	b80b883a 	mov	r5,r23
 8008444:	8809883a 	mov	r4,r17
 8008448:	1029883a 	mov	r20,r2
 800844c:	80098840 	call	8009884 <__umodsi3>
 8008450:	d9400217 	ldw	r5,8(sp)
 8008454:	1004943a 	slli	r2,r2,16
 8008458:	28ffffcc 	andi	r3,r5,65535
 800845c:	10c4b03a 	or	r2,r2,r3
 8008460:	1500032e 	bgeu	r2,r20,8008470 <__umoddi3+0x4bc>
 8008464:	1585883a 	add	r2,r2,r22
 8008468:	843fffc4 	addi	r16,r16,-1
 800846c:	1580562e 	bgeu	r2,r22,80085c8 <__umoddi3+0x614>
 8008470:	d9800017 	ldw	r6,0(sp)
 8008474:	e022943a 	slli	r17,fp,16
 8008478:	302ed43a 	srli	r23,r6,16
 800847c:	8462b03a 	or	r17,r16,r17
 8008480:	34ffffcc 	andi	r19,r6,65535
 8008484:	882ad43a 	srli	r21,r17,16
 8008488:	8c7fffcc 	andi	r17,r17,65535
 800848c:	8809883a 	mov	r4,r17
 8008490:	980b883a 	mov	r5,r19
 8008494:	1521c83a 	sub	r16,r2,r20
 8008498:	800988c0 	call	800988c <__mulsi3>
 800849c:	8809883a 	mov	r4,r17
 80084a0:	b80b883a 	mov	r5,r23
 80084a4:	1029883a 	mov	r20,r2
 80084a8:	800988c0 	call	800988c <__mulsi3>
 80084ac:	980b883a 	mov	r5,r19
 80084b0:	a809883a 	mov	r4,r21
 80084b4:	1023883a 	mov	r17,r2
 80084b8:	800988c0 	call	800988c <__mulsi3>
 80084bc:	a809883a 	mov	r4,r21
 80084c0:	b80b883a 	mov	r5,r23
 80084c4:	1027883a 	mov	r19,r2
 80084c8:	800988c0 	call	800988c <__mulsi3>
 80084cc:	100b883a 	mov	r5,r2
 80084d0:	a004d43a 	srli	r2,r20,16
 80084d4:	8ce3883a 	add	r17,r17,r19
 80084d8:	1449883a 	add	r4,r2,r17
 80084dc:	24c0022e 	bgeu	r4,r19,80084e8 <__umoddi3+0x534>
 80084e0:	00800074 	movhi	r2,1
 80084e4:	288b883a 	add	r5,r5,r2
 80084e8:	2004d43a 	srli	r2,r4,16
 80084ec:	2008943a 	slli	r4,r4,16
 80084f0:	a0ffffcc 	andi	r3,r20,65535
 80084f4:	288d883a 	add	r6,r5,r2
 80084f8:	20c9883a 	add	r4,r4,r3
 80084fc:	81800b36 	bltu	r16,r6,800852c <__umoddi3+0x578>
 8008500:	81804026 	beq	r16,r6,8008604 <__umoddi3+0x650>
 8008504:	818dc83a 	sub	r6,r16,r6
 8008508:	00000f06 	br	8008548 <__umoddi3+0x594>
 800850c:	30c5c83a 	sub	r2,r6,r3
 8008510:	182d883a 	mov	r22,r3
 8008514:	8084d83a 	srl	r2,r16,r2
 8008518:	a8c6983a 	sll	r3,r21,r3
 800851c:	9da6983a 	sll	r19,r19,r22
 8008520:	85a0983a 	sll	r16,r16,r22
 8008524:	18aab03a 	or	r21,r3,r2
 8008528:	003f1d06 	br	80081a0 <__umoddi3+0x1ec>
 800852c:	d8c00017 	ldw	r3,0(sp)
 8008530:	20c5c83a 	sub	r2,r4,r3
 8008534:	2089803a 	cmpltu	r4,r4,r2
 8008538:	3587c83a 	sub	r3,r6,r22
 800853c:	1907c83a 	sub	r3,r3,r4
 8008540:	80cdc83a 	sub	r6,r16,r3
 8008544:	1009883a 	mov	r4,r2
 8008548:	d9400117 	ldw	r5,4(sp)
 800854c:	2905c83a 	sub	r2,r5,r4
 8008550:	2887803a 	cmpltu	r3,r5,r2
 8008554:	30c7c83a 	sub	r3,r6,r3
 8008558:	d9800317 	ldw	r6,12(sp)
 800855c:	1484d83a 	srl	r2,r2,r18
 8008560:	1988983a 	sll	r4,r3,r6
 8008564:	1c86d83a 	srl	r3,r3,r18
 8008568:	2088b03a 	or	r4,r4,r2
 800856c:	2011883a 	mov	r8,r4
 8008570:	1813883a 	mov	r9,r3
 8008574:	d9000415 	stw	r4,16(sp)
 8008578:	d8c00515 	stw	r3,20(sp)
 800857c:	003ed406 	br	80080d0 <__umoddi3+0x11c>
 8008580:	01400604 	movi	r5,24
 8008584:	2805883a 	mov	r2,r5
 8008588:	003ea606 	br	8008024 <__umoddi3+0x70>
 800858c:	01400204 	movi	r5,8
 8008590:	2805883a 	mov	r2,r5
 8008594:	003ea306 	br	8008024 <__umoddi3+0x70>
 8008598:	01400204 	movi	r5,8
 800859c:	2805883a 	mov	r2,r5
 80085a0:	003edf06 	br	8008120 <__umoddi3+0x16c>
 80085a4:	01400204 	movi	r5,8
 80085a8:	2805883a 	mov	r2,r5
 80085ac:	003ef206 	br	8008178 <__umoddi3+0x1c4>
 80085b0:	01400604 	movi	r5,24
 80085b4:	2805883a 	mov	r2,r5
 80085b8:	003eef06 	br	8008178 <__umoddi3+0x1c4>
 80085bc:	01400604 	movi	r5,24
 80085c0:	2805883a 	mov	r2,r5
 80085c4:	003ed606 	br	8008120 <__umoddi3+0x16c>
 80085c8:	153fa92e 	bgeu	r2,r20,8008470 <__umoddi3+0x4bc>
 80085cc:	843fffc4 	addi	r16,r16,-1
 80085d0:	1585883a 	add	r2,r2,r22
 80085d4:	003fa606 	br	8008470 <__umoddi3+0x4bc>
 80085d8:	157f912e 	bgeu	r2,r21,8008420 <__umoddi3+0x46c>
 80085dc:	e73fffc4 	addi	fp,fp,-1
 80085e0:	1585883a 	add	r2,r2,r22
 80085e4:	003f8e06 	br	8008420 <__umoddi3+0x46c>
 80085e8:	157f542e 	bgeu	r2,r21,800833c <__umoddi3+0x388>
 80085ec:	14c5883a 	add	r2,r2,r19
 80085f0:	003f5206 	br	800833c <__umoddi3+0x388>
 80085f4:	14c5883a 	add	r2,r2,r19
 80085f8:	003efc06 	br	80081ec <__umoddi3+0x238>
 80085fc:	14c5883a 	add	r2,r2,r19
 8008600:	003ea606 	br	800809c <__umoddi3+0xe8>
 8008604:	d8800117 	ldw	r2,4(sp)
 8008608:	113fc836 	bltu	r2,r4,800852c <__umoddi3+0x578>
 800860c:	000d883a 	mov	r6,zero
 8008610:	003fcd06 	br	8008548 <__umoddi3+0x594>

08008614 <_fpadd_parts>:
 8008614:	defff804 	addi	sp,sp,-32
 8008618:	dcc00315 	stw	r19,12(sp)
 800861c:	2027883a 	mov	r19,r4
 8008620:	21000017 	ldw	r4,0(r4)
 8008624:	00c00044 	movi	r3,1
 8008628:	dd400515 	stw	r21,20(sp)
 800862c:	dd000415 	stw	r20,16(sp)
 8008630:	ddc00715 	stw	r23,28(sp)
 8008634:	dd800615 	stw	r22,24(sp)
 8008638:	dc800215 	stw	r18,8(sp)
 800863c:	dc400115 	stw	r17,4(sp)
 8008640:	dc000015 	stw	r16,0(sp)
 8008644:	282b883a 	mov	r21,r5
 8008648:	3029883a 	mov	r20,r6
 800864c:	1900632e 	bgeu	r3,r4,80087dc <_fpadd_parts+0x1c8>
 8008650:	28800017 	ldw	r2,0(r5)
 8008654:	1880812e 	bgeu	r3,r2,800885c <_fpadd_parts+0x248>
 8008658:	00c00104 	movi	r3,4
 800865c:	20c0dc26 	beq	r4,r3,80089d0 <_fpadd_parts+0x3bc>
 8008660:	10c07e26 	beq	r2,r3,800885c <_fpadd_parts+0x248>
 8008664:	00c00084 	movi	r3,2
 8008668:	10c06726 	beq	r2,r3,8008808 <_fpadd_parts+0x1f4>
 800866c:	20c07b26 	beq	r4,r3,800885c <_fpadd_parts+0x248>
 8008670:	9dc00217 	ldw	r23,8(r19)
 8008674:	28c00217 	ldw	r3,8(r5)
 8008678:	9c400317 	ldw	r17,12(r19)
 800867c:	2bc00317 	ldw	r15,12(r5)
 8008680:	b8cdc83a 	sub	r6,r23,r3
 8008684:	9c800417 	ldw	r18,16(r19)
 8008688:	2c000417 	ldw	r16,16(r5)
 800868c:	3009883a 	mov	r4,r6
 8008690:	30009716 	blt	r6,zero,80088f0 <_fpadd_parts+0x2dc>
 8008694:	00800fc4 	movi	r2,63
 8008698:	11806b16 	blt	r2,r6,8008848 <_fpadd_parts+0x234>
 800869c:	0100a40e 	bge	zero,r4,8008930 <_fpadd_parts+0x31c>
 80086a0:	35bff804 	addi	r22,r6,-32
 80086a4:	b000bc16 	blt	r22,zero,8008998 <_fpadd_parts+0x384>
 80086a8:	8596d83a 	srl	r11,r16,r22
 80086ac:	0019883a 	mov	r12,zero
 80086b0:	0013883a 	mov	r9,zero
 80086b4:	01000044 	movi	r4,1
 80086b8:	0015883a 	mov	r10,zero
 80086bc:	b000be16 	blt	r22,zero,80089b8 <_fpadd_parts+0x3a4>
 80086c0:	2590983a 	sll	r8,r4,r22
 80086c4:	000f883a 	mov	r7,zero
 80086c8:	00bfffc4 	movi	r2,-1
 80086cc:	3889883a 	add	r4,r7,r2
 80086d0:	408b883a 	add	r5,r8,r2
 80086d4:	21cd803a 	cmpltu	r6,r4,r7
 80086d8:	314b883a 	add	r5,r6,r5
 80086dc:	7904703a 	and	r2,r15,r4
 80086e0:	8146703a 	and	r3,r16,r5
 80086e4:	10c4b03a 	or	r2,r2,r3
 80086e8:	10000226 	beq	r2,zero,80086f4 <_fpadd_parts+0xe0>
 80086ec:	02400044 	movi	r9,1
 80086f0:	0015883a 	mov	r10,zero
 80086f4:	5a5eb03a 	or	r15,r11,r9
 80086f8:	62a0b03a 	or	r16,r12,r10
 80086fc:	99400117 	ldw	r5,4(r19)
 8008700:	a8800117 	ldw	r2,4(r21)
 8008704:	28806e26 	beq	r5,r2,80088c0 <_fpadd_parts+0x2ac>
 8008708:	28006626 	beq	r5,zero,80088a4 <_fpadd_parts+0x290>
 800870c:	7c45c83a 	sub	r2,r15,r17
 8008710:	7889803a 	cmpltu	r4,r15,r2
 8008714:	8487c83a 	sub	r3,r16,r18
 8008718:	1909c83a 	sub	r4,r3,r4
 800871c:	100d883a 	mov	r6,r2
 8008720:	200f883a 	mov	r7,r4
 8008724:	38007716 	blt	r7,zero,8008904 <_fpadd_parts+0x2f0>
 8008728:	a5c00215 	stw	r23,8(r20)
 800872c:	a1c00415 	stw	r7,16(r20)
 8008730:	a0000115 	stw	zero,4(r20)
 8008734:	a1800315 	stw	r6,12(r20)
 8008738:	a2000317 	ldw	r8,12(r20)
 800873c:	a2400417 	ldw	r9,16(r20)
 8008740:	00bfffc4 	movi	r2,-1
 8008744:	408b883a 	add	r5,r8,r2
 8008748:	2a09803a 	cmpltu	r4,r5,r8
 800874c:	488d883a 	add	r6,r9,r2
 8008750:	01c40034 	movhi	r7,4096
 8008754:	39ffffc4 	addi	r7,r7,-1
 8008758:	218d883a 	add	r6,r4,r6
 800875c:	39801736 	bltu	r7,r6,80087bc <_fpadd_parts+0x1a8>
 8008760:	31c06526 	beq	r6,r7,80088f8 <_fpadd_parts+0x2e4>
 8008764:	a3000217 	ldw	r12,8(r20)
 8008768:	4209883a 	add	r4,r8,r8
 800876c:	00bfffc4 	movi	r2,-1
 8008770:	220f803a 	cmpltu	r7,r4,r8
 8008774:	4a4b883a 	add	r5,r9,r9
 8008778:	394f883a 	add	r7,r7,r5
 800877c:	2095883a 	add	r10,r4,r2
 8008780:	3897883a 	add	r11,r7,r2
 8008784:	510d803a 	cmpltu	r6,r10,r4
 8008788:	6099883a 	add	r12,r12,r2
 800878c:	32d7883a 	add	r11,r6,r11
 8008790:	00840034 	movhi	r2,4096
 8008794:	10bfffc4 	addi	r2,r2,-1
 8008798:	2011883a 	mov	r8,r4
 800879c:	3813883a 	mov	r9,r7
 80087a0:	a1000315 	stw	r4,12(r20)
 80087a4:	a1c00415 	stw	r7,16(r20)
 80087a8:	a3000215 	stw	r12,8(r20)
 80087ac:	12c00336 	bltu	r2,r11,80087bc <_fpadd_parts+0x1a8>
 80087b0:	58bfed1e 	bne	r11,r2,8008768 <_fpadd_parts+0x154>
 80087b4:	00bfff84 	movi	r2,-2
 80087b8:	12bfeb2e 	bgeu	r2,r10,8008768 <_fpadd_parts+0x154>
 80087bc:	a2800417 	ldw	r10,16(r20)
 80087c0:	008000c4 	movi	r2,3
 80087c4:	00c80034 	movhi	r3,8192
 80087c8:	18ffffc4 	addi	r3,r3,-1
 80087cc:	a2400317 	ldw	r9,12(r20)
 80087d0:	a0800015 	stw	r2,0(r20)
 80087d4:	1a802336 	bltu	r3,r10,8008864 <_fpadd_parts+0x250>
 80087d8:	a027883a 	mov	r19,r20
 80087dc:	9805883a 	mov	r2,r19
 80087e0:	ddc00717 	ldw	r23,28(sp)
 80087e4:	dd800617 	ldw	r22,24(sp)
 80087e8:	dd400517 	ldw	r21,20(sp)
 80087ec:	dd000417 	ldw	r20,16(sp)
 80087f0:	dcc00317 	ldw	r19,12(sp)
 80087f4:	dc800217 	ldw	r18,8(sp)
 80087f8:	dc400117 	ldw	r17,4(sp)
 80087fc:	dc000017 	ldw	r16,0(sp)
 8008800:	dec00804 	addi	sp,sp,32
 8008804:	f800283a 	ret
 8008808:	20fff41e 	bne	r4,r3,80087dc <_fpadd_parts+0x1c8>
 800880c:	31000015 	stw	r4,0(r6)
 8008810:	98800117 	ldw	r2,4(r19)
 8008814:	30800115 	stw	r2,4(r6)
 8008818:	98c00217 	ldw	r3,8(r19)
 800881c:	30c00215 	stw	r3,8(r6)
 8008820:	98800317 	ldw	r2,12(r19)
 8008824:	30800315 	stw	r2,12(r6)
 8008828:	98c00417 	ldw	r3,16(r19)
 800882c:	30c00415 	stw	r3,16(r6)
 8008830:	98800117 	ldw	r2,4(r19)
 8008834:	28c00117 	ldw	r3,4(r5)
 8008838:	3027883a 	mov	r19,r6
 800883c:	10c4703a 	and	r2,r2,r3
 8008840:	30800115 	stw	r2,4(r6)
 8008844:	003fe506 	br	80087dc <_fpadd_parts+0x1c8>
 8008848:	1dc02616 	blt	r3,r23,80088e4 <_fpadd_parts+0x2d0>
 800884c:	0023883a 	mov	r17,zero
 8008850:	182f883a 	mov	r23,r3
 8008854:	0025883a 	mov	r18,zero
 8008858:	003fa806 	br	80086fc <_fpadd_parts+0xe8>
 800885c:	a827883a 	mov	r19,r21
 8008860:	003fde06 	br	80087dc <_fpadd_parts+0x1c8>
 8008864:	01800044 	movi	r6,1
 8008868:	500497fa 	slli	r2,r10,31
 800886c:	4808d07a 	srli	r4,r9,1
 8008870:	518ad83a 	srl	r5,r10,r6
 8008874:	a2000217 	ldw	r8,8(r20)
 8008878:	1108b03a 	or	r4,r2,r4
 800887c:	0007883a 	mov	r3,zero
 8008880:	4984703a 	and	r2,r9,r6
 8008884:	208cb03a 	or	r6,r4,r2
 8008888:	28ceb03a 	or	r7,r5,r3
 800888c:	42000044 	addi	r8,r8,1
 8008890:	a027883a 	mov	r19,r20
 8008894:	a1c00415 	stw	r7,16(r20)
 8008898:	a2000215 	stw	r8,8(r20)
 800889c:	a1800315 	stw	r6,12(r20)
 80088a0:	003fce06 	br	80087dc <_fpadd_parts+0x1c8>
 80088a4:	8bc5c83a 	sub	r2,r17,r15
 80088a8:	8889803a 	cmpltu	r4,r17,r2
 80088ac:	9407c83a 	sub	r3,r18,r16
 80088b0:	1909c83a 	sub	r4,r3,r4
 80088b4:	100d883a 	mov	r6,r2
 80088b8:	200f883a 	mov	r7,r4
 80088bc:	003f9906 	br	8008724 <_fpadd_parts+0x110>
 80088c0:	7c45883a 	add	r2,r15,r17
 80088c4:	13c9803a 	cmpltu	r4,r2,r15
 80088c8:	8487883a 	add	r3,r16,r18
 80088cc:	20c9883a 	add	r4,r4,r3
 80088d0:	a1400115 	stw	r5,4(r20)
 80088d4:	a5c00215 	stw	r23,8(r20)
 80088d8:	a0800315 	stw	r2,12(r20)
 80088dc:	a1000415 	stw	r4,16(r20)
 80088e0:	003fb606 	br	80087bc <_fpadd_parts+0x1a8>
 80088e4:	001f883a 	mov	r15,zero
 80088e8:	0021883a 	mov	r16,zero
 80088ec:	003f8306 	br	80086fc <_fpadd_parts+0xe8>
 80088f0:	018dc83a 	sub	r6,zero,r6
 80088f4:	003f6706 	br	8008694 <_fpadd_parts+0x80>
 80088f8:	00bfff84 	movi	r2,-2
 80088fc:	117faf36 	bltu	r2,r5,80087bc <_fpadd_parts+0x1a8>
 8008900:	003f9806 	br	8008764 <_fpadd_parts+0x150>
 8008904:	0005883a 	mov	r2,zero
 8008908:	1189c83a 	sub	r4,r2,r6
 800890c:	1105803a 	cmpltu	r2,r2,r4
 8008910:	01cbc83a 	sub	r5,zero,r7
 8008914:	2885c83a 	sub	r2,r5,r2
 8008918:	01800044 	movi	r6,1
 800891c:	a1800115 	stw	r6,4(r20)
 8008920:	a5c00215 	stw	r23,8(r20)
 8008924:	a1000315 	stw	r4,12(r20)
 8008928:	a0800415 	stw	r2,16(r20)
 800892c:	003f8206 	br	8008738 <_fpadd_parts+0x124>
 8008930:	203f7226 	beq	r4,zero,80086fc <_fpadd_parts+0xe8>
 8008934:	35bff804 	addi	r22,r6,-32
 8008938:	b9af883a 	add	r23,r23,r6
 800893c:	b0003116 	blt	r22,zero,8008a04 <_fpadd_parts+0x3f0>
 8008940:	959ad83a 	srl	r13,r18,r22
 8008944:	001d883a 	mov	r14,zero
 8008948:	000f883a 	mov	r7,zero
 800894c:	01000044 	movi	r4,1
 8008950:	0011883a 	mov	r8,zero
 8008954:	b0002516 	blt	r22,zero,80089ec <_fpadd_parts+0x3d8>
 8008958:	2594983a 	sll	r10,r4,r22
 800895c:	0013883a 	mov	r9,zero
 8008960:	00bfffc4 	movi	r2,-1
 8008964:	4889883a 	add	r4,r9,r2
 8008968:	508b883a 	add	r5,r10,r2
 800896c:	224d803a 	cmpltu	r6,r4,r9
 8008970:	314b883a 	add	r5,r6,r5
 8008974:	8904703a 	and	r2,r17,r4
 8008978:	9146703a 	and	r3,r18,r5
 800897c:	10c4b03a 	or	r2,r2,r3
 8008980:	10000226 	beq	r2,zero,800898c <_fpadd_parts+0x378>
 8008984:	01c00044 	movi	r7,1
 8008988:	0011883a 	mov	r8,zero
 800898c:	69e2b03a 	or	r17,r13,r7
 8008990:	7224b03a 	or	r18,r14,r8
 8008994:	003f5906 	br	80086fc <_fpadd_parts+0xe8>
 8008998:	8407883a 	add	r3,r16,r16
 800899c:	008007c4 	movi	r2,31
 80089a0:	1185c83a 	sub	r2,r2,r6
 80089a4:	1886983a 	sll	r3,r3,r2
 80089a8:	7996d83a 	srl	r11,r15,r6
 80089ac:	8198d83a 	srl	r12,r16,r6
 80089b0:	1ad6b03a 	or	r11,r3,r11
 80089b4:	003f3e06 	br	80086b0 <_fpadd_parts+0x9c>
 80089b8:	2006d07a 	srli	r3,r4,1
 80089bc:	008007c4 	movi	r2,31
 80089c0:	1185c83a 	sub	r2,r2,r6
 80089c4:	1890d83a 	srl	r8,r3,r2
 80089c8:	218e983a 	sll	r7,r4,r6
 80089cc:	003f3e06 	br	80086c8 <_fpadd_parts+0xb4>
 80089d0:	113f821e 	bne	r2,r4,80087dc <_fpadd_parts+0x1c8>
 80089d4:	28c00117 	ldw	r3,4(r5)
 80089d8:	98800117 	ldw	r2,4(r19)
 80089dc:	10ff7f26 	beq	r2,r3,80087dc <_fpadd_parts+0x1c8>
 80089e0:	04c20074 	movhi	r19,2049
 80089e4:	9cc3fd04 	addi	r19,r19,4084
 80089e8:	003f7c06 	br	80087dc <_fpadd_parts+0x1c8>
 80089ec:	2006d07a 	srli	r3,r4,1
 80089f0:	008007c4 	movi	r2,31
 80089f4:	1185c83a 	sub	r2,r2,r6
 80089f8:	1894d83a 	srl	r10,r3,r2
 80089fc:	2192983a 	sll	r9,r4,r6
 8008a00:	003fd706 	br	8008960 <_fpadd_parts+0x34c>
 8008a04:	9487883a 	add	r3,r18,r18
 8008a08:	008007c4 	movi	r2,31
 8008a0c:	1185c83a 	sub	r2,r2,r6
 8008a10:	1886983a 	sll	r3,r3,r2
 8008a14:	899ad83a 	srl	r13,r17,r6
 8008a18:	919cd83a 	srl	r14,r18,r6
 8008a1c:	1b5ab03a 	or	r13,r3,r13
 8008a20:	003fc906 	br	8008948 <_fpadd_parts+0x334>

08008a24 <__subdf3>:
 8008a24:	deffea04 	addi	sp,sp,-88
 8008a28:	dcc01415 	stw	r19,80(sp)
 8008a2c:	dcc00404 	addi	r19,sp,16
 8008a30:	2011883a 	mov	r8,r4
 8008a34:	2813883a 	mov	r9,r5
 8008a38:	dc401315 	stw	r17,76(sp)
 8008a3c:	d809883a 	mov	r4,sp
 8008a40:	980b883a 	mov	r5,r19
 8008a44:	dc400904 	addi	r17,sp,36
 8008a48:	dfc01515 	stw	ra,84(sp)
 8008a4c:	da400115 	stw	r9,4(sp)
 8008a50:	d9c00315 	stw	r7,12(sp)
 8008a54:	da000015 	stw	r8,0(sp)
 8008a58:	d9800215 	stw	r6,8(sp)
 8008a5c:	8009d7c0 	call	8009d7c <__unpack_d>
 8008a60:	d9000204 	addi	r4,sp,8
 8008a64:	880b883a 	mov	r5,r17
 8008a68:	8009d7c0 	call	8009d7c <__unpack_d>
 8008a6c:	d8800a17 	ldw	r2,40(sp)
 8008a70:	880b883a 	mov	r5,r17
 8008a74:	9809883a 	mov	r4,r19
 8008a78:	d9800e04 	addi	r6,sp,56
 8008a7c:	1080005c 	xori	r2,r2,1
 8008a80:	d8800a15 	stw	r2,40(sp)
 8008a84:	80086140 	call	8008614 <_fpadd_parts>
 8008a88:	1009883a 	mov	r4,r2
 8008a8c:	8009a680 	call	8009a68 <__pack_d>
 8008a90:	dfc01517 	ldw	ra,84(sp)
 8008a94:	dcc01417 	ldw	r19,80(sp)
 8008a98:	dc401317 	ldw	r17,76(sp)
 8008a9c:	dec01604 	addi	sp,sp,88
 8008aa0:	f800283a 	ret

08008aa4 <__adddf3>:
 8008aa4:	deffea04 	addi	sp,sp,-88
 8008aa8:	dcc01415 	stw	r19,80(sp)
 8008aac:	dcc00404 	addi	r19,sp,16
 8008ab0:	2011883a 	mov	r8,r4
 8008ab4:	2813883a 	mov	r9,r5
 8008ab8:	dc401315 	stw	r17,76(sp)
 8008abc:	d809883a 	mov	r4,sp
 8008ac0:	980b883a 	mov	r5,r19
 8008ac4:	dc400904 	addi	r17,sp,36
 8008ac8:	dfc01515 	stw	ra,84(sp)
 8008acc:	da400115 	stw	r9,4(sp)
 8008ad0:	d9c00315 	stw	r7,12(sp)
 8008ad4:	da000015 	stw	r8,0(sp)
 8008ad8:	d9800215 	stw	r6,8(sp)
 8008adc:	8009d7c0 	call	8009d7c <__unpack_d>
 8008ae0:	d9000204 	addi	r4,sp,8
 8008ae4:	880b883a 	mov	r5,r17
 8008ae8:	8009d7c0 	call	8009d7c <__unpack_d>
 8008aec:	d9800e04 	addi	r6,sp,56
 8008af0:	9809883a 	mov	r4,r19
 8008af4:	880b883a 	mov	r5,r17
 8008af8:	80086140 	call	8008614 <_fpadd_parts>
 8008afc:	1009883a 	mov	r4,r2
 8008b00:	8009a680 	call	8009a68 <__pack_d>
 8008b04:	dfc01517 	ldw	ra,84(sp)
 8008b08:	dcc01417 	ldw	r19,80(sp)
 8008b0c:	dc401317 	ldw	r17,76(sp)
 8008b10:	dec01604 	addi	sp,sp,88
 8008b14:	f800283a 	ret

08008b18 <__muldf3>:
 8008b18:	deffe004 	addi	sp,sp,-128
 8008b1c:	dc401815 	stw	r17,96(sp)
 8008b20:	dc400404 	addi	r17,sp,16
 8008b24:	2011883a 	mov	r8,r4
 8008b28:	2813883a 	mov	r9,r5
 8008b2c:	dc001715 	stw	r16,92(sp)
 8008b30:	d809883a 	mov	r4,sp
 8008b34:	880b883a 	mov	r5,r17
 8008b38:	dc000904 	addi	r16,sp,36
 8008b3c:	dfc01f15 	stw	ra,124(sp)
 8008b40:	da400115 	stw	r9,4(sp)
 8008b44:	d9c00315 	stw	r7,12(sp)
 8008b48:	da000015 	stw	r8,0(sp)
 8008b4c:	d9800215 	stw	r6,8(sp)
 8008b50:	ddc01e15 	stw	r23,120(sp)
 8008b54:	dd801d15 	stw	r22,116(sp)
 8008b58:	dd401c15 	stw	r21,112(sp)
 8008b5c:	dd001b15 	stw	r20,108(sp)
 8008b60:	dcc01a15 	stw	r19,104(sp)
 8008b64:	dc801915 	stw	r18,100(sp)
 8008b68:	8009d7c0 	call	8009d7c <__unpack_d>
 8008b6c:	d9000204 	addi	r4,sp,8
 8008b70:	800b883a 	mov	r5,r16
 8008b74:	8009d7c0 	call	8009d7c <__unpack_d>
 8008b78:	d9000417 	ldw	r4,16(sp)
 8008b7c:	00800044 	movi	r2,1
 8008b80:	1100102e 	bgeu	r2,r4,8008bc4 <__muldf3+0xac>
 8008b84:	d8c00917 	ldw	r3,36(sp)
 8008b88:	10c0062e 	bgeu	r2,r3,8008ba4 <__muldf3+0x8c>
 8008b8c:	00800104 	movi	r2,4
 8008b90:	20800a26 	beq	r4,r2,8008bbc <__muldf3+0xa4>
 8008b94:	1880cc26 	beq	r3,r2,8008ec8 <__muldf3+0x3b0>
 8008b98:	00800084 	movi	r2,2
 8008b9c:	20800926 	beq	r4,r2,8008bc4 <__muldf3+0xac>
 8008ba0:	1880191e 	bne	r3,r2,8008c08 <__muldf3+0xf0>
 8008ba4:	d8c00a17 	ldw	r3,40(sp)
 8008ba8:	d8800517 	ldw	r2,20(sp)
 8008bac:	8009883a 	mov	r4,r16
 8008bb0:	10c4c03a 	cmpne	r2,r2,r3
 8008bb4:	d8800a15 	stw	r2,40(sp)
 8008bb8:	00000706 	br	8008bd8 <__muldf3+0xc0>
 8008bbc:	00800084 	movi	r2,2
 8008bc0:	1880c326 	beq	r3,r2,8008ed0 <__muldf3+0x3b8>
 8008bc4:	d8800517 	ldw	r2,20(sp)
 8008bc8:	d8c00a17 	ldw	r3,40(sp)
 8008bcc:	8809883a 	mov	r4,r17
 8008bd0:	10c4c03a 	cmpne	r2,r2,r3
 8008bd4:	d8800515 	stw	r2,20(sp)
 8008bd8:	8009a680 	call	8009a68 <__pack_d>
 8008bdc:	dfc01f17 	ldw	ra,124(sp)
 8008be0:	ddc01e17 	ldw	r23,120(sp)
 8008be4:	dd801d17 	ldw	r22,116(sp)
 8008be8:	dd401c17 	ldw	r21,112(sp)
 8008bec:	dd001b17 	ldw	r20,108(sp)
 8008bf0:	dcc01a17 	ldw	r19,104(sp)
 8008bf4:	dc801917 	ldw	r18,100(sp)
 8008bf8:	dc401817 	ldw	r17,96(sp)
 8008bfc:	dc001717 	ldw	r16,92(sp)
 8008c00:	dec02004 	addi	sp,sp,128
 8008c04:	f800283a 	ret
 8008c08:	dd800717 	ldw	r22,28(sp)
 8008c0c:	dc800c17 	ldw	r18,48(sp)
 8008c10:	002b883a 	mov	r21,zero
 8008c14:	0023883a 	mov	r17,zero
 8008c18:	a80b883a 	mov	r5,r21
 8008c1c:	b00d883a 	mov	r6,r22
 8008c20:	880f883a 	mov	r7,r17
 8008c24:	ddc00817 	ldw	r23,32(sp)
 8008c28:	dcc00d17 	ldw	r19,52(sp)
 8008c2c:	9009883a 	mov	r4,r18
 8008c30:	80098c40 	call	80098c4 <__muldi3>
 8008c34:	001b883a 	mov	r13,zero
 8008c38:	680f883a 	mov	r7,r13
 8008c3c:	b009883a 	mov	r4,r22
 8008c40:	000b883a 	mov	r5,zero
 8008c44:	980d883a 	mov	r6,r19
 8008c48:	b82d883a 	mov	r22,r23
 8008c4c:	002f883a 	mov	r23,zero
 8008c50:	db401615 	stw	r13,88(sp)
 8008c54:	d8801315 	stw	r2,76(sp)
 8008c58:	d8c01415 	stw	r3,80(sp)
 8008c5c:	dcc01515 	stw	r19,84(sp)
 8008c60:	80098c40 	call	80098c4 <__muldi3>
 8008c64:	b00d883a 	mov	r6,r22
 8008c68:	000b883a 	mov	r5,zero
 8008c6c:	9009883a 	mov	r4,r18
 8008c70:	b80f883a 	mov	r7,r23
 8008c74:	1021883a 	mov	r16,r2
 8008c78:	1823883a 	mov	r17,r3
 8008c7c:	80098c40 	call	80098c4 <__muldi3>
 8008c80:	8085883a 	add	r2,r16,r2
 8008c84:	140d803a 	cmpltu	r6,r2,r16
 8008c88:	88c7883a 	add	r3,r17,r3
 8008c8c:	30cd883a 	add	r6,r6,r3
 8008c90:	1029883a 	mov	r20,r2
 8008c94:	302b883a 	mov	r21,r6
 8008c98:	da801317 	ldw	r10,76(sp)
 8008c9c:	dac01417 	ldw	r11,80(sp)
 8008ca0:	db001517 	ldw	r12,84(sp)
 8008ca4:	db401617 	ldw	r13,88(sp)
 8008ca8:	3440612e 	bgeu	r6,r17,8008e30 <__muldf3+0x318>
 8008cac:	0009883a 	mov	r4,zero
 8008cb0:	5105883a 	add	r2,r10,r4
 8008cb4:	128d803a 	cmpltu	r6,r2,r10
 8008cb8:	5d07883a 	add	r3,r11,r20
 8008cbc:	30cd883a 	add	r6,r6,r3
 8008cc0:	0021883a 	mov	r16,zero
 8008cc4:	04400044 	movi	r17,1
 8008cc8:	1025883a 	mov	r18,r2
 8008ccc:	3027883a 	mov	r19,r6
 8008cd0:	32c06236 	bltu	r6,r11,8008e5c <__muldf3+0x344>
 8008cd4:	59807a26 	beq	r11,r6,8008ec0 <__muldf3+0x3a8>
 8008cd8:	680b883a 	mov	r5,r13
 8008cdc:	b80f883a 	mov	r7,r23
 8008ce0:	6009883a 	mov	r4,r12
 8008ce4:	b00d883a 	mov	r6,r22
 8008ce8:	80098c40 	call	80098c4 <__muldi3>
 8008cec:	1009883a 	mov	r4,r2
 8008cf0:	000f883a 	mov	r7,zero
 8008cf4:	1545883a 	add	r2,r2,r21
 8008cf8:	1111803a 	cmpltu	r8,r2,r4
 8008cfc:	19c7883a 	add	r3,r3,r7
 8008d00:	40c7883a 	add	r3,r8,r3
 8008d04:	88cb883a 	add	r5,r17,r3
 8008d08:	d8c00617 	ldw	r3,24(sp)
 8008d0c:	8089883a 	add	r4,r16,r2
 8008d10:	d8800b17 	ldw	r2,44(sp)
 8008d14:	18c00104 	addi	r3,r3,4
 8008d18:	240d803a 	cmpltu	r6,r4,r16
 8008d1c:	10c7883a 	add	r3,r2,r3
 8008d20:	2013883a 	mov	r9,r4
 8008d24:	d8800a17 	ldw	r2,40(sp)
 8008d28:	d9000517 	ldw	r4,20(sp)
 8008d2c:	314d883a 	add	r6,r6,r5
 8008d30:	3015883a 	mov	r10,r6
 8008d34:	2088c03a 	cmpne	r4,r4,r2
 8008d38:	00880034 	movhi	r2,8192
 8008d3c:	10bfffc4 	addi	r2,r2,-1
 8008d40:	d9000f15 	stw	r4,60(sp)
 8008d44:	d8c01015 	stw	r3,64(sp)
 8008d48:	1180162e 	bgeu	r2,r6,8008da4 <__muldf3+0x28c>
 8008d4c:	1811883a 	mov	r8,r3
 8008d50:	101f883a 	mov	r15,r2
 8008d54:	980497fa 	slli	r2,r19,31
 8008d58:	9016d07a 	srli	r11,r18,1
 8008d5c:	500697fa 	slli	r3,r10,31
 8008d60:	480cd07a 	srli	r6,r9,1
 8008d64:	500ed07a 	srli	r7,r10,1
 8008d68:	12d6b03a 	or	r11,r2,r11
 8008d6c:	00800044 	movi	r2,1
 8008d70:	198cb03a 	or	r6,r3,r6
 8008d74:	4888703a 	and	r4,r9,r2
 8008d78:	9818d07a 	srli	r12,r19,1
 8008d7c:	001b883a 	mov	r13,zero
 8008d80:	03a00034 	movhi	r14,32768
 8008d84:	3013883a 	mov	r9,r6
 8008d88:	3815883a 	mov	r10,r7
 8008d8c:	4091883a 	add	r8,r8,r2
 8008d90:	20000226 	beq	r4,zero,8008d9c <__muldf3+0x284>
 8008d94:	5b64b03a 	or	r18,r11,r13
 8008d98:	63a6b03a 	or	r19,r12,r14
 8008d9c:	7abfed36 	bltu	r15,r10,8008d54 <__muldf3+0x23c>
 8008da0:	da001015 	stw	r8,64(sp)
 8008da4:	00840034 	movhi	r2,4096
 8008da8:	10bfffc4 	addi	r2,r2,-1
 8008dac:	12801436 	bltu	r2,r10,8008e00 <__muldf3+0x2e8>
 8008db0:	da001017 	ldw	r8,64(sp)
 8008db4:	101f883a 	mov	r15,r2
 8008db8:	4a45883a 	add	r2,r9,r9
 8008dbc:	124d803a 	cmpltu	r6,r2,r9
 8008dc0:	5287883a 	add	r3,r10,r10
 8008dc4:	9497883a 	add	r11,r18,r18
 8008dc8:	5c8f803a 	cmpltu	r7,r11,r18
 8008dcc:	9cd9883a 	add	r12,r19,r19
 8008dd0:	01000044 	movi	r4,1
 8008dd4:	30cd883a 	add	r6,r6,r3
 8008dd8:	3b0f883a 	add	r7,r7,r12
 8008ddc:	423fffc4 	addi	r8,r8,-1
 8008de0:	1013883a 	mov	r9,r2
 8008de4:	3015883a 	mov	r10,r6
 8008de8:	111ab03a 	or	r13,r2,r4
 8008dec:	98003016 	blt	r19,zero,8008eb0 <__muldf3+0x398>
 8008df0:	5825883a 	mov	r18,r11
 8008df4:	3827883a 	mov	r19,r7
 8008df8:	7abfef2e 	bgeu	r15,r10,8008db8 <__muldf3+0x2a0>
 8008dfc:	da001015 	stw	r8,64(sp)
 8008e00:	00803fc4 	movi	r2,255
 8008e04:	488e703a 	and	r7,r9,r2
 8008e08:	00802004 	movi	r2,128
 8008e0c:	0007883a 	mov	r3,zero
 8008e10:	0011883a 	mov	r8,zero
 8008e14:	38801826 	beq	r7,r2,8008e78 <__muldf3+0x360>
 8008e18:	008000c4 	movi	r2,3
 8008e1c:	d9000e04 	addi	r4,sp,56
 8008e20:	da801215 	stw	r10,72(sp)
 8008e24:	d8800e15 	stw	r2,56(sp)
 8008e28:	da401115 	stw	r9,68(sp)
 8008e2c:	003f6a06 	br	8008bd8 <__muldf3+0xc0>
 8008e30:	89802126 	beq	r17,r6,8008eb8 <__muldf3+0x3a0>
 8008e34:	0009883a 	mov	r4,zero
 8008e38:	5105883a 	add	r2,r10,r4
 8008e3c:	128d803a 	cmpltu	r6,r2,r10
 8008e40:	5d07883a 	add	r3,r11,r20
 8008e44:	30cd883a 	add	r6,r6,r3
 8008e48:	0021883a 	mov	r16,zero
 8008e4c:	0023883a 	mov	r17,zero
 8008e50:	1025883a 	mov	r18,r2
 8008e54:	3027883a 	mov	r19,r6
 8008e58:	32ff9e2e 	bgeu	r6,r11,8008cd4 <__muldf3+0x1bc>
 8008e5c:	00800044 	movi	r2,1
 8008e60:	8089883a 	add	r4,r16,r2
 8008e64:	240d803a 	cmpltu	r6,r4,r16
 8008e68:	344d883a 	add	r6,r6,r17
 8008e6c:	2021883a 	mov	r16,r4
 8008e70:	3023883a 	mov	r17,r6
 8008e74:	003f9806 	br	8008cd8 <__muldf3+0x1c0>
 8008e78:	403fe71e 	bne	r8,zero,8008e18 <__muldf3+0x300>
 8008e7c:	01004004 	movi	r4,256
 8008e80:	4904703a 	and	r2,r9,r4
 8008e84:	10c4b03a 	or	r2,r2,r3
 8008e88:	103fe31e 	bne	r2,zero,8008e18 <__muldf3+0x300>
 8008e8c:	94c4b03a 	or	r2,r18,r19
 8008e90:	103fe126 	beq	r2,zero,8008e18 <__muldf3+0x300>
 8008e94:	49c5883a 	add	r2,r9,r7
 8008e98:	1251803a 	cmpltu	r8,r2,r9
 8008e9c:	4291883a 	add	r8,r8,r10
 8008ea0:	013fc004 	movi	r4,-256
 8008ea4:	1112703a 	and	r9,r2,r4
 8008ea8:	4015883a 	mov	r10,r8
 8008eac:	003fda06 	br	8008e18 <__muldf3+0x300>
 8008eb0:	6813883a 	mov	r9,r13
 8008eb4:	003fce06 	br	8008df0 <__muldf3+0x2d8>
 8008eb8:	143f7c36 	bltu	r2,r16,8008cac <__muldf3+0x194>
 8008ebc:	003fdd06 	br	8008e34 <__muldf3+0x31c>
 8008ec0:	12bf852e 	bgeu	r2,r10,8008cd8 <__muldf3+0x1c0>
 8008ec4:	003fe506 	br	8008e5c <__muldf3+0x344>
 8008ec8:	00800084 	movi	r2,2
 8008ecc:	20bf351e 	bne	r4,r2,8008ba4 <__muldf3+0x8c>
 8008ed0:	01020074 	movhi	r4,2049
 8008ed4:	2103fd04 	addi	r4,r4,4084
 8008ed8:	003f3f06 	br	8008bd8 <__muldf3+0xc0>

08008edc <__divdf3>:
 8008edc:	deffed04 	addi	sp,sp,-76
 8008ee0:	dcc01115 	stw	r19,68(sp)
 8008ee4:	dcc00404 	addi	r19,sp,16
 8008ee8:	2011883a 	mov	r8,r4
 8008eec:	2813883a 	mov	r9,r5
 8008ef0:	dc000e15 	stw	r16,56(sp)
 8008ef4:	d809883a 	mov	r4,sp
 8008ef8:	980b883a 	mov	r5,r19
 8008efc:	dc000904 	addi	r16,sp,36
 8008f00:	dfc01215 	stw	ra,72(sp)
 8008f04:	da400115 	stw	r9,4(sp)
 8008f08:	d9c00315 	stw	r7,12(sp)
 8008f0c:	da000015 	stw	r8,0(sp)
 8008f10:	d9800215 	stw	r6,8(sp)
 8008f14:	dc801015 	stw	r18,64(sp)
 8008f18:	dc400f15 	stw	r17,60(sp)
 8008f1c:	8009d7c0 	call	8009d7c <__unpack_d>
 8008f20:	d9000204 	addi	r4,sp,8
 8008f24:	800b883a 	mov	r5,r16
 8008f28:	8009d7c0 	call	8009d7c <__unpack_d>
 8008f2c:	d9000417 	ldw	r4,16(sp)
 8008f30:	00800044 	movi	r2,1
 8008f34:	11000b2e 	bgeu	r2,r4,8008f64 <__divdf3+0x88>
 8008f38:	d9400917 	ldw	r5,36(sp)
 8008f3c:	1140762e 	bgeu	r2,r5,8009118 <__divdf3+0x23c>
 8008f40:	d8800517 	ldw	r2,20(sp)
 8008f44:	d8c00a17 	ldw	r3,40(sp)
 8008f48:	01800104 	movi	r6,4
 8008f4c:	10c4f03a 	xor	r2,r2,r3
 8008f50:	d8800515 	stw	r2,20(sp)
 8008f54:	21800226 	beq	r4,r6,8008f60 <__divdf3+0x84>
 8008f58:	00800084 	movi	r2,2
 8008f5c:	2080141e 	bne	r4,r2,8008fb0 <__divdf3+0xd4>
 8008f60:	29000926 	beq	r5,r4,8008f88 <__divdf3+0xac>
 8008f64:	9809883a 	mov	r4,r19
 8008f68:	8009a680 	call	8009a68 <__pack_d>
 8008f6c:	dfc01217 	ldw	ra,72(sp)
 8008f70:	dcc01117 	ldw	r19,68(sp)
 8008f74:	dc801017 	ldw	r18,64(sp)
 8008f78:	dc400f17 	ldw	r17,60(sp)
 8008f7c:	dc000e17 	ldw	r16,56(sp)
 8008f80:	dec01304 	addi	sp,sp,76
 8008f84:	f800283a 	ret
 8008f88:	01020074 	movhi	r4,2049
 8008f8c:	2103fd04 	addi	r4,r4,4084
 8008f90:	8009a680 	call	8009a68 <__pack_d>
 8008f94:	dfc01217 	ldw	ra,72(sp)
 8008f98:	dcc01117 	ldw	r19,68(sp)
 8008f9c:	dc801017 	ldw	r18,64(sp)
 8008fa0:	dc400f17 	ldw	r17,60(sp)
 8008fa4:	dc000e17 	ldw	r16,56(sp)
 8008fa8:	dec01304 	addi	sp,sp,76
 8008fac:	f800283a 	ret
 8008fb0:	29805b26 	beq	r5,r6,8009120 <__divdf3+0x244>
 8008fb4:	28802d26 	beq	r5,r2,800906c <__divdf3+0x190>
 8008fb8:	d8c00617 	ldw	r3,24(sp)
 8008fbc:	d8800b17 	ldw	r2,44(sp)
 8008fc0:	d9c00817 	ldw	r7,32(sp)
 8008fc4:	dc400d17 	ldw	r17,52(sp)
 8008fc8:	188bc83a 	sub	r5,r3,r2
 8008fcc:	d9800717 	ldw	r6,28(sp)
 8008fd0:	dc000c17 	ldw	r16,48(sp)
 8008fd4:	d9400615 	stw	r5,24(sp)
 8008fd8:	3c403836 	bltu	r7,r17,80090bc <__divdf3+0x1e0>
 8008fdc:	89c03626 	beq	r17,r7,80090b8 <__divdf3+0x1dc>
 8008fe0:	0015883a 	mov	r10,zero
 8008fe4:	001d883a 	mov	r14,zero
 8008fe8:	02c40034 	movhi	r11,4096
 8008fec:	001f883a 	mov	r15,zero
 8008ff0:	003f883a 	mov	ra,zero
 8008ff4:	04800f44 	movi	r18,61
 8008ff8:	00000f06 	br	8009038 <__divdf3+0x15c>
 8008ffc:	601d883a 	mov	r14,r12
 8009000:	681f883a 	mov	r15,r13
 8009004:	400d883a 	mov	r6,r8
 8009008:	100f883a 	mov	r7,r2
 800900c:	3191883a 	add	r8,r6,r6
 8009010:	5808d07a 	srli	r4,r11,1
 8009014:	4185803a 	cmpltu	r2,r8,r6
 8009018:	39d3883a 	add	r9,r7,r7
 800901c:	28c6b03a 	or	r3,r5,r3
 8009020:	1245883a 	add	r2,r2,r9
 8009024:	1815883a 	mov	r10,r3
 8009028:	2017883a 	mov	r11,r4
 800902c:	400d883a 	mov	r6,r8
 8009030:	100f883a 	mov	r7,r2
 8009034:	fc801726 	beq	ra,r18,8009094 <__divdf3+0x1b8>
 8009038:	580a97fa 	slli	r5,r11,31
 800903c:	5006d07a 	srli	r3,r10,1
 8009040:	ffc00044 	addi	ra,ra,1
 8009044:	3c7ff136 	bltu	r7,r17,800900c <__divdf3+0x130>
 8009048:	3411c83a 	sub	r8,r6,r16
 800904c:	3205803a 	cmpltu	r2,r6,r8
 8009050:	3c53c83a 	sub	r9,r7,r17
 8009054:	7298b03a 	or	r12,r14,r10
 8009058:	7adab03a 	or	r13,r15,r11
 800905c:	4885c83a 	sub	r2,r9,r2
 8009060:	89ffe61e 	bne	r17,r7,8008ffc <__divdf3+0x120>
 8009064:	343fe936 	bltu	r6,r16,800900c <__divdf3+0x130>
 8009068:	003fe406 	br	8008ffc <__divdf3+0x120>
 800906c:	9809883a 	mov	r4,r19
 8009070:	d9800415 	stw	r6,16(sp)
 8009074:	8009a680 	call	8009a68 <__pack_d>
 8009078:	dfc01217 	ldw	ra,72(sp)
 800907c:	dcc01117 	ldw	r19,68(sp)
 8009080:	dc801017 	ldw	r18,64(sp)
 8009084:	dc400f17 	ldw	r17,60(sp)
 8009088:	dc000e17 	ldw	r16,56(sp)
 800908c:	dec01304 	addi	sp,sp,76
 8009090:	f800283a 	ret
 8009094:	00803fc4 	movi	r2,255
 8009098:	7090703a 	and	r8,r14,r2
 800909c:	00802004 	movi	r2,128
 80090a0:	0007883a 	mov	r3,zero
 80090a4:	0013883a 	mov	r9,zero
 80090a8:	40800d26 	beq	r8,r2,80090e0 <__divdf3+0x204>
 80090ac:	dbc00815 	stw	r15,32(sp)
 80090b0:	db800715 	stw	r14,28(sp)
 80090b4:	003fab06 	br	8008f64 <__divdf3+0x88>
 80090b8:	343fc92e 	bgeu	r6,r16,8008fe0 <__divdf3+0x104>
 80090bc:	3185883a 	add	r2,r6,r6
 80090c0:	1189803a 	cmpltu	r4,r2,r6
 80090c4:	39c7883a 	add	r3,r7,r7
 80090c8:	20c9883a 	add	r4,r4,r3
 80090cc:	297fffc4 	addi	r5,r5,-1
 80090d0:	100d883a 	mov	r6,r2
 80090d4:	200f883a 	mov	r7,r4
 80090d8:	d9400615 	stw	r5,24(sp)
 80090dc:	003fc006 	br	8008fe0 <__divdf3+0x104>
 80090e0:	483ff21e 	bne	r9,zero,80090ac <__divdf3+0x1d0>
 80090e4:	01004004 	movi	r4,256
 80090e8:	7104703a 	and	r2,r14,r4
 80090ec:	10c4b03a 	or	r2,r2,r3
 80090f0:	103fee1e 	bne	r2,zero,80090ac <__divdf3+0x1d0>
 80090f4:	31c4b03a 	or	r2,r6,r7
 80090f8:	103fec26 	beq	r2,zero,80090ac <__divdf3+0x1d0>
 80090fc:	7205883a 	add	r2,r14,r8
 8009100:	1391803a 	cmpltu	r8,r2,r14
 8009104:	43d1883a 	add	r8,r8,r15
 8009108:	013fc004 	movi	r4,-256
 800910c:	111c703a 	and	r14,r2,r4
 8009110:	401f883a 	mov	r15,r8
 8009114:	003fe506 	br	80090ac <__divdf3+0x1d0>
 8009118:	8009883a 	mov	r4,r16
 800911c:	003f9206 	br	8008f68 <__divdf3+0x8c>
 8009120:	9809883a 	mov	r4,r19
 8009124:	d8000715 	stw	zero,28(sp)
 8009128:	d8000815 	stw	zero,32(sp)
 800912c:	d8000615 	stw	zero,24(sp)
 8009130:	003f8d06 	br	8008f68 <__divdf3+0x8c>

08009134 <__eqdf2>:
 8009134:	deffef04 	addi	sp,sp,-68
 8009138:	dc400f15 	stw	r17,60(sp)
 800913c:	dc400404 	addi	r17,sp,16
 8009140:	2005883a 	mov	r2,r4
 8009144:	2807883a 	mov	r3,r5
 8009148:	dc000e15 	stw	r16,56(sp)
 800914c:	d809883a 	mov	r4,sp
 8009150:	880b883a 	mov	r5,r17
 8009154:	dc000904 	addi	r16,sp,36
 8009158:	d8c00115 	stw	r3,4(sp)
 800915c:	d8800015 	stw	r2,0(sp)
 8009160:	d9800215 	stw	r6,8(sp)
 8009164:	dfc01015 	stw	ra,64(sp)
 8009168:	d9c00315 	stw	r7,12(sp)
 800916c:	8009d7c0 	call	8009d7c <__unpack_d>
 8009170:	d9000204 	addi	r4,sp,8
 8009174:	800b883a 	mov	r5,r16
 8009178:	8009d7c0 	call	8009d7c <__unpack_d>
 800917c:	d8800417 	ldw	r2,16(sp)
 8009180:	00c00044 	movi	r3,1
 8009184:	180d883a 	mov	r6,r3
 8009188:	1880062e 	bgeu	r3,r2,80091a4 <__eqdf2+0x70>
 800918c:	d8800917 	ldw	r2,36(sp)
 8009190:	8809883a 	mov	r4,r17
 8009194:	800b883a 	mov	r5,r16
 8009198:	1880022e 	bgeu	r3,r2,80091a4 <__eqdf2+0x70>
 800919c:	8009eb40 	call	8009eb4 <__fpcmp_parts_d>
 80091a0:	100d883a 	mov	r6,r2
 80091a4:	3005883a 	mov	r2,r6
 80091a8:	dfc01017 	ldw	ra,64(sp)
 80091ac:	dc400f17 	ldw	r17,60(sp)
 80091b0:	dc000e17 	ldw	r16,56(sp)
 80091b4:	dec01104 	addi	sp,sp,68
 80091b8:	f800283a 	ret

080091bc <__nedf2>:
 80091bc:	deffef04 	addi	sp,sp,-68
 80091c0:	dc400f15 	stw	r17,60(sp)
 80091c4:	dc400404 	addi	r17,sp,16
 80091c8:	2005883a 	mov	r2,r4
 80091cc:	2807883a 	mov	r3,r5
 80091d0:	dc000e15 	stw	r16,56(sp)
 80091d4:	d809883a 	mov	r4,sp
 80091d8:	880b883a 	mov	r5,r17
 80091dc:	dc000904 	addi	r16,sp,36
 80091e0:	d8c00115 	stw	r3,4(sp)
 80091e4:	d8800015 	stw	r2,0(sp)
 80091e8:	d9800215 	stw	r6,8(sp)
 80091ec:	dfc01015 	stw	ra,64(sp)
 80091f0:	d9c00315 	stw	r7,12(sp)
 80091f4:	8009d7c0 	call	8009d7c <__unpack_d>
 80091f8:	d9000204 	addi	r4,sp,8
 80091fc:	800b883a 	mov	r5,r16
 8009200:	8009d7c0 	call	8009d7c <__unpack_d>
 8009204:	d8800417 	ldw	r2,16(sp)
 8009208:	00c00044 	movi	r3,1
 800920c:	180d883a 	mov	r6,r3
 8009210:	1880062e 	bgeu	r3,r2,800922c <__nedf2+0x70>
 8009214:	d8800917 	ldw	r2,36(sp)
 8009218:	8809883a 	mov	r4,r17
 800921c:	800b883a 	mov	r5,r16
 8009220:	1880022e 	bgeu	r3,r2,800922c <__nedf2+0x70>
 8009224:	8009eb40 	call	8009eb4 <__fpcmp_parts_d>
 8009228:	100d883a 	mov	r6,r2
 800922c:	3005883a 	mov	r2,r6
 8009230:	dfc01017 	ldw	ra,64(sp)
 8009234:	dc400f17 	ldw	r17,60(sp)
 8009238:	dc000e17 	ldw	r16,56(sp)
 800923c:	dec01104 	addi	sp,sp,68
 8009240:	f800283a 	ret

08009244 <__gtdf2>:
 8009244:	deffef04 	addi	sp,sp,-68
 8009248:	dc400f15 	stw	r17,60(sp)
 800924c:	dc400404 	addi	r17,sp,16
 8009250:	2005883a 	mov	r2,r4
 8009254:	2807883a 	mov	r3,r5
 8009258:	dc000e15 	stw	r16,56(sp)
 800925c:	d809883a 	mov	r4,sp
 8009260:	880b883a 	mov	r5,r17
 8009264:	dc000904 	addi	r16,sp,36
 8009268:	d8c00115 	stw	r3,4(sp)
 800926c:	d8800015 	stw	r2,0(sp)
 8009270:	d9800215 	stw	r6,8(sp)
 8009274:	dfc01015 	stw	ra,64(sp)
 8009278:	d9c00315 	stw	r7,12(sp)
 800927c:	8009d7c0 	call	8009d7c <__unpack_d>
 8009280:	d9000204 	addi	r4,sp,8
 8009284:	800b883a 	mov	r5,r16
 8009288:	8009d7c0 	call	8009d7c <__unpack_d>
 800928c:	d8800417 	ldw	r2,16(sp)
 8009290:	00c00044 	movi	r3,1
 8009294:	01bfffc4 	movi	r6,-1
 8009298:	1880062e 	bgeu	r3,r2,80092b4 <__gtdf2+0x70>
 800929c:	d8800917 	ldw	r2,36(sp)
 80092a0:	8809883a 	mov	r4,r17
 80092a4:	800b883a 	mov	r5,r16
 80092a8:	1880022e 	bgeu	r3,r2,80092b4 <__gtdf2+0x70>
 80092ac:	8009eb40 	call	8009eb4 <__fpcmp_parts_d>
 80092b0:	100d883a 	mov	r6,r2
 80092b4:	3005883a 	mov	r2,r6
 80092b8:	dfc01017 	ldw	ra,64(sp)
 80092bc:	dc400f17 	ldw	r17,60(sp)
 80092c0:	dc000e17 	ldw	r16,56(sp)
 80092c4:	dec01104 	addi	sp,sp,68
 80092c8:	f800283a 	ret

080092cc <__gedf2>:
 80092cc:	deffef04 	addi	sp,sp,-68
 80092d0:	dc400f15 	stw	r17,60(sp)
 80092d4:	dc400404 	addi	r17,sp,16
 80092d8:	2005883a 	mov	r2,r4
 80092dc:	2807883a 	mov	r3,r5
 80092e0:	dc000e15 	stw	r16,56(sp)
 80092e4:	d809883a 	mov	r4,sp
 80092e8:	880b883a 	mov	r5,r17
 80092ec:	dc000904 	addi	r16,sp,36
 80092f0:	d8c00115 	stw	r3,4(sp)
 80092f4:	d8800015 	stw	r2,0(sp)
 80092f8:	d9800215 	stw	r6,8(sp)
 80092fc:	dfc01015 	stw	ra,64(sp)
 8009300:	d9c00315 	stw	r7,12(sp)
 8009304:	8009d7c0 	call	8009d7c <__unpack_d>
 8009308:	d9000204 	addi	r4,sp,8
 800930c:	800b883a 	mov	r5,r16
 8009310:	8009d7c0 	call	8009d7c <__unpack_d>
 8009314:	d8800417 	ldw	r2,16(sp)
 8009318:	00c00044 	movi	r3,1
 800931c:	01bfffc4 	movi	r6,-1
 8009320:	1880062e 	bgeu	r3,r2,800933c <__gedf2+0x70>
 8009324:	d8800917 	ldw	r2,36(sp)
 8009328:	8809883a 	mov	r4,r17
 800932c:	800b883a 	mov	r5,r16
 8009330:	1880022e 	bgeu	r3,r2,800933c <__gedf2+0x70>
 8009334:	8009eb40 	call	8009eb4 <__fpcmp_parts_d>
 8009338:	100d883a 	mov	r6,r2
 800933c:	3005883a 	mov	r2,r6
 8009340:	dfc01017 	ldw	ra,64(sp)
 8009344:	dc400f17 	ldw	r17,60(sp)
 8009348:	dc000e17 	ldw	r16,56(sp)
 800934c:	dec01104 	addi	sp,sp,68
 8009350:	f800283a 	ret

08009354 <__ltdf2>:
 8009354:	deffef04 	addi	sp,sp,-68
 8009358:	dc400f15 	stw	r17,60(sp)
 800935c:	dc400404 	addi	r17,sp,16
 8009360:	2005883a 	mov	r2,r4
 8009364:	2807883a 	mov	r3,r5
 8009368:	dc000e15 	stw	r16,56(sp)
 800936c:	d809883a 	mov	r4,sp
 8009370:	880b883a 	mov	r5,r17
 8009374:	dc000904 	addi	r16,sp,36
 8009378:	d8c00115 	stw	r3,4(sp)
 800937c:	d8800015 	stw	r2,0(sp)
 8009380:	d9800215 	stw	r6,8(sp)
 8009384:	dfc01015 	stw	ra,64(sp)
 8009388:	d9c00315 	stw	r7,12(sp)
 800938c:	8009d7c0 	call	8009d7c <__unpack_d>
 8009390:	d9000204 	addi	r4,sp,8
 8009394:	800b883a 	mov	r5,r16
 8009398:	8009d7c0 	call	8009d7c <__unpack_d>
 800939c:	d8800417 	ldw	r2,16(sp)
 80093a0:	00c00044 	movi	r3,1
 80093a4:	180d883a 	mov	r6,r3
 80093a8:	1880062e 	bgeu	r3,r2,80093c4 <__ltdf2+0x70>
 80093ac:	d8800917 	ldw	r2,36(sp)
 80093b0:	8809883a 	mov	r4,r17
 80093b4:	800b883a 	mov	r5,r16
 80093b8:	1880022e 	bgeu	r3,r2,80093c4 <__ltdf2+0x70>
 80093bc:	8009eb40 	call	8009eb4 <__fpcmp_parts_d>
 80093c0:	100d883a 	mov	r6,r2
 80093c4:	3005883a 	mov	r2,r6
 80093c8:	dfc01017 	ldw	ra,64(sp)
 80093cc:	dc400f17 	ldw	r17,60(sp)
 80093d0:	dc000e17 	ldw	r16,56(sp)
 80093d4:	dec01104 	addi	sp,sp,68
 80093d8:	f800283a 	ret

080093dc <__floatsidf>:
 80093dc:	2006d7fa 	srli	r3,r4,31
 80093e0:	defff604 	addi	sp,sp,-40
 80093e4:	008000c4 	movi	r2,3
 80093e8:	dfc00915 	stw	ra,36(sp)
 80093ec:	dcc00815 	stw	r19,32(sp)
 80093f0:	dc800715 	stw	r18,28(sp)
 80093f4:	dc400615 	stw	r17,24(sp)
 80093f8:	dc000515 	stw	r16,20(sp)
 80093fc:	d8800015 	stw	r2,0(sp)
 8009400:	d8c00115 	stw	r3,4(sp)
 8009404:	20000f1e 	bne	r4,zero,8009444 <__floatsidf+0x68>
 8009408:	00800084 	movi	r2,2
 800940c:	d8800015 	stw	r2,0(sp)
 8009410:	d809883a 	mov	r4,sp
 8009414:	8009a680 	call	8009a68 <__pack_d>
 8009418:	1009883a 	mov	r4,r2
 800941c:	180b883a 	mov	r5,r3
 8009420:	2005883a 	mov	r2,r4
 8009424:	2807883a 	mov	r3,r5
 8009428:	dfc00917 	ldw	ra,36(sp)
 800942c:	dcc00817 	ldw	r19,32(sp)
 8009430:	dc800717 	ldw	r18,28(sp)
 8009434:	dc400617 	ldw	r17,24(sp)
 8009438:	dc000517 	ldw	r16,20(sp)
 800943c:	dec00a04 	addi	sp,sp,40
 8009440:	f800283a 	ret
 8009444:	00800f04 	movi	r2,60
 8009448:	1807003a 	cmpeq	r3,r3,zero
 800944c:	d8800215 	stw	r2,8(sp)
 8009450:	18001126 	beq	r3,zero,8009498 <__floatsidf+0xbc>
 8009454:	0027883a 	mov	r19,zero
 8009458:	2025883a 	mov	r18,r4
 800945c:	d9000315 	stw	r4,12(sp)
 8009460:	dcc00415 	stw	r19,16(sp)
 8009464:	80099e80 	call	80099e8 <__clzsi2>
 8009468:	11000744 	addi	r4,r2,29
 800946c:	013fe80e 	bge	zero,r4,8009410 <__floatsidf+0x34>
 8009470:	10bfff44 	addi	r2,r2,-3
 8009474:	10000c16 	blt	r2,zero,80094a8 <__floatsidf+0xcc>
 8009478:	90a2983a 	sll	r17,r18,r2
 800947c:	0021883a 	mov	r16,zero
 8009480:	d8800217 	ldw	r2,8(sp)
 8009484:	dc400415 	stw	r17,16(sp)
 8009488:	dc000315 	stw	r16,12(sp)
 800948c:	1105c83a 	sub	r2,r2,r4
 8009490:	d8800215 	stw	r2,8(sp)
 8009494:	003fde06 	br	8009410 <__floatsidf+0x34>
 8009498:	00a00034 	movhi	r2,32768
 800949c:	20800a26 	beq	r4,r2,80094c8 <__floatsidf+0xec>
 80094a0:	0109c83a 	sub	r4,zero,r4
 80094a4:	003feb06 	br	8009454 <__floatsidf+0x78>
 80094a8:	9006d07a 	srli	r3,r18,1
 80094ac:	008007c4 	movi	r2,31
 80094b0:	1105c83a 	sub	r2,r2,r4
 80094b4:	1886d83a 	srl	r3,r3,r2
 80094b8:	9922983a 	sll	r17,r19,r4
 80094bc:	9120983a 	sll	r16,r18,r4
 80094c0:	1c62b03a 	or	r17,r3,r17
 80094c4:	003fee06 	br	8009480 <__floatsidf+0xa4>
 80094c8:	0009883a 	mov	r4,zero
 80094cc:	01707834 	movhi	r5,49632
 80094d0:	003fd306 	br	8009420 <__floatsidf+0x44>

080094d4 <__fixdfsi>:
 80094d4:	defff804 	addi	sp,sp,-32
 80094d8:	2005883a 	mov	r2,r4
 80094dc:	2807883a 	mov	r3,r5
 80094e0:	d809883a 	mov	r4,sp
 80094e4:	d9400204 	addi	r5,sp,8
 80094e8:	d8c00115 	stw	r3,4(sp)
 80094ec:	d8800015 	stw	r2,0(sp)
 80094f0:	dfc00715 	stw	ra,28(sp)
 80094f4:	8009d7c0 	call	8009d7c <__unpack_d>
 80094f8:	d8c00217 	ldw	r3,8(sp)
 80094fc:	00800084 	movi	r2,2
 8009500:	1880051e 	bne	r3,r2,8009518 <__fixdfsi+0x44>
 8009504:	0007883a 	mov	r3,zero
 8009508:	1805883a 	mov	r2,r3
 800950c:	dfc00717 	ldw	ra,28(sp)
 8009510:	dec00804 	addi	sp,sp,32
 8009514:	f800283a 	ret
 8009518:	00800044 	movi	r2,1
 800951c:	10fff92e 	bgeu	r2,r3,8009504 <__fixdfsi+0x30>
 8009520:	00800104 	movi	r2,4
 8009524:	18800426 	beq	r3,r2,8009538 <__fixdfsi+0x64>
 8009528:	d8c00417 	ldw	r3,16(sp)
 800952c:	183ff516 	blt	r3,zero,8009504 <__fixdfsi+0x30>
 8009530:	00800784 	movi	r2,30
 8009534:	10c0080e 	bge	r2,r3,8009558 <__fixdfsi+0x84>
 8009538:	d8800317 	ldw	r2,12(sp)
 800953c:	1000121e 	bne	r2,zero,8009588 <__fixdfsi+0xb4>
 8009540:	00e00034 	movhi	r3,32768
 8009544:	18ffffc4 	addi	r3,r3,-1
 8009548:	1805883a 	mov	r2,r3
 800954c:	dfc00717 	ldw	ra,28(sp)
 8009550:	dec00804 	addi	sp,sp,32
 8009554:	f800283a 	ret
 8009558:	00800f04 	movi	r2,60
 800955c:	10d1c83a 	sub	r8,r2,r3
 8009560:	40bff804 	addi	r2,r8,-32
 8009564:	d9800517 	ldw	r6,20(sp)
 8009568:	d9c00617 	ldw	r7,24(sp)
 800956c:	10000816 	blt	r2,zero,8009590 <__fixdfsi+0xbc>
 8009570:	3888d83a 	srl	r4,r7,r2
 8009574:	d8800317 	ldw	r2,12(sp)
 8009578:	2007883a 	mov	r3,r4
 800957c:	103fe226 	beq	r2,zero,8009508 <__fixdfsi+0x34>
 8009580:	0107c83a 	sub	r3,zero,r4
 8009584:	003fe006 	br	8009508 <__fixdfsi+0x34>
 8009588:	00e00034 	movhi	r3,32768
 800958c:	003fde06 	br	8009508 <__fixdfsi+0x34>
 8009590:	39c7883a 	add	r3,r7,r7
 8009594:	008007c4 	movi	r2,31
 8009598:	1205c83a 	sub	r2,r2,r8
 800959c:	1886983a 	sll	r3,r3,r2
 80095a0:	3208d83a 	srl	r4,r6,r8
 80095a4:	1908b03a 	or	r4,r3,r4
 80095a8:	003ff206 	br	8009574 <__fixdfsi+0xa0>

080095ac <__floatunsidf>:
 80095ac:	defff204 	addi	sp,sp,-56
 80095b0:	dfc00d15 	stw	ra,52(sp)
 80095b4:	ddc00c15 	stw	r23,48(sp)
 80095b8:	dd800b15 	stw	r22,44(sp)
 80095bc:	dd400a15 	stw	r21,40(sp)
 80095c0:	dd000915 	stw	r20,36(sp)
 80095c4:	dcc00815 	stw	r19,32(sp)
 80095c8:	dc800715 	stw	r18,28(sp)
 80095cc:	dc400615 	stw	r17,24(sp)
 80095d0:	dc000515 	stw	r16,20(sp)
 80095d4:	d8000115 	stw	zero,4(sp)
 80095d8:	20000f1e 	bne	r4,zero,8009618 <__floatunsidf+0x6c>
 80095dc:	00800084 	movi	r2,2
 80095e0:	d8800015 	stw	r2,0(sp)
 80095e4:	d809883a 	mov	r4,sp
 80095e8:	8009a680 	call	8009a68 <__pack_d>
 80095ec:	dfc00d17 	ldw	ra,52(sp)
 80095f0:	ddc00c17 	ldw	r23,48(sp)
 80095f4:	dd800b17 	ldw	r22,44(sp)
 80095f8:	dd400a17 	ldw	r21,40(sp)
 80095fc:	dd000917 	ldw	r20,36(sp)
 8009600:	dcc00817 	ldw	r19,32(sp)
 8009604:	dc800717 	ldw	r18,28(sp)
 8009608:	dc400617 	ldw	r17,24(sp)
 800960c:	dc000517 	ldw	r16,20(sp)
 8009610:	dec00e04 	addi	sp,sp,56
 8009614:	f800283a 	ret
 8009618:	008000c4 	movi	r2,3
 800961c:	00c00f04 	movi	r3,60
 8009620:	002f883a 	mov	r23,zero
 8009624:	202d883a 	mov	r22,r4
 8009628:	d8800015 	stw	r2,0(sp)
 800962c:	d8c00215 	stw	r3,8(sp)
 8009630:	d9000315 	stw	r4,12(sp)
 8009634:	ddc00415 	stw	r23,16(sp)
 8009638:	80099e80 	call	80099e8 <__clzsi2>
 800963c:	12400744 	addi	r9,r2,29
 8009640:	48000b16 	blt	r9,zero,8009670 <__floatunsidf+0xc4>
 8009644:	483fe726 	beq	r9,zero,80095e4 <__floatunsidf+0x38>
 8009648:	10bfff44 	addi	r2,r2,-3
 800964c:	10002e16 	blt	r2,zero,8009708 <__floatunsidf+0x15c>
 8009650:	b0a2983a 	sll	r17,r22,r2
 8009654:	0021883a 	mov	r16,zero
 8009658:	d8800217 	ldw	r2,8(sp)
 800965c:	dc400415 	stw	r17,16(sp)
 8009660:	dc000315 	stw	r16,12(sp)
 8009664:	1245c83a 	sub	r2,r2,r9
 8009668:	d8800215 	stw	r2,8(sp)
 800966c:	003fdd06 	br	80095e4 <__floatunsidf+0x38>
 8009670:	0255c83a 	sub	r10,zero,r9
 8009674:	51bff804 	addi	r6,r10,-32
 8009678:	30001b16 	blt	r6,zero,80096e8 <__floatunsidf+0x13c>
 800967c:	b9a8d83a 	srl	r20,r23,r6
 8009680:	002b883a 	mov	r21,zero
 8009684:	000f883a 	mov	r7,zero
 8009688:	01000044 	movi	r4,1
 800968c:	0011883a 	mov	r8,zero
 8009690:	30002516 	blt	r6,zero,8009728 <__floatunsidf+0x17c>
 8009694:	21a6983a 	sll	r19,r4,r6
 8009698:	0025883a 	mov	r18,zero
 800969c:	00bfffc4 	movi	r2,-1
 80096a0:	9089883a 	add	r4,r18,r2
 80096a4:	988b883a 	add	r5,r19,r2
 80096a8:	248d803a 	cmpltu	r6,r4,r18
 80096ac:	314b883a 	add	r5,r6,r5
 80096b0:	b104703a 	and	r2,r22,r4
 80096b4:	b946703a 	and	r3,r23,r5
 80096b8:	10c4b03a 	or	r2,r2,r3
 80096bc:	10000226 	beq	r2,zero,80096c8 <__floatunsidf+0x11c>
 80096c0:	01c00044 	movi	r7,1
 80096c4:	0011883a 	mov	r8,zero
 80096c8:	d9000217 	ldw	r4,8(sp)
 80096cc:	a1c4b03a 	or	r2,r20,r7
 80096d0:	aa06b03a 	or	r3,r21,r8
 80096d4:	2249c83a 	sub	r4,r4,r9
 80096d8:	d8c00415 	stw	r3,16(sp)
 80096dc:	d9000215 	stw	r4,8(sp)
 80096e0:	d8800315 	stw	r2,12(sp)
 80096e4:	003fbf06 	br	80095e4 <__floatunsidf+0x38>
 80096e8:	bdc7883a 	add	r3,r23,r23
 80096ec:	008007c4 	movi	r2,31
 80096f0:	1285c83a 	sub	r2,r2,r10
 80096f4:	1886983a 	sll	r3,r3,r2
 80096f8:	b2a8d83a 	srl	r20,r22,r10
 80096fc:	baaad83a 	srl	r21,r23,r10
 8009700:	1d28b03a 	or	r20,r3,r20
 8009704:	003fdf06 	br	8009684 <__floatunsidf+0xd8>
 8009708:	b006d07a 	srli	r3,r22,1
 800970c:	008007c4 	movi	r2,31
 8009710:	1245c83a 	sub	r2,r2,r9
 8009714:	1886d83a 	srl	r3,r3,r2
 8009718:	ba62983a 	sll	r17,r23,r9
 800971c:	b260983a 	sll	r16,r22,r9
 8009720:	1c62b03a 	or	r17,r3,r17
 8009724:	003fcc06 	br	8009658 <__floatunsidf+0xac>
 8009728:	2006d07a 	srli	r3,r4,1
 800972c:	008007c4 	movi	r2,31
 8009730:	1285c83a 	sub	r2,r2,r10
 8009734:	18a6d83a 	srl	r19,r3,r2
 8009738:	22a4983a 	sll	r18,r4,r10
 800973c:	003fd706 	br	800969c <__floatunsidf+0xf0>

08009740 <udivmodsi4>:
 8009740:	29001b2e 	bgeu	r5,r4,80097b0 <udivmodsi4+0x70>
 8009744:	28001a16 	blt	r5,zero,80097b0 <udivmodsi4+0x70>
 8009748:	00800044 	movi	r2,1
 800974c:	0007883a 	mov	r3,zero
 8009750:	01c007c4 	movi	r7,31
 8009754:	00000306 	br	8009764 <udivmodsi4+0x24>
 8009758:	19c01326 	beq	r3,r7,80097a8 <udivmodsi4+0x68>
 800975c:	18c00044 	addi	r3,r3,1
 8009760:	28000416 	blt	r5,zero,8009774 <udivmodsi4+0x34>
 8009764:	294b883a 	add	r5,r5,r5
 8009768:	1085883a 	add	r2,r2,r2
 800976c:	293ffa36 	bltu	r5,r4,8009758 <udivmodsi4+0x18>
 8009770:	10000d26 	beq	r2,zero,80097a8 <udivmodsi4+0x68>
 8009774:	0007883a 	mov	r3,zero
 8009778:	21400236 	bltu	r4,r5,8009784 <udivmodsi4+0x44>
 800977c:	2149c83a 	sub	r4,r4,r5
 8009780:	1886b03a 	or	r3,r3,r2
 8009784:	1004d07a 	srli	r2,r2,1
 8009788:	280ad07a 	srli	r5,r5,1
 800978c:	103ffa1e 	bne	r2,zero,8009778 <udivmodsi4+0x38>
 8009790:	30000226 	beq	r6,zero,800979c <udivmodsi4+0x5c>
 8009794:	2005883a 	mov	r2,r4
 8009798:	f800283a 	ret
 800979c:	1809883a 	mov	r4,r3
 80097a0:	2005883a 	mov	r2,r4
 80097a4:	f800283a 	ret
 80097a8:	0007883a 	mov	r3,zero
 80097ac:	003ff806 	br	8009790 <udivmodsi4+0x50>
 80097b0:	00800044 	movi	r2,1
 80097b4:	0007883a 	mov	r3,zero
 80097b8:	003fef06 	br	8009778 <udivmodsi4+0x38>

080097bc <__divsi3>:
 80097bc:	defffe04 	addi	sp,sp,-8
 80097c0:	dc000015 	stw	r16,0(sp)
 80097c4:	dfc00115 	stw	ra,4(sp)
 80097c8:	0021883a 	mov	r16,zero
 80097cc:	20000c16 	blt	r4,zero,8009800 <__divsi3+0x44>
 80097d0:	000d883a 	mov	r6,zero
 80097d4:	28000e16 	blt	r5,zero,8009810 <__divsi3+0x54>
 80097d8:	80097400 	call	8009740 <udivmodsi4>
 80097dc:	1007883a 	mov	r3,r2
 80097e0:	8005003a 	cmpeq	r2,r16,zero
 80097e4:	1000011e 	bne	r2,zero,80097ec <__divsi3+0x30>
 80097e8:	00c7c83a 	sub	r3,zero,r3
 80097ec:	1805883a 	mov	r2,r3
 80097f0:	dfc00117 	ldw	ra,4(sp)
 80097f4:	dc000017 	ldw	r16,0(sp)
 80097f8:	dec00204 	addi	sp,sp,8
 80097fc:	f800283a 	ret
 8009800:	0109c83a 	sub	r4,zero,r4
 8009804:	04000044 	movi	r16,1
 8009808:	000d883a 	mov	r6,zero
 800980c:	283ff20e 	bge	r5,zero,80097d8 <__divsi3+0x1c>
 8009810:	014bc83a 	sub	r5,zero,r5
 8009814:	8021003a 	cmpeq	r16,r16,zero
 8009818:	003fef06 	br	80097d8 <__divsi3+0x1c>

0800981c <__modsi3>:
 800981c:	deffff04 	addi	sp,sp,-4
 8009820:	dfc00015 	stw	ra,0(sp)
 8009824:	01800044 	movi	r6,1
 8009828:	2807883a 	mov	r3,r5
 800982c:	20000416 	blt	r4,zero,8009840 <__modsi3+0x24>
 8009830:	28000c16 	blt	r5,zero,8009864 <__modsi3+0x48>
 8009834:	dfc00017 	ldw	ra,0(sp)
 8009838:	dec00104 	addi	sp,sp,4
 800983c:	80097401 	jmpi	8009740 <udivmodsi4>
 8009840:	0109c83a 	sub	r4,zero,r4
 8009844:	28000b16 	blt	r5,zero,8009874 <__modsi3+0x58>
 8009848:	180b883a 	mov	r5,r3
 800984c:	01800044 	movi	r6,1
 8009850:	80097400 	call	8009740 <udivmodsi4>
 8009854:	0085c83a 	sub	r2,zero,r2
 8009858:	dfc00017 	ldw	ra,0(sp)
 800985c:	dec00104 	addi	sp,sp,4
 8009860:	f800283a 	ret
 8009864:	014bc83a 	sub	r5,zero,r5
 8009868:	dfc00017 	ldw	ra,0(sp)
 800986c:	dec00104 	addi	sp,sp,4
 8009870:	80097401 	jmpi	8009740 <udivmodsi4>
 8009874:	0147c83a 	sub	r3,zero,r5
 8009878:	003ff306 	br	8009848 <__modsi3+0x2c>

0800987c <__udivsi3>:
 800987c:	000d883a 	mov	r6,zero
 8009880:	80097401 	jmpi	8009740 <udivmodsi4>

08009884 <__umodsi3>:
 8009884:	01800044 	movi	r6,1
 8009888:	80097401 	jmpi	8009740 <udivmodsi4>

0800988c <__mulsi3>:
 800988c:	20000a26 	beq	r4,zero,80098b8 <__mulsi3+0x2c>
 8009890:	0007883a 	mov	r3,zero
 8009894:	2080004c 	andi	r2,r4,1
 8009898:	1005003a 	cmpeq	r2,r2,zero
 800989c:	2008d07a 	srli	r4,r4,1
 80098a0:	1000011e 	bne	r2,zero,80098a8 <__mulsi3+0x1c>
 80098a4:	1947883a 	add	r3,r3,r5
 80098a8:	294b883a 	add	r5,r5,r5
 80098ac:	203ff91e 	bne	r4,zero,8009894 <__mulsi3+0x8>
 80098b0:	1805883a 	mov	r2,r3
 80098b4:	f800283a 	ret
 80098b8:	0007883a 	mov	r3,zero
 80098bc:	1805883a 	mov	r2,r3
 80098c0:	f800283a 	ret

080098c4 <__muldi3>:
 80098c4:	defff204 	addi	sp,sp,-56
 80098c8:	df000c15 	stw	fp,48(sp)
 80098cc:	3038d43a 	srli	fp,r6,16
 80098d0:	dd000815 	stw	r20,32(sp)
 80098d4:	dc400515 	stw	r17,20(sp)
 80098d8:	2028d43a 	srli	r20,r4,16
 80098dc:	247fffcc 	andi	r17,r4,65535
 80098e0:	dc000415 	stw	r16,16(sp)
 80098e4:	343fffcc 	andi	r16,r6,65535
 80098e8:	dcc00715 	stw	r19,28(sp)
 80098ec:	d9000015 	stw	r4,0(sp)
 80098f0:	2827883a 	mov	r19,r5
 80098f4:	8809883a 	mov	r4,r17
 80098f8:	d9400115 	stw	r5,4(sp)
 80098fc:	800b883a 	mov	r5,r16
 8009900:	d9800215 	stw	r6,8(sp)
 8009904:	dfc00d15 	stw	ra,52(sp)
 8009908:	d9c00315 	stw	r7,12(sp)
 800990c:	dd800a15 	stw	r22,40(sp)
 8009910:	dd400915 	stw	r21,36(sp)
 8009914:	302d883a 	mov	r22,r6
 8009918:	ddc00b15 	stw	r23,44(sp)
 800991c:	dc800615 	stw	r18,24(sp)
 8009920:	800988c0 	call	800988c <__mulsi3>
 8009924:	8809883a 	mov	r4,r17
 8009928:	e00b883a 	mov	r5,fp
 800992c:	102b883a 	mov	r21,r2
 8009930:	800988c0 	call	800988c <__mulsi3>
 8009934:	800b883a 	mov	r5,r16
 8009938:	a009883a 	mov	r4,r20
 800993c:	1023883a 	mov	r17,r2
 8009940:	800988c0 	call	800988c <__mulsi3>
 8009944:	a009883a 	mov	r4,r20
 8009948:	e00b883a 	mov	r5,fp
 800994c:	1021883a 	mov	r16,r2
 8009950:	800988c0 	call	800988c <__mulsi3>
 8009954:	a8ffffcc 	andi	r3,r21,65535
 8009958:	a82ad43a 	srli	r21,r21,16
 800995c:	8c23883a 	add	r17,r17,r16
 8009960:	1011883a 	mov	r8,r2
 8009964:	ac6b883a 	add	r21,r21,r17
 8009968:	a804943a 	slli	r2,r21,16
 800996c:	b009883a 	mov	r4,r22
 8009970:	980b883a 	mov	r5,r19
 8009974:	10c7883a 	add	r3,r2,r3
 8009978:	a812d43a 	srli	r9,r21,16
 800997c:	180d883a 	mov	r6,r3
 8009980:	ac00022e 	bgeu	r21,r16,800998c <__muldi3+0xc8>
 8009984:	00800074 	movhi	r2,1
 8009988:	4091883a 	add	r8,r8,r2
 800998c:	4267883a 	add	r19,r8,r9
 8009990:	302d883a 	mov	r22,r6
 8009994:	800988c0 	call	800988c <__mulsi3>
 8009998:	d9400317 	ldw	r5,12(sp)
 800999c:	d9000017 	ldw	r4,0(sp)
 80099a0:	1023883a 	mov	r17,r2
 80099a4:	800988c0 	call	800988c <__mulsi3>
 80099a8:	14cb883a 	add	r5,r2,r19
 80099ac:	894b883a 	add	r5,r17,r5
 80099b0:	b005883a 	mov	r2,r22
 80099b4:	2807883a 	mov	r3,r5
 80099b8:	dfc00d17 	ldw	ra,52(sp)
 80099bc:	df000c17 	ldw	fp,48(sp)
 80099c0:	ddc00b17 	ldw	r23,44(sp)
 80099c4:	dd800a17 	ldw	r22,40(sp)
 80099c8:	dd400917 	ldw	r21,36(sp)
 80099cc:	dd000817 	ldw	r20,32(sp)
 80099d0:	dcc00717 	ldw	r19,28(sp)
 80099d4:	dc800617 	ldw	r18,24(sp)
 80099d8:	dc400517 	ldw	r17,20(sp)
 80099dc:	dc000417 	ldw	r16,16(sp)
 80099e0:	dec00e04 	addi	sp,sp,56
 80099e4:	f800283a 	ret

080099e8 <__clzsi2>:
 80099e8:	00bfffd4 	movui	r2,65535
 80099ec:	11000e36 	bltu	r2,r4,8009a28 <__clzsi2+0x40>
 80099f0:	00803fc4 	movi	r2,255
 80099f4:	01400204 	movi	r5,8
 80099f8:	0007883a 	mov	r3,zero
 80099fc:	11001036 	bltu	r2,r4,8009a40 <__clzsi2+0x58>
 8009a00:	000b883a 	mov	r5,zero
 8009a04:	20c6d83a 	srl	r3,r4,r3
 8009a08:	00820074 	movhi	r2,2049
 8009a0c:	10840204 	addi	r2,r2,4104
 8009a10:	1887883a 	add	r3,r3,r2
 8009a14:	18800003 	ldbu	r2,0(r3)
 8009a18:	00c00804 	movi	r3,32
 8009a1c:	2885883a 	add	r2,r5,r2
 8009a20:	1885c83a 	sub	r2,r3,r2
 8009a24:	f800283a 	ret
 8009a28:	01400404 	movi	r5,16
 8009a2c:	00804034 	movhi	r2,256
 8009a30:	10bfffc4 	addi	r2,r2,-1
 8009a34:	2807883a 	mov	r3,r5
 8009a38:	113ff22e 	bgeu	r2,r4,8009a04 <__clzsi2+0x1c>
 8009a3c:	01400604 	movi	r5,24
 8009a40:	2807883a 	mov	r3,r5
 8009a44:	20c6d83a 	srl	r3,r4,r3
 8009a48:	00820074 	movhi	r2,2049
 8009a4c:	10840204 	addi	r2,r2,4104
 8009a50:	1887883a 	add	r3,r3,r2
 8009a54:	18800003 	ldbu	r2,0(r3)
 8009a58:	00c00804 	movi	r3,32
 8009a5c:	2885883a 	add	r2,r5,r2
 8009a60:	1885c83a 	sub	r2,r3,r2
 8009a64:	f800283a 	ret

08009a68 <__pack_d>:
 8009a68:	20c00017 	ldw	r3,0(r4)
 8009a6c:	defffd04 	addi	sp,sp,-12
 8009a70:	dc000015 	stw	r16,0(sp)
 8009a74:	dc800215 	stw	r18,8(sp)
 8009a78:	dc400115 	stw	r17,4(sp)
 8009a7c:	00800044 	movi	r2,1
 8009a80:	22000317 	ldw	r8,12(r4)
 8009a84:	001f883a 	mov	r15,zero
 8009a88:	22400417 	ldw	r9,16(r4)
 8009a8c:	24000117 	ldw	r16,4(r4)
 8009a90:	10c0552e 	bgeu	r2,r3,8009be8 <__pack_d+0x180>
 8009a94:	00800104 	movi	r2,4
 8009a98:	18804f26 	beq	r3,r2,8009bd8 <__pack_d+0x170>
 8009a9c:	00800084 	movi	r2,2
 8009aa0:	18800226 	beq	r3,r2,8009aac <__pack_d+0x44>
 8009aa4:	4244b03a 	or	r2,r8,r9
 8009aa8:	10001a1e 	bne	r2,zero,8009b14 <__pack_d+0xac>
 8009aac:	000d883a 	mov	r6,zero
 8009ab0:	000f883a 	mov	r7,zero
 8009ab4:	0011883a 	mov	r8,zero
 8009ab8:	00800434 	movhi	r2,16
 8009abc:	10bfffc4 	addi	r2,r2,-1
 8009ac0:	301d883a 	mov	r14,r6
 8009ac4:	3884703a 	and	r2,r7,r2
 8009ac8:	400a953a 	slli	r5,r8,20
 8009acc:	79bffc2c 	andhi	r6,r15,65520
 8009ad0:	308cb03a 	or	r6,r6,r2
 8009ad4:	00e00434 	movhi	r3,32784
 8009ad8:	18ffffc4 	addi	r3,r3,-1
 8009adc:	800497fa 	slli	r2,r16,31
 8009ae0:	30c6703a 	and	r3,r6,r3
 8009ae4:	1946b03a 	or	r3,r3,r5
 8009ae8:	01600034 	movhi	r5,32768
 8009aec:	297fffc4 	addi	r5,r5,-1
 8009af0:	194a703a 	and	r5,r3,r5
 8009af4:	288ab03a 	or	r5,r5,r2
 8009af8:	2807883a 	mov	r3,r5
 8009afc:	7005883a 	mov	r2,r14
 8009b00:	dc800217 	ldw	r18,8(sp)
 8009b04:	dc400117 	ldw	r17,4(sp)
 8009b08:	dc000017 	ldw	r16,0(sp)
 8009b0c:	dec00304 	addi	sp,sp,12
 8009b10:	f800283a 	ret
 8009b14:	21000217 	ldw	r4,8(r4)
 8009b18:	00bf0084 	movi	r2,-1022
 8009b1c:	20803f16 	blt	r4,r2,8009c1c <__pack_d+0x1b4>
 8009b20:	0080ffc4 	movi	r2,1023
 8009b24:	11002c16 	blt	r2,r4,8009bd8 <__pack_d+0x170>
 8009b28:	00803fc4 	movi	r2,255
 8009b2c:	408c703a 	and	r6,r8,r2
 8009b30:	00802004 	movi	r2,128
 8009b34:	0007883a 	mov	r3,zero
 8009b38:	000f883a 	mov	r7,zero
 8009b3c:	2280ffc4 	addi	r10,r4,1023
 8009b40:	30801e26 	beq	r6,r2,8009bbc <__pack_d+0x154>
 8009b44:	00801fc4 	movi	r2,127
 8009b48:	4089883a 	add	r4,r8,r2
 8009b4c:	220d803a 	cmpltu	r6,r4,r8
 8009b50:	324d883a 	add	r6,r6,r9
 8009b54:	2011883a 	mov	r8,r4
 8009b58:	3013883a 	mov	r9,r6
 8009b5c:	00880034 	movhi	r2,8192
 8009b60:	10bfffc4 	addi	r2,r2,-1
 8009b64:	12400d36 	bltu	r2,r9,8009b9c <__pack_d+0x134>
 8009b68:	4804963a 	slli	r2,r9,24
 8009b6c:	400cd23a 	srli	r6,r8,8
 8009b70:	480ed23a 	srli	r7,r9,8
 8009b74:	013fffc4 	movi	r4,-1
 8009b78:	118cb03a 	or	r6,r2,r6
 8009b7c:	01400434 	movhi	r5,16
 8009b80:	297fffc4 	addi	r5,r5,-1
 8009b84:	3104703a 	and	r2,r6,r4
 8009b88:	3946703a 	and	r3,r7,r5
 8009b8c:	5201ffcc 	andi	r8,r10,2047
 8009b90:	100d883a 	mov	r6,r2
 8009b94:	180f883a 	mov	r7,r3
 8009b98:	003fc706 	br	8009ab8 <__pack_d+0x50>
 8009b9c:	480897fa 	slli	r4,r9,31
 8009ba0:	4004d07a 	srli	r2,r8,1
 8009ba4:	4806d07a 	srli	r3,r9,1
 8009ba8:	52800044 	addi	r10,r10,1
 8009bac:	2084b03a 	or	r2,r4,r2
 8009bb0:	1011883a 	mov	r8,r2
 8009bb4:	1813883a 	mov	r9,r3
 8009bb8:	003feb06 	br	8009b68 <__pack_d+0x100>
 8009bbc:	383fe11e 	bne	r7,zero,8009b44 <__pack_d+0xdc>
 8009bc0:	01004004 	movi	r4,256
 8009bc4:	4104703a 	and	r2,r8,r4
 8009bc8:	10c4b03a 	or	r2,r2,r3
 8009bcc:	103fe326 	beq	r2,zero,8009b5c <__pack_d+0xf4>
 8009bd0:	3005883a 	mov	r2,r6
 8009bd4:	003fdc06 	br	8009b48 <__pack_d+0xe0>
 8009bd8:	000d883a 	mov	r6,zero
 8009bdc:	000f883a 	mov	r7,zero
 8009be0:	0201ffc4 	movi	r8,2047
 8009be4:	003fb406 	br	8009ab8 <__pack_d+0x50>
 8009be8:	0005883a 	mov	r2,zero
 8009bec:	00c00234 	movhi	r3,8
 8009bf0:	408cb03a 	or	r6,r8,r2
 8009bf4:	48ceb03a 	or	r7,r9,r3
 8009bf8:	013fffc4 	movi	r4,-1
 8009bfc:	01400434 	movhi	r5,16
 8009c00:	297fffc4 	addi	r5,r5,-1
 8009c04:	3104703a 	and	r2,r6,r4
 8009c08:	3946703a 	and	r3,r7,r5
 8009c0c:	100d883a 	mov	r6,r2
 8009c10:	180f883a 	mov	r7,r3
 8009c14:	0201ffc4 	movi	r8,2047
 8009c18:	003fa706 	br	8009ab8 <__pack_d+0x50>
 8009c1c:	1109c83a 	sub	r4,r2,r4
 8009c20:	00800e04 	movi	r2,56
 8009c24:	11004316 	blt	r2,r4,8009d34 <__pack_d+0x2cc>
 8009c28:	21fff804 	addi	r7,r4,-32
 8009c2c:	38004516 	blt	r7,zero,8009d44 <__pack_d+0x2dc>
 8009c30:	49d8d83a 	srl	r12,r9,r7
 8009c34:	001b883a 	mov	r13,zero
 8009c38:	0023883a 	mov	r17,zero
 8009c3c:	01400044 	movi	r5,1
 8009c40:	0025883a 	mov	r18,zero
 8009c44:	38004716 	blt	r7,zero,8009d64 <__pack_d+0x2fc>
 8009c48:	29d6983a 	sll	r11,r5,r7
 8009c4c:	0015883a 	mov	r10,zero
 8009c50:	00bfffc4 	movi	r2,-1
 8009c54:	5089883a 	add	r4,r10,r2
 8009c58:	588b883a 	add	r5,r11,r2
 8009c5c:	228d803a 	cmpltu	r6,r4,r10
 8009c60:	314b883a 	add	r5,r6,r5
 8009c64:	4104703a 	and	r2,r8,r4
 8009c68:	4946703a 	and	r3,r9,r5
 8009c6c:	10c4b03a 	or	r2,r2,r3
 8009c70:	10000226 	beq	r2,zero,8009c7c <__pack_d+0x214>
 8009c74:	04400044 	movi	r17,1
 8009c78:	0025883a 	mov	r18,zero
 8009c7c:	00803fc4 	movi	r2,255
 8009c80:	644eb03a 	or	r7,r12,r17
 8009c84:	3892703a 	and	r9,r7,r2
 8009c88:	00802004 	movi	r2,128
 8009c8c:	6c90b03a 	or	r8,r13,r18
 8009c90:	0015883a 	mov	r10,zero
 8009c94:	48801626 	beq	r9,r2,8009cf0 <__pack_d+0x288>
 8009c98:	01001fc4 	movi	r4,127
 8009c9c:	3905883a 	add	r2,r7,r4
 8009ca0:	11cd803a 	cmpltu	r6,r2,r7
 8009ca4:	320d883a 	add	r6,r6,r8
 8009ca8:	100f883a 	mov	r7,r2
 8009cac:	00840034 	movhi	r2,4096
 8009cb0:	10bfffc4 	addi	r2,r2,-1
 8009cb4:	3011883a 	mov	r8,r6
 8009cb8:	0007883a 	mov	r3,zero
 8009cbc:	11801b36 	bltu	r2,r6,8009d2c <__pack_d+0x2c4>
 8009cc0:	4004963a 	slli	r2,r8,24
 8009cc4:	3808d23a 	srli	r4,r7,8
 8009cc8:	400ad23a 	srli	r5,r8,8
 8009ccc:	1813883a 	mov	r9,r3
 8009cd0:	1108b03a 	or	r4,r2,r4
 8009cd4:	00bfffc4 	movi	r2,-1
 8009cd8:	00c00434 	movhi	r3,16
 8009cdc:	18ffffc4 	addi	r3,r3,-1
 8009ce0:	208c703a 	and	r6,r4,r2
 8009ce4:	28ce703a 	and	r7,r5,r3
 8009ce8:	4a01ffcc 	andi	r8,r9,2047
 8009cec:	003f7206 	br	8009ab8 <__pack_d+0x50>
 8009cf0:	503fe91e 	bne	r10,zero,8009c98 <__pack_d+0x230>
 8009cf4:	01004004 	movi	r4,256
 8009cf8:	3904703a 	and	r2,r7,r4
 8009cfc:	0007883a 	mov	r3,zero
 8009d00:	10c4b03a 	or	r2,r2,r3
 8009d04:	10000626 	beq	r2,zero,8009d20 <__pack_d+0x2b8>
 8009d08:	3a45883a 	add	r2,r7,r9
 8009d0c:	11cd803a 	cmpltu	r6,r2,r7
 8009d10:	320d883a 	add	r6,r6,r8
 8009d14:	100f883a 	mov	r7,r2
 8009d18:	3011883a 	mov	r8,r6
 8009d1c:	0007883a 	mov	r3,zero
 8009d20:	00840034 	movhi	r2,4096
 8009d24:	10bfffc4 	addi	r2,r2,-1
 8009d28:	123fe52e 	bgeu	r2,r8,8009cc0 <__pack_d+0x258>
 8009d2c:	00c00044 	movi	r3,1
 8009d30:	003fe306 	br	8009cc0 <__pack_d+0x258>
 8009d34:	0009883a 	mov	r4,zero
 8009d38:	0013883a 	mov	r9,zero
 8009d3c:	000b883a 	mov	r5,zero
 8009d40:	003fe406 	br	8009cd4 <__pack_d+0x26c>
 8009d44:	4a47883a 	add	r3,r9,r9
 8009d48:	008007c4 	movi	r2,31
 8009d4c:	1105c83a 	sub	r2,r2,r4
 8009d50:	1886983a 	sll	r3,r3,r2
 8009d54:	4118d83a 	srl	r12,r8,r4
 8009d58:	491ad83a 	srl	r13,r9,r4
 8009d5c:	1b18b03a 	or	r12,r3,r12
 8009d60:	003fb506 	br	8009c38 <__pack_d+0x1d0>
 8009d64:	2806d07a 	srli	r3,r5,1
 8009d68:	008007c4 	movi	r2,31
 8009d6c:	1105c83a 	sub	r2,r2,r4
 8009d70:	1896d83a 	srl	r11,r3,r2
 8009d74:	2914983a 	sll	r10,r5,r4
 8009d78:	003fb506 	br	8009c50 <__pack_d+0x1e8>

08009d7c <__unpack_d>:
 8009d7c:	20c00117 	ldw	r3,4(r4)
 8009d80:	22400017 	ldw	r9,0(r4)
 8009d84:	00800434 	movhi	r2,16
 8009d88:	10bfffc4 	addi	r2,r2,-1
 8009d8c:	1808d53a 	srli	r4,r3,20
 8009d90:	180cd7fa 	srli	r6,r3,31
 8009d94:	1894703a 	and	r10,r3,r2
 8009d98:	2201ffcc 	andi	r8,r4,2047
 8009d9c:	281b883a 	mov	r13,r5
 8009da0:	4817883a 	mov	r11,r9
 8009da4:	29800115 	stw	r6,4(r5)
 8009da8:	5019883a 	mov	r12,r10
 8009dac:	40001e1e 	bne	r8,zero,8009e28 <__unpack_d+0xac>
 8009db0:	4a84b03a 	or	r2,r9,r10
 8009db4:	10001926 	beq	r2,zero,8009e1c <__unpack_d+0xa0>
 8009db8:	4804d63a 	srli	r2,r9,24
 8009dbc:	500c923a 	slli	r6,r10,8
 8009dc0:	013f0084 	movi	r4,-1022
 8009dc4:	00c40034 	movhi	r3,4096
 8009dc8:	18ffffc4 	addi	r3,r3,-1
 8009dcc:	118cb03a 	or	r6,r2,r6
 8009dd0:	008000c4 	movi	r2,3
 8009dd4:	480a923a 	slli	r5,r9,8
 8009dd8:	68800015 	stw	r2,0(r13)
 8009ddc:	69000215 	stw	r4,8(r13)
 8009de0:	19800b36 	bltu	r3,r6,8009e10 <__unpack_d+0x94>
 8009de4:	200f883a 	mov	r7,r4
 8009de8:	1811883a 	mov	r8,r3
 8009dec:	2945883a 	add	r2,r5,r5
 8009df0:	1149803a 	cmpltu	r4,r2,r5
 8009df4:	3187883a 	add	r3,r6,r6
 8009df8:	20c9883a 	add	r4,r4,r3
 8009dfc:	100b883a 	mov	r5,r2
 8009e00:	200d883a 	mov	r6,r4
 8009e04:	39ffffc4 	addi	r7,r7,-1
 8009e08:	413ff82e 	bgeu	r8,r4,8009dec <__unpack_d+0x70>
 8009e0c:	69c00215 	stw	r7,8(r13)
 8009e10:	69800415 	stw	r6,16(r13)
 8009e14:	69400315 	stw	r5,12(r13)
 8009e18:	f800283a 	ret
 8009e1c:	00800084 	movi	r2,2
 8009e20:	28800015 	stw	r2,0(r5)
 8009e24:	f800283a 	ret
 8009e28:	0081ffc4 	movi	r2,2047
 8009e2c:	40800f26 	beq	r8,r2,8009e6c <__unpack_d+0xf0>
 8009e30:	480cd63a 	srli	r6,r9,24
 8009e34:	5006923a 	slli	r3,r10,8
 8009e38:	4804923a 	slli	r2,r9,8
 8009e3c:	0009883a 	mov	r4,zero
 8009e40:	30c6b03a 	or	r3,r6,r3
 8009e44:	01440034 	movhi	r5,4096
 8009e48:	110cb03a 	or	r6,r2,r4
 8009e4c:	423f0044 	addi	r8,r8,-1023
 8009e50:	194eb03a 	or	r7,r3,r5
 8009e54:	008000c4 	movi	r2,3
 8009e58:	69c00415 	stw	r7,16(r13)
 8009e5c:	6a000215 	stw	r8,8(r13)
 8009e60:	68800015 	stw	r2,0(r13)
 8009e64:	69800315 	stw	r6,12(r13)
 8009e68:	f800283a 	ret
 8009e6c:	4a84b03a 	or	r2,r9,r10
 8009e70:	1000031e 	bne	r2,zero,8009e80 <__unpack_d+0x104>
 8009e74:	00800104 	movi	r2,4
 8009e78:	28800015 	stw	r2,0(r5)
 8009e7c:	f800283a 	ret
 8009e80:	0009883a 	mov	r4,zero
 8009e84:	01400234 	movhi	r5,8
 8009e88:	4904703a 	and	r2,r9,r4
 8009e8c:	5146703a 	and	r3,r10,r5
 8009e90:	10c4b03a 	or	r2,r2,r3
 8009e94:	10000526 	beq	r2,zero,8009eac <__unpack_d+0x130>
 8009e98:	00800044 	movi	r2,1
 8009e9c:	68800015 	stw	r2,0(r13)
 8009ea0:	6b000415 	stw	r12,16(r13)
 8009ea4:	6ac00315 	stw	r11,12(r13)
 8009ea8:	f800283a 	ret
 8009eac:	68000015 	stw	zero,0(r13)
 8009eb0:	003ffb06 	br	8009ea0 <__unpack_d+0x124>

08009eb4 <__fpcmp_parts_d>:
 8009eb4:	21800017 	ldw	r6,0(r4)
 8009eb8:	00c00044 	movi	r3,1
 8009ebc:	19800a2e 	bgeu	r3,r6,8009ee8 <__fpcmp_parts_d+0x34>
 8009ec0:	28800017 	ldw	r2,0(r5)
 8009ec4:	1880082e 	bgeu	r3,r2,8009ee8 <__fpcmp_parts_d+0x34>
 8009ec8:	00c00104 	movi	r3,4
 8009ecc:	30c02626 	beq	r6,r3,8009f68 <__fpcmp_parts_d+0xb4>
 8009ed0:	10c02226 	beq	r2,r3,8009f5c <__fpcmp_parts_d+0xa8>
 8009ed4:	00c00084 	movi	r3,2
 8009ed8:	30c00526 	beq	r6,r3,8009ef0 <__fpcmp_parts_d+0x3c>
 8009edc:	10c0071e 	bne	r2,r3,8009efc <__fpcmp_parts_d+0x48>
 8009ee0:	20800117 	ldw	r2,4(r4)
 8009ee4:	1000091e 	bne	r2,zero,8009f0c <__fpcmp_parts_d+0x58>
 8009ee8:	00800044 	movi	r2,1
 8009eec:	f800283a 	ret
 8009ef0:	10c01a1e 	bne	r2,r3,8009f5c <__fpcmp_parts_d+0xa8>
 8009ef4:	0005883a 	mov	r2,zero
 8009ef8:	f800283a 	ret
 8009efc:	22000117 	ldw	r8,4(r4)
 8009f00:	28800117 	ldw	r2,4(r5)
 8009f04:	40800326 	beq	r8,r2,8009f14 <__fpcmp_parts_d+0x60>
 8009f08:	403ff726 	beq	r8,zero,8009ee8 <__fpcmp_parts_d+0x34>
 8009f0c:	00bfffc4 	movi	r2,-1
 8009f10:	f800283a 	ret
 8009f14:	20c00217 	ldw	r3,8(r4)
 8009f18:	28800217 	ldw	r2,8(r5)
 8009f1c:	10fffa16 	blt	r2,r3,8009f08 <__fpcmp_parts_d+0x54>
 8009f20:	18800916 	blt	r3,r2,8009f48 <__fpcmp_parts_d+0x94>
 8009f24:	21c00417 	ldw	r7,16(r4)
 8009f28:	28c00417 	ldw	r3,16(r5)
 8009f2c:	21800317 	ldw	r6,12(r4)
 8009f30:	28800317 	ldw	r2,12(r5)
 8009f34:	19fff436 	bltu	r3,r7,8009f08 <__fpcmp_parts_d+0x54>
 8009f38:	38c00526 	beq	r7,r3,8009f50 <__fpcmp_parts_d+0x9c>
 8009f3c:	38c00236 	bltu	r7,r3,8009f48 <__fpcmp_parts_d+0x94>
 8009f40:	19ffec1e 	bne	r3,r7,8009ef4 <__fpcmp_parts_d+0x40>
 8009f44:	30bfeb2e 	bgeu	r6,r2,8009ef4 <__fpcmp_parts_d+0x40>
 8009f48:	403fe71e 	bne	r8,zero,8009ee8 <__fpcmp_parts_d+0x34>
 8009f4c:	003fef06 	br	8009f0c <__fpcmp_parts_d+0x58>
 8009f50:	11bffa2e 	bgeu	r2,r6,8009f3c <__fpcmp_parts_d+0x88>
 8009f54:	403fe426 	beq	r8,zero,8009ee8 <__fpcmp_parts_d+0x34>
 8009f58:	003fec06 	br	8009f0c <__fpcmp_parts_d+0x58>
 8009f5c:	28800117 	ldw	r2,4(r5)
 8009f60:	103fe11e 	bne	r2,zero,8009ee8 <__fpcmp_parts_d+0x34>
 8009f64:	003fe906 	br	8009f0c <__fpcmp_parts_d+0x58>
 8009f68:	11bfdd1e 	bne	r2,r6,8009ee0 <__fpcmp_parts_d+0x2c>
 8009f6c:	28c00117 	ldw	r3,4(r5)
 8009f70:	20800117 	ldw	r2,4(r4)
 8009f74:	1885c83a 	sub	r2,r3,r2
 8009f78:	f800283a 	ret

08009f7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8009f7c:	defff804 	addi	sp,sp,-32
 8009f80:	dfc00715 	stw	ra,28(sp)
 8009f84:	df000615 	stw	fp,24(sp)
 8009f88:	df000604 	addi	fp,sp,24
 8009f8c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8009f90:	e0bffc17 	ldw	r2,-16(fp)
 8009f94:	1004803a 	cmplt	r2,r2,zero
 8009f98:	1000091e 	bne	r2,zero,8009fc0 <close+0x44>
 8009f9c:	e13ffc17 	ldw	r4,-16(fp)
 8009fa0:	01400304 	movi	r5,12
 8009fa4:	800988c0 	call	800988c <__mulsi3>
 8009fa8:	1007883a 	mov	r3,r2
 8009fac:	00820074 	movhi	r2,2049
 8009fb0:	10866904 	addi	r2,r2,6564
 8009fb4:	1887883a 	add	r3,r3,r2
 8009fb8:	e0ffff15 	stw	r3,-4(fp)
 8009fbc:	00000106 	br	8009fc4 <close+0x48>
 8009fc0:	e03fff15 	stw	zero,-4(fp)
 8009fc4:	e0bfff17 	ldw	r2,-4(fp)
 8009fc8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 8009fcc:	e0bffb17 	ldw	r2,-20(fp)
 8009fd0:	1005003a 	cmpeq	r2,r2,zero
 8009fd4:	10001d1e 	bne	r2,zero,800a04c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8009fd8:	e0bffb17 	ldw	r2,-20(fp)
 8009fdc:	10800017 	ldw	r2,0(r2)
 8009fe0:	10800417 	ldw	r2,16(r2)
 8009fe4:	1005003a 	cmpeq	r2,r2,zero
 8009fe8:	1000071e 	bne	r2,zero,800a008 <close+0x8c>
 8009fec:	e0bffb17 	ldw	r2,-20(fp)
 8009ff0:	10800017 	ldw	r2,0(r2)
 8009ff4:	10800417 	ldw	r2,16(r2)
 8009ff8:	e13ffb17 	ldw	r4,-20(fp)
 8009ffc:	103ee83a 	callr	r2
 800a000:	e0bffe15 	stw	r2,-8(fp)
 800a004:	00000106 	br	800a00c <close+0x90>
 800a008:	e03ffe15 	stw	zero,-8(fp)
 800a00c:	e0bffe17 	ldw	r2,-8(fp)
 800a010:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800a014:	e13ffc17 	ldw	r4,-16(fp)
 800a018:	800a7d40 	call	800a7d4 <alt_release_fd>
    if (rval < 0)
 800a01c:	e0bffa17 	ldw	r2,-24(fp)
 800a020:	1004403a 	cmpge	r2,r2,zero
 800a024:	1000071e 	bne	r2,zero,800a044 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 800a028:	800a07c0 	call	800a07c <alt_get_errno>
 800a02c:	e0fffa17 	ldw	r3,-24(fp)
 800a030:	00c7c83a 	sub	r3,zero,r3
 800a034:	10c00015 	stw	r3,0(r2)
      return -1;
 800a038:	00bfffc4 	movi	r2,-1
 800a03c:	e0bffd15 	stw	r2,-12(fp)
 800a040:	00000806 	br	800a064 <close+0xe8>
    }
    return 0;
 800a044:	e03ffd15 	stw	zero,-12(fp)
 800a048:	00000606 	br	800a064 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800a04c:	800a07c0 	call	800a07c <alt_get_errno>
 800a050:	1007883a 	mov	r3,r2
 800a054:	00801444 	movi	r2,81
 800a058:	18800015 	stw	r2,0(r3)
    return -1;
 800a05c:	00bfffc4 	movi	r2,-1
 800a060:	e0bffd15 	stw	r2,-12(fp)
 800a064:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 800a068:	e037883a 	mov	sp,fp
 800a06c:	dfc00117 	ldw	ra,4(sp)
 800a070:	df000017 	ldw	fp,0(sp)
 800a074:	dec00204 	addi	sp,sp,8
 800a078:	f800283a 	ret

0800a07c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a07c:	defffd04 	addi	sp,sp,-12
 800a080:	dfc00215 	stw	ra,8(sp)
 800a084:	df000115 	stw	fp,4(sp)
 800a088:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800a08c:	00820074 	movhi	r2,2049
 800a090:	108af704 	addi	r2,r2,11228
 800a094:	10800017 	ldw	r2,0(r2)
 800a098:	1005003a 	cmpeq	r2,r2,zero
 800a09c:	1000061e 	bne	r2,zero,800a0b8 <alt_get_errno+0x3c>
 800a0a0:	00820074 	movhi	r2,2049
 800a0a4:	108af704 	addi	r2,r2,11228
 800a0a8:	10800017 	ldw	r2,0(r2)
 800a0ac:	103ee83a 	callr	r2
 800a0b0:	e0bfff15 	stw	r2,-4(fp)
 800a0b4:	00000306 	br	800a0c4 <alt_get_errno+0x48>
 800a0b8:	00820074 	movhi	r2,2049
 800a0bc:	1091a604 	addi	r2,r2,18072
 800a0c0:	e0bfff15 	stw	r2,-4(fp)
 800a0c4:	e0bfff17 	ldw	r2,-4(fp)
}
 800a0c8:	e037883a 	mov	sp,fp
 800a0cc:	dfc00117 	ldw	ra,4(sp)
 800a0d0:	df000017 	ldw	fp,0(sp)
 800a0d4:	dec00204 	addi	sp,sp,8
 800a0d8:	f800283a 	ret

0800a0dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800a0dc:	defffc04 	addi	sp,sp,-16
 800a0e0:	df000315 	stw	fp,12(sp)
 800a0e4:	df000304 	addi	fp,sp,12
 800a0e8:	e13ffd15 	stw	r4,-12(fp)
 800a0ec:	e17ffe15 	stw	r5,-8(fp)
 800a0f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800a0f4:	e0bfff17 	ldw	r2,-4(fp)
}
 800a0f8:	e037883a 	mov	sp,fp
 800a0fc:	df000017 	ldw	fp,0(sp)
 800a100:	dec00104 	addi	sp,sp,4
 800a104:	f800283a 	ret

0800a108 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800a108:	defff904 	addi	sp,sp,-28
 800a10c:	dfc00615 	stw	ra,24(sp)
 800a110:	df000515 	stw	fp,20(sp)
 800a114:	df000504 	addi	fp,sp,20
 800a118:	e13ffc15 	stw	r4,-16(fp)
 800a11c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a120:	e0bffc17 	ldw	r2,-16(fp)
 800a124:	1004803a 	cmplt	r2,r2,zero
 800a128:	1000091e 	bne	r2,zero,800a150 <fstat+0x48>
 800a12c:	e13ffc17 	ldw	r4,-16(fp)
 800a130:	01400304 	movi	r5,12
 800a134:	800988c0 	call	800988c <__mulsi3>
 800a138:	1007883a 	mov	r3,r2
 800a13c:	00820074 	movhi	r2,2049
 800a140:	10866904 	addi	r2,r2,6564
 800a144:	1887883a 	add	r3,r3,r2
 800a148:	e0ffff15 	stw	r3,-4(fp)
 800a14c:	00000106 	br	800a154 <fstat+0x4c>
 800a150:	e03fff15 	stw	zero,-4(fp)
 800a154:	e0bfff17 	ldw	r2,-4(fp)
 800a158:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800a15c:	e0bffb17 	ldw	r2,-20(fp)
 800a160:	1005003a 	cmpeq	r2,r2,zero
 800a164:	1000121e 	bne	r2,zero,800a1b0 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800a168:	e0bffb17 	ldw	r2,-20(fp)
 800a16c:	10800017 	ldw	r2,0(r2)
 800a170:	10800817 	ldw	r2,32(r2)
 800a174:	1005003a 	cmpeq	r2,r2,zero
 800a178:	1000081e 	bne	r2,zero,800a19c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 800a17c:	e0bffb17 	ldw	r2,-20(fp)
 800a180:	10800017 	ldw	r2,0(r2)
 800a184:	10800817 	ldw	r2,32(r2)
 800a188:	e13ffb17 	ldw	r4,-20(fp)
 800a18c:	e17ffd17 	ldw	r5,-12(fp)
 800a190:	103ee83a 	callr	r2
 800a194:	e0bffe15 	stw	r2,-8(fp)
 800a198:	00000b06 	br	800a1c8 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800a19c:	e0fffd17 	ldw	r3,-12(fp)
 800a1a0:	00880004 	movi	r2,8192
 800a1a4:	18800115 	stw	r2,4(r3)
      return 0;
 800a1a8:	e03ffe15 	stw	zero,-8(fp)
 800a1ac:	00000606 	br	800a1c8 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800a1b0:	800a1e00 	call	800a1e0 <alt_get_errno>
 800a1b4:	1007883a 	mov	r3,r2
 800a1b8:	00801444 	movi	r2,81
 800a1bc:	18800015 	stw	r2,0(r3)
    return -1;
 800a1c0:	00bfffc4 	movi	r2,-1
 800a1c4:	e0bffe15 	stw	r2,-8(fp)
 800a1c8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 800a1cc:	e037883a 	mov	sp,fp
 800a1d0:	dfc00117 	ldw	ra,4(sp)
 800a1d4:	df000017 	ldw	fp,0(sp)
 800a1d8:	dec00204 	addi	sp,sp,8
 800a1dc:	f800283a 	ret

0800a1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a1e0:	defffd04 	addi	sp,sp,-12
 800a1e4:	dfc00215 	stw	ra,8(sp)
 800a1e8:	df000115 	stw	fp,4(sp)
 800a1ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800a1f0:	00820074 	movhi	r2,2049
 800a1f4:	108af704 	addi	r2,r2,11228
 800a1f8:	10800017 	ldw	r2,0(r2)
 800a1fc:	1005003a 	cmpeq	r2,r2,zero
 800a200:	1000061e 	bne	r2,zero,800a21c <alt_get_errno+0x3c>
 800a204:	00820074 	movhi	r2,2049
 800a208:	108af704 	addi	r2,r2,11228
 800a20c:	10800017 	ldw	r2,0(r2)
 800a210:	103ee83a 	callr	r2
 800a214:	e0bfff15 	stw	r2,-4(fp)
 800a218:	00000306 	br	800a228 <alt_get_errno+0x48>
 800a21c:	00820074 	movhi	r2,2049
 800a220:	1091a604 	addi	r2,r2,18072
 800a224:	e0bfff15 	stw	r2,-4(fp)
 800a228:	e0bfff17 	ldw	r2,-4(fp)
}
 800a22c:	e037883a 	mov	sp,fp
 800a230:	dfc00117 	ldw	ra,4(sp)
 800a234:	df000017 	ldw	fp,0(sp)
 800a238:	dec00204 	addi	sp,sp,8
 800a23c:	f800283a 	ret

0800a240 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800a240:	deffeb04 	addi	sp,sp,-84
 800a244:	dfc01415 	stw	ra,80(sp)
 800a248:	df001315 	stw	fp,76(sp)
 800a24c:	df001304 	addi	fp,sp,76
 800a250:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a254:	e0bffd17 	ldw	r2,-12(fp)
 800a258:	1004803a 	cmplt	r2,r2,zero
 800a25c:	1000091e 	bne	r2,zero,800a284 <isatty+0x44>
 800a260:	e13ffd17 	ldw	r4,-12(fp)
 800a264:	01400304 	movi	r5,12
 800a268:	800988c0 	call	800988c <__mulsi3>
 800a26c:	1007883a 	mov	r3,r2
 800a270:	00820074 	movhi	r2,2049
 800a274:	10866904 	addi	r2,r2,6564
 800a278:	1887883a 	add	r3,r3,r2
 800a27c:	e0ffff15 	stw	r3,-4(fp)
 800a280:	00000106 	br	800a288 <isatty+0x48>
 800a284:	e03fff15 	stw	zero,-4(fp)
 800a288:	e0bfff17 	ldw	r2,-4(fp)
 800a28c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 800a290:	e0bfed17 	ldw	r2,-76(fp)
 800a294:	1005003a 	cmpeq	r2,r2,zero
 800a298:	10000f1e 	bne	r2,zero,800a2d8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800a29c:	e0bfed17 	ldw	r2,-76(fp)
 800a2a0:	10800017 	ldw	r2,0(r2)
 800a2a4:	10800817 	ldw	r2,32(r2)
 800a2a8:	1004c03a 	cmpne	r2,r2,zero
 800a2ac:	1000031e 	bne	r2,zero,800a2bc <isatty+0x7c>
    {
      return 1;
 800a2b0:	00800044 	movi	r2,1
 800a2b4:	e0bffe15 	stw	r2,-8(fp)
 800a2b8:	00000c06 	br	800a2ec <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800a2bc:	e17fee04 	addi	r5,fp,-72
 800a2c0:	e13ffd17 	ldw	r4,-12(fp)
 800a2c4:	800a1080 	call	800a108 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800a2c8:	e0bfef17 	ldw	r2,-68(fp)
 800a2cc:	10880020 	cmpeqi	r2,r2,8192
 800a2d0:	e0bffe15 	stw	r2,-8(fp)
 800a2d4:	00000506 	br	800a2ec <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800a2d8:	800a3040 	call	800a304 <alt_get_errno>
 800a2dc:	1007883a 	mov	r3,r2
 800a2e0:	00801444 	movi	r2,81
 800a2e4:	18800015 	stw	r2,0(r3)
    return 0;
 800a2e8:	e03ffe15 	stw	zero,-8(fp)
 800a2ec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 800a2f0:	e037883a 	mov	sp,fp
 800a2f4:	dfc00117 	ldw	ra,4(sp)
 800a2f8:	df000017 	ldw	fp,0(sp)
 800a2fc:	dec00204 	addi	sp,sp,8
 800a300:	f800283a 	ret

0800a304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a304:	defffd04 	addi	sp,sp,-12
 800a308:	dfc00215 	stw	ra,8(sp)
 800a30c:	df000115 	stw	fp,4(sp)
 800a310:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800a314:	00820074 	movhi	r2,2049
 800a318:	108af704 	addi	r2,r2,11228
 800a31c:	10800017 	ldw	r2,0(r2)
 800a320:	1005003a 	cmpeq	r2,r2,zero
 800a324:	1000061e 	bne	r2,zero,800a340 <alt_get_errno+0x3c>
 800a328:	00820074 	movhi	r2,2049
 800a32c:	108af704 	addi	r2,r2,11228
 800a330:	10800017 	ldw	r2,0(r2)
 800a334:	103ee83a 	callr	r2
 800a338:	e0bfff15 	stw	r2,-4(fp)
 800a33c:	00000306 	br	800a34c <alt_get_errno+0x48>
 800a340:	00820074 	movhi	r2,2049
 800a344:	1091a604 	addi	r2,r2,18072
 800a348:	e0bfff15 	stw	r2,-4(fp)
 800a34c:	e0bfff17 	ldw	r2,-4(fp)
}
 800a350:	e037883a 	mov	sp,fp
 800a354:	dfc00117 	ldw	ra,4(sp)
 800a358:	df000017 	ldw	fp,0(sp)
 800a35c:	dec00204 	addi	sp,sp,8
 800a360:	f800283a 	ret

0800a364 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800a364:	defffe04 	addi	sp,sp,-8
 800a368:	dfc00115 	stw	ra,4(sp)
 800a36c:	df000015 	stw	fp,0(sp)
 800a370:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800a374:	01020074 	movhi	r4,2049
 800a378:	210afc04 	addi	r4,r4,11248
 800a37c:	01420074 	movhi	r5,2049
 800a380:	29445a04 	addi	r5,r5,4456
 800a384:	01820074 	movhi	r6,2049
 800a388:	318afc04 	addi	r6,r6,11248
 800a38c:	800a3e40 	call	800a3e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800a390:	01020034 	movhi	r4,2048
 800a394:	21000804 	addi	r4,r4,32
 800a398:	01420034 	movhi	r5,2048
 800a39c:	29400804 	addi	r5,r5,32
 800a3a0:	01820034 	movhi	r6,2048
 800a3a4:	31806d04 	addi	r6,r6,436
 800a3a8:	800a3e40 	call	800a3e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800a3ac:	01020074 	movhi	r4,2049
 800a3b0:	21033e04 	addi	r4,r4,3320
 800a3b4:	01420074 	movhi	r5,2049
 800a3b8:	29433e04 	addi	r5,r5,3320
 800a3bc:	01820074 	movhi	r6,2049
 800a3c0:	31845a04 	addi	r6,r6,4456
 800a3c4:	800a3e40 	call	800a3e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800a3c8:	800fb900 	call	800fb90 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800a3cc:	800fe1c0 	call	800fe1c <alt_icache_flush_all>
}
 800a3d0:	e037883a 	mov	sp,fp
 800a3d4:	dfc00117 	ldw	ra,4(sp)
 800a3d8:	df000017 	ldw	fp,0(sp)
 800a3dc:	dec00204 	addi	sp,sp,8
 800a3e0:	f800283a 	ret

0800a3e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800a3e4:	defffc04 	addi	sp,sp,-16
 800a3e8:	df000315 	stw	fp,12(sp)
 800a3ec:	df000304 	addi	fp,sp,12
 800a3f0:	e13ffd15 	stw	r4,-12(fp)
 800a3f4:	e17ffe15 	stw	r5,-8(fp)
 800a3f8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800a3fc:	e0fffe17 	ldw	r3,-8(fp)
 800a400:	e0bffd17 	ldw	r2,-12(fp)
 800a404:	18800e26 	beq	r3,r2,800a440 <alt_load_section+0x5c>
  {
    while( to != end )
 800a408:	00000a06 	br	800a434 <alt_load_section+0x50>
    {
      *to++ = *from++;
 800a40c:	e0bffd17 	ldw	r2,-12(fp)
 800a410:	10c00017 	ldw	r3,0(r2)
 800a414:	e0bffe17 	ldw	r2,-8(fp)
 800a418:	10c00015 	stw	r3,0(r2)
 800a41c:	e0bffe17 	ldw	r2,-8(fp)
 800a420:	10800104 	addi	r2,r2,4
 800a424:	e0bffe15 	stw	r2,-8(fp)
 800a428:	e0bffd17 	ldw	r2,-12(fp)
 800a42c:	10800104 	addi	r2,r2,4
 800a430:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800a434:	e0fffe17 	ldw	r3,-8(fp)
 800a438:	e0bfff17 	ldw	r2,-4(fp)
 800a43c:	18bff31e 	bne	r3,r2,800a40c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800a440:	e037883a 	mov	sp,fp
 800a444:	df000017 	ldw	fp,0(sp)
 800a448:	dec00104 	addi	sp,sp,4
 800a44c:	f800283a 	ret

0800a450 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800a450:	defff804 	addi	sp,sp,-32
 800a454:	dfc00715 	stw	ra,28(sp)
 800a458:	df000615 	stw	fp,24(sp)
 800a45c:	df000604 	addi	fp,sp,24
 800a460:	e13ffc15 	stw	r4,-16(fp)
 800a464:	e17ffd15 	stw	r5,-12(fp)
 800a468:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800a46c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a470:	e0bffc17 	ldw	r2,-16(fp)
 800a474:	1004803a 	cmplt	r2,r2,zero
 800a478:	1000091e 	bne	r2,zero,800a4a0 <lseek+0x50>
 800a47c:	e13ffc17 	ldw	r4,-16(fp)
 800a480:	01400304 	movi	r5,12
 800a484:	800988c0 	call	800988c <__mulsi3>
 800a488:	1007883a 	mov	r3,r2
 800a48c:	00820074 	movhi	r2,2049
 800a490:	10866904 	addi	r2,r2,6564
 800a494:	1887883a 	add	r3,r3,r2
 800a498:	e0ffff15 	stw	r3,-4(fp)
 800a49c:	00000106 	br	800a4a4 <lseek+0x54>
 800a4a0:	e03fff15 	stw	zero,-4(fp)
 800a4a4:	e0bfff17 	ldw	r2,-4(fp)
 800a4a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 800a4ac:	e0bffb17 	ldw	r2,-20(fp)
 800a4b0:	1005003a 	cmpeq	r2,r2,zero
 800a4b4:	1000111e 	bne	r2,zero,800a4fc <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800a4b8:	e0bffb17 	ldw	r2,-20(fp)
 800a4bc:	10800017 	ldw	r2,0(r2)
 800a4c0:	10800717 	ldw	r2,28(r2)
 800a4c4:	1005003a 	cmpeq	r2,r2,zero
 800a4c8:	1000091e 	bne	r2,zero,800a4f0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800a4cc:	e0bffb17 	ldw	r2,-20(fp)
 800a4d0:	10800017 	ldw	r2,0(r2)
 800a4d4:	10800717 	ldw	r2,28(r2)
 800a4d8:	e13ffb17 	ldw	r4,-20(fp)
 800a4dc:	e17ffd17 	ldw	r5,-12(fp)
 800a4e0:	e1bffe17 	ldw	r6,-8(fp)
 800a4e4:	103ee83a 	callr	r2
 800a4e8:	e0bffa15 	stw	r2,-24(fp)
 800a4ec:	00000506 	br	800a504 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800a4f0:	00bfde84 	movi	r2,-134
 800a4f4:	e0bffa15 	stw	r2,-24(fp)
 800a4f8:	00000206 	br	800a504 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 800a4fc:	00bfebc4 	movi	r2,-81
 800a500:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 800a504:	e0bffa17 	ldw	r2,-24(fp)
 800a508:	1004403a 	cmpge	r2,r2,zero
 800a50c:	1000071e 	bne	r2,zero,800a52c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 800a510:	800a5440 	call	800a544 <alt_get_errno>
 800a514:	1007883a 	mov	r3,r2
 800a518:	e0bffa17 	ldw	r2,-24(fp)
 800a51c:	0085c83a 	sub	r2,zero,r2
 800a520:	18800015 	stw	r2,0(r3)
    rc = -1;
 800a524:	00bfffc4 	movi	r2,-1
 800a528:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 800a52c:	e0bffa17 	ldw	r2,-24(fp)
}
 800a530:	e037883a 	mov	sp,fp
 800a534:	dfc00117 	ldw	ra,4(sp)
 800a538:	df000017 	ldw	fp,0(sp)
 800a53c:	dec00204 	addi	sp,sp,8
 800a540:	f800283a 	ret

0800a544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a544:	defffd04 	addi	sp,sp,-12
 800a548:	dfc00215 	stw	ra,8(sp)
 800a54c:	df000115 	stw	fp,4(sp)
 800a550:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800a554:	00820074 	movhi	r2,2049
 800a558:	108af704 	addi	r2,r2,11228
 800a55c:	10800017 	ldw	r2,0(r2)
 800a560:	1005003a 	cmpeq	r2,r2,zero
 800a564:	1000061e 	bne	r2,zero,800a580 <alt_get_errno+0x3c>
 800a568:	00820074 	movhi	r2,2049
 800a56c:	108af704 	addi	r2,r2,11228
 800a570:	10800017 	ldw	r2,0(r2)
 800a574:	103ee83a 	callr	r2
 800a578:	e0bfff15 	stw	r2,-4(fp)
 800a57c:	00000306 	br	800a58c <alt_get_errno+0x48>
 800a580:	00820074 	movhi	r2,2049
 800a584:	1091a604 	addi	r2,r2,18072
 800a588:	e0bfff15 	stw	r2,-4(fp)
 800a58c:	e0bfff17 	ldw	r2,-4(fp)
}
 800a590:	e037883a 	mov	sp,fp
 800a594:	dfc00117 	ldw	ra,4(sp)
 800a598:	df000017 	ldw	fp,0(sp)
 800a59c:	dec00204 	addi	sp,sp,8
 800a5a0:	f800283a 	ret

0800a5a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800a5a4:	defffd04 	addi	sp,sp,-12
 800a5a8:	dfc00215 	stw	ra,8(sp)
 800a5ac:	df000115 	stw	fp,4(sp)
 800a5b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800a5b4:	0009883a 	mov	r4,zero
 800a5b8:	800aa8c0 	call	800aa8c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800a5bc:	800aac00 	call	800aac0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800a5c0:	01020074 	movhi	r4,2049
 800a5c4:	21044504 	addi	r4,r4,4372
 800a5c8:	01420074 	movhi	r5,2049
 800a5cc:	29444504 	addi	r5,r5,4372
 800a5d0:	01820074 	movhi	r6,2049
 800a5d4:	31844504 	addi	r6,r6,4372
 800a5d8:	80101dc0 	call	80101dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800a5dc:	800fcc00 	call	800fcc0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800a5e0:	01020074 	movhi	r4,2049
 800a5e4:	213f4904 	addi	r4,r4,-732
 800a5e8:	80108ec0 	call	80108ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800a5ec:	d126be17 	ldw	r4,-25864(gp)
 800a5f0:	d166bf17 	ldw	r5,-25860(gp)
 800a5f4:	d1a6c017 	ldw	r6,-25856(gp)
 800a5f8:	80001f00 	call	80001f0 <main>
 800a5fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800a600:	01000044 	movi	r4,1
 800a604:	8009f7c0 	call	8009f7c <close>
  exit (result);
 800a608:	e13fff17 	ldw	r4,-4(fp)
 800a60c:	80109000 	call	8010900 <exit>

0800a610 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800a610:	defffe04 	addi	sp,sp,-8
 800a614:	df000115 	stw	fp,4(sp)
 800a618:	df000104 	addi	fp,sp,4
 800a61c:	e13fff15 	stw	r4,-4(fp)
}
 800a620:	e037883a 	mov	sp,fp
 800a624:	df000017 	ldw	fp,0(sp)
 800a628:	dec00104 	addi	sp,sp,4
 800a62c:	f800283a 	ret

0800a630 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800a630:	defffe04 	addi	sp,sp,-8
 800a634:	df000115 	stw	fp,4(sp)
 800a638:	df000104 	addi	fp,sp,4
 800a63c:	e13fff15 	stw	r4,-4(fp)
}
 800a640:	e037883a 	mov	sp,fp
 800a644:	df000017 	ldw	fp,0(sp)
 800a648:	dec00104 	addi	sp,sp,4
 800a64c:	f800283a 	ret

0800a650 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800a650:	defff704 	addi	sp,sp,-36
 800a654:	dfc00815 	stw	ra,32(sp)
 800a658:	df000715 	stw	fp,28(sp)
 800a65c:	df000704 	addi	fp,sp,28
 800a660:	e13ffb15 	stw	r4,-20(fp)
 800a664:	e17ffc15 	stw	r5,-16(fp)
 800a668:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a66c:	e0bffb17 	ldw	r2,-20(fp)
 800a670:	1004803a 	cmplt	r2,r2,zero
 800a674:	1000091e 	bne	r2,zero,800a69c <read+0x4c>
 800a678:	e13ffb17 	ldw	r4,-20(fp)
 800a67c:	01400304 	movi	r5,12
 800a680:	800988c0 	call	800988c <__mulsi3>
 800a684:	1007883a 	mov	r3,r2
 800a688:	00820074 	movhi	r2,2049
 800a68c:	10866904 	addi	r2,r2,6564
 800a690:	1887883a 	add	r3,r3,r2
 800a694:	e0ffff15 	stw	r3,-4(fp)
 800a698:	00000106 	br	800a6a0 <read+0x50>
 800a69c:	e03fff15 	stw	zero,-4(fp)
 800a6a0:	e0bfff17 	ldw	r2,-4(fp)
 800a6a4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 800a6a8:	e0bffa17 	ldw	r2,-24(fp)
 800a6ac:	1005003a 	cmpeq	r2,r2,zero
 800a6b0:	1000241e 	bne	r2,zero,800a744 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800a6b4:	e0bffa17 	ldw	r2,-24(fp)
 800a6b8:	10800217 	ldw	r2,8(r2)
 800a6bc:	108000cc 	andi	r2,r2,3
 800a6c0:	10800060 	cmpeqi	r2,r2,1
 800a6c4:	10001a1e 	bne	r2,zero,800a730 <read+0xe0>
 800a6c8:	e0bffa17 	ldw	r2,-24(fp)
 800a6cc:	10800017 	ldw	r2,0(r2)
 800a6d0:	10800517 	ldw	r2,20(r2)
 800a6d4:	1005003a 	cmpeq	r2,r2,zero
 800a6d8:	1000151e 	bne	r2,zero,800a730 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800a6dc:	e0bffa17 	ldw	r2,-24(fp)
 800a6e0:	10800017 	ldw	r2,0(r2)
 800a6e4:	10800517 	ldw	r2,20(r2)
 800a6e8:	e17ffc17 	ldw	r5,-16(fp)
 800a6ec:	e1bffd17 	ldw	r6,-12(fp)
 800a6f0:	e13ffa17 	ldw	r4,-24(fp)
 800a6f4:	103ee83a 	callr	r2
 800a6f8:	e0bff915 	stw	r2,-28(fp)
 800a6fc:	e0bff917 	ldw	r2,-28(fp)
 800a700:	1004403a 	cmpge	r2,r2,zero
 800a704:	1000071e 	bne	r2,zero,800a724 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 800a708:	800a7740 	call	800a774 <alt_get_errno>
 800a70c:	e0fff917 	ldw	r3,-28(fp)
 800a710:	00c7c83a 	sub	r3,zero,r3
 800a714:	10c00015 	stw	r3,0(r2)
          return -1;
 800a718:	00bfffc4 	movi	r2,-1
 800a71c:	e0bffe15 	stw	r2,-8(fp)
 800a720:	00000e06 	br	800a75c <read+0x10c>
        }
        return rval;
 800a724:	e0bff917 	ldw	r2,-28(fp)
 800a728:	e0bffe15 	stw	r2,-8(fp)
 800a72c:	00000b06 	br	800a75c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800a730:	800a7740 	call	800a774 <alt_get_errno>
 800a734:	1007883a 	mov	r3,r2
 800a738:	00800344 	movi	r2,13
 800a73c:	18800015 	stw	r2,0(r3)
 800a740:	00000406 	br	800a754 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800a744:	800a7740 	call	800a774 <alt_get_errno>
 800a748:	1007883a 	mov	r3,r2
 800a74c:	00801444 	movi	r2,81
 800a750:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800a754:	00bfffc4 	movi	r2,-1
 800a758:	e0bffe15 	stw	r2,-8(fp)
 800a75c:	e0bffe17 	ldw	r2,-8(fp)
}
 800a760:	e037883a 	mov	sp,fp
 800a764:	dfc00117 	ldw	ra,4(sp)
 800a768:	df000017 	ldw	fp,0(sp)
 800a76c:	dec00204 	addi	sp,sp,8
 800a770:	f800283a 	ret

0800a774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a774:	defffd04 	addi	sp,sp,-12
 800a778:	dfc00215 	stw	ra,8(sp)
 800a77c:	df000115 	stw	fp,4(sp)
 800a780:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800a784:	00820074 	movhi	r2,2049
 800a788:	108af704 	addi	r2,r2,11228
 800a78c:	10800017 	ldw	r2,0(r2)
 800a790:	1005003a 	cmpeq	r2,r2,zero
 800a794:	1000061e 	bne	r2,zero,800a7b0 <alt_get_errno+0x3c>
 800a798:	00820074 	movhi	r2,2049
 800a79c:	108af704 	addi	r2,r2,11228
 800a7a0:	10800017 	ldw	r2,0(r2)
 800a7a4:	103ee83a 	callr	r2
 800a7a8:	e0bfff15 	stw	r2,-4(fp)
 800a7ac:	00000306 	br	800a7bc <alt_get_errno+0x48>
 800a7b0:	00820074 	movhi	r2,2049
 800a7b4:	1091a604 	addi	r2,r2,18072
 800a7b8:	e0bfff15 	stw	r2,-4(fp)
 800a7bc:	e0bfff17 	ldw	r2,-4(fp)
}
 800a7c0:	e037883a 	mov	sp,fp
 800a7c4:	dfc00117 	ldw	ra,4(sp)
 800a7c8:	df000017 	ldw	fp,0(sp)
 800a7cc:	dec00204 	addi	sp,sp,8
 800a7d0:	f800283a 	ret

0800a7d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800a7d4:	defffc04 	addi	sp,sp,-16
 800a7d8:	dfc00315 	stw	ra,12(sp)
 800a7dc:	df000215 	stw	fp,8(sp)
 800a7e0:	dc000115 	stw	r16,4(sp)
 800a7e4:	df000104 	addi	fp,sp,4
 800a7e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800a7ec:	e0bfff17 	ldw	r2,-4(fp)
 800a7f0:	108000d0 	cmplti	r2,r2,3
 800a7f4:	10000f1e 	bne	r2,zero,800a834 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 800a7f8:	e13fff17 	ldw	r4,-4(fp)
 800a7fc:	04020074 	movhi	r16,2049
 800a800:	84066904 	addi	r16,r16,6564
 800a804:	01400304 	movi	r5,12
 800a808:	800988c0 	call	800988c <__mulsi3>
 800a80c:	1405883a 	add	r2,r2,r16
 800a810:	10800204 	addi	r2,r2,8
 800a814:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800a818:	e13fff17 	ldw	r4,-4(fp)
 800a81c:	04020074 	movhi	r16,2049
 800a820:	84066904 	addi	r16,r16,6564
 800a824:	01400304 	movi	r5,12
 800a828:	800988c0 	call	800988c <__mulsi3>
 800a82c:	1405883a 	add	r2,r2,r16
 800a830:	10000015 	stw	zero,0(r2)
  }
}
 800a834:	e037883a 	mov	sp,fp
 800a838:	dfc00217 	ldw	ra,8(sp)
 800a83c:	df000117 	ldw	fp,4(sp)
 800a840:	dc000017 	ldw	r16,0(sp)
 800a844:	dec00304 	addi	sp,sp,12
 800a848:	f800283a 	ret

0800a84c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800a84c:	defff804 	addi	sp,sp,-32
 800a850:	df000715 	stw	fp,28(sp)
 800a854:	df000704 	addi	fp,sp,28
 800a858:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800a85c:	0005303a 	rdctl	r2,status
 800a860:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800a864:	e0fffb17 	ldw	r3,-20(fp)
 800a868:	00bfff84 	movi	r2,-2
 800a86c:	1884703a 	and	r2,r3,r2
 800a870:	1001703a 	wrctl	status,r2
  
  return context;
 800a874:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800a878:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800a87c:	d0a00c17 	ldw	r2,-32720(gp)
 800a880:	10c000c4 	addi	r3,r2,3
 800a884:	00bfff04 	movi	r2,-4
 800a888:	1884703a 	and	r2,r3,r2
 800a88c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800a890:	d0e00c17 	ldw	r3,-32720(gp)
 800a894:	e0bffe17 	ldw	r2,-8(fp)
 800a898:	1887883a 	add	r3,r3,r2
 800a89c:	00840034 	movhi	r2,4096
 800a8a0:	10800004 	addi	r2,r2,0
 800a8a4:	10c0072e 	bgeu	r2,r3,800a8c4 <sbrk+0x78>
 800a8a8:	e0bffd17 	ldw	r2,-12(fp)
 800a8ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800a8b0:	e0bffa17 	ldw	r2,-24(fp)
 800a8b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800a8b8:	00bfffc4 	movi	r2,-1
 800a8bc:	e0bfff15 	stw	r2,-4(fp)
 800a8c0:	00000c06 	br	800a8f4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 800a8c4:	d0a00c17 	ldw	r2,-32720(gp)
 800a8c8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 800a8cc:	d0e00c17 	ldw	r3,-32720(gp)
 800a8d0:	e0bffe17 	ldw	r2,-8(fp)
 800a8d4:	1885883a 	add	r2,r3,r2
 800a8d8:	d0a00c15 	stw	r2,-32720(gp)
 800a8dc:	e0bffd17 	ldw	r2,-12(fp)
 800a8e0:	e0bff915 	stw	r2,-28(fp)
 800a8e4:	e0bff917 	ldw	r2,-28(fp)
 800a8e8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800a8ec:	e0bffc17 	ldw	r2,-16(fp)
 800a8f0:	e0bfff15 	stw	r2,-4(fp)
 800a8f4:	e0bfff17 	ldw	r2,-4(fp)
} 
 800a8f8:	e037883a 	mov	sp,fp
 800a8fc:	df000017 	ldw	fp,0(sp)
 800a900:	dec00104 	addi	sp,sp,4
 800a904:	f800283a 	ret

0800a908 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800a908:	defff704 	addi	sp,sp,-36
 800a90c:	dfc00815 	stw	ra,32(sp)
 800a910:	df000715 	stw	fp,28(sp)
 800a914:	df000704 	addi	fp,sp,28
 800a918:	e13ffb15 	stw	r4,-20(fp)
 800a91c:	e17ffc15 	stw	r5,-16(fp)
 800a920:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a924:	e0bffb17 	ldw	r2,-20(fp)
 800a928:	1004803a 	cmplt	r2,r2,zero
 800a92c:	1000091e 	bne	r2,zero,800a954 <write+0x4c>
 800a930:	e13ffb17 	ldw	r4,-20(fp)
 800a934:	01400304 	movi	r5,12
 800a938:	800988c0 	call	800988c <__mulsi3>
 800a93c:	1007883a 	mov	r3,r2
 800a940:	00820074 	movhi	r2,2049
 800a944:	10866904 	addi	r2,r2,6564
 800a948:	1887883a 	add	r3,r3,r2
 800a94c:	e0ffff15 	stw	r3,-4(fp)
 800a950:	00000106 	br	800a958 <write+0x50>
 800a954:	e03fff15 	stw	zero,-4(fp)
 800a958:	e0bfff17 	ldw	r2,-4(fp)
 800a95c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 800a960:	e0bffa17 	ldw	r2,-24(fp)
 800a964:	1005003a 	cmpeq	r2,r2,zero
 800a968:	1000241e 	bne	r2,zero,800a9fc <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800a96c:	e0bffa17 	ldw	r2,-24(fp)
 800a970:	10800217 	ldw	r2,8(r2)
 800a974:	108000cc 	andi	r2,r2,3
 800a978:	1005003a 	cmpeq	r2,r2,zero
 800a97c:	10001a1e 	bne	r2,zero,800a9e8 <write+0xe0>
 800a980:	e0bffa17 	ldw	r2,-24(fp)
 800a984:	10800017 	ldw	r2,0(r2)
 800a988:	10800617 	ldw	r2,24(r2)
 800a98c:	1005003a 	cmpeq	r2,r2,zero
 800a990:	1000151e 	bne	r2,zero,800a9e8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800a994:	e0bffa17 	ldw	r2,-24(fp)
 800a998:	10800017 	ldw	r2,0(r2)
 800a99c:	10800617 	ldw	r2,24(r2)
 800a9a0:	e17ffc17 	ldw	r5,-16(fp)
 800a9a4:	e1bffd17 	ldw	r6,-12(fp)
 800a9a8:	e13ffa17 	ldw	r4,-24(fp)
 800a9ac:	103ee83a 	callr	r2
 800a9b0:	e0bff915 	stw	r2,-28(fp)
 800a9b4:	e0bff917 	ldw	r2,-28(fp)
 800a9b8:	1004403a 	cmpge	r2,r2,zero
 800a9bc:	1000071e 	bne	r2,zero,800a9dc <write+0xd4>
      {
        ALT_ERRNO = -rval;
 800a9c0:	800aa2c0 	call	800aa2c <alt_get_errno>
 800a9c4:	e0fff917 	ldw	r3,-28(fp)
 800a9c8:	00c7c83a 	sub	r3,zero,r3
 800a9cc:	10c00015 	stw	r3,0(r2)
        return -1;
 800a9d0:	00bfffc4 	movi	r2,-1
 800a9d4:	e0bffe15 	stw	r2,-8(fp)
 800a9d8:	00000e06 	br	800aa14 <write+0x10c>
      }
      return rval;
 800a9dc:	e0bff917 	ldw	r2,-28(fp)
 800a9e0:	e0bffe15 	stw	r2,-8(fp)
 800a9e4:	00000b06 	br	800aa14 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800a9e8:	800aa2c0 	call	800aa2c <alt_get_errno>
 800a9ec:	1007883a 	mov	r3,r2
 800a9f0:	00800344 	movi	r2,13
 800a9f4:	18800015 	stw	r2,0(r3)
 800a9f8:	00000406 	br	800aa0c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800a9fc:	800aa2c0 	call	800aa2c <alt_get_errno>
 800aa00:	1007883a 	mov	r3,r2
 800aa04:	00801444 	movi	r2,81
 800aa08:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800aa0c:	00bfffc4 	movi	r2,-1
 800aa10:	e0bffe15 	stw	r2,-8(fp)
 800aa14:	e0bffe17 	ldw	r2,-8(fp)
}
 800aa18:	e037883a 	mov	sp,fp
 800aa1c:	dfc00117 	ldw	ra,4(sp)
 800aa20:	df000017 	ldw	fp,0(sp)
 800aa24:	dec00204 	addi	sp,sp,8
 800aa28:	f800283a 	ret

0800aa2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800aa2c:	defffd04 	addi	sp,sp,-12
 800aa30:	dfc00215 	stw	ra,8(sp)
 800aa34:	df000115 	stw	fp,4(sp)
 800aa38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800aa3c:	00820074 	movhi	r2,2049
 800aa40:	108af704 	addi	r2,r2,11228
 800aa44:	10800017 	ldw	r2,0(r2)
 800aa48:	1005003a 	cmpeq	r2,r2,zero
 800aa4c:	1000061e 	bne	r2,zero,800aa68 <alt_get_errno+0x3c>
 800aa50:	00820074 	movhi	r2,2049
 800aa54:	108af704 	addi	r2,r2,11228
 800aa58:	10800017 	ldw	r2,0(r2)
 800aa5c:	103ee83a 	callr	r2
 800aa60:	e0bfff15 	stw	r2,-4(fp)
 800aa64:	00000306 	br	800aa74 <alt_get_errno+0x48>
 800aa68:	00820074 	movhi	r2,2049
 800aa6c:	1091a604 	addi	r2,r2,18072
 800aa70:	e0bfff15 	stw	r2,-4(fp)
 800aa74:	e0bfff17 	ldw	r2,-4(fp)
}
 800aa78:	e037883a 	mov	sp,fp
 800aa7c:	dfc00117 	ldw	ra,4(sp)
 800aa80:	df000017 	ldw	fp,0(sp)
 800aa84:	dec00204 	addi	sp,sp,8
 800aa88:	f800283a 	ret

0800aa8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800aa8c:	defffd04 	addi	sp,sp,-12
 800aa90:	dfc00215 	stw	ra,8(sp)
 800aa94:	df000115 	stw	fp,4(sp)
 800aa98:	df000104 	addi	fp,sp,4
 800aa9c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 800aaa0:	80106dc0 	call	80106dc <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800aaa4:	00800044 	movi	r2,1
 800aaa8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800aaac:	e037883a 	mov	sp,fp
 800aab0:	dfc00117 	ldw	ra,4(sp)
 800aab4:	df000017 	ldw	fp,0(sp)
 800aab8:	dec00204 	addi	sp,sp,8
 800aabc:	f800283a 	ret

0800aac0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800aac0:	defffe04 	addi	sp,sp,-8
 800aac4:	dfc00115 	stw	ra,4(sp)
 800aac8:	df000015 	stw	fp,0(sp)
 800aacc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800aad0:	01020074 	movhi	r4,2049
 800aad4:	2106d304 	addi	r4,r4,6988
 800aad8:	000b883a 	mov	r5,zero
 800aadc:	000d883a 	mov	r6,zero
 800aae0:	800ac900 	call	800ac90 <altera_avalon_jtag_uart_init>
 800aae4:	01020074 	movhi	r4,2049
 800aae8:	2106c904 	addi	r4,r4,6948
 800aaec:	800ab100 	call	800ab10 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 800aaf0:	01020074 	movhi	r4,2049
 800aaf4:	210ae104 	addi	r4,r4,11140
 800aaf8:	800ab100 	call	800ab10 <alt_dev_reg>
}
 800aafc:	e037883a 	mov	sp,fp
 800ab00:	dfc00117 	ldw	ra,4(sp)
 800ab04:	df000017 	ldw	fp,0(sp)
 800ab08:	dec00204 	addi	sp,sp,8
 800ab0c:	f800283a 	ret

0800ab10 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800ab10:	defffd04 	addi	sp,sp,-12
 800ab14:	dfc00215 	stw	ra,8(sp)
 800ab18:	df000115 	stw	fp,4(sp)
 800ab1c:	df000104 	addi	fp,sp,4
 800ab20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800ab24:	e13fff17 	ldw	r4,-4(fp)
 800ab28:	01420074 	movhi	r5,2049
 800ab2c:	294af404 	addi	r5,r5,11216
 800ab30:	800fbac0 	call	800fbac <alt_dev_llist_insert>
}
 800ab34:	e037883a 	mov	sp,fp
 800ab38:	dfc00117 	ldw	ra,4(sp)
 800ab3c:	df000017 	ldw	fp,0(sp)
 800ab40:	dec00204 	addi	sp,sp,8
 800ab44:	f800283a 	ret

0800ab48 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800ab48:	defffa04 	addi	sp,sp,-24
 800ab4c:	dfc00515 	stw	ra,20(sp)
 800ab50:	df000415 	stw	fp,16(sp)
 800ab54:	df000404 	addi	fp,sp,16
 800ab58:	e13ffd15 	stw	r4,-12(fp)
 800ab5c:	e17ffe15 	stw	r5,-8(fp)
 800ab60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800ab64:	e0bffd17 	ldw	r2,-12(fp)
 800ab68:	10800017 	ldw	r2,0(r2)
 800ab6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800ab70:	e0bffc17 	ldw	r2,-16(fp)
 800ab74:	11000a04 	addi	r4,r2,40
 800ab78:	e0bffd17 	ldw	r2,-12(fp)
 800ab7c:	11c00217 	ldw	r7,8(r2)
 800ab80:	e17ffe17 	ldw	r5,-8(fp)
 800ab84:	e1bfff17 	ldw	r6,-4(fp)
 800ab88:	800b1900 	call	800b190 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800ab8c:	e037883a 	mov	sp,fp
 800ab90:	dfc00117 	ldw	ra,4(sp)
 800ab94:	df000017 	ldw	fp,0(sp)
 800ab98:	dec00204 	addi	sp,sp,8
 800ab9c:	f800283a 	ret

0800aba0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800aba0:	defffa04 	addi	sp,sp,-24
 800aba4:	dfc00515 	stw	ra,20(sp)
 800aba8:	df000415 	stw	fp,16(sp)
 800abac:	df000404 	addi	fp,sp,16
 800abb0:	e13ffd15 	stw	r4,-12(fp)
 800abb4:	e17ffe15 	stw	r5,-8(fp)
 800abb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800abbc:	e0bffd17 	ldw	r2,-12(fp)
 800abc0:	10800017 	ldw	r2,0(r2)
 800abc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800abc8:	e0bffc17 	ldw	r2,-16(fp)
 800abcc:	11000a04 	addi	r4,r2,40
 800abd0:	e0bffd17 	ldw	r2,-12(fp)
 800abd4:	11c00217 	ldw	r7,8(r2)
 800abd8:	e17ffe17 	ldw	r5,-8(fp)
 800abdc:	e1bfff17 	ldw	r6,-4(fp)
 800abe0:	800b3b40 	call	800b3b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800abe4:	e037883a 	mov	sp,fp
 800abe8:	dfc00117 	ldw	ra,4(sp)
 800abec:	df000017 	ldw	fp,0(sp)
 800abf0:	dec00204 	addi	sp,sp,8
 800abf4:	f800283a 	ret

0800abf8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800abf8:	defffc04 	addi	sp,sp,-16
 800abfc:	dfc00315 	stw	ra,12(sp)
 800ac00:	df000215 	stw	fp,8(sp)
 800ac04:	df000204 	addi	fp,sp,8
 800ac08:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800ac0c:	e0bfff17 	ldw	r2,-4(fp)
 800ac10:	10800017 	ldw	r2,0(r2)
 800ac14:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800ac18:	e0bffe17 	ldw	r2,-8(fp)
 800ac1c:	11000a04 	addi	r4,r2,40
 800ac20:	e0bfff17 	ldw	r2,-4(fp)
 800ac24:	11400217 	ldw	r5,8(r2)
 800ac28:	800b0280 	call	800b028 <altera_avalon_jtag_uart_close>
}
 800ac2c:	e037883a 	mov	sp,fp
 800ac30:	dfc00117 	ldw	ra,4(sp)
 800ac34:	df000017 	ldw	fp,0(sp)
 800ac38:	dec00204 	addi	sp,sp,8
 800ac3c:	f800283a 	ret

0800ac40 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800ac40:	defffa04 	addi	sp,sp,-24
 800ac44:	dfc00515 	stw	ra,20(sp)
 800ac48:	df000415 	stw	fp,16(sp)
 800ac4c:	df000404 	addi	fp,sp,16
 800ac50:	e13ffd15 	stw	r4,-12(fp)
 800ac54:	e17ffe15 	stw	r5,-8(fp)
 800ac58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800ac5c:	e0bffd17 	ldw	r2,-12(fp)
 800ac60:	10800017 	ldw	r2,0(r2)
 800ac64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800ac68:	e0bffc17 	ldw	r2,-16(fp)
 800ac6c:	11000a04 	addi	r4,r2,40
 800ac70:	e17ffe17 	ldw	r5,-8(fp)
 800ac74:	e1bfff17 	ldw	r6,-4(fp)
 800ac78:	800b09c0 	call	800b09c <altera_avalon_jtag_uart_ioctl>
}
 800ac7c:	e037883a 	mov	sp,fp
 800ac80:	dfc00117 	ldw	ra,4(sp)
 800ac84:	df000017 	ldw	fp,0(sp)
 800ac88:	dec00204 	addi	sp,sp,8
 800ac8c:	f800283a 	ret

0800ac90 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800ac90:	defffa04 	addi	sp,sp,-24
 800ac94:	dfc00515 	stw	ra,20(sp)
 800ac98:	df000415 	stw	fp,16(sp)
 800ac9c:	df000404 	addi	fp,sp,16
 800aca0:	e13ffd15 	stw	r4,-12(fp)
 800aca4:	e17ffe15 	stw	r5,-8(fp)
 800aca8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800acac:	e0fffd17 	ldw	r3,-12(fp)
 800acb0:	00800044 	movi	r2,1
 800acb4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800acb8:	e0bffd17 	ldw	r2,-12(fp)
 800acbc:	10800017 	ldw	r2,0(r2)
 800acc0:	11000104 	addi	r4,r2,4
 800acc4:	e0bffd17 	ldw	r2,-12(fp)
 800acc8:	10800817 	ldw	r2,32(r2)
 800accc:	1007883a 	mov	r3,r2
 800acd0:	2005883a 	mov	r2,r4
 800acd4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800acd8:	e13ffe17 	ldw	r4,-8(fp)
 800acdc:	e17fff17 	ldw	r5,-4(fp)
 800ace0:	d8000015 	stw	zero,0(sp)
 800ace4:	01820074 	movhi	r6,2049
 800ace8:	31ab5404 	addi	r6,r6,-21168
 800acec:	e1fffd17 	ldw	r7,-12(fp)
 800acf0:	800fe380 	call	800fe38 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800acf4:	e0bffd17 	ldw	r2,-12(fp)
 800acf8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800acfc:	e0bffd17 	ldw	r2,-12(fp)
 800ad00:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800ad04:	00820074 	movhi	r2,2049
 800ad08:	1091bb04 	addi	r2,r2,18156
 800ad0c:	10800017 	ldw	r2,0(r2)
 800ad10:	100b883a 	mov	r5,r2
 800ad14:	01820074 	movhi	r6,2049
 800ad18:	31abde04 	addi	r6,r6,-20616
 800ad1c:	e1fffd17 	ldw	r7,-12(fp)
 800ad20:	800fa3c0 	call	800fa3c <alt_alarm_start>
 800ad24:	1004403a 	cmpge	r2,r2,zero
 800ad28:	1000041e 	bne	r2,zero,800ad3c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800ad2c:	e0fffd17 	ldw	r3,-12(fp)
 800ad30:	00a00034 	movhi	r2,32768
 800ad34:	10bfffc4 	addi	r2,r2,-1
 800ad38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800ad3c:	e037883a 	mov	sp,fp
 800ad40:	dfc00117 	ldw	ra,4(sp)
 800ad44:	df000017 	ldw	fp,0(sp)
 800ad48:	dec00204 	addi	sp,sp,8
 800ad4c:	f800283a 	ret

0800ad50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800ad50:	defff804 	addi	sp,sp,-32
 800ad54:	df000715 	stw	fp,28(sp)
 800ad58:	df000704 	addi	fp,sp,28
 800ad5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800ad60:	e0bfff17 	ldw	r2,-4(fp)
 800ad64:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 800ad68:	e0bffe17 	ldw	r2,-8(fp)
 800ad6c:	10800017 	ldw	r2,0(r2)
 800ad70:	e0bffd15 	stw	r2,-12(fp)
 800ad74:	00000006 	br	800ad78 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800ad78:	e0bffd17 	ldw	r2,-12(fp)
 800ad7c:	10800104 	addi	r2,r2,4
 800ad80:	10800037 	ldwio	r2,0(r2)
 800ad84:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800ad88:	e0bffc17 	ldw	r2,-16(fp)
 800ad8c:	1080c00c 	andi	r2,r2,768
 800ad90:	1005003a 	cmpeq	r2,r2,zero
 800ad94:	1000741e 	bne	r2,zero,800af68 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800ad98:	e0bffc17 	ldw	r2,-16(fp)
 800ad9c:	1080400c 	andi	r2,r2,256
 800ada0:	1005003a 	cmpeq	r2,r2,zero
 800ada4:	1000351e 	bne	r2,zero,800ae7c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800ada8:	00800074 	movhi	r2,1
 800adac:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800adb0:	e0bffe17 	ldw	r2,-8(fp)
 800adb4:	10800a17 	ldw	r2,40(r2)
 800adb8:	10800044 	addi	r2,r2,1
 800adbc:	1081ffcc 	andi	r2,r2,2047
 800adc0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 800adc4:	e0bffe17 	ldw	r2,-8(fp)
 800adc8:	10c00b17 	ldw	r3,44(r2)
 800adcc:	e0bffa17 	ldw	r2,-24(fp)
 800add0:	18801626 	beq	r3,r2,800ae2c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800add4:	e0bffd17 	ldw	r2,-12(fp)
 800add8:	10800037 	ldwio	r2,0(r2)
 800addc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800ade0:	e0bffb17 	ldw	r2,-20(fp)
 800ade4:	10a0000c 	andi	r2,r2,32768
 800ade8:	1005003a 	cmpeq	r2,r2,zero
 800adec:	10000f1e 	bne	r2,zero,800ae2c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800adf0:	e0bffe17 	ldw	r2,-8(fp)
 800adf4:	10c00a17 	ldw	r3,40(r2)
 800adf8:	e0bffb17 	ldw	r2,-20(fp)
 800adfc:	1009883a 	mov	r4,r2
 800ae00:	e0bffe17 	ldw	r2,-8(fp)
 800ae04:	1885883a 	add	r2,r3,r2
 800ae08:	10800e04 	addi	r2,r2,56
 800ae0c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ae10:	e0bffe17 	ldw	r2,-8(fp)
 800ae14:	10800a17 	ldw	r2,40(r2)
 800ae18:	10800044 	addi	r2,r2,1
 800ae1c:	10c1ffcc 	andi	r3,r2,2047
 800ae20:	e0bffe17 	ldw	r2,-8(fp)
 800ae24:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800ae28:	003fe106 	br	800adb0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800ae2c:	e0bffb17 	ldw	r2,-20(fp)
 800ae30:	10bfffec 	andhi	r2,r2,65535
 800ae34:	1005003a 	cmpeq	r2,r2,zero
 800ae38:	1000101e 	bne	r2,zero,800ae7c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800ae3c:	e0bffe17 	ldw	r2,-8(fp)
 800ae40:	10c00817 	ldw	r3,32(r2)
 800ae44:	00bfff84 	movi	r2,-2
 800ae48:	1886703a 	and	r3,r3,r2
 800ae4c:	e0bffe17 	ldw	r2,-8(fp)
 800ae50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800ae54:	e0bffd17 	ldw	r2,-12(fp)
 800ae58:	11000104 	addi	r4,r2,4
 800ae5c:	e0bffe17 	ldw	r2,-8(fp)
 800ae60:	10800817 	ldw	r2,32(r2)
 800ae64:	1007883a 	mov	r3,r2
 800ae68:	2005883a 	mov	r2,r4
 800ae6c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800ae70:	e0bffd17 	ldw	r2,-12(fp)
 800ae74:	10800104 	addi	r2,r2,4
 800ae78:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800ae7c:	e0bffc17 	ldw	r2,-16(fp)
 800ae80:	1080800c 	andi	r2,r2,512
 800ae84:	1005003a 	cmpeq	r2,r2,zero
 800ae88:	103fbb1e 	bne	r2,zero,800ad78 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800ae8c:	e0bffc17 	ldw	r2,-16(fp)
 800ae90:	10bfffec 	andhi	r2,r2,65535
 800ae94:	1004d43a 	srli	r2,r2,16
 800ae98:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800ae9c:	00001506 	br	800aef4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800aea0:	e13ffd17 	ldw	r4,-12(fp)
 800aea4:	e0bffe17 	ldw	r2,-8(fp)
 800aea8:	10c00d17 	ldw	r3,52(r2)
 800aeac:	e0bffe17 	ldw	r2,-8(fp)
 800aeb0:	1885883a 	add	r2,r3,r2
 800aeb4:	10820e04 	addi	r2,r2,2104
 800aeb8:	10800003 	ldbu	r2,0(r2)
 800aebc:	10c03fcc 	andi	r3,r2,255
 800aec0:	18c0201c 	xori	r3,r3,128
 800aec4:	18ffe004 	addi	r3,r3,-128
 800aec8:	2005883a 	mov	r2,r4
 800aecc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800aed0:	e0bffe17 	ldw	r2,-8(fp)
 800aed4:	10800d17 	ldw	r2,52(r2)
 800aed8:	10800044 	addi	r2,r2,1
 800aedc:	10c1ffcc 	andi	r3,r2,2047
 800aee0:	e0bffe17 	ldw	r2,-8(fp)
 800aee4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800aee8:	e0bff917 	ldw	r2,-28(fp)
 800aeec:	10bfffc4 	addi	r2,r2,-1
 800aef0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800aef4:	e0bff917 	ldw	r2,-28(fp)
 800aef8:	1005003a 	cmpeq	r2,r2,zero
 800aefc:	1000051e 	bne	r2,zero,800af14 <altera_avalon_jtag_uart_irq+0x1c4>
 800af00:	e0bffe17 	ldw	r2,-8(fp)
 800af04:	10c00d17 	ldw	r3,52(r2)
 800af08:	e0bffe17 	ldw	r2,-8(fp)
 800af0c:	10800c17 	ldw	r2,48(r2)
 800af10:	18bfe31e 	bne	r3,r2,800aea0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800af14:	e0bff917 	ldw	r2,-28(fp)
 800af18:	1005003a 	cmpeq	r2,r2,zero
 800af1c:	103f961e 	bne	r2,zero,800ad78 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800af20:	e0bffe17 	ldw	r2,-8(fp)
 800af24:	10c00817 	ldw	r3,32(r2)
 800af28:	00bfff44 	movi	r2,-3
 800af2c:	1886703a 	and	r3,r3,r2
 800af30:	e0bffe17 	ldw	r2,-8(fp)
 800af34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800af38:	e0bffe17 	ldw	r2,-8(fp)
 800af3c:	10800017 	ldw	r2,0(r2)
 800af40:	11000104 	addi	r4,r2,4
 800af44:	e0bffe17 	ldw	r2,-8(fp)
 800af48:	10800817 	ldw	r2,32(r2)
 800af4c:	1007883a 	mov	r3,r2
 800af50:	2005883a 	mov	r2,r4
 800af54:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800af58:	e0bffd17 	ldw	r2,-12(fp)
 800af5c:	10800104 	addi	r2,r2,4
 800af60:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800af64:	003f8406 	br	800ad78 <altera_avalon_jtag_uart_irq+0x28>
}
 800af68:	e037883a 	mov	sp,fp
 800af6c:	df000017 	ldw	fp,0(sp)
 800af70:	dec00104 	addi	sp,sp,4
 800af74:	f800283a 	ret

0800af78 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800af78:	defffc04 	addi	sp,sp,-16
 800af7c:	df000315 	stw	fp,12(sp)
 800af80:	df000304 	addi	fp,sp,12
 800af84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800af88:	e0bfff17 	ldw	r2,-4(fp)
 800af8c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800af90:	e0bffe17 	ldw	r2,-8(fp)
 800af94:	10800017 	ldw	r2,0(r2)
 800af98:	10800104 	addi	r2,r2,4
 800af9c:	10800037 	ldwio	r2,0(r2)
 800afa0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800afa4:	e0bffd17 	ldw	r2,-12(fp)
 800afa8:	1081000c 	andi	r2,r2,1024
 800afac:	1005003a 	cmpeq	r2,r2,zero
 800afb0:	10000c1e 	bne	r2,zero,800afe4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800afb4:	e0bffe17 	ldw	r2,-8(fp)
 800afb8:	10800017 	ldw	r2,0(r2)
 800afbc:	11000104 	addi	r4,r2,4
 800afc0:	e0bffe17 	ldw	r2,-8(fp)
 800afc4:	10800817 	ldw	r2,32(r2)
 800afc8:	10810014 	ori	r2,r2,1024
 800afcc:	1007883a 	mov	r3,r2
 800afd0:	2005883a 	mov	r2,r4
 800afd4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 800afd8:	e0bffe17 	ldw	r2,-8(fp)
 800afdc:	10000915 	stw	zero,36(r2)
 800afe0:	00000a06 	br	800b00c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800afe4:	e0bffe17 	ldw	r2,-8(fp)
 800afe8:	10c00917 	ldw	r3,36(r2)
 800afec:	00a00034 	movhi	r2,32768
 800aff0:	10bfff04 	addi	r2,r2,-4
 800aff4:	10c00536 	bltu	r2,r3,800b00c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 800aff8:	e0bffe17 	ldw	r2,-8(fp)
 800affc:	10800917 	ldw	r2,36(r2)
 800b000:	10c00044 	addi	r3,r2,1
 800b004:	e0bffe17 	ldw	r2,-8(fp)
 800b008:	10c00915 	stw	r3,36(r2)
 800b00c:	00820074 	movhi	r2,2049
 800b010:	1091bb04 	addi	r2,r2,18156
 800b014:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800b018:	e037883a 	mov	sp,fp
 800b01c:	df000017 	ldw	fp,0(sp)
 800b020:	dec00104 	addi	sp,sp,4
 800b024:	f800283a 	ret

0800b028 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800b028:	defffc04 	addi	sp,sp,-16
 800b02c:	df000315 	stw	fp,12(sp)
 800b030:	df000304 	addi	fp,sp,12
 800b034:	e13ffd15 	stw	r4,-12(fp)
 800b038:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800b03c:	00000706 	br	800b05c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 800b040:	e0bffe17 	ldw	r2,-8(fp)
 800b044:	1090000c 	andi	r2,r2,16384
 800b048:	1005003a 	cmpeq	r2,r2,zero
 800b04c:	1000031e 	bne	r2,zero,800b05c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 800b050:	00bffd44 	movi	r2,-11
 800b054:	e0bfff15 	stw	r2,-4(fp)
 800b058:	00000b06 	br	800b088 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800b05c:	e0bffd17 	ldw	r2,-12(fp)
 800b060:	10c00d17 	ldw	r3,52(r2)
 800b064:	e0bffd17 	ldw	r2,-12(fp)
 800b068:	10800c17 	ldw	r2,48(r2)
 800b06c:	18800526 	beq	r3,r2,800b084 <altera_avalon_jtag_uart_close+0x5c>
 800b070:	e0bffd17 	ldw	r2,-12(fp)
 800b074:	10c00917 	ldw	r3,36(r2)
 800b078:	e0bffd17 	ldw	r2,-12(fp)
 800b07c:	10800117 	ldw	r2,4(r2)
 800b080:	18bfef36 	bltu	r3,r2,800b040 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800b084:	e03fff15 	stw	zero,-4(fp)
 800b088:	e0bfff17 	ldw	r2,-4(fp)
}
 800b08c:	e037883a 	mov	sp,fp
 800b090:	df000017 	ldw	fp,0(sp)
 800b094:	dec00104 	addi	sp,sp,4
 800b098:	f800283a 	ret

0800b09c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800b09c:	defff804 	addi	sp,sp,-32
 800b0a0:	df000715 	stw	fp,28(sp)
 800b0a4:	df000704 	addi	fp,sp,28
 800b0a8:	e13ffb15 	stw	r4,-20(fp)
 800b0ac:	e17ffc15 	stw	r5,-16(fp)
 800b0b0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 800b0b4:	00bff9c4 	movi	r2,-25
 800b0b8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 800b0bc:	e0bffc17 	ldw	r2,-16(fp)
 800b0c0:	e0bfff15 	stw	r2,-4(fp)
 800b0c4:	e0ffff17 	ldw	r3,-4(fp)
 800b0c8:	189a8060 	cmpeqi	r2,r3,27137
 800b0cc:	1000041e 	bne	r2,zero,800b0e0 <altera_avalon_jtag_uart_ioctl+0x44>
 800b0d0:	e0ffff17 	ldw	r3,-4(fp)
 800b0d4:	189a80a0 	cmpeqi	r2,r3,27138
 800b0d8:	10001b1e 	bne	r2,zero,800b148 <altera_avalon_jtag_uart_ioctl+0xac>
 800b0dc:	00002706 	br	800b17c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800b0e0:	e0bffb17 	ldw	r2,-20(fp)
 800b0e4:	10c00117 	ldw	r3,4(r2)
 800b0e8:	00a00034 	movhi	r2,32768
 800b0ec:	10bfffc4 	addi	r2,r2,-1
 800b0f0:	18802226 	beq	r3,r2,800b17c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 800b0f4:	e0bffd17 	ldw	r2,-12(fp)
 800b0f8:	10800017 	ldw	r2,0(r2)
 800b0fc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800b100:	e0bff917 	ldw	r2,-28(fp)
 800b104:	10800090 	cmplti	r2,r2,2
 800b108:	1000071e 	bne	r2,zero,800b128 <altera_avalon_jtag_uart_ioctl+0x8c>
 800b10c:	e0fff917 	ldw	r3,-28(fp)
 800b110:	00a00034 	movhi	r2,32768
 800b114:	10bfffc4 	addi	r2,r2,-1
 800b118:	18800326 	beq	r3,r2,800b128 <altera_avalon_jtag_uart_ioctl+0x8c>
 800b11c:	e0bff917 	ldw	r2,-28(fp)
 800b120:	e0bffe15 	stw	r2,-8(fp)
 800b124:	00000306 	br	800b134 <altera_avalon_jtag_uart_ioctl+0x98>
 800b128:	00e00034 	movhi	r3,32768
 800b12c:	18ffff84 	addi	r3,r3,-2
 800b130:	e0fffe15 	stw	r3,-8(fp)
 800b134:	e0bffb17 	ldw	r2,-20(fp)
 800b138:	e0fffe17 	ldw	r3,-8(fp)
 800b13c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 800b140:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 800b144:	00000d06 	br	800b17c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800b148:	e0bffb17 	ldw	r2,-20(fp)
 800b14c:	10c00117 	ldw	r3,4(r2)
 800b150:	00a00034 	movhi	r2,32768
 800b154:	10bfffc4 	addi	r2,r2,-1
 800b158:	18800826 	beq	r3,r2,800b17c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800b15c:	e13ffd17 	ldw	r4,-12(fp)
 800b160:	e0bffb17 	ldw	r2,-20(fp)
 800b164:	10c00917 	ldw	r3,36(r2)
 800b168:	e0bffb17 	ldw	r2,-20(fp)
 800b16c:	10800117 	ldw	r2,4(r2)
 800b170:	1885803a 	cmpltu	r2,r3,r2
 800b174:	20800015 	stw	r2,0(r4)
      rc = 0;
 800b178:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 800b17c:	e0bffa17 	ldw	r2,-24(fp)
}
 800b180:	e037883a 	mov	sp,fp
 800b184:	df000017 	ldw	fp,0(sp)
 800b188:	dec00104 	addi	sp,sp,4
 800b18c:	f800283a 	ret

0800b190 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800b190:	defff204 	addi	sp,sp,-56
 800b194:	dfc00d15 	stw	ra,52(sp)
 800b198:	df000c15 	stw	fp,48(sp)
 800b19c:	df000c04 	addi	fp,sp,48
 800b1a0:	e13ffb15 	stw	r4,-20(fp)
 800b1a4:	e17ffc15 	stw	r5,-16(fp)
 800b1a8:	e1bffd15 	stw	r6,-12(fp)
 800b1ac:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 800b1b0:	e0bffc17 	ldw	r2,-16(fp)
 800b1b4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800b1b8:	00004806 	br	800b2dc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800b1bc:	e0bffb17 	ldw	r2,-20(fp)
 800b1c0:	10800a17 	ldw	r2,40(r2)
 800b1c4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800b1c8:	e0bffb17 	ldw	r2,-20(fp)
 800b1cc:	10800b17 	ldw	r2,44(r2)
 800b1d0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 800b1d4:	e0fff717 	ldw	r3,-36(fp)
 800b1d8:	e0bff617 	ldw	r2,-40(fp)
 800b1dc:	18800536 	bltu	r3,r2,800b1f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800b1e0:	e0bff717 	ldw	r2,-36(fp)
 800b1e4:	e0fff617 	ldw	r3,-40(fp)
 800b1e8:	10c5c83a 	sub	r2,r2,r3
 800b1ec:	e0bff815 	stw	r2,-32(fp)
 800b1f0:	00000406 	br	800b204 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800b1f4:	00820004 	movi	r2,2048
 800b1f8:	e0fff617 	ldw	r3,-40(fp)
 800b1fc:	10c5c83a 	sub	r2,r2,r3
 800b200:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 800b204:	e0bff817 	ldw	r2,-32(fp)
 800b208:	1005003a 	cmpeq	r2,r2,zero
 800b20c:	10001f1e 	bne	r2,zero,800b28c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 800b210:	e0fffd17 	ldw	r3,-12(fp)
 800b214:	e0bff817 	ldw	r2,-32(fp)
 800b218:	1880022e 	bgeu	r3,r2,800b224 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800b21c:	e0bffd17 	ldw	r2,-12(fp)
 800b220:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800b224:	e0bffb17 	ldw	r2,-20(fp)
 800b228:	10c00e04 	addi	r3,r2,56
 800b22c:	e0bff617 	ldw	r2,-40(fp)
 800b230:	1887883a 	add	r3,r3,r2
 800b234:	e0bffa17 	ldw	r2,-24(fp)
 800b238:	1009883a 	mov	r4,r2
 800b23c:	180b883a 	mov	r5,r3
 800b240:	e1bff817 	ldw	r6,-32(fp)
 800b244:	80059900 	call	8005990 <memcpy>
      ptr   += n;
 800b248:	e0fff817 	ldw	r3,-32(fp)
 800b24c:	e0bffa17 	ldw	r2,-24(fp)
 800b250:	10c5883a 	add	r2,r2,r3
 800b254:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 800b258:	e0fffd17 	ldw	r3,-12(fp)
 800b25c:	e0bff817 	ldw	r2,-32(fp)
 800b260:	1885c83a 	sub	r2,r3,r2
 800b264:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800b268:	e0fff617 	ldw	r3,-40(fp)
 800b26c:	e0bff817 	ldw	r2,-32(fp)
 800b270:	1885883a 	add	r2,r3,r2
 800b274:	10c1ffcc 	andi	r3,r2,2047
 800b278:	e0bffb17 	ldw	r2,-20(fp)
 800b27c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800b280:	e0bffd17 	ldw	r2,-12(fp)
 800b284:	10800048 	cmpgei	r2,r2,1
 800b288:	103fcc1e 	bne	r2,zero,800b1bc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 800b28c:	e0fffa17 	ldw	r3,-24(fp)
 800b290:	e0bffc17 	ldw	r2,-16(fp)
 800b294:	1880141e 	bne	r3,r2,800b2e8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800b298:	e0bffe17 	ldw	r2,-8(fp)
 800b29c:	1090000c 	andi	r2,r2,16384
 800b2a0:	1004c03a 	cmpne	r2,r2,zero
 800b2a4:	1000101e 	bne	r2,zero,800b2e8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800b2a8:	e0bffb17 	ldw	r2,-20(fp)
 800b2ac:	10c00a17 	ldw	r3,40(r2)
 800b2b0:	e0bff717 	ldw	r2,-36(fp)
 800b2b4:	1880051e 	bne	r3,r2,800b2cc <altera_avalon_jtag_uart_read+0x13c>
 800b2b8:	e0bffb17 	ldw	r2,-20(fp)
 800b2bc:	10c00917 	ldw	r3,36(r2)
 800b2c0:	e0bffb17 	ldw	r2,-20(fp)
 800b2c4:	10800117 	ldw	r2,4(r2)
 800b2c8:	18bff736 	bltu	r3,r2,800b2a8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800b2cc:	e0bffb17 	ldw	r2,-20(fp)
 800b2d0:	10c00a17 	ldw	r3,40(r2)
 800b2d4:	e0bff717 	ldw	r2,-36(fp)
 800b2d8:	18800326 	beq	r3,r2,800b2e8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800b2dc:	e0bffd17 	ldw	r2,-12(fp)
 800b2e0:	10800048 	cmpgei	r2,r2,1
 800b2e4:	103fb51e 	bne	r2,zero,800b1bc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800b2e8:	e0fffa17 	ldw	r3,-24(fp)
 800b2ec:	e0bffc17 	ldw	r2,-16(fp)
 800b2f0:	18801926 	beq	r3,r2,800b358 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b2f4:	0005303a 	rdctl	r2,status
 800b2f8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b2fc:	e0fff517 	ldw	r3,-44(fp)
 800b300:	00bfff84 	movi	r2,-2
 800b304:	1884703a 	and	r2,r3,r2
 800b308:	1001703a 	wrctl	status,r2
  
  return context;
 800b30c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800b310:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800b314:	e0bffb17 	ldw	r2,-20(fp)
 800b318:	10800817 	ldw	r2,32(r2)
 800b31c:	10c00054 	ori	r3,r2,1
 800b320:	e0bffb17 	ldw	r2,-20(fp)
 800b324:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800b328:	e0bffb17 	ldw	r2,-20(fp)
 800b32c:	10800017 	ldw	r2,0(r2)
 800b330:	11000104 	addi	r4,r2,4
 800b334:	e0bffb17 	ldw	r2,-20(fp)
 800b338:	10800817 	ldw	r2,32(r2)
 800b33c:	1007883a 	mov	r3,r2
 800b340:	2005883a 	mov	r2,r4
 800b344:	10c00035 	stwio	r3,0(r2)
 800b348:	e0bff917 	ldw	r2,-28(fp)
 800b34c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b350:	e0bff417 	ldw	r2,-48(fp)
 800b354:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800b358:	e0fffa17 	ldw	r3,-24(fp)
 800b35c:	e0bffc17 	ldw	r2,-16(fp)
 800b360:	18800526 	beq	r3,r2,800b378 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 800b364:	e0fffa17 	ldw	r3,-24(fp)
 800b368:	e0bffc17 	ldw	r2,-16(fp)
 800b36c:	1887c83a 	sub	r3,r3,r2
 800b370:	e0ffff15 	stw	r3,-4(fp)
 800b374:	00000906 	br	800b39c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 800b378:	e0bffe17 	ldw	r2,-8(fp)
 800b37c:	1090000c 	andi	r2,r2,16384
 800b380:	1005003a 	cmpeq	r2,r2,zero
 800b384:	1000031e 	bne	r2,zero,800b394 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800b388:	00bffd44 	movi	r2,-11
 800b38c:	e0bfff15 	stw	r2,-4(fp)
 800b390:	00000206 	br	800b39c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 800b394:	00bffec4 	movi	r2,-5
 800b398:	e0bfff15 	stw	r2,-4(fp)
 800b39c:	e0bfff17 	ldw	r2,-4(fp)
}
 800b3a0:	e037883a 	mov	sp,fp
 800b3a4:	dfc00117 	ldw	ra,4(sp)
 800b3a8:	df000017 	ldw	fp,0(sp)
 800b3ac:	dec00204 	addi	sp,sp,8
 800b3b0:	f800283a 	ret

0800b3b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800b3b4:	defff204 	addi	sp,sp,-56
 800b3b8:	dfc00d15 	stw	ra,52(sp)
 800b3bc:	df000c15 	stw	fp,48(sp)
 800b3c0:	df000c04 	addi	fp,sp,48
 800b3c4:	e13ffb15 	stw	r4,-20(fp)
 800b3c8:	e17ffc15 	stw	r5,-16(fp)
 800b3cc:	e1bffd15 	stw	r6,-12(fp)
 800b3d0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800b3d4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800b3d8:	e0bffc17 	ldw	r2,-16(fp)
 800b3dc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800b3e0:	00003a06 	br	800b4cc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800b3e4:	e0bffb17 	ldw	r2,-20(fp)
 800b3e8:	10800c17 	ldw	r2,48(r2)
 800b3ec:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 800b3f0:	e0bffb17 	ldw	r2,-20(fp)
 800b3f4:	10800d17 	ldw	r2,52(r2)
 800b3f8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 800b3fc:	e0fffa17 	ldw	r3,-24(fp)
 800b400:	e0bff917 	ldw	r2,-28(fp)
 800b404:	1880062e 	bgeu	r3,r2,800b420 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800b408:	e0fff917 	ldw	r3,-28(fp)
 800b40c:	e0bffa17 	ldw	r2,-24(fp)
 800b410:	1885c83a 	sub	r2,r3,r2
 800b414:	10bfffc4 	addi	r2,r2,-1
 800b418:	e0bff815 	stw	r2,-32(fp)
 800b41c:	00000c06 	br	800b450 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 800b420:	e0bff917 	ldw	r2,-28(fp)
 800b424:	1005003a 	cmpeq	r2,r2,zero
 800b428:	1000051e 	bne	r2,zero,800b440 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800b42c:	00820004 	movi	r2,2048
 800b430:	e0fffa17 	ldw	r3,-24(fp)
 800b434:	10c5c83a 	sub	r2,r2,r3
 800b438:	e0bff815 	stw	r2,-32(fp)
 800b43c:	00000406 	br	800b450 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800b440:	0081ffc4 	movi	r2,2047
 800b444:	e0fffa17 	ldw	r3,-24(fp)
 800b448:	10c5c83a 	sub	r2,r2,r3
 800b44c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 800b450:	e0bff817 	ldw	r2,-32(fp)
 800b454:	1005003a 	cmpeq	r2,r2,zero
 800b458:	10001f1e 	bne	r2,zero,800b4d8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 800b45c:	e0fffd17 	ldw	r3,-12(fp)
 800b460:	e0bff817 	ldw	r2,-32(fp)
 800b464:	1880022e 	bgeu	r3,r2,800b470 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 800b468:	e0bffd17 	ldw	r2,-12(fp)
 800b46c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800b470:	e0bffb17 	ldw	r2,-20(fp)
 800b474:	10c20e04 	addi	r3,r2,2104
 800b478:	e0bffa17 	ldw	r2,-24(fp)
 800b47c:	1885883a 	add	r2,r3,r2
 800b480:	e0fffc17 	ldw	r3,-16(fp)
 800b484:	1009883a 	mov	r4,r2
 800b488:	180b883a 	mov	r5,r3
 800b48c:	e1bff817 	ldw	r6,-32(fp)
 800b490:	80059900 	call	8005990 <memcpy>
      ptr   += n;
 800b494:	e0fff817 	ldw	r3,-32(fp)
 800b498:	e0bffc17 	ldw	r2,-16(fp)
 800b49c:	10c5883a 	add	r2,r2,r3
 800b4a0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 800b4a4:	e0fffd17 	ldw	r3,-12(fp)
 800b4a8:	e0bff817 	ldw	r2,-32(fp)
 800b4ac:	1885c83a 	sub	r2,r3,r2
 800b4b0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800b4b4:	e0fffa17 	ldw	r3,-24(fp)
 800b4b8:	e0bff817 	ldw	r2,-32(fp)
 800b4bc:	1885883a 	add	r2,r3,r2
 800b4c0:	10c1ffcc 	andi	r3,r2,2047
 800b4c4:	e0bffb17 	ldw	r2,-20(fp)
 800b4c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800b4cc:	e0bffd17 	ldw	r2,-12(fp)
 800b4d0:	10800048 	cmpgei	r2,r2,1
 800b4d4:	103fc31e 	bne	r2,zero,800b3e4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b4d8:	0005303a 	rdctl	r2,status
 800b4dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b4e0:	e0fff517 	ldw	r3,-44(fp)
 800b4e4:	00bfff84 	movi	r2,-2
 800b4e8:	1884703a 	and	r2,r3,r2
 800b4ec:	1001703a 	wrctl	status,r2
  
  return context;
 800b4f0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800b4f4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800b4f8:	e0bffb17 	ldw	r2,-20(fp)
 800b4fc:	10800817 	ldw	r2,32(r2)
 800b500:	10c00094 	ori	r3,r2,2
 800b504:	e0bffb17 	ldw	r2,-20(fp)
 800b508:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800b50c:	e0bffb17 	ldw	r2,-20(fp)
 800b510:	10800017 	ldw	r2,0(r2)
 800b514:	11000104 	addi	r4,r2,4
 800b518:	e0bffb17 	ldw	r2,-20(fp)
 800b51c:	10800817 	ldw	r2,32(r2)
 800b520:	1007883a 	mov	r3,r2
 800b524:	2005883a 	mov	r2,r4
 800b528:	10c00035 	stwio	r3,0(r2)
 800b52c:	e0bff717 	ldw	r2,-36(fp)
 800b530:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b534:	e0bff417 	ldw	r2,-48(fp)
 800b538:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800b53c:	e0bffd17 	ldw	r2,-12(fp)
 800b540:	10800050 	cmplti	r2,r2,1
 800b544:	1000111e 	bne	r2,zero,800b58c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 800b548:	e0bffe17 	ldw	r2,-8(fp)
 800b54c:	1090000c 	andi	r2,r2,16384
 800b550:	1004c03a 	cmpne	r2,r2,zero
 800b554:	1000101e 	bne	r2,zero,800b598 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800b558:	e0bffb17 	ldw	r2,-20(fp)
 800b55c:	10c00d17 	ldw	r3,52(r2)
 800b560:	e0bff917 	ldw	r2,-28(fp)
 800b564:	1880051e 	bne	r3,r2,800b57c <altera_avalon_jtag_uart_write+0x1c8>
 800b568:	e0bffb17 	ldw	r2,-20(fp)
 800b56c:	10c00917 	ldw	r3,36(r2)
 800b570:	e0bffb17 	ldw	r2,-20(fp)
 800b574:	10800117 	ldw	r2,4(r2)
 800b578:	18bff736 	bltu	r3,r2,800b558 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 800b57c:	e0bffb17 	ldw	r2,-20(fp)
 800b580:	10c00d17 	ldw	r3,52(r2)
 800b584:	e0bff917 	ldw	r2,-28(fp)
 800b588:	18800326 	beq	r3,r2,800b598 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 800b58c:	e0bffd17 	ldw	r2,-12(fp)
 800b590:	10800048 	cmpgei	r2,r2,1
 800b594:	103fcd1e 	bne	r2,zero,800b4cc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800b598:	e0fffc17 	ldw	r3,-16(fp)
 800b59c:	e0bff617 	ldw	r2,-40(fp)
 800b5a0:	18800526 	beq	r3,r2,800b5b8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 800b5a4:	e0fffc17 	ldw	r3,-16(fp)
 800b5a8:	e0bff617 	ldw	r2,-40(fp)
 800b5ac:	1887c83a 	sub	r3,r3,r2
 800b5b0:	e0ffff15 	stw	r3,-4(fp)
 800b5b4:	00000906 	br	800b5dc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 800b5b8:	e0bffe17 	ldw	r2,-8(fp)
 800b5bc:	1090000c 	andi	r2,r2,16384
 800b5c0:	1005003a 	cmpeq	r2,r2,zero
 800b5c4:	1000031e 	bne	r2,zero,800b5d4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 800b5c8:	00bffd44 	movi	r2,-11
 800b5cc:	e0bfff15 	stw	r2,-4(fp)
 800b5d0:	00000206 	br	800b5dc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 800b5d4:	00bffec4 	movi	r2,-5
 800b5d8:	e0bfff15 	stw	r2,-4(fp)
 800b5dc:	e0bfff17 	ldw	r2,-4(fp)
}
 800b5e0:	e037883a 	mov	sp,fp
 800b5e4:	dfc00117 	ldw	ra,4(sp)
 800b5e8:	df000017 	ldw	fp,0(sp)
 800b5ec:	dec00204 	addi	sp,sp,8
 800b5f0:	f800283a 	ret

0800b5f4 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 800b5f4:	defffa04 	addi	sp,sp,-24
 800b5f8:	dfc00515 	stw	ra,20(sp)
 800b5fc:	df000415 	stw	fp,16(sp)
 800b600:	df000404 	addi	fp,sp,16
 800b604:	e13ffe15 	stw	r4,-8(fp)
 800b608:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 800b60c:	e03ffd15 	stw	zero,-12(fp)
    
    if (alt_up_sd_card_is_Present())
 800b610:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 800b614:	1005003a 	cmpeq	r2,r2,zero
 800b618:	1000221e 	bne	r2,zero,800b6a4 <Write_Sector_Data+0xb0>
    {
        short int reg_state = 0xff;
 800b61c:	00803fc4 	movi	r2,255
 800b620:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 800b624:	d0a6c717 	ldw	r2,-25828(gp)
 800b628:	1009883a 	mov	r4,r2
 800b62c:	e0fffe17 	ldw	r3,-8(fp)
 800b630:	e0bfff17 	ldw	r2,-4(fp)
 800b634:	1885883a 	add	r2,r3,r2
 800b638:	1006927a 	slli	r3,r2,9
 800b63c:	2005883a 	mov	r2,r4
 800b640:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 800b644:	d0a6c617 	ldw	r2,-25832(gp)
 800b648:	1007883a 	mov	r3,r2
 800b64c:	00800604 	movi	r2,24
 800b650:	1880002d 	sthio	r2,0(r3)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 800b654:	d0a6c317 	ldw	r2,-25844(gp)
 800b658:	1080002b 	ldhuio	r2,0(r2)
 800b65c:	e0bffc0d 	sth	r2,-16(fp)
        } while ((reg_state & 0x04)!=0);
 800b660:	e0bffc0b 	ldhu	r2,-16(fp)
 800b664:	10bfffcc 	andi	r2,r2,65535
 800b668:	1080010c 	andi	r2,r2,4
 800b66c:	1004c03a 	cmpne	r2,r2,zero
 800b670:	103ff81e 	bne	r2,zero,800b654 <Write_Sector_Data+0x60>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
 800b674:	e0bffc0b 	ldhu	r2,-16(fp)
 800b678:	10bfffcc 	andi	r2,r2,65535
 800b67c:	1080040c 	andi	r2,r2,16
 800b680:	1004c03a 	cmpne	r2,r2,zero
 800b684:	1000071e 	bne	r2,zero,800b6a4 <Write_Sector_Data+0xb0>
        {
            result = true;
 800b688:	00800044 	movi	r2,1
 800b68c:	e0bffd15 	stw	r2,-12(fp)
            current_sector_modified = false;
 800b690:	d026cc15 	stw	zero,-25808(gp)
            current_sector_index = sector_index+partition_offset;
 800b694:	e0fffe17 	ldw	r3,-8(fp)
 800b698:	e0bfff17 	ldw	r2,-4(fp)
 800b69c:	1885883a 	add	r2,r3,r2
 800b6a0:	d0a6cd15 	stw	r2,-25804(gp)
        }
    }
    return result;
 800b6a4:	e0bffd17 	ldw	r2,-12(fp)
}
 800b6a8:	e037883a 	mov	sp,fp
 800b6ac:	dfc00117 	ldw	ra,4(sp)
 800b6b0:	df000017 	ldw	fp,0(sp)
 800b6b4:	dec00204 	addi	sp,sp,8
 800b6b8:	f800283a 	ret

0800b6bc <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 800b6bc:	defffd04 	addi	sp,sp,-12
 800b6c0:	dfc00215 	stw	ra,8(sp)
 800b6c4:	df000115 	stw	fp,4(sp)
 800b6c8:	df000104 	addi	fp,sp,4
    bool result = true;
 800b6cc:	00800044 	movi	r2,1
 800b6d0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
 800b6d4:	d0a6cc17 	ldw	r2,-25808(gp)
 800b6d8:	1005003a 	cmpeq	r2,r2,zero
 800b6dc:	1000051e 	bne	r2,zero,800b6f4 <Save_Modified_Sector+0x38>
    {
        result = Write_Sector_Data(current_sector_index, 0);
 800b6e0:	d0a6cd17 	ldw	r2,-25804(gp)
 800b6e4:	1009883a 	mov	r4,r2
 800b6e8:	000b883a 	mov	r5,zero
 800b6ec:	800b5f40 	call	800b5f4 <Write_Sector_Data>
 800b6f0:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
 800b6f4:	e0bfff17 	ldw	r2,-4(fp)
}
 800b6f8:	e037883a 	mov	sp,fp
 800b6fc:	dfc00117 	ldw	ra,4(sp)
 800b700:	df000017 	ldw	fp,0(sp)
 800b704:	dec00204 	addi	sp,sp,8
 800b708:	f800283a 	ret

0800b70c <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 800b70c:	defff904 	addi	sp,sp,-28
 800b710:	dfc00615 	stw	ra,24(sp)
 800b714:	df000515 	stw	fp,20(sp)
 800b718:	df000504 	addi	fp,sp,20
 800b71c:	e13ffd15 	stw	r4,-12(fp)
 800b720:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 800b724:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
 800b728:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 800b72c:	1005003a 	cmpeq	r2,r2,zero
 800b730:	10002d1e 	bne	r2,zero,800b7e8 <Read_Sector_Data+0xdc>
	{
		short int reg_state = 0xff;
 800b734:	00803fc4 	movi	r2,255
 800b738:	e0bffb0d 	sth	r2,-20(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
 800b73c:	d0a6cc17 	ldw	r2,-25808(gp)
 800b740:	1005003a 	cmpeq	r2,r2,zero
 800b744:	1000081e 	bne	r2,zero,800b768 <Read_Sector_Data+0x5c>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
 800b748:	d0a6cd17 	ldw	r2,-25804(gp)
 800b74c:	1009883a 	mov	r4,r2
 800b750:	000b883a 	mov	r5,zero
 800b754:	800b5f40 	call	800b5f4 <Write_Sector_Data>
 800b758:	1004c03a 	cmpne	r2,r2,zero
 800b75c:	1000021e 	bne	r2,zero,800b768 <Read_Sector_Data+0x5c>
            {
                return false;
 800b760:	e03fff15 	stw	zero,-4(fp)
 800b764:	00002206 	br	800b7f0 <Read_Sector_Data+0xe4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 800b768:	d0a6c717 	ldw	r2,-25828(gp)
 800b76c:	1009883a 	mov	r4,r2
 800b770:	e0fffd17 	ldw	r3,-12(fp)
 800b774:	e0bffe17 	ldw	r2,-8(fp)
 800b778:	1885883a 	add	r2,r3,r2
 800b77c:	1006927a 	slli	r3,r2,9
 800b780:	2005883a 	mov	r2,r4
 800b784:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 800b788:	d0a6c617 	ldw	r2,-25832(gp)
 800b78c:	1007883a 	mov	r3,r2
 800b790:	00800444 	movi	r2,17
 800b794:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 800b798:	d0a6c317 	ldw	r2,-25844(gp)
 800b79c:	1080002b 	ldhuio	r2,0(r2)
 800b7a0:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04)!=0);
 800b7a4:	e0bffb0b 	ldhu	r2,-20(fp)
 800b7a8:	10bfffcc 	andi	r2,r2,65535
 800b7ac:	1080010c 	andi	r2,r2,4
 800b7b0:	1004c03a 	cmpne	r2,r2,zero
 800b7b4:	103ff81e 	bne	r2,zero,800b798 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
 800b7b8:	e0bffb0b 	ldhu	r2,-20(fp)
 800b7bc:	10bfffcc 	andi	r2,r2,65535
 800b7c0:	1080040c 	andi	r2,r2,16
 800b7c4:	1004c03a 	cmpne	r2,r2,zero
 800b7c8:	1000071e 	bne	r2,zero,800b7e8 <Read_Sector_Data+0xdc>
		{
			result = true;
 800b7cc:	00800044 	movi	r2,1
 800b7d0:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 800b7d4:	d026cc15 	stw	zero,-25808(gp)
            current_sector_index = sector_index+partition_offset;
 800b7d8:	e0fffd17 	ldw	r3,-12(fp)
 800b7dc:	e0bffe17 	ldw	r2,-8(fp)
 800b7e0:	1885883a 	add	r2,r3,r2
 800b7e4:	d0a6cd15 	stw	r2,-25804(gp)
		}
	}
	return result;
 800b7e8:	e0bffc17 	ldw	r2,-16(fp)
 800b7ec:	e0bfff15 	stw	r2,-4(fp)
 800b7f0:	e0bfff17 	ldw	r2,-4(fp)
}
 800b7f4:	e037883a 	mov	sp,fp
 800b7f8:	dfc00117 	ldw	ra,4(sp)
 800b7fc:	df000017 	ldw	fp,0(sp)
 800b800:	dec00204 	addi	sp,sp,8
 800b804:	f800283a 	ret

0800b808 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 800b808:	defffa04 	addi	sp,sp,-24
 800b80c:	dfc00515 	stw	ra,20(sp)
 800b810:	df000415 	stw	fp,16(sp)
 800b814:	df000404 	addi	fp,sp,16
 800b818:	e13ffd15 	stw	r4,-12(fp)
 800b81c:	e17ffe15 	stw	r5,-8(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
 800b820:	e0bffd17 	ldw	r2,-12(fp)
 800b824:	1006d23a 	srli	r3,r2,8
 800b828:	d0a6c917 	ldw	r2,-25820(gp)
 800b82c:	1885883a 	add	r2,r3,r2
 800b830:	e0bffc15 	stw	r2,-16(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 800b834:	00820074 	movhi	r2,2049
 800b838:	1091cc04 	addi	r2,r2,18224
 800b83c:	10c01117 	ldw	r3,68(r2)
 800b840:	e0bffc17 	ldw	r2,-16(fp)
 800b844:	10c5883a 	add	r2,r2,r3
 800b848:	e0bffc15 	stw	r2,-16(fp)
     
    if (sector_index != current_sector_index)
 800b84c:	d0e6cd17 	ldw	r3,-25804(gp)
 800b850:	e0bffc17 	ldw	r2,-16(fp)
 800b854:	10c00726 	beq	r2,r3,800b874 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 800b858:	e13ffc17 	ldw	r4,-16(fp)
 800b85c:	000b883a 	mov	r5,zero
 800b860:	800b70c0 	call	800b70c <Read_Sector_Data>
 800b864:	1004c03a 	cmpne	r2,r2,zero
 800b868:	1000021e 	bne	r2,zero,800b874 <get_cluster_flag+0x6c>
        {
            return false;
 800b86c:	e03fff15 	stw	zero,-4(fp)
 800b870:	00000d06 	br	800b8a8 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
 800b874:	d0a6cb17 	ldw	r2,-25812(gp)
 800b878:	10800a17 	ldw	r2,40(r2)
 800b87c:	1007883a 	mov	r3,r2
 800b880:	e0bffd17 	ldw	r2,-12(fp)
 800b884:	10803fcc 	andi	r2,r2,255
 800b888:	1085883a 	add	r2,r2,r2
 800b88c:	1885883a 	add	r2,r3,r2
 800b890:	1080002b 	ldhuio	r2,0(r2)
 800b894:	1007883a 	mov	r3,r2
 800b898:	e0bffe17 	ldw	r2,-8(fp)
 800b89c:	10c0000d 	sth	r3,0(r2)
    return true;
 800b8a0:	00800044 	movi	r2,1
 800b8a4:	e0bfff15 	stw	r2,-4(fp)
 800b8a8:	e0bfff17 	ldw	r2,-4(fp)
}
 800b8ac:	e037883a 	mov	sp,fp
 800b8b0:	dfc00117 	ldw	ra,4(sp)
 800b8b4:	df000017 	ldw	fp,0(sp)
 800b8b8:	dec00204 	addi	sp,sp,8
 800b8bc:	f800283a 	ret

0800b8c0 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 800b8c0:	defff904 	addi	sp,sp,-28
 800b8c4:	dfc00615 	stw	ra,24(sp)
 800b8c8:	df000515 	stw	fp,20(sp)
 800b8cc:	df000504 	addi	fp,sp,20
 800b8d0:	e13ffc15 	stw	r4,-16(fp)
 800b8d4:	e1bffe15 	stw	r6,-8(fp)
 800b8d8:	e17ffd0d 	sth	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
 800b8dc:	e0bffc17 	ldw	r2,-16(fp)
 800b8e0:	1006d23a 	srli	r3,r2,8
 800b8e4:	d0a6c917 	ldw	r2,-25820(gp)
 800b8e8:	1885883a 	add	r2,r3,r2
 800b8ec:	e0bffb15 	stw	r2,-20(fp)
    
    if (first_fat)
 800b8f0:	e0bffe17 	ldw	r2,-8(fp)
 800b8f4:	1005003a 	cmpeq	r2,r2,zero
 800b8f8:	1000071e 	bne	r2,zero,800b918 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 800b8fc:	00820074 	movhi	r2,2049
 800b900:	1091cc04 	addi	r2,r2,18224
 800b904:	10c01117 	ldw	r3,68(r2)
 800b908:	e0bffb17 	ldw	r2,-20(fp)
 800b90c:	10c5883a 	add	r2,r2,r3
 800b910:	e0bffb15 	stw	r2,-20(fp)
 800b914:	00000606 	br	800b930 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
 800b918:	00820074 	movhi	r2,2049
 800b91c:	1091cc04 	addi	r2,r2,18224
 800b920:	10c01217 	ldw	r3,72(r2)
 800b924:	e0bffb17 	ldw	r2,-20(fp)
 800b928:	10c5883a 	add	r2,r2,r3
 800b92c:	e0bffb15 	stw	r2,-20(fp)
    }
     
    if (sector_index != current_sector_index)
 800b930:	d0e6cd17 	ldw	r3,-25804(gp)
 800b934:	e0bffb17 	ldw	r2,-20(fp)
 800b938:	10c00726 	beq	r2,r3,800b958 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 800b93c:	e13ffb17 	ldw	r4,-20(fp)
 800b940:	000b883a 	mov	r5,zero
 800b944:	800b70c0 	call	800b70c <Read_Sector_Data>
 800b948:	1004c03a 	cmpne	r2,r2,zero
 800b94c:	1000021e 	bne	r2,zero,800b958 <mark_cluster+0x98>
        {
            return false;
 800b950:	e03fff15 	stw	zero,-4(fp)
 800b954:	00000d06 	br	800b98c <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 800b958:	d0a6cb17 	ldw	r2,-25812(gp)
 800b95c:	10800a17 	ldw	r2,40(r2)
 800b960:	1007883a 	mov	r3,r2
 800b964:	e0bffc17 	ldw	r2,-16(fp)
 800b968:	10803fcc 	andi	r2,r2,255
 800b96c:	1085883a 	add	r2,r2,r2
 800b970:	1885883a 	add	r2,r3,r2
 800b974:	e0fffd0f 	ldh	r3,-12(fp)
 800b978:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
 800b97c:	00800044 	movi	r2,1
 800b980:	d0a6cc15 	stw	r2,-25808(gp)
    return true;
 800b984:	00800044 	movi	r2,1
 800b988:	e0bfff15 	stw	r2,-4(fp)
 800b98c:	e0bfff17 	ldw	r2,-4(fp)
}
 800b990:	e037883a 	mov	sp,fp
 800b994:	dfc00117 	ldw	ra,4(sp)
 800b998:	df000017 	ldw	fp,0(sp)
 800b99c:	dec00204 	addi	sp,sp,8
 800b9a0:	f800283a 	ret

0800b9a4 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 800b9a4:	defff704 	addi	sp,sp,-36
 800b9a8:	dfc00815 	stw	ra,32(sp)
 800b9ac:	df000715 	stw	fp,28(sp)
 800b9b0:	df000704 	addi	fp,sp,28
	bool result = false;
 800b9b4:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
 800b9b8:	0009883a 	mov	r4,zero
 800b9bc:	000b883a 	mov	r5,zero
 800b9c0:	800b70c0 	call	800b70c <Read_Sector_Data>
 800b9c4:	1005003a 	cmpeq	r2,r2,zero
 800b9c8:	10005c1e 	bne	r2,zero,800bb3c <Check_for_Master_Boot_Record+0x198>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 800b9cc:	d0a6cb17 	ldw	r2,-25812(gp)
 800b9d0:	10800a17 	ldw	r2,40(r2)
 800b9d4:	10807f84 	addi	r2,r2,510
 800b9d8:	1080002b 	ldhuio	r2,0(r2)
 800b9dc:	10bfffcc 	andi	r2,r2,65535
 800b9e0:	10a0001c 	xori	r2,r2,32768
 800b9e4:	10a00004 	addi	r2,r2,-32768
 800b9e8:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
 800b9ec:	e0bffd17 	ldw	r2,-12(fp)
 800b9f0:	10ffffcc 	andi	r3,r2,65535
 800b9f4:	00aa9554 	movui	r2,43605
 800b9f8:	1880501e 	bne	r3,r2,800bb3c <Check_for_Master_Boot_Record+0x198>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 800b9fc:	e03ffe15 	stw	zero,-8(fp)
 800ba00:	00004b06 	br	800bb30 <Check_for_Master_Boot_Record+0x18c>
			{
				int partition_data_offset = (index * 16) + 0x01be;
 800ba04:	e0bffe17 	ldw	r2,-8(fp)
 800ba08:	1004913a 	slli	r2,r2,4
 800ba0c:	10806f84 	addi	r2,r2,446
 800ba10:	e0bffa15 	stw	r2,-24(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
 800ba14:	d0a6cb17 	ldw	r2,-25812(gp)
 800ba18:	10800a17 	ldw	r2,40(r2)
 800ba1c:	1007883a 	mov	r3,r2
 800ba20:	e0bffa17 	ldw	r2,-24(fp)
 800ba24:	1885883a 	add	r2,r3,r2
 800ba28:	10800104 	addi	r2,r2,4
 800ba2c:	10800023 	ldbuio	r2,0(r2)
 800ba30:	e0bff905 	stb	r2,-28(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
 800ba34:	e0bff907 	ldb	r2,-28(fp)
 800ba38:	10800060 	cmpeqi	r2,r2,1
 800ba3c:	1000091e 	bne	r2,zero,800ba64 <Check_for_Master_Boot_Record+0xc0>
 800ba40:	e0bff907 	ldb	r2,-28(fp)
 800ba44:	10800120 	cmpeqi	r2,r2,4
 800ba48:	1000061e 	bne	r2,zero,800ba64 <Check_for_Master_Boot_Record+0xc0>
 800ba4c:	e0bff907 	ldb	r2,-28(fp)
 800ba50:	108001a0 	cmpeqi	r2,r2,6
 800ba54:	1000031e 	bne	r2,zero,800ba64 <Check_for_Master_Boot_Record+0xc0>
 800ba58:	e0bff907 	ldb	r2,-28(fp)
 800ba5c:	10800398 	cmpnei	r2,r2,14
 800ba60:	1000301e 	bne	r2,zero,800bb24 <Check_for_Master_Boot_Record+0x180>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
 800ba64:	d0a6cb17 	ldw	r2,-25812(gp)
 800ba68:	10800a17 	ldw	r2,40(r2)
 800ba6c:	1007883a 	mov	r3,r2
 800ba70:	e0bffa17 	ldw	r2,-24(fp)
 800ba74:	1885883a 	add	r2,r3,r2
 800ba78:	10800284 	addi	r2,r2,10
 800ba7c:	1080002b 	ldhuio	r2,0(r2)
 800ba80:	10bfffcc 	andi	r2,r2,65535
 800ba84:	1008943a 	slli	r4,r2,16
 800ba88:	d0a6cb17 	ldw	r2,-25812(gp)
 800ba8c:	10800a17 	ldw	r2,40(r2)
 800ba90:	1007883a 	mov	r3,r2
 800ba94:	e0bffa17 	ldw	r2,-24(fp)
 800ba98:	1885883a 	add	r2,r3,r2
 800ba9c:	10800204 	addi	r2,r2,8
 800baa0:	1080002b 	ldhuio	r2,0(r2)
 800baa4:	10bfffcc 	andi	r2,r2,65535
 800baa8:	2084b03a 	or	r2,r4,r2
 800baac:	e0bffc15 	stw	r2,-16(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
 800bab0:	d0a6cb17 	ldw	r2,-25812(gp)
 800bab4:	10800a17 	ldw	r2,40(r2)
 800bab8:	1007883a 	mov	r3,r2
 800babc:	e0bffa17 	ldw	r2,-24(fp)
 800bac0:	1885883a 	add	r2,r3,r2
 800bac4:	10800384 	addi	r2,r2,14
 800bac8:	1080002b 	ldhuio	r2,0(r2)
 800bacc:	10bfffcc 	andi	r2,r2,65535
 800bad0:	1008943a 	slli	r4,r2,16
 800bad4:	d0a6cb17 	ldw	r2,-25812(gp)
 800bad8:	10800a17 	ldw	r2,40(r2)
 800badc:	1007883a 	mov	r3,r2
 800bae0:	e0bffa17 	ldw	r2,-24(fp)
 800bae4:	1885883a 	add	r2,r3,r2
 800bae8:	10800304 	addi	r2,r2,12
 800baec:	1080002b 	ldhuio	r2,0(r2)
 800baf0:	10bfffcc 	andi	r2,r2,65535
 800baf4:	2084b03a 	or	r2,r4,r2
 800baf8:	e0bffb15 	stw	r2,-20(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
 800bafc:	e0bffb17 	ldw	r2,-20(fp)
 800bb00:	10800050 	cmplti	r2,r2,1
 800bb04:	1000071e 	bne	r2,zero,800bb24 <Check_for_Master_Boot_Record+0x180>
					{
						result = true;
 800bb08:	00800044 	movi	r2,1
 800bb0c:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 800bb10:	e0bffb17 	ldw	r2,-20(fp)
 800bb14:	d0a6ca15 	stw	r2,-25816(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 800bb18:	e0bffc17 	ldw	r2,-16(fp)
 800bb1c:	d0a6c915 	stw	r2,-25820(gp)
						break;
 800bb20:	00000606 	br	800bb3c <Check_for_Master_Boot_Record+0x198>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 800bb24:	e0bffe17 	ldw	r2,-8(fp)
 800bb28:	10800044 	addi	r2,r2,1
 800bb2c:	e0bffe15 	stw	r2,-8(fp)
 800bb30:	e0bffe17 	ldw	r2,-8(fp)
 800bb34:	10800110 	cmplti	r2,r2,4
 800bb38:	103fb21e 	bne	r2,zero,800ba04 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 800bb3c:	e0bfff17 	ldw	r2,-4(fp)
}
 800bb40:	e037883a 	mov	sp,fp
 800bb44:	dfc00117 	ldw	ra,4(sp)
 800bb48:	df000017 	ldw	fp,0(sp)
 800bb4c:	dec00204 	addi	sp,sp,8
 800bb50:	f800283a 	ret

0800bb54 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 800bb54:	defff804 	addi	sp,sp,-32
 800bb58:	dfc00715 	stw	ra,28(sp)
 800bb5c:	df000615 	stw	fp,24(sp)
 800bb60:	df000604 	addi	fp,sp,24
 800bb64:	e13ffc15 	stw	r4,-16(fp)
 800bb68:	e17ffd15 	stw	r5,-12(fp)
 800bb6c:	e1bffe15 	stw	r6,-8(fp)
 800bb70:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 800bb74:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 800bb78:	e0bffc17 	ldw	r2,-16(fp)
 800bb7c:	108007cc 	andi	r2,r2,31
 800bb80:	1004c03a 	cmpne	r2,r2,zero
 800bb84:	10008e1e 	bne	r2,zero,800bdc0 <Read_File_Record_At_Offset+0x26c>
 800bb88:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 800bb8c:	1005003a 	cmpeq	r2,r2,zero
 800bb90:	10008b1e 	bne	r2,zero,800bdc0 <Read_File_Record_At_Offset+0x26c>
 800bb94:	d0a6c217 	ldw	r2,-25848(gp)
 800bb98:	1005003a 	cmpeq	r2,r2,zero
 800bb9c:	1000881e 	bne	r2,zero,800bdc0 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 800bba0:	e03ffa15 	stw	zero,-24(fp)
 800bba4:	00001006 	br	800bbe8 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
 800bba8:	e17ffa17 	ldw	r5,-24(fp)
 800bbac:	d0a6cb17 	ldw	r2,-25812(gp)
 800bbb0:	10800a17 	ldw	r2,40(r2)
 800bbb4:	1009883a 	mov	r4,r2
 800bbb8:	e0fffc17 	ldw	r3,-16(fp)
 800bbbc:	e0bffa17 	ldw	r2,-24(fp)
 800bbc0:	1885883a 	add	r2,r3,r2
 800bbc4:	2085883a 	add	r2,r4,r2
 800bbc8:	10800023 	ldbuio	r2,0(r2)
 800bbcc:	1007883a 	mov	r3,r2
 800bbd0:	e0bffd17 	ldw	r2,-12(fp)
 800bbd4:	1145883a 	add	r2,r2,r5
 800bbd8:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 800bbdc:	e0bffa17 	ldw	r2,-24(fp)
 800bbe0:	10800044 	addi	r2,r2,1
 800bbe4:	e0bffa15 	stw	r2,-24(fp)
 800bbe8:	e0bffa17 	ldw	r2,-24(fp)
 800bbec:	10800210 	cmplti	r2,r2,8
 800bbf0:	103fed1e 	bne	r2,zero,800bba8 <Read_File_Record_At_Offset+0x54>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 800bbf4:	e03ffa15 	stw	zero,-24(fp)
 800bbf8:	00001206 	br	800bc44 <Read_File_Record_At_Offset+0xf0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
 800bbfc:	e17ffa17 	ldw	r5,-24(fp)
 800bc00:	d0a6cb17 	ldw	r2,-25812(gp)
 800bc04:	10800a17 	ldw	r2,40(r2)
 800bc08:	1009883a 	mov	r4,r2
 800bc0c:	e0fffc17 	ldw	r3,-16(fp)
 800bc10:	e0bffa17 	ldw	r2,-24(fp)
 800bc14:	1885883a 	add	r2,r3,r2
 800bc18:	2085883a 	add	r2,r4,r2
 800bc1c:	10800204 	addi	r2,r2,8
 800bc20:	10800023 	ldbuio	r2,0(r2)
 800bc24:	1007883a 	mov	r3,r2
 800bc28:	e0bffd17 	ldw	r2,-12(fp)
 800bc2c:	2885883a 	add	r2,r5,r2
 800bc30:	10800204 	addi	r2,r2,8
 800bc34:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 800bc38:	e0bffa17 	ldw	r2,-24(fp)
 800bc3c:	10800044 	addi	r2,r2,1
 800bc40:	e0bffa15 	stw	r2,-24(fp)
 800bc44:	e0bffa17 	ldw	r2,-24(fp)
 800bc48:	108000d0 	cmplti	r2,r2,3
 800bc4c:	103feb1e 	bne	r2,zero,800bbfc <Read_File_Record_At_Offset+0xa8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
 800bc50:	d0a6cb17 	ldw	r2,-25812(gp)
 800bc54:	10800a17 	ldw	r2,40(r2)
 800bc58:	1007883a 	mov	r3,r2
 800bc5c:	e0bffc17 	ldw	r2,-16(fp)
 800bc60:	1885883a 	add	r2,r3,r2
 800bc64:	108002c4 	addi	r2,r2,11
 800bc68:	10800023 	ldbuio	r2,0(r2)
 800bc6c:	1007883a 	mov	r3,r2
 800bc70:	e0bffd17 	ldw	r2,-12(fp)
 800bc74:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
 800bc78:	d0a6cb17 	ldw	r2,-25812(gp)
 800bc7c:	10800a17 	ldw	r2,40(r2)
 800bc80:	1007883a 	mov	r3,r2
 800bc84:	e0bffc17 	ldw	r2,-16(fp)
 800bc88:	1885883a 	add	r2,r3,r2
 800bc8c:	10800384 	addi	r2,r2,14
 800bc90:	1080002b 	ldhuio	r2,0(r2)
 800bc94:	1007883a 	mov	r3,r2
 800bc98:	e0bffd17 	ldw	r2,-12(fp)
 800bc9c:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
 800bca0:	d0a6cb17 	ldw	r2,-25812(gp)
 800bca4:	10800a17 	ldw	r2,40(r2)
 800bca8:	1007883a 	mov	r3,r2
 800bcac:	e0bffc17 	ldw	r2,-16(fp)
 800bcb0:	1885883a 	add	r2,r3,r2
 800bcb4:	10800404 	addi	r2,r2,16
 800bcb8:	1080002b 	ldhuio	r2,0(r2)
 800bcbc:	1007883a 	mov	r3,r2
 800bcc0:	e0bffd17 	ldw	r2,-12(fp)
 800bcc4:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
 800bcc8:	d0a6cb17 	ldw	r2,-25812(gp)
 800bccc:	10800a17 	ldw	r2,40(r2)
 800bcd0:	1007883a 	mov	r3,r2
 800bcd4:	e0bffc17 	ldw	r2,-16(fp)
 800bcd8:	1885883a 	add	r2,r3,r2
 800bcdc:	10800484 	addi	r2,r2,18
 800bce0:	1080002b 	ldhuio	r2,0(r2)
 800bce4:	1007883a 	mov	r3,r2
 800bce8:	e0bffd17 	ldw	r2,-12(fp)
 800bcec:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
 800bcf0:	d0a6cb17 	ldw	r2,-25812(gp)
 800bcf4:	10800a17 	ldw	r2,40(r2)
 800bcf8:	1007883a 	mov	r3,r2
 800bcfc:	e0bffc17 	ldw	r2,-16(fp)
 800bd00:	1885883a 	add	r2,r3,r2
 800bd04:	10800584 	addi	r2,r2,22
 800bd08:	1080002b 	ldhuio	r2,0(r2)
 800bd0c:	1007883a 	mov	r3,r2
 800bd10:	e0bffd17 	ldw	r2,-12(fp)
 800bd14:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
 800bd18:	d0a6cb17 	ldw	r2,-25812(gp)
 800bd1c:	10800a17 	ldw	r2,40(r2)
 800bd20:	1007883a 	mov	r3,r2
 800bd24:	e0bffc17 	ldw	r2,-16(fp)
 800bd28:	1885883a 	add	r2,r3,r2
 800bd2c:	10800604 	addi	r2,r2,24
 800bd30:	1080002b 	ldhuio	r2,0(r2)
 800bd34:	1007883a 	mov	r3,r2
 800bd38:	e0bffd17 	ldw	r2,-12(fp)
 800bd3c:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
 800bd40:	d0a6cb17 	ldw	r2,-25812(gp)
 800bd44:	10800a17 	ldw	r2,40(r2)
 800bd48:	1007883a 	mov	r3,r2
 800bd4c:	e0bffc17 	ldw	r2,-16(fp)
 800bd50:	1885883a 	add	r2,r3,r2
 800bd54:	10800684 	addi	r2,r2,26
 800bd58:	1080002b 	ldhuio	r2,0(r2)
 800bd5c:	1007883a 	mov	r3,r2
 800bd60:	e0bffd17 	ldw	r2,-12(fp)
 800bd64:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
 800bd68:	d0a6cb17 	ldw	r2,-25812(gp)
 800bd6c:	10800a17 	ldw	r2,40(r2)
 800bd70:	1007883a 	mov	r3,r2
 800bd74:	e0bffc17 	ldw	r2,-16(fp)
 800bd78:	1885883a 	add	r2,r3,r2
 800bd7c:	10800704 	addi	r2,r2,28
 800bd80:	10800037 	ldwio	r2,0(r2)
 800bd84:	1007883a 	mov	r3,r2
 800bd88:	e0bffd17 	ldw	r2,-12(fp)
 800bd8c:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
 800bd90:	e0fffd17 	ldw	r3,-12(fp)
 800bd94:	e0bffe17 	ldw	r2,-8(fp)
 800bd98:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 800bd9c:	e0fffd17 	ldw	r3,-12(fp)
 800bda0:	e0bfff17 	ldw	r2,-4(fp)
 800bda4:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 800bda8:	e0bffc17 	ldw	r2,-16(fp)
 800bdac:	1007883a 	mov	r3,r2
 800bdb0:	e0bffd17 	ldw	r2,-12(fp)
 800bdb4:	10c00c0d 	sth	r3,48(r2)
		result = true;
 800bdb8:	00800044 	movi	r2,1
 800bdbc:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 800bdc0:	e0bffb17 	ldw	r2,-20(fp)
}
 800bdc4:	e037883a 	mov	sp,fp
 800bdc8:	dfc00117 	ldw	ra,4(sp)
 800bdcc:	df000017 	ldw	fp,0(sp)
 800bdd0:	dec00204 	addi	sp,sp,8
 800bdd4:	f800283a 	ret

0800bdd8 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 800bdd8:	defff904 	addi	sp,sp,-28
 800bddc:	dfc00615 	stw	ra,24(sp)
 800bde0:	df000515 	stw	fp,20(sp)
 800bde4:	df000504 	addi	fp,sp,20
 800bde8:	e13ffe15 	stw	r4,-8(fp)
 800bdec:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 800bdf0:	e03ffd15 	stw	zero,-12(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 800bdf4:	e0bffe17 	ldw	r2,-8(fp)
 800bdf8:	108007cc 	andi	r2,r2,31
 800bdfc:	1004c03a 	cmpne	r2,r2,zero
 800be00:	10009d1e 	bne	r2,zero,800c078 <Write_File_Record_At_Offset+0x2a0>
 800be04:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 800be08:	1005003a 	cmpeq	r2,r2,zero
 800be0c:	10009a1e 	bne	r2,zero,800c078 <Write_File_Record_At_Offset+0x2a0>
 800be10:	d0a6c217 	ldw	r2,-25848(gp)
 800be14:	1005003a 	cmpeq	r2,r2,zero
 800be18:	1000971e 	bne	r2,zero,800c078 <Write_File_Record_At_Offset+0x2a0>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 800be1c:	e03ffc15 	stw	zero,-16(fp)
 800be20:	00001e06 	br	800be9c <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
 800be24:	e0bffc17 	ldw	r2,-16(fp)
 800be28:	10c00044 	addi	r3,r2,1
 800be2c:	e0bfff17 	ldw	r2,-4(fp)
 800be30:	10c5883a 	add	r2,r2,r3
 800be34:	10800003 	ldbu	r2,0(r2)
 800be38:	10803fcc 	andi	r2,r2,255
 800be3c:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars << 8;
 800be40:	e0bffb0f 	ldh	r2,-20(fp)
 800be44:	1004923a 	slli	r2,r2,8
 800be48:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars | record->name[counter];
 800be4c:	e0fffc17 	ldw	r3,-16(fp)
 800be50:	e0bfff17 	ldw	r2,-4(fp)
 800be54:	10c5883a 	add	r2,r2,r3
 800be58:	10800003 	ldbu	r2,0(r2)
 800be5c:	10c03fcc 	andi	r3,r2,255
 800be60:	e0bffb0b 	ldhu	r2,-20(fp)
 800be64:	10c4b03a 	or	r2,r2,r3
 800be68:	e0bffb0d 	sth	r2,-20(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 800be6c:	d0a6cb17 	ldw	r2,-25812(gp)
 800be70:	10800a17 	ldw	r2,40(r2)
 800be74:	1009883a 	mov	r4,r2
 800be78:	e0fffe17 	ldw	r3,-8(fp)
 800be7c:	e0bffc17 	ldw	r2,-16(fp)
 800be80:	1885883a 	add	r2,r3,r2
 800be84:	2085883a 	add	r2,r4,r2
 800be88:	e0fffb0f 	ldh	r3,-20(fp)
 800be8c:	10c0002d 	sthio	r3,0(r2)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 800be90:	e0bffc17 	ldw	r2,-16(fp)
 800be94:	10800084 	addi	r2,r2,2
 800be98:	e0bffc15 	stw	r2,-16(fp)
 800be9c:	e0bffc17 	ldw	r2,-16(fp)
 800bea0:	10800210 	cmplti	r2,r2,8
 800bea4:	103fdf1e 	bne	r2,zero,800be24 <Write_File_Record_At_Offset+0x4c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 800bea8:	e03ffc15 	stw	zero,-16(fp)
 800beac:	00001306 	br	800befc <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
 800beb0:	d0a6cb17 	ldw	r2,-25812(gp)
 800beb4:	10800a17 	ldw	r2,40(r2)
 800beb8:	1009883a 	mov	r4,r2
 800bebc:	e0fffe17 	ldw	r3,-8(fp)
 800bec0:	e0bffc17 	ldw	r2,-16(fp)
 800bec4:	1885883a 	add	r2,r3,r2
 800bec8:	2085883a 	add	r2,r4,r2
 800becc:	11000204 	addi	r4,r2,8
 800bed0:	e0fffc17 	ldw	r3,-16(fp)
 800bed4:	e0bfff17 	ldw	r2,-4(fp)
 800bed8:	1885883a 	add	r2,r3,r2
 800bedc:	10800204 	addi	r2,r2,8
 800bee0:	10800003 	ldbu	r2,0(r2)
 800bee4:	10c03fcc 	andi	r3,r2,255
 800bee8:	2005883a 	mov	r2,r4
 800beec:	10c00025 	stbio	r3,0(r2)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 800bef0:	e0bffc17 	ldw	r2,-16(fp)
 800bef4:	10800044 	addi	r2,r2,1
 800bef8:	e0bffc15 	stw	r2,-16(fp)
 800befc:	e0bffc17 	ldw	r2,-16(fp)
 800bf00:	108000d0 	cmplti	r2,r2,3
 800bf04:	103fea1e 	bne	r2,zero,800beb0 <Write_File_Record_At_Offset+0xd8>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 800bf08:	d0a6cb17 	ldw	r2,-25812(gp)
 800bf0c:	10800a17 	ldw	r2,40(r2)
 800bf10:	1007883a 	mov	r3,r2
 800bf14:	e0bffe17 	ldw	r2,-8(fp)
 800bf18:	1885883a 	add	r2,r3,r2
 800bf1c:	110002c4 	addi	r4,r2,11
 800bf20:	e0bfff17 	ldw	r2,-4(fp)
 800bf24:	108002c3 	ldbu	r2,11(r2)
 800bf28:	10c03fcc 	andi	r3,r2,255
 800bf2c:	2005883a 	mov	r2,r4
 800bf30:	10c00025 	stbio	r3,0(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 800bf34:	d0a6cb17 	ldw	r2,-25812(gp)
 800bf38:	10800a17 	ldw	r2,40(r2)
 800bf3c:	1007883a 	mov	r3,r2
 800bf40:	e0bffe17 	ldw	r2,-8(fp)
 800bf44:	1885883a 	add	r2,r3,r2
 800bf48:	11000384 	addi	r4,r2,14
 800bf4c:	e0bfff17 	ldw	r2,-4(fp)
 800bf50:	1080030b 	ldhu	r2,12(r2)
 800bf54:	10ffffcc 	andi	r3,r2,65535
 800bf58:	2005883a 	mov	r2,r4
 800bf5c:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 800bf60:	d0a6cb17 	ldw	r2,-25812(gp)
 800bf64:	10800a17 	ldw	r2,40(r2)
 800bf68:	1007883a 	mov	r3,r2
 800bf6c:	e0bffe17 	ldw	r2,-8(fp)
 800bf70:	1885883a 	add	r2,r3,r2
 800bf74:	11000404 	addi	r4,r2,16
 800bf78:	e0bfff17 	ldw	r2,-4(fp)
 800bf7c:	1080038b 	ldhu	r2,14(r2)
 800bf80:	10ffffcc 	andi	r3,r2,65535
 800bf84:	2005883a 	mov	r2,r4
 800bf88:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
 800bf8c:	d0a6cb17 	ldw	r2,-25812(gp)
 800bf90:	10800a17 	ldw	r2,40(r2)
 800bf94:	1007883a 	mov	r3,r2
 800bf98:	e0bffe17 	ldw	r2,-8(fp)
 800bf9c:	1885883a 	add	r2,r3,r2
 800bfa0:	11000484 	addi	r4,r2,18
 800bfa4:	e0bfff17 	ldw	r2,-4(fp)
 800bfa8:	1080040b 	ldhu	r2,16(r2)
 800bfac:	10ffffcc 	andi	r3,r2,65535
 800bfb0:	2005883a 	mov	r2,r4
 800bfb4:	10c0002d 	sthio	r3,0(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
 800bfb8:	d0a6cb17 	ldw	r2,-25812(gp)
 800bfbc:	10800a17 	ldw	r2,40(r2)
 800bfc0:	1007883a 	mov	r3,r2
 800bfc4:	e0bffe17 	ldw	r2,-8(fp)
 800bfc8:	1885883a 	add	r2,r3,r2
 800bfcc:	11000584 	addi	r4,r2,22
 800bfd0:	e0bfff17 	ldw	r2,-4(fp)
 800bfd4:	1080048b 	ldhu	r2,18(r2)
 800bfd8:	10ffffcc 	andi	r3,r2,65535
 800bfdc:	2005883a 	mov	r2,r4
 800bfe0:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
 800bfe4:	d0a6cb17 	ldw	r2,-25812(gp)
 800bfe8:	10800a17 	ldw	r2,40(r2)
 800bfec:	1007883a 	mov	r3,r2
 800bff0:	e0bffe17 	ldw	r2,-8(fp)
 800bff4:	1885883a 	add	r2,r3,r2
 800bff8:	11000604 	addi	r4,r2,24
 800bffc:	e0bfff17 	ldw	r2,-4(fp)
 800c000:	1080050b 	ldhu	r2,20(r2)
 800c004:	10ffffcc 	andi	r3,r2,65535
 800c008:	2005883a 	mov	r2,r4
 800c00c:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
 800c010:	d0a6cb17 	ldw	r2,-25812(gp)
 800c014:	10800a17 	ldw	r2,40(r2)
 800c018:	1007883a 	mov	r3,r2
 800c01c:	e0bffe17 	ldw	r2,-8(fp)
 800c020:	1885883a 	add	r2,r3,r2
 800c024:	11000684 	addi	r4,r2,26
 800c028:	e0bfff17 	ldw	r2,-4(fp)
 800c02c:	1080058b 	ldhu	r2,22(r2)
 800c030:	10ffffcc 	andi	r3,r2,65535
 800c034:	2005883a 	mov	r2,r4
 800c038:	10c0002d 	sthio	r3,0(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
 800c03c:	d0a6cb17 	ldw	r2,-25812(gp)
 800c040:	10800a17 	ldw	r2,40(r2)
 800c044:	1007883a 	mov	r3,r2
 800c048:	e0bffe17 	ldw	r2,-8(fp)
 800c04c:	1885883a 	add	r2,r3,r2
 800c050:	11000704 	addi	r4,r2,28
 800c054:	e0bfff17 	ldw	r2,-4(fp)
 800c058:	10800617 	ldw	r2,24(r2)
 800c05c:	1007883a 	mov	r3,r2
 800c060:	2005883a 	mov	r2,r4
 800c064:	10c00035 	stwio	r3,0(r2)
        current_sector_modified = true;                  
 800c068:	00800044 	movi	r2,1
 800c06c:	d0a6cc15 	stw	r2,-25808(gp)
        result = true;
 800c070:	00800044 	movi	r2,1
 800c074:	e0bffd15 	stw	r2,-12(fp)
    }
    return result;
 800c078:	e0bffd17 	ldw	r2,-12(fp)
}
 800c07c:	e037883a 	mov	sp,fp
 800c080:	dfc00117 	ldw	ra,4(sp)
 800c084:	df000017 	ldw	fp,0(sp)
 800c088:	dec00204 	addi	sp,sp,8
 800c08c:	f800283a 	ret

0800c090 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 800c090:	defff804 	addi	sp,sp,-32
 800c094:	dfc00715 	stw	ra,28(sp)
 800c098:	df000615 	stw	fp,24(sp)
 800c09c:	dc000515 	stw	r16,20(sp)
 800c0a0:	df000504 	addi	fp,sp,20
 800c0a4:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 800c0a8:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 800c0ac:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
 800c0b0:	0009883a 	mov	r4,zero
 800c0b4:	e17fff17 	ldw	r5,-4(fp)
 800c0b8:	800b70c0 	call	800b70c <Read_Sector_Data>
 800c0bc:	e0bffe15 	stw	r2,-8(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 800c0c0:	d0a6cb17 	ldw	r2,-25812(gp)
 800c0c4:	10800a17 	ldw	r2,40(r2)
 800c0c8:	10807f84 	addi	r2,r2,510
 800c0cc:	1080002b 	ldhuio	r2,0(r2)
 800c0d0:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
 800c0d4:	e0bffc0f 	ldh	r2,-16(fp)
 800c0d8:	10ffffcc 	andi	r3,r2,65535
 800c0dc:	00aa9554 	movui	r2,43605
 800c0e0:	1881751e 	bne	r3,r2,800c6b8 <Check_for_DOS_FAT+0x628>
 800c0e4:	e0bffe17 	ldw	r2,-8(fp)
 800c0e8:	1005003a 	cmpeq	r2,r2,zero
 800c0ec:	1001721e 	bne	r2,zero,800c6b8 <Check_for_DOS_FAT+0x628>
	{
		int num_clusters = 0;
 800c0f0:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
 800c0f4:	d0a6cb17 	ldw	r2,-25812(gp)
 800c0f8:	10800a17 	ldw	r2,40(r2)
 800c0fc:	10800023 	ldbuio	r2,0(r2)
 800c100:	1007883a 	mov	r3,r2
 800c104:	00820074 	movhi	r2,2049
 800c108:	1091cc04 	addi	r2,r2,18224
 800c10c:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
 800c110:	d0a6cb17 	ldw	r2,-25812(gp)
 800c114:	10800a17 	ldw	r2,40(r2)
 800c118:	10800044 	addi	r2,r2,1
 800c11c:	10800023 	ldbuio	r2,0(r2)
 800c120:	1007883a 	mov	r3,r2
 800c124:	00820074 	movhi	r2,2049
 800c128:	1091cc04 	addi	r2,r2,18224
 800c12c:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
 800c130:	d0a6cb17 	ldw	r2,-25812(gp)
 800c134:	10800a17 	ldw	r2,40(r2)
 800c138:	10800084 	addi	r2,r2,2
 800c13c:	10800023 	ldbuio	r2,0(r2)
 800c140:	1007883a 	mov	r3,r2
 800c144:	00820074 	movhi	r2,2049
 800c148:	1091cc04 	addi	r2,r2,18224
 800c14c:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
 800c150:	e03ffd15 	stw	zero,-12(fp)
 800c154:	00001006 	br	800c198 <Check_for_DOS_FAT+0x108>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
 800c158:	e13ffd17 	ldw	r4,-12(fp)
 800c15c:	d0a6cb17 	ldw	r2,-25812(gp)
 800c160:	10800a17 	ldw	r2,40(r2)
 800c164:	1007883a 	mov	r3,r2
 800c168:	e0bffd17 	ldw	r2,-12(fp)
 800c16c:	1885883a 	add	r2,r3,r2
 800c170:	108000c4 	addi	r2,r2,3
 800c174:	10800023 	ldbuio	r2,0(r2)
 800c178:	1007883a 	mov	r3,r2
 800c17c:	00820074 	movhi	r2,2049
 800c180:	1091cc04 	addi	r2,r2,18224
 800c184:	1105883a 	add	r2,r2,r4
 800c188:	10c000c5 	stb	r3,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
 800c18c:	e0bffd17 	ldw	r2,-12(fp)
 800c190:	10800044 	addi	r2,r2,1
 800c194:	e0bffd15 	stw	r2,-12(fp)
 800c198:	e0bffd17 	ldw	r2,-12(fp)
 800c19c:	10800210 	cmplti	r2,r2,8
 800c1a0:	103fed1e 	bne	r2,zero,800c158 <Check_for_DOS_FAT+0xc8>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
 800c1a4:	d0a6cb17 	ldw	r2,-25812(gp)
 800c1a8:	10800a17 	ldw	r2,40(r2)
 800c1ac:	10800304 	addi	r2,r2,12
 800c1b0:	10800023 	ldbuio	r2,0(r2)
 800c1b4:	10803fcc 	andi	r2,r2,255
 800c1b8:	1004923a 	slli	r2,r2,8
 800c1bc:	1007883a 	mov	r3,r2
 800c1c0:	d0a6cb17 	ldw	r2,-25812(gp)
 800c1c4:	10800a17 	ldw	r2,40(r2)
 800c1c8:	108002c4 	addi	r2,r2,11
 800c1cc:	10800023 	ldbuio	r2,0(r2)
 800c1d0:	10803fcc 	andi	r2,r2,255
 800c1d4:	1080201c 	xori	r2,r2,128
 800c1d8:	10bfe004 	addi	r2,r2,-128
 800c1dc:	1884b03a 	or	r2,r3,r2
 800c1e0:	1007883a 	mov	r3,r2
 800c1e4:	00820074 	movhi	r2,2049
 800c1e8:	1091cc04 	addi	r2,r2,18224
 800c1ec:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
 800c1f0:	d0a6cb17 	ldw	r2,-25812(gp)
 800c1f4:	10800a17 	ldw	r2,40(r2)
 800c1f8:	10800344 	addi	r2,r2,13
 800c1fc:	10800023 	ldbuio	r2,0(r2)
 800c200:	1007883a 	mov	r3,r2
 800c204:	00820074 	movhi	r2,2049
 800c208:	1091cc04 	addi	r2,r2,18224
 800c20c:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
 800c210:	d0a6cb17 	ldw	r2,-25812(gp)
 800c214:	10800a17 	ldw	r2,40(r2)
 800c218:	10800384 	addi	r2,r2,14
 800c21c:	1080002b 	ldhuio	r2,0(r2)
 800c220:	1007883a 	mov	r3,r2
 800c224:	00820074 	movhi	r2,2049
 800c228:	1091cc04 	addi	r2,r2,18224
 800c22c:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
 800c230:	d0a6cb17 	ldw	r2,-25812(gp)
 800c234:	10800a17 	ldw	r2,40(r2)
 800c238:	10800404 	addi	r2,r2,16
 800c23c:	10800023 	ldbuio	r2,0(r2)
 800c240:	1007883a 	mov	r3,r2
 800c244:	00820074 	movhi	r2,2049
 800c248:	1091cc04 	addi	r2,r2,18224
 800c24c:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
 800c250:	d0a6cb17 	ldw	r2,-25812(gp)
 800c254:	10800a17 	ldw	r2,40(r2)
 800c258:	10800484 	addi	r2,r2,18
 800c25c:	10800023 	ldbuio	r2,0(r2)
 800c260:	10803fcc 	andi	r2,r2,255
 800c264:	1004923a 	slli	r2,r2,8
 800c268:	1007883a 	mov	r3,r2
 800c26c:	d0a6cb17 	ldw	r2,-25812(gp)
 800c270:	10800a17 	ldw	r2,40(r2)
 800c274:	10800444 	addi	r2,r2,17
 800c278:	10800023 	ldbuio	r2,0(r2)
 800c27c:	10803fcc 	andi	r2,r2,255
 800c280:	1884b03a 	or	r2,r3,r2
 800c284:	1007883a 	mov	r3,r2
 800c288:	00820074 	movhi	r2,2049
 800c28c:	1091cc04 	addi	r2,r2,18224
 800c290:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
 800c294:	d0a6cb17 	ldw	r2,-25812(gp)
 800c298:	10800a17 	ldw	r2,40(r2)
 800c29c:	10800504 	addi	r2,r2,20
 800c2a0:	10800023 	ldbuio	r2,0(r2)
 800c2a4:	10803fcc 	andi	r2,r2,255
 800c2a8:	1004923a 	slli	r2,r2,8
 800c2ac:	1007883a 	mov	r3,r2
 800c2b0:	d0a6cb17 	ldw	r2,-25812(gp)
 800c2b4:	10800a17 	ldw	r2,40(r2)
 800c2b8:	108004c4 	addi	r2,r2,19
 800c2bc:	10800023 	ldbuio	r2,0(r2)
 800c2c0:	10803fcc 	andi	r2,r2,255
 800c2c4:	1884b03a 	or	r2,r3,r2
 800c2c8:	1007883a 	mov	r3,r2
 800c2cc:	00820074 	movhi	r2,2049
 800c2d0:	1091cc04 	addi	r2,r2,18224
 800c2d4:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
 800c2d8:	d0a6cb17 	ldw	r2,-25812(gp)
 800c2dc:	10800a17 	ldw	r2,40(r2)
 800c2e0:	10800544 	addi	r2,r2,21
 800c2e4:	10800023 	ldbuio	r2,0(r2)
 800c2e8:	1007883a 	mov	r3,r2
 800c2ec:	00820074 	movhi	r2,2049
 800c2f0:	1091cc04 	addi	r2,r2,18224
 800c2f4:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
 800c2f8:	d0a6cb17 	ldw	r2,-25812(gp)
 800c2fc:	10800a17 	ldw	r2,40(r2)
 800c300:	10800584 	addi	r2,r2,22
 800c304:	1080002b 	ldhuio	r2,0(r2)
 800c308:	1007883a 	mov	r3,r2
 800c30c:	00820074 	movhi	r2,2049
 800c310:	1091cc04 	addi	r2,r2,18224
 800c314:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
 800c318:	d0a6cb17 	ldw	r2,-25812(gp)
 800c31c:	10800a17 	ldw	r2,40(r2)
 800c320:	10800604 	addi	r2,r2,24
 800c324:	1080002b 	ldhuio	r2,0(r2)
 800c328:	1007883a 	mov	r3,r2
 800c32c:	00820074 	movhi	r2,2049
 800c330:	1091cc04 	addi	r2,r2,18224
 800c334:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
 800c338:	d0a6cb17 	ldw	r2,-25812(gp)
 800c33c:	10800a17 	ldw	r2,40(r2)
 800c340:	10800684 	addi	r2,r2,26
 800c344:	1080002b 	ldhuio	r2,0(r2)
 800c348:	1007883a 	mov	r3,r2
 800c34c:	00820074 	movhi	r2,2049
 800c350:	1091cc04 	addi	r2,r2,18224
 800c354:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
 800c358:	d0a6cb17 	ldw	r2,-25812(gp)
 800c35c:	10800a17 	ldw	r2,40(r2)
 800c360:	10800704 	addi	r2,r2,28
 800c364:	10800037 	ldwio	r2,0(r2)
 800c368:	1007883a 	mov	r3,r2
 800c36c:	00820074 	movhi	r2,2049
 800c370:	1091cc04 	addi	r2,r2,18224
 800c374:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
 800c378:	d0a6cb17 	ldw	r2,-25812(gp)
 800c37c:	10800a17 	ldw	r2,40(r2)
 800c380:	10800804 	addi	r2,r2,32
 800c384:	10800037 	ldwio	r2,0(r2)
 800c388:	1007883a 	mov	r3,r2
 800c38c:	00820074 	movhi	r2,2049
 800c390:	1091cc04 	addi	r2,r2,18224
 800c394:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
 800c398:	d0a6cb17 	ldw	r2,-25812(gp)
 800c39c:	10800a17 	ldw	r2,40(r2)
 800c3a0:	10800904 	addi	r2,r2,36
 800c3a4:	10800023 	ldbuio	r2,0(r2)
 800c3a8:	1007883a 	mov	r3,r2
 800c3ac:	00820074 	movhi	r2,2049
 800c3b0:	1091cc04 	addi	r2,r2,18224
 800c3b4:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
 800c3b8:	d0a6cb17 	ldw	r2,-25812(gp)
 800c3bc:	10800a17 	ldw	r2,40(r2)
 800c3c0:	10800944 	addi	r2,r2,37
 800c3c4:	10800023 	ldbuio	r2,0(r2)
 800c3c8:	1007883a 	mov	r3,r2
 800c3cc:	00820074 	movhi	r2,2049
 800c3d0:	1091cc04 	addi	r2,r2,18224
 800c3d4:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
 800c3d8:	d0a6cb17 	ldw	r2,-25812(gp)
 800c3dc:	10800a17 	ldw	r2,40(r2)
 800c3e0:	10800984 	addi	r2,r2,38
 800c3e4:	10800023 	ldbuio	r2,0(r2)
 800c3e8:	1007883a 	mov	r3,r2
 800c3ec:	00820074 	movhi	r2,2049
 800c3f0:	1091cc04 	addi	r2,r2,18224
 800c3f4:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
 800c3f8:	00820074 	movhi	r2,2049
 800c3fc:	1091cc04 	addi	r2,r2,18224
 800c400:	1080040b 	ldhu	r2,16(r2)
 800c404:	10ffffcc 	andi	r3,r2,65535
 800c408:	00820074 	movhi	r2,2049
 800c40c:	1091cc04 	addi	r2,r2,18224
 800c410:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
 800c414:	00820074 	movhi	r2,2049
 800c418:	1091cc04 	addi	r2,r2,18224
 800c41c:	10c01117 	ldw	r3,68(r2)
 800c420:	00820074 	movhi	r2,2049
 800c424:	1091cc04 	addi	r2,r2,18224
 800c428:	1080068b 	ldhu	r2,26(r2)
 800c42c:	10bfffcc 	andi	r2,r2,65535
 800c430:	1887883a 	add	r3,r3,r2
 800c434:	00820074 	movhi	r2,2049
 800c438:	1091cc04 	addi	r2,r2,18224
 800c43c:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
 800c440:	00820074 	movhi	r2,2049
 800c444:	1091cc04 	addi	r2,r2,18224
 800c448:	10c01217 	ldw	r3,72(r2)
 800c44c:	00820074 	movhi	r2,2049
 800c450:	1091cc04 	addi	r2,r2,18224
 800c454:	1080068b 	ldhu	r2,26(r2)
 800c458:	10bfffcc 	andi	r2,r2,65535
 800c45c:	1887883a 	add	r3,r3,r2
 800c460:	00820074 	movhi	r2,2049
 800c464:	1091cc04 	addi	r2,r2,18224
 800c468:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
 800c46c:	00820074 	movhi	r2,2049
 800c470:	1091cc04 	addi	r2,r2,18224
 800c474:	14001317 	ldw	r16,76(r2)
 800c478:	00820074 	movhi	r2,2049
 800c47c:	1091cc04 	addi	r2,r2,18224
 800c480:	1080050b 	ldhu	r2,20(r2)
 800c484:	10bfffcc 	andi	r2,r2,65535
 800c488:	1008917a 	slli	r4,r2,5
 800c48c:	00820074 	movhi	r2,2049
 800c490:	1091cc04 	addi	r2,r2,18224
 800c494:	1080030b 	ldhu	r2,12(r2)
 800c498:	117fffcc 	andi	r5,r2,65535
 800c49c:	80097bc0 	call	80097bc <__divsi3>
 800c4a0:	8087883a 	add	r3,r16,r2
 800c4a4:	00820074 	movhi	r2,2049
 800c4a8:	1091cc04 	addi	r2,r2,18224
 800c4ac:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
 800c4b0:	00820074 	movhi	r2,2049
 800c4b4:	1091cc04 	addi	r2,r2,18224
 800c4b8:	1080058b 	ldhu	r2,22(r2)
 800c4bc:	10bfffcc 	andi	r2,r2,65535
 800c4c0:	1005003a 	cmpeq	r2,r2,zero
 800c4c4:	10000b1e 	bne	r2,zero,800c4f4 <Check_for_DOS_FAT+0x464>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
 800c4c8:	00820074 	movhi	r2,2049
 800c4cc:	1091cc04 	addi	r2,r2,18224
 800c4d0:	1080058b 	ldhu	r2,22(r2)
 800c4d4:	113fffcc 	andi	r4,r2,65535
 800c4d8:	00820074 	movhi	r2,2049
 800c4dc:	1091cc04 	addi	r2,r2,18224
 800c4e0:	10800383 	ldbu	r2,14(r2)
 800c4e4:	11403fcc 	andi	r5,r2,255
 800c4e8:	80097bc0 	call	80097bc <__divsi3>
 800c4ec:	e0bffb15 	stw	r2,-20(fp)
 800c4f0:	00000906 	br	800c518 <Check_for_DOS_FAT+0x488>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
 800c4f4:	00820074 	movhi	r2,2049
 800c4f8:	1091cc04 	addi	r2,r2,18224
 800c4fc:	11000917 	ldw	r4,36(r2)
 800c500:	00820074 	movhi	r2,2049
 800c504:	1091cc04 	addi	r2,r2,18224
 800c508:	10800383 	ldbu	r2,14(r2)
 800c50c:	11403fcc 	andi	r5,r2,255
 800c510:	800987c0 	call	800987c <__udivsi3>
 800c514:	e0bffb15 	stw	r2,-20(fp)
		}
		if (num_clusters < 4087)
 800c518:	e0bffb17 	ldw	r2,-20(fp)
 800c51c:	1083fdc8 	cmpgei	r2,r2,4087
 800c520:	1000051e 	bne	r2,zero,800c538 <Check_for_DOS_FAT+0x4a8>
		{
			boot_sector_data.bits_for_cluster_index = 12;
 800c524:	00c20074 	movhi	r3,2049
 800c528:	18d1cc04 	addi	r3,r3,18224
 800c52c:	00800304 	movi	r2,12
 800c530:	18801085 	stb	r2,66(r3)
 800c534:	00000c06 	br	800c568 <Check_for_DOS_FAT+0x4d8>
		}
		else if (num_clusters <= 65517)
 800c538:	e0fffb17 	ldw	r3,-20(fp)
 800c53c:	00bffb54 	movui	r2,65517
 800c540:	10c00516 	blt	r2,r3,800c558 <Check_for_DOS_FAT+0x4c8>
		{
			boot_sector_data.bits_for_cluster_index = 16;
 800c544:	00c20074 	movhi	r3,2049
 800c548:	18d1cc04 	addi	r3,r3,18224
 800c54c:	00800404 	movi	r2,16
 800c550:	18801085 	stb	r2,66(r3)
 800c554:	00000406 	br	800c568 <Check_for_DOS_FAT+0x4d8>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
 800c558:	00c20074 	movhi	r3,2049
 800c55c:	18d1cc04 	addi	r3,r3,18224
 800c560:	00800804 	movi	r2,32
 800c564:	18801085 	stb	r2,66(r3)
		}
	    
		for (counter = 0; counter < 4; counter++)
 800c568:	e03ffd15 	stw	zero,-12(fp)
 800c56c:	00001106 	br	800c5b4 <Check_for_DOS_FAT+0x524>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
 800c570:	e13ffd17 	ldw	r4,-12(fp)
 800c574:	d0a6cb17 	ldw	r2,-25812(gp)
 800c578:	10800a17 	ldw	r2,40(r2)
 800c57c:	1007883a 	mov	r3,r2
 800c580:	e0bffd17 	ldw	r2,-12(fp)
 800c584:	1885883a 	add	r2,r3,r2
 800c588:	108009c4 	addi	r2,r2,39
 800c58c:	10800023 	ldbuio	r2,0(r2)
 800c590:	1007883a 	mov	r3,r2
 800c594:	00820074 	movhi	r2,2049
 800c598:	1091cc04 	addi	r2,r2,18224
 800c59c:	2085883a 	add	r2,r4,r2
 800c5a0:	10800a04 	addi	r2,r2,40
 800c5a4:	10c000c5 	stb	r3,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
 800c5a8:	e0bffd17 	ldw	r2,-12(fp)
 800c5ac:	10800044 	addi	r2,r2,1
 800c5b0:	e0bffd15 	stw	r2,-12(fp)
 800c5b4:	e0bffd17 	ldw	r2,-12(fp)
 800c5b8:	10800110 	cmplti	r2,r2,4
 800c5bc:	103fec1e 	bne	r2,zero,800c570 <Check_for_DOS_FAT+0x4e0>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 800c5c0:	e03ffd15 	stw	zero,-12(fp)
 800c5c4:	00001106 	br	800c60c <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
 800c5c8:	e13ffd17 	ldw	r4,-12(fp)
 800c5cc:	d0a6cb17 	ldw	r2,-25812(gp)
 800c5d0:	10800a17 	ldw	r2,40(r2)
 800c5d4:	1007883a 	mov	r3,r2
 800c5d8:	e0bffd17 	ldw	r2,-12(fp)
 800c5dc:	1885883a 	add	r2,r3,r2
 800c5e0:	10800ac4 	addi	r2,r2,43
 800c5e4:	10800023 	ldbuio	r2,0(r2)
 800c5e8:	1007883a 	mov	r3,r2
 800c5ec:	00820074 	movhi	r2,2049
 800c5f0:	1091cc04 	addi	r2,r2,18224
 800c5f4:	2085883a 	add	r2,r4,r2
 800c5f8:	10800b04 	addi	r2,r2,44
 800c5fc:	10c000c5 	stb	r3,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 800c600:	e0bffd17 	ldw	r2,-12(fp)
 800c604:	10800044 	addi	r2,r2,1
 800c608:	e0bffd15 	stw	r2,-12(fp)
 800c60c:	e0bffd17 	ldw	r2,-12(fp)
 800c610:	108002d0 	cmplti	r2,r2,11
 800c614:	103fec1e 	bne	r2,zero,800c5c8 <Check_for_DOS_FAT+0x538>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 800c618:	e03ffd15 	stw	zero,-12(fp)
 800c61c:	00001106 	br	800c664 <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
 800c620:	e13ffd17 	ldw	r4,-12(fp)
 800c624:	d0a6cb17 	ldw	r2,-25812(gp)
 800c628:	10800a17 	ldw	r2,40(r2)
 800c62c:	1007883a 	mov	r3,r2
 800c630:	e0bffd17 	ldw	r2,-12(fp)
 800c634:	1885883a 	add	r2,r3,r2
 800c638:	10800d84 	addi	r2,r2,54
 800c63c:	10800023 	ldbuio	r2,0(r2)
 800c640:	1007883a 	mov	r3,r2
 800c644:	00820074 	movhi	r2,2049
 800c648:	1091cc04 	addi	r2,r2,18224
 800c64c:	2085883a 	add	r2,r4,r2
 800c650:	10800e04 	addi	r2,r2,56
 800c654:	10c00085 	stb	r3,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 800c658:	e0bffd17 	ldw	r2,-12(fp)
 800c65c:	10800044 	addi	r2,r2,1
 800c660:	e0bffd15 	stw	r2,-12(fp)
 800c664:	e0bffd17 	ldw	r2,-12(fp)
 800c668:	10800210 	cmplti	r2,r2,8
 800c66c:	103fec1e 	bne	r2,zero,800c620 <Check_for_DOS_FAT+0x590>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 800c670:	e03ffd15 	stw	zero,-12(fp)
 800c674:	00000a06 	br	800c6a0 <Check_for_DOS_FAT+0x610>
		{
			active_files[counter].in_use = false;
 800c678:	e0bffd17 	ldw	r2,-12(fp)
 800c67c:	00c20074 	movhi	r3,2049
 800c680:	18d1e104 	addi	r3,r3,18308
 800c684:	100491ba 	slli	r2,r2,6
 800c688:	10c5883a 	add	r2,r2,r3
 800c68c:	10800f04 	addi	r2,r2,60
 800c690:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 800c694:	e0bffd17 	ldw	r2,-12(fp)
 800c698:	10800044 	addi	r2,r2,1
 800c69c:	e0bffd15 	stw	r2,-12(fp)
 800c6a0:	e0bffd17 	ldw	r2,-12(fp)
 800c6a4:	10800510 	cmplti	r2,r2,20
 800c6a8:	103ff31e 	bne	r2,zero,800c678 <Check_for_DOS_FAT+0x5e8>
		{
			active_files[counter].in_use = false;
		}
		result = true;
 800c6ac:	00800044 	movi	r2,1
 800c6b0:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
 800c6b4:	00000106 	br	800c6bc <Check_for_DOS_FAT+0x62c>
		}
		result = true;
	}
    else
    {
        result = false;
 800c6b8:	e03ffe15 	stw	zero,-8(fp)
    }
	return result;
 800c6bc:	e0bffe17 	ldw	r2,-8(fp)
}
 800c6c0:	e037883a 	mov	sp,fp
 800c6c4:	dfc00217 	ldw	ra,8(sp)
 800c6c8:	df000117 	ldw	fp,4(sp)
 800c6cc:	dc000017 	ldw	r16,0(sp)
 800c6d0:	dec00304 	addi	sp,sp,12
 800c6d4:	f800283a 	ret

0800c6d8 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 800c6d8:	defffc04 	addi	sp,sp,-16
 800c6dc:	dfc00315 	stw	ra,12(sp)
 800c6e0:	df000215 	stw	fp,8(sp)
 800c6e4:	df000204 	addi	fp,sp,8
	bool result = false;
 800c6e8:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
 800c6ec:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 800c6f0:	1005003a 	cmpeq	r2,r2,zero
 800c6f4:	1000301e 	bne	r2,zero,800c7b8 <Look_for_FAT16+0xe0>
	{
		short int csd_file_format = *CSD_register_w0;
 800c6f8:	d0a6c517 	ldw	r2,-25836(gp)
 800c6fc:	1080000b 	ldhu	r2,0(r2)
 800c700:	e0bffe0d 	sth	r2,-8(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
 800c704:	d026c915 	stw	zero,-25820(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
 800c708:	d026ca15 	stw	zero,-25816(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
 800c70c:	e0bffe0f 	ldh	r2,-8(fp)
 800c710:	1004803a 	cmplt	r2,r2,zero
 800c714:	1000281e 	bne	r2,zero,800c7b8 <Look_for_FAT16+0xe0>
 800c718:	e0bffe0b 	ldhu	r2,-8(fp)
 800c71c:	10bfffcc 	andi	r2,r2,65535
 800c720:	1083000c 	andi	r2,r2,3072
 800c724:	10830020 	cmpeqi	r2,r2,3072
 800c728:	1000231e 	bne	r2,zero,800c7b8 <Look_for_FAT16+0xe0>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
 800c72c:	e0bffe0b 	ldhu	r2,-8(fp)
 800c730:	10bfffcc 	andi	r2,r2,65535
 800c734:	1083000c 	andi	r2,r2,3072
 800c738:	10810018 	cmpnei	r2,r2,1024
 800c73c:	1000031e 	bne	r2,zero,800c74c <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 800c740:	0009883a 	mov	r4,zero
 800c744:	800c0900 	call	800c090 <Check_for_DOS_FAT>
 800c748:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
 800c74c:	e0bffe0b 	ldhu	r2,-8(fp)
 800c750:	10bfffcc 	andi	r2,r2,65535
 800c754:	1083000c 	andi	r2,r2,3072
 800c758:	1004c03a 	cmpne	r2,r2,zero
 800c75c:	1000061e 	bne	r2,zero,800c778 <Look_for_FAT16+0xa0>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
 800c760:	800b9a40 	call	800b9a4 <Check_for_Master_Boot_Record>
 800c764:	1005003a 	cmpeq	r2,r2,zero
 800c768:	1000031e 	bne	r2,zero,800c778 <Look_for_FAT16+0xa0>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
 800c76c:	d126c917 	ldw	r4,-25820(gp)
 800c770:	800c0900 	call	800c090 <Check_for_DOS_FAT>
 800c774:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
 800c778:	e0bfff17 	ldw	r2,-4(fp)
 800c77c:	10800058 	cmpnei	r2,r2,1
 800c780:	10000d1e 	bne	r2,zero,800c7b8 <Look_for_FAT16+0xe0>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
 800c784:	00820074 	movhi	r2,2049
 800c788:	1091cc04 	addi	r2,r2,18224
 800c78c:	10801083 	ldbu	r2,66(r2)
 800c790:	10803fcc 	andi	r2,r2,255
 800c794:	10800420 	cmpeqi	r2,r2,16
 800c798:	1000021e 	bne	r2,zero,800c7a4 <Look_for_FAT16+0xcc>
				{
					result = false;
 800c79c:	e03fff15 	stw	zero,-4(fp)
 800c7a0:	00000506 	br	800c7b8 <Look_for_FAT16+0xe0>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
 800c7a4:	00820074 	movhi	r2,2049
 800c7a8:	1091cc04 	addi	r2,r2,18224
 800c7ac:	1080058b 	ldhu	r2,22(r2)
 800c7b0:	10bfffcc 	andi	r2,r2,65535
 800c7b4:	d0a6ca15 	stw	r2,-25816(gp)
				}
			}
		}
	}
	return result;
 800c7b8:	e0bfff17 	ldw	r2,-4(fp)
}
 800c7bc:	e037883a 	mov	sp,fp
 800c7c0:	dfc00117 	ldw	ra,4(sp)
 800c7c4:	df000017 	ldw	fp,0(sp)
 800c7c8:	dec00204 	addi	sp,sp,8
 800c7cc:	f800283a 	ret

0800c7d0 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 800c7d0:	defffb04 	addi	sp,sp,-20
 800c7d4:	dfc00415 	stw	ra,16(sp)
 800c7d8:	df000315 	stw	fp,12(sp)
 800c7dc:	df000304 	addi	fp,sp,12
 800c7e0:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
 800c7e4:	e13fff17 	ldw	r4,-4(fp)
 800c7e8:	8000dec0 	call	8000dec <strlen>
 800c7ec:	e0bffd15 	stw	r2,-12(fp)
    
    for (index = 0; index < length; index++)
 800c7f0:	e03ffe15 	stw	zero,-8(fp)
 800c7f4:	00002206 	br	800c880 <filename_to_upper_case+0xb0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
 800c7f8:	e0bffe17 	ldw	r2,-8(fp)
 800c7fc:	1007883a 	mov	r3,r2
 800c800:	e0bfff17 	ldw	r2,-4(fp)
 800c804:	1885883a 	add	r2,r3,r2
 800c808:	10800003 	ldbu	r2,0(r2)
 800c80c:	10803fcc 	andi	r2,r2,255
 800c810:	1080201c 	xori	r2,r2,128
 800c814:	10bfe004 	addi	r2,r2,-128
 800c818:	10801850 	cmplti	r2,r2,97
 800c81c:	1000151e 	bne	r2,zero,800c874 <filename_to_upper_case+0xa4>
 800c820:	e0bffe17 	ldw	r2,-8(fp)
 800c824:	1007883a 	mov	r3,r2
 800c828:	e0bfff17 	ldw	r2,-4(fp)
 800c82c:	1885883a 	add	r2,r3,r2
 800c830:	10800003 	ldbu	r2,0(r2)
 800c834:	10803fcc 	andi	r2,r2,255
 800c838:	1080201c 	xori	r2,r2,128
 800c83c:	10bfe004 	addi	r2,r2,-128
 800c840:	10801ec8 	cmpgei	r2,r2,123
 800c844:	10000b1e 	bne	r2,zero,800c874 <filename_to_upper_case+0xa4>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
 800c848:	e0bffe17 	ldw	r2,-8(fp)
 800c84c:	1007883a 	mov	r3,r2
 800c850:	e0bfff17 	ldw	r2,-4(fp)
 800c854:	1889883a 	add	r4,r3,r2
 800c858:	e0bffe17 	ldw	r2,-8(fp)
 800c85c:	1007883a 	mov	r3,r2
 800c860:	e0bfff17 	ldw	r2,-4(fp)
 800c864:	1885883a 	add	r2,r3,r2
 800c868:	10800003 	ldbu	r2,0(r2)
 800c86c:	10bff804 	addi	r2,r2,-32
 800c870:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
 800c874:	e0bffe17 	ldw	r2,-8(fp)
 800c878:	10800044 	addi	r2,r2,1
 800c87c:	e0bffe15 	stw	r2,-8(fp)
 800c880:	e0fffe17 	ldw	r3,-8(fp)
 800c884:	e0bffd17 	ldw	r2,-12(fp)
 800c888:	18bfdb16 	blt	r3,r2,800c7f8 <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
 800c88c:	e037883a 	mov	sp,fp
 800c890:	dfc00117 	ldw	ra,4(sp)
 800c894:	df000017 	ldw	fp,0(sp)
 800c898:	dec00204 	addi	sp,sp,8
 800c89c:	f800283a 	ret

0800c8a0 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 800c8a0:	defff804 	addi	sp,sp,-32
 800c8a4:	dfc00715 	stw	ra,28(sp)
 800c8a8:	df000615 	stw	fp,24(sp)
 800c8ac:	df000604 	addi	fp,sp,24
 800c8b0:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
 800c8b4:	e13fff17 	ldw	r4,-4(fp)
 800c8b8:	8000dec0 	call	8000dec <strlen>
 800c8bc:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
 800c8c0:	00bfffc4 	movi	r2,-1
 800c8c4:	e0bffc15 	stw	r2,-16(fp)
    int last_period = -1;
 800c8c8:	00bfffc4 	movi	r2,-1
 800c8cc:	e0bffb15 	stw	r2,-20(fp)
    bool result = true;
 800c8d0:	00800044 	movi	r2,1
 800c8d4:	e0bffa15 	stw	r2,-24(fp)
    
    for(index = 0; index < length; index++)
 800c8d8:	e03ffd15 	stw	zero,-12(fp)
 800c8dc:	00007606 	br	800cab8 <check_file_name_for_FAT16_compliance+0x218>
    {
        if ((file_name[index] == ' ') ||
 800c8e0:	e0bffd17 	ldw	r2,-12(fp)
 800c8e4:	1007883a 	mov	r3,r2
 800c8e8:	e0bfff17 	ldw	r2,-4(fp)
 800c8ec:	1885883a 	add	r2,r3,r2
 800c8f0:	10800003 	ldbu	r2,0(r2)
 800c8f4:	10803fcc 	andi	r2,r2,255
 800c8f8:	1080201c 	xori	r2,r2,128
 800c8fc:	10bfe004 	addi	r2,r2,-128
 800c900:	10800820 	cmpeqi	r2,r2,32
 800c904:	1000431e 	bne	r2,zero,800ca14 <check_file_name_for_FAT16_compliance+0x174>
 800c908:	e0bffd17 	ldw	r2,-12(fp)
 800c90c:	10ffffc4 	addi	r3,r2,-1
 800c910:	e0bffc17 	ldw	r2,-16(fp)
 800c914:	1880141e 	bne	r3,r2,800c968 <check_file_name_for_FAT16_compliance+0xc8>
 800c918:	e0bffd17 	ldw	r2,-12(fp)
 800c91c:	1007883a 	mov	r3,r2
 800c920:	e0bfff17 	ldw	r2,-4(fp)
 800c924:	1885883a 	add	r2,r3,r2
 800c928:	10800003 	ldbu	r2,0(r2)
 800c92c:	10803fcc 	andi	r2,r2,255
 800c930:	1080201c 	xori	r2,r2,128
 800c934:	10bfe004 	addi	r2,r2,-128
 800c938:	10801720 	cmpeqi	r2,r2,92
 800c93c:	1000351e 	bne	r2,zero,800ca14 <check_file_name_for_FAT16_compliance+0x174>
 800c940:	e0bffd17 	ldw	r2,-12(fp)
 800c944:	1007883a 	mov	r3,r2
 800c948:	e0bfff17 	ldw	r2,-4(fp)
 800c94c:	1885883a 	add	r2,r3,r2
 800c950:	10800003 	ldbu	r2,0(r2)
 800c954:	10803fcc 	andi	r2,r2,255
 800c958:	1080201c 	xori	r2,r2,128
 800c95c:	10bfe004 	addi	r2,r2,-128
 800c960:	10800be0 	cmpeqi	r2,r2,47
 800c964:	10002b1e 	bne	r2,zero,800ca14 <check_file_name_for_FAT16_compliance+0x174>
 800c968:	e0fffd17 	ldw	r3,-12(fp)
 800c96c:	e0bffb17 	ldw	r2,-20(fp)
 800c970:	1885c83a 	sub	r2,r3,r2
 800c974:	10800258 	cmpnei	r2,r2,9
 800c978:	10000a1e 	bne	r2,zero,800c9a4 <check_file_name_for_FAT16_compliance+0x104>
 800c97c:	e0bffd17 	ldw	r2,-12(fp)
 800c980:	1007883a 	mov	r3,r2
 800c984:	e0bfff17 	ldw	r2,-4(fp)
 800c988:	1885883a 	add	r2,r3,r2
 800c98c:	10800003 	ldbu	r2,0(r2)
 800c990:	10803fcc 	andi	r2,r2,255
 800c994:	1080201c 	xori	r2,r2,128
 800c998:	10bfe004 	addi	r2,r2,-128
 800c99c:	10800b98 	cmpnei	r2,r2,46
 800c9a0:	10001c1e 	bne	r2,zero,800ca14 <check_file_name_for_FAT16_compliance+0x174>
 800c9a4:	e0fffc17 	ldw	r3,-16(fp)
 800c9a8:	e0bffb17 	ldw	r2,-20(fp)
 800c9ac:	18801b26 	beq	r3,r2,800ca1c <check_file_name_for_FAT16_compliance+0x17c>
 800c9b0:	e0fffd17 	ldw	r3,-12(fp)
 800c9b4:	e0bffb17 	ldw	r2,-20(fp)
 800c9b8:	1885c83a 	sub	r2,r3,r2
 800c9bc:	10800110 	cmplti	r2,r2,4
 800c9c0:	1000161e 	bne	r2,zero,800ca1c <check_file_name_for_FAT16_compliance+0x17c>
 800c9c4:	e0bffd17 	ldw	r2,-12(fp)
 800c9c8:	1007883a 	mov	r3,r2
 800c9cc:	e0bfff17 	ldw	r2,-4(fp)
 800c9d0:	1885883a 	add	r2,r3,r2
 800c9d4:	10800003 	ldbu	r2,0(r2)
 800c9d8:	10803fcc 	andi	r2,r2,255
 800c9dc:	1080201c 	xori	r2,r2,128
 800c9e0:	10bfe004 	addi	r2,r2,-128
 800c9e4:	10801720 	cmpeqi	r2,r2,92
 800c9e8:	10000c1e 	bne	r2,zero,800ca1c <check_file_name_for_FAT16_compliance+0x17c>
 800c9ec:	e0bffd17 	ldw	r2,-12(fp)
 800c9f0:	1007883a 	mov	r3,r2
 800c9f4:	e0bfff17 	ldw	r2,-4(fp)
 800c9f8:	1885883a 	add	r2,r3,r2
 800c9fc:	10800003 	ldbu	r2,0(r2)
 800ca00:	10803fcc 	andi	r2,r2,255
 800ca04:	1080201c 	xori	r2,r2,128
 800ca08:	10bfe004 	addi	r2,r2,-128
 800ca0c:	10800be0 	cmpeqi	r2,r2,47
 800ca10:	1000021e 	bne	r2,zero,800ca1c <check_file_name_for_FAT16_compliance+0x17c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
 800ca14:	e03ffa15 	stw	zero,-24(fp)
            break;
 800ca18:	00002a06 	br	800cac4 <check_file_name_for_FAT16_compliance+0x224>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
 800ca1c:	e0bffd17 	ldw	r2,-12(fp)
 800ca20:	1007883a 	mov	r3,r2
 800ca24:	e0bfff17 	ldw	r2,-4(fp)
 800ca28:	1885883a 	add	r2,r3,r2
 800ca2c:	10800003 	ldbu	r2,0(r2)
 800ca30:	10803fcc 	andi	r2,r2,255
 800ca34:	1080201c 	xori	r2,r2,128
 800ca38:	10bfe004 	addi	r2,r2,-128
 800ca3c:	10801720 	cmpeqi	r2,r2,92
 800ca40:	10000a1e 	bne	r2,zero,800ca6c <check_file_name_for_FAT16_compliance+0x1cc>
 800ca44:	e0bffd17 	ldw	r2,-12(fp)
 800ca48:	1007883a 	mov	r3,r2
 800ca4c:	e0bfff17 	ldw	r2,-4(fp)
 800ca50:	1885883a 	add	r2,r3,r2
 800ca54:	10800003 	ldbu	r2,0(r2)
 800ca58:	10803fcc 	andi	r2,r2,255
 800ca5c:	1080201c 	xori	r2,r2,128
 800ca60:	10bfe004 	addi	r2,r2,-128
 800ca64:	10800bd8 	cmpnei	r2,r2,47
 800ca68:	1000041e 	bne	r2,zero,800ca7c <check_file_name_for_FAT16_compliance+0x1dc>
        {
            last_period = index;
 800ca6c:	e0bffd17 	ldw	r2,-12(fp)
 800ca70:	e0bffb15 	stw	r2,-20(fp)
            last_dir_break_position = index;
 800ca74:	e0bffd17 	ldw	r2,-12(fp)
 800ca78:	e0bffc15 	stw	r2,-16(fp)
        }
        if (file_name[index] == '.')
 800ca7c:	e0bffd17 	ldw	r2,-12(fp)
 800ca80:	1007883a 	mov	r3,r2
 800ca84:	e0bfff17 	ldw	r2,-4(fp)
 800ca88:	1885883a 	add	r2,r3,r2
 800ca8c:	10800003 	ldbu	r2,0(r2)
 800ca90:	10803fcc 	andi	r2,r2,255
 800ca94:	1080201c 	xori	r2,r2,128
 800ca98:	10bfe004 	addi	r2,r2,-128
 800ca9c:	10800b98 	cmpnei	r2,r2,46
 800caa0:	1000021e 	bne	r2,zero,800caac <check_file_name_for_FAT16_compliance+0x20c>
        {
            last_period = index;
 800caa4:	e0bffd17 	ldw	r2,-12(fp)
 800caa8:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
 800caac:	e0bffd17 	ldw	r2,-12(fp)
 800cab0:	10800044 	addi	r2,r2,1
 800cab4:	e0bffd15 	stw	r2,-12(fp)
 800cab8:	e0fffd17 	ldw	r3,-12(fp)
 800cabc:	e0bffe17 	ldw	r2,-8(fp)
 800cac0:	18bf8716 	blt	r3,r2,800c8e0 <check_file_name_for_FAT16_compliance+0x40>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
 800cac4:	e0fffe17 	ldw	r3,-8(fp)
 800cac8:	e0bfff17 	ldw	r2,-4(fp)
 800cacc:	1885883a 	add	r2,r3,r2
 800cad0:	10bfffc4 	addi	r2,r2,-1
 800cad4:	10800003 	ldbu	r2,0(r2)
 800cad8:	10803fcc 	andi	r2,r2,255
 800cadc:	1080201c 	xori	r2,r2,128
 800cae0:	10bfe004 	addi	r2,r2,-128
 800cae4:	10801720 	cmpeqi	r2,r2,92
 800cae8:	10000a1e 	bne	r2,zero,800cb14 <check_file_name_for_FAT16_compliance+0x274>
 800caec:	e0fffe17 	ldw	r3,-8(fp)
 800caf0:	e0bfff17 	ldw	r2,-4(fp)
 800caf4:	1885883a 	add	r2,r3,r2
 800caf8:	10bfffc4 	addi	r2,r2,-1
 800cafc:	10800003 	ldbu	r2,0(r2)
 800cb00:	10803fcc 	andi	r2,r2,255
 800cb04:	1080201c 	xori	r2,r2,128
 800cb08:	10bfe004 	addi	r2,r2,-128
 800cb0c:	10800bd8 	cmpnei	r2,r2,47
 800cb10:	1000011e 	bne	r2,zero,800cb18 <check_file_name_for_FAT16_compliance+0x278>
    {
        result = false;
 800cb14:	e03ffa15 	stw	zero,-24(fp)
    }
    return result;
 800cb18:	e0bffa17 	ldw	r2,-24(fp)
}
 800cb1c:	e037883a 	mov	sp,fp
 800cb20:	dfc00117 	ldw	ra,4(sp)
 800cb24:	df000017 	ldw	fp,0(sp)
 800cb28:	dec00204 	addi	sp,sp,8
 800cb2c:	f800283a 	ret

0800cb30 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 800cb30:	defffb04 	addi	sp,sp,-20
 800cb34:	dfc00415 	stw	ra,16(sp)
 800cb38:	df000315 	stw	fp,12(sp)
 800cb3c:	df000304 	addi	fp,sp,12
 800cb40:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
 800cb44:	e03ffe15 	stw	zero,-8(fp)
    int length = strlen(name);
 800cb48:	e13fff17 	ldw	r4,-4(fp)
 800cb4c:	8000dec0 	call	8000dec <strlen>
 800cb50:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
 800cb54:	e03ffe15 	stw	zero,-8(fp)
 800cb58:	00001706 	br	800cbb8 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
 800cb5c:	e0bffe17 	ldw	r2,-8(fp)
 800cb60:	1007883a 	mov	r3,r2
 800cb64:	e0bfff17 	ldw	r2,-4(fp)
 800cb68:	1885883a 	add	r2,r3,r2
 800cb6c:	10800003 	ldbu	r2,0(r2)
 800cb70:	10803fcc 	andi	r2,r2,255
 800cb74:	1080201c 	xori	r2,r2,128
 800cb78:	10bfe004 	addi	r2,r2,-128
 800cb7c:	10801720 	cmpeqi	r2,r2,92
 800cb80:	1000101e 	bne	r2,zero,800cbc4 <get_dir_divider_location+0x94>
 800cb84:	e0bffe17 	ldw	r2,-8(fp)
 800cb88:	1007883a 	mov	r3,r2
 800cb8c:	e0bfff17 	ldw	r2,-4(fp)
 800cb90:	1885883a 	add	r2,r3,r2
 800cb94:	10800003 	ldbu	r2,0(r2)
 800cb98:	10803fcc 	andi	r2,r2,255
 800cb9c:	1080201c 	xori	r2,r2,128
 800cba0:	10bfe004 	addi	r2,r2,-128
 800cba4:	10800be0 	cmpeqi	r2,r2,47
 800cba8:	1000061e 	bne	r2,zero,800cbc4 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
 800cbac:	e0bffe17 	ldw	r2,-8(fp)
 800cbb0:	10800044 	addi	r2,r2,1
 800cbb4:	e0bffe15 	stw	r2,-8(fp)
 800cbb8:	e0fffe17 	ldw	r3,-8(fp)
 800cbbc:	e0bffd17 	ldw	r2,-12(fp)
 800cbc0:	18bfe616 	blt	r3,r2,800cb5c <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
 800cbc4:	e0fffe17 	ldw	r3,-8(fp)
 800cbc8:	e0bffd17 	ldw	r2,-12(fp)
 800cbcc:	1880021e 	bne	r3,r2,800cbd8 <get_dir_divider_location+0xa8>
    {
        index = -1;
 800cbd0:	00bfffc4 	movi	r2,-1
 800cbd4:	e0bffe15 	stw	r2,-8(fp)
    }
    
    return index;
 800cbd8:	e0bffe17 	ldw	r2,-8(fp)
}
 800cbdc:	e037883a 	mov	sp,fp
 800cbe0:	dfc00117 	ldw	ra,4(sp)
 800cbe4:	df000017 	ldw	fp,0(sp)
 800cbe8:	dec00204 	addi	sp,sp,8
 800cbec:	f800283a 	ret

0800cbf0 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 800cbf0:	defff604 	addi	sp,sp,-40
 800cbf4:	df000915 	stw	fp,36(sp)
 800cbf8:	df000904 	addi	fp,sp,36
 800cbfc:	e13ff915 	stw	r4,-28(fp)
 800cc00:	e17ffa15 	stw	r5,-24(fp)
 800cc04:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
 800cc08:	00800044 	movi	r2,1
 800cc0c:	e0bff815 	stw	r2,-32(fp)
	int index;

    for (index = 0; index < 8; index++)
 800cc10:	e03ff715 	stw	zero,-36(fp)
 800cc14:	00005006 	br	800cd58 <match_file_record_to_name_ext+0x168>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
 800cc18:	e0fff717 	ldw	r3,-36(fp)
 800cc1c:	e0bff917 	ldw	r2,-28(fp)
 800cc20:	10c5883a 	add	r2,r2,r3
 800cc24:	10800003 	ldbu	r2,0(r2)
 800cc28:	10803fcc 	andi	r2,r2,255
 800cc2c:	10801870 	cmpltui	r2,r2,97
 800cc30:	1000111e 	bne	r2,zero,800cc78 <match_file_record_to_name_ext+0x88>
 800cc34:	e0fff717 	ldw	r3,-36(fp)
 800cc38:	e0bff917 	ldw	r2,-28(fp)
 800cc3c:	10c5883a 	add	r2,r2,r3
 800cc40:	10800003 	ldbu	r2,0(r2)
 800cc44:	10803fcc 	andi	r2,r2,255
 800cc48:	10801ee8 	cmpgeui	r2,r2,123
 800cc4c:	10000a1e 	bne	r2,zero,800cc78 <match_file_record_to_name_ext+0x88>
 800cc50:	e0fff717 	ldw	r3,-36(fp)
 800cc54:	e0bff917 	ldw	r2,-28(fp)
 800cc58:	10c5883a 	add	r2,r2,r3
 800cc5c:	10800003 	ldbu	r2,0(r2)
 800cc60:	10bff804 	addi	r2,r2,-32
 800cc64:	10803fcc 	andi	r2,r2,255
 800cc68:	1080201c 	xori	r2,r2,128
 800cc6c:	10bfe004 	addi	r2,r2,-128
 800cc70:	e0bfff15 	stw	r2,-4(fp)
 800cc74:	00000806 	br	800cc98 <match_file_record_to_name_ext+0xa8>
 800cc78:	e0fff717 	ldw	r3,-36(fp)
 800cc7c:	e0bff917 	ldw	r2,-28(fp)
 800cc80:	10c5883a 	add	r2,r2,r3
 800cc84:	10800003 	ldbu	r2,0(r2)
 800cc88:	10803fcc 	andi	r2,r2,255
 800cc8c:	1080201c 	xori	r2,r2,128
 800cc90:	10bfe004 	addi	r2,r2,-128
 800cc94:	e0bfff15 	stw	r2,-4(fp)
 800cc98:	e0bff717 	ldw	r2,-36(fp)
 800cc9c:	1007883a 	mov	r3,r2
 800cca0:	e0bffa17 	ldw	r2,-24(fp)
 800cca4:	1885883a 	add	r2,r3,r2
 800cca8:	10800003 	ldbu	r2,0(r2)
 800ccac:	10803fcc 	andi	r2,r2,255
 800ccb0:	1080201c 	xori	r2,r2,128
 800ccb4:	10bfe004 	addi	r2,r2,-128
 800ccb8:	10801850 	cmplti	r2,r2,97
 800ccbc:	1000151e 	bne	r2,zero,800cd14 <match_file_record_to_name_ext+0x124>
 800ccc0:	e0bff717 	ldw	r2,-36(fp)
 800ccc4:	1007883a 	mov	r3,r2
 800ccc8:	e0bffa17 	ldw	r2,-24(fp)
 800cccc:	1885883a 	add	r2,r3,r2
 800ccd0:	10800003 	ldbu	r2,0(r2)
 800ccd4:	10803fcc 	andi	r2,r2,255
 800ccd8:	1080201c 	xori	r2,r2,128
 800ccdc:	10bfe004 	addi	r2,r2,-128
 800cce0:	10801ec8 	cmpgei	r2,r2,123
 800cce4:	10000b1e 	bne	r2,zero,800cd14 <match_file_record_to_name_ext+0x124>
 800cce8:	e0bff717 	ldw	r2,-36(fp)
 800ccec:	1007883a 	mov	r3,r2
 800ccf0:	e0bffa17 	ldw	r2,-24(fp)
 800ccf4:	1885883a 	add	r2,r3,r2
 800ccf8:	10800003 	ldbu	r2,0(r2)
 800ccfc:	10bff804 	addi	r2,r2,-32
 800cd00:	10803fcc 	andi	r2,r2,255
 800cd04:	1080201c 	xori	r2,r2,128
 800cd08:	10bfe004 	addi	r2,r2,-128
 800cd0c:	e0bffe15 	stw	r2,-8(fp)
 800cd10:	00000906 	br	800cd38 <match_file_record_to_name_ext+0x148>
 800cd14:	e0bff717 	ldw	r2,-36(fp)
 800cd18:	1007883a 	mov	r3,r2
 800cd1c:	e0bffa17 	ldw	r2,-24(fp)
 800cd20:	1885883a 	add	r2,r3,r2
 800cd24:	10800003 	ldbu	r2,0(r2)
 800cd28:	10803fcc 	andi	r2,r2,255
 800cd2c:	1080201c 	xori	r2,r2,128
 800cd30:	10bfe004 	addi	r2,r2,-128
 800cd34:	e0bffe15 	stw	r2,-8(fp)
 800cd38:	e0bfff17 	ldw	r2,-4(fp)
 800cd3c:	e0fffe17 	ldw	r3,-8(fp)
 800cd40:	10c00226 	beq	r2,r3,800cd4c <match_file_record_to_name_ext+0x15c>
        {
            match = false;
 800cd44:	e03ff815 	stw	zero,-32(fp)
			break;
 800cd48:	00000606 	br	800cd64 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
 800cd4c:	e0bff717 	ldw	r2,-36(fp)
 800cd50:	10800044 	addi	r2,r2,1
 800cd54:	e0bff715 	stw	r2,-36(fp)
 800cd58:	e0bff717 	ldw	r2,-36(fp)
 800cd5c:	10800210 	cmplti	r2,r2,8
 800cd60:	103fad1e 	bne	r2,zero,800cc18 <match_file_record_to_name_ext+0x28>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 800cd64:	e03ff715 	stw	zero,-36(fp)
 800cd68:	00005406 	br	800cebc <match_file_record_to_name_ext+0x2cc>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
 800cd6c:	e0fff717 	ldw	r3,-36(fp)
 800cd70:	e0bff917 	ldw	r2,-28(fp)
 800cd74:	1885883a 	add	r2,r3,r2
 800cd78:	10800204 	addi	r2,r2,8
 800cd7c:	10800003 	ldbu	r2,0(r2)
 800cd80:	10803fcc 	andi	r2,r2,255
 800cd84:	10801870 	cmpltui	r2,r2,97
 800cd88:	1000131e 	bne	r2,zero,800cdd8 <match_file_record_to_name_ext+0x1e8>
 800cd8c:	e0fff717 	ldw	r3,-36(fp)
 800cd90:	e0bff917 	ldw	r2,-28(fp)
 800cd94:	1885883a 	add	r2,r3,r2
 800cd98:	10800204 	addi	r2,r2,8
 800cd9c:	10800003 	ldbu	r2,0(r2)
 800cda0:	10803fcc 	andi	r2,r2,255
 800cda4:	10801ee8 	cmpgeui	r2,r2,123
 800cda8:	10000b1e 	bne	r2,zero,800cdd8 <match_file_record_to_name_ext+0x1e8>
 800cdac:	e0fff717 	ldw	r3,-36(fp)
 800cdb0:	e0bff917 	ldw	r2,-28(fp)
 800cdb4:	1885883a 	add	r2,r3,r2
 800cdb8:	10800204 	addi	r2,r2,8
 800cdbc:	10800003 	ldbu	r2,0(r2)
 800cdc0:	10bff804 	addi	r2,r2,-32
 800cdc4:	10803fcc 	andi	r2,r2,255
 800cdc8:	1080201c 	xori	r2,r2,128
 800cdcc:	10bfe004 	addi	r2,r2,-128
 800cdd0:	e0bffd15 	stw	r2,-12(fp)
 800cdd4:	00000906 	br	800cdfc <match_file_record_to_name_ext+0x20c>
 800cdd8:	e0fff717 	ldw	r3,-36(fp)
 800cddc:	e0bff917 	ldw	r2,-28(fp)
 800cde0:	1885883a 	add	r2,r3,r2
 800cde4:	10800204 	addi	r2,r2,8
 800cde8:	10800003 	ldbu	r2,0(r2)
 800cdec:	10803fcc 	andi	r2,r2,255
 800cdf0:	1080201c 	xori	r2,r2,128
 800cdf4:	10bfe004 	addi	r2,r2,-128
 800cdf8:	e0bffd15 	stw	r2,-12(fp)
 800cdfc:	e0bff717 	ldw	r2,-36(fp)
 800ce00:	1007883a 	mov	r3,r2
 800ce04:	e0bffb17 	ldw	r2,-20(fp)
 800ce08:	1885883a 	add	r2,r3,r2
 800ce0c:	10800003 	ldbu	r2,0(r2)
 800ce10:	10803fcc 	andi	r2,r2,255
 800ce14:	1080201c 	xori	r2,r2,128
 800ce18:	10bfe004 	addi	r2,r2,-128
 800ce1c:	10801850 	cmplti	r2,r2,97
 800ce20:	1000151e 	bne	r2,zero,800ce78 <match_file_record_to_name_ext+0x288>
 800ce24:	e0bff717 	ldw	r2,-36(fp)
 800ce28:	1007883a 	mov	r3,r2
 800ce2c:	e0bffb17 	ldw	r2,-20(fp)
 800ce30:	1885883a 	add	r2,r3,r2
 800ce34:	10800003 	ldbu	r2,0(r2)
 800ce38:	10803fcc 	andi	r2,r2,255
 800ce3c:	1080201c 	xori	r2,r2,128
 800ce40:	10bfe004 	addi	r2,r2,-128
 800ce44:	10801ec8 	cmpgei	r2,r2,123
 800ce48:	10000b1e 	bne	r2,zero,800ce78 <match_file_record_to_name_ext+0x288>
 800ce4c:	e0bff717 	ldw	r2,-36(fp)
 800ce50:	1007883a 	mov	r3,r2
 800ce54:	e0bffb17 	ldw	r2,-20(fp)
 800ce58:	1885883a 	add	r2,r3,r2
 800ce5c:	10800003 	ldbu	r2,0(r2)
 800ce60:	10bff804 	addi	r2,r2,-32
 800ce64:	10803fcc 	andi	r2,r2,255
 800ce68:	1080201c 	xori	r2,r2,128
 800ce6c:	10bfe004 	addi	r2,r2,-128
 800ce70:	e0bffc15 	stw	r2,-16(fp)
 800ce74:	00000906 	br	800ce9c <match_file_record_to_name_ext+0x2ac>
 800ce78:	e0bff717 	ldw	r2,-36(fp)
 800ce7c:	1007883a 	mov	r3,r2
 800ce80:	e0bffb17 	ldw	r2,-20(fp)
 800ce84:	1885883a 	add	r2,r3,r2
 800ce88:	10800003 	ldbu	r2,0(r2)
 800ce8c:	10803fcc 	andi	r2,r2,255
 800ce90:	1080201c 	xori	r2,r2,128
 800ce94:	10bfe004 	addi	r2,r2,-128
 800ce98:	e0bffc15 	stw	r2,-16(fp)
 800ce9c:	e0bffd17 	ldw	r2,-12(fp)
 800cea0:	e0fffc17 	ldw	r3,-16(fp)
 800cea4:	10c00226 	beq	r2,r3,800ceb0 <match_file_record_to_name_ext+0x2c0>
        {
            match = false;
 800cea8:	e03ff815 	stw	zero,-32(fp)
			break;
 800ceac:	00000606 	br	800cec8 <match_file_record_to_name_ext+0x2d8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 800ceb0:	e0bff717 	ldw	r2,-36(fp)
 800ceb4:	10800044 	addi	r2,r2,1
 800ceb8:	e0bff715 	stw	r2,-36(fp)
 800cebc:	e0bff717 	ldw	r2,-36(fp)
 800cec0:	108000d0 	cmplti	r2,r2,3
 800cec4:	103fa91e 	bne	r2,zero,800cd6c <match_file_record_to_name_ext+0x17c>
        {
            match = false;
			break;
        }
    }
	return match;
 800cec8:	e0bff817 	ldw	r2,-32(fp)
}
 800cecc:	e037883a 	mov	sp,fp
 800ced0:	df000017 	ldw	fp,0(sp)
 800ced4:	dec00104 	addi	sp,sp,4
 800ced8:	f800283a 	ret

0800cedc <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 800cedc:	deffe604 	addi	sp,sp,-104
 800cee0:	dfc01915 	stw	ra,100(sp)
 800cee4:	df001815 	stw	fp,96(sp)
 800cee8:	df001804 	addi	fp,sp,96
 800ceec:	e13ffc15 	stw	r4,-16(fp)
 800cef0:	e17ffd15 	stw	r5,-12(fp)
 800cef4:	e1bffe15 	stw	r6,-8(fp)
    bool result = false;
 800cef8:	e03ff715 	stw	zero,-36(fp)
    int home_dir_cluster = 0;
 800cefc:	e03ff615 	stw	zero,-40(fp)
    int location, index;
    int start_location = 0;
 800cf00:	e03ff315 	stw	zero,-52(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
 800cf04:	e13ffc17 	ldw	r4,-16(fp)
 800cf08:	800cb300 	call	800cb30 <get_dir_divider_location>
 800cf0c:	e0bff515 	stw	r2,-44(fp)
    while (location > 0)
 800cf10:	00012206 	br	800d39c <get_home_directory_cluster_for_file+0x4c0>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 800cf14:	00800804 	movi	r2,32
 800cf18:	e0bff805 	stb	r2,-32(fp)
 800cf1c:	00800804 	movi	r2,32
 800cf20:	e0bff845 	stb	r2,-31(fp)
 800cf24:	00800804 	movi	r2,32
 800cf28:	e0bff885 	stb	r2,-30(fp)
 800cf2c:	00800804 	movi	r2,32
 800cf30:	e0bff8c5 	stb	r2,-29(fp)
 800cf34:	00800804 	movi	r2,32
 800cf38:	e0bff905 	stb	r2,-28(fp)
 800cf3c:	00800804 	movi	r2,32
 800cf40:	e0bff945 	stb	r2,-27(fp)
 800cf44:	00800804 	movi	r2,32
 800cf48:	e0bff985 	stb	r2,-26(fp)
 800cf4c:	00800804 	movi	r2,32
 800cf50:	e0bff9c5 	stb	r2,-25(fp)
        char extension[3] = { ' ', ' ', ' ' };
 800cf54:	00800804 	movi	r2,32
 800cf58:	e0bffa05 	stb	r2,-24(fp)
 800cf5c:	00800804 	movi	r2,32
 800cf60:	e0bffa45 	stb	r2,-23(fp)
 800cf64:	00800804 	movi	r2,32
 800cf68:	e0bffa85 	stb	r2,-22(fp)
        int ext_index = -1;
 800cf6c:	00bfffc4 	movi	r2,-1
 800cf70:	e0bff215 	stw	r2,-56(fp)
        int new_cluster = home_dir_cluster;
 800cf74:	e0bff617 	ldw	r2,-40(fp)
 800cf78:	e0bff115 	stw	r2,-60(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 800cf7c:	e03ff415 	stw	zero,-48(fp)
 800cf80:	00002e06 	br	800d03c <get_home_directory_cluster_for_file+0x160>
        {
            if (file_name[index+start_location] == '.')
 800cf84:	e0fff417 	ldw	r3,-48(fp)
 800cf88:	e0bff317 	ldw	r2,-52(fp)
 800cf8c:	1885883a 	add	r2,r3,r2
 800cf90:	1007883a 	mov	r3,r2
 800cf94:	e0bffc17 	ldw	r2,-16(fp)
 800cf98:	1885883a 	add	r2,r3,r2
 800cf9c:	10800003 	ldbu	r2,0(r2)
 800cfa0:	10803fcc 	andi	r2,r2,255
 800cfa4:	1080201c 	xori	r2,r2,128
 800cfa8:	10bfe004 	addi	r2,r2,-128
 800cfac:	10800b98 	cmpnei	r2,r2,46
 800cfb0:	1000031e 	bne	r2,zero,800cfc0 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
 800cfb4:	e0bff417 	ldw	r2,-48(fp)
 800cfb8:	e0bff215 	stw	r2,-56(fp)
 800cfbc:	00001c06 	br	800d030 <get_home_directory_cluster_for_file+0x154>
            }
            else if (ext_index < 0)
 800cfc0:	e0bff217 	ldw	r2,-56(fp)
 800cfc4:	1004403a 	cmpge	r2,r2,zero
 800cfc8:	10000c1e 	bne	r2,zero,800cffc <get_home_directory_cluster_for_file+0x120>
            {
                name[index] = file_name[index+start_location];
 800cfcc:	e13ff417 	ldw	r4,-48(fp)
 800cfd0:	e0fff417 	ldw	r3,-48(fp)
 800cfd4:	e0bff317 	ldw	r2,-52(fp)
 800cfd8:	1885883a 	add	r2,r3,r2
 800cfdc:	1007883a 	mov	r3,r2
 800cfe0:	e0bffc17 	ldw	r2,-16(fp)
 800cfe4:	1885883a 	add	r2,r3,r2
 800cfe8:	10c00003 	ldbu	r3,0(r2)
 800cfec:	e0bff804 	addi	r2,fp,-32
 800cff0:	1105883a 	add	r2,r2,r4
 800cff4:	10c00005 	stb	r3,0(r2)
 800cff8:	00000d06 	br	800d030 <get_home_directory_cluster_for_file+0x154>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
 800cffc:	e0fff417 	ldw	r3,-48(fp)
 800d000:	e0bff217 	ldw	r2,-56(fp)
 800d004:	1889c83a 	sub	r4,r3,r2
 800d008:	e0fff417 	ldw	r3,-48(fp)
 800d00c:	e0bff317 	ldw	r2,-52(fp)
 800d010:	1885883a 	add	r2,r3,r2
 800d014:	1007883a 	mov	r3,r2
 800d018:	e0bffc17 	ldw	r2,-16(fp)
 800d01c:	1885883a 	add	r2,r3,r2
 800d020:	10c00003 	ldbu	r3,0(r2)
 800d024:	e0bffa04 	addi	r2,fp,-24
 800d028:	1105883a 	add	r2,r2,r4
 800d02c:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 800d030:	e0bff417 	ldw	r2,-48(fp)
 800d034:	10800044 	addi	r2,r2,1
 800d038:	e0bff415 	stw	r2,-48(fp)
 800d03c:	e0fff417 	ldw	r3,-48(fp)
 800d040:	e0bff517 	ldw	r2,-44(fp)
 800d044:	18bfcf16 	blt	r3,r2,800cf84 <get_home_directory_cluster_for_file+0xa8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
 800d048:	e0bff617 	ldw	r2,-40(fp)
 800d04c:	1004c03a 	cmpne	r2,r2,zero
 800d050:	1000551e 	bne	r2,zero,800d1a8 <get_home_directory_cluster_for_file+0x2cc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 800d054:	00820074 	movhi	r2,2049
 800d058:	1091cc04 	addi	r2,r2,18224
 800d05c:	1080050b 	ldhu	r2,20(r2)
 800d060:	10bfffcc 	andi	r2,r2,65535
 800d064:	1008917a 	slli	r4,r2,5
 800d068:	00820074 	movhi	r2,2049
 800d06c:	1091cc04 	addi	r2,r2,18224
 800d070:	1080030b 	ldhu	r2,12(r2)
 800d074:	117fffcc 	andi	r5,r2,65535
 800d078:	80097bc0 	call	80097bc <__divsi3>
 800d07c:	e0bff015 	stw	r2,-64(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 800d080:	e03fef15 	stw	zero,-68(fp)
 800d084:	00003806 	br	800d168 <get_home_directory_cluster_for_file+0x28c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
 800d088:	00820074 	movhi	r2,2049
 800d08c:	1091cc04 	addi	r2,r2,18224
 800d090:	10c01317 	ldw	r3,76(r2)
 800d094:	e0bfef17 	ldw	r2,-68(fp)
 800d098:	1885883a 	add	r2,r3,r2
 800d09c:	1009883a 	mov	r4,r2
 800d0a0:	d166c917 	ldw	r5,-25820(gp)
 800d0a4:	800b70c0 	call	800b70c <Read_Sector_Data>
 800d0a8:	1005003a 	cmpeq	r2,r2,zero
 800d0ac:	1000311e 	bne	r2,zero,800d174 <get_home_directory_cluster_for_file+0x298>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 800d0b0:	e03fee15 	stw	zero,-72(fp)
 800d0b4:	00002306 	br	800d144 <get_home_directory_cluster_for_file+0x268>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 800d0b8:	e0bfee17 	ldw	r2,-72(fp)
 800d0bc:	1008917a 	slli	r4,r2,5
 800d0c0:	e1ffef17 	ldw	r7,-68(fp)
 800d0c4:	e17ffe17 	ldw	r5,-8(fp)
 800d0c8:	000d883a 	mov	r6,zero
 800d0cc:	800bb540 	call	800bb54 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 800d0d0:	e0bffe17 	ldw	r2,-8(fp)
 800d0d4:	10800003 	ldbu	r2,0(r2)
 800d0d8:	10803fcc 	andi	r2,r2,255
 800d0dc:	10803960 	cmpeqi	r2,r2,229
 800d0e0:	1000151e 	bne	r2,zero,800d138 <get_home_directory_cluster_for_file+0x25c>
 800d0e4:	e0bffe17 	ldw	r2,-8(fp)
 800d0e8:	10800003 	ldbu	r2,0(r2)
 800d0ec:	10803fcc 	andi	r2,r2,255
 800d0f0:	1005003a 	cmpeq	r2,r2,zero
 800d0f4:	1000101e 	bne	r2,zero,800d138 <get_home_directory_cluster_for_file+0x25c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 800d0f8:	e17ff804 	addi	r5,fp,-32
 800d0fc:	e1bffa04 	addi	r6,fp,-24
 800d100:	e13ffe17 	ldw	r4,-8(fp)
 800d104:	800cbf00 	call	800cbf0 <match_file_record_to_name_ext>
 800d108:	e0bfed15 	stw	r2,-76(fp)
                            if (match)
 800d10c:	e0bfed17 	ldw	r2,-76(fp)
 800d110:	1005003a 	cmpeq	r2,r2,zero
 800d114:	1000081e 	bne	r2,zero,800d138 <get_home_directory_cluster_for_file+0x25c>
                            {
                                new_cluster = file_record->start_cluster_index;
 800d118:	e0bffe17 	ldw	r2,-8(fp)
 800d11c:	1080058b 	ldhu	r2,22(r2)
 800d120:	10bfffcc 	andi	r2,r2,65535
 800d124:	e0bff115 	stw	r2,-60(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 800d128:	e0fffe17 	ldw	r3,-8(fp)
 800d12c:	00800044 	movi	r2,1
 800d130:	18800a15 	stw	r2,40(r3)
                                break;
 800d134:	00000606 	br	800d150 <get_home_directory_cluster_for_file+0x274>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 800d138:	e0bfee17 	ldw	r2,-72(fp)
 800d13c:	10800044 	addi	r2,r2,1
 800d140:	e0bfee15 	stw	r2,-72(fp)
 800d144:	e0bfee17 	ldw	r2,-72(fp)
 800d148:	10800410 	cmplti	r2,r2,16
 800d14c:	103fda1e 	bne	r2,zero,800d0b8 <get_home_directory_cluster_for_file+0x1dc>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
 800d150:	e0fff117 	ldw	r3,-60(fp)
 800d154:	e0bff617 	ldw	r2,-40(fp)
 800d158:	1880061e 	bne	r3,r2,800d174 <get_home_directory_cluster_for_file+0x298>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 800d15c:	e0bfef17 	ldw	r2,-68(fp)
 800d160:	10800044 	addi	r2,r2,1
 800d164:	e0bfef15 	stw	r2,-68(fp)
 800d168:	e0ffef17 	ldw	r3,-68(fp)
 800d16c:	e0bff017 	ldw	r2,-64(fp)
 800d170:	18bfc516 	blt	r3,r2,800d088 <get_home_directory_cluster_for_file+0x1ac>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
 800d174:	e0fff117 	ldw	r3,-60(fp)
 800d178:	e0bff617 	ldw	r2,-40(fp)
 800d17c:	18800826 	beq	r3,r2,800d1a0 <get_home_directory_cluster_for_file+0x2c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 800d180:	e0bff117 	ldw	r2,-60(fp)
 800d184:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
 800d188:	e0fff317 	ldw	r3,-52(fp)
 800d18c:	e0bff517 	ldw	r2,-44(fp)
 800d190:	1885883a 	add	r2,r3,r2
 800d194:	10800044 	addi	r2,r2,1
 800d198:	e0bff315 	stw	r2,-52(fp)
 800d19c:	00007406 	br	800d370 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 800d1a0:	e03fff15 	stw	zero,-4(fp)
 800d1a4:	00008c06 	br	800d3d8 <get_home_directory_cluster_for_file+0x4fc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
 800d1a8:	e0bff617 	ldw	r2,-40(fp)
 800d1ac:	e0bfec15 	stw	r2,-80(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 800d1b0:	e0bfec17 	ldw	r2,-80(fp)
 800d1b4:	113fff84 	addi	r4,r2,-2
 800d1b8:	00820074 	movhi	r2,2049
 800d1bc:	1091cc04 	addi	r2,r2,18224
 800d1c0:	10800383 	ldbu	r2,14(r2)
 800d1c4:	11403fcc 	andi	r5,r2,255
 800d1c8:	800988c0 	call	800988c <__mulsi3>
 800d1cc:	1007883a 	mov	r3,r2
 800d1d0:	00820074 	movhi	r2,2049
 800d1d4:	1091cc04 	addi	r2,r2,18224
 800d1d8:	10801417 	ldw	r2,80(r2)
 800d1dc:	1885883a 	add	r2,r3,r2
 800d1e0:	e0bfeb15 	stw	r2,-84(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 800d1e4:	e03fea15 	stw	zero,-88(fp)
 800d1e8:	00003206 	br	800d2b4 <get_home_directory_cluster_for_file+0x3d8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 800d1ec:	e0ffea17 	ldw	r3,-88(fp)
 800d1f0:	e0bfeb17 	ldw	r2,-84(fp)
 800d1f4:	1889883a 	add	r4,r3,r2
 800d1f8:	d166c917 	ldw	r5,-25820(gp)
 800d1fc:	800b70c0 	call	800b70c <Read_Sector_Data>
 800d200:	1005003a 	cmpeq	r2,r2,zero
 800d204:	1000311e 	bne	r2,zero,800d2cc <get_home_directory_cluster_for_file+0x3f0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 800d208:	e03fe915 	stw	zero,-92(fp)
 800d20c:	00002006 	br	800d290 <get_home_directory_cluster_for_file+0x3b4>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 800d210:	e0bfe917 	ldw	r2,-92(fp)
 800d214:	1008917a 	slli	r4,r2,5
 800d218:	e1bfec17 	ldw	r6,-80(fp)
 800d21c:	e1ffea17 	ldw	r7,-88(fp)
 800d220:	e17ffe17 	ldw	r5,-8(fp)
 800d224:	800bb540 	call	800bb54 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 800d228:	e0bffe17 	ldw	r2,-8(fp)
 800d22c:	10800003 	ldbu	r2,0(r2)
 800d230:	10803fcc 	andi	r2,r2,255
 800d234:	10803960 	cmpeqi	r2,r2,229
 800d238:	1000121e 	bne	r2,zero,800d284 <get_home_directory_cluster_for_file+0x3a8>
 800d23c:	e0bffe17 	ldw	r2,-8(fp)
 800d240:	10800003 	ldbu	r2,0(r2)
 800d244:	10803fcc 	andi	r2,r2,255
 800d248:	1005003a 	cmpeq	r2,r2,zero
 800d24c:	10000d1e 	bne	r2,zero,800d284 <get_home_directory_cluster_for_file+0x3a8>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
 800d250:	e17ff804 	addi	r5,fp,-32
 800d254:	e1bffa04 	addi	r6,fp,-24
 800d258:	e13ffe17 	ldw	r4,-8(fp)
 800d25c:	800cbf00 	call	800cbf0 <match_file_record_to_name_ext>
 800d260:	e0bfe815 	stw	r2,-96(fp)
                                if (match)
 800d264:	e0bfe817 	ldw	r2,-96(fp)
 800d268:	1005003a 	cmpeq	r2,r2,zero
 800d26c:	1000051e 	bne	r2,zero,800d284 <get_home_directory_cluster_for_file+0x3a8>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
 800d270:	e0bffe17 	ldw	r2,-8(fp)
 800d274:	1080058b 	ldhu	r2,22(r2)
 800d278:	10bfffcc 	andi	r2,r2,65535
 800d27c:	e0bff115 	stw	r2,-60(fp)
                                    break;
 800d280:	00000606 	br	800d29c <get_home_directory_cluster_for_file+0x3c0>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 800d284:	e0bfe917 	ldw	r2,-92(fp)
 800d288:	10800044 	addi	r2,r2,1
 800d28c:	e0bfe915 	stw	r2,-92(fp)
 800d290:	e0bfe917 	ldw	r2,-92(fp)
 800d294:	10800410 	cmplti	r2,r2,16
 800d298:	103fdd1e 	bne	r2,zero,800d210 <get_home_directory_cluster_for_file+0x334>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
 800d29c:	e0fff117 	ldw	r3,-60(fp)
 800d2a0:	e0bff617 	ldw	r2,-40(fp)
 800d2a4:	1880091e 	bne	r3,r2,800d2cc <get_home_directory_cluster_for_file+0x3f0>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 800d2a8:	e0bfea17 	ldw	r2,-88(fp)
 800d2ac:	10800044 	addi	r2,r2,1
 800d2b0:	e0bfea15 	stw	r2,-88(fp)
 800d2b4:	00820074 	movhi	r2,2049
 800d2b8:	1091cc04 	addi	r2,r2,18224
 800d2bc:	10800383 	ldbu	r2,14(r2)
 800d2c0:	10c03fcc 	andi	r3,r2,255
 800d2c4:	e0bfea17 	ldw	r2,-88(fp)
 800d2c8:	10ffc816 	blt	r2,r3,800d1ec <get_home_directory_cluster_for_file+0x310>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
 800d2cc:	e0fff117 	ldw	r3,-60(fp)
 800d2d0:	e0bff617 	ldw	r2,-40(fp)
 800d2d4:	1880131e 	bne	r3,r2,800d324 <get_home_directory_cluster_for_file+0x448>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
 800d2d8:	e13ff117 	ldw	r4,-60(fp)
 800d2dc:	e17ffb04 	addi	r5,fp,-20
 800d2e0:	800b8080 	call	800b808 <get_cluster_flag>
 800d2e4:	1005003a 	cmpeq	r2,r2,zero
 800d2e8:	10000c1e 	bne	r2,zero,800d31c <get_home_directory_cluster_for_file+0x440>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 800d2ec:	e0bffb0b 	ldhu	r2,-20(fp)
 800d2f0:	10bfffcc 	andi	r2,r2,65535
 800d2f4:	10fffe0c 	andi	r3,r2,65528
 800d2f8:	00bffe14 	movui	r2,65528
 800d2fc:	1880021e 	bne	r3,r2,800d308 <get_home_directory_cluster_for_file+0x42c>
						{
							return false;
 800d300:	e03fff15 	stw	zero,-4(fp)
 800d304:	00003406 	br	800d3d8 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 800d308:	e0bffb0b 	ldhu	r2,-20(fp)
 800d30c:	10bfffcc 	andi	r2,r2,65535
 800d310:	10bffe0c 	andi	r2,r2,65528
 800d314:	e0bff115 	stw	r2,-60(fp)
 800d318:	00000206 	br	800d324 <get_home_directory_cluster_for_file+0x448>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
 800d31c:	e03fff15 	stw	zero,-4(fp)
 800d320:	00002d06 	br	800d3d8 <get_home_directory_cluster_for_file+0x4fc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 800d324:	e0ffec17 	ldw	r3,-80(fp)
 800d328:	00bffdd4 	movui	r2,65527
 800d32c:	10c00316 	blt	r2,r3,800d33c <get_home_directory_cluster_for_file+0x460>
 800d330:	e0fff117 	ldw	r3,-60(fp)
 800d334:	e0bff617 	ldw	r2,-40(fp)
 800d338:	18bf9d26 	beq	r3,r2,800d1b0 <get_home_directory_cluster_for_file+0x2d4>
            if (new_cluster != home_dir_cluster)
 800d33c:	e0fff117 	ldw	r3,-60(fp)
 800d340:	e0bff617 	ldw	r2,-40(fp)
 800d344:	18800826 	beq	r3,r2,800d368 <get_home_directory_cluster_for_file+0x48c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 800d348:	e0bff117 	ldw	r2,-60(fp)
 800d34c:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
 800d350:	e0fff317 	ldw	r3,-52(fp)
 800d354:	e0bff517 	ldw	r2,-44(fp)
 800d358:	1885883a 	add	r2,r3,r2
 800d35c:	10800044 	addi	r2,r2,1
 800d360:	e0bff315 	stw	r2,-52(fp)
 800d364:	00000206 	br	800d370 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 800d368:	e03fff15 	stw	zero,-4(fp)
 800d36c:	00001a06 	br	800d3d8 <get_home_directory_cluster_for_file+0x4fc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
 800d370:	e0bff317 	ldw	r2,-52(fp)
 800d374:	1007883a 	mov	r3,r2
 800d378:	e0bffc17 	ldw	r2,-16(fp)
 800d37c:	1889883a 	add	r4,r3,r2
 800d380:	800cb300 	call	800cb30 <get_dir_divider_location>
 800d384:	e0bff515 	stw	r2,-44(fp)
        if (location < 0)
 800d388:	e0bff517 	ldw	r2,-44(fp)
 800d38c:	1004403a 	cmpge	r2,r2,zero
 800d390:	1000021e 	bne	r2,zero,800d39c <get_home_directory_cluster_for_file+0x4c0>
        {
            // Directory has been located.
            result = true;
 800d394:	00800044 	movi	r2,1
 800d398:	e0bff715 	stw	r2,-36(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
 800d39c:	e0bff517 	ldw	r2,-44(fp)
 800d3a0:	10800048 	cmpgei	r2,r2,1
 800d3a4:	103edb1e 	bne	r2,zero,800cf14 <get_home_directory_cluster_for_file+0x38>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
 800d3a8:	e0fffd17 	ldw	r3,-12(fp)
 800d3ac:	e0bff617 	ldw	r2,-40(fp)
 800d3b0:	18800015 	stw	r2,0(r3)
    if (home_dir_cluster == 0)
 800d3b4:	e0bff617 	ldw	r2,-40(fp)
 800d3b8:	1004c03a 	cmpne	r2,r2,zero
 800d3bc:	1000041e 	bne	r2,zero,800d3d0 <get_home_directory_cluster_for_file+0x4f4>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
 800d3c0:	e0bffe17 	ldw	r2,-8(fp)
 800d3c4:	10000a15 	stw	zero,40(r2)
		result = true;
 800d3c8:	00800044 	movi	r2,1
 800d3cc:	e0bff715 	stw	r2,-36(fp)
    }
    return result;
 800d3d0:	e0bff717 	ldw	r2,-36(fp)
 800d3d4:	e0bfff15 	stw	r2,-4(fp)
 800d3d8:	e0bfff17 	ldw	r2,-4(fp)
}
 800d3dc:	e037883a 	mov	sp,fp
 800d3e0:	dfc00117 	ldw	ra,4(sp)
 800d3e4:	df000017 	ldw	fp,0(sp)
 800d3e8:	dec00204 	addi	sp,sp,8
 800d3ec:	f800283a 	ret

0800d3f0 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 800d3f0:	deffe704 	addi	sp,sp,-100
 800d3f4:	dfc01815 	stw	ra,96(sp)
 800d3f8:	df001715 	stw	fp,92(sp)
 800d3fc:	df001704 	addi	fp,sp,92
 800d400:	e13ffc15 	stw	r4,-16(fp)
 800d404:	e17ffd15 	stw	r5,-12(fp)
 800d408:	e1bffe15 	stw	r6,-8(fp)
    int location = get_dir_divider_location( file_name );
 800d40c:	e13ffd17 	ldw	r4,-12(fp)
 800d410:	800cb300 	call	800cb30 <get_dir_divider_location>
 800d414:	e0bff715 	stw	r2,-36(fp)
    int last_dir_separator = 0;
 800d418:	e03ff615 	stw	zero,-40(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 800d41c:	00800804 	movi	r2,32
 800d420:	e0bff805 	stb	r2,-32(fp)
 800d424:	00800804 	movi	r2,32
 800d428:	e0bff845 	stb	r2,-31(fp)
 800d42c:	00800804 	movi	r2,32
 800d430:	e0bff885 	stb	r2,-30(fp)
 800d434:	00800804 	movi	r2,32
 800d438:	e0bff8c5 	stb	r2,-29(fp)
 800d43c:	00800804 	movi	r2,32
 800d440:	e0bff905 	stb	r2,-28(fp)
 800d444:	00800804 	movi	r2,32
 800d448:	e0bff945 	stb	r2,-27(fp)
 800d44c:	00800804 	movi	r2,32
 800d450:	e0bff985 	stb	r2,-26(fp)
 800d454:	00800804 	movi	r2,32
 800d458:	e0bff9c5 	stb	r2,-25(fp)
    char extension[3] = { ' ', ' ', ' ' };
 800d45c:	00800804 	movi	r2,32
 800d460:	e0bffa05 	stb	r2,-24(fp)
 800d464:	00800804 	movi	r2,32
 800d468:	e0bffa45 	stb	r2,-23(fp)
 800d46c:	00800804 	movi	r2,32
 800d470:	e0bffa85 	stb	r2,-22(fp)
    int ext_index = -1;
 800d474:	00bfffc4 	movi	r2,-1
 800d478:	e0bff515 	stw	r2,-44(fp)
    int cluster = directory_start_cluster;
 800d47c:	e0bffc17 	ldw	r2,-16(fp)
 800d480:	e0bff415 	stw	r2,-48(fp)
    int index;
	int length = strlen(file_name);
 800d484:	e13ffd17 	ldw	r4,-12(fp)
 800d488:	8000dec0 	call	8000dec <strlen>
 800d48c:	e0bff215 	stw	r2,-56(fp)
    bool result = false;
 800d490:	e03ff115 	stw	zero,-60(fp)
    
    // Skip through all directory separators.
    while (location > 0)
 800d494:	00000b06 	br	800d4c4 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
 800d498:	e0fff617 	ldw	r3,-40(fp)
 800d49c:	e0bff717 	ldw	r2,-36(fp)
 800d4a0:	1885883a 	add	r2,r3,r2
 800d4a4:	10800044 	addi	r2,r2,1
 800d4a8:	e0bff615 	stw	r2,-40(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
 800d4ac:	e0bff617 	ldw	r2,-40(fp)
 800d4b0:	1007883a 	mov	r3,r2
 800d4b4:	e0bffd17 	ldw	r2,-12(fp)
 800d4b8:	1889883a 	add	r4,r3,r2
 800d4bc:	800cb300 	call	800cb30 <get_dir_divider_location>
 800d4c0:	e0bff715 	stw	r2,-36(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
 800d4c4:	e0bff717 	ldw	r2,-36(fp)
 800d4c8:	10800048 	cmpgei	r2,r2,1
 800d4cc:	103ff21e 	bne	r2,zero,800d498 <find_file_in_directory+0xa8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 800d4d0:	e0bff617 	ldw	r2,-40(fp)
 800d4d4:	e0bff315 	stw	r2,-52(fp)
 800d4d8:	00002b06 	br	800d588 <find_file_in_directory+0x198>
    {
        if (file_name[index] == '.')
 800d4dc:	e0bff317 	ldw	r2,-52(fp)
 800d4e0:	1007883a 	mov	r3,r2
 800d4e4:	e0bffd17 	ldw	r2,-12(fp)
 800d4e8:	1885883a 	add	r2,r3,r2
 800d4ec:	10800003 	ldbu	r2,0(r2)
 800d4f0:	10803fcc 	andi	r2,r2,255
 800d4f4:	1080201c 	xori	r2,r2,128
 800d4f8:	10bfe004 	addi	r2,r2,-128
 800d4fc:	10800b98 	cmpnei	r2,r2,46
 800d500:	1000031e 	bne	r2,zero,800d510 <find_file_in_directory+0x120>
        {
            ext_index = index;
 800d504:	e0bff317 	ldw	r2,-52(fp)
 800d508:	e0bff515 	stw	r2,-44(fp)
 800d50c:	00001b06 	br	800d57c <find_file_in_directory+0x18c>
        }
        else if (ext_index < 0)
 800d510:	e0bff517 	ldw	r2,-44(fp)
 800d514:	1004403a 	cmpge	r2,r2,zero
 800d518:	10000c1e 	bne	r2,zero,800d54c <find_file_in_directory+0x15c>
        {
            name[index-last_dir_separator] = file_name[index];
 800d51c:	e0fff317 	ldw	r3,-52(fp)
 800d520:	e0bff617 	ldw	r2,-40(fp)
 800d524:	1889c83a 	sub	r4,r3,r2
 800d528:	e0bff317 	ldw	r2,-52(fp)
 800d52c:	1007883a 	mov	r3,r2
 800d530:	e0bffd17 	ldw	r2,-12(fp)
 800d534:	1885883a 	add	r2,r3,r2
 800d538:	10c00003 	ldbu	r3,0(r2)
 800d53c:	e0bff804 	addi	r2,fp,-32
 800d540:	1105883a 	add	r2,r2,r4
 800d544:	10c00005 	stb	r3,0(r2)
 800d548:	00000c06 	br	800d57c <find_file_in_directory+0x18c>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
 800d54c:	e0fff317 	ldw	r3,-52(fp)
 800d550:	e0bff517 	ldw	r2,-44(fp)
 800d554:	1885c83a 	sub	r2,r3,r2
 800d558:	113fffc4 	addi	r4,r2,-1
 800d55c:	e0bff317 	ldw	r2,-52(fp)
 800d560:	1007883a 	mov	r3,r2
 800d564:	e0bffd17 	ldw	r2,-12(fp)
 800d568:	1885883a 	add	r2,r3,r2
 800d56c:	10c00003 	ldbu	r3,0(r2)
 800d570:	e0bffa04 	addi	r2,fp,-24
 800d574:	1105883a 	add	r2,r2,r4
 800d578:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 800d57c:	e0bff317 	ldw	r2,-52(fp)
 800d580:	10800044 	addi	r2,r2,1
 800d584:	e0bff315 	stw	r2,-52(fp)
 800d588:	e0fff317 	ldw	r3,-52(fp)
 800d58c:	e0bff217 	ldw	r2,-56(fp)
 800d590:	18bfd216 	blt	r3,r2,800d4dc <find_file_in_directory+0xec>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
 800d594:	e0bffc17 	ldw	r2,-16(fp)
 800d598:	1004c03a 	cmpne	r2,r2,zero
 800d59c:	1000441e 	bne	r2,zero,800d6b0 <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 800d5a0:	00820074 	movhi	r2,2049
 800d5a4:	1091cc04 	addi	r2,r2,18224
 800d5a8:	1080050b 	ldhu	r2,20(r2)
 800d5ac:	10bfffcc 	andi	r2,r2,65535
 800d5b0:	1008917a 	slli	r4,r2,5
 800d5b4:	00820074 	movhi	r2,2049
 800d5b8:	1091cc04 	addi	r2,r2,18224
 800d5bc:	1080030b 	ldhu	r2,12(r2)
 800d5c0:	117fffcc 	andi	r5,r2,65535
 800d5c4:	80097bc0 	call	80097bc <__divsi3>
 800d5c8:	e0bff015 	stw	r2,-64(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 800d5cc:	e03fef15 	stw	zero,-68(fp)
 800d5d0:	00003306 	br	800d6a0 <find_file_in_directory+0x2b0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 800d5d4:	00820074 	movhi	r2,2049
 800d5d8:	1091cc04 	addi	r2,r2,18224
 800d5dc:	10c01317 	ldw	r3,76(r2)
 800d5e0:	e0bfef17 	ldw	r2,-68(fp)
 800d5e4:	1885883a 	add	r2,r3,r2
 800d5e8:	1009883a 	mov	r4,r2
 800d5ec:	d166c917 	ldw	r5,-25820(gp)
 800d5f0:	800b70c0 	call	800b70c <Read_Sector_Data>
 800d5f4:	1005003a 	cmpeq	r2,r2,zero
 800d5f8:	10008e1e 	bne	r2,zero,800d834 <find_file_in_directory+0x444>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 800d5fc:	e03fee15 	stw	zero,-72(fp)
 800d600:	00001e06 	br	800d67c <find_file_in_directory+0x28c>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 800d604:	e0bfee17 	ldw	r2,-72(fp)
 800d608:	1008917a 	slli	r4,r2,5
 800d60c:	e1ffef17 	ldw	r7,-68(fp)
 800d610:	e17ffe17 	ldw	r5,-8(fp)
 800d614:	000d883a 	mov	r6,zero
 800d618:	800bb540 	call	800bb54 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 800d61c:	e0bffe17 	ldw	r2,-8(fp)
 800d620:	10800003 	ldbu	r2,0(r2)
 800d624:	10803fcc 	andi	r2,r2,255
 800d628:	10803960 	cmpeqi	r2,r2,229
 800d62c:	1000101e 	bne	r2,zero,800d670 <find_file_in_directory+0x280>
 800d630:	e0bffe17 	ldw	r2,-8(fp)
 800d634:	10800003 	ldbu	r2,0(r2)
 800d638:	10803fcc 	andi	r2,r2,255
 800d63c:	1005003a 	cmpeq	r2,r2,zero
 800d640:	10000b1e 	bne	r2,zero,800d670 <find_file_in_directory+0x280>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
 800d644:	e17ff804 	addi	r5,fp,-32
 800d648:	e1bffa04 	addi	r6,fp,-24
 800d64c:	e13ffe17 	ldw	r4,-8(fp)
 800d650:	800cbf00 	call	800cbf0 <match_file_record_to_name_ext>
 800d654:	e0bfed15 	stw	r2,-76(fp)

                        if (match)
 800d658:	e0bfed17 	ldw	r2,-76(fp)
 800d65c:	1005003a 	cmpeq	r2,r2,zero
 800d660:	1000031e 	bne	r2,zero,800d670 <find_file_in_directory+0x280>
                        {
                            result = true;
 800d664:	00800044 	movi	r2,1
 800d668:	e0bff115 	stw	r2,-60(fp)
                            break;
 800d66c:	00000606 	br	800d688 <find_file_in_directory+0x298>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 800d670:	e0bfee17 	ldw	r2,-72(fp)
 800d674:	10800044 	addi	r2,r2,1
 800d678:	e0bfee15 	stw	r2,-72(fp)
 800d67c:	e0bfee17 	ldw	r2,-72(fp)
 800d680:	10800410 	cmplti	r2,r2,16
 800d684:	103fdf1e 	bne	r2,zero,800d604 <find_file_in_directory+0x214>
            }
            else
            {
                break;
            }
            if (result)
 800d688:	e0bff117 	ldw	r2,-60(fp)
 800d68c:	1004c03a 	cmpne	r2,r2,zero
 800d690:	1000681e 	bne	r2,zero,800d834 <find_file_in_directory+0x444>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 800d694:	e0bfef17 	ldw	r2,-68(fp)
 800d698:	10800044 	addi	r2,r2,1
 800d69c:	e0bfef15 	stw	r2,-68(fp)
 800d6a0:	e0ffef17 	ldw	r3,-68(fp)
 800d6a4:	e0bff017 	ldw	r2,-64(fp)
 800d6a8:	18bfca16 	blt	r3,r2,800d5d4 <find_file_in_directory+0x1e4>
 800d6ac:	00006106 	br	800d834 <find_file_in_directory+0x444>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 800d6b0:	e0bff417 	ldw	r2,-48(fp)
 800d6b4:	113fff84 	addi	r4,r2,-2
 800d6b8:	00820074 	movhi	r2,2049
 800d6bc:	1091cc04 	addi	r2,r2,18224
 800d6c0:	10800383 	ldbu	r2,14(r2)
 800d6c4:	11403fcc 	andi	r5,r2,255
 800d6c8:	800988c0 	call	800988c <__mulsi3>
 800d6cc:	1007883a 	mov	r3,r2
 800d6d0:	00820074 	movhi	r2,2049
 800d6d4:	1091cc04 	addi	r2,r2,18224
 800d6d8:	10801417 	ldw	r2,80(r2)
 800d6dc:	1885883a 	add	r2,r3,r2
 800d6e0:	e0bfec15 	stw	r2,-80(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 800d6e4:	e03feb15 	stw	zero,-84(fp)
 800d6e8:	00003006 	br	800d7ac <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 800d6ec:	e0ffeb17 	ldw	r3,-84(fp)
 800d6f0:	e0bfec17 	ldw	r2,-80(fp)
 800d6f4:	1889883a 	add	r4,r3,r2
 800d6f8:	d166c917 	ldw	r5,-25820(gp)
 800d6fc:	800b70c0 	call	800b70c <Read_Sector_Data>
 800d700:	1005003a 	cmpeq	r2,r2,zero
 800d704:	10002f1e 	bne	r2,zero,800d7c4 <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 800d708:	e03fea15 	stw	zero,-88(fp)
 800d70c:	00001e06 	br	800d788 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 800d710:	e0bfea17 	ldw	r2,-88(fp)
 800d714:	1008917a 	slli	r4,r2,5
 800d718:	e1bff417 	ldw	r6,-48(fp)
 800d71c:	e1ffeb17 	ldw	r7,-84(fp)
 800d720:	e17ffe17 	ldw	r5,-8(fp)
 800d724:	800bb540 	call	800bb54 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 800d728:	e0bffe17 	ldw	r2,-8(fp)
 800d72c:	10800003 	ldbu	r2,0(r2)
 800d730:	10803fcc 	andi	r2,r2,255
 800d734:	10803960 	cmpeqi	r2,r2,229
 800d738:	1000101e 	bne	r2,zero,800d77c <find_file_in_directory+0x38c>
 800d73c:	e0bffe17 	ldw	r2,-8(fp)
 800d740:	10800003 	ldbu	r2,0(r2)
 800d744:	10803fcc 	andi	r2,r2,255
 800d748:	1005003a 	cmpeq	r2,r2,zero
 800d74c:	10000b1e 	bne	r2,zero,800d77c <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 800d750:	e17ff804 	addi	r5,fp,-32
 800d754:	e1bffa04 	addi	r6,fp,-24
 800d758:	e13ffe17 	ldw	r4,-8(fp)
 800d75c:	800cbf00 	call	800cbf0 <match_file_record_to_name_ext>
 800d760:	e0bfe915 	stw	r2,-92(fp)

                            if (match)
 800d764:	e0bfe917 	ldw	r2,-92(fp)
 800d768:	1005003a 	cmpeq	r2,r2,zero
 800d76c:	1000031e 	bne	r2,zero,800d77c <find_file_in_directory+0x38c>
                            {                               
                                result = true;
 800d770:	00800044 	movi	r2,1
 800d774:	e0bff115 	stw	r2,-60(fp)
                                break;
 800d778:	00000606 	br	800d794 <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 800d77c:	e0bfea17 	ldw	r2,-88(fp)
 800d780:	10800044 	addi	r2,r2,1
 800d784:	e0bfea15 	stw	r2,-88(fp)
 800d788:	e0bfea17 	ldw	r2,-88(fp)
 800d78c:	10800410 	cmplti	r2,r2,16
 800d790:	103fdf1e 	bne	r2,zero,800d710 <find_file_in_directory+0x320>
                }
                else
                {
                    break;
                }
                if (result)
 800d794:	e0bff117 	ldw	r2,-60(fp)
 800d798:	1004c03a 	cmpne	r2,r2,zero
 800d79c:	1000091e 	bne	r2,zero,800d7c4 <find_file_in_directory+0x3d4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 800d7a0:	e0bfeb17 	ldw	r2,-84(fp)
 800d7a4:	10800044 	addi	r2,r2,1
 800d7a8:	e0bfeb15 	stw	r2,-84(fp)
 800d7ac:	00820074 	movhi	r2,2049
 800d7b0:	1091cc04 	addi	r2,r2,18224
 800d7b4:	10800383 	ldbu	r2,14(r2)
 800d7b8:	10c03fcc 	andi	r3,r2,255
 800d7bc:	e0bfeb17 	ldw	r2,-84(fp)
 800d7c0:	10ffca16 	blt	r2,r3,800d6ec <find_file_in_directory+0x2fc>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
 800d7c4:	e0bff117 	ldw	r2,-60(fp)
 800d7c8:	1004c03a 	cmpne	r2,r2,zero
 800d7cc:	1000131e 	bne	r2,zero,800d81c <find_file_in_directory+0x42c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
 800d7d0:	e13ff417 	ldw	r4,-48(fp)
 800d7d4:	e17ffb04 	addi	r5,fp,-20
 800d7d8:	800b8080 	call	800b808 <get_cluster_flag>
 800d7dc:	1005003a 	cmpeq	r2,r2,zero
 800d7e0:	10000c1e 	bne	r2,zero,800d814 <find_file_in_directory+0x424>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 800d7e4:	e0bffb0b 	ldhu	r2,-20(fp)
 800d7e8:	10bfffcc 	andi	r2,r2,65535
 800d7ec:	10fffe0c 	andi	r3,r2,65528
 800d7f0:	00bffe14 	movui	r2,65528
 800d7f4:	1880021e 	bne	r3,r2,800d800 <find_file_in_directory+0x410>
					{
						return false;
 800d7f8:	e03fff15 	stw	zero,-4(fp)
 800d7fc:	00000f06 	br	800d83c <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 800d800:	e0bffb0b 	ldhu	r2,-20(fp)
 800d804:	10bfffcc 	andi	r2,r2,65535
 800d808:	10bffe0c 	andi	r2,r2,65528
 800d80c:	e0bff415 	stw	r2,-48(fp)
 800d810:	00000206 	br	800d81c <find_file_in_directory+0x42c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
 800d814:	e03fff15 	stw	zero,-4(fp)
 800d818:	00000806 	br	800d83c <find_file_in_directory+0x44c>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
 800d81c:	e0fff417 	ldw	r3,-48(fp)
 800d820:	00bffdd4 	movui	r2,65527
 800d824:	10c00316 	blt	r2,r3,800d834 <find_file_in_directory+0x444>
 800d828:	e0bff117 	ldw	r2,-60(fp)
 800d82c:	1005003a 	cmpeq	r2,r2,zero
 800d830:	103f9f1e 	bne	r2,zero,800d6b0 <find_file_in_directory+0x2c0>
    }
    
    return result;   
 800d834:	e0bff117 	ldw	r2,-60(fp)
 800d838:	e0bfff15 	stw	r2,-4(fp)
 800d83c:	e0bfff17 	ldw	r2,-4(fp)
}
 800d840:	e037883a 	mov	sp,fp
 800d844:	dfc00117 	ldw	ra,4(sp)
 800d848:	df000017 	ldw	fp,0(sp)
 800d84c:	dec00204 	addi	sp,sp,8
 800d850:	f800283a 	ret

0800d854 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 800d854:	defff504 	addi	sp,sp,-44
 800d858:	dfc00a15 	stw	ra,40(sp)
 800d85c:	df000915 	stw	fp,36(sp)
 800d860:	df000904 	addi	fp,sp,36
 800d864:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
 800d868:	00820074 	movhi	r2,2049
 800d86c:	1091cc04 	addi	r2,r2,18224
 800d870:	10801117 	ldw	r2,68(r2)
 800d874:	e0bffe15 	stw	r2,-8(fp)
    unsigned int cluster_index = 2;
 800d878:	00800084 	movi	r2,2
 800d87c:	e0bffd15 	stw	r2,-12(fp)
    short int cluster = -1;
 800d880:	00bfffc4 	movi	r2,-1
 800d884:	e0bffc0d 	sth	r2,-16(fp)
    bool result = false;
 800d888:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 800d88c:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 800d890:	00820074 	movhi	r2,2049
 800d894:	1091cc04 	addi	r2,r2,18224
 800d898:	10801417 	ldw	r2,80(r2)
 800d89c:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 800d8a0:	00820074 	movhi	r2,2049
 800d8a4:	1091cc04 	addi	r2,r2,18224
 800d8a8:	1080058b 	ldhu	r2,22(r2)
 800d8ac:	10bfffcc 	andi	r2,r2,65535
 800d8b0:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
 800d8b4:	00820074 	movhi	r2,2049
 800d8b8:	1091cc04 	addi	r2,r2,18224
 800d8bc:	10800917 	ldw	r2,36(r2)
 800d8c0:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32)
 800d8c4:	e0fff817 	ldw	r3,-32(fp)
 800d8c8:	e0bff717 	ldw	r2,-36(fp)
 800d8cc:	10c00b2e 	bgeu	r2,r3,800d8fc <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 800d8d0:	e0fff817 	ldw	r3,-32(fp)
 800d8d4:	e0bff917 	ldw	r2,-28(fp)
 800d8d8:	1889c83a 	sub	r4,r3,r2
 800d8dc:	00820074 	movhi	r2,2049
 800d8e0:	1091cc04 	addi	r2,r2,18224
 800d8e4:	10800383 	ldbu	r2,14(r2)
 800d8e8:	11403fcc 	andi	r5,r2,255
 800d8ec:	800987c0 	call	800987c <__udivsi3>
 800d8f0:	10800044 	addi	r2,r2,1
 800d8f4:	e0bffa15 	stw	r2,-24(fp)
 800d8f8:	00002906 	br	800d9a0 <find_first_empty_cluster+0x14c>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 800d8fc:	e0fff717 	ldw	r3,-36(fp)
 800d900:	e0bff917 	ldw	r2,-28(fp)
 800d904:	1889c83a 	sub	r4,r3,r2
 800d908:	00820074 	movhi	r2,2049
 800d90c:	1091cc04 	addi	r2,r2,18224
 800d910:	10800383 	ldbu	r2,14(r2)
 800d914:	11403fcc 	andi	r5,r2,255
 800d918:	800987c0 	call	800987c <__udivsi3>
 800d91c:	10800044 	addi	r2,r2,1
 800d920:	e0bffa15 	stw	r2,-24(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 800d924:	00001e06 	br	800d9a0 <find_first_empty_cluster+0x14c>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
 800d928:	e13ffe17 	ldw	r4,-8(fp)
 800d92c:	d166c917 	ldw	r5,-25820(gp)
 800d930:	800b70c0 	call	800b70c <Read_Sector_Data>
 800d934:	1005003a 	cmpeq	r2,r2,zero
 800d938:	1000131e 	bne	r2,zero,800d988 <find_first_empty_cluster+0x134>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
 800d93c:	d0a6cb17 	ldw	r2,-25812(gp)
 800d940:	10800a17 	ldw	r2,40(r2)
 800d944:	1007883a 	mov	r3,r2
 800d948:	e0bffd17 	ldw	r2,-12(fp)
 800d94c:	10803fcc 	andi	r2,r2,255
 800d950:	1085883a 	add	r2,r2,r2
 800d954:	1885883a 	add	r2,r3,r2
 800d958:	1080002b 	ldhuio	r2,0(r2)
 800d95c:	e0bffc0d 	sth	r2,-16(fp)
                if (cluster == 0)
 800d960:	e0bffc0f 	ldh	r2,-16(fp)
 800d964:	1005003a 	cmpeq	r2,r2,zero
 800d968:	1000071e 	bne	r2,zero,800d988 <find_first_empty_cluster+0x134>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
 800d96c:	e0bffd17 	ldw	r2,-12(fp)
 800d970:	10800044 	addi	r2,r2,1
 800d974:	e0bffd15 	stw	r2,-12(fp)
                } 
            } while ((cluster_index % 256) != 0);
 800d978:	e0bffd17 	ldw	r2,-12(fp)
 800d97c:	10803fcc 	andi	r2,r2,255
 800d980:	1004c03a 	cmpne	r2,r2,zero
 800d984:	103fed1e 	bne	r2,zero,800d93c <find_first_empty_cluster+0xe8>
        }
        if (cluster == 0)
 800d988:	e0bffc0f 	ldh	r2,-16(fp)
 800d98c:	1005003a 	cmpeq	r2,r2,zero
 800d990:	1000081e 	bne	r2,zero,800d9b4 <find_first_empty_cluster+0x160>
        {
            break;
        }
        sector++;
 800d994:	e0bffe17 	ldw	r2,-8(fp)
 800d998:	10800044 	addi	r2,r2,1
 800d99c:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 800d9a0:	00820074 	movhi	r2,2049
 800d9a4:	1091cc04 	addi	r2,r2,18224
 800d9a8:	10c01217 	ldw	r3,72(r2)
 800d9ac:	e0bffe17 	ldw	r2,-8(fp)
 800d9b0:	18bfdd1e 	bne	r3,r2,800d928 <find_first_empty_cluster+0xd4>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
 800d9b4:	e0bffc0f 	ldh	r2,-16(fp)
 800d9b8:	1004c03a 	cmpne	r2,r2,zero
 800d9bc:	1000081e 	bne	r2,zero,800d9e0 <find_first_empty_cluster+0x18c>
 800d9c0:	e0fffc0f 	ldh	r3,-16(fp)
 800d9c4:	e0bffa17 	ldw	r2,-24(fp)
 800d9c8:	10c00536 	bltu	r2,r3,800d9e0 <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
 800d9cc:	e0bfff17 	ldw	r2,-4(fp)
 800d9d0:	e0fffd17 	ldw	r3,-12(fp)
 800d9d4:	10c00015 	stw	r3,0(r2)
		result = true;
 800d9d8:	00800044 	movi	r2,1
 800d9dc:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
 800d9e0:	e0bffb17 	ldw	r2,-20(fp)
}
 800d9e4:	e037883a 	mov	sp,fp
 800d9e8:	dfc00117 	ldw	ra,4(sp)
 800d9ec:	df000017 	ldw	fp,0(sp)
 800d9f0:	dec00204 	addi	sp,sp,8
 800d9f4:	f800283a 	ret

0800d9f8 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 800d9f8:	defff404 	addi	sp,sp,-48
 800d9fc:	dfc00b15 	stw	ra,44(sp)
 800da00:	df000a15 	stw	fp,40(sp)
 800da04:	df000a04 	addi	fp,sp,40
 800da08:	e13ffe15 	stw	r4,-8(fp)
    int result = -1;
 800da0c:	00bfffc4 	movi	r2,-1
 800da10:	e0bffb15 	stw	r2,-20(fp)
    int cluster = start_cluster_index;
 800da14:	e0bffe17 	ldw	r2,-8(fp)
 800da18:	e0bffa15 	stw	r2,-24(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 800da1c:	e0bffa17 	ldw	r2,-24(fp)
 800da20:	113fff84 	addi	r4,r2,-2
 800da24:	00820074 	movhi	r2,2049
 800da28:	1091cc04 	addi	r2,r2,18224
 800da2c:	10800383 	ldbu	r2,14(r2)
 800da30:	11403fcc 	andi	r5,r2,255
 800da34:	800988c0 	call	800988c <__mulsi3>
 800da38:	1007883a 	mov	r3,r2
 800da3c:	00820074 	movhi	r2,2049
 800da40:	1091cc04 	addi	r2,r2,18224
 800da44:	10801417 	ldw	r2,80(r2)
 800da48:	1885883a 	add	r2,r3,r2
 800da4c:	e0bff915 	stw	r2,-28(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 800da50:	e03ff815 	stw	zero,-32(fp)
 800da54:	00002c06 	br	800db08 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 800da58:	e0fff817 	ldw	r3,-32(fp)
 800da5c:	e0bff917 	ldw	r2,-28(fp)
 800da60:	1889883a 	add	r4,r3,r2
 800da64:	d166c917 	ldw	r5,-25820(gp)
 800da68:	800b70c0 	call	800b70c <Read_Sector_Data>
 800da6c:	1005003a 	cmpeq	r2,r2,zero
 800da70:	10002b1e 	bne	r2,zero,800db20 <find_first_empty_record_in_a_subdirectory+0x128>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 800da74:	e03ff715 	stw	zero,-36(fp)
 800da78:	00001d06 	br	800daf0 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 800da7c:	d0a6cb17 	ldw	r2,-25812(gp)
 800da80:	10800a17 	ldw	r2,40(r2)
 800da84:	1007883a 	mov	r3,r2
 800da88:	e0bff717 	ldw	r2,-36(fp)
 800da8c:	1004917a 	slli	r2,r2,5
 800da90:	1885883a 	add	r2,r3,r2
 800da94:	10800023 	ldbuio	r2,0(r2)
 800da98:	10803fcc 	andi	r2,r2,255
 800da9c:	e0bff60d 	sth	r2,-40(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
 800daa0:	e0bff60b 	ldhu	r2,-40(fp)
 800daa4:	10803960 	cmpeqi	r2,r2,229
 800daa8:	1000031e 	bne	r2,zero,800dab8 <find_first_empty_record_in_a_subdirectory+0xc0>
 800daac:	e0bff60b 	ldhu	r2,-40(fp)
 800dab0:	1004c03a 	cmpne	r2,r2,zero
 800dab4:	10000b1e 	bne	r2,zero,800dae4 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
 800dab8:	e0bff817 	ldw	r2,-32(fp)
 800dabc:	1006913a 	slli	r3,r2,4
 800dac0:	e0bff717 	ldw	r2,-36(fp)
 800dac4:	1885883a 	add	r2,r3,r2
 800dac8:	1006943a 	slli	r3,r2,16
 800dacc:	e0bffa17 	ldw	r2,-24(fp)
 800dad0:	1884b03a 	or	r2,r3,r2
 800dad4:	e0bffb15 	stw	r2,-20(fp)
                        return result;
 800dad8:	e0bffb17 	ldw	r2,-20(fp)
 800dadc:	e0bfff15 	stw	r2,-4(fp)
 800dae0:	00005206 	br	800dc2c <find_first_empty_record_in_a_subdirectory+0x234>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 800dae4:	e0bff717 	ldw	r2,-36(fp)
 800dae8:	10800044 	addi	r2,r2,1
 800daec:	e0bff715 	stw	r2,-36(fp)
 800daf0:	e0bff717 	ldw	r2,-36(fp)
 800daf4:	10800410 	cmplti	r2,r2,16
 800daf8:	103fe01e 	bne	r2,zero,800da7c <find_first_empty_record_in_a_subdirectory+0x84>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 800dafc:	e0bff817 	ldw	r2,-32(fp)
 800db00:	10800044 	addi	r2,r2,1
 800db04:	e0bff815 	stw	r2,-32(fp)
 800db08:	00820074 	movhi	r2,2049
 800db0c:	1091cc04 	addi	r2,r2,18224
 800db10:	10800383 	ldbu	r2,14(r2)
 800db14:	10c03fcc 	andi	r3,r2,255
 800db18:	e0bff817 	ldw	r2,-32(fp)
 800db1c:	10ffce16 	blt	r2,r3,800da58 <find_first_empty_record_in_a_subdirectory+0x60>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
 800db20:	e0bffb17 	ldw	r2,-20(fp)
 800db24:	1004403a 	cmpge	r2,r2,zero
 800db28:	1000381e 	bne	r2,zero,800dc0c <find_first_empty_record_in_a_subdirectory+0x214>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
 800db2c:	e13ffa17 	ldw	r4,-24(fp)
 800db30:	e17ffc04 	addi	r5,fp,-16
 800db34:	800b8080 	call	800b808 <get_cluster_flag>
 800db38:	1005003a 	cmpeq	r2,r2,zero
 800db3c:	1000311e 	bne	r2,zero,800dc04 <find_first_empty_record_in_a_subdirectory+0x20c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 800db40:	e0bffc0b 	ldhu	r2,-16(fp)
 800db44:	10bfffcc 	andi	r2,r2,65535
 800db48:	10fffe0c 	andi	r3,r2,65528
 800db4c:	00bffe14 	movui	r2,65528
 800db50:	18802e1e 	bne	r3,r2,800dc0c <find_first_empty_record_in_a_subdirectory+0x214>
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
 800db54:	e13ffd04 	addi	r4,fp,-12
 800db58:	800d8540 	call	800d854 <find_first_empty_cluster>
 800db5c:	1005003a 	cmpeq	r2,r2,zero
 800db60:	1000231e 	bne	r2,zero,800dbf0 <find_first_empty_record_in_a_subdirectory+0x1f8>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 800db64:	e13ffa17 	ldw	r4,-24(fp)
 800db68:	e0bffd17 	ldw	r2,-12(fp)
 800db6c:	117fffcc 	andi	r5,r2,65535
 800db70:	2960001c 	xori	r5,r5,32768
 800db74:	29600004 	addi	r5,r5,-32768
 800db78:	01800044 	movi	r6,1
 800db7c:	800b8c00 	call	800b8c0 <mark_cluster>
 800db80:	1005003a 	cmpeq	r2,r2,zero
 800db84:	10001a1e 	bne	r2,zero,800dbf0 <find_first_empty_record_in_a_subdirectory+0x1f8>
 800db88:	e0bffd17 	ldw	r2,-12(fp)
 800db8c:	1009883a 	mov	r4,r2
 800db90:	017fffc4 	movi	r5,-1
 800db94:	01800044 	movi	r6,1
 800db98:	800b8c00 	call	800b8c0 <mark_cluster>
 800db9c:	1005003a 	cmpeq	r2,r2,zero
 800dba0:	1000131e 	bne	r2,zero,800dbf0 <find_first_empty_record_in_a_subdirectory+0x1f8>
 800dba4:	e13ffa17 	ldw	r4,-24(fp)
 800dba8:	e0bffd17 	ldw	r2,-12(fp)
 800dbac:	117fffcc 	andi	r5,r2,65535
 800dbb0:	2960001c 	xori	r5,r5,32768
 800dbb4:	29600004 	addi	r5,r5,-32768
 800dbb8:	000d883a 	mov	r6,zero
 800dbbc:	800b8c00 	call	800b8c0 <mark_cluster>
 800dbc0:	1005003a 	cmpeq	r2,r2,zero
 800dbc4:	10000a1e 	bne	r2,zero,800dbf0 <find_first_empty_record_in_a_subdirectory+0x1f8>
 800dbc8:	e0bffd17 	ldw	r2,-12(fp)
 800dbcc:	1009883a 	mov	r4,r2
 800dbd0:	017fffc4 	movi	r5,-1
 800dbd4:	000d883a 	mov	r6,zero
 800dbd8:	800b8c00 	call	800b8c0 <mark_cluster>
 800dbdc:	1005003a 	cmpeq	r2,r2,zero
 800dbe0:	1000031e 	bne	r2,zero,800dbf0 <find_first_empty_record_in_a_subdirectory+0x1f8>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
 800dbe4:	800b6bc0 	call	800b6bc <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
 800dbe8:	e0bffd17 	ldw	r2,-12(fp)
 800dbec:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 800dbf0:	e0bffc0b 	ldhu	r2,-16(fp)
 800dbf4:	10bfffcc 	andi	r2,r2,65535
 800dbf8:	10bffe0c 	andi	r2,r2,65528
 800dbfc:	e0bffa15 	stw	r2,-24(fp)
 800dc00:	00000206 	br	800dc0c <find_first_empty_record_in_a_subdirectory+0x214>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
 800dc04:	00bfffc4 	movi	r2,-1
 800dc08:	e0bffb15 	stw	r2,-20(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
 800dc0c:	e0fffa17 	ldw	r3,-24(fp)
 800dc10:	00bffdd4 	movui	r2,65527
 800dc14:	10c00316 	blt	r2,r3,800dc24 <find_first_empty_record_in_a_subdirectory+0x22c>
 800dc18:	e0bffb17 	ldw	r2,-20(fp)
 800dc1c:	10bfffe0 	cmpeqi	r2,r2,-1
 800dc20:	103f7e1e 	bne	r2,zero,800da1c <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
 800dc24:	e0bffb17 	ldw	r2,-20(fp)
 800dc28:	e0bfff15 	stw	r2,-4(fp)
 800dc2c:	e0bfff17 	ldw	r2,-4(fp)
}
 800dc30:	e037883a 	mov	sp,fp
 800dc34:	dfc00117 	ldw	ra,4(sp)
 800dc38:	df000017 	ldw	fp,0(sp)
 800dc3c:	dec00204 	addi	sp,sp,8
 800dc40:	f800283a 	ret

0800dc44 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 800dc44:	defff804 	addi	sp,sp,-32
 800dc48:	dfc00715 	stw	ra,28(sp)
 800dc4c:	df000615 	stw	fp,24(sp)
 800dc50:	df000604 	addi	fp,sp,24
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 800dc54:	00820074 	movhi	r2,2049
 800dc58:	1091cc04 	addi	r2,r2,18224
 800dc5c:	1080050b 	ldhu	r2,20(r2)
 800dc60:	10bfffcc 	andi	r2,r2,65535
 800dc64:	1008917a 	slli	r4,r2,5
 800dc68:	00820074 	movhi	r2,2049
 800dc6c:	1091cc04 	addi	r2,r2,18224
 800dc70:	1080030b 	ldhu	r2,12(r2)
 800dc74:	117fffcc 	andi	r5,r2,65535
 800dc78:	80097bc0 	call	80097bc <__divsi3>
 800dc7c:	e0bffe15 	stw	r2,-8(fp)
    int sector_index;
    int result = -1;
 800dc80:	00bfffc4 	movi	r2,-1
 800dc84:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 800dc88:	e03ffd15 	stw	zero,-12(fp)
 800dc8c:	00002d06 	br	800dd44 <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 800dc90:	00820074 	movhi	r2,2049
 800dc94:	1091cc04 	addi	r2,r2,18224
 800dc98:	10c01317 	ldw	r3,76(r2)
 800dc9c:	e0bffd17 	ldw	r2,-12(fp)
 800dca0:	1885883a 	add	r2,r3,r2
 800dca4:	1009883a 	mov	r4,r2
 800dca8:	d166c917 	ldw	r5,-25820(gp)
 800dcac:	800b70c0 	call	800b70c <Read_Sector_Data>
 800dcb0:	1005003a 	cmpeq	r2,r2,zero
 800dcb4:	1000261e 	bne	r2,zero,800dd50 <find_first_empty_record_in_root_directory+0x10c>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 800dcb8:	e03ffb15 	stw	zero,-20(fp)
 800dcbc:	00001b06 	br	800dd2c <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 800dcc0:	d0a6cb17 	ldw	r2,-25812(gp)
 800dcc4:	10800a17 	ldw	r2,40(r2)
 800dcc8:	1007883a 	mov	r3,r2
 800dccc:	e0bffb17 	ldw	r2,-20(fp)
 800dcd0:	1004917a 	slli	r2,r2,5
 800dcd4:	1885883a 	add	r2,r3,r2
 800dcd8:	10800023 	ldbuio	r2,0(r2)
 800dcdc:	10803fcc 	andi	r2,r2,255
 800dce0:	e0bffa0d 	sth	r2,-24(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
 800dce4:	e0bffa0b 	ldhu	r2,-24(fp)
 800dce8:	10803960 	cmpeqi	r2,r2,229
 800dcec:	1000031e 	bne	r2,zero,800dcfc <find_first_empty_record_in_root_directory+0xb8>
 800dcf0:	e0bffa0b 	ldhu	r2,-24(fp)
 800dcf4:	1004c03a 	cmpne	r2,r2,zero
 800dcf8:	1000091e 	bne	r2,zero,800dd20 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
 800dcfc:	e0bffd17 	ldw	r2,-12(fp)
 800dd00:	1006913a 	slli	r3,r2,4
 800dd04:	e0bffb17 	ldw	r2,-20(fp)
 800dd08:	1885883a 	add	r2,r3,r2
 800dd0c:	1004943a 	slli	r2,r2,16
 800dd10:	e0bffc15 	stw	r2,-16(fp)
                    return result;
 800dd14:	e0bffc17 	ldw	r2,-16(fp)
 800dd18:	e0bfff15 	stw	r2,-4(fp)
 800dd1c:	00000e06 	br	800dd58 <find_first_empty_record_in_root_directory+0x114>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 800dd20:	e0bffb17 	ldw	r2,-20(fp)
 800dd24:	10800044 	addi	r2,r2,1
 800dd28:	e0bffb15 	stw	r2,-20(fp)
 800dd2c:	e0bffb17 	ldw	r2,-20(fp)
 800dd30:	10800410 	cmplti	r2,r2,16
 800dd34:	103fe21e 	bne	r2,zero,800dcc0 <find_first_empty_record_in_root_directory+0x7c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 800dd38:	e0bffd17 	ldw	r2,-12(fp)
 800dd3c:	10800044 	addi	r2,r2,1
 800dd40:	e0bffd15 	stw	r2,-12(fp)
 800dd44:	e0fffd17 	ldw	r3,-12(fp)
 800dd48:	e0bffe17 	ldw	r2,-8(fp)
 800dd4c:	18bfd016 	blt	r3,r2,800dc90 <find_first_empty_record_in_root_directory+0x4c>
        else
        {
            break;
        }
    }
    return result;
 800dd50:	e0bffc17 	ldw	r2,-16(fp)
 800dd54:	e0bfff15 	stw	r2,-4(fp)
 800dd58:	e0bfff17 	ldw	r2,-4(fp)
}
 800dd5c:	e037883a 	mov	sp,fp
 800dd60:	dfc00117 	ldw	ra,4(sp)
 800dd64:	df000017 	ldw	fp,0(sp)
 800dd68:	dec00204 	addi	sp,sp,8
 800dd6c:	f800283a 	ret

0800dd70 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
 800dd70:	defffa04 	addi	sp,sp,-24
 800dd74:	df000515 	stw	fp,20(sp)
 800dd78:	df000504 	addi	fp,sp,20
 800dd7c:	e13ffd15 	stw	r4,-12(fp)
 800dd80:	e17ffe15 	stw	r5,-8(fp)
 800dd84:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
 800dd88:	e03ffb15 	stw	zero,-20(fp)
    
    for(counter = 0; counter < 8; counter++)
 800dd8c:	e03ffc15 	stw	zero,-16(fp)
 800dd90:	00002b06 	br	800de40 <convert_filename_to_name_extension+0xd0>
    {
        if (filename[local] != '.')
 800dd94:	e0bffb17 	ldw	r2,-20(fp)
 800dd98:	1007883a 	mov	r3,r2
 800dd9c:	e0bffd17 	ldw	r2,-12(fp)
 800dda0:	1885883a 	add	r2,r3,r2
 800dda4:	10800003 	ldbu	r2,0(r2)
 800dda8:	10803fcc 	andi	r2,r2,255
 800ddac:	1080201c 	xori	r2,r2,128
 800ddb0:	10bfe004 	addi	r2,r2,-128
 800ddb4:	10800ba0 	cmpeqi	r2,r2,46
 800ddb8:	1000181e 	bne	r2,zero,800de1c <convert_filename_to_name_extension+0xac>
        {
            name[counter] = filename[local];
 800ddbc:	e0bffc17 	ldw	r2,-16(fp)
 800ddc0:	1007883a 	mov	r3,r2
 800ddc4:	e0bffe17 	ldw	r2,-8(fp)
 800ddc8:	1889883a 	add	r4,r3,r2
 800ddcc:	e0bffb17 	ldw	r2,-20(fp)
 800ddd0:	1007883a 	mov	r3,r2
 800ddd4:	e0bffd17 	ldw	r2,-12(fp)
 800ddd8:	1885883a 	add	r2,r3,r2
 800dddc:	10800003 	ldbu	r2,0(r2)
 800dde0:	20800005 	stb	r2,0(r4)
            if (filename[local] != 0) local++;
 800dde4:	e0bffb17 	ldw	r2,-20(fp)
 800dde8:	1007883a 	mov	r3,r2
 800ddec:	e0bffd17 	ldw	r2,-12(fp)
 800ddf0:	1885883a 	add	r2,r3,r2
 800ddf4:	10800003 	ldbu	r2,0(r2)
 800ddf8:	10803fcc 	andi	r2,r2,255
 800ddfc:	1080201c 	xori	r2,r2,128
 800de00:	10bfe004 	addi	r2,r2,-128
 800de04:	1005003a 	cmpeq	r2,r2,zero
 800de08:	10000a1e 	bne	r2,zero,800de34 <convert_filename_to_name_extension+0xc4>
 800de0c:	e0bffb17 	ldw	r2,-20(fp)
 800de10:	10800044 	addi	r2,r2,1
 800de14:	e0bffb15 	stw	r2,-20(fp)
 800de18:	00000606 	br	800de34 <convert_filename_to_name_extension+0xc4>
        }
        else
        {
            name[counter] = ' ';
 800de1c:	e0bffc17 	ldw	r2,-16(fp)
 800de20:	1007883a 	mov	r3,r2
 800de24:	e0bffe17 	ldw	r2,-8(fp)
 800de28:	1887883a 	add	r3,r3,r2
 800de2c:	00800804 	movi	r2,32
 800de30:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
 800de34:	e0bffc17 	ldw	r2,-16(fp)
 800de38:	10800044 	addi	r2,r2,1
 800de3c:	e0bffc15 	stw	r2,-16(fp)
 800de40:	e0bffc17 	ldw	r2,-16(fp)
 800de44:	10800210 	cmplti	r2,r2,8
 800de48:	103fd21e 	bne	r2,zero,800dd94 <convert_filename_to_name_extension+0x24>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
 800de4c:	e0bffb17 	ldw	r2,-20(fp)
 800de50:	1007883a 	mov	r3,r2
 800de54:	e0bffd17 	ldw	r2,-12(fp)
 800de58:	1885883a 	add	r2,r3,r2
 800de5c:	10800003 	ldbu	r2,0(r2)
 800de60:	10803fcc 	andi	r2,r2,255
 800de64:	1080201c 	xori	r2,r2,128
 800de68:	10bfe004 	addi	r2,r2,-128
 800de6c:	10800b98 	cmpnei	r2,r2,46
 800de70:	1000031e 	bne	r2,zero,800de80 <convert_filename_to_name_extension+0x110>
 800de74:	e0bffb17 	ldw	r2,-20(fp)
 800de78:	10800044 	addi	r2,r2,1
 800de7c:	e0bffb15 	stw	r2,-20(fp)
    for(counter = 0; counter < 3; counter++)
 800de80:	e03ffc15 	stw	zero,-16(fp)
 800de84:	00002106 	br	800df0c <convert_filename_to_name_extension+0x19c>
    {
        if (filename[local] != 0)
 800de88:	e0bffb17 	ldw	r2,-20(fp)
 800de8c:	1007883a 	mov	r3,r2
 800de90:	e0bffd17 	ldw	r2,-12(fp)
 800de94:	1885883a 	add	r2,r3,r2
 800de98:	10800003 	ldbu	r2,0(r2)
 800de9c:	10803fcc 	andi	r2,r2,255
 800dea0:	1080201c 	xori	r2,r2,128
 800dea4:	10bfe004 	addi	r2,r2,-128
 800dea8:	1005003a 	cmpeq	r2,r2,zero
 800deac:	10000e1e 	bne	r2,zero,800dee8 <convert_filename_to_name_extension+0x178>
        {
            extension[counter] = filename[local];
 800deb0:	e0bffc17 	ldw	r2,-16(fp)
 800deb4:	1007883a 	mov	r3,r2
 800deb8:	e0bfff17 	ldw	r2,-4(fp)
 800debc:	1889883a 	add	r4,r3,r2
 800dec0:	e0bffb17 	ldw	r2,-20(fp)
 800dec4:	1007883a 	mov	r3,r2
 800dec8:	e0bffd17 	ldw	r2,-12(fp)
 800decc:	1885883a 	add	r2,r3,r2
 800ded0:	10800003 	ldbu	r2,0(r2)
 800ded4:	20800005 	stb	r2,0(r4)
            local++;
 800ded8:	e0bffb17 	ldw	r2,-20(fp)
 800dedc:	10800044 	addi	r2,r2,1
 800dee0:	e0bffb15 	stw	r2,-20(fp)
 800dee4:	00000606 	br	800df00 <convert_filename_to_name_extension+0x190>
        }
        else
        {
            extension[counter] = ' ';
 800dee8:	e0bffc17 	ldw	r2,-16(fp)
 800deec:	1007883a 	mov	r3,r2
 800def0:	e0bfff17 	ldw	r2,-4(fp)
 800def4:	1887883a 	add	r3,r3,r2
 800def8:	00800804 	movi	r2,32
 800defc:	18800005 	stb	r2,0(r3)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
 800df00:	e0bffc17 	ldw	r2,-16(fp)
 800df04:	10800044 	addi	r2,r2,1
 800df08:	e0bffc15 	stw	r2,-16(fp)
 800df0c:	e0bffc17 	ldw	r2,-16(fp)
 800df10:	108000d0 	cmplti	r2,r2,3
 800df14:	103fdc1e 	bne	r2,zero,800de88 <convert_filename_to_name_extension+0x118>
        {
            extension[counter] = ' ';
        }
    }

}
 800df18:	e037883a 	mov	sp,fp
 800df1c:	df000017 	ldw	fp,0(sp)
 800df20:	dec00104 	addi	sp,sp,4
 800df24:	f800283a 	ret

0800df28 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 800df28:	defff204 	addi	sp,sp,-56
 800df2c:	dfc00d15 	stw	ra,52(sp)
 800df30:	df000c15 	stw	fp,48(sp)
 800df34:	dc000b15 	stw	r16,44(sp)
 800df38:	df000b04 	addi	fp,sp,44
 800df3c:	e13ffb15 	stw	r4,-20(fp)
 800df40:	e17ffc15 	stw	r5,-16(fp)
 800df44:	e1bffd15 	stw	r6,-12(fp)
    unsigned int cluster_number;
    bool result = false;
 800df48:	e03ff915 	stw	zero,-28(fp)
    
    if (find_first_empty_cluster(&cluster_number))
 800df4c:	e13ffa04 	addi	r4,fp,-24
 800df50:	800d8540 	call	800d854 <find_first_empty_cluster>
 800df54:	1005003a 	cmpeq	r2,r2,zero
 800df58:	1000a31e 	bne	r2,zero,800e1e8 <create_file+0x2c0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
 800df5c:	e0bffd17 	ldw	r2,-12(fp)
 800df60:	10800a17 	ldw	r2,40(r2)
 800df64:	1004c03a 	cmpne	r2,r2,zero
 800df68:	1000031e 	bne	r2,zero,800df78 <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
 800df6c:	800dc440 	call	800dc44 <find_first_empty_record_in_root_directory>
 800df70:	e0bff815 	stw	r2,-32(fp)
 800df74:	00000506 	br	800df8c <create_file+0x64>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
 800df78:	e0bffd17 	ldw	r2,-12(fp)
 800df7c:	1080058b 	ldhu	r2,22(r2)
 800df80:	113fffcc 	andi	r4,r2,65535
 800df84:	800d9f80 	call	800d9f8 <find_first_empty_record_in_a_subdirectory>
 800df88:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
 800df8c:	e0bff817 	ldw	r2,-32(fp)
 800df90:	1004803a 	cmplt	r2,r2,zero
 800df94:	1000941e 	bne	r2,zero,800e1e8 <create_file+0x2c0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
 800df98:	e13ffb17 	ldw	r4,-20(fp)
 800df9c:	800cb300 	call	800cb30 <get_dir_divider_location>
 800dfa0:	e0bff615 	stw	r2,-40(fp)
            int last_dir_separator = 0;
 800dfa4:	e03ff515 	stw	zero,-44(fp)

            // Skip through all directory separators.
            while (location > 0)
 800dfa8:	00000b06 	br	800dfd8 <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
 800dfac:	e0fff517 	ldw	r3,-44(fp)
 800dfb0:	e0bff617 	ldw	r2,-40(fp)
 800dfb4:	1885883a 	add	r2,r3,r2
 800dfb8:	10800044 	addi	r2,r2,1
 800dfbc:	e0bff515 	stw	r2,-44(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
 800dfc0:	e0bff517 	ldw	r2,-44(fp)
 800dfc4:	1007883a 	mov	r3,r2
 800dfc8:	e0bffb17 	ldw	r2,-20(fp)
 800dfcc:	1889883a 	add	r4,r3,r2
 800dfd0:	800cb300 	call	800cb30 <get_dir_divider_location>
 800dfd4:	e0bff615 	stw	r2,-40(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
 800dfd8:	e0bff617 	ldw	r2,-40(fp)
 800dfdc:	10800048 	cmpgei	r2,r2,1
 800dfe0:	103ff21e 	bne	r2,zero,800dfac <create_file+0x84>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
 800dfe4:	e0bff517 	ldw	r2,-44(fp)
 800dfe8:	1007883a 	mov	r3,r2
 800dfec:	e0bffb17 	ldw	r2,-20(fp)
 800dff0:	1889883a 	add	r4,r3,r2
 800dff4:	e0bffc17 	ldw	r2,-16(fp)
 800dff8:	100b883a 	mov	r5,r2
 800dffc:	e0bffc17 	ldw	r2,-16(fp)
 800e000:	10800204 	addi	r2,r2,8
 800e004:	100d883a 	mov	r6,r2
 800e008:	800dd700 	call	800dd70 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
 800e00c:	e0bffc17 	ldw	r2,-16(fp)
 800e010:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
 800e014:	e0bffc17 	ldw	r2,-16(fp)
 800e018:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
 800e01c:	e0bffc17 	ldw	r2,-16(fp)
 800e020:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
 800e024:	e0bffc17 	ldw	r2,-16(fp)
 800e028:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
 800e02c:	e0bffc17 	ldw	r2,-16(fp)
 800e030:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
 800e034:	e0bffc17 	ldw	r2,-16(fp)
 800e038:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
 800e03c:	e0bffa17 	ldw	r2,-24(fp)
 800e040:	1007883a 	mov	r3,r2
 800e044:	e0bffc17 	ldw	r2,-16(fp)
 800e048:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
 800e04c:	e0bffc17 	ldw	r2,-16(fp)
 800e050:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
 800e054:	e0fffa17 	ldw	r3,-24(fp)
 800e058:	e0bffc17 	ldw	r2,-16(fp)
 800e05c:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
 800e060:	e0bffc17 	ldw	r2,-16(fp)
 800e064:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
 800e068:	e0bffc17 	ldw	r2,-16(fp)
 800e06c:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
 800e070:	e0bff817 	ldw	r2,-32(fp)
 800e074:	10ffffcc 	andi	r3,r2,65535
 800e078:	e0bffc17 	ldw	r2,-16(fp)
 800e07c:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
 800e080:	e0bff817 	ldw	r2,-32(fp)
 800e084:	1005d43a 	srai	r2,r2,16
 800e088:	10bfffcc 	andi	r2,r2,65535
 800e08c:	e0bfff15 	stw	r2,-4(fp)
 800e090:	e0ffff17 	ldw	r3,-4(fp)
 800e094:	1804403a 	cmpge	r2,r3,zero
 800e098:	1000031e 	bne	r2,zero,800e0a8 <create_file+0x180>
 800e09c:	e0bfff17 	ldw	r2,-4(fp)
 800e0a0:	108003c4 	addi	r2,r2,15
 800e0a4:	e0bfff15 	stw	r2,-4(fp)
 800e0a8:	e0ffff17 	ldw	r3,-4(fp)
 800e0ac:	1805d13a 	srai	r2,r3,4
 800e0b0:	1007883a 	mov	r3,r2
 800e0b4:	e0bffc17 	ldw	r2,-16(fp)
 800e0b8:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
 800e0bc:	e0bff817 	ldw	r2,-32(fp)
 800e0c0:	1005d43a 	srai	r2,r2,16
 800e0c4:	108003cc 	andi	r2,r2,15
 800e0c8:	1004917a 	slli	r2,r2,5
 800e0cc:	1007883a 	mov	r3,r2
 800e0d0:	e0bffc17 	ldw	r2,-16(fp)
 800e0d4:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
 800e0d8:	e0bffd17 	ldw	r2,-12(fp)
 800e0dc:	1080058b 	ldhu	r2,22(r2)
 800e0e0:	10ffffcc 	andi	r3,r2,65535
 800e0e4:	e0bffc17 	ldw	r2,-16(fp)
 800e0e8:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
 800e0ec:	e0fffc17 	ldw	r3,-16(fp)
 800e0f0:	00800044 	movi	r2,1
 800e0f4:	18800f15 	stw	r2,60(r3)
            file_record->modified = true;
 800e0f8:	e0fffc17 	ldw	r3,-16(fp)
 800e0fc:	00800044 	movi	r2,1
 800e100:	18800e15 	stw	r2,56(r3)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 800e104:	e0bffc17 	ldw	r2,-16(fp)
 800e108:	10800a17 	ldw	r2,40(r2)
 800e10c:	1004c03a 	cmpne	r2,r2,zero
 800e110:	1000081e 	bne	r2,zero,800e134 <create_file+0x20c>
 800e114:	00820074 	movhi	r2,2049
 800e118:	1091cc04 	addi	r2,r2,18224
 800e11c:	10c01317 	ldw	r3,76(r2)
 800e120:	e0bffc17 	ldw	r2,-16(fp)
 800e124:	10800b17 	ldw	r2,44(r2)
 800e128:	1887883a 	add	r3,r3,r2
 800e12c:	e0fffe15 	stw	r3,-8(fp)
 800e130:	00001006 	br	800e174 <create_file+0x24c>
 800e134:	00820074 	movhi	r2,2049
 800e138:	1091cc04 	addi	r2,r2,18224
 800e13c:	14001417 	ldw	r16,80(r2)
 800e140:	e0bffc17 	ldw	r2,-16(fp)
 800e144:	10800a17 	ldw	r2,40(r2)
 800e148:	113fff84 	addi	r4,r2,-2
 800e14c:	00820074 	movhi	r2,2049
 800e150:	1091cc04 	addi	r2,r2,18224
 800e154:	10800383 	ldbu	r2,14(r2)
 800e158:	11403fcc 	andi	r5,r2,255
 800e15c:	800988c0 	call	800988c <__mulsi3>
 800e160:	8087883a 	add	r3,r16,r2
 800e164:	e0bffc17 	ldw	r2,-16(fp)
 800e168:	10800b17 	ldw	r2,44(r2)
 800e16c:	1887883a 	add	r3,r3,r2
 800e170:	e0fffe15 	stw	r3,-8(fp)
 800e174:	e0bffe17 	ldw	r2,-8(fp)
 800e178:	e0bff715 	stw	r2,-36(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
 800e17c:	e13ff717 	ldw	r4,-36(fp)
 800e180:	d166c917 	ldw	r5,-25820(gp)
 800e184:	800b70c0 	call	800b70c <Read_Sector_Data>
 800e188:	1005003a 	cmpeq	r2,r2,zero
 800e18c:	1000161e 	bne	r2,zero,800e1e8 <create_file+0x2c0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
 800e190:	e0bffc17 	ldw	r2,-16(fp)
 800e194:	10800c0b 	ldhu	r2,48(r2)
 800e198:	113fffcc 	andi	r4,r2,65535
 800e19c:	2120001c 	xori	r4,r4,32768
 800e1a0:	21200004 	addi	r4,r4,-32768
 800e1a4:	e17ffc17 	ldw	r5,-16(fp)
 800e1a8:	800bdd80 	call	800bdd8 <Write_File_Record_At_Offset>
 800e1ac:	1005003a 	cmpeq	r2,r2,zero
 800e1b0:	10000d1e 	bne	r2,zero,800e1e8 <create_file+0x2c0>
                {
                    Save_Modified_Sector();
 800e1b4:	800b6bc0 	call	800b6bc <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
 800e1b8:	e13ffa17 	ldw	r4,-24(fp)
 800e1bc:	017fffc4 	movi	r5,-1
 800e1c0:	01800044 	movi	r6,1
 800e1c4:	800b8c00 	call	800b8c0 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
 800e1c8:	e13ffa17 	ldw	r4,-24(fp)
 800e1cc:	017fffc4 	movi	r5,-1
 800e1d0:	000d883a 	mov	r6,zero
 800e1d4:	800b8c00 	call	800b8c0 <mark_cluster>
 800e1d8:	1005003a 	cmpeq	r2,r2,zero
 800e1dc:	1000021e 	bne	r2,zero,800e1e8 <create_file+0x2c0>
                    {
                        result = true;
 800e1e0:	00800044 	movi	r2,1
 800e1e4:	e0bff915 	stw	r2,-28(fp)
                }
            }
        }

    }
    return result;           
 800e1e8:	e0bff917 	ldw	r2,-28(fp)
}
 800e1ec:	e037883a 	mov	sp,fp
 800e1f0:	dfc00217 	ldw	ra,8(sp)
 800e1f4:	df000117 	ldw	fp,4(sp)
 800e1f8:	dc000017 	ldw	r16,0(sp)
 800e1fc:	dec00304 	addi	sp,sp,12
 800e200:	f800283a 	ret

0800e204 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
 800e204:	defffb04 	addi	sp,sp,-20
 800e208:	df000415 	stw	fp,16(sp)
 800e20c:	df000404 	addi	fp,sp,16
 800e210:	e13ffe15 	stw	r4,-8(fp)
 800e214:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 800e218:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 800e21c:	e03ffd15 	stw	zero,-12(fp)
 800e220:	00001606 	br	800e27c <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
 800e224:	e0fffd17 	ldw	r3,-12(fp)
 800e228:	e0bffe17 	ldw	r2,-8(fp)
 800e22c:	10c5883a 	add	r2,r2,r3
 800e230:	10800003 	ldbu	r2,0(r2)
 800e234:	10803fcc 	andi	r2,r2,255
 800e238:	10800820 	cmpeqi	r2,r2,32
 800e23c:	10000c1e 	bne	r2,zero,800e270 <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
 800e240:	e0bffc17 	ldw	r2,-16(fp)
 800e244:	1007883a 	mov	r3,r2
 800e248:	e0bfff17 	ldw	r2,-4(fp)
 800e24c:	1889883a 	add	r4,r3,r2
 800e250:	e0fffd17 	ldw	r3,-12(fp)
 800e254:	e0bffe17 	ldw	r2,-8(fp)
 800e258:	10c5883a 	add	r2,r2,r3
 800e25c:	10800003 	ldbu	r2,0(r2)
 800e260:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 800e264:	e0bffc17 	ldw	r2,-16(fp)
 800e268:	10800044 	addi	r2,r2,1
 800e26c:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 800e270:	e0bffd17 	ldw	r2,-12(fp)
 800e274:	10800044 	addi	r2,r2,1
 800e278:	e0bffd15 	stw	r2,-12(fp)
 800e27c:	e0bffd17 	ldw	r2,-12(fp)
 800e280:	10800210 	cmplti	r2,r2,8
 800e284:	103fe71e 	bne	r2,zero,800e224 <copy_file_record_name_to_string+0x20>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
 800e288:	e0bffe17 	ldw	r2,-8(fp)
 800e28c:	10800203 	ldbu	r2,8(r2)
 800e290:	10803fcc 	andi	r2,r2,255
 800e294:	10800820 	cmpeqi	r2,r2,32
 800e298:	1000261e 	bne	r2,zero,800e334 <copy_file_record_name_to_string+0x130>
	{
		file_name[flength] = '.';
 800e29c:	e0bffc17 	ldw	r2,-16(fp)
 800e2a0:	1007883a 	mov	r3,r2
 800e2a4:	e0bfff17 	ldw	r2,-4(fp)
 800e2a8:	1887883a 	add	r3,r3,r2
 800e2ac:	00800b84 	movi	r2,46
 800e2b0:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 800e2b4:	e0bffc17 	ldw	r2,-16(fp)
 800e2b8:	10800044 	addi	r2,r2,1
 800e2bc:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++)
 800e2c0:	e03ffd15 	stw	zero,-12(fp)
 800e2c4:	00001806 	br	800e328 <copy_file_record_name_to_string+0x124>
		{
			if (file_record->extension[index] != ' ')
 800e2c8:	e0fffd17 	ldw	r3,-12(fp)
 800e2cc:	e0bffe17 	ldw	r2,-8(fp)
 800e2d0:	1885883a 	add	r2,r3,r2
 800e2d4:	10800204 	addi	r2,r2,8
 800e2d8:	10800003 	ldbu	r2,0(r2)
 800e2dc:	10803fcc 	andi	r2,r2,255
 800e2e0:	10800820 	cmpeqi	r2,r2,32
 800e2e4:	10000d1e 	bne	r2,zero,800e31c <copy_file_record_name_to_string+0x118>
			{
				file_name[flength] = file_record->extension[index];
 800e2e8:	e0bffc17 	ldw	r2,-16(fp)
 800e2ec:	1007883a 	mov	r3,r2
 800e2f0:	e0bfff17 	ldw	r2,-4(fp)
 800e2f4:	1889883a 	add	r4,r3,r2
 800e2f8:	e0fffd17 	ldw	r3,-12(fp)
 800e2fc:	e0bffe17 	ldw	r2,-8(fp)
 800e300:	1885883a 	add	r2,r3,r2
 800e304:	10800204 	addi	r2,r2,8
 800e308:	10800003 	ldbu	r2,0(r2)
 800e30c:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 800e310:	e0bffc17 	ldw	r2,-16(fp)
 800e314:	10800044 	addi	r2,r2,1
 800e318:	e0bffc15 	stw	r2,-16(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
 800e31c:	e0bffd17 	ldw	r2,-12(fp)
 800e320:	10800044 	addi	r2,r2,1
 800e324:	e0bffd15 	stw	r2,-12(fp)
 800e328:	e0bffd17 	ldw	r2,-12(fp)
 800e32c:	108000d0 	cmplti	r2,r2,3
 800e330:	103fe51e 	bne	r2,zero,800e2c8 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 800e334:	e0bffc17 	ldw	r2,-16(fp)
 800e338:	1007883a 	mov	r3,r2
 800e33c:	e0bfff17 	ldw	r2,-4(fp)
 800e340:	1885883a 	add	r2,r3,r2
 800e344:	10000005 	stb	zero,0(r2)
}
 800e348:	e037883a 	mov	sp,fp
 800e34c:	df000017 	ldw	fp,0(sp)
 800e350:	dec00104 	addi	sp,sp,4
 800e354:	f800283a 	ret

0800e358 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
 800e358:	defffc04 	addi	sp,sp,-16
 800e35c:	dfc00315 	stw	ra,12(sp)
 800e360:	df000215 	stw	fp,8(sp)
 800e364:	df000204 	addi	fp,sp,8
 800e368:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
 800e36c:	e13fff17 	ldw	r4,-4(fp)
 800e370:	01420074 	movhi	r5,2049
 800e374:	294af404 	addi	r5,r5,11216
 800e378:	800fd880 	call	800fd88 <alt_find_dev>
 800e37c:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
 800e380:	e0bffe17 	ldw	r2,-8(fp)
 800e384:	1005003a 	cmpeq	r2,r2,zero
 800e388:	10001e1e 	bne	r2,zero,800e404 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 800e38c:	e0bffe17 	ldw	r2,-8(fp)
 800e390:	10800a17 	ldw	r2,40(r2)
 800e394:	10808d04 	addi	r2,r2,564
 800e398:	d0a6c315 	stw	r2,-25844(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 800e39c:	e0bffe17 	ldw	r2,-8(fp)
 800e3a0:	10800a17 	ldw	r2,40(r2)
 800e3a4:	10808904 	addi	r2,r2,548
 800e3a8:	d0a6c415 	stw	r2,-25840(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 800e3ac:	e0bffe17 	ldw	r2,-8(fp)
 800e3b0:	10800a17 	ldw	r2,40(r2)
 800e3b4:	10808404 	addi	r2,r2,528
 800e3b8:	d0a6c515 	stw	r2,-25836(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 800e3bc:	e0bffe17 	ldw	r2,-8(fp)
 800e3c0:	10800a17 	ldw	r2,40(r2)
 800e3c4:	10808c04 	addi	r2,r2,560
 800e3c8:	d0a6c615 	stw	r2,-25832(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 800e3cc:	e0bffe17 	ldw	r2,-8(fp)
 800e3d0:	10800a17 	ldw	r2,40(r2)
 800e3d4:	10808b04 	addi	r2,r2,556
 800e3d8:	d0a6c715 	stw	r2,-25828(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 800e3dc:	e0bffe17 	ldw	r2,-8(fp)
 800e3e0:	10800a17 	ldw	r2,40(r2)
 800e3e4:	d0a6c815 	stw	r2,-25824(gp)
		device_pointer = dev;
 800e3e8:	e0bffe17 	ldw	r2,-8(fp)
 800e3ec:	d0a6cb15 	stw	r2,-25812(gp)
		initialized = false;
 800e3f0:	d026c115 	stw	zero,-25852(gp)
		is_sd_card_formated_as_FAT16 = false;
 800e3f4:	d026c215 	stw	zero,-25848(gp)
		search_data.valid = false;
 800e3f8:	00820074 	movhi	r2,2049
 800e3fc:	1091c704 	addi	r2,r2,18204
 800e400:	10000415 	stw	zero,16(r2)
	}
	return dev;
 800e404:	e0bffe17 	ldw	r2,-8(fp)
}
 800e408:	e037883a 	mov	sp,fp
 800e40c:	dfc00117 	ldw	ra,4(sp)
 800e410:	df000017 	ldw	fp,0(sp)
 800e414:	dec00204 	addi	sp,sp,8
 800e418:	f800283a 	ret

0800e41c <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 800e41c:	defffd04 	addi	sp,sp,-12
 800e420:	df000215 	stw	fp,8(sp)
 800e424:	df000204 	addi	fp,sp,8
    bool result = false;
 800e428:	e03fff15 	stw	zero,-4(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
 800e42c:	d0a6cb17 	ldw	r2,-25812(gp)
 800e430:	1005003a 	cmpeq	r2,r2,zero
 800e434:	1000081e 	bne	r2,zero,800e458 <alt_up_sd_card_is_Present+0x3c>
 800e438:	d0a6c317 	ldw	r2,-25844(gp)
 800e43c:	1080002b 	ldhuio	r2,0(r2)
 800e440:	1080008c 	andi	r2,r2,2
 800e444:	1005003a 	cmpeq	r2,r2,zero
 800e448:	1000031e 	bne	r2,zero,800e458 <alt_up_sd_card_is_Present+0x3c>
    {
        result = true;
 800e44c:	00800044 	movi	r2,1
 800e450:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
 800e454:	00001e06 	br	800e4d0 <alt_up_sd_card_is_Present+0xb4>
    {
        result = true;
    }
	else if (initialized == true)
 800e458:	d0a6c117 	ldw	r2,-25852(gp)
 800e45c:	10800058 	cmpnei	r2,r2,1
 800e460:	10001b1e 	bne	r2,zero,800e4d0 <alt_up_sd_card_is_Present+0xb4>
	{
		int index;

		initialized = false;
 800e464:	d026c115 	stw	zero,-25852(gp)
		search_data.valid = false;
 800e468:	00820074 	movhi	r2,2049
 800e46c:	1091c704 	addi	r2,r2,18204
 800e470:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 800e474:	d026c215 	stw	zero,-25848(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
 800e478:	e03ffe15 	stw	zero,-8(fp)
 800e47c:	00001106 	br	800e4c4 <alt_up_sd_card_is_Present+0xa8>
		{
			active_files[index].in_use = false;
 800e480:	e0bffe17 	ldw	r2,-8(fp)
 800e484:	00c20074 	movhi	r3,2049
 800e488:	18d1e104 	addi	r3,r3,18308
 800e48c:	100491ba 	slli	r2,r2,6
 800e490:	10c5883a 	add	r2,r2,r3
 800e494:	10800f04 	addi	r2,r2,60
 800e498:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 800e49c:	e0bffe17 	ldw	r2,-8(fp)
 800e4a0:	00c20074 	movhi	r3,2049
 800e4a4:	18d1e104 	addi	r3,r3,18308
 800e4a8:	100491ba 	slli	r2,r2,6
 800e4ac:	10c5883a 	add	r2,r2,r3
 800e4b0:	10800e04 	addi	r2,r2,56
 800e4b4:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
 800e4b8:	e0bffe17 	ldw	r2,-8(fp)
 800e4bc:	10800044 	addi	r2,r2,1
 800e4c0:	e0bffe15 	stw	r2,-8(fp)
 800e4c4:	e0bffe17 	ldw	r2,-8(fp)
 800e4c8:	10800510 	cmplti	r2,r2,20
 800e4cc:	103fec1e 	bne	r2,zero,800e480 <alt_up_sd_card_is_Present+0x64>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
 800e4d0:	e0bfff17 	ldw	r2,-4(fp)
}
 800e4d4:	e037883a 	mov	sp,fp
 800e4d8:	df000017 	ldw	fp,0(sp)
 800e4dc:	dec00104 	addi	sp,sp,4
 800e4e0:	f800283a 	ret

0800e4e4 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 800e4e4:	defffd04 	addi	sp,sp,-12
 800e4e8:	dfc00215 	stw	ra,8(sp)
 800e4ec:	df000115 	stw	fp,4(sp)
 800e4f0:	df000104 	addi	fp,sp,4
	bool result = false;
 800e4f4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
 800e4f8:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 800e4fc:	1005003a 	cmpeq	r2,r2,zero
 800e500:	10000d1e 	bne	r2,zero,800e538 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
 800e504:	d0a6c117 	ldw	r2,-25852(gp)
 800e508:	1004c03a 	cmpne	r2,r2,zero
 800e50c:	1000071e 	bne	r2,zero,800e52c <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 800e510:	800c6d80 	call	800c6d8 <Look_for_FAT16>
 800e514:	d0a6c215 	stw	r2,-25848(gp)
			initialized = is_sd_card_formated_as_FAT16;
 800e518:	d0a6c217 	ldw	r2,-25848(gp)
 800e51c:	d0a6c115 	stw	r2,-25852(gp)
			search_data.valid = false;
 800e520:	00820074 	movhi	r2,2049
 800e524:	1091c704 	addi	r2,r2,18204
 800e528:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 800e52c:	d0a6c217 	ldw	r2,-25848(gp)
 800e530:	e0bfff15 	stw	r2,-4(fp)
 800e534:	00000206 	br	800e540 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
 800e538:	d026c115 	stw	zero,-25852(gp)
		is_sd_card_formated_as_FAT16 = false;
 800e53c:	d026c215 	stw	zero,-25848(gp)
	}

	return result;
 800e540:	e0bfff17 	ldw	r2,-4(fp)
}
 800e544:	e037883a 	mov	sp,fp
 800e548:	dfc00117 	ldw	ra,4(sp)
 800e54c:	df000017 	ldw	fp,0(sp)
 800e550:	dec00204 	addi	sp,sp,8
 800e554:	f800283a 	ret

0800e558 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 800e558:	deffea04 	addi	sp,sp,-88
 800e55c:	dfc01515 	stw	ra,84(sp)
 800e560:	df001415 	stw	fp,80(sp)
 800e564:	df001404 	addi	fp,sp,80
 800e568:	e13ffe15 	stw	r4,-8(fp)
 800e56c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 800e570:	00800084 	movi	r2,2
 800e574:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 800e578:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 800e57c:	1005003a 	cmpeq	r2,r2,zero
 800e580:	1000241e 	bne	r2,zero,800e614 <alt_up_sd_card_find_first+0xbc>
 800e584:	d0a6c217 	ldw	r2,-25848(gp)
 800e588:	1005003a 	cmpeq	r2,r2,zero
 800e58c:	1000211e 	bne	r2,zero,800e614 <alt_up_sd_card_find_first+0xbc>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
 800e590:	e17fed04 	addi	r5,fp,-76
 800e594:	e1bfee04 	addi	r6,fp,-72
 800e598:	e13ffe17 	ldw	r4,-8(fp)
 800e59c:	800cedc0 	call	800cedc <get_home_directory_cluster_for_file>
 800e5a0:	1005003a 	cmpeq	r2,r2,zero
 800e5a4:	1000191e 	bne	r2,zero,800e60c <alt_up_sd_card_find_first+0xb4>
		{
			search_data.directory_root_cluster = home_directory_cluster;
 800e5a8:	e0bfed17 	ldw	r2,-76(fp)
 800e5ac:	1007883a 	mov	r3,r2
 800e5b0:	00820074 	movhi	r2,2049
 800e5b4:	1091c704 	addi	r2,r2,18204
 800e5b8:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 800e5bc:	e0bfed17 	ldw	r2,-76(fp)
 800e5c0:	1007883a 	mov	r3,r2
 800e5c4:	00820074 	movhi	r2,2049
 800e5c8:	1091c704 	addi	r2,r2,18204
 800e5cc:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 800e5d0:	00820074 	movhi	r2,2049
 800e5d4:	1091c704 	addi	r2,r2,18204
 800e5d8:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 800e5dc:	00c20074 	movhi	r3,2049
 800e5e0:	18d1c704 	addi	r3,r3,18204
 800e5e4:	00bfffc4 	movi	r2,-1
 800e5e8:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 800e5ec:	00c20074 	movhi	r3,2049
 800e5f0:	18d1c704 	addi	r3,r3,18204
 800e5f4:	00800044 	movi	r2,1
 800e5f8:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 800e5fc:	e13fff17 	ldw	r4,-4(fp)
 800e600:	800e62c0 	call	800e62c <alt_up_sd_card_find_next>
 800e604:	e0bfec0d 	sth	r2,-80(fp)
 800e608:	00000206 	br	800e614 <alt_up_sd_card_find_first+0xbc>
		}
		else
		{
			result = 1;
 800e60c:	00800044 	movi	r2,1
 800e610:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 800e614:	e0bfec0f 	ldh	r2,-80(fp)
}
 800e618:	e037883a 	mov	sp,fp
 800e61c:	dfc00117 	ldw	ra,4(sp)
 800e620:	df000017 	ldw	fp,0(sp)
 800e624:	dec00204 	addi	sp,sp,8
 800e628:	f800283a 	ret

0800e62c <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 800e62c:	deffe404 	addi	sp,sp,-112
 800e630:	dfc01b15 	stw	ra,108(sp)
 800e634:	df001a15 	stw	fp,104(sp)
 800e638:	df001a04 	addi	fp,sp,104
 800e63c:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 800e640:	00800084 	movi	r2,2
 800e644:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 800e648:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 800e64c:	1005003a 	cmpeq	r2,r2,zero
 800e650:	1000da1e 	bne	r2,zero,800e9bc <alt_up_sd_card_find_next+0x390>
 800e654:	d0a6c217 	ldw	r2,-25848(gp)
 800e658:	1005003a 	cmpeq	r2,r2,zero
 800e65c:	1000d71e 	bne	r2,zero,800e9bc <alt_up_sd_card_find_next+0x390>
	{
		if (search_data.valid)
 800e660:	00820074 	movhi	r2,2049
 800e664:	1091c704 	addi	r2,r2,18204
 800e668:	10800417 	ldw	r2,16(r2)
 800e66c:	1005003a 	cmpeq	r2,r2,zero
 800e670:	1000d01e 	bne	r2,zero,800e9b4 <alt_up_sd_card_find_next+0x388>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 800e674:	00820074 	movhi	r2,2049
 800e678:	1091c704 	addi	r2,r2,18204
 800e67c:	10800117 	ldw	r2,4(r2)
 800e680:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0)
 800e684:	e0bfec17 	ldw	r2,-80(fp)
 800e688:	1004c03a 	cmpne	r2,r2,zero
 800e68c:	1000511e 	bne	r2,zero,800e7d4 <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 800e690:	00820074 	movhi	r2,2049
 800e694:	1091cc04 	addi	r2,r2,18224
 800e698:	1080050b 	ldhu	r2,20(r2)
 800e69c:	10bfffcc 	andi	r2,r2,65535
 800e6a0:	1008917a 	slli	r4,r2,5
 800e6a4:	00820074 	movhi	r2,2049
 800e6a8:	1091cc04 	addi	r2,r2,18224
 800e6ac:	1080030b 	ldhu	r2,12(r2)
 800e6b0:	117fffcc 	andi	r5,r2,65535
 800e6b4:	80097bc0 	call	80097bc <__divsi3>
 800e6b8:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 800e6bc:	00820074 	movhi	r2,2049
 800e6c0:	1091c704 	addi	r2,r2,18204
 800e6c4:	10800217 	ldw	r2,8(r2)
 800e6c8:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector+1;
 800e6cc:	00820074 	movhi	r2,2049
 800e6d0:	1091c704 	addi	r2,r2,18204
 800e6d4:	1080030b 	ldhu	r2,12(r2)
 800e6d8:	10bfffcc 	andi	r2,r2,65535
 800e6dc:	10a0001c 	xori	r2,r2,32768
 800e6e0:	10a00004 	addi	r2,r2,-32768
 800e6e4:	10800044 	addi	r2,r2,1
 800e6e8:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 800e6ec:	00003306 	br	800e7bc <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 800e6f0:	00820074 	movhi	r2,2049
 800e6f4:	1091cc04 	addi	r2,r2,18224
 800e6f8:	10c01317 	ldw	r3,76(r2)
 800e6fc:	e0bfea17 	ldw	r2,-88(fp)
 800e700:	1885883a 	add	r2,r3,r2
 800e704:	1009883a 	mov	r4,r2
 800e708:	d166c917 	ldw	r5,-25820(gp)
 800e70c:	800b70c0 	call	800b70c <Read_Sector_Data>
 800e710:	1005003a 	cmpeq	r2,r2,zero
 800e714:	10002c1e 	bne	r2,zero,800e7c8 <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 800e718:	00002106 	br	800e7a0 <alt_up_sd_card_find_next+0x174>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
 800e71c:	e0bfe917 	ldw	r2,-92(fp)
 800e720:	1008917a 	slli	r4,r2,5
 800e724:	e1ffea17 	ldw	r7,-88(fp)
 800e728:	e17fee04 	addi	r5,fp,-72
 800e72c:	000d883a 	mov	r6,zero
 800e730:	800bb540 	call	800bb54 <Read_File_Record_At_Offset>
 800e734:	1005003a 	cmpeq	r2,r2,zero
 800e738:	1000161e 	bne	r2,zero,800e794 <alt_up_sd_card_find_next+0x168>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 800e73c:	e0bfee03 	ldbu	r2,-72(fp)
 800e740:	10803fcc 	andi	r2,r2,255
 800e744:	1005003a 	cmpeq	r2,r2,zero
 800e748:	1000121e 	bne	r2,zero,800e794 <alt_up_sd_card_find_next+0x168>
 800e74c:	e0bfee03 	ldbu	r2,-72(fp)
 800e750:	10803fcc 	andi	r2,r2,255
 800e754:	10803960 	cmpeqi	r2,r2,229
 800e758:	10000e1e 	bne	r2,zero,800e794 <alt_up_sd_card_find_next+0x168>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
 800e75c:	e0bfe917 	ldw	r2,-92(fp)
 800e760:	1007883a 	mov	r3,r2
 800e764:	00820074 	movhi	r2,2049
 800e768:	1091c704 	addi	r2,r2,18204
 800e76c:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
 800e770:	e0ffea17 	ldw	r3,-88(fp)
 800e774:	00820074 	movhi	r2,2049
 800e778:	1091c704 	addi	r2,r2,18204
 800e77c:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
 800e780:	e13fee04 	addi	r4,fp,-72
 800e784:	e17ffe17 	ldw	r5,-8(fp)
 800e788:	800e2040 	call	800e204 <copy_file_record_name_to_string>
									return 0;
 800e78c:	e03fff15 	stw	zero,-4(fp)
 800e790:	00008c06 	br	800e9c4 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 800e794:	e0bfe917 	ldw	r2,-92(fp)
 800e798:	10800044 	addi	r2,r2,1
 800e79c:	e0bfe915 	stw	r2,-92(fp)
 800e7a0:	e0bfe917 	ldw	r2,-92(fp)
 800e7a4:	10800410 	cmplti	r2,r2,16
 800e7a8:	103fdc1e 	bne	r2,zero,800e71c <alt_up_sd_card_find_next+0xf0>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 800e7ac:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 800e7b0:	e0bfea17 	ldw	r2,-88(fp)
 800e7b4:	10800044 	addi	r2,r2,1
 800e7b8:	e0bfea15 	stw	r2,-88(fp)
 800e7bc:	e0ffea17 	ldw	r3,-88(fp)
 800e7c0:	e0bfeb17 	ldw	r2,-84(fp)
 800e7c4:	18bfca16 	blt	r3,r2,800e6f0 <alt_up_sd_card_find_next+0xc4>
					else
					{
						break;
					}
				}
				result = -1;
 800e7c8:	00bfffc4 	movi	r2,-1
 800e7cc:	e0bfed0d 	sth	r2,-76(fp)
 800e7d0:	00007a06 	br	800e9bc <alt_up_sd_card_find_next+0x390>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
 800e7d4:	00820074 	movhi	r2,2049
 800e7d8:	1091c704 	addi	r2,r2,18204
 800e7dc:	1080030b 	ldhu	r2,12(r2)
 800e7e0:	10bfffcc 	andi	r2,r2,65535
 800e7e4:	10a0001c 	xori	r2,r2,32768
 800e7e8:	10a00004 	addi	r2,r2,-32768
 800e7ec:	10800044 	addi	r2,r2,1
 800e7f0:	e0bfe815 	stw	r2,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 800e7f4:	e0bfec17 	ldw	r2,-80(fp)
 800e7f8:	113fff84 	addi	r4,r2,-2
 800e7fc:	00820074 	movhi	r2,2049
 800e800:	1091cc04 	addi	r2,r2,18224
 800e804:	10800383 	ldbu	r2,14(r2)
 800e808:	11403fcc 	andi	r5,r2,255
 800e80c:	800988c0 	call	800988c <__mulsi3>
 800e810:	1007883a 	mov	r3,r2
 800e814:	00820074 	movhi	r2,2049
 800e818:	1091cc04 	addi	r2,r2,18224
 800e81c:	10801417 	ldw	r2,80(r2)
 800e820:	1885883a 	add	r2,r3,r2
 800e824:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 800e828:	00820074 	movhi	r2,2049
 800e82c:	1091c704 	addi	r2,r2,18204
 800e830:	10800217 	ldw	r2,8(r2)
 800e834:	e0bfe615 	stw	r2,-104(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 800e838:	00003406 	br	800e90c <alt_up_sd_card_find_next+0x2e0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 800e83c:	e0ffe617 	ldw	r3,-104(fp)
 800e840:	e0bfe717 	ldw	r2,-100(fp)
 800e844:	1889883a 	add	r4,r3,r2
 800e848:	d166c917 	ldw	r5,-25820(gp)
 800e84c:	800b70c0 	call	800b70c <Read_Sector_Data>
 800e850:	1005003a 	cmpeq	r2,r2,zero
 800e854:	1000331e 	bne	r2,zero,800e924 <alt_up_sd_card_find_next+0x2f8>
						{        
							for (; file_counter < 16; file_counter++)
 800e858:	00002506 	br	800e8f0 <alt_up_sd_card_find_next+0x2c4>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
 800e85c:	e0bfe817 	ldw	r2,-96(fp)
 800e860:	1008917a 	slli	r4,r2,5
 800e864:	e1bfec17 	ldw	r6,-80(fp)
 800e868:	e1ffe617 	ldw	r7,-104(fp)
 800e86c:	e17fee04 	addi	r5,fp,-72
 800e870:	800bb540 	call	800bb54 <Read_File_Record_At_Offset>
 800e874:	1005003a 	cmpeq	r2,r2,zero
 800e878:	10001a1e 	bne	r2,zero,800e8e4 <alt_up_sd_card_find_next+0x2b8>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 800e87c:	e0bfee03 	ldbu	r2,-72(fp)
 800e880:	10803fcc 	andi	r2,r2,255
 800e884:	1005003a 	cmpeq	r2,r2,zero
 800e888:	1000161e 	bne	r2,zero,800e8e4 <alt_up_sd_card_find_next+0x2b8>
 800e88c:	e0bfee03 	ldbu	r2,-72(fp)
 800e890:	10803fcc 	andi	r2,r2,255
 800e894:	10803960 	cmpeqi	r2,r2,229
 800e898:	1000121e 	bne	r2,zero,800e8e4 <alt_up_sd_card_find_next+0x2b8>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
 800e89c:	e0ffec17 	ldw	r3,-80(fp)
 800e8a0:	00820074 	movhi	r2,2049
 800e8a4:	1091c704 	addi	r2,r2,18204
 800e8a8:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
 800e8ac:	e0bfe817 	ldw	r2,-96(fp)
 800e8b0:	1007883a 	mov	r3,r2
 800e8b4:	00820074 	movhi	r2,2049
 800e8b8:	1091c704 	addi	r2,r2,18204
 800e8bc:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
 800e8c0:	e0ffe617 	ldw	r3,-104(fp)
 800e8c4:	00820074 	movhi	r2,2049
 800e8c8:	1091c704 	addi	r2,r2,18204
 800e8cc:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
 800e8d0:	e13fee04 	addi	r4,fp,-72
 800e8d4:	e17ffe17 	ldw	r5,-8(fp)
 800e8d8:	800e2040 	call	800e204 <copy_file_record_name_to_string>
										return 0;
 800e8dc:	e03fff15 	stw	zero,-4(fp)
 800e8e0:	00003806 	br	800e9c4 <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
 800e8e4:	e0bfe817 	ldw	r2,-96(fp)
 800e8e8:	10800044 	addi	r2,r2,1
 800e8ec:	e0bfe815 	stw	r2,-96(fp)
 800e8f0:	e0bfe817 	ldw	r2,-96(fp)
 800e8f4:	10800410 	cmplti	r2,r2,16
 800e8f8:	103fd81e 	bne	r2,zero,800e85c <alt_up_sd_card_find_next+0x230>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 800e8fc:	e03fe815 	stw	zero,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 800e900:	e0bfe617 	ldw	r2,-104(fp)
 800e904:	10800044 	addi	r2,r2,1
 800e908:	e0bfe615 	stw	r2,-104(fp)
 800e90c:	00820074 	movhi	r2,2049
 800e910:	1091cc04 	addi	r2,r2,18224
 800e914:	10800383 	ldbu	r2,14(r2)
 800e918:	10c03fcc 	andi	r3,r2,255
 800e91c:	e0bfe617 	ldw	r2,-104(fp)
 800e920:	10ffc616 	blt	r2,r3,800e83c <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
 800e924:	00820074 	movhi	r2,2049
 800e928:	1091cc04 	addi	r2,r2,18224
 800e92c:	10800383 	ldbu	r2,14(r2)
 800e930:	10c03fcc 	andi	r3,r2,255
 800e934:	e0bfe617 	ldw	r2,-104(fp)
 800e938:	10c01a16 	blt	r2,r3,800e9a4 <alt_up_sd_card_find_next+0x378>
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
 800e93c:	e13fec17 	ldw	r4,-80(fp)
 800e940:	e17fed84 	addi	r5,fp,-74
 800e944:	800b8080 	call	800b808 <get_cluster_flag>
 800e948:	1005003a 	cmpeq	r2,r2,zero
 800e94c:	1000131e 	bne	r2,zero,800e99c <alt_up_sd_card_find_next+0x370>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 800e950:	e0bfed8b 	ldhu	r2,-74(fp)
 800e954:	10bfffcc 	andi	r2,r2,65535
 800e958:	10a0001c 	xori	r2,r2,32768
 800e95c:	10a00004 	addi	r2,r2,-32768
 800e960:	10fffe0c 	andi	r3,r2,65528
 800e964:	00bffe14 	movui	r2,65528
 800e968:	1880051e 	bne	r3,r2,800e980 <alt_up_sd_card_find_next+0x354>
							{
								result = -1;
 800e96c:	00bfffc4 	movi	r2,-1
 800e970:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 800e974:	00820074 	movhi	r2,2049
 800e978:	1091c704 	addi	r2,r2,18204
 800e97c:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 800e980:	e0bfed8b 	ldhu	r2,-74(fp)
 800e984:	10bfffcc 	andi	r2,r2,65535
 800e988:	10a0001c 	xori	r2,r2,32768
 800e98c:	10a00004 	addi	r2,r2,-32768
 800e990:	10bffe0c 	andi	r2,r2,65528
 800e994:	e0bfec15 	stw	r2,-80(fp)
 800e998:	00000206 	br	800e9a4 <alt_up_sd_card_find_next+0x378>
						}
						else
						{
							// Error encountered.                 
							result = -1;
 800e99c:	00bfffc4 	movi	r2,-1
 800e9a0:	e0bfed0d 	sth	r2,-76(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
 800e9a4:	e0ffec17 	ldw	r3,-80(fp)
 800e9a8:	00bffdd4 	movui	r2,65527
 800e9ac:	10ff910e 	bge	r2,r3,800e7f4 <alt_up_sd_card_find_next+0x1c8>
 800e9b0:	00000206 	br	800e9bc <alt_up_sd_card_find_next+0x390>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
 800e9b4:	008000c4 	movi	r2,3
 800e9b8:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 800e9bc:	e0bfed0f 	ldh	r2,-76(fp)
 800e9c0:	e0bfff15 	stw	r2,-4(fp)
 800e9c4:	e0bfff17 	ldw	r2,-4(fp)
}
 800e9c8:	e037883a 	mov	sp,fp
 800e9cc:	dfc00117 	ldw	ra,4(sp)
 800e9d0:	df000017 	ldw	fp,0(sp)
 800e9d4:	dec00204 	addi	sp,sp,8
 800e9d8:	f800283a 	ret

0800e9dc <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 800e9dc:	deffe804 	addi	sp,sp,-96
 800e9e0:	dfc01715 	stw	ra,92(sp)
 800e9e4:	df001615 	stw	fp,88(sp)
 800e9e8:	df001604 	addi	fp,sp,88
 800e9ec:	e13ffd15 	stw	r4,-12(fp)
 800e9f0:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 800e9f4:	00bfffc4 	movi	r2,-1
 800e9f8:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 800e9fc:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 800ea00:	1005003a 	cmpeq	r2,r2,zero
 800ea04:	1000d71e 	bne	r2,zero,800ed64 <alt_up_sd_card_fopen+0x388>
 800ea08:	d0a6c217 	ldw	r2,-25848(gp)
 800ea0c:	1005003a 	cmpeq	r2,r2,zero
 800ea10:	1000d41e 	bne	r2,zero,800ed64 <alt_up_sd_card_fopen+0x388>
	{
        unsigned int home_directory_cluster = 0;
 800ea14:	e03fec15 	stw	zero,-80(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
 800ea18:	e13ffd17 	ldw	r4,-12(fp)
 800ea1c:	800c7d00 	call	800c7d0 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
 800ea20:	e13ffd17 	ldw	r4,-12(fp)
 800ea24:	800c8a00 	call	800c8a0 <check_file_name_for_FAT16_compliance>
 800ea28:	1005003a 	cmpeq	r2,r2,zero
 800ea2c:	1000cd1e 	bne	r2,zero,800ed64 <alt_up_sd_card_fopen+0x388>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
 800ea30:	e17fec04 	addi	r5,fp,-80
 800ea34:	e1bfed04 	addi	r6,fp,-76
 800ea38:	e13ffd17 	ldw	r4,-12(fp)
 800ea3c:	800cedc0 	call	800cedc <get_home_directory_cluster_for_file>
 800ea40:	1004c03a 	cmpne	r2,r2,zero
 800ea44:	1000031e 	bne	r2,zero,800ea54 <alt_up_sd_card_fopen+0x78>
            {
                return file_record_index;
 800ea48:	e0bfeb0f 	ldh	r2,-84(fp)
 800ea4c:	e0bfff15 	stw	r2,-4(fp)
 800ea50:	0000c606 	br	800ed6c <alt_up_sd_card_fopen+0x390>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 800ea54:	e03fea15 	stw	zero,-88(fp)
 800ea58:	00000f06 	br	800ea98 <alt_up_sd_card_fopen+0xbc>
    		{
    			if (active_files[index].in_use == false)
 800ea5c:	e0bfea17 	ldw	r2,-88(fp)
 800ea60:	00c20074 	movhi	r3,2049
 800ea64:	18d1e104 	addi	r3,r3,18308
 800ea68:	100491ba 	slli	r2,r2,6
 800ea6c:	10c5883a 	add	r2,r2,r3
 800ea70:	10800f04 	addi	r2,r2,60
 800ea74:	10800017 	ldw	r2,0(r2)
 800ea78:	1004c03a 	cmpne	r2,r2,zero
 800ea7c:	1000031e 	bne	r2,zero,800ea8c <alt_up_sd_card_fopen+0xb0>
    			{
    				file_record_index = index;
 800ea80:	e0bfea17 	ldw	r2,-88(fp)
 800ea84:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
 800ea88:	00000606 	br	800eaa4 <alt_up_sd_card_fopen+0xc8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 800ea8c:	e0bfea17 	ldw	r2,-88(fp)
 800ea90:	10800044 	addi	r2,r2,1
 800ea94:	e0bfea15 	stw	r2,-88(fp)
 800ea98:	e0bfea17 	ldw	r2,-88(fp)
 800ea9c:	10800510 	cmplti	r2,r2,20
 800eaa0:	103fee1e 	bne	r2,zero,800ea5c <alt_up_sd_card_fopen+0x80>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
 800eaa4:	e0bfeb0f 	ldh	r2,-84(fp)
 800eaa8:	1004803a 	cmplt	r2,r2,zero
 800eaac:	1000ad1e 	bne	r2,zero,800ed64 <alt_up_sd_card_fopen+0x388>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
 800eab0:	e0bfec17 	ldw	r2,-80(fp)
 800eab4:	1009883a 	mov	r4,r2
 800eab8:	e0bfeb0f 	ldh	r2,-84(fp)
 800eabc:	100491ba 	slli	r2,r2,6
 800eac0:	1007883a 	mov	r3,r2
 800eac4:	00820074 	movhi	r2,2049
 800eac8:	1091e104 	addi	r2,r2,18308
 800eacc:	188d883a 	add	r6,r3,r2
 800ead0:	e17ffd17 	ldw	r5,-12(fp)
 800ead4:	800d3f00 	call	800d3f0 <find_file_in_directory>
 800ead8:	1005003a 	cmpeq	r2,r2,zero
 800eadc:	10007d1e 	bne	r2,zero,800ecd4 <alt_up_sd_card_fopen+0x2f8>
                {
                    if (create)
 800eae0:	e0bffe17 	ldw	r2,-8(fp)
 800eae4:	1005003a 	cmpeq	r2,r2,zero
 800eae8:	1000031e 	bne	r2,zero,800eaf8 <alt_up_sd_card_fopen+0x11c>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
 800eaec:	00bfffc4 	movi	r2,-1
 800eaf0:	e0bfff15 	stw	r2,-4(fp)
 800eaf4:	00009d06 	br	800ed6c <alt_up_sd_card_fopen+0x390>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
 800eaf8:	e17feb0f 	ldh	r5,-84(fp)
 800eafc:	e0bfeb0f 	ldh	r2,-84(fp)
 800eb00:	00c20074 	movhi	r3,2049
 800eb04:	18d1e104 	addi	r3,r3,18308
 800eb08:	100491ba 	slli	r2,r2,6
 800eb0c:	10c5883a 	add	r2,r2,r3
 800eb10:	10800504 	addi	r2,r2,20
 800eb14:	1080008b 	ldhu	r2,2(r2)
 800eb18:	113fffcc 	andi	r4,r2,65535
 800eb1c:	00c20074 	movhi	r3,2049
 800eb20:	18d1e104 	addi	r3,r3,18308
 800eb24:	280491ba 	slli	r2,r5,6
 800eb28:	10c5883a 	add	r2,r2,r3
 800eb2c:	10800704 	addi	r2,r2,28
 800eb30:	11000015 	stw	r4,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
 800eb34:	e0bfeb0f 	ldh	r2,-84(fp)
 800eb38:	00c20074 	movhi	r3,2049
 800eb3c:	18d1e104 	addi	r3,r3,18308
 800eb40:	100491ba 	slli	r2,r2,6
 800eb44:	10c5883a 	add	r2,r2,r3
 800eb48:	10800804 	addi	r2,r2,32
 800eb4c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
 800eb50:	e0bfeb0f 	ldh	r2,-84(fp)
 800eb54:	00c20074 	movhi	r3,2049
 800eb58:	18d1e104 	addi	r3,r3,18308
 800eb5c:	100491ba 	slli	r2,r2,6
 800eb60:	10c5883a 	add	r2,r2,r3
 800eb64:	10800904 	addi	r2,r2,36
 800eb68:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
 800eb6c:	e0bfeb0f 	ldh	r2,-84(fp)
 800eb70:	00c20074 	movhi	r3,2049
 800eb74:	18d1e104 	addi	r3,r3,18308
 800eb78:	100491ba 	slli	r2,r2,6
 800eb7c:	10c5883a 	add	r2,r2,r3
 800eb80:	10c00f04 	addi	r3,r2,60
 800eb84:	00800044 	movi	r2,1
 800eb88:	18800015 	stw	r2,0(r3)
    				active_files[file_record_index].modified = false;
 800eb8c:	e0bfeb0f 	ldh	r2,-84(fp)
 800eb90:	00c20074 	movhi	r3,2049
 800eb94:	18d1e104 	addi	r3,r3,18308
 800eb98:	100491ba 	slli	r2,r2,6
 800eb9c:	10c5883a 	add	r2,r2,r3
 800eba0:	10800e04 	addi	r2,r2,56
 800eba4:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 800eba8:	e03fea15 	stw	zero,-88(fp)
 800ebac:	00004506 	br	800ecc4 <alt_up_sd_card_fopen+0x2e8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
 800ebb0:	e0ffeb0f 	ldh	r3,-84(fp)
 800ebb4:	e0bfea17 	ldw	r2,-88(fp)
 800ebb8:	18803f26 	beq	r3,r2,800ecb8 <alt_up_sd_card_fopen+0x2dc>
 800ebbc:	e0bfea17 	ldw	r2,-88(fp)
 800ebc0:	00c20074 	movhi	r3,2049
 800ebc4:	18d1e104 	addi	r3,r3,18308
 800ebc8:	100491ba 	slli	r2,r2,6
 800ebcc:	10c5883a 	add	r2,r2,r3
 800ebd0:	10800f04 	addi	r2,r2,60
 800ebd4:	10800017 	ldw	r2,0(r2)
 800ebd8:	10800058 	cmpnei	r2,r2,1
 800ebdc:	1000361e 	bne	r2,zero,800ecb8 <alt_up_sd_card_fopen+0x2dc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 800ebe0:	e0bfeb0f 	ldh	r2,-84(fp)
 800ebe4:	00c20074 	movhi	r3,2049
 800ebe8:	18d1e104 	addi	r3,r3,18308
 800ebec:	100491ba 	slli	r2,r2,6
 800ebf0:	10c5883a 	add	r2,r2,r3
 800ebf4:	10800a04 	addi	r2,r2,40
 800ebf8:	11000017 	ldw	r4,0(r2)
 800ebfc:	e0bfea17 	ldw	r2,-88(fp)
 800ec00:	00c20074 	movhi	r3,2049
 800ec04:	18d1e104 	addi	r3,r3,18308
 800ec08:	100491ba 	slli	r2,r2,6
 800ec0c:	10c5883a 	add	r2,r2,r3
 800ec10:	10800a04 	addi	r2,r2,40
 800ec14:	10800017 	ldw	r2,0(r2)
 800ec18:	2080271e 	bne	r4,r2,800ecb8 <alt_up_sd_card_fopen+0x2dc>
 800ec1c:	e0bfeb0f 	ldh	r2,-84(fp)
 800ec20:	00c20074 	movhi	r3,2049
 800ec24:	18d1e104 	addi	r3,r3,18308
 800ec28:	100491ba 	slli	r2,r2,6
 800ec2c:	10c5883a 	add	r2,r2,r3
 800ec30:	10800b04 	addi	r2,r2,44
 800ec34:	11000017 	ldw	r4,0(r2)
 800ec38:	e0bfea17 	ldw	r2,-88(fp)
 800ec3c:	00c20074 	movhi	r3,2049
 800ec40:	18d1e104 	addi	r3,r3,18308
 800ec44:	100491ba 	slli	r2,r2,6
 800ec48:	10c5883a 	add	r2,r2,r3
 800ec4c:	10800b04 	addi	r2,r2,44
 800ec50:	10800017 	ldw	r2,0(r2)
 800ec54:	2080181e 	bne	r4,r2,800ecb8 <alt_up_sd_card_fopen+0x2dc>
 800ec58:	e0bfeb0f 	ldh	r2,-84(fp)
 800ec5c:	00c20074 	movhi	r3,2049
 800ec60:	18d1e104 	addi	r3,r3,18308
 800ec64:	100491ba 	slli	r2,r2,6
 800ec68:	10c5883a 	add	r2,r2,r3
 800ec6c:	10800c04 	addi	r2,r2,48
 800ec70:	1100000b 	ldhu	r4,0(r2)
 800ec74:	e0bfea17 	ldw	r2,-88(fp)
 800ec78:	00c20074 	movhi	r3,2049
 800ec7c:	18d1e104 	addi	r3,r3,18308
 800ec80:	100491ba 	slli	r2,r2,6
 800ec84:	10c5883a 	add	r2,r2,r3
 800ec88:	10800c04 	addi	r2,r2,48
 800ec8c:	1080000b 	ldhu	r2,0(r2)
 800ec90:	20ffffcc 	andi	r3,r4,65535
 800ec94:	18e0001c 	xori	r3,r3,32768
 800ec98:	18e00004 	addi	r3,r3,-32768
 800ec9c:	10bfffcc 	andi	r2,r2,65535
 800eca0:	10a0001c 	xori	r2,r2,32768
 800eca4:	10a00004 	addi	r2,r2,-32768
 800eca8:	1880031e 	bne	r3,r2,800ecb8 <alt_up_sd_card_fopen+0x2dc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
 800ecac:	00bfff84 	movi	r2,-2
 800ecb0:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 800ecb4:	00002b06 	br	800ed64 <alt_up_sd_card_fopen+0x388>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 800ecb8:	e0bfea17 	ldw	r2,-88(fp)
 800ecbc:	10800044 	addi	r2,r2,1
 800ecc0:	e0bfea15 	stw	r2,-88(fp)
 800ecc4:	e0bfea17 	ldw	r2,-88(fp)
 800ecc8:	10800510 	cmplti	r2,r2,20
 800eccc:	103fb81e 	bne	r2,zero,800ebb0 <alt_up_sd_card_fopen+0x1d4>
 800ecd0:	00002406 	br	800ed64 <alt_up_sd_card_fopen+0x388>
							}
						}
					}

                }
                else if (create)
 800ecd4:	e0bffe17 	ldw	r2,-8(fp)
 800ecd8:	1005003a 	cmpeq	r2,r2,zero
 800ecdc:	10001f1e 	bne	r2,zero,800ed5c <alt_up_sd_card_fopen+0x380>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
 800ece0:	e0bfeb0f 	ldh	r2,-84(fp)
 800ece4:	100491ba 	slli	r2,r2,6
 800ece8:	1007883a 	mov	r3,r2
 800ecec:	00820074 	movhi	r2,2049
 800ecf0:	1091e104 	addi	r2,r2,18308
 800ecf4:	188b883a 	add	r5,r3,r2
 800ecf8:	e1bfed04 	addi	r6,fp,-76
 800ecfc:	e13ffd17 	ldw	r4,-12(fp)
 800ed00:	800df280 	call	800df28 <create_file>
 800ed04:	1005003a 	cmpeq	r2,r2,zero
 800ed08:	1000111e 	bne	r2,zero,800ed50 <alt_up_sd_card_fopen+0x374>
                    {
                        active_files[file_record_index].in_use = true;
 800ed0c:	e0bfeb0f 	ldh	r2,-84(fp)
 800ed10:	00c20074 	movhi	r3,2049
 800ed14:	18d1e104 	addi	r3,r3,18308
 800ed18:	100491ba 	slli	r2,r2,6
 800ed1c:	10c5883a 	add	r2,r2,r3
 800ed20:	10c00f04 	addi	r3,r2,60
 800ed24:	00800044 	movi	r2,1
 800ed28:	18800015 	stw	r2,0(r3)
    					active_files[file_record_index].modified = true;
 800ed2c:	e0bfeb0f 	ldh	r2,-84(fp)
 800ed30:	00c20074 	movhi	r3,2049
 800ed34:	18d1e104 	addi	r3,r3,18308
 800ed38:	100491ba 	slli	r2,r2,6
 800ed3c:	10c5883a 	add	r2,r2,r3
 800ed40:	10c00e04 	addi	r3,r2,56
 800ed44:	00800044 	movi	r2,1
 800ed48:	18800015 	stw	r2,0(r3)
 800ed4c:	00000506 	br	800ed64 <alt_up_sd_card_fopen+0x388>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
 800ed50:	00bfffc4 	movi	r2,-1
 800ed54:	e0bfeb0d 	sth	r2,-84(fp)
 800ed58:	00000206 	br	800ed64 <alt_up_sd_card_fopen+0x388>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
 800ed5c:	00bfffc4 	movi	r2,-1
 800ed60:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
 800ed64:	e0bfeb0f 	ldh	r2,-84(fp)
 800ed68:	e0bfff15 	stw	r2,-4(fp)
 800ed6c:	e0bfff17 	ldw	r2,-4(fp)
}
 800ed70:	e037883a 	mov	sp,fp
 800ed74:	dfc00117 	ldw	ra,4(sp)
 800ed78:	df000017 	ldw	fp,0(sp)
 800ed7c:	dec00204 	addi	sp,sp,8
 800ed80:	f800283a 	ret

0800ed84 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 800ed84:	defffd04 	addi	sp,sp,-12
 800ed88:	df000215 	stw	fp,8(sp)
 800ed8c:	df000204 	addi	fp,sp,8
 800ed90:	e13ffe0d 	sth	r4,-8(fp)
 800ed94:	e17fff0d 	sth	r5,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 800ed98:	e0bffe0f 	ldh	r2,-8(fp)
 800ed9c:	1004803a 	cmplt	r2,r2,zero
 800eda0:	1000181e 	bne	r2,zero,800ee04 <alt_up_sd_card_set_attributes+0x80>
 800eda4:	e0bffe0f 	ldh	r2,-8(fp)
 800eda8:	10800508 	cmpgei	r2,r2,20
 800edac:	1000151e 	bne	r2,zero,800ee04 <alt_up_sd_card_set_attributes+0x80>
    {
        if (active_files[file_handle].in_use)
 800edb0:	e0bffe0f 	ldh	r2,-8(fp)
 800edb4:	00c20074 	movhi	r3,2049
 800edb8:	18d1e104 	addi	r3,r3,18308
 800edbc:	100491ba 	slli	r2,r2,6
 800edc0:	10c5883a 	add	r2,r2,r3
 800edc4:	10800f04 	addi	r2,r2,60
 800edc8:	10800017 	ldw	r2,0(r2)
 800edcc:	1005003a 	cmpeq	r2,r2,zero
 800edd0:	10000c1e 	bne	r2,zero,800ee04 <alt_up_sd_card_set_attributes+0x80>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
 800edd4:	e17ffe0f 	ldh	r5,-8(fp)
 800edd8:	e0bfff0b 	ldhu	r2,-4(fp)
 800eddc:	1007883a 	mov	r3,r2
 800ede0:	00bfffc4 	movi	r2,-1
 800ede4:	1884703a 	and	r2,r3,r2
 800ede8:	1009883a 	mov	r4,r2
 800edec:	00c20074 	movhi	r3,2049
 800edf0:	18d1e104 	addi	r3,r3,18308
 800edf4:	280491ba 	slli	r2,r5,6
 800edf8:	10c5883a 	add	r2,r2,r3
 800edfc:	10800204 	addi	r2,r2,8
 800ee00:	110000c5 	stb	r4,3(r2)
        }
    }
}
 800ee04:	e037883a 	mov	sp,fp
 800ee08:	df000017 	ldw	fp,0(sp)
 800ee0c:	dec00104 	addi	sp,sp,4
 800ee10:	f800283a 	ret

0800ee14 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 800ee14:	defffd04 	addi	sp,sp,-12
 800ee18:	df000215 	stw	fp,8(sp)
 800ee1c:	df000204 	addi	fp,sp,8
 800ee20:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 800ee24:	00bfffc4 	movi	r2,-1
 800ee28:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 800ee2c:	e0bfff0f 	ldh	r2,-4(fp)
 800ee30:	1004803a 	cmplt	r2,r2,zero
 800ee34:	1000151e 	bne	r2,zero,800ee8c <alt_up_sd_card_get_attributes+0x78>
 800ee38:	e0bfff0f 	ldh	r2,-4(fp)
 800ee3c:	10800508 	cmpgei	r2,r2,20
 800ee40:	1000121e 	bne	r2,zero,800ee8c <alt_up_sd_card_get_attributes+0x78>
    {
        if (active_files[file_handle].in_use)
 800ee44:	e0bfff0f 	ldh	r2,-4(fp)
 800ee48:	00c20074 	movhi	r3,2049
 800ee4c:	18d1e104 	addi	r3,r3,18308
 800ee50:	100491ba 	slli	r2,r2,6
 800ee54:	10c5883a 	add	r2,r2,r3
 800ee58:	10800f04 	addi	r2,r2,60
 800ee5c:	10800017 	ldw	r2,0(r2)
 800ee60:	1005003a 	cmpeq	r2,r2,zero
 800ee64:	1000091e 	bne	r2,zero,800ee8c <alt_up_sd_card_get_attributes+0x78>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
 800ee68:	e0bfff0f 	ldh	r2,-4(fp)
 800ee6c:	00c20074 	movhi	r3,2049
 800ee70:	18d1e104 	addi	r3,r3,18308
 800ee74:	100491ba 	slli	r2,r2,6
 800ee78:	10c5883a 	add	r2,r2,r3
 800ee7c:	10800204 	addi	r2,r2,8
 800ee80:	108000c3 	ldbu	r2,3(r2)
 800ee84:	10803fcc 	andi	r2,r2,255
 800ee88:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 800ee8c:	e0bffe0f 	ldh	r2,-8(fp)
}
 800ee90:	e037883a 	mov	sp,fp
 800ee94:	df000017 	ldw	fp,0(sp)
 800ee98:	dec00104 	addi	sp,sp,4
 800ee9c:	f800283a 	ret

0800eea0 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 800eea0:	defff904 	addi	sp,sp,-28
 800eea4:	dfc00615 	stw	ra,24(sp)
 800eea8:	df000515 	stw	fp,20(sp)
 800eeac:	dc000415 	stw	r16,16(sp)
 800eeb0:	df000404 	addi	fp,sp,16
 800eeb4:	e13ffe0d 	sth	r4,-8(fp)
    short int ch = -1;
 800eeb8:	00bfffc4 	movi	r2,-1
 800eebc:	e0bffd0d 	sth	r2,-12(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 800eec0:	e0bffe0f 	ldh	r2,-8(fp)
 800eec4:	1004803a 	cmplt	r2,r2,zero
 800eec8:	1000d51e 	bne	r2,zero,800f220 <alt_up_sd_card_read+0x380>
 800eecc:	e0bffe0f 	ldh	r2,-8(fp)
 800eed0:	10800508 	cmpgei	r2,r2,20
 800eed4:	1000d21e 	bne	r2,zero,800f220 <alt_up_sd_card_read+0x380>
    {
        if (active_files[file_handle].in_use)
 800eed8:	e0bffe0f 	ldh	r2,-8(fp)
 800eedc:	00c20074 	movhi	r3,2049
 800eee0:	18d1e104 	addi	r3,r3,18308
 800eee4:	100491ba 	slli	r2,r2,6
 800eee8:	10c5883a 	add	r2,r2,r3
 800eeec:	10800f04 	addi	r2,r2,60
 800eef0:	10800017 	ldw	r2,0(r2)
 800eef4:	1005003a 	cmpeq	r2,r2,zero
 800eef8:	1000c91e 	bne	r2,zero,800f220 <alt_up_sd_card_read+0x380>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 800eefc:	e0bffe0f 	ldh	r2,-8(fp)
 800ef00:	00c20074 	movhi	r3,2049
 800ef04:	18d1e104 	addi	r3,r3,18308
 800ef08:	100491ba 	slli	r2,r2,6
 800ef0c:	10c5883a 	add	r2,r2,r3
 800ef10:	10800904 	addi	r2,r2,36
 800ef14:	11000017 	ldw	r4,0(r2)
 800ef18:	e0bffe0f 	ldh	r2,-8(fp)
 800ef1c:	00c20074 	movhi	r3,2049
 800ef20:	18d1e104 	addi	r3,r3,18308
 800ef24:	100491ba 	slli	r2,r2,6
 800ef28:	10c5883a 	add	r2,r2,r3
 800ef2c:	10800604 	addi	r2,r2,24
 800ef30:	10800017 	ldw	r2,0(r2)
 800ef34:	2080ba2e 	bgeu	r4,r2,800f220 <alt_up_sd_card_read+0x380>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
 800ef38:	00820074 	movhi	r2,2049
 800ef3c:	1091cc04 	addi	r2,r2,18224
 800ef40:	14001417 	ldw	r16,80(r2)
 800ef44:	e0bffe0f 	ldh	r2,-8(fp)
 800ef48:	00c20074 	movhi	r3,2049
 800ef4c:	18d1e104 	addi	r3,r3,18308
 800ef50:	100491ba 	slli	r2,r2,6
 800ef54:	10c5883a 	add	r2,r2,r3
 800ef58:	10800704 	addi	r2,r2,28
 800ef5c:	10800017 	ldw	r2,0(r2)
 800ef60:	113fff84 	addi	r4,r2,-2
 800ef64:	00820074 	movhi	r2,2049
 800ef68:	1091cc04 	addi	r2,r2,18224
 800ef6c:	10800383 	ldbu	r2,14(r2)
 800ef70:	11403fcc 	andi	r5,r2,255
 800ef74:	800988c0 	call	800988c <__mulsi3>
 800ef78:	8089883a 	add	r4,r16,r2
 800ef7c:	e0bffe0f 	ldh	r2,-8(fp)
 800ef80:	00c20074 	movhi	r3,2049
 800ef84:	18d1e104 	addi	r3,r3,18308
 800ef88:	100491ba 	slli	r2,r2,6
 800ef8c:	10c5883a 	add	r2,r2,r3
 800ef90:	10800804 	addi	r2,r2,32
 800ef94:	10800017 	ldw	r2,0(r2)
 800ef98:	2085883a 	add	r2,r4,r2
 800ef9c:	e0bffc15 	stw	r2,-16(fp)
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
 800efa0:	e0bffe0f 	ldh	r2,-8(fp)
 800efa4:	00c20074 	movhi	r3,2049
 800efa8:	18d1e104 	addi	r3,r3,18308
 800efac:	100491ba 	slli	r2,r2,6
 800efb0:	10c5883a 	add	r2,r2,r3
 800efb4:	10800904 	addi	r2,r2,36
 800efb8:	10800017 	ldw	r2,0(r2)
 800efbc:	1005003a 	cmpeq	r2,r2,zero
 800efc0:	10006a1e 	bne	r2,zero,800f16c <alt_up_sd_card_read+0x2cc>
 800efc4:	e0bffe0f 	ldh	r2,-8(fp)
 800efc8:	00c20074 	movhi	r3,2049
 800efcc:	18d1e104 	addi	r3,r3,18308
 800efd0:	100491ba 	slli	r2,r2,6
 800efd4:	10c5883a 	add	r2,r2,r3
 800efd8:	10800904 	addi	r2,r2,36
 800efdc:	10800017 	ldw	r2,0(r2)
 800efe0:	10807fcc 	andi	r2,r2,511
 800efe4:	1004c03a 	cmpne	r2,r2,zero
 800efe8:	1000601e 	bne	r2,zero,800f16c <alt_up_sd_card_read+0x2cc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 800efec:	e0bffe0f 	ldh	r2,-8(fp)
 800eff0:	00c20074 	movhi	r3,2049
 800eff4:	18d1e104 	addi	r3,r3,18308
 800eff8:	100491ba 	slli	r2,r2,6
 800effc:	10c5883a 	add	r2,r2,r3
 800f000:	10800804 	addi	r2,r2,32
 800f004:	10c00017 	ldw	r3,0(r2)
 800f008:	00820074 	movhi	r2,2049
 800f00c:	1091cc04 	addi	r2,r2,18224
 800f010:	10800383 	ldbu	r2,14(r2)
 800f014:	10803fcc 	andi	r2,r2,255
 800f018:	10bfffc4 	addi	r2,r2,-1
 800f01c:	1880411e 	bne	r3,r2,800f124 <alt_up_sd_card_read+0x284>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 800f020:	e0bffe0f 	ldh	r2,-8(fp)
 800f024:	00c20074 	movhi	r3,2049
 800f028:	18d1e104 	addi	r3,r3,18308
 800f02c:	100491ba 	slli	r2,r2,6
 800f030:	10c5883a 	add	r2,r2,r3
 800f034:	10800704 	addi	r2,r2,28
 800f038:	11000017 	ldw	r4,0(r2)
 800f03c:	e17ffd84 	addi	r5,fp,-10
 800f040:	800b8080 	call	800b808 <get_cluster_flag>
 800f044:	1005003a 	cmpeq	r2,r2,zero
 800f048:	1000331e 	bne	r2,zero,800f118 <alt_up_sd_card_read+0x278>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 800f04c:	e0bffd8b 	ldhu	r2,-10(fp)
 800f050:	10bfffcc 	andi	r2,r2,65535
 800f054:	10fffe0c 	andi	r3,r2,65528
 800f058:	00bffe14 	movui	r2,65528
 800f05c:	1880031e 	bne	r3,r2,800f06c <alt_up_sd_card_read+0x1cc>
                            {
                                /* End of file */
                                return -1;
 800f060:	00bfffc4 	movi	r2,-1
 800f064:	e0bfff15 	stw	r2,-4(fp)
 800f068:	00006f06 	br	800f228 <alt_up_sd_card_read+0x388>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 800f06c:	e13ffe0f 	ldh	r4,-8(fp)
 800f070:	e0bffd8b 	ldhu	r2,-10(fp)
 800f074:	117fffcc 	andi	r5,r2,65535
 800f078:	00c20074 	movhi	r3,2049
 800f07c:	18d1e104 	addi	r3,r3,18308
 800f080:	200491ba 	slli	r2,r4,6
 800f084:	10c5883a 	add	r2,r2,r3
 800f088:	10800704 	addi	r2,r2,28
 800f08c:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 800f090:	e0bffe0f 	ldh	r2,-8(fp)
 800f094:	00c20074 	movhi	r3,2049
 800f098:	18d1e104 	addi	r3,r3,18308
 800f09c:	100491ba 	slli	r2,r2,6
 800f0a0:	10c5883a 	add	r2,r2,r3
 800f0a4:	10800804 	addi	r2,r2,32
 800f0a8:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 800f0ac:	00820074 	movhi	r2,2049
 800f0b0:	1091cc04 	addi	r2,r2,18224
 800f0b4:	14001417 	ldw	r16,80(r2)
 800f0b8:	e0bffe0f 	ldh	r2,-8(fp)
 800f0bc:	00c20074 	movhi	r3,2049
 800f0c0:	18d1e104 	addi	r3,r3,18308
 800f0c4:	100491ba 	slli	r2,r2,6
 800f0c8:	10c5883a 	add	r2,r2,r3
 800f0cc:	10800704 	addi	r2,r2,28
 800f0d0:	10800017 	ldw	r2,0(r2)
 800f0d4:	113fff84 	addi	r4,r2,-2
 800f0d8:	00820074 	movhi	r2,2049
 800f0dc:	1091cc04 	addi	r2,r2,18224
 800f0e0:	10800383 	ldbu	r2,14(r2)
 800f0e4:	11403fcc 	andi	r5,r2,255
 800f0e8:	800988c0 	call	800988c <__mulsi3>
 800f0ec:	8089883a 	add	r4,r16,r2
 800f0f0:	e0bffe0f 	ldh	r2,-8(fp)
 800f0f4:	00c20074 	movhi	r3,2049
 800f0f8:	18d1e104 	addi	r3,r3,18308
 800f0fc:	100491ba 	slli	r2,r2,6
 800f100:	10c5883a 	add	r2,r2,r3
 800f104:	10800804 	addi	r2,r2,32
 800f108:	10800017 	ldw	r2,0(r2)
 800f10c:	2085883a 	add	r2,r4,r2
 800f110:	e0bffc15 	stw	r2,-16(fp)
 800f114:	00001506 	br	800f16c <alt_up_sd_card_read+0x2cc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
 800f118:	00bfff84 	movi	r2,-2
 800f11c:	e0bfff15 	stw	r2,-4(fp)
 800f120:	00004106 	br	800f228 <alt_up_sd_card_read+0x388>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 800f124:	e17ffe0f 	ldh	r5,-8(fp)
 800f128:	e0bffe0f 	ldh	r2,-8(fp)
 800f12c:	00c20074 	movhi	r3,2049
 800f130:	18d1e104 	addi	r3,r3,18308
 800f134:	100491ba 	slli	r2,r2,6
 800f138:	10c5883a 	add	r2,r2,r3
 800f13c:	10800804 	addi	r2,r2,32
 800f140:	10800017 	ldw	r2,0(r2)
 800f144:	11000044 	addi	r4,r2,1
 800f148:	00c20074 	movhi	r3,2049
 800f14c:	18d1e104 	addi	r3,r3,18308
 800f150:	280491ba 	slli	r2,r5,6
 800f154:	10c5883a 	add	r2,r2,r3
 800f158:	10800804 	addi	r2,r2,32
 800f15c:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
 800f160:	e0bffc17 	ldw	r2,-16(fp)
 800f164:	10800044 	addi	r2,r2,1
 800f168:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
 800f16c:	d0e6c917 	ldw	r3,-25820(gp)
 800f170:	e0bffc17 	ldw	r2,-16(fp)
 800f174:	1885883a 	add	r2,r3,r2
 800f178:	1007883a 	mov	r3,r2
 800f17c:	d0a6cd17 	ldw	r2,-25804(gp)
 800f180:	18800826 	beq	r3,r2,800f1a4 <alt_up_sd_card_read+0x304>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 800f184:	d166c917 	ldw	r5,-25820(gp)
 800f188:	e13ffc17 	ldw	r4,-16(fp)
 800f18c:	800b70c0 	call	800b70c <Read_Sector_Data>
 800f190:	1004c03a 	cmpne	r2,r2,zero
 800f194:	1000031e 	bne	r2,zero,800f1a4 <alt_up_sd_card_read+0x304>
                    {
						return -2;
 800f198:	00bfff84 	movi	r2,-2
 800f19c:	e0bfff15 	stw	r2,-4(fp)
 800f1a0:	00002106 	br	800f228 <alt_up_sd_card_read+0x388>
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
 800f1a4:	e0bffe0f 	ldh	r2,-8(fp)
 800f1a8:	00c20074 	movhi	r3,2049
 800f1ac:	18d1e104 	addi	r3,r3,18308
 800f1b0:	100491ba 	slli	r2,r2,6
 800f1b4:	10c5883a 	add	r2,r2,r3
 800f1b8:	10800904 	addi	r2,r2,36
 800f1bc:	10800017 	ldw	r2,0(r2)
 800f1c0:	10807fcc 	andi	r2,r2,511
 800f1c4:	1007883a 	mov	r3,r2
 800f1c8:	d0a6c817 	ldw	r2,-25824(gp)
 800f1cc:	1885883a 	add	r2,r3,r2
 800f1d0:	10800023 	ldbuio	r2,0(r2)
 800f1d4:	10803fcc 	andi	r2,r2,255
 800f1d8:	1080201c 	xori	r2,r2,128
 800f1dc:	10bfe004 	addi	r2,r2,-128
 800f1e0:	e0bffd0d 	sth	r2,-12(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 800f1e4:	e17ffe0f 	ldh	r5,-8(fp)
 800f1e8:	e0bffe0f 	ldh	r2,-8(fp)
 800f1ec:	00c20074 	movhi	r3,2049
 800f1f0:	18d1e104 	addi	r3,r3,18308
 800f1f4:	100491ba 	slli	r2,r2,6
 800f1f8:	10c5883a 	add	r2,r2,r3
 800f1fc:	10800904 	addi	r2,r2,36
 800f200:	10800017 	ldw	r2,0(r2)
 800f204:	11000044 	addi	r4,r2,1
 800f208:	00c20074 	movhi	r3,2049
 800f20c:	18d1e104 	addi	r3,r3,18308
 800f210:	280491ba 	slli	r2,r5,6
 800f214:	10c5883a 	add	r2,r2,r3
 800f218:	10800904 	addi	r2,r2,36
 800f21c:	11000015 	stw	r4,0(r2)
            }
        }
    }
    
    return ch;
 800f220:	e0bffd0f 	ldh	r2,-12(fp)
 800f224:	e0bfff15 	stw	r2,-4(fp)
 800f228:	e0bfff17 	ldw	r2,-4(fp)
}
 800f22c:	e037883a 	mov	sp,fp
 800f230:	dfc00217 	ldw	ra,8(sp)
 800f234:	df000117 	ldw	fp,4(sp)
 800f238:	dc000017 	ldw	r16,0(sp)
 800f23c:	dec00304 	addi	sp,sp,12
 800f240:	f800283a 	ret

0800f244 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 800f244:	defff504 	addi	sp,sp,-44
 800f248:	dfc00a15 	stw	ra,40(sp)
 800f24c:	df000915 	stw	fp,36(sp)
 800f250:	dc000815 	stw	r16,32(sp)
 800f254:	df000804 	addi	fp,sp,32
 800f258:	e13ffd0d 	sth	r4,-12(fp)
 800f25c:	e17ffe05 	stb	r5,-8(fp)
    bool result = false;
 800f260:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 800f264:	e0bffd0f 	ldh	r2,-12(fp)
 800f268:	1004803a 	cmplt	r2,r2,zero
 800f26c:	1001751e 	bne	r2,zero,800f844 <alt_up_sd_card_write+0x600>
 800f270:	e0bffd0f 	ldh	r2,-12(fp)
 800f274:	10800508 	cmpgei	r2,r2,20
 800f278:	1001721e 	bne	r2,zero,800f844 <alt_up_sd_card_write+0x600>
    {
        if (active_files[file_handle].in_use)
 800f27c:	e0bffd0f 	ldh	r2,-12(fp)
 800f280:	00c20074 	movhi	r3,2049
 800f284:	18d1e104 	addi	r3,r3,18308
 800f288:	100491ba 	slli	r2,r2,6
 800f28c:	10c5883a 	add	r2,r2,r3
 800f290:	10800f04 	addi	r2,r2,60
 800f294:	10800017 	ldw	r2,0(r2)
 800f298:	1005003a 	cmpeq	r2,r2,zero
 800f29c:	1001691e 	bne	r2,zero,800f844 <alt_up_sd_card_write+0x600>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
 800f2a0:	00820074 	movhi	r2,2049
 800f2a4:	1091cc04 	addi	r2,r2,18224
 800f2a8:	14001417 	ldw	r16,80(r2)
 800f2ac:	e0bffd0f 	ldh	r2,-12(fp)
 800f2b0:	00c20074 	movhi	r3,2049
 800f2b4:	18d1e104 	addi	r3,r3,18308
 800f2b8:	100491ba 	slli	r2,r2,6
 800f2bc:	10c5883a 	add	r2,r2,r3
 800f2c0:	10800704 	addi	r2,r2,28
 800f2c4:	10800017 	ldw	r2,0(r2)
 800f2c8:	113fff84 	addi	r4,r2,-2
 800f2cc:	00820074 	movhi	r2,2049
 800f2d0:	1091cc04 	addi	r2,r2,18224
 800f2d4:	10800383 	ldbu	r2,14(r2)
 800f2d8:	11403fcc 	andi	r5,r2,255
 800f2dc:	800988c0 	call	800988c <__mulsi3>
 800f2e0:	8089883a 	add	r4,r16,r2
 800f2e4:	e0bffd0f 	ldh	r2,-12(fp)
 800f2e8:	00c20074 	movhi	r3,2049
 800f2ec:	18d1e104 	addi	r3,r3,18308
 800f2f0:	100491ba 	slli	r2,r2,6
 800f2f4:	10c5883a 	add	r2,r2,r3
 800f2f8:	10800804 	addi	r2,r2,32
 800f2fc:	10800017 	ldw	r2,0(r2)
 800f300:	2085883a 	add	r2,r4,r2
 800f304:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
 800f308:	e0bffd0f 	ldh	r2,-12(fp)
 800f30c:	00c20074 	movhi	r3,2049
 800f310:	18d1e104 	addi	r3,r3,18308
 800f314:	100491ba 	slli	r2,r2,6
 800f318:	10c5883a 	add	r2,r2,r3
 800f31c:	10800904 	addi	r2,r2,36
 800f320:	11000017 	ldw	r4,0(r2)
 800f324:	00820074 	movhi	r2,2049
 800f328:	1091cc04 	addi	r2,r2,18224
 800f32c:	1080030b 	ldhu	r2,12(r2)
 800f330:	117fffcc 	andi	r5,r2,65535
 800f334:	80098840 	call	8009884 <__umodsi3>
 800f338:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 800f33c:	e0bffd0f 	ldh	r2,-12(fp)
 800f340:	00c20074 	movhi	r3,2049
 800f344:	18d1e104 	addi	r3,r3,18308
 800f348:	100491ba 	slli	r2,r2,6
 800f34c:	10c5883a 	add	r2,r2,r3
 800f350:	10800904 	addi	r2,r2,36
 800f354:	11000017 	ldw	r4,0(r2)
 800f358:	e0bffd0f 	ldh	r2,-12(fp)
 800f35c:	00c20074 	movhi	r3,2049
 800f360:	18d1e104 	addi	r3,r3,18308
 800f364:	100491ba 	slli	r2,r2,6
 800f368:	10c5883a 	add	r2,r2,r3
 800f36c:	10800604 	addi	r2,r2,24
 800f370:	10800017 	ldw	r2,0(r2)
 800f374:	2080682e 	bgeu	r4,r2,800f518 <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 800f378:	e0bffd0f 	ldh	r2,-12(fp)
 800f37c:	00c20074 	movhi	r3,2049
 800f380:	18d1e104 	addi	r3,r3,18308
 800f384:	100491ba 	slli	r2,r2,6
 800f388:	10c5883a 	add	r2,r2,r3
 800f38c:	10800904 	addi	r2,r2,36
 800f390:	10800017 	ldw	r2,0(r2)
 800f394:	1005003a 	cmpeq	r2,r2,zero
 800f398:	1000de1e 	bne	r2,zero,800f714 <alt_up_sd_card_write+0x4d0>
 800f39c:	e0bff80f 	ldh	r2,-32(fp)
 800f3a0:	1004c03a 	cmpne	r2,r2,zero
 800f3a4:	1000db1e 	bne	r2,zero,800f714 <alt_up_sd_card_write+0x4d0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 800f3a8:	e0bffd0f 	ldh	r2,-12(fp)
 800f3ac:	00c20074 	movhi	r3,2049
 800f3b0:	18d1e104 	addi	r3,r3,18308
 800f3b4:	100491ba 	slli	r2,r2,6
 800f3b8:	10c5883a 	add	r2,r2,r3
 800f3bc:	10800804 	addi	r2,r2,32
 800f3c0:	10c00017 	ldw	r3,0(r2)
 800f3c4:	00820074 	movhi	r2,2049
 800f3c8:	1091cc04 	addi	r2,r2,18224
 800f3cc:	10800383 	ldbu	r2,14(r2)
 800f3d0:	10803fcc 	andi	r2,r2,255
 800f3d4:	10bfffc4 	addi	r2,r2,-1
 800f3d8:	18803c1e 	bne	r3,r2,800f4cc <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 800f3dc:	e0bffd0f 	ldh	r2,-12(fp)
 800f3e0:	00c20074 	movhi	r3,2049
 800f3e4:	18d1e104 	addi	r3,r3,18308
 800f3e8:	100491ba 	slli	r2,r2,6
 800f3ec:	10c5883a 	add	r2,r2,r3
 800f3f0:	10800704 	addi	r2,r2,28
 800f3f4:	11000017 	ldw	r4,0(r2)
 800f3f8:	e17ffb04 	addi	r5,fp,-20
 800f3fc:	800b8080 	call	800b808 <get_cluster_flag>
 800f400:	1005003a 	cmpeq	r2,r2,zero
 800f404:	10002f1e 	bne	r2,zero,800f4c4 <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
 800f408:	e0bffb0b 	ldhu	r2,-20(fp)
 800f40c:	10ffffcc 	andi	r3,r2,65535
 800f410:	00bffdd4 	movui	r2,65527
 800f414:	10c0bf36 	bltu	r2,r3,800f714 <alt_up_sd_card_write+0x4d0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 800f418:	e13ffd0f 	ldh	r4,-12(fp)
 800f41c:	e0bffb0b 	ldhu	r2,-20(fp)
 800f420:	117fffcc 	andi	r5,r2,65535
 800f424:	00c20074 	movhi	r3,2049
 800f428:	18d1e104 	addi	r3,r3,18308
 800f42c:	200491ba 	slli	r2,r4,6
 800f430:	10c5883a 	add	r2,r2,r3
 800f434:	10800704 	addi	r2,r2,28
 800f438:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 800f43c:	e0bffd0f 	ldh	r2,-12(fp)
 800f440:	00c20074 	movhi	r3,2049
 800f444:	18d1e104 	addi	r3,r3,18308
 800f448:	100491ba 	slli	r2,r2,6
 800f44c:	10c5883a 	add	r2,r2,r3
 800f450:	10800804 	addi	r2,r2,32
 800f454:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 800f458:	00820074 	movhi	r2,2049
 800f45c:	1091cc04 	addi	r2,r2,18224
 800f460:	14001417 	ldw	r16,80(r2)
 800f464:	e0bffd0f 	ldh	r2,-12(fp)
 800f468:	00c20074 	movhi	r3,2049
 800f46c:	18d1e104 	addi	r3,r3,18308
 800f470:	100491ba 	slli	r2,r2,6
 800f474:	10c5883a 	add	r2,r2,r3
 800f478:	10800704 	addi	r2,r2,28
 800f47c:	10800017 	ldw	r2,0(r2)
 800f480:	113fff84 	addi	r4,r2,-2
 800f484:	00820074 	movhi	r2,2049
 800f488:	1091cc04 	addi	r2,r2,18224
 800f48c:	10800383 	ldbu	r2,14(r2)
 800f490:	11403fcc 	andi	r5,r2,255
 800f494:	800988c0 	call	800988c <__mulsi3>
 800f498:	8089883a 	add	r4,r16,r2
 800f49c:	e0bffd0f 	ldh	r2,-12(fp)
 800f4a0:	00c20074 	movhi	r3,2049
 800f4a4:	18d1e104 	addi	r3,r3,18308
 800f4a8:	100491ba 	slli	r2,r2,6
 800f4ac:	10c5883a 	add	r2,r2,r3
 800f4b0:	10800804 	addi	r2,r2,32
 800f4b4:	10800017 	ldw	r2,0(r2)
 800f4b8:	2085883a 	add	r2,r4,r2
 800f4bc:	e0bff915 	stw	r2,-28(fp)
 800f4c0:	00009406 	br	800f714 <alt_up_sd_card_write+0x4d0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
 800f4c4:	e03fff15 	stw	zero,-4(fp)
 800f4c8:	0000e006 	br	800f84c <alt_up_sd_card_write+0x608>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 800f4cc:	e17ffd0f 	ldh	r5,-12(fp)
 800f4d0:	e0bffd0f 	ldh	r2,-12(fp)
 800f4d4:	00c20074 	movhi	r3,2049
 800f4d8:	18d1e104 	addi	r3,r3,18308
 800f4dc:	100491ba 	slli	r2,r2,6
 800f4e0:	10c5883a 	add	r2,r2,r3
 800f4e4:	10800804 	addi	r2,r2,32
 800f4e8:	10800017 	ldw	r2,0(r2)
 800f4ec:	11000044 	addi	r4,r2,1
 800f4f0:	00c20074 	movhi	r3,2049
 800f4f4:	18d1e104 	addi	r3,r3,18308
 800f4f8:	280491ba 	slli	r2,r5,6
 800f4fc:	10c5883a 	add	r2,r2,r3
 800f500:	10800804 	addi	r2,r2,32
 800f504:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
 800f508:	e0bff917 	ldw	r2,-28(fp)
 800f50c:	10800044 	addi	r2,r2,1
 800f510:	e0bff915 	stw	r2,-28(fp)
 800f514:	00007f06 	br	800f714 <alt_up_sd_card_write+0x4d0>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 800f518:	e0bffd0f 	ldh	r2,-12(fp)
 800f51c:	00c20074 	movhi	r3,2049
 800f520:	18d1e104 	addi	r3,r3,18308
 800f524:	100491ba 	slli	r2,r2,6
 800f528:	10c5883a 	add	r2,r2,r3
 800f52c:	10800904 	addi	r2,r2,36
 800f530:	10800017 	ldw	r2,0(r2)
 800f534:	1005003a 	cmpeq	r2,r2,zero
 800f538:	1000761e 	bne	r2,zero,800f714 <alt_up_sd_card_write+0x4d0>
 800f53c:	e0bff80f 	ldh	r2,-32(fp)
 800f540:	1004c03a 	cmpne	r2,r2,zero
 800f544:	1000731e 	bne	r2,zero,800f714 <alt_up_sd_card_write+0x4d0>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 800f548:	e0bffd0f 	ldh	r2,-12(fp)
 800f54c:	00c20074 	movhi	r3,2049
 800f550:	18d1e104 	addi	r3,r3,18308
 800f554:	100491ba 	slli	r2,r2,6
 800f558:	10c5883a 	add	r2,r2,r3
 800f55c:	10800804 	addi	r2,r2,32
 800f560:	10c00017 	ldw	r3,0(r2)
 800f564:	00820074 	movhi	r2,2049
 800f568:	1091cc04 	addi	r2,r2,18224
 800f56c:	10800383 	ldbu	r2,14(r2)
 800f570:	10803fcc 	andi	r2,r2,255
 800f574:	10bfffc4 	addi	r2,r2,-1
 800f578:	1880381e 	bne	r3,r2,800f65c <alt_up_sd_card_write+0x418>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
 800f57c:	e13ffc04 	addi	r4,fp,-16
 800f580:	800d8540 	call	800d854 <find_first_empty_cluster>
 800f584:	1005003a 	cmpeq	r2,r2,zero
 800f588:	1000321e 	bne	r2,zero,800f654 <alt_up_sd_card_write+0x410>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
 800f58c:	e0bffd0f 	ldh	r2,-12(fp)
 800f590:	00c20074 	movhi	r3,2049
 800f594:	18d1e104 	addi	r3,r3,18308
 800f598:	100491ba 	slli	r2,r2,6
 800f59c:	10c5883a 	add	r2,r2,r3
 800f5a0:	10800704 	addi	r2,r2,28
 800f5a4:	11000017 	ldw	r4,0(r2)
 800f5a8:	e0bffc17 	ldw	r2,-16(fp)
 800f5ac:	117fffcc 	andi	r5,r2,65535
 800f5b0:	2960001c 	xori	r5,r5,32768
 800f5b4:	29600004 	addi	r5,r5,-32768
 800f5b8:	01800044 	movi	r6,1
 800f5bc:	800b8c00 	call	800b8c0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
 800f5c0:	e13ffc17 	ldw	r4,-16(fp)
 800f5c4:	017fffc4 	movi	r5,-1
 800f5c8:	01800044 	movi	r6,1
 800f5cc:	800b8c00 	call	800b8c0 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
 800f5d0:	e0bffd0f 	ldh	r2,-12(fp)
 800f5d4:	00c20074 	movhi	r3,2049
 800f5d8:	18d1e104 	addi	r3,r3,18308
 800f5dc:	100491ba 	slli	r2,r2,6
 800f5e0:	10c5883a 	add	r2,r2,r3
 800f5e4:	10800704 	addi	r2,r2,28
 800f5e8:	11000017 	ldw	r4,0(r2)
 800f5ec:	e0bffc17 	ldw	r2,-16(fp)
 800f5f0:	117fffcc 	andi	r5,r2,65535
 800f5f4:	2960001c 	xori	r5,r5,32768
 800f5f8:	29600004 	addi	r5,r5,-32768
 800f5fc:	000d883a 	mov	r6,zero
 800f600:	800b8c00 	call	800b8c0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
 800f604:	e13ffc17 	ldw	r4,-16(fp)
 800f608:	017fffc4 	movi	r5,-1
 800f60c:	000d883a 	mov	r6,zero
 800f610:	800b8c00 	call	800b8c0 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
 800f614:	e0bffd0f 	ldh	r2,-12(fp)
 800f618:	e13ffc17 	ldw	r4,-16(fp)
 800f61c:	00c20074 	movhi	r3,2049
 800f620:	18d1e104 	addi	r3,r3,18308
 800f624:	100491ba 	slli	r2,r2,6
 800f628:	10c5883a 	add	r2,r2,r3
 800f62c:	10800704 	addi	r2,r2,28
 800f630:	11000015 	stw	r4,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
 800f634:	e0bffd0f 	ldh	r2,-12(fp)
 800f638:	00c20074 	movhi	r3,2049
 800f63c:	18d1e104 	addi	r3,r3,18308
 800f640:	100491ba 	slli	r2,r2,6
 800f644:	10c5883a 	add	r2,r2,r3
 800f648:	10800804 	addi	r2,r2,32
 800f64c:	10000015 	stw	zero,0(r2)
 800f650:	00001606 	br	800f6ac <alt_up_sd_card_write+0x468>
						}
						else
						{
							return false;
 800f654:	e03fff15 	stw	zero,-4(fp)
 800f658:	00007c06 	br	800f84c <alt_up_sd_card_write+0x608>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
 800f65c:	e43ffd0f 	ldh	r16,-12(fp)
 800f660:	e0bffd0f 	ldh	r2,-12(fp)
 800f664:	00c20074 	movhi	r3,2049
 800f668:	18d1e104 	addi	r3,r3,18308
 800f66c:	100491ba 	slli	r2,r2,6
 800f670:	10c5883a 	add	r2,r2,r3
 800f674:	10800904 	addi	r2,r2,36
 800f678:	11000017 	ldw	r4,0(r2)
 800f67c:	00820074 	movhi	r2,2049
 800f680:	1091cc04 	addi	r2,r2,18224
 800f684:	1080030b 	ldhu	r2,12(r2)
 800f688:	117fffcc 	andi	r5,r2,65535
 800f68c:	800987c0 	call	800987c <__udivsi3>
 800f690:	1009883a 	mov	r4,r2
 800f694:	00c20074 	movhi	r3,2049
 800f698:	18d1e104 	addi	r3,r3,18308
 800f69c:	800491ba 	slli	r2,r16,6
 800f6a0:	10c5883a 	add	r2,r2,r3
 800f6a4:	10800804 	addi	r2,r2,32
 800f6a8:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 800f6ac:	00820074 	movhi	r2,2049
 800f6b0:	1091cc04 	addi	r2,r2,18224
 800f6b4:	14001417 	ldw	r16,80(r2)
 800f6b8:	e0bffd0f 	ldh	r2,-12(fp)
 800f6bc:	00c20074 	movhi	r3,2049
 800f6c0:	18d1e104 	addi	r3,r3,18308
 800f6c4:	100491ba 	slli	r2,r2,6
 800f6c8:	10c5883a 	add	r2,r2,r3
 800f6cc:	10800704 	addi	r2,r2,28
 800f6d0:	10800017 	ldw	r2,0(r2)
 800f6d4:	113fff84 	addi	r4,r2,-2
 800f6d8:	00820074 	movhi	r2,2049
 800f6dc:	1091cc04 	addi	r2,r2,18224
 800f6e0:	10800383 	ldbu	r2,14(r2)
 800f6e4:	11403fcc 	andi	r5,r2,255
 800f6e8:	800988c0 	call	800988c <__mulsi3>
 800f6ec:	8089883a 	add	r4,r16,r2
 800f6f0:	e0bffd0f 	ldh	r2,-12(fp)
 800f6f4:	00c20074 	movhi	r3,2049
 800f6f8:	18d1e104 	addi	r3,r3,18308
 800f6fc:	100491ba 	slli	r2,r2,6
 800f700:	10c5883a 	add	r2,r2,r3
 800f704:	10800804 	addi	r2,r2,32
 800f708:	10800017 	ldw	r2,0(r2)
 800f70c:	2085883a 	add	r2,r4,r2
 800f710:	e0bff915 	stw	r2,-28(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
 800f714:	d0e6c917 	ldw	r3,-25820(gp)
 800f718:	e0bff917 	ldw	r2,-28(fp)
 800f71c:	1885883a 	add	r2,r3,r2
 800f720:	1007883a 	mov	r3,r2
 800f724:	d0a6cd17 	ldw	r2,-25804(gp)
 800f728:	18800726 	beq	r3,r2,800f748 <alt_up_sd_card_write+0x504>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 800f72c:	d166c917 	ldw	r5,-25820(gp)
 800f730:	e13ff917 	ldw	r4,-28(fp)
 800f734:	800b70c0 	call	800b70c <Read_Sector_Data>
 800f738:	1004c03a 	cmpne	r2,r2,zero
 800f73c:	1000021e 	bne	r2,zero,800f748 <alt_up_sd_card_write+0x504>
                {
					return false;
 800f740:	e03fff15 	stw	zero,-4(fp)
 800f744:	00004106 	br	800f84c <alt_up_sd_card_write+0x608>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 800f748:	e0bff80f 	ldh	r2,-32(fp)
 800f74c:	1007883a 	mov	r3,r2
 800f750:	d0a6c817 	ldw	r2,-25824(gp)
 800f754:	1885883a 	add	r2,r3,r2
 800f758:	e0fffe07 	ldb	r3,-8(fp)
 800f75c:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 800f760:	e17ffd0f 	ldh	r5,-12(fp)
 800f764:	e0bffd0f 	ldh	r2,-12(fp)
 800f768:	00c20074 	movhi	r3,2049
 800f76c:	18d1e104 	addi	r3,r3,18308
 800f770:	100491ba 	slli	r2,r2,6
 800f774:	10c5883a 	add	r2,r2,r3
 800f778:	10800904 	addi	r2,r2,36
 800f77c:	10800017 	ldw	r2,0(r2)
 800f780:	11000044 	addi	r4,r2,1
 800f784:	00c20074 	movhi	r3,2049
 800f788:	18d1e104 	addi	r3,r3,18308
 800f78c:	280491ba 	slli	r2,r5,6
 800f790:	10c5883a 	add	r2,r2,r3
 800f794:	10800904 	addi	r2,r2,36
 800f798:	11000015 	stw	r4,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
 800f79c:	e0bffd0f 	ldh	r2,-12(fp)
 800f7a0:	00c20074 	movhi	r3,2049
 800f7a4:	18d1e104 	addi	r3,r3,18308
 800f7a8:	100491ba 	slli	r2,r2,6
 800f7ac:	10c5883a 	add	r2,r2,r3
 800f7b0:	10800904 	addi	r2,r2,36
 800f7b4:	11000017 	ldw	r4,0(r2)
 800f7b8:	e0bffd0f 	ldh	r2,-12(fp)
 800f7bc:	00c20074 	movhi	r3,2049
 800f7c0:	18d1e104 	addi	r3,r3,18308
 800f7c4:	100491ba 	slli	r2,r2,6
 800f7c8:	10c5883a 	add	r2,r2,r3
 800f7cc:	10800604 	addi	r2,r2,24
 800f7d0:	10800017 	ldw	r2,0(r2)
 800f7d4:	20801736 	bltu	r4,r2,800f834 <alt_up_sd_card_write+0x5f0>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
 800f7d8:	e17ffd0f 	ldh	r5,-12(fp)
 800f7dc:	e0bffd0f 	ldh	r2,-12(fp)
 800f7e0:	00c20074 	movhi	r3,2049
 800f7e4:	18d1e104 	addi	r3,r3,18308
 800f7e8:	100491ba 	slli	r2,r2,6
 800f7ec:	10c5883a 	add	r2,r2,r3
 800f7f0:	10800604 	addi	r2,r2,24
 800f7f4:	10800017 	ldw	r2,0(r2)
 800f7f8:	11000044 	addi	r4,r2,1
 800f7fc:	00c20074 	movhi	r3,2049
 800f800:	18d1e104 	addi	r3,r3,18308
 800f804:	280491ba 	slli	r2,r5,6
 800f808:	10c5883a 	add	r2,r2,r3
 800f80c:	10800604 	addi	r2,r2,24
 800f810:	11000015 	stw	r4,0(r2)
				active_files[file_handle].modified = true;
 800f814:	e0bffd0f 	ldh	r2,-12(fp)
 800f818:	00c20074 	movhi	r3,2049
 800f81c:	18d1e104 	addi	r3,r3,18308
 800f820:	100491ba 	slli	r2,r2,6
 800f824:	10c5883a 	add	r2,r2,r3
 800f828:	10c00e04 	addi	r3,r2,56
 800f82c:	00800044 	movi	r2,1
 800f830:	18800015 	stw	r2,0(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
 800f834:	00800044 	movi	r2,1
 800f838:	d0a6cc15 	stw	r2,-25808(gp)
			result = true;
 800f83c:	00800044 	movi	r2,1
 800f840:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
 800f844:	e0bffa17 	ldw	r2,-24(fp)
 800f848:	e0bfff15 	stw	r2,-4(fp)
 800f84c:	e0bfff17 	ldw	r2,-4(fp)
}
 800f850:	e037883a 	mov	sp,fp
 800f854:	dfc00217 	ldw	ra,8(sp)
 800f858:	df000117 	ldw	fp,4(sp)
 800f85c:	dc000017 	ldw	r16,0(sp)
 800f860:	dec00304 	addi	sp,sp,12
 800f864:	f800283a 	ret

0800f868 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 800f868:	defffa04 	addi	sp,sp,-24
 800f86c:	dfc00515 	stw	ra,20(sp)
 800f870:	df000415 	stw	fp,16(sp)
 800f874:	dc000315 	stw	r16,12(sp)
 800f878:	df000304 	addi	fp,sp,12
 800f87c:	e13fff0d 	sth	r4,-4(fp)
    bool result = false;
 800f880:	e03ffe15 	stw	zero,-8(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 800f884:	800e41c0 	call	800e41c <alt_up_sd_card_is_Present>
 800f888:	1005003a 	cmpeq	r2,r2,zero
 800f88c:	1000641e 	bne	r2,zero,800fa20 <alt_up_sd_card_fclose+0x1b8>
 800f890:	d0a6c217 	ldw	r2,-25848(gp)
 800f894:	1005003a 	cmpeq	r2,r2,zero
 800f898:	1000611e 	bne	r2,zero,800fa20 <alt_up_sd_card_fclose+0x1b8>
    {
        if (active_files[file_handle].in_use) 
 800f89c:	e0bfff0f 	ldh	r2,-4(fp)
 800f8a0:	00c20074 	movhi	r3,2049
 800f8a4:	18d1e104 	addi	r3,r3,18308
 800f8a8:	100491ba 	slli	r2,r2,6
 800f8ac:	10c5883a 	add	r2,r2,r3
 800f8b0:	10800f04 	addi	r2,r2,60
 800f8b4:	10800017 	ldw	r2,0(r2)
 800f8b8:	1005003a 	cmpeq	r2,r2,zero
 800f8bc:	1000581e 	bne	r2,zero,800fa20 <alt_up_sd_card_fclose+0x1b8>
        {
			if (active_files[file_handle].modified)
 800f8c0:	e0bfff0f 	ldh	r2,-4(fp)
 800f8c4:	00c20074 	movhi	r3,2049
 800f8c8:	18d1e104 	addi	r3,r3,18308
 800f8cc:	100491ba 	slli	r2,r2,6
 800f8d0:	10c5883a 	add	r2,r2,r3
 800f8d4:	10800e04 	addi	r2,r2,56
 800f8d8:	10800017 	ldw	r2,0(r2)
 800f8dc:	1005003a 	cmpeq	r2,r2,zero
 800f8e0:	1000461e 	bne	r2,zero,800f9fc <alt_up_sd_card_fclose+0x194>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
 800f8e4:	e0bfff0f 	ldh	r2,-4(fp)
 800f8e8:	00c20074 	movhi	r3,2049
 800f8ec:	18d1e104 	addi	r3,r3,18308
 800f8f0:	100491ba 	slli	r2,r2,6
 800f8f4:	10c5883a 	add	r2,r2,r3
 800f8f8:	10800b04 	addi	r2,r2,44
 800f8fc:	10800017 	ldw	r2,0(r2)
 800f900:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
 800f904:	e0bfff0f 	ldh	r2,-4(fp)
 800f908:	00c20074 	movhi	r3,2049
 800f90c:	18d1e104 	addi	r3,r3,18308
 800f910:	100491ba 	slli	r2,r2,6
 800f914:	10c5883a 	add	r2,r2,r3
 800f918:	10800a04 	addi	r2,r2,40
 800f91c:	10800017 	ldw	r2,0(r2)
 800f920:	1004c03a 	cmpne	r2,r2,zero
 800f924:	1000071e 	bne	r2,zero,800f944 <alt_up_sd_card_fclose+0xdc>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
 800f928:	00820074 	movhi	r2,2049
 800f92c:	1091cc04 	addi	r2,r2,18224
 800f930:	10c01317 	ldw	r3,76(r2)
 800f934:	e0bffd17 	ldw	r2,-12(fp)
 800f938:	10c5883a 	add	r2,r2,r3
 800f93c:	e0bffd15 	stw	r2,-12(fp)
 800f940:	00001406 	br	800f994 <alt_up_sd_card_fclose+0x12c>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 800f944:	00820074 	movhi	r2,2049
 800f948:	1091cc04 	addi	r2,r2,18224
 800f94c:	10c01417 	ldw	r3,80(r2)
 800f950:	e0bffd17 	ldw	r2,-12(fp)
 800f954:	18a1883a 	add	r16,r3,r2
 800f958:	e0bfff0f 	ldh	r2,-4(fp)
 800f95c:	00c20074 	movhi	r3,2049
 800f960:	18d1e104 	addi	r3,r3,18308
 800f964:	100491ba 	slli	r2,r2,6
 800f968:	10c5883a 	add	r2,r2,r3
 800f96c:	10800a04 	addi	r2,r2,40
 800f970:	10800017 	ldw	r2,0(r2)
 800f974:	113fff84 	addi	r4,r2,-2
 800f978:	00820074 	movhi	r2,2049
 800f97c:	1091cc04 	addi	r2,r2,18224
 800f980:	10800383 	ldbu	r2,14(r2)
 800f984:	11403fcc 	andi	r5,r2,255
 800f988:	800988c0 	call	800988c <__mulsi3>
 800f98c:	8085883a 	add	r2,r16,r2
 800f990:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
 800f994:	e13ffd17 	ldw	r4,-12(fp)
 800f998:	d166c917 	ldw	r5,-25820(gp)
 800f99c:	800b70c0 	call	800b70c <Read_Sector_Data>
 800f9a0:	1005003a 	cmpeq	r2,r2,zero
 800f9a4:	1000151e 	bne	r2,zero,800f9fc <alt_up_sd_card_fclose+0x194>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
 800f9a8:	e0bfff0f 	ldh	r2,-4(fp)
 800f9ac:	00c20074 	movhi	r3,2049
 800f9b0:	18d1e104 	addi	r3,r3,18308
 800f9b4:	100491ba 	slli	r2,r2,6
 800f9b8:	10c5883a 	add	r2,r2,r3
 800f9bc:	10800c04 	addi	r2,r2,48
 800f9c0:	1080000b 	ldhu	r2,0(r2)
 800f9c4:	113fffcc 	andi	r4,r2,65535
 800f9c8:	2120001c 	xori	r4,r4,32768
 800f9cc:	21200004 	addi	r4,r4,-32768
 800f9d0:	e0bfff0f 	ldh	r2,-4(fp)
 800f9d4:	100491ba 	slli	r2,r2,6
 800f9d8:	1007883a 	mov	r3,r2
 800f9dc:	00820074 	movhi	r2,2049
 800f9e0:	1091e104 	addi	r2,r2,18308
 800f9e4:	188b883a 	add	r5,r3,r2
 800f9e8:	800bdd80 	call	800bdd8 <Write_File_Record_At_Offset>
 800f9ec:	1005003a 	cmpeq	r2,r2,zero
 800f9f0:	1000021e 	bne	r2,zero,800f9fc <alt_up_sd_card_fclose+0x194>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 800f9f4:	800b6bc0 	call	800b6bc <Save_Modified_Sector>
 800f9f8:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 800f9fc:	e0bfff0f 	ldh	r2,-4(fp)
 800fa00:	00c20074 	movhi	r3,2049
 800fa04:	18d1e104 	addi	r3,r3,18308
 800fa08:	100491ba 	slli	r2,r2,6
 800fa0c:	10c5883a 	add	r2,r2,r3
 800fa10:	10800f04 	addi	r2,r2,60
 800fa14:	10000015 	stw	zero,0(r2)
			result = true;
 800fa18:	00800044 	movi	r2,1
 800fa1c:	e0bffe15 	stw	r2,-8(fp)
        }
    }
    
    return result;
 800fa20:	e0bffe17 	ldw	r2,-8(fp)
}
 800fa24:	e037883a 	mov	sp,fp
 800fa28:	dfc00217 	ldw	ra,8(sp)
 800fa2c:	df000117 	ldw	fp,4(sp)
 800fa30:	dc000017 	ldw	r16,0(sp)
 800fa34:	dec00304 	addi	sp,sp,12
 800fa38:	f800283a 	ret

0800fa3c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800fa3c:	defff404 	addi	sp,sp,-48
 800fa40:	df000b15 	stw	fp,44(sp)
 800fa44:	df000b04 	addi	fp,sp,44
 800fa48:	e13ffb15 	stw	r4,-20(fp)
 800fa4c:	e17ffc15 	stw	r5,-16(fp)
 800fa50:	e1bffd15 	stw	r6,-12(fp)
 800fa54:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800fa58:	e03ff915 	stw	zero,-28(fp)
 800fa5c:	00820074 	movhi	r2,2049
 800fa60:	1091bb04 	addi	r2,r2,18156
 800fa64:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800fa68:	1005003a 	cmpeq	r2,r2,zero
 800fa6c:	1000411e 	bne	r2,zero,800fb74 <alt_alarm_start+0x138>
  {
    if (alarm)
 800fa70:	e0bffb17 	ldw	r2,-20(fp)
 800fa74:	1005003a 	cmpeq	r2,r2,zero
 800fa78:	10003b1e 	bne	r2,zero,800fb68 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 800fa7c:	e0fffb17 	ldw	r3,-20(fp)
 800fa80:	e0bffd17 	ldw	r2,-12(fp)
 800fa84:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 800fa88:	e0fffb17 	ldw	r3,-20(fp)
 800fa8c:	e0bffe17 	ldw	r2,-8(fp)
 800fa90:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fa94:	0005303a 	rdctl	r2,status
 800fa98:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fa9c:	e0fff817 	ldw	r3,-32(fp)
 800faa0:	00bfff84 	movi	r2,-2
 800faa4:	1884703a 	and	r2,r3,r2
 800faa8:	1001703a 	wrctl	status,r2
  
  return context;
 800faac:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800fab0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800fab4:	00820074 	movhi	r2,2049
 800fab8:	1091bc04 	addi	r2,r2,18160
 800fabc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800fac0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800fac4:	e0fffc17 	ldw	r3,-16(fp)
 800fac8:	e0bff917 	ldw	r2,-28(fp)
 800facc:	1885883a 	add	r2,r3,r2
 800fad0:	10c00044 	addi	r3,r2,1
 800fad4:	e0bffb17 	ldw	r2,-20(fp)
 800fad8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800fadc:	e0bffb17 	ldw	r2,-20(fp)
 800fae0:	10c00217 	ldw	r3,8(r2)
 800fae4:	e0bff917 	ldw	r2,-28(fp)
 800fae8:	1880042e 	bgeu	r3,r2,800fafc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 800faec:	e0fffb17 	ldw	r3,-20(fp)
 800faf0:	00800044 	movi	r2,1
 800faf4:	18800405 	stb	r2,16(r3)
 800faf8:	00000206 	br	800fb04 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 800fafc:	e0bffb17 	ldw	r2,-20(fp)
 800fb00:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800fb04:	e0fffb17 	ldw	r3,-20(fp)
 800fb08:	00820074 	movhi	r2,2049
 800fb0c:	108afa04 	addi	r2,r2,11240
 800fb10:	e0bff615 	stw	r2,-40(fp)
 800fb14:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800fb18:	e0fff717 	ldw	r3,-36(fp)
 800fb1c:	e0bff617 	ldw	r2,-40(fp)
 800fb20:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 800fb24:	e0bff617 	ldw	r2,-40(fp)
 800fb28:	10c00017 	ldw	r3,0(r2)
 800fb2c:	e0bff717 	ldw	r2,-36(fp)
 800fb30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800fb34:	e0bff617 	ldw	r2,-40(fp)
 800fb38:	10c00017 	ldw	r3,0(r2)
 800fb3c:	e0bff717 	ldw	r2,-36(fp)
 800fb40:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 800fb44:	e0fff617 	ldw	r3,-40(fp)
 800fb48:	e0bff717 	ldw	r2,-36(fp)
 800fb4c:	18800015 	stw	r2,0(r3)
 800fb50:	e0bffa17 	ldw	r2,-24(fp)
 800fb54:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fb58:	e0bff517 	ldw	r2,-44(fp)
 800fb5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800fb60:	e03fff15 	stw	zero,-4(fp)
 800fb64:	00000506 	br	800fb7c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 800fb68:	00bffa84 	movi	r2,-22
 800fb6c:	e0bfff15 	stw	r2,-4(fp)
 800fb70:	00000206 	br	800fb7c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 800fb74:	00bfde84 	movi	r2,-134
 800fb78:	e0bfff15 	stw	r2,-4(fp)
 800fb7c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 800fb80:	e037883a 	mov	sp,fp
 800fb84:	df000017 	ldw	fp,0(sp)
 800fb88:	dec00104 	addi	sp,sp,4
 800fb8c:	f800283a 	ret

0800fb90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800fb90:	deffff04 	addi	sp,sp,-4
 800fb94:	df000015 	stw	fp,0(sp)
 800fb98:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800fb9c:	e037883a 	mov	sp,fp
 800fba0:	df000017 	ldw	fp,0(sp)
 800fba4:	dec00104 	addi	sp,sp,4
 800fba8:	f800283a 	ret

0800fbac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800fbac:	defff904 	addi	sp,sp,-28
 800fbb0:	dfc00615 	stw	ra,24(sp)
 800fbb4:	df000515 	stw	fp,20(sp)
 800fbb8:	df000504 	addi	fp,sp,20
 800fbbc:	e13ffd15 	stw	r4,-12(fp)
 800fbc0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800fbc4:	e0bffd17 	ldw	r2,-12(fp)
 800fbc8:	1005003a 	cmpeq	r2,r2,zero
 800fbcc:	1000041e 	bne	r2,zero,800fbe0 <alt_dev_llist_insert+0x34>
 800fbd0:	e0bffd17 	ldw	r2,-12(fp)
 800fbd4:	10800217 	ldw	r2,8(r2)
 800fbd8:	1004c03a 	cmpne	r2,r2,zero
 800fbdc:	1000071e 	bne	r2,zero,800fbfc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 800fbe0:	800fc600 	call	800fc60 <alt_get_errno>
 800fbe4:	1007883a 	mov	r3,r2
 800fbe8:	00800584 	movi	r2,22
 800fbec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800fbf0:	00bffa84 	movi	r2,-22
 800fbf4:	e0bfff15 	stw	r2,-4(fp)
 800fbf8:	00001306 	br	800fc48 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800fbfc:	e0fffd17 	ldw	r3,-12(fp)
 800fc00:	e0bffe17 	ldw	r2,-8(fp)
 800fc04:	e0bffb15 	stw	r2,-20(fp)
 800fc08:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800fc0c:	e0fffc17 	ldw	r3,-16(fp)
 800fc10:	e0bffb17 	ldw	r2,-20(fp)
 800fc14:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 800fc18:	e0bffb17 	ldw	r2,-20(fp)
 800fc1c:	10c00017 	ldw	r3,0(r2)
 800fc20:	e0bffc17 	ldw	r2,-16(fp)
 800fc24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800fc28:	e0bffb17 	ldw	r2,-20(fp)
 800fc2c:	10c00017 	ldw	r3,0(r2)
 800fc30:	e0bffc17 	ldw	r2,-16(fp)
 800fc34:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 800fc38:	e0fffb17 	ldw	r3,-20(fp)
 800fc3c:	e0bffc17 	ldw	r2,-16(fp)
 800fc40:	18800015 	stw	r2,0(r3)

  return 0;  
 800fc44:	e03fff15 	stw	zero,-4(fp)
 800fc48:	e0bfff17 	ldw	r2,-4(fp)
}
 800fc4c:	e037883a 	mov	sp,fp
 800fc50:	dfc00117 	ldw	ra,4(sp)
 800fc54:	df000017 	ldw	fp,0(sp)
 800fc58:	dec00204 	addi	sp,sp,8
 800fc5c:	f800283a 	ret

0800fc60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fc60:	defffd04 	addi	sp,sp,-12
 800fc64:	dfc00215 	stw	ra,8(sp)
 800fc68:	df000115 	stw	fp,4(sp)
 800fc6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800fc70:	00820074 	movhi	r2,2049
 800fc74:	108af704 	addi	r2,r2,11228
 800fc78:	10800017 	ldw	r2,0(r2)
 800fc7c:	1005003a 	cmpeq	r2,r2,zero
 800fc80:	1000061e 	bne	r2,zero,800fc9c <alt_get_errno+0x3c>
 800fc84:	00820074 	movhi	r2,2049
 800fc88:	108af704 	addi	r2,r2,11228
 800fc8c:	10800017 	ldw	r2,0(r2)
 800fc90:	103ee83a 	callr	r2
 800fc94:	e0bfff15 	stw	r2,-4(fp)
 800fc98:	00000306 	br	800fca8 <alt_get_errno+0x48>
 800fc9c:	00820074 	movhi	r2,2049
 800fca0:	1091a604 	addi	r2,r2,18072
 800fca4:	e0bfff15 	stw	r2,-4(fp)
 800fca8:	e0bfff17 	ldw	r2,-4(fp)
}
 800fcac:	e037883a 	mov	sp,fp
 800fcb0:	dfc00117 	ldw	ra,4(sp)
 800fcb4:	df000017 	ldw	fp,0(sp)
 800fcb8:	dec00204 	addi	sp,sp,8
 800fcbc:	f800283a 	ret

0800fcc0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800fcc0:	defffd04 	addi	sp,sp,-12
 800fcc4:	dfc00215 	stw	ra,8(sp)
 800fcc8:	df000115 	stw	fp,4(sp)
 800fccc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800fcd0:	00bfff04 	movi	r2,-4
 800fcd4:	00c20074 	movhi	r3,2049
 800fcd8:	18c33e04 	addi	r3,r3,3320
 800fcdc:	1885883a 	add	r2,r3,r2
 800fce0:	e0bfff15 	stw	r2,-4(fp)
 800fce4:	00000606 	br	800fd00 <_do_ctors+0x40>
        (*ctor) (); 
 800fce8:	e0bfff17 	ldw	r2,-4(fp)
 800fcec:	10800017 	ldw	r2,0(r2)
 800fcf0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800fcf4:	e0bfff17 	ldw	r2,-4(fp)
 800fcf8:	10bfff04 	addi	r2,r2,-4
 800fcfc:	e0bfff15 	stw	r2,-4(fp)
 800fd00:	e0ffff17 	ldw	r3,-4(fp)
 800fd04:	00820074 	movhi	r2,2049
 800fd08:	10833d04 	addi	r2,r2,3316
 800fd0c:	18bff62e 	bgeu	r3,r2,800fce8 <_do_ctors+0x28>
        (*ctor) (); 
}
 800fd10:	e037883a 	mov	sp,fp
 800fd14:	dfc00117 	ldw	ra,4(sp)
 800fd18:	df000017 	ldw	fp,0(sp)
 800fd1c:	dec00204 	addi	sp,sp,8
 800fd20:	f800283a 	ret

0800fd24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800fd24:	defffd04 	addi	sp,sp,-12
 800fd28:	dfc00215 	stw	ra,8(sp)
 800fd2c:	df000115 	stw	fp,4(sp)
 800fd30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800fd34:	00bfff04 	movi	r2,-4
 800fd38:	00c20074 	movhi	r3,2049
 800fd3c:	18c33e04 	addi	r3,r3,3320
 800fd40:	1885883a 	add	r2,r3,r2
 800fd44:	e0bfff15 	stw	r2,-4(fp)
 800fd48:	00000606 	br	800fd64 <_do_dtors+0x40>
        (*dtor) (); 
 800fd4c:	e0bfff17 	ldw	r2,-4(fp)
 800fd50:	10800017 	ldw	r2,0(r2)
 800fd54:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800fd58:	e0bfff17 	ldw	r2,-4(fp)
 800fd5c:	10bfff04 	addi	r2,r2,-4
 800fd60:	e0bfff15 	stw	r2,-4(fp)
 800fd64:	e0ffff17 	ldw	r3,-4(fp)
 800fd68:	00820074 	movhi	r2,2049
 800fd6c:	10833e04 	addi	r2,r2,3320
 800fd70:	18bff62e 	bgeu	r3,r2,800fd4c <_do_dtors+0x28>
        (*dtor) (); 
}
 800fd74:	e037883a 	mov	sp,fp
 800fd78:	dfc00117 	ldw	ra,4(sp)
 800fd7c:	df000017 	ldw	fp,0(sp)
 800fd80:	dec00204 	addi	sp,sp,8
 800fd84:	f800283a 	ret

0800fd88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800fd88:	defff904 	addi	sp,sp,-28
 800fd8c:	dfc00615 	stw	ra,24(sp)
 800fd90:	df000515 	stw	fp,20(sp)
 800fd94:	df000504 	addi	fp,sp,20
 800fd98:	e13ffd15 	stw	r4,-12(fp)
 800fd9c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800fda0:	e0bffe17 	ldw	r2,-8(fp)
 800fda4:	10800017 	ldw	r2,0(r2)
 800fda8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800fdac:	e13ffd17 	ldw	r4,-12(fp)
 800fdb0:	8000dec0 	call	8000dec <strlen>
 800fdb4:	10800044 	addi	r2,r2,1
 800fdb8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800fdbc:	00000d06 	br	800fdf4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800fdc0:	e0bffc17 	ldw	r2,-16(fp)
 800fdc4:	11000217 	ldw	r4,8(r2)
 800fdc8:	e1bffb17 	ldw	r6,-20(fp)
 800fdcc:	e17ffd17 	ldw	r5,-12(fp)
 800fdd0:	80109380 	call	8010938 <memcmp>
 800fdd4:	1004c03a 	cmpne	r2,r2,zero
 800fdd8:	1000031e 	bne	r2,zero,800fde8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800fddc:	e0bffc17 	ldw	r2,-16(fp)
 800fde0:	e0bfff15 	stw	r2,-4(fp)
 800fde4:	00000706 	br	800fe04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800fde8:	e0bffc17 	ldw	r2,-16(fp)
 800fdec:	10800017 	ldw	r2,0(r2)
 800fdf0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800fdf4:	e0fffe17 	ldw	r3,-8(fp)
 800fdf8:	e0bffc17 	ldw	r2,-16(fp)
 800fdfc:	10fff01e 	bne	r2,r3,800fdc0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800fe00:	e03fff15 	stw	zero,-4(fp)
 800fe04:	e0bfff17 	ldw	r2,-4(fp)
}
 800fe08:	e037883a 	mov	sp,fp
 800fe0c:	dfc00117 	ldw	ra,4(sp)
 800fe10:	df000017 	ldw	fp,0(sp)
 800fe14:	dec00204 	addi	sp,sp,8
 800fe18:	f800283a 	ret

0800fe1c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800fe1c:	deffff04 	addi	sp,sp,-4
 800fe20:	df000015 	stw	fp,0(sp)
 800fe24:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800fe28:	e037883a 	mov	sp,fp
 800fe2c:	df000017 	ldw	fp,0(sp)
 800fe30:	dec00104 	addi	sp,sp,4
 800fe34:	f800283a 	ret

0800fe38 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800fe38:	defff904 	addi	sp,sp,-28
 800fe3c:	dfc00615 	stw	ra,24(sp)
 800fe40:	df000515 	stw	fp,20(sp)
 800fe44:	df000504 	addi	fp,sp,20
 800fe48:	e13ffc15 	stw	r4,-16(fp)
 800fe4c:	e17ffd15 	stw	r5,-12(fp)
 800fe50:	e1bffe15 	stw	r6,-8(fp)
 800fe54:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800fe58:	e0800217 	ldw	r2,8(fp)
 800fe5c:	d8800015 	stw	r2,0(sp)
 800fe60:	e13ffc17 	ldw	r4,-16(fp)
 800fe64:	e17ffd17 	ldw	r5,-12(fp)
 800fe68:	e1bffe17 	ldw	r6,-8(fp)
 800fe6c:	e1ffff17 	ldw	r7,-4(fp)
 800fe70:	801000c0 	call	801000c <alt_iic_isr_register>
}  
 800fe74:	e037883a 	mov	sp,fp
 800fe78:	dfc00117 	ldw	ra,4(sp)
 800fe7c:	df000017 	ldw	fp,0(sp)
 800fe80:	dec00204 	addi	sp,sp,8
 800fe84:	f800283a 	ret

0800fe88 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800fe88:	defff904 	addi	sp,sp,-28
 800fe8c:	df000615 	stw	fp,24(sp)
 800fe90:	df000604 	addi	fp,sp,24
 800fe94:	e13ffe15 	stw	r4,-8(fp)
 800fe98:	e17fff15 	stw	r5,-4(fp)
 800fe9c:	e0bfff17 	ldw	r2,-4(fp)
 800fea0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fea4:	0005303a 	rdctl	r2,status
 800fea8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800feac:	e0fffb17 	ldw	r3,-20(fp)
 800feb0:	00bfff84 	movi	r2,-2
 800feb4:	1884703a 	and	r2,r3,r2
 800feb8:	1001703a 	wrctl	status,r2
  
  return context;
 800febc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800fec0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 800fec4:	e0fffc17 	ldw	r3,-16(fp)
 800fec8:	00800044 	movi	r2,1
 800fecc:	10c4983a 	sll	r2,r2,r3
 800fed0:	1007883a 	mov	r3,r2
 800fed4:	00820074 	movhi	r2,2049
 800fed8:	1091ba04 	addi	r2,r2,18152
 800fedc:	10800017 	ldw	r2,0(r2)
 800fee0:	1886b03a 	or	r3,r3,r2
 800fee4:	00820074 	movhi	r2,2049
 800fee8:	1091ba04 	addi	r2,r2,18152
 800feec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800fef0:	00820074 	movhi	r2,2049
 800fef4:	1091ba04 	addi	r2,r2,18152
 800fef8:	10800017 	ldw	r2,0(r2)
 800fefc:	100170fa 	wrctl	ienable,r2
 800ff00:	e0bffd17 	ldw	r2,-12(fp)
 800ff04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ff08:	e0bffa17 	ldw	r2,-24(fp)
 800ff0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800ff10:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 800ff14:	e037883a 	mov	sp,fp
 800ff18:	df000017 	ldw	fp,0(sp)
 800ff1c:	dec00104 	addi	sp,sp,4
 800ff20:	f800283a 	ret

0800ff24 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800ff24:	defff904 	addi	sp,sp,-28
 800ff28:	df000615 	stw	fp,24(sp)
 800ff2c:	df000604 	addi	fp,sp,24
 800ff30:	e13ffe15 	stw	r4,-8(fp)
 800ff34:	e17fff15 	stw	r5,-4(fp)
 800ff38:	e0bfff17 	ldw	r2,-4(fp)
 800ff3c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ff40:	0005303a 	rdctl	r2,status
 800ff44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ff48:	e0fffb17 	ldw	r3,-20(fp)
 800ff4c:	00bfff84 	movi	r2,-2
 800ff50:	1884703a 	and	r2,r3,r2
 800ff54:	1001703a 	wrctl	status,r2
  
  return context;
 800ff58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800ff5c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 800ff60:	e0fffc17 	ldw	r3,-16(fp)
 800ff64:	00800044 	movi	r2,1
 800ff68:	10c4983a 	sll	r2,r2,r3
 800ff6c:	0084303a 	nor	r2,zero,r2
 800ff70:	1007883a 	mov	r3,r2
 800ff74:	00820074 	movhi	r2,2049
 800ff78:	1091ba04 	addi	r2,r2,18152
 800ff7c:	10800017 	ldw	r2,0(r2)
 800ff80:	1886703a 	and	r3,r3,r2
 800ff84:	00820074 	movhi	r2,2049
 800ff88:	1091ba04 	addi	r2,r2,18152
 800ff8c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800ff90:	00820074 	movhi	r2,2049
 800ff94:	1091ba04 	addi	r2,r2,18152
 800ff98:	10800017 	ldw	r2,0(r2)
 800ff9c:	100170fa 	wrctl	ienable,r2
 800ffa0:	e0bffd17 	ldw	r2,-12(fp)
 800ffa4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ffa8:	e0bffa17 	ldw	r2,-24(fp)
 800ffac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800ffb0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 800ffb4:	e037883a 	mov	sp,fp
 800ffb8:	df000017 	ldw	fp,0(sp)
 800ffbc:	dec00104 	addi	sp,sp,4
 800ffc0:	f800283a 	ret

0800ffc4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800ffc4:	defffc04 	addi	sp,sp,-16
 800ffc8:	df000315 	stw	fp,12(sp)
 800ffcc:	df000304 	addi	fp,sp,12
 800ffd0:	e13ffe15 	stw	r4,-8(fp)
 800ffd4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800ffd8:	000530fa 	rdctl	r2,ienable
 800ffdc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800ffe0:	e0ffff17 	ldw	r3,-4(fp)
 800ffe4:	00800044 	movi	r2,1
 800ffe8:	10c4983a 	sll	r2,r2,r3
 800ffec:	1007883a 	mov	r3,r2
 800fff0:	e0bffd17 	ldw	r2,-12(fp)
 800fff4:	1884703a 	and	r2,r3,r2
 800fff8:	1004c03a 	cmpne	r2,r2,zero
}
 800fffc:	e037883a 	mov	sp,fp
 8010000:	df000017 	ldw	fp,0(sp)
 8010004:	dec00104 	addi	sp,sp,4
 8010008:	f800283a 	ret

0801000c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801000c:	defff404 	addi	sp,sp,-48
 8010010:	dfc00b15 	stw	ra,44(sp)
 8010014:	df000a15 	stw	fp,40(sp)
 8010018:	df000a04 	addi	fp,sp,40
 801001c:	e13ffb15 	stw	r4,-20(fp)
 8010020:	e17ffc15 	stw	r5,-16(fp)
 8010024:	e1bffd15 	stw	r6,-12(fp)
 8010028:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 801002c:	00bffa84 	movi	r2,-22
 8010030:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010034:	e0bffc17 	ldw	r2,-16(fp)
 8010038:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801003c:	e0bff917 	ldw	r2,-28(fp)
 8010040:	10800808 	cmpgei	r2,r2,32
 8010044:	1000291e 	bne	r2,zero,80100ec <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010048:	0005303a 	rdctl	r2,status
 801004c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010050:	e0fff717 	ldw	r3,-36(fp)
 8010054:	00bfff84 	movi	r2,-2
 8010058:	1884703a 	and	r2,r3,r2
 801005c:	1001703a 	wrctl	status,r2
  
  return context;
 8010060:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010064:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8010068:	e0bff917 	ldw	r2,-28(fp)
 801006c:	00c20074 	movhi	r3,2049
 8010070:	18d32104 	addi	r3,r3,19588
 8010074:	100490fa 	slli	r2,r2,3
 8010078:	10c7883a 	add	r3,r2,r3
 801007c:	e0bffd17 	ldw	r2,-12(fp)
 8010080:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8010084:	e0bff917 	ldw	r2,-28(fp)
 8010088:	00c20074 	movhi	r3,2049
 801008c:	18d32104 	addi	r3,r3,19588
 8010090:	100490fa 	slli	r2,r2,3
 8010094:	10c5883a 	add	r2,r2,r3
 8010098:	10c00104 	addi	r3,r2,4
 801009c:	e0bffe17 	ldw	r2,-8(fp)
 80100a0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80100a4:	e0bffd17 	ldw	r2,-12(fp)
 80100a8:	1005003a 	cmpeq	r2,r2,zero
 80100ac:	1000051e 	bne	r2,zero,80100c4 <alt_iic_isr_register+0xb8>
 80100b0:	e17ff917 	ldw	r5,-28(fp)
 80100b4:	e13ffb17 	ldw	r4,-20(fp)
 80100b8:	800fe880 	call	800fe88 <alt_ic_irq_enable>
 80100bc:	e0bfff15 	stw	r2,-4(fp)
 80100c0:	00000406 	br	80100d4 <alt_iic_isr_register+0xc8>
 80100c4:	e17ff917 	ldw	r5,-28(fp)
 80100c8:	e13ffb17 	ldw	r4,-20(fp)
 80100cc:	800ff240 	call	800ff24 <alt_ic_irq_disable>
 80100d0:	e0bfff15 	stw	r2,-4(fp)
 80100d4:	e0bfff17 	ldw	r2,-4(fp)
 80100d8:	e0bffa15 	stw	r2,-24(fp)
 80100dc:	e0bff817 	ldw	r2,-32(fp)
 80100e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80100e4:	e0bff617 	ldw	r2,-40(fp)
 80100e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80100ec:	e0bffa17 	ldw	r2,-24(fp)
}
 80100f0:	e037883a 	mov	sp,fp
 80100f4:	dfc00117 	ldw	ra,4(sp)
 80100f8:	df000017 	ldw	fp,0(sp)
 80100fc:	dec00204 	addi	sp,sp,8
 8010100:	f800283a 	ret

08010104 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8010104:	defff804 	addi	sp,sp,-32
 8010108:	dfc00715 	stw	ra,28(sp)
 801010c:	df000615 	stw	fp,24(sp)
 8010110:	dc000515 	stw	r16,20(sp)
 8010114:	df000504 	addi	fp,sp,20
 8010118:	e13ffc15 	stw	r4,-16(fp)
 801011c:	e17ffd15 	stw	r5,-12(fp)
 8010120:	e1bffe15 	stw	r6,-8(fp)
 8010124:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8010128:	e13ffd17 	ldw	r4,-12(fp)
 801012c:	e17ffe17 	ldw	r5,-8(fp)
 8010130:	e1bfff17 	ldw	r6,-4(fp)
 8010134:	801034c0 	call	801034c <open>
 8010138:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 801013c:	e0bffb17 	ldw	r2,-20(fp)
 8010140:	1004803a 	cmplt	r2,r2,zero
 8010144:	10001f1e 	bne	r2,zero,80101c4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8010148:	e13ffb17 	ldw	r4,-20(fp)
 801014c:	04020074 	movhi	r16,2049
 8010150:	84066904 	addi	r16,r16,6564
 8010154:	01400304 	movi	r5,12
 8010158:	800988c0 	call	800988c <__mulsi3>
 801015c:	1405883a 	add	r2,r2,r16
 8010160:	10c00017 	ldw	r3,0(r2)
 8010164:	e0bffc17 	ldw	r2,-16(fp)
 8010168:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801016c:	e13ffb17 	ldw	r4,-20(fp)
 8010170:	04020074 	movhi	r16,2049
 8010174:	84066904 	addi	r16,r16,6564
 8010178:	01400304 	movi	r5,12
 801017c:	800988c0 	call	800988c <__mulsi3>
 8010180:	1405883a 	add	r2,r2,r16
 8010184:	10800104 	addi	r2,r2,4
 8010188:	10c00017 	ldw	r3,0(r2)
 801018c:	e0bffc17 	ldw	r2,-16(fp)
 8010190:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010194:	e13ffb17 	ldw	r4,-20(fp)
 8010198:	04020074 	movhi	r16,2049
 801019c:	84066904 	addi	r16,r16,6564
 80101a0:	01400304 	movi	r5,12
 80101a4:	800988c0 	call	800988c <__mulsi3>
 80101a8:	1405883a 	add	r2,r2,r16
 80101ac:	10800204 	addi	r2,r2,8
 80101b0:	10c00017 	ldw	r3,0(r2)
 80101b4:	e0bffc17 	ldw	r2,-16(fp)
 80101b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80101bc:	e13ffb17 	ldw	r4,-20(fp)
 80101c0:	800a7d40 	call	800a7d4 <alt_release_fd>
  }
} 
 80101c4:	e037883a 	mov	sp,fp
 80101c8:	dfc00217 	ldw	ra,8(sp)
 80101cc:	df000117 	ldw	fp,4(sp)
 80101d0:	dc000017 	ldw	r16,0(sp)
 80101d4:	dec00304 	addi	sp,sp,12
 80101d8:	f800283a 	ret

080101dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80101dc:	defffb04 	addi	sp,sp,-20
 80101e0:	dfc00415 	stw	ra,16(sp)
 80101e4:	df000315 	stw	fp,12(sp)
 80101e8:	df000304 	addi	fp,sp,12
 80101ec:	e13ffd15 	stw	r4,-12(fp)
 80101f0:	e17ffe15 	stw	r5,-8(fp)
 80101f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80101f8:	01020074 	movhi	r4,2049
 80101fc:	21066c04 	addi	r4,r4,6576
 8010200:	e17ffd17 	ldw	r5,-12(fp)
 8010204:	01800044 	movi	r6,1
 8010208:	01c07fc4 	movi	r7,511
 801020c:	80101040 	call	8010104 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8010210:	01020074 	movhi	r4,2049
 8010214:	21066904 	addi	r4,r4,6564
 8010218:	e17ffe17 	ldw	r5,-8(fp)
 801021c:	000d883a 	mov	r6,zero
 8010220:	01c07fc4 	movi	r7,511
 8010224:	80101040 	call	8010104 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8010228:	01020074 	movhi	r4,2049
 801022c:	21066f04 	addi	r4,r4,6588
 8010230:	e17fff17 	ldw	r5,-4(fp)
 8010234:	01800044 	movi	r6,1
 8010238:	01c07fc4 	movi	r7,511
 801023c:	80101040 	call	8010104 <alt_open_fd>
}  
 8010240:	e037883a 	mov	sp,fp
 8010244:	dfc00117 	ldw	ra,4(sp)
 8010248:	df000017 	ldw	fp,0(sp)
 801024c:	dec00204 	addi	sp,sp,8
 8010250:	f800283a 	ret

08010254 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8010254:	defffa04 	addi	sp,sp,-24
 8010258:	dfc00515 	stw	ra,20(sp)
 801025c:	df000415 	stw	fp,16(sp)
 8010260:	dc000315 	stw	r16,12(sp)
 8010264:	df000304 	addi	fp,sp,12
 8010268:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801026c:	e0bffe17 	ldw	r2,-8(fp)
 8010270:	10800217 	ldw	r2,8(r2)
 8010274:	10d00034 	orhi	r3,r2,16384
 8010278:	e0bffe17 	ldw	r2,-8(fp)
 801027c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010280:	e03ffd15 	stw	zero,-12(fp)
 8010284:	00002306 	br	8010314 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010288:	e13ffd17 	ldw	r4,-12(fp)
 801028c:	04020074 	movhi	r16,2049
 8010290:	84066904 	addi	r16,r16,6564
 8010294:	01400304 	movi	r5,12
 8010298:	800988c0 	call	800988c <__mulsi3>
 801029c:	1405883a 	add	r2,r2,r16
 80102a0:	10c00017 	ldw	r3,0(r2)
 80102a4:	e0bffe17 	ldw	r2,-8(fp)
 80102a8:	10800017 	ldw	r2,0(r2)
 80102ac:	1880161e 	bne	r3,r2,8010308 <alt_file_locked+0xb4>
 80102b0:	e13ffd17 	ldw	r4,-12(fp)
 80102b4:	04020074 	movhi	r16,2049
 80102b8:	84066904 	addi	r16,r16,6564
 80102bc:	01400304 	movi	r5,12
 80102c0:	800988c0 	call	800988c <__mulsi3>
 80102c4:	1405883a 	add	r2,r2,r16
 80102c8:	10800204 	addi	r2,r2,8
 80102cc:	10800017 	ldw	r2,0(r2)
 80102d0:	1004403a 	cmpge	r2,r2,zero
 80102d4:	10000c1e 	bne	r2,zero,8010308 <alt_file_locked+0xb4>
 80102d8:	e13ffd17 	ldw	r4,-12(fp)
 80102dc:	01400304 	movi	r5,12
 80102e0:	800988c0 	call	800988c <__mulsi3>
 80102e4:	1007883a 	mov	r3,r2
 80102e8:	00820074 	movhi	r2,2049
 80102ec:	10866904 	addi	r2,r2,6564
 80102f0:	1887883a 	add	r3,r3,r2
 80102f4:	e0bffe17 	ldw	r2,-8(fp)
 80102f8:	18800326 	beq	r3,r2,8010308 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80102fc:	00bffcc4 	movi	r2,-13
 8010300:	e0bfff15 	stw	r2,-4(fp)
 8010304:	00000a06 	br	8010330 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010308:	e0bffd17 	ldw	r2,-12(fp)
 801030c:	10800044 	addi	r2,r2,1
 8010310:	e0bffd15 	stw	r2,-12(fp)
 8010314:	00820074 	movhi	r2,2049
 8010318:	108af604 	addi	r2,r2,11224
 801031c:	10800017 	ldw	r2,0(r2)
 8010320:	1007883a 	mov	r3,r2
 8010324:	e0bffd17 	ldw	r2,-12(fp)
 8010328:	18bfd72e 	bgeu	r3,r2,8010288 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801032c:	e03fff15 	stw	zero,-4(fp)
 8010330:	e0bfff17 	ldw	r2,-4(fp)
}
 8010334:	e037883a 	mov	sp,fp
 8010338:	dfc00217 	ldw	ra,8(sp)
 801033c:	df000117 	ldw	fp,4(sp)
 8010340:	dc000017 	ldw	r16,0(sp)
 8010344:	dec00304 	addi	sp,sp,12
 8010348:	f800283a 	ret

0801034c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 801034c:	defff404 	addi	sp,sp,-48
 8010350:	dfc00b15 	stw	ra,44(sp)
 8010354:	df000a15 	stw	fp,40(sp)
 8010358:	df000a04 	addi	fp,sp,40
 801035c:	e13ffb15 	stw	r4,-20(fp)
 8010360:	e17ffc15 	stw	r5,-16(fp)
 8010364:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8010368:	00bfffc4 	movi	r2,-1
 801036c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8010370:	00bffb44 	movi	r2,-19
 8010374:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8010378:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 801037c:	e13ffb17 	ldw	r4,-20(fp)
 8010380:	01420074 	movhi	r5,2049
 8010384:	294af404 	addi	r5,r5,11216
 8010388:	800fd880 	call	800fd88 <alt_find_dev>
 801038c:	e0bffa15 	stw	r2,-24(fp)
 8010390:	e0bffa17 	ldw	r2,-24(fp)
 8010394:	1004c03a 	cmpne	r2,r2,zero
 8010398:	1000051e 	bne	r2,zero,80103b0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801039c:	e13ffb17 	ldw	r4,-20(fp)
 80103a0:	80106fc0 	call	80106fc <alt_find_file>
 80103a4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 80103a8:	00800044 	movi	r2,1
 80103ac:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80103b0:	e0bffa17 	ldw	r2,-24(fp)
 80103b4:	1005003a 	cmpeq	r2,r2,zero
 80103b8:	1000311e 	bne	r2,zero,8010480 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80103bc:	e13ffa17 	ldw	r4,-24(fp)
 80103c0:	801081c0 	call	801081c <alt_get_fd>
 80103c4:	e0bff815 	stw	r2,-32(fp)
 80103c8:	e0bff817 	ldw	r2,-32(fp)
 80103cc:	1004403a 	cmpge	r2,r2,zero
 80103d0:	1000031e 	bne	r2,zero,80103e0 <open+0x94>
    {
      status = index;
 80103d4:	e0bff817 	ldw	r2,-32(fp)
 80103d8:	e0bff715 	stw	r2,-36(fp)
 80103dc:	00002a06 	br	8010488 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 80103e0:	e13ff817 	ldw	r4,-32(fp)
 80103e4:	01400304 	movi	r5,12
 80103e8:	800988c0 	call	800988c <__mulsi3>
 80103ec:	1007883a 	mov	r3,r2
 80103f0:	00820074 	movhi	r2,2049
 80103f4:	10866904 	addi	r2,r2,6564
 80103f8:	1885883a 	add	r2,r3,r2
 80103fc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8010400:	e0fffc17 	ldw	r3,-16(fp)
 8010404:	00900034 	movhi	r2,16384
 8010408:	10bfffc4 	addi	r2,r2,-1
 801040c:	1886703a 	and	r3,r3,r2
 8010410:	e0bff917 	ldw	r2,-28(fp)
 8010414:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8010418:	e0bff617 	ldw	r2,-40(fp)
 801041c:	1004c03a 	cmpne	r2,r2,zero
 8010420:	1000061e 	bne	r2,zero,801043c <open+0xf0>
 8010424:	e13ff917 	ldw	r4,-28(fp)
 8010428:	80102540 	call	8010254 <alt_file_locked>
 801042c:	e0bff715 	stw	r2,-36(fp)
 8010430:	e0bff717 	ldw	r2,-36(fp)
 8010434:	1004803a 	cmplt	r2,r2,zero
 8010438:	1000131e 	bne	r2,zero,8010488 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 801043c:	e0bffa17 	ldw	r2,-24(fp)
 8010440:	10800317 	ldw	r2,12(r2)
 8010444:	1005003a 	cmpeq	r2,r2,zero
 8010448:	1000091e 	bne	r2,zero,8010470 <open+0x124>
 801044c:	e0bffa17 	ldw	r2,-24(fp)
 8010450:	10800317 	ldw	r2,12(r2)
 8010454:	e13ff917 	ldw	r4,-28(fp)
 8010458:	e17ffb17 	ldw	r5,-20(fp)
 801045c:	e1bffc17 	ldw	r6,-16(fp)
 8010460:	e1fffd17 	ldw	r7,-12(fp)
 8010464:	103ee83a 	callr	r2
 8010468:	e0bfff15 	stw	r2,-4(fp)
 801046c:	00000106 	br	8010474 <open+0x128>
 8010470:	e03fff15 	stw	zero,-4(fp)
 8010474:	e0bfff17 	ldw	r2,-4(fp)
 8010478:	e0bff715 	stw	r2,-36(fp)
 801047c:	00000206 	br	8010488 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8010480:	00bffb44 	movi	r2,-19
 8010484:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8010488:	e0bff717 	ldw	r2,-36(fp)
 801048c:	1004403a 	cmpge	r2,r2,zero
 8010490:	1000091e 	bne	r2,zero,80104b8 <open+0x16c>
  {
    alt_release_fd (index);  
 8010494:	e13ff817 	ldw	r4,-32(fp)
 8010498:	800a7d40 	call	800a7d4 <alt_release_fd>
    ALT_ERRNO = -status;
 801049c:	80104d80 	call	80104d8 <alt_get_errno>
 80104a0:	e0fff717 	ldw	r3,-36(fp)
 80104a4:	00c7c83a 	sub	r3,zero,r3
 80104a8:	10c00015 	stw	r3,0(r2)
    return -1;
 80104ac:	00bfffc4 	movi	r2,-1
 80104b0:	e0bffe15 	stw	r2,-8(fp)
 80104b4:	00000206 	br	80104c0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 80104b8:	e0bff817 	ldw	r2,-32(fp)
 80104bc:	e0bffe15 	stw	r2,-8(fp)
 80104c0:	e0bffe17 	ldw	r2,-8(fp)
}
 80104c4:	e037883a 	mov	sp,fp
 80104c8:	dfc00117 	ldw	ra,4(sp)
 80104cc:	df000017 	ldw	fp,0(sp)
 80104d0:	dec00204 	addi	sp,sp,8
 80104d4:	f800283a 	ret

080104d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80104d8:	defffd04 	addi	sp,sp,-12
 80104dc:	dfc00215 	stw	ra,8(sp)
 80104e0:	df000115 	stw	fp,4(sp)
 80104e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 80104e8:	00820074 	movhi	r2,2049
 80104ec:	108af704 	addi	r2,r2,11228
 80104f0:	10800017 	ldw	r2,0(r2)
 80104f4:	1005003a 	cmpeq	r2,r2,zero
 80104f8:	1000061e 	bne	r2,zero,8010514 <alt_get_errno+0x3c>
 80104fc:	00820074 	movhi	r2,2049
 8010500:	108af704 	addi	r2,r2,11228
 8010504:	10800017 	ldw	r2,0(r2)
 8010508:	103ee83a 	callr	r2
 801050c:	e0bfff15 	stw	r2,-4(fp)
 8010510:	00000306 	br	8010520 <alt_get_errno+0x48>
 8010514:	00820074 	movhi	r2,2049
 8010518:	1091a604 	addi	r2,r2,18072
 801051c:	e0bfff15 	stw	r2,-4(fp)
 8010520:	e0bfff17 	ldw	r2,-4(fp)
}
 8010524:	e037883a 	mov	sp,fp
 8010528:	dfc00117 	ldw	ra,4(sp)
 801052c:	df000017 	ldw	fp,0(sp)
 8010530:	dec00204 	addi	sp,sp,8
 8010534:	f800283a 	ret

08010538 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010538:	defffa04 	addi	sp,sp,-24
 801053c:	df000515 	stw	fp,20(sp)
 8010540:	df000504 	addi	fp,sp,20
 8010544:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010548:	0005303a 	rdctl	r2,status
 801054c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010550:	e0fffd17 	ldw	r3,-12(fp)
 8010554:	00bfff84 	movi	r2,-2
 8010558:	1884703a 	and	r2,r3,r2
 801055c:	1001703a 	wrctl	status,r2
  
  return context;
 8010560:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010564:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8010568:	e0bfff17 	ldw	r2,-4(fp)
 801056c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010570:	e0bffc17 	ldw	r2,-16(fp)
 8010574:	10c00017 	ldw	r3,0(r2)
 8010578:	e0bffc17 	ldw	r2,-16(fp)
 801057c:	10800117 	ldw	r2,4(r2)
 8010580:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8010584:	e0bffc17 	ldw	r2,-16(fp)
 8010588:	10c00117 	ldw	r3,4(r2)
 801058c:	e0bffc17 	ldw	r2,-16(fp)
 8010590:	10800017 	ldw	r2,0(r2)
 8010594:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010598:	e0fffc17 	ldw	r3,-16(fp)
 801059c:	e0bffc17 	ldw	r2,-16(fp)
 80105a0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 80105a4:	e0fffc17 	ldw	r3,-16(fp)
 80105a8:	e0bffc17 	ldw	r2,-16(fp)
 80105ac:	18800015 	stw	r2,0(r3)
 80105b0:	e0bffe17 	ldw	r2,-8(fp)
 80105b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80105b8:	e0bffb17 	ldw	r2,-20(fp)
 80105bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80105c0:	e037883a 	mov	sp,fp
 80105c4:	df000017 	ldw	fp,0(sp)
 80105c8:	dec00104 	addi	sp,sp,4
 80105cc:	f800283a 	ret

080105d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80105d0:	defffb04 	addi	sp,sp,-20
 80105d4:	dfc00415 	stw	ra,16(sp)
 80105d8:	df000315 	stw	fp,12(sp)
 80105dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80105e0:	d0a00e17 	ldw	r2,-32712(gp)
 80105e4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80105e8:	d0a6d017 	ldw	r2,-25792(gp)
 80105ec:	10800044 	addi	r2,r2,1
 80105f0:	d0a6d015 	stw	r2,-25792(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80105f4:	00003106 	br	80106bc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 80105f8:	e0bffe17 	ldw	r2,-8(fp)
 80105fc:	10800017 	ldw	r2,0(r2)
 8010600:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010604:	e0bffe17 	ldw	r2,-8(fp)
 8010608:	10800403 	ldbu	r2,16(r2)
 801060c:	10803fcc 	andi	r2,r2,255
 8010610:	1005003a 	cmpeq	r2,r2,zero
 8010614:	1000051e 	bne	r2,zero,801062c <alt_tick+0x5c>
 8010618:	d0a6d017 	ldw	r2,-25792(gp)
 801061c:	1004c03a 	cmpne	r2,r2,zero
 8010620:	1000021e 	bne	r2,zero,801062c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8010624:	e0bffe17 	ldw	r2,-8(fp)
 8010628:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801062c:	e0bffe17 	ldw	r2,-8(fp)
 8010630:	10c00217 	ldw	r3,8(r2)
 8010634:	d0a6d017 	ldw	r2,-25792(gp)
 8010638:	10c01e36 	bltu	r2,r3,80106b4 <alt_tick+0xe4>
 801063c:	e0bffe17 	ldw	r2,-8(fp)
 8010640:	10800403 	ldbu	r2,16(r2)
 8010644:	10803fcc 	andi	r2,r2,255
 8010648:	1004c03a 	cmpne	r2,r2,zero
 801064c:	1000191e 	bne	r2,zero,80106b4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 8010650:	e0bffe17 	ldw	r2,-8(fp)
 8010654:	10c00317 	ldw	r3,12(r2)
 8010658:	e0bffe17 	ldw	r2,-8(fp)
 801065c:	11000517 	ldw	r4,20(r2)
 8010660:	183ee83a 	callr	r3
 8010664:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010668:	e0bffd17 	ldw	r2,-12(fp)
 801066c:	1004c03a 	cmpne	r2,r2,zero
 8010670:	1000031e 	bne	r2,zero,8010680 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 8010674:	e13ffe17 	ldw	r4,-8(fp)
 8010678:	80105380 	call	8010538 <alt_alarm_stop>
 801067c:	00000d06 	br	80106b4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 8010680:	e0bffe17 	ldw	r2,-8(fp)
 8010684:	10c00217 	ldw	r3,8(r2)
 8010688:	e0bffd17 	ldw	r2,-12(fp)
 801068c:	1887883a 	add	r3,r3,r2
 8010690:	e0bffe17 	ldw	r2,-8(fp)
 8010694:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010698:	e0bffe17 	ldw	r2,-8(fp)
 801069c:	10c00217 	ldw	r3,8(r2)
 80106a0:	d0a6d017 	ldw	r2,-25792(gp)
 80106a4:	1880032e 	bgeu	r3,r2,80106b4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 80106a8:	e0fffe17 	ldw	r3,-8(fp)
 80106ac:	00800044 	movi	r2,1
 80106b0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 80106b4:	e0bfff17 	ldw	r2,-4(fp)
 80106b8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80106bc:	d0e00e04 	addi	r3,gp,-32712
 80106c0:	e0bffe17 	ldw	r2,-8(fp)
 80106c4:	10ffcc1e 	bne	r2,r3,80105f8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 80106c8:	e037883a 	mov	sp,fp
 80106cc:	dfc00117 	ldw	ra,4(sp)
 80106d0:	df000017 	ldw	fp,0(sp)
 80106d4:	dec00204 	addi	sp,sp,8
 80106d8:	f800283a 	ret

080106dc <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 80106dc:	deffff04 	addi	sp,sp,-4
 80106e0:	df000015 	stw	fp,0(sp)
 80106e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80106e8:	000170fa 	wrctl	ienable,zero
}
 80106ec:	e037883a 	mov	sp,fp
 80106f0:	df000017 	ldw	fp,0(sp)
 80106f4:	dec00104 	addi	sp,sp,4
 80106f8:	f800283a 	ret

080106fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80106fc:	defffa04 	addi	sp,sp,-24
 8010700:	dfc00515 	stw	ra,20(sp)
 8010704:	df000415 	stw	fp,16(sp)
 8010708:	df000404 	addi	fp,sp,16
 801070c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8010710:	00820074 	movhi	r2,2049
 8010714:	108af204 	addi	r2,r2,11208
 8010718:	10800017 	ldw	r2,0(r2)
 801071c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010720:	00003306 	br	80107f0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 8010724:	e0bffd17 	ldw	r2,-12(fp)
 8010728:	11000217 	ldw	r4,8(r2)
 801072c:	8000dec0 	call	8000dec <strlen>
 8010730:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 8010734:	e0bffd17 	ldw	r2,-12(fp)
 8010738:	10c00217 	ldw	r3,8(r2)
 801073c:	e0bffc17 	ldw	r2,-16(fp)
 8010740:	1885883a 	add	r2,r3,r2
 8010744:	10bfffc4 	addi	r2,r2,-1
 8010748:	10800003 	ldbu	r2,0(r2)
 801074c:	10803fcc 	andi	r2,r2,255
 8010750:	1080201c 	xori	r2,r2,128
 8010754:	10bfe004 	addi	r2,r2,-128
 8010758:	10800bd8 	cmpnei	r2,r2,47
 801075c:	1000031e 	bne	r2,zero,801076c <alt_find_file+0x70>
    {
      len -= 1;
 8010760:	e0bffc17 	ldw	r2,-16(fp)
 8010764:	10bfffc4 	addi	r2,r2,-1
 8010768:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801076c:	e0bffc17 	ldw	r2,-16(fp)
 8010770:	1007883a 	mov	r3,r2
 8010774:	e0bffe17 	ldw	r2,-8(fp)
 8010778:	1885883a 	add	r2,r3,r2
 801077c:	10800003 	ldbu	r2,0(r2)
 8010780:	10803fcc 	andi	r2,r2,255
 8010784:	1080201c 	xori	r2,r2,128
 8010788:	10bfe004 	addi	r2,r2,-128
 801078c:	10800be0 	cmpeqi	r2,r2,47
 8010790:	10000a1e 	bne	r2,zero,80107bc <alt_find_file+0xc0>
 8010794:	e0bffc17 	ldw	r2,-16(fp)
 8010798:	1007883a 	mov	r3,r2
 801079c:	e0bffe17 	ldw	r2,-8(fp)
 80107a0:	1885883a 	add	r2,r3,r2
 80107a4:	10800003 	ldbu	r2,0(r2)
 80107a8:	10803fcc 	andi	r2,r2,255
 80107ac:	1080201c 	xori	r2,r2,128
 80107b0:	10bfe004 	addi	r2,r2,-128
 80107b4:	1004c03a 	cmpne	r2,r2,zero
 80107b8:	10000a1e 	bne	r2,zero,80107e4 <alt_find_file+0xe8>
 80107bc:	e0bffd17 	ldw	r2,-12(fp)
 80107c0:	11000217 	ldw	r4,8(r2)
 80107c4:	e1bffc17 	ldw	r6,-16(fp)
 80107c8:	e17ffe17 	ldw	r5,-8(fp)
 80107cc:	80109380 	call	8010938 <memcmp>
 80107d0:	1004c03a 	cmpne	r2,r2,zero
 80107d4:	1000031e 	bne	r2,zero,80107e4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80107d8:	e0bffd17 	ldw	r2,-12(fp)
 80107dc:	e0bfff15 	stw	r2,-4(fp)
 80107e0:	00000806 	br	8010804 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 80107e4:	e0bffd17 	ldw	r2,-12(fp)
 80107e8:	10800017 	ldw	r2,0(r2)
 80107ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80107f0:	00c20074 	movhi	r3,2049
 80107f4:	18caf204 	addi	r3,r3,11208
 80107f8:	e0bffd17 	ldw	r2,-12(fp)
 80107fc:	10ffc91e 	bne	r2,r3,8010724 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8010800:	e03fff15 	stw	zero,-4(fp)
 8010804:	e0bfff17 	ldw	r2,-4(fp)
}
 8010808:	e037883a 	mov	sp,fp
 801080c:	dfc00117 	ldw	ra,4(sp)
 8010810:	df000017 	ldw	fp,0(sp)
 8010814:	dec00204 	addi	sp,sp,8
 8010818:	f800283a 	ret

0801081c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801081c:	defffa04 	addi	sp,sp,-24
 8010820:	dfc00515 	stw	ra,20(sp)
 8010824:	df000415 	stw	fp,16(sp)
 8010828:	dc000315 	stw	r16,12(sp)
 801082c:	df000304 	addi	fp,sp,12
 8010830:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8010834:	00bffa04 	movi	r2,-24
 8010838:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801083c:	e03ffe15 	stw	zero,-8(fp)
 8010840:	00002006 	br	80108c4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 8010844:	e13ffe17 	ldw	r4,-8(fp)
 8010848:	04020074 	movhi	r16,2049
 801084c:	84066904 	addi	r16,r16,6564
 8010850:	01400304 	movi	r5,12
 8010854:	800988c0 	call	800988c <__mulsi3>
 8010858:	1405883a 	add	r2,r2,r16
 801085c:	10800017 	ldw	r2,0(r2)
 8010860:	1004c03a 	cmpne	r2,r2,zero
 8010864:	1000141e 	bne	r2,zero,80108b8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 8010868:	e13ffe17 	ldw	r4,-8(fp)
 801086c:	04020074 	movhi	r16,2049
 8010870:	84066904 	addi	r16,r16,6564
 8010874:	01400304 	movi	r5,12
 8010878:	800988c0 	call	800988c <__mulsi3>
 801087c:	1407883a 	add	r3,r2,r16
 8010880:	e0bfff17 	ldw	r2,-4(fp)
 8010884:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 8010888:	00820074 	movhi	r2,2049
 801088c:	108af604 	addi	r2,r2,11224
 8010890:	10c00017 	ldw	r3,0(r2)
 8010894:	e0bffe17 	ldw	r2,-8(fp)
 8010898:	1880040e 	bge	r3,r2,80108ac <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 801089c:	00c20074 	movhi	r3,2049
 80108a0:	18caf604 	addi	r3,r3,11224
 80108a4:	e0bffe17 	ldw	r2,-8(fp)
 80108a8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 80108ac:	e0bffe17 	ldw	r2,-8(fp)
 80108b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 80108b4:	00000606 	br	80108d0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80108b8:	e0bffe17 	ldw	r2,-8(fp)
 80108bc:	10800044 	addi	r2,r2,1
 80108c0:	e0bffe15 	stw	r2,-8(fp)
 80108c4:	e0bffe17 	ldw	r2,-8(fp)
 80108c8:	10800810 	cmplti	r2,r2,32
 80108cc:	103fdd1e 	bne	r2,zero,8010844 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80108d0:	e0bffd17 	ldw	r2,-12(fp)
}
 80108d4:	e037883a 	mov	sp,fp
 80108d8:	dfc00217 	ldw	ra,8(sp)
 80108dc:	df000117 	ldw	fp,4(sp)
 80108e0:	dc000017 	ldw	r16,0(sp)
 80108e4:	dec00304 	addi	sp,sp,12
 80108e8:	f800283a 	ret

080108ec <atexit>:
 80108ec:	200b883a 	mov	r5,r4
 80108f0:	000d883a 	mov	r6,zero
 80108f4:	0009883a 	mov	r4,zero
 80108f8:	000f883a 	mov	r7,zero
 80108fc:	80109ac1 	jmpi	80109ac <__register_exitproc>

08010900 <exit>:
 8010900:	defffe04 	addi	sp,sp,-8
 8010904:	000b883a 	mov	r5,zero
 8010908:	dc000015 	stw	r16,0(sp)
 801090c:	dfc00115 	stw	ra,4(sp)
 8010910:	2021883a 	mov	r16,r4
 8010914:	8010ae40 	call	8010ae4 <__call_exitprocs>
 8010918:	00820074 	movhi	r2,2049
 801091c:	108aef04 	addi	r2,r2,11196
 8010920:	11000017 	ldw	r4,0(r2)
 8010924:	20800f17 	ldw	r2,60(r4)
 8010928:	10000126 	beq	r2,zero,8010930 <exit+0x30>
 801092c:	103ee83a 	callr	r2
 8010930:	8009883a 	mov	r4,r16
 8010934:	8010cd40 	call	8010cd4 <_exit>

08010938 <memcmp>:
 8010938:	00c000c4 	movi	r3,3
 801093c:	1980032e 	bgeu	r3,r6,801094c <memcmp+0x14>
 8010940:	2144b03a 	or	r2,r4,r5
 8010944:	10c4703a 	and	r2,r2,r3
 8010948:	10000f26 	beq	r2,zero,8010988 <memcmp+0x50>
 801094c:	31ffffc4 	addi	r7,r6,-1
 8010950:	3000061e 	bne	r6,zero,801096c <memcmp+0x34>
 8010954:	00000a06 	br	8010980 <memcmp+0x48>
 8010958:	39ffffc4 	addi	r7,r7,-1
 801095c:	00bfffc4 	movi	r2,-1
 8010960:	21000044 	addi	r4,r4,1
 8010964:	29400044 	addi	r5,r5,1
 8010968:	38800526 	beq	r7,r2,8010980 <memcmp+0x48>
 801096c:	20c00003 	ldbu	r3,0(r4)
 8010970:	28800003 	ldbu	r2,0(r5)
 8010974:	18bff826 	beq	r3,r2,8010958 <memcmp+0x20>
 8010978:	1885c83a 	sub	r2,r3,r2
 801097c:	f800283a 	ret
 8010980:	0005883a 	mov	r2,zero
 8010984:	f800283a 	ret
 8010988:	180f883a 	mov	r7,r3
 801098c:	20c00017 	ldw	r3,0(r4)
 8010990:	28800017 	ldw	r2,0(r5)
 8010994:	18bfed1e 	bne	r3,r2,801094c <memcmp+0x14>
 8010998:	31bfff04 	addi	r6,r6,-4
 801099c:	21000104 	addi	r4,r4,4
 80109a0:	29400104 	addi	r5,r5,4
 80109a4:	39bff936 	bltu	r7,r6,801098c <memcmp+0x54>
 80109a8:	003fe806 	br	801094c <memcmp+0x14>

080109ac <__register_exitproc>:
 80109ac:	defffa04 	addi	sp,sp,-24
 80109b0:	00820074 	movhi	r2,2049
 80109b4:	108aef04 	addi	r2,r2,11196
 80109b8:	dc000015 	stw	r16,0(sp)
 80109bc:	14000017 	ldw	r16,0(r2)
 80109c0:	dd000415 	stw	r20,16(sp)
 80109c4:	2829883a 	mov	r20,r5
 80109c8:	81405217 	ldw	r5,328(r16)
 80109cc:	dcc00315 	stw	r19,12(sp)
 80109d0:	dc800215 	stw	r18,8(sp)
 80109d4:	dc400115 	stw	r17,4(sp)
 80109d8:	dfc00515 	stw	ra,20(sp)
 80109dc:	2023883a 	mov	r17,r4
 80109e0:	3027883a 	mov	r19,r6
 80109e4:	3825883a 	mov	r18,r7
 80109e8:	28002526 	beq	r5,zero,8010a80 <__register_exitproc+0xd4>
 80109ec:	29000117 	ldw	r4,4(r5)
 80109f0:	008007c4 	movi	r2,31
 80109f4:	11002716 	blt	r2,r4,8010a94 <__register_exitproc+0xe8>
 80109f8:	8800101e 	bne	r17,zero,8010a3c <__register_exitproc+0x90>
 80109fc:	2105883a 	add	r2,r4,r4
 8010a00:	1085883a 	add	r2,r2,r2
 8010a04:	20c00044 	addi	r3,r4,1
 8010a08:	1145883a 	add	r2,r2,r5
 8010a0c:	0009883a 	mov	r4,zero
 8010a10:	15000215 	stw	r20,8(r2)
 8010a14:	28c00115 	stw	r3,4(r5)
 8010a18:	2005883a 	mov	r2,r4
 8010a1c:	dfc00517 	ldw	ra,20(sp)
 8010a20:	dd000417 	ldw	r20,16(sp)
 8010a24:	dcc00317 	ldw	r19,12(sp)
 8010a28:	dc800217 	ldw	r18,8(sp)
 8010a2c:	dc400117 	ldw	r17,4(sp)
 8010a30:	dc000017 	ldw	r16,0(sp)
 8010a34:	dec00604 	addi	sp,sp,24
 8010a38:	f800283a 	ret
 8010a3c:	29802204 	addi	r6,r5,136
 8010a40:	00800044 	movi	r2,1
 8010a44:	110e983a 	sll	r7,r2,r4
 8010a48:	30c04017 	ldw	r3,256(r6)
 8010a4c:	2105883a 	add	r2,r4,r4
 8010a50:	1085883a 	add	r2,r2,r2
 8010a54:	1185883a 	add	r2,r2,r6
 8010a58:	19c6b03a 	or	r3,r3,r7
 8010a5c:	14802015 	stw	r18,128(r2)
 8010a60:	14c00015 	stw	r19,0(r2)
 8010a64:	00800084 	movi	r2,2
 8010a68:	30c04015 	stw	r3,256(r6)
 8010a6c:	88bfe31e 	bne	r17,r2,80109fc <__register_exitproc+0x50>
 8010a70:	30804117 	ldw	r2,260(r6)
 8010a74:	11c4b03a 	or	r2,r2,r7
 8010a78:	30804115 	stw	r2,260(r6)
 8010a7c:	003fdf06 	br	80109fc <__register_exitproc+0x50>
 8010a80:	00820074 	movhi	r2,2049
 8010a84:	10936104 	addi	r2,r2,19844
 8010a88:	100b883a 	mov	r5,r2
 8010a8c:	80805215 	stw	r2,328(r16)
 8010a90:	003fd606 	br	80109ec <__register_exitproc+0x40>
 8010a94:	00820034 	movhi	r2,2048
 8010a98:	10813f04 	addi	r2,r2,1276
 8010a9c:	1000021e 	bne	r2,zero,8010aa8 <__register_exitproc+0xfc>
 8010aa0:	013fffc4 	movi	r4,-1
 8010aa4:	003fdc06 	br	8010a18 <__register_exitproc+0x6c>
 8010aa8:	01006404 	movi	r4,400
 8010aac:	103ee83a 	callr	r2
 8010ab0:	1007883a 	mov	r3,r2
 8010ab4:	103ffa26 	beq	r2,zero,8010aa0 <__register_exitproc+0xf4>
 8010ab8:	80805217 	ldw	r2,328(r16)
 8010abc:	180b883a 	mov	r5,r3
 8010ac0:	18000115 	stw	zero,4(r3)
 8010ac4:	18800015 	stw	r2,0(r3)
 8010ac8:	80c05215 	stw	r3,328(r16)
 8010acc:	18006215 	stw	zero,392(r3)
 8010ad0:	18006315 	stw	zero,396(r3)
 8010ad4:	0009883a 	mov	r4,zero
 8010ad8:	883fc826 	beq	r17,zero,80109fc <__register_exitproc+0x50>
 8010adc:	003fd706 	br	8010a3c <__register_exitproc+0x90>

08010ae0 <register_fini>:
 8010ae0:	f800283a 	ret

08010ae4 <__call_exitprocs>:
 8010ae4:	00820074 	movhi	r2,2049
 8010ae8:	108aef04 	addi	r2,r2,11196
 8010aec:	10800017 	ldw	r2,0(r2)
 8010af0:	defff304 	addi	sp,sp,-52
 8010af4:	df000b15 	stw	fp,44(sp)
 8010af8:	d8800115 	stw	r2,4(sp)
 8010afc:	00820034 	movhi	r2,2048
 8010b00:	10813a04 	addi	r2,r2,1256
 8010b04:	1005003a 	cmpeq	r2,r2,zero
 8010b08:	d8800215 	stw	r2,8(sp)
 8010b0c:	d8800117 	ldw	r2,4(sp)
 8010b10:	dd400815 	stw	r21,32(sp)
 8010b14:	dd000715 	stw	r20,28(sp)
 8010b18:	10805204 	addi	r2,r2,328
 8010b1c:	dfc00c15 	stw	ra,48(sp)
 8010b20:	ddc00a15 	stw	r23,40(sp)
 8010b24:	dd800915 	stw	r22,36(sp)
 8010b28:	dcc00615 	stw	r19,24(sp)
 8010b2c:	dc800515 	stw	r18,20(sp)
 8010b30:	dc400415 	stw	r17,16(sp)
 8010b34:	dc000315 	stw	r16,12(sp)
 8010b38:	282b883a 	mov	r21,r5
 8010b3c:	2039883a 	mov	fp,r4
 8010b40:	d8800015 	stw	r2,0(sp)
 8010b44:	2829003a 	cmpeq	r20,r5,zero
 8010b48:	d8800117 	ldw	r2,4(sp)
 8010b4c:	14405217 	ldw	r17,328(r2)
 8010b50:	88001026 	beq	r17,zero,8010b94 <__call_exitprocs+0xb0>
 8010b54:	ddc00017 	ldw	r23,0(sp)
 8010b58:	88800117 	ldw	r2,4(r17)
 8010b5c:	8c802204 	addi	r18,r17,136
 8010b60:	143fffc4 	addi	r16,r2,-1
 8010b64:	80000916 	blt	r16,zero,8010b8c <__call_exitprocs+0xa8>
 8010b68:	05bfffc4 	movi	r22,-1
 8010b6c:	a000151e 	bne	r20,zero,8010bc4 <__call_exitprocs+0xe0>
 8010b70:	8409883a 	add	r4,r16,r16
 8010b74:	2105883a 	add	r2,r4,r4
 8010b78:	1485883a 	add	r2,r2,r18
 8010b7c:	10c02017 	ldw	r3,128(r2)
 8010b80:	a8c01126 	beq	r21,r3,8010bc8 <__call_exitprocs+0xe4>
 8010b84:	843fffc4 	addi	r16,r16,-1
 8010b88:	85bff81e 	bne	r16,r22,8010b6c <__call_exitprocs+0x88>
 8010b8c:	d8800217 	ldw	r2,8(sp)
 8010b90:	10003126 	beq	r2,zero,8010c58 <__call_exitprocs+0x174>
 8010b94:	dfc00c17 	ldw	ra,48(sp)
 8010b98:	df000b17 	ldw	fp,44(sp)
 8010b9c:	ddc00a17 	ldw	r23,40(sp)
 8010ba0:	dd800917 	ldw	r22,36(sp)
 8010ba4:	dd400817 	ldw	r21,32(sp)
 8010ba8:	dd000717 	ldw	r20,28(sp)
 8010bac:	dcc00617 	ldw	r19,24(sp)
 8010bb0:	dc800517 	ldw	r18,20(sp)
 8010bb4:	dc400417 	ldw	r17,16(sp)
 8010bb8:	dc000317 	ldw	r16,12(sp)
 8010bbc:	dec00d04 	addi	sp,sp,52
 8010bc0:	f800283a 	ret
 8010bc4:	8409883a 	add	r4,r16,r16
 8010bc8:	88c00117 	ldw	r3,4(r17)
 8010bcc:	2105883a 	add	r2,r4,r4
 8010bd0:	1445883a 	add	r2,r2,r17
 8010bd4:	18ffffc4 	addi	r3,r3,-1
 8010bd8:	11800217 	ldw	r6,8(r2)
 8010bdc:	1c001526 	beq	r3,r16,8010c34 <__call_exitprocs+0x150>
 8010be0:	10000215 	stw	zero,8(r2)
 8010be4:	303fe726 	beq	r6,zero,8010b84 <__call_exitprocs+0xa0>
 8010be8:	00c00044 	movi	r3,1
 8010bec:	1c06983a 	sll	r3,r3,r16
 8010bf0:	90804017 	ldw	r2,256(r18)
 8010bf4:	8cc00117 	ldw	r19,4(r17)
 8010bf8:	1884703a 	and	r2,r3,r2
 8010bfc:	10001426 	beq	r2,zero,8010c50 <__call_exitprocs+0x16c>
 8010c00:	90804117 	ldw	r2,260(r18)
 8010c04:	1884703a 	and	r2,r3,r2
 8010c08:	10000c1e 	bne	r2,zero,8010c3c <__call_exitprocs+0x158>
 8010c0c:	2105883a 	add	r2,r4,r4
 8010c10:	1485883a 	add	r2,r2,r18
 8010c14:	11400017 	ldw	r5,0(r2)
 8010c18:	e009883a 	mov	r4,fp
 8010c1c:	303ee83a 	callr	r6
 8010c20:	88800117 	ldw	r2,4(r17)
 8010c24:	98bfc81e 	bne	r19,r2,8010b48 <__call_exitprocs+0x64>
 8010c28:	b8800017 	ldw	r2,0(r23)
 8010c2c:	147fd526 	beq	r2,r17,8010b84 <__call_exitprocs+0xa0>
 8010c30:	003fc506 	br	8010b48 <__call_exitprocs+0x64>
 8010c34:	8c000115 	stw	r16,4(r17)
 8010c38:	003fea06 	br	8010be4 <__call_exitprocs+0x100>
 8010c3c:	2105883a 	add	r2,r4,r4
 8010c40:	1485883a 	add	r2,r2,r18
 8010c44:	11000017 	ldw	r4,0(r2)
 8010c48:	303ee83a 	callr	r6
 8010c4c:	003ff406 	br	8010c20 <__call_exitprocs+0x13c>
 8010c50:	303ee83a 	callr	r6
 8010c54:	003ff206 	br	8010c20 <__call_exitprocs+0x13c>
 8010c58:	88800117 	ldw	r2,4(r17)
 8010c5c:	1000081e 	bne	r2,zero,8010c80 <__call_exitprocs+0x19c>
 8010c60:	89000017 	ldw	r4,0(r17)
 8010c64:	20000726 	beq	r4,zero,8010c84 <__call_exitprocs+0x1a0>
 8010c68:	b9000015 	stw	r4,0(r23)
 8010c6c:	8809883a 	mov	r4,r17
 8010c70:	80004e80 	call	80004e8 <free>
 8010c74:	bc400017 	ldw	r17,0(r23)
 8010c78:	883fb71e 	bne	r17,zero,8010b58 <__call_exitprocs+0x74>
 8010c7c:	003fc506 	br	8010b94 <__call_exitprocs+0xb0>
 8010c80:	89000017 	ldw	r4,0(r17)
 8010c84:	882f883a 	mov	r23,r17
 8010c88:	2023883a 	mov	r17,r4
 8010c8c:	883fb21e 	bne	r17,zero,8010b58 <__call_exitprocs+0x74>
 8010c90:	003fc006 	br	8010b94 <__call_exitprocs+0xb0>

08010c94 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 8010c94:	defffd04 	addi	sp,sp,-12
 8010c98:	df000215 	stw	fp,8(sp)
 8010c9c:	df000204 	addi	fp,sp,8
 8010ca0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 8010ca4:	e0bfff17 	ldw	r2,-4(fp)
 8010ca8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8010cac:	e0bffe17 	ldw	r2,-8(fp)
 8010cb0:	1005003a 	cmpeq	r2,r2,zero
 8010cb4:	1000021e 	bne	r2,zero,8010cc0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 8010cb8:	002af070 	cmpltui	zero,zero,43969
 8010cbc:	00000106 	br	8010cc4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 8010cc0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 8010cc4:	e037883a 	mov	sp,fp
 8010cc8:	df000017 	ldw	fp,0(sp)
 8010ccc:	dec00104 	addi	sp,sp,4
 8010cd0:	f800283a 	ret

08010cd4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8010cd4:	defffd04 	addi	sp,sp,-12
 8010cd8:	dfc00215 	stw	ra,8(sp)
 8010cdc:	df000115 	stw	fp,4(sp)
 8010ce0:	df000104 	addi	fp,sp,4
 8010ce4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 8010ce8:	e13fff17 	ldw	r4,-4(fp)
 8010cec:	8010c940 	call	8010c94 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8010cf0:	003fff06 	br	8010cf0 <_exit+0x1c>
 8010cf4:	08010ae0 	cmpeqi	zero,at,1067
