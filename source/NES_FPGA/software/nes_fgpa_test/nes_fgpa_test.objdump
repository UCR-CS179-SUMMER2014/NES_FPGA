
nes_fgpa_test.elf:     file format elf32-littlenios2
nes_fgpa_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00005530 memsz 0x00005530 flags r-x
    LOAD off    0x00006550 vaddr 0x08005550 paddr 0x08006fc4 align 2**12
         filesz 0x00001a74 memsz 0x00001a74 flags rw-
    LOAD off    0x00008a38 vaddr 0x08008a38 paddr 0x08008a38 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005320  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  080054d4  080054d4  000064d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a74  08005550  08006fc4  00006550  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  08008a38  08008a38  00008a38  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007fc4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00007fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d15  00000000  00000000  000088c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001927d  00000000  00000000  000095d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004de8  00000000  00000000  00022852  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c1c5  00000000  00000000  0002763a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fcc  00000000  00000000  00033800  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001716  00000000  00000000  000347cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e18  00000000  00000000  00035ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00039cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00039d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c44f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003c452  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003c457  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003c458  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003c45c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003c460  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0003c464  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0003c46f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0003c47a  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003c485  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0003c490  2**0
                  CONTENTS, READONLY
 28 .jdi          000041c2  00000000  00000000  0003c4b0  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003f5a3  00000000  00000000  00040672  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b4 l    d  .text	00000000 .text
080054d4 l    d  .rodata	00000000 .rodata
08005550 l    d  .rwdata	00000000 .rwdata
08008a38 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
080001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
08005550 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08001b5c l     F .text	00000058 std
08001c68 l     F .text	00000008 __fp_lock
08001c70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
08002ca0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08002d00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08002e04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08002f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08003008 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08003168 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08003398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08006fb4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08003650 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08005f00 l     O .rwdata	00001060 jtag_uart_0
08006f60 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
08003734 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08003974 l     F .text	00000228 altera_avalon_jtag_uart_irq
08003b9c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800443c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800484c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800499c l     F .text	000000f8 alt_file_locked
08004c20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080052bc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
08005470 l     F .text	00000040 alt_sim_halt
08002a08 g     F .text	00000070 _isatty_r
080031c8 g     F .text	0000006c alt_main
08000224 g     F .text	000000a0 _puts_r
08008a88 g     O .bss	00000100 alt_irq
08002a78 g     F .text	00000078 _lseek_r
08006fc4 g       *ABS*	00000000 __flash_rwdata_start
08008d18 g       *ABS*	00000000 __alt_heap_start
08002644 g     F .text	00000068 __sseek
08001bc4 g     F .text	000000a4 __sinit
08001cc4 g     F .text	0000009c __sfmoreglue
08003254 g     F .text	00000020 __malloc_unlock
080010ac g     F .text	000000e0 memmove
08001cb4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08002994 g     F .text	00000074 _fstat_r
08008a44 g     O .bss	00000004 errno
08008a4c g     O .bss	00000004 alt_argv
0800ef8c g       *ABS*	00000000 _gp
08005d80 g     O .rwdata	00000180 alt_fd_list
08004e44 g     F .text	00000094 alt_find_dev
0800100c g     F .text	000000a0 memcpy
08001ca8 g     F .text	0000000c _cleanup_r
08004924 g     F .text	00000078 alt_io_redirect
080054d4 g       *ABS*	00000000 __DTOR_END__
080002c4 g     F .text	00000014 puts
08004e24 g     F .text	00000020 altera_nios2_irq_init
08003db4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08002e64 g     F .text	000000c4 isatty
08008a38 g     O .bss	00000004 __malloc_top_pad
0800034c g     F .text	0000049c __sfvwrite_r
08001780 g     F .text	00000070 _sbrk_r
08002af0 g     F .text	00000078 _read_r
08006fac g     O .rwdata	00000004 alt_max_fd
08002870 g     F .text	00000110 _fclose_r
08001b28 g     F .text	00000034 fflush
08008a3c g     O .bss	00000004 __malloc_max_sbrked_mem
08003074 g     F .text	000000f4 lseek
08006f90 g     O .rwdata	00000004 _global_impure_ptr
0800118c g     F .text	000005f4 _realloc_r
08008d18 g       *ABS*	00000000 __bss_end
08004754 g     F .text	000000f8 alt_iic_isr_register
08004d18 g     F .text	0000010c alt_tick
08001c90 g     F .text	00000018 __fp_lock_all
0800470c g     F .text	00000048 alt_ic_irq_enabled
08004c80 g     F .text	00000098 alt_alarm_stop
08008a54 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000c8 alt_irq_handler
08005d58 g     O .rwdata	00000028 alt_dev_null
0800436c g     F .text	0000001c alt_dcache_flush_all
08006fc4 g       *ABS*	00000000 __ram_rwdata_end
08006fa4 g     O .rwdata	00000008 alt_dev_list
0800352c g     F .text	00000124 write
08005550 g       *ABS*	00000000 __ram_rodata_end
08002d2c g     F .text	000000d8 fstat
08008d18 g       *ABS*	00000000 end
080038b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
080054d0 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08003fd8 g     F .text	00000240 altera_avalon_jtag_uart_write
08001bb4 g     F .text	00000004 __sfp_lock_acquire
08000f28 g     F .text	000000e4 memchr
08001f7c g     F .text	00000314 _free_r
080052c0 g     F .text	000001b0 __call_exitprocs
08006f98 g     O .rwdata	00000004 __malloc_sbrk_base
080001b4 g     F .text	0000003c _start
08008a58 g     O .bss	00000004 _alt_tick_rate
08008a5c g     O .bss	00000004 _alt_nticks
08003274 g     F .text	00000124 read
080036e4 g     F .text	00000050 alt_sys_init
08005188 g     F .text	00000134 __register_exitproc
08003c4c g     F .text	00000074 altera_avalon_jtag_uart_close
08002b68 g     F .text	00000038 __mulsi3
08005550 g       *ABS*	00000000 __ram_rwdata_start
080054d4 g       *ABS*	00000000 __ram_rodata_start
08008a60 g     O .bss	00000028 __malloc_current_mallinfo
0800376c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08004ff8 g     F .text	000000d0 alt_get_fd
08002800 g     F .text	00000070 _close_r
08005114 g     F .text	00000074 memcmp
0800381c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
08008d18 g       *ABS*	00000000 __alt_stack_base
08003864 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
080017f0 g     F .text	0000013c __swsetup_r
08001d60 g     F .text	000000f0 __sfp
08005950 g     O .rwdata	00000408 __malloc_av_
08001bc0 g     F .text	00000004 __sinit_lock_release
08002728 g     F .text	00000060 __sread
08004ed8 g     F .text	00000120 alt_find_file
08004388 g     F .text	000000b4 alt_dev_llist_insert
08003234 g     F .text	00000020 __malloc_lock
08003470 g     F .text	000000bc sbrk
0800192c g     F .text	000001fc _fflush_r
08008a38 g       *ABS*	00000000 __bss_start
080025a4 g     F .text	00000098 memset
080001f0 g     F .text	00000034 main
08008a50 g     O .bss	00000004 alt_envp
08008a40 g     O .bss	00000004 __malloc_max_total_mem
080037c4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0800263c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08002980 g     F .text	00000014 fclose
08008b88 g     O .bss	00000190 _atexit0
080007e8 g     F .text	00000740 _malloc_r
08006fb0 g     O .rwdata	00000004 alt_errno
08002358 g     F .text	000000b8 _fwalk
08001e50 g     F .text	0000012c _malloc_trim_r
080054d4 g       *ABS*	00000000 __CTOR_END__
080054d4 g       *ABS*	00000000 __flash_rodata_start
080054d4 g       *ABS*	00000000 __DTOR_LIST__
080036b0 g     F .text	00000034 alt_irq_init
080033f8 g     F .text	00000078 alt_release_fd
080050c8 g     F .text	00000014 atexit
08002788 g     F .text	00000078 _write_r
08006f8c g     O .rwdata	00000004 _impure_ptr
08008a48 g     O .bss	00000004 alt_argc
08004500 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08000020 g       .exceptions	00000000 alt_irq_entry
08001c78 g     F .text	00000018 __fp_unlock_all
08006f9c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004580 g     F .text	00000050 alt_ic_isr_register
08006fc4 g       *ABS*	00000000 _edata
08008d18 g       *ABS*	00000000 _end
080001b4 g       *ABS*	00000000 __ram_exceptions_end
08003cc0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0800466c g     F .text	000000a0 alt_ic_irq_disable
080026ac g     F .text	0000007c __swrite
08006f94 g     O .rwdata	00000004 __malloc_trim_threshold
080050dc g     F .text	00000038 exit
08002290 g     F .text	000000c8 _fwalk_reent
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08001bb8 g     F .text	00000004 __sfp_lock_release
080054b0 g     F .text	00000020 _exit
08004218 g     F .text	00000154 alt_alarm_start
08002410 g     F .text	00000194 __smakebuf_r
080002d8 g     F .text	00000074 strlen
08004a94 g     F .text	0000018c open
08004564 g     F .text	0000001c alt_icache_flush_all
08006fb8 g     O .rwdata	00000004 alt_priority_mask
080045d0 g     F .text	0000009c alt_ic_irq_enable
08006fbc g     O .rwdata	00000008 alt_alarm_list
0800449c g     F .text	00000064 _do_ctors
08002ba0 g     F .text	00000100 close
08002f88 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
08001bbc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406d14 	ori	at,at,436
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80000fc:	0005313a 	rdctl	r2,ipending
 8000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000110:	00800044 	movi	r2,1
 8000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8000118:	e0ffff17 	ldw	r3,-4(fp)
 800011c:	e0bffe17 	ldw	r2,-8(fp)
 8000120:	1884703a 	and	r2,r3,r2
 8000124:	1005003a 	cmpeq	r2,r2,zero
 8000128:	1000161e 	bne	r2,zero,8000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	e0bffd17 	ldw	r2,-12(fp)
 8000130:	00c20074 	movhi	r3,2049
 8000134:	18e2a204 	addi	r3,r3,-30072
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	11400017 	ldw	r5,0(r2)
 8000144:	e0bffd17 	ldw	r2,-12(fp)
 8000148:	00c20074 	movhi	r3,2049
 800014c:	18e2a204 	addi	r3,r3,-30072
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	10c5883a 	add	r2,r2,r3
 8000158:	10800104 	addi	r2,r2,4
 800015c:	11000017 	ldw	r4,0(r2)
 8000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000164:	0005313a 	rdctl	r2,ipending
 8000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	1004c03a 	cmpne	r2,r2,zero
 800017c:	103fe31e 	bne	r2,zero,800010c <alt_irq_handler+0x20>
 8000180:	00000706 	br	80001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000184:	e0bffe17 	ldw	r2,-8(fp)
 8000188:	1085883a 	add	r2,r2,r2
 800018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8000190:	e0bffd17 	ldw	r2,-12(fp)
 8000194:	10800044 	addi	r2,r2,1
 8000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800019c:	003fde06 	br	8000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a0:	e037883a 	mov	sp,fp
 80001a4:	dfc00117 	ldw	ra,4(sp)
 80001a8:	df000017 	ldw	fp,0(sp)
 80001ac:	dec00204 	addi	sp,sp,8
 80001b0:	f800283a 	ret

Disassembly of section .text:

080001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001b4:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 80001bc:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 80001c0:	d6bbe314 	ori	gp,gp,61324
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001c4:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 80001c8:	10a28e14 	ori	r2,r2,35384

    movhi r3, %hi(__bss_end)
 80001cc:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 80001d0:	18e34614 	ori	r3,r3,36120

    beq r2, r3, 1f
 80001d4:	10c00326 	beq	r2,r3,80001e4 <_start+0x30>

0:
    stw zero, (r2)
 80001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e0:	10fffd36 	bltu	r2,r3,80001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001e4:	8002f880 	call	8002f88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001e8:	80031c80 	call	80031c8 <alt_main>

080001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001ec:	003fff06 	br	80001ec <alt_after_alt_main>

080001f0 <main>:
 */

#include <stdio.h>

int main()
{
 80001f0:	defffe04 	addi	sp,sp,-8
 80001f4:	dfc00115 	stw	ra,4(sp)
 80001f8:	df000015 	stw	fp,0(sp)
 80001fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 8000200:	01020034 	movhi	r4,2048
 8000204:	21153504 	addi	r4,r4,21716
 8000208:	80002c40 	call	80002c4 <puts>

  return 0;
 800020c:	0005883a 	mov	r2,zero
}
 8000210:	e037883a 	mov	sp,fp
 8000214:	dfc00117 	ldw	ra,4(sp)
 8000218:	df000017 	ldw	fp,0(sp)
 800021c:	dec00204 	addi	sp,sp,8
 8000220:	f800283a 	ret

08000224 <_puts_r>:
 8000224:	defff604 	addi	sp,sp,-40
 8000228:	dc400715 	stw	r17,28(sp)
 800022c:	2023883a 	mov	r17,r4
 8000230:	2809883a 	mov	r4,r5
 8000234:	dfc00915 	stw	ra,36(sp)
 8000238:	dcc00815 	stw	r19,32(sp)
 800023c:	2827883a 	mov	r19,r5
 8000240:	80002d80 	call	80002d8 <strlen>
 8000244:	89400217 	ldw	r5,8(r17)
 8000248:	00c20034 	movhi	r3,2048
 800024c:	18d53a04 	addi	r3,r3,21736
 8000250:	01c00044 	movi	r7,1
 8000254:	12000044 	addi	r8,r2,1
 8000258:	d8c00515 	stw	r3,20(sp)
 800025c:	d9c00615 	stw	r7,24(sp)
 8000260:	d8c00304 	addi	r3,sp,12
 8000264:	01c00084 	movi	r7,2
 8000268:	8809883a 	mov	r4,r17
 800026c:	d80d883a 	mov	r6,sp
 8000270:	d8c00015 	stw	r3,0(sp)
 8000274:	dcc00315 	stw	r19,12(sp)
 8000278:	da000215 	stw	r8,8(sp)
 800027c:	d9c00115 	stw	r7,4(sp)
 8000280:	d8800415 	stw	r2,16(sp)
 8000284:	800034c0 	call	800034c <__sfvwrite_r>
 8000288:	00ffffc4 	movi	r3,-1
 800028c:	10000626 	beq	r2,zero,80002a8 <_puts_r+0x84>
 8000290:	1805883a 	mov	r2,r3
 8000294:	dfc00917 	ldw	ra,36(sp)
 8000298:	dcc00817 	ldw	r19,32(sp)
 800029c:	dc400717 	ldw	r17,28(sp)
 80002a0:	dec00a04 	addi	sp,sp,40
 80002a4:	f800283a 	ret
 80002a8:	00c00284 	movi	r3,10
 80002ac:	1805883a 	mov	r2,r3
 80002b0:	dfc00917 	ldw	ra,36(sp)
 80002b4:	dcc00817 	ldw	r19,32(sp)
 80002b8:	dc400717 	ldw	r17,28(sp)
 80002bc:	dec00a04 	addi	sp,sp,40
 80002c0:	f800283a 	ret

080002c4 <puts>:
 80002c4:	00820034 	movhi	r2,2048
 80002c8:	109be304 	addi	r2,r2,28556
 80002cc:	200b883a 	mov	r5,r4
 80002d0:	11000017 	ldw	r4,0(r2)
 80002d4:	80002241 	jmpi	8000224 <_puts_r>

080002d8 <strlen>:
 80002d8:	208000cc 	andi	r2,r4,3
 80002dc:	2011883a 	mov	r8,r4
 80002e0:	1000161e 	bne	r2,zero,800033c <strlen+0x64>
 80002e4:	20c00017 	ldw	r3,0(r4)
 80002e8:	017fbff4 	movhi	r5,65279
 80002ec:	297fbfc4 	addi	r5,r5,-257
 80002f0:	01e02074 	movhi	r7,32897
 80002f4:	39e02004 	addi	r7,r7,-32640
 80002f8:	1945883a 	add	r2,r3,r5
 80002fc:	11c4703a 	and	r2,r2,r7
 8000300:	00c6303a 	nor	r3,zero,r3
 8000304:	1886703a 	and	r3,r3,r2
 8000308:	18000c1e 	bne	r3,zero,800033c <strlen+0x64>
 800030c:	280d883a 	mov	r6,r5
 8000310:	380b883a 	mov	r5,r7
 8000314:	21000104 	addi	r4,r4,4
 8000318:	20800017 	ldw	r2,0(r4)
 800031c:	1187883a 	add	r3,r2,r6
 8000320:	1946703a 	and	r3,r3,r5
 8000324:	0084303a 	nor	r2,zero,r2
 8000328:	10c4703a 	and	r2,r2,r3
 800032c:	103ff926 	beq	r2,zero,8000314 <strlen+0x3c>
 8000330:	20800007 	ldb	r2,0(r4)
 8000334:	10000326 	beq	r2,zero,8000344 <strlen+0x6c>
 8000338:	21000044 	addi	r4,r4,1
 800033c:	20800007 	ldb	r2,0(r4)
 8000340:	103ffd1e 	bne	r2,zero,8000338 <strlen+0x60>
 8000344:	2205c83a 	sub	r2,r4,r8
 8000348:	f800283a 	ret

0800034c <__sfvwrite_r>:
 800034c:	30800217 	ldw	r2,8(r6)
 8000350:	defff504 	addi	sp,sp,-44
 8000354:	df000915 	stw	fp,36(sp)
 8000358:	dd800715 	stw	r22,28(sp)
 800035c:	dc800315 	stw	r18,12(sp)
 8000360:	dfc00a15 	stw	ra,40(sp)
 8000364:	ddc00815 	stw	r23,32(sp)
 8000368:	dd400615 	stw	r21,24(sp)
 800036c:	dd000515 	stw	r20,20(sp)
 8000370:	dcc00415 	stw	r19,16(sp)
 8000374:	dc400215 	stw	r17,8(sp)
 8000378:	dc000115 	stw	r16,4(sp)
 800037c:	302d883a 	mov	r22,r6
 8000380:	2039883a 	mov	fp,r4
 8000384:	2825883a 	mov	r18,r5
 8000388:	10001c26 	beq	r2,zero,80003fc <__sfvwrite_r+0xb0>
 800038c:	29c0030b 	ldhu	r7,12(r5)
 8000390:	3880020c 	andi	r2,r7,8
 8000394:	10002726 	beq	r2,zero,8000434 <__sfvwrite_r+0xe8>
 8000398:	28800417 	ldw	r2,16(r5)
 800039c:	10002526 	beq	r2,zero,8000434 <__sfvwrite_r+0xe8>
 80003a0:	3880008c 	andi	r2,r7,2
 80003a4:	b5400017 	ldw	r21,0(r22)
 80003a8:	10002826 	beq	r2,zero,800044c <__sfvwrite_r+0x100>
 80003ac:	0021883a 	mov	r16,zero
 80003b0:	0023883a 	mov	r17,zero
 80003b4:	880d883a 	mov	r6,r17
 80003b8:	e009883a 	mov	r4,fp
 80003bc:	00810004 	movi	r2,1024
 80003c0:	80006e26 	beq	r16,zero,800057c <__sfvwrite_r+0x230>
 80003c4:	800f883a 	mov	r7,r16
 80003c8:	91400717 	ldw	r5,28(r18)
 80003cc:	1400012e 	bgeu	r2,r16,80003d4 <__sfvwrite_r+0x88>
 80003d0:	100f883a 	mov	r7,r2
 80003d4:	90c00917 	ldw	r3,36(r18)
 80003d8:	183ee83a 	callr	r3
 80003dc:	1007883a 	mov	r3,r2
 80003e0:	80a1c83a 	sub	r16,r16,r2
 80003e4:	88a3883a 	add	r17,r17,r2
 80003e8:	00806d0e 	bge	zero,r2,80005a0 <__sfvwrite_r+0x254>
 80003ec:	b0800217 	ldw	r2,8(r22)
 80003f0:	10c5c83a 	sub	r2,r2,r3
 80003f4:	b0800215 	stw	r2,8(r22)
 80003f8:	103fee1e 	bne	r2,zero,80003b4 <__sfvwrite_r+0x68>
 80003fc:	0009883a 	mov	r4,zero
 8000400:	2005883a 	mov	r2,r4
 8000404:	dfc00a17 	ldw	ra,40(sp)
 8000408:	df000917 	ldw	fp,36(sp)
 800040c:	ddc00817 	ldw	r23,32(sp)
 8000410:	dd800717 	ldw	r22,28(sp)
 8000414:	dd400617 	ldw	r21,24(sp)
 8000418:	dd000517 	ldw	r20,20(sp)
 800041c:	dcc00417 	ldw	r19,16(sp)
 8000420:	dc800317 	ldw	r18,12(sp)
 8000424:	dc400217 	ldw	r17,8(sp)
 8000428:	dc000117 	ldw	r16,4(sp)
 800042c:	dec00b04 	addi	sp,sp,44
 8000430:	f800283a 	ret
 8000434:	80017f00 	call	80017f0 <__swsetup_r>
 8000438:	1000e41e 	bne	r2,zero,80007cc <__sfvwrite_r+0x480>
 800043c:	91c0030b 	ldhu	r7,12(r18)
 8000440:	b5400017 	ldw	r21,0(r22)
 8000444:	3880008c 	andi	r2,r7,2
 8000448:	103fd81e 	bne	r2,zero,80003ac <__sfvwrite_r+0x60>
 800044c:	3880004c 	andi	r2,r7,1
 8000450:	1005003a 	cmpeq	r2,r2,zero
 8000454:	10005726 	beq	r2,zero,80005b4 <__sfvwrite_r+0x268>
 8000458:	0029883a 	mov	r20,zero
 800045c:	002f883a 	mov	r23,zero
 8000460:	a0004226 	beq	r20,zero,800056c <__sfvwrite_r+0x220>
 8000464:	3880800c 	andi	r2,r7,512
 8000468:	94000217 	ldw	r16,8(r18)
 800046c:	10008b26 	beq	r2,zero,800069c <__sfvwrite_r+0x350>
 8000470:	800d883a 	mov	r6,r16
 8000474:	a400a536 	bltu	r20,r16,800070c <__sfvwrite_r+0x3c0>
 8000478:	3881200c 	andi	r2,r7,1152
 800047c:	10002726 	beq	r2,zero,800051c <__sfvwrite_r+0x1d0>
 8000480:	90800517 	ldw	r2,20(r18)
 8000484:	92000417 	ldw	r8,16(r18)
 8000488:	91400017 	ldw	r5,0(r18)
 800048c:	1087883a 	add	r3,r2,r2
 8000490:	1887883a 	add	r3,r3,r2
 8000494:	1808d7fa 	srli	r4,r3,31
 8000498:	2a21c83a 	sub	r16,r5,r8
 800049c:	80800044 	addi	r2,r16,1
 80004a0:	20c9883a 	add	r4,r4,r3
 80004a4:	2027d07a 	srai	r19,r4,1
 80004a8:	a085883a 	add	r2,r20,r2
 80004ac:	980d883a 	mov	r6,r19
 80004b0:	9880022e 	bgeu	r19,r2,80004bc <__sfvwrite_r+0x170>
 80004b4:	1027883a 	mov	r19,r2
 80004b8:	100d883a 	mov	r6,r2
 80004bc:	3881000c 	andi	r2,r7,1024
 80004c0:	1000b826 	beq	r2,zero,80007a4 <__sfvwrite_r+0x458>
 80004c4:	300b883a 	mov	r5,r6
 80004c8:	e009883a 	mov	r4,fp
 80004cc:	80007e80 	call	80007e8 <_malloc_r>
 80004d0:	10003126 	beq	r2,zero,8000598 <__sfvwrite_r+0x24c>
 80004d4:	91400417 	ldw	r5,16(r18)
 80004d8:	1009883a 	mov	r4,r2
 80004dc:	800d883a 	mov	r6,r16
 80004e0:	1023883a 	mov	r17,r2
 80004e4:	800100c0 	call	800100c <memcpy>
 80004e8:	90c0030b 	ldhu	r3,12(r18)
 80004ec:	00beffc4 	movi	r2,-1025
 80004f0:	1886703a 	and	r3,r3,r2
 80004f4:	18c02014 	ori	r3,r3,128
 80004f8:	90c0030d 	sth	r3,12(r18)
 80004fc:	9c07c83a 	sub	r3,r19,r16
 8000500:	8c05883a 	add	r2,r17,r16
 8000504:	a00d883a 	mov	r6,r20
 8000508:	a021883a 	mov	r16,r20
 800050c:	90800015 	stw	r2,0(r18)
 8000510:	90c00215 	stw	r3,8(r18)
 8000514:	94400415 	stw	r17,16(r18)
 8000518:	94c00515 	stw	r19,20(r18)
 800051c:	91000017 	ldw	r4,0(r18)
 8000520:	b80b883a 	mov	r5,r23
 8000524:	a023883a 	mov	r17,r20
 8000528:	80010ac0 	call	80010ac <memmove>
 800052c:	90c00217 	ldw	r3,8(r18)
 8000530:	90800017 	ldw	r2,0(r18)
 8000534:	a027883a 	mov	r19,r20
 8000538:	1c07c83a 	sub	r3,r3,r16
 800053c:	1405883a 	add	r2,r2,r16
 8000540:	90c00215 	stw	r3,8(r18)
 8000544:	a021883a 	mov	r16,r20
 8000548:	90800015 	stw	r2,0(r18)
 800054c:	b0800217 	ldw	r2,8(r22)
 8000550:	1405c83a 	sub	r2,r2,r16
 8000554:	b0800215 	stw	r2,8(r22)
 8000558:	103fa826 	beq	r2,zero,80003fc <__sfvwrite_r+0xb0>
 800055c:	a469c83a 	sub	r20,r20,r17
 8000560:	91c0030b 	ldhu	r7,12(r18)
 8000564:	bcef883a 	add	r23,r23,r19
 8000568:	a03fbe1e 	bne	r20,zero,8000464 <__sfvwrite_r+0x118>
 800056c:	adc00017 	ldw	r23,0(r21)
 8000570:	ad000117 	ldw	r20,4(r21)
 8000574:	ad400204 	addi	r21,r21,8
 8000578:	003fb906 	br	8000460 <__sfvwrite_r+0x114>
 800057c:	ac400017 	ldw	r17,0(r21)
 8000580:	ac000117 	ldw	r16,4(r21)
 8000584:	ad400204 	addi	r21,r21,8
 8000588:	003f8a06 	br	80003b4 <__sfvwrite_r+0x68>
 800058c:	91400417 	ldw	r5,16(r18)
 8000590:	e009883a 	mov	r4,fp
 8000594:	8001f7c0 	call	8001f7c <_free_r>
 8000598:	00800304 	movi	r2,12
 800059c:	e0800015 	stw	r2,0(fp)
 80005a0:	9080030b 	ldhu	r2,12(r18)
 80005a4:	013fffc4 	movi	r4,-1
 80005a8:	10801014 	ori	r2,r2,64
 80005ac:	9080030d 	sth	r2,12(r18)
 80005b0:	003f9306 	br	8000400 <__sfvwrite_r+0xb4>
 80005b4:	0027883a 	mov	r19,zero
 80005b8:	002f883a 	mov	r23,zero
 80005bc:	d8000015 	stw	zero,0(sp)
 80005c0:	0029883a 	mov	r20,zero
 80005c4:	98001e26 	beq	r19,zero,8000640 <__sfvwrite_r+0x2f4>
 80005c8:	d8c00017 	ldw	r3,0(sp)
 80005cc:	1804c03a 	cmpne	r2,r3,zero
 80005d0:	10005e26 	beq	r2,zero,800074c <__sfvwrite_r+0x400>
 80005d4:	9821883a 	mov	r16,r19
 80005d8:	a4c0012e 	bgeu	r20,r19,80005e0 <__sfvwrite_r+0x294>
 80005dc:	a021883a 	mov	r16,r20
 80005e0:	91000017 	ldw	r4,0(r18)
 80005e4:	90800417 	ldw	r2,16(r18)
 80005e8:	91800217 	ldw	r6,8(r18)
 80005ec:	91c00517 	ldw	r7,20(r18)
 80005f0:	1100022e 	bgeu	r2,r4,80005fc <__sfvwrite_r+0x2b0>
 80005f4:	31e3883a 	add	r17,r6,r7
 80005f8:	8c001616 	blt	r17,r16,8000654 <__sfvwrite_r+0x308>
 80005fc:	81c03816 	blt	r16,r7,80006e0 <__sfvwrite_r+0x394>
 8000600:	90c00917 	ldw	r3,36(r18)
 8000604:	91400717 	ldw	r5,28(r18)
 8000608:	e009883a 	mov	r4,fp
 800060c:	b80d883a 	mov	r6,r23
 8000610:	183ee83a 	callr	r3
 8000614:	1023883a 	mov	r17,r2
 8000618:	00bfe10e 	bge	zero,r2,80005a0 <__sfvwrite_r+0x254>
 800061c:	a469c83a 	sub	r20,r20,r17
 8000620:	a0001826 	beq	r20,zero,8000684 <__sfvwrite_r+0x338>
 8000624:	b0800217 	ldw	r2,8(r22)
 8000628:	1445c83a 	sub	r2,r2,r17
 800062c:	b0800215 	stw	r2,8(r22)
 8000630:	103f7226 	beq	r2,zero,80003fc <__sfvwrite_r+0xb0>
 8000634:	9c67c83a 	sub	r19,r19,r17
 8000638:	bc6f883a 	add	r23,r23,r17
 800063c:	983fe21e 	bne	r19,zero,80005c8 <__sfvwrite_r+0x27c>
 8000640:	adc00017 	ldw	r23,0(r21)
 8000644:	acc00117 	ldw	r19,4(r21)
 8000648:	ad400204 	addi	r21,r21,8
 800064c:	d8000015 	stw	zero,0(sp)
 8000650:	003fdc06 	br	80005c4 <__sfvwrite_r+0x278>
 8000654:	b80b883a 	mov	r5,r23
 8000658:	880d883a 	mov	r6,r17
 800065c:	80010ac0 	call	80010ac <memmove>
 8000660:	90c00017 	ldw	r3,0(r18)
 8000664:	e009883a 	mov	r4,fp
 8000668:	900b883a 	mov	r5,r18
 800066c:	1c47883a 	add	r3,r3,r17
 8000670:	90c00015 	stw	r3,0(r18)
 8000674:	800192c0 	call	800192c <_fflush_r>
 8000678:	103fc91e 	bne	r2,zero,80005a0 <__sfvwrite_r+0x254>
 800067c:	a469c83a 	sub	r20,r20,r17
 8000680:	a03fe81e 	bne	r20,zero,8000624 <__sfvwrite_r+0x2d8>
 8000684:	e009883a 	mov	r4,fp
 8000688:	900b883a 	mov	r5,r18
 800068c:	800192c0 	call	800192c <_fflush_r>
 8000690:	103fc31e 	bne	r2,zero,80005a0 <__sfvwrite_r+0x254>
 8000694:	d8000015 	stw	zero,0(sp)
 8000698:	003fe206 	br	8000624 <__sfvwrite_r+0x2d8>
 800069c:	91000017 	ldw	r4,0(r18)
 80006a0:	90800417 	ldw	r2,16(r18)
 80006a4:	1100022e 	bgeu	r2,r4,80006b0 <__sfvwrite_r+0x364>
 80006a8:	8023883a 	mov	r17,r16
 80006ac:	85003136 	bltu	r16,r20,8000774 <__sfvwrite_r+0x428>
 80006b0:	91c00517 	ldw	r7,20(r18)
 80006b4:	a1c01836 	bltu	r20,r7,8000718 <__sfvwrite_r+0x3cc>
 80006b8:	90c00917 	ldw	r3,36(r18)
 80006bc:	91400717 	ldw	r5,28(r18)
 80006c0:	e009883a 	mov	r4,fp
 80006c4:	b80d883a 	mov	r6,r23
 80006c8:	183ee83a 	callr	r3
 80006cc:	1021883a 	mov	r16,r2
 80006d0:	00bfb30e 	bge	zero,r2,80005a0 <__sfvwrite_r+0x254>
 80006d4:	1023883a 	mov	r17,r2
 80006d8:	1027883a 	mov	r19,r2
 80006dc:	003f9b06 	br	800054c <__sfvwrite_r+0x200>
 80006e0:	b80b883a 	mov	r5,r23
 80006e4:	800d883a 	mov	r6,r16
 80006e8:	80010ac0 	call	80010ac <memmove>
 80006ec:	90c00217 	ldw	r3,8(r18)
 80006f0:	90800017 	ldw	r2,0(r18)
 80006f4:	8023883a 	mov	r17,r16
 80006f8:	1c07c83a 	sub	r3,r3,r16
 80006fc:	1405883a 	add	r2,r2,r16
 8000700:	90c00215 	stw	r3,8(r18)
 8000704:	90800015 	stw	r2,0(r18)
 8000708:	003fc406 	br	800061c <__sfvwrite_r+0x2d0>
 800070c:	a00d883a 	mov	r6,r20
 8000710:	a021883a 	mov	r16,r20
 8000714:	003f8106 	br	800051c <__sfvwrite_r+0x1d0>
 8000718:	b80b883a 	mov	r5,r23
 800071c:	a00d883a 	mov	r6,r20
 8000720:	80010ac0 	call	80010ac <memmove>
 8000724:	90c00217 	ldw	r3,8(r18)
 8000728:	90800017 	ldw	r2,0(r18)
 800072c:	a021883a 	mov	r16,r20
 8000730:	1d07c83a 	sub	r3,r3,r20
 8000734:	1505883a 	add	r2,r2,r20
 8000738:	a023883a 	mov	r17,r20
 800073c:	a027883a 	mov	r19,r20
 8000740:	90c00215 	stw	r3,8(r18)
 8000744:	90800015 	stw	r2,0(r18)
 8000748:	003f8006 	br	800054c <__sfvwrite_r+0x200>
 800074c:	b809883a 	mov	r4,r23
 8000750:	01400284 	movi	r5,10
 8000754:	980d883a 	mov	r6,r19
 8000758:	8000f280 	call	8000f28 <memchr>
 800075c:	10001726 	beq	r2,zero,80007bc <__sfvwrite_r+0x470>
 8000760:	15c5c83a 	sub	r2,r2,r23
 8000764:	15000044 	addi	r20,r2,1
 8000768:	00800044 	movi	r2,1
 800076c:	d8800015 	stw	r2,0(sp)
 8000770:	003f9806 	br	80005d4 <__sfvwrite_r+0x288>
 8000774:	b80b883a 	mov	r5,r23
 8000778:	800d883a 	mov	r6,r16
 800077c:	80010ac0 	call	80010ac <memmove>
 8000780:	90c00017 	ldw	r3,0(r18)
 8000784:	e009883a 	mov	r4,fp
 8000788:	900b883a 	mov	r5,r18
 800078c:	1c07883a 	add	r3,r3,r16
 8000790:	90c00015 	stw	r3,0(r18)
 8000794:	8027883a 	mov	r19,r16
 8000798:	800192c0 	call	800192c <_fflush_r>
 800079c:	103f6b26 	beq	r2,zero,800054c <__sfvwrite_r+0x200>
 80007a0:	003f7f06 	br	80005a0 <__sfvwrite_r+0x254>
 80007a4:	400b883a 	mov	r5,r8
 80007a8:	e009883a 	mov	r4,fp
 80007ac:	800118c0 	call	800118c <_realloc_r>
 80007b0:	103f7626 	beq	r2,zero,800058c <__sfvwrite_r+0x240>
 80007b4:	1023883a 	mov	r17,r2
 80007b8:	003f5006 	br	80004fc <__sfvwrite_r+0x1b0>
 80007bc:	00c00044 	movi	r3,1
 80007c0:	9d000044 	addi	r20,r19,1
 80007c4:	d8c00015 	stw	r3,0(sp)
 80007c8:	003f8206 	br	80005d4 <__sfvwrite_r+0x288>
 80007cc:	9080030b 	ldhu	r2,12(r18)
 80007d0:	00c00244 	movi	r3,9
 80007d4:	013fffc4 	movi	r4,-1
 80007d8:	10801014 	ori	r2,r2,64
 80007dc:	9080030d 	sth	r2,12(r18)
 80007e0:	e0c00015 	stw	r3,0(fp)
 80007e4:	003f0606 	br	8000400 <__sfvwrite_r+0xb4>

080007e8 <_malloc_r>:
 80007e8:	defff604 	addi	sp,sp,-40
 80007ec:	28c002c4 	addi	r3,r5,11
 80007f0:	00800584 	movi	r2,22
 80007f4:	dc800215 	stw	r18,8(sp)
 80007f8:	dfc00915 	stw	ra,36(sp)
 80007fc:	df000815 	stw	fp,32(sp)
 8000800:	ddc00715 	stw	r23,28(sp)
 8000804:	dd800615 	stw	r22,24(sp)
 8000808:	dd400515 	stw	r21,20(sp)
 800080c:	dd000415 	stw	r20,16(sp)
 8000810:	dcc00315 	stw	r19,12(sp)
 8000814:	dc400115 	stw	r17,4(sp)
 8000818:	dc000015 	stw	r16,0(sp)
 800081c:	2025883a 	mov	r18,r4
 8000820:	10c01236 	bltu	r2,r3,800086c <_malloc_r+0x84>
 8000824:	04400404 	movi	r17,16
 8000828:	8940142e 	bgeu	r17,r5,800087c <_malloc_r+0x94>
 800082c:	00800304 	movi	r2,12
 8000830:	0007883a 	mov	r3,zero
 8000834:	90800015 	stw	r2,0(r18)
 8000838:	1805883a 	mov	r2,r3
 800083c:	dfc00917 	ldw	ra,36(sp)
 8000840:	df000817 	ldw	fp,32(sp)
 8000844:	ddc00717 	ldw	r23,28(sp)
 8000848:	dd800617 	ldw	r22,24(sp)
 800084c:	dd400517 	ldw	r21,20(sp)
 8000850:	dd000417 	ldw	r20,16(sp)
 8000854:	dcc00317 	ldw	r19,12(sp)
 8000858:	dc800217 	ldw	r18,8(sp)
 800085c:	dc400117 	ldw	r17,4(sp)
 8000860:	dc000017 	ldw	r16,0(sp)
 8000864:	dec00a04 	addi	sp,sp,40
 8000868:	f800283a 	ret
 800086c:	00bffe04 	movi	r2,-8
 8000870:	18a2703a 	and	r17,r3,r2
 8000874:	883fed16 	blt	r17,zero,800082c <_malloc_r+0x44>
 8000878:	897fec36 	bltu	r17,r5,800082c <_malloc_r+0x44>
 800087c:	9009883a 	mov	r4,r18
 8000880:	80032340 	call	8003234 <__malloc_lock>
 8000884:	00807dc4 	movi	r2,503
 8000888:	14402b2e 	bgeu	r2,r17,8000938 <_malloc_r+0x150>
 800088c:	8806d27a 	srli	r3,r17,9
 8000890:	18003f1e 	bne	r3,zero,8000990 <_malloc_r+0x1a8>
 8000894:	880cd0fa 	srli	r6,r17,3
 8000898:	300490fa 	slli	r2,r6,3
 800089c:	02c20034 	movhi	r11,2048
 80008a0:	5ad65404 	addi	r11,r11,22864
 80008a4:	12cb883a 	add	r5,r2,r11
 80008a8:	2c000317 	ldw	r16,12(r5)
 80008ac:	580f883a 	mov	r7,r11
 80008b0:	2c00041e 	bne	r5,r16,80008c4 <_malloc_r+0xdc>
 80008b4:	00000a06 	br	80008e0 <_malloc_r+0xf8>
 80008b8:	1800860e 	bge	r3,zero,8000ad4 <_malloc_r+0x2ec>
 80008bc:	84000317 	ldw	r16,12(r16)
 80008c0:	2c000726 	beq	r5,r16,80008e0 <_malloc_r+0xf8>
 80008c4:	80800117 	ldw	r2,4(r16)
 80008c8:	00ffff04 	movi	r3,-4
 80008cc:	10c8703a 	and	r4,r2,r3
 80008d0:	2447c83a 	sub	r3,r4,r17
 80008d4:	008003c4 	movi	r2,15
 80008d8:	10fff70e 	bge	r2,r3,80008b8 <_malloc_r+0xd0>
 80008dc:	31bfffc4 	addi	r6,r6,-1
 80008e0:	32400044 	addi	r9,r6,1
 80008e4:	02820034 	movhi	r10,2048
 80008e8:	52965604 	addi	r10,r10,22872
 80008ec:	54000217 	ldw	r16,8(r10)
 80008f0:	8280a026 	beq	r16,r10,8000b74 <_malloc_r+0x38c>
 80008f4:	80800117 	ldw	r2,4(r16)
 80008f8:	00ffff04 	movi	r3,-4
 80008fc:	10ca703a 	and	r5,r2,r3
 8000900:	2c4dc83a 	sub	r6,r5,r17
 8000904:	008003c4 	movi	r2,15
 8000908:	11808316 	blt	r2,r6,8000b18 <_malloc_r+0x330>
 800090c:	52800315 	stw	r10,12(r10)
 8000910:	52800215 	stw	r10,8(r10)
 8000914:	30002916 	blt	r6,zero,80009bc <_malloc_r+0x1d4>
 8000918:	8147883a 	add	r3,r16,r5
 800091c:	18800117 	ldw	r2,4(r3)
 8000920:	9009883a 	mov	r4,r18
 8000924:	10800054 	ori	r2,r2,1
 8000928:	18800115 	stw	r2,4(r3)
 800092c:	80032540 	call	8003254 <__malloc_unlock>
 8000930:	80c00204 	addi	r3,r16,8
 8000934:	003fc006 	br	8000838 <_malloc_r+0x50>
 8000938:	02c20034 	movhi	r11,2048
 800093c:	5ad65404 	addi	r11,r11,22864
 8000940:	8ac5883a 	add	r2,r17,r11
 8000944:	14000317 	ldw	r16,12(r2)
 8000948:	580f883a 	mov	r7,r11
 800094c:	8806d0fa 	srli	r3,r17,3
 8000950:	14006c26 	beq	r2,r16,8000b04 <_malloc_r+0x31c>
 8000954:	80c00117 	ldw	r3,4(r16)
 8000958:	00bfff04 	movi	r2,-4
 800095c:	81800317 	ldw	r6,12(r16)
 8000960:	1886703a 	and	r3,r3,r2
 8000964:	80c7883a 	add	r3,r16,r3
 8000968:	18800117 	ldw	r2,4(r3)
 800096c:	81400217 	ldw	r5,8(r16)
 8000970:	9009883a 	mov	r4,r18
 8000974:	10800054 	ori	r2,r2,1
 8000978:	18800115 	stw	r2,4(r3)
 800097c:	31400215 	stw	r5,8(r6)
 8000980:	29800315 	stw	r6,12(r5)
 8000984:	80032540 	call	8003254 <__malloc_unlock>
 8000988:	80c00204 	addi	r3,r16,8
 800098c:	003faa06 	br	8000838 <_malloc_r+0x50>
 8000990:	00800104 	movi	r2,4
 8000994:	10c0052e 	bgeu	r2,r3,80009ac <_malloc_r+0x1c4>
 8000998:	00800504 	movi	r2,20
 800099c:	10c07836 	bltu	r2,r3,8000b80 <_malloc_r+0x398>
 80009a0:	198016c4 	addi	r6,r3,91
 80009a4:	300490fa 	slli	r2,r6,3
 80009a8:	003fbc06 	br	800089c <_malloc_r+0xb4>
 80009ac:	8804d1ba 	srli	r2,r17,6
 80009b0:	11800e04 	addi	r6,r2,56
 80009b4:	300490fa 	slli	r2,r6,3
 80009b8:	003fb806 	br	800089c <_malloc_r+0xb4>
 80009bc:	00807fc4 	movi	r2,511
 80009c0:	1140bb36 	bltu	r2,r5,8000cb0 <_malloc_r+0x4c8>
 80009c4:	2806d0fa 	srli	r3,r5,3
 80009c8:	573ffe04 	addi	fp,r10,-8
 80009cc:	00800044 	movi	r2,1
 80009d0:	180890fa 	slli	r4,r3,3
 80009d4:	1807d0ba 	srai	r3,r3,2
 80009d8:	e1c00117 	ldw	r7,4(fp)
 80009dc:	5909883a 	add	r4,r11,r4
 80009e0:	21400217 	ldw	r5,8(r4)
 80009e4:	10c4983a 	sll	r2,r2,r3
 80009e8:	81000315 	stw	r4,12(r16)
 80009ec:	81400215 	stw	r5,8(r16)
 80009f0:	388eb03a 	or	r7,r7,r2
 80009f4:	2c000315 	stw	r16,12(r5)
 80009f8:	24000215 	stw	r16,8(r4)
 80009fc:	e1c00115 	stw	r7,4(fp)
 8000a00:	4807883a 	mov	r3,r9
 8000a04:	4800cd16 	blt	r9,zero,8000d3c <_malloc_r+0x554>
 8000a08:	1807d0ba 	srai	r3,r3,2
 8000a0c:	00800044 	movi	r2,1
 8000a10:	10c8983a 	sll	r4,r2,r3
 8000a14:	39004436 	bltu	r7,r4,8000b28 <_malloc_r+0x340>
 8000a18:	21c4703a 	and	r2,r4,r7
 8000a1c:	10000a1e 	bne	r2,zero,8000a48 <_malloc_r+0x260>
 8000a20:	2109883a 	add	r4,r4,r4
 8000a24:	00bfff04 	movi	r2,-4
 8000a28:	4884703a 	and	r2,r9,r2
 8000a2c:	3906703a 	and	r3,r7,r4
 8000a30:	12400104 	addi	r9,r2,4
 8000a34:	1800041e 	bne	r3,zero,8000a48 <_malloc_r+0x260>
 8000a38:	2109883a 	add	r4,r4,r4
 8000a3c:	3904703a 	and	r2,r7,r4
 8000a40:	4a400104 	addi	r9,r9,4
 8000a44:	103ffc26 	beq	r2,zero,8000a38 <_malloc_r+0x250>
 8000a48:	480490fa 	slli	r2,r9,3
 8000a4c:	4819883a 	mov	r12,r9
 8000a50:	023fff04 	movi	r8,-4
 8000a54:	589b883a 	add	r13,r11,r2
 8000a58:	6807883a 	mov	r3,r13
 8000a5c:	014003c4 	movi	r5,15
 8000a60:	1c000317 	ldw	r16,12(r3)
 8000a64:	1c00041e 	bne	r3,r16,8000a78 <_malloc_r+0x290>
 8000a68:	0000a706 	br	8000d08 <_malloc_r+0x520>
 8000a6c:	3000ab0e 	bge	r6,zero,8000d1c <_malloc_r+0x534>
 8000a70:	84000317 	ldw	r16,12(r16)
 8000a74:	1c00a426 	beq	r3,r16,8000d08 <_malloc_r+0x520>
 8000a78:	80800117 	ldw	r2,4(r16)
 8000a7c:	1204703a 	and	r2,r2,r8
 8000a80:	144dc83a 	sub	r6,r2,r17
 8000a84:	29bff90e 	bge	r5,r6,8000a6c <_malloc_r+0x284>
 8000a88:	81000317 	ldw	r4,12(r16)
 8000a8c:	80c00217 	ldw	r3,8(r16)
 8000a90:	89400054 	ori	r5,r17,1
 8000a94:	8445883a 	add	r2,r16,r17
 8000a98:	20c00215 	stw	r3,8(r4)
 8000a9c:	19000315 	stw	r4,12(r3)
 8000aa0:	81400115 	stw	r5,4(r16)
 8000aa4:	1187883a 	add	r3,r2,r6
 8000aa8:	31000054 	ori	r4,r6,1
 8000aac:	50800315 	stw	r2,12(r10)
 8000ab0:	50800215 	stw	r2,8(r10)
 8000ab4:	19800015 	stw	r6,0(r3)
 8000ab8:	11000115 	stw	r4,4(r2)
 8000abc:	12800215 	stw	r10,8(r2)
 8000ac0:	12800315 	stw	r10,12(r2)
 8000ac4:	9009883a 	mov	r4,r18
 8000ac8:	80032540 	call	8003254 <__malloc_unlock>
 8000acc:	80c00204 	addi	r3,r16,8
 8000ad0:	003f5906 	br	8000838 <_malloc_r+0x50>
 8000ad4:	8109883a 	add	r4,r16,r4
 8000ad8:	20800117 	ldw	r2,4(r4)
 8000adc:	80c00217 	ldw	r3,8(r16)
 8000ae0:	81400317 	ldw	r5,12(r16)
 8000ae4:	10800054 	ori	r2,r2,1
 8000ae8:	20800115 	stw	r2,4(r4)
 8000aec:	28c00215 	stw	r3,8(r5)
 8000af0:	19400315 	stw	r5,12(r3)
 8000af4:	9009883a 	mov	r4,r18
 8000af8:	80032540 	call	8003254 <__malloc_unlock>
 8000afc:	80c00204 	addi	r3,r16,8
 8000b00:	003f4d06 	br	8000838 <_malloc_r+0x50>
 8000b04:	80800204 	addi	r2,r16,8
 8000b08:	14000317 	ldw	r16,12(r2)
 8000b0c:	143f911e 	bne	r2,r16,8000954 <_malloc_r+0x16c>
 8000b10:	1a400084 	addi	r9,r3,2
 8000b14:	003f7306 	br	80008e4 <_malloc_r+0xfc>
 8000b18:	88c00054 	ori	r3,r17,1
 8000b1c:	8445883a 	add	r2,r16,r17
 8000b20:	80c00115 	stw	r3,4(r16)
 8000b24:	003fdf06 	br	8000aa4 <_malloc_r+0x2bc>
 8000b28:	e4000217 	ldw	r16,8(fp)
 8000b2c:	00bfff04 	movi	r2,-4
 8000b30:	80c00117 	ldw	r3,4(r16)
 8000b34:	802d883a 	mov	r22,r16
 8000b38:	18aa703a 	and	r21,r3,r2
 8000b3c:	ac401636 	bltu	r21,r17,8000b98 <_malloc_r+0x3b0>
 8000b40:	ac49c83a 	sub	r4,r21,r17
 8000b44:	008003c4 	movi	r2,15
 8000b48:	1100130e 	bge	r2,r4,8000b98 <_malloc_r+0x3b0>
 8000b4c:	88800054 	ori	r2,r17,1
 8000b50:	8447883a 	add	r3,r16,r17
 8000b54:	80800115 	stw	r2,4(r16)
 8000b58:	20800054 	ori	r2,r4,1
 8000b5c:	18800115 	stw	r2,4(r3)
 8000b60:	e0c00215 	stw	r3,8(fp)
 8000b64:	9009883a 	mov	r4,r18
 8000b68:	80032540 	call	8003254 <__malloc_unlock>
 8000b6c:	80c00204 	addi	r3,r16,8
 8000b70:	003f3106 	br	8000838 <_malloc_r+0x50>
 8000b74:	39c00117 	ldw	r7,4(r7)
 8000b78:	573ffe04 	addi	fp,r10,-8
 8000b7c:	003fa006 	br	8000a00 <_malloc_r+0x218>
 8000b80:	00801504 	movi	r2,84
 8000b84:	10c06736 	bltu	r2,r3,8000d24 <_malloc_r+0x53c>
 8000b88:	8804d33a 	srli	r2,r17,12
 8000b8c:	11801b84 	addi	r6,r2,110
 8000b90:	300490fa 	slli	r2,r6,3
 8000b94:	003f4106 	br	800089c <_malloc_r+0xb4>
 8000b98:	d0a6ab17 	ldw	r2,-25940(gp)
 8000b9c:	d0e00317 	ldw	r3,-32756(gp)
 8000ba0:	053fffc4 	movi	r20,-1
 8000ba4:	10800404 	addi	r2,r2,16
 8000ba8:	88a7883a 	add	r19,r17,r2
 8000bac:	1d000326 	beq	r3,r20,8000bbc <_malloc_r+0x3d4>
 8000bb0:	98c3ffc4 	addi	r3,r19,4095
 8000bb4:	00bc0004 	movi	r2,-4096
 8000bb8:	18a6703a 	and	r19,r3,r2
 8000bbc:	9009883a 	mov	r4,r18
 8000bc0:	980b883a 	mov	r5,r19
 8000bc4:	80017800 	call	8001780 <_sbrk_r>
 8000bc8:	1009883a 	mov	r4,r2
 8000bcc:	15000426 	beq	r2,r20,8000be0 <_malloc_r+0x3f8>
 8000bd0:	854b883a 	add	r5,r16,r21
 8000bd4:	1029883a 	mov	r20,r2
 8000bd8:	11405a2e 	bgeu	r2,r5,8000d44 <_malloc_r+0x55c>
 8000bdc:	87000c26 	beq	r16,fp,8000c10 <_malloc_r+0x428>
 8000be0:	e4000217 	ldw	r16,8(fp)
 8000be4:	80c00117 	ldw	r3,4(r16)
 8000be8:	00bfff04 	movi	r2,-4
 8000bec:	1884703a 	and	r2,r3,r2
 8000bf0:	14400336 	bltu	r2,r17,8000c00 <_malloc_r+0x418>
 8000bf4:	1449c83a 	sub	r4,r2,r17
 8000bf8:	008003c4 	movi	r2,15
 8000bfc:	113fd316 	blt	r2,r4,8000b4c <_malloc_r+0x364>
 8000c00:	9009883a 	mov	r4,r18
 8000c04:	80032540 	call	8003254 <__malloc_unlock>
 8000c08:	0007883a 	mov	r3,zero
 8000c0c:	003f0a06 	br	8000838 <_malloc_r+0x50>
 8000c10:	05c20074 	movhi	r23,2049
 8000c14:	bde29804 	addi	r23,r23,-30112
 8000c18:	b8800017 	ldw	r2,0(r23)
 8000c1c:	988d883a 	add	r6,r19,r2
 8000c20:	b9800015 	stw	r6,0(r23)
 8000c24:	d0e00317 	ldw	r3,-32756(gp)
 8000c28:	00bfffc4 	movi	r2,-1
 8000c2c:	18808e26 	beq	r3,r2,8000e68 <_malloc_r+0x680>
 8000c30:	2145c83a 	sub	r2,r4,r5
 8000c34:	3085883a 	add	r2,r6,r2
 8000c38:	b8800015 	stw	r2,0(r23)
 8000c3c:	20c001cc 	andi	r3,r4,7
 8000c40:	18005f1e 	bne	r3,zero,8000dc0 <_malloc_r+0x5d8>
 8000c44:	000b883a 	mov	r5,zero
 8000c48:	a4c5883a 	add	r2,r20,r19
 8000c4c:	1083ffcc 	andi	r2,r2,4095
 8000c50:	00c40004 	movi	r3,4096
 8000c54:	1887c83a 	sub	r3,r3,r2
 8000c58:	28e7883a 	add	r19,r5,r3
 8000c5c:	9009883a 	mov	r4,r18
 8000c60:	980b883a 	mov	r5,r19
 8000c64:	80017800 	call	8001780 <_sbrk_r>
 8000c68:	1007883a 	mov	r3,r2
 8000c6c:	00bfffc4 	movi	r2,-1
 8000c70:	18807a26 	beq	r3,r2,8000e5c <_malloc_r+0x674>
 8000c74:	1d05c83a 	sub	r2,r3,r20
 8000c78:	9885883a 	add	r2,r19,r2
 8000c7c:	10c00054 	ori	r3,r2,1
 8000c80:	b8800017 	ldw	r2,0(r23)
 8000c84:	a021883a 	mov	r16,r20
 8000c88:	a0c00115 	stw	r3,4(r20)
 8000c8c:	9885883a 	add	r2,r19,r2
 8000c90:	b8800015 	stw	r2,0(r23)
 8000c94:	e5000215 	stw	r20,8(fp)
 8000c98:	b7003626 	beq	r22,fp,8000d74 <_malloc_r+0x58c>
 8000c9c:	018003c4 	movi	r6,15
 8000ca0:	35404b36 	bltu	r6,r21,8000dd0 <_malloc_r+0x5e8>
 8000ca4:	00800044 	movi	r2,1
 8000ca8:	a0800115 	stw	r2,4(r20)
 8000cac:	003fcd06 	br	8000be4 <_malloc_r+0x3fc>
 8000cb0:	2808d27a 	srli	r4,r5,9
 8000cb4:	2000371e 	bne	r4,zero,8000d94 <_malloc_r+0x5ac>
 8000cb8:	2808d0fa 	srli	r4,r5,3
 8000cbc:	200690fa 	slli	r3,r4,3
 8000cc0:	1ad1883a 	add	r8,r3,r11
 8000cc4:	41800217 	ldw	r6,8(r8)
 8000cc8:	41805b26 	beq	r8,r6,8000e38 <_malloc_r+0x650>
 8000ccc:	30800117 	ldw	r2,4(r6)
 8000cd0:	00ffff04 	movi	r3,-4
 8000cd4:	10c4703a 	and	r2,r2,r3
 8000cd8:	2880022e 	bgeu	r5,r2,8000ce4 <_malloc_r+0x4fc>
 8000cdc:	31800217 	ldw	r6,8(r6)
 8000ce0:	41bffa1e 	bne	r8,r6,8000ccc <_malloc_r+0x4e4>
 8000ce4:	32000317 	ldw	r8,12(r6)
 8000ce8:	39c00117 	ldw	r7,4(r7)
 8000cec:	82000315 	stw	r8,12(r16)
 8000cf0:	81800215 	stw	r6,8(r16)
 8000cf4:	07020034 	movhi	fp,2048
 8000cf8:	e7165404 	addi	fp,fp,22864
 8000cfc:	34000315 	stw	r16,12(r6)
 8000d00:	44000215 	stw	r16,8(r8)
 8000d04:	003f3e06 	br	8000a00 <_malloc_r+0x218>
 8000d08:	63000044 	addi	r12,r12,1
 8000d0c:	608000cc 	andi	r2,r12,3
 8000d10:	10005d26 	beq	r2,zero,8000e88 <_malloc_r+0x6a0>
 8000d14:	18c00204 	addi	r3,r3,8
 8000d18:	003f5106 	br	8000a60 <_malloc_r+0x278>
 8000d1c:	8089883a 	add	r4,r16,r2
 8000d20:	003f6d06 	br	8000ad8 <_malloc_r+0x2f0>
 8000d24:	00805504 	movi	r2,340
 8000d28:	10c02036 	bltu	r2,r3,8000dac <_malloc_r+0x5c4>
 8000d2c:	8804d3fa 	srli	r2,r17,15
 8000d30:	11801dc4 	addi	r6,r2,119
 8000d34:	300490fa 	slli	r2,r6,3
 8000d38:	003ed806 	br	800089c <_malloc_r+0xb4>
 8000d3c:	48c000c4 	addi	r3,r9,3
 8000d40:	003f3106 	br	8000a08 <_malloc_r+0x220>
 8000d44:	05c20074 	movhi	r23,2049
 8000d48:	bde29804 	addi	r23,r23,-30112
 8000d4c:	b8800017 	ldw	r2,0(r23)
 8000d50:	988d883a 	add	r6,r19,r2
 8000d54:	b9800015 	stw	r6,0(r23)
 8000d58:	293fb21e 	bne	r5,r4,8000c24 <_malloc_r+0x43c>
 8000d5c:	2083ffcc 	andi	r2,r4,4095
 8000d60:	103fb01e 	bne	r2,zero,8000c24 <_malloc_r+0x43c>
 8000d64:	e4000217 	ldw	r16,8(fp)
 8000d68:	9d45883a 	add	r2,r19,r21
 8000d6c:	10800054 	ori	r2,r2,1
 8000d70:	80800115 	stw	r2,4(r16)
 8000d74:	b8c00017 	ldw	r3,0(r23)
 8000d78:	d0a6ac17 	ldw	r2,-25936(gp)
 8000d7c:	10c0012e 	bgeu	r2,r3,8000d84 <_malloc_r+0x59c>
 8000d80:	d0e6ac15 	stw	r3,-25936(gp)
 8000d84:	d0a6ad17 	ldw	r2,-25932(gp)
 8000d88:	10ff962e 	bgeu	r2,r3,8000be4 <_malloc_r+0x3fc>
 8000d8c:	d0e6ad15 	stw	r3,-25932(gp)
 8000d90:	003f9406 	br	8000be4 <_malloc_r+0x3fc>
 8000d94:	00800104 	movi	r2,4
 8000d98:	11001e36 	bltu	r2,r4,8000e14 <_malloc_r+0x62c>
 8000d9c:	2804d1ba 	srli	r2,r5,6
 8000da0:	11000e04 	addi	r4,r2,56
 8000da4:	200690fa 	slli	r3,r4,3
 8000da8:	003fc506 	br	8000cc0 <_malloc_r+0x4d8>
 8000dac:	00815504 	movi	r2,1364
 8000db0:	10c01d2e 	bgeu	r2,r3,8000e28 <_malloc_r+0x640>
 8000db4:	01801f84 	movi	r6,126
 8000db8:	0080fc04 	movi	r2,1008
 8000dbc:	003eb706 	br	800089c <_malloc_r+0xb4>
 8000dc0:	00800204 	movi	r2,8
 8000dc4:	10cbc83a 	sub	r5,r2,r3
 8000dc8:	2169883a 	add	r20,r4,r5
 8000dcc:	003f9e06 	br	8000c48 <_malloc_r+0x460>
 8000dd0:	00bffe04 	movi	r2,-8
 8000dd4:	a93ffd04 	addi	r4,r21,-12
 8000dd8:	2088703a 	and	r4,r4,r2
 8000ddc:	b10b883a 	add	r5,r22,r4
 8000de0:	00c00144 	movi	r3,5
 8000de4:	28c00215 	stw	r3,8(r5)
 8000de8:	28c00115 	stw	r3,4(r5)
 8000dec:	b0800117 	ldw	r2,4(r22)
 8000df0:	1080004c 	andi	r2,r2,1
 8000df4:	2084b03a 	or	r2,r4,r2
 8000df8:	b0800115 	stw	r2,4(r22)
 8000dfc:	313fdd2e 	bgeu	r6,r4,8000d74 <_malloc_r+0x58c>
 8000e00:	b1400204 	addi	r5,r22,8
 8000e04:	9009883a 	mov	r4,r18
 8000e08:	8001f7c0 	call	8001f7c <_free_r>
 8000e0c:	e4000217 	ldw	r16,8(fp)
 8000e10:	003fd806 	br	8000d74 <_malloc_r+0x58c>
 8000e14:	00800504 	movi	r2,20
 8000e18:	11001536 	bltu	r2,r4,8000e70 <_malloc_r+0x688>
 8000e1c:	210016c4 	addi	r4,r4,91
 8000e20:	200690fa 	slli	r3,r4,3
 8000e24:	003fa606 	br	8000cc0 <_malloc_r+0x4d8>
 8000e28:	8804d4ba 	srli	r2,r17,18
 8000e2c:	11801f04 	addi	r6,r2,124
 8000e30:	300490fa 	slli	r2,r6,3
 8000e34:	003e9906 	br	800089c <_malloc_r+0xb4>
 8000e38:	2009d0ba 	srai	r4,r4,2
 8000e3c:	01420034 	movhi	r5,2048
 8000e40:	29565404 	addi	r5,r5,22864
 8000e44:	00c00044 	movi	r3,1
 8000e48:	28800117 	ldw	r2,4(r5)
 8000e4c:	1906983a 	sll	r3,r3,r4
 8000e50:	10c4b03a 	or	r2,r2,r3
 8000e54:	28800115 	stw	r2,4(r5)
 8000e58:	003fa306 	br	8000ce8 <_malloc_r+0x500>
 8000e5c:	0027883a 	mov	r19,zero
 8000e60:	00c00044 	movi	r3,1
 8000e64:	003f8606 	br	8000c80 <_malloc_r+0x498>
 8000e68:	d1200315 	stw	r4,-32756(gp)
 8000e6c:	003f7306 	br	8000c3c <_malloc_r+0x454>
 8000e70:	00801504 	movi	r2,84
 8000e74:	11001936 	bltu	r2,r4,8000edc <_malloc_r+0x6f4>
 8000e78:	2804d33a 	srli	r2,r5,12
 8000e7c:	11001b84 	addi	r4,r2,110
 8000e80:	200690fa 	slli	r3,r4,3
 8000e84:	003f8e06 	br	8000cc0 <_malloc_r+0x4d8>
 8000e88:	480b883a 	mov	r5,r9
 8000e8c:	6807883a 	mov	r3,r13
 8000e90:	288000cc 	andi	r2,r5,3
 8000e94:	18fffe04 	addi	r3,r3,-8
 8000e98:	297fffc4 	addi	r5,r5,-1
 8000e9c:	10001526 	beq	r2,zero,8000ef4 <_malloc_r+0x70c>
 8000ea0:	18800217 	ldw	r2,8(r3)
 8000ea4:	10fffa26 	beq	r2,r3,8000e90 <_malloc_r+0x6a8>
 8000ea8:	2109883a 	add	r4,r4,r4
 8000eac:	393f1e36 	bltu	r7,r4,8000b28 <_malloc_r+0x340>
 8000eb0:	203f1d26 	beq	r4,zero,8000b28 <_malloc_r+0x340>
 8000eb4:	21c4703a 	and	r2,r4,r7
 8000eb8:	10000226 	beq	r2,zero,8000ec4 <_malloc_r+0x6dc>
 8000ebc:	6013883a 	mov	r9,r12
 8000ec0:	003ee106 	br	8000a48 <_malloc_r+0x260>
 8000ec4:	2109883a 	add	r4,r4,r4
 8000ec8:	3904703a 	and	r2,r7,r4
 8000ecc:	63000104 	addi	r12,r12,4
 8000ed0:	103ffc26 	beq	r2,zero,8000ec4 <_malloc_r+0x6dc>
 8000ed4:	6013883a 	mov	r9,r12
 8000ed8:	003edb06 	br	8000a48 <_malloc_r+0x260>
 8000edc:	00805504 	movi	r2,340
 8000ee0:	11000836 	bltu	r2,r4,8000f04 <_malloc_r+0x71c>
 8000ee4:	2804d3fa 	srli	r2,r5,15
 8000ee8:	11001dc4 	addi	r4,r2,119
 8000eec:	200690fa 	slli	r3,r4,3
 8000ef0:	003f7306 	br	8000cc0 <_malloc_r+0x4d8>
 8000ef4:	0104303a 	nor	r2,zero,r4
 8000ef8:	388e703a 	and	r7,r7,r2
 8000efc:	e1c00115 	stw	r7,4(fp)
 8000f00:	003fe906 	br	8000ea8 <_malloc_r+0x6c0>
 8000f04:	00815504 	movi	r2,1364
 8000f08:	1100032e 	bgeu	r2,r4,8000f18 <_malloc_r+0x730>
 8000f0c:	01001f84 	movi	r4,126
 8000f10:	00c0fc04 	movi	r3,1008
 8000f14:	003f6a06 	br	8000cc0 <_malloc_r+0x4d8>
 8000f18:	2804d4ba 	srli	r2,r5,18
 8000f1c:	11001f04 	addi	r4,r2,124
 8000f20:	200690fa 	slli	r3,r4,3
 8000f24:	003f6606 	br	8000cc0 <_malloc_r+0x4d8>

08000f28 <memchr>:
 8000f28:	008000c4 	movi	r2,3
 8000f2c:	29403fcc 	andi	r5,r5,255
 8000f30:	2007883a 	mov	r3,r4
 8000f34:	1180022e 	bgeu	r2,r6,8000f40 <memchr+0x18>
 8000f38:	2084703a 	and	r2,r4,r2
 8000f3c:	10000b26 	beq	r2,zero,8000f6c <memchr+0x44>
 8000f40:	313fffc4 	addi	r4,r6,-1
 8000f44:	3000051e 	bne	r6,zero,8000f5c <memchr+0x34>
 8000f48:	00002c06 	br	8000ffc <memchr+0xd4>
 8000f4c:	213fffc4 	addi	r4,r4,-1
 8000f50:	00bfffc4 	movi	r2,-1
 8000f54:	18c00044 	addi	r3,r3,1
 8000f58:	20802826 	beq	r4,r2,8000ffc <memchr+0xd4>
 8000f5c:	18800003 	ldbu	r2,0(r3)
 8000f60:	28bffa1e 	bne	r5,r2,8000f4c <memchr+0x24>
 8000f64:	1805883a 	mov	r2,r3
 8000f68:	f800283a 	ret
 8000f6c:	0011883a 	mov	r8,zero
 8000f70:	0007883a 	mov	r3,zero
 8000f74:	01c00104 	movi	r7,4
 8000f78:	4004923a 	slli	r2,r8,8
 8000f7c:	18c00044 	addi	r3,r3,1
 8000f80:	1151883a 	add	r8,r2,r5
 8000f84:	19fffc1e 	bne	r3,r7,8000f78 <memchr+0x50>
 8000f88:	02bfbff4 	movhi	r10,65279
 8000f8c:	52bfbfc4 	addi	r10,r10,-257
 8000f90:	02602074 	movhi	r9,32897
 8000f94:	4a602004 	addi	r9,r9,-32640
 8000f98:	02c000c4 	movi	r11,3
 8000f9c:	20800017 	ldw	r2,0(r4)
 8000fa0:	31bfff04 	addi	r6,r6,-4
 8000fa4:	200f883a 	mov	r7,r4
 8000fa8:	1204f03a 	xor	r2,r2,r8
 8000fac:	1287883a 	add	r3,r2,r10
 8000fb0:	1a46703a 	and	r3,r3,r9
 8000fb4:	0084303a 	nor	r2,zero,r2
 8000fb8:	10c4703a 	and	r2,r2,r3
 8000fbc:	10000b26 	beq	r2,zero,8000fec <memchr+0xc4>
 8000fc0:	20800003 	ldbu	r2,0(r4)
 8000fc4:	28800f26 	beq	r5,r2,8001004 <memchr+0xdc>
 8000fc8:	20800043 	ldbu	r2,1(r4)
 8000fcc:	21c00044 	addi	r7,r4,1
 8000fd0:	28800c26 	beq	r5,r2,8001004 <memchr+0xdc>
 8000fd4:	20800083 	ldbu	r2,2(r4)
 8000fd8:	21c00084 	addi	r7,r4,2
 8000fdc:	28800926 	beq	r5,r2,8001004 <memchr+0xdc>
 8000fe0:	208000c3 	ldbu	r2,3(r4)
 8000fe4:	21c000c4 	addi	r7,r4,3
 8000fe8:	28800626 	beq	r5,r2,8001004 <memchr+0xdc>
 8000fec:	21000104 	addi	r4,r4,4
 8000ff0:	59bfea36 	bltu	r11,r6,8000f9c <memchr+0x74>
 8000ff4:	2007883a 	mov	r3,r4
 8000ff8:	003fd106 	br	8000f40 <memchr+0x18>
 8000ffc:	0005883a 	mov	r2,zero
 8001000:	f800283a 	ret
 8001004:	3805883a 	mov	r2,r7
 8001008:	f800283a 	ret

0800100c <memcpy>:
 800100c:	01c003c4 	movi	r7,15
 8001010:	2007883a 	mov	r3,r4
 8001014:	3980032e 	bgeu	r7,r6,8001024 <memcpy+0x18>
 8001018:	2904b03a 	or	r2,r5,r4
 800101c:	108000cc 	andi	r2,r2,3
 8001020:	10000926 	beq	r2,zero,8001048 <memcpy+0x3c>
 8001024:	30000626 	beq	r6,zero,8001040 <memcpy+0x34>
 8001028:	30cd883a 	add	r6,r6,r3
 800102c:	28800003 	ldbu	r2,0(r5)
 8001030:	29400044 	addi	r5,r5,1
 8001034:	18800005 	stb	r2,0(r3)
 8001038:	18c00044 	addi	r3,r3,1
 800103c:	30fffb1e 	bne	r6,r3,800102c <memcpy+0x20>
 8001040:	2005883a 	mov	r2,r4
 8001044:	f800283a 	ret
 8001048:	3811883a 	mov	r8,r7
 800104c:	200f883a 	mov	r7,r4
 8001050:	28c00017 	ldw	r3,0(r5)
 8001054:	31bffc04 	addi	r6,r6,-16
 8001058:	38c00015 	stw	r3,0(r7)
 800105c:	28800117 	ldw	r2,4(r5)
 8001060:	38800115 	stw	r2,4(r7)
 8001064:	28c00217 	ldw	r3,8(r5)
 8001068:	38c00215 	stw	r3,8(r7)
 800106c:	28800317 	ldw	r2,12(r5)
 8001070:	29400404 	addi	r5,r5,16
 8001074:	38800315 	stw	r2,12(r7)
 8001078:	39c00404 	addi	r7,r7,16
 800107c:	41bff436 	bltu	r8,r6,8001050 <memcpy+0x44>
 8001080:	008000c4 	movi	r2,3
 8001084:	1180072e 	bgeu	r2,r6,80010a4 <memcpy+0x98>
 8001088:	1007883a 	mov	r3,r2
 800108c:	28800017 	ldw	r2,0(r5)
 8001090:	31bfff04 	addi	r6,r6,-4
 8001094:	29400104 	addi	r5,r5,4
 8001098:	38800015 	stw	r2,0(r7)
 800109c:	39c00104 	addi	r7,r7,4
 80010a0:	19bffa36 	bltu	r3,r6,800108c <memcpy+0x80>
 80010a4:	3807883a 	mov	r3,r7
 80010a8:	003fde06 	br	8001024 <memcpy+0x18>

080010ac <memmove>:
 80010ac:	2807883a 	mov	r3,r5
 80010b0:	2011883a 	mov	r8,r4
 80010b4:	29000c2e 	bgeu	r5,r4,80010e8 <memmove+0x3c>
 80010b8:	298f883a 	add	r7,r5,r6
 80010bc:	21c00a2e 	bgeu	r4,r7,80010e8 <memmove+0x3c>
 80010c0:	30000726 	beq	r6,zero,80010e0 <memmove+0x34>
 80010c4:	2187883a 	add	r3,r4,r6
 80010c8:	198dc83a 	sub	r6,r3,r6
 80010cc:	39ffffc4 	addi	r7,r7,-1
 80010d0:	38800003 	ldbu	r2,0(r7)
 80010d4:	18ffffc4 	addi	r3,r3,-1
 80010d8:	18800005 	stb	r2,0(r3)
 80010dc:	19bffb1e 	bne	r3,r6,80010cc <memmove+0x20>
 80010e0:	2005883a 	mov	r2,r4
 80010e4:	f800283a 	ret
 80010e8:	01c003c4 	movi	r7,15
 80010ec:	39800a36 	bltu	r7,r6,8001118 <memmove+0x6c>
 80010f0:	303ffb26 	beq	r6,zero,80010e0 <memmove+0x34>
 80010f4:	400f883a 	mov	r7,r8
 80010f8:	320d883a 	add	r6,r6,r8
 80010fc:	28800003 	ldbu	r2,0(r5)
 8001100:	29400044 	addi	r5,r5,1
 8001104:	38800005 	stb	r2,0(r7)
 8001108:	39c00044 	addi	r7,r7,1
 800110c:	39bffb1e 	bne	r7,r6,80010fc <memmove+0x50>
 8001110:	2005883a 	mov	r2,r4
 8001114:	f800283a 	ret
 8001118:	1904b03a 	or	r2,r3,r4
 800111c:	108000cc 	andi	r2,r2,3
 8001120:	103ff31e 	bne	r2,zero,80010f0 <memmove+0x44>
 8001124:	3811883a 	mov	r8,r7
 8001128:	180b883a 	mov	r5,r3
 800112c:	200f883a 	mov	r7,r4
 8001130:	28c00017 	ldw	r3,0(r5)
 8001134:	31bffc04 	addi	r6,r6,-16
 8001138:	38c00015 	stw	r3,0(r7)
 800113c:	28800117 	ldw	r2,4(r5)
 8001140:	38800115 	stw	r2,4(r7)
 8001144:	28c00217 	ldw	r3,8(r5)
 8001148:	38c00215 	stw	r3,8(r7)
 800114c:	28800317 	ldw	r2,12(r5)
 8001150:	29400404 	addi	r5,r5,16
 8001154:	38800315 	stw	r2,12(r7)
 8001158:	39c00404 	addi	r7,r7,16
 800115c:	41bff436 	bltu	r8,r6,8001130 <memmove+0x84>
 8001160:	008000c4 	movi	r2,3
 8001164:	1180072e 	bgeu	r2,r6,8001184 <memmove+0xd8>
 8001168:	1007883a 	mov	r3,r2
 800116c:	28800017 	ldw	r2,0(r5)
 8001170:	31bfff04 	addi	r6,r6,-4
 8001174:	29400104 	addi	r5,r5,4
 8001178:	38800015 	stw	r2,0(r7)
 800117c:	39c00104 	addi	r7,r7,4
 8001180:	19bffa36 	bltu	r3,r6,800116c <memmove+0xc0>
 8001184:	3811883a 	mov	r8,r7
 8001188:	003fd906 	br	80010f0 <memmove+0x44>

0800118c <_realloc_r>:
 800118c:	defff404 	addi	sp,sp,-48
 8001190:	dd800815 	stw	r22,32(sp)
 8001194:	dc800415 	stw	r18,16(sp)
 8001198:	dc400315 	stw	r17,12(sp)
 800119c:	dfc00b15 	stw	ra,44(sp)
 80011a0:	df000a15 	stw	fp,40(sp)
 80011a4:	ddc00915 	stw	r23,36(sp)
 80011a8:	dd400715 	stw	r21,28(sp)
 80011ac:	dd000615 	stw	r20,24(sp)
 80011b0:	dcc00515 	stw	r19,20(sp)
 80011b4:	dc000215 	stw	r16,8(sp)
 80011b8:	2825883a 	mov	r18,r5
 80011bc:	3023883a 	mov	r17,r6
 80011c0:	202d883a 	mov	r22,r4
 80011c4:	2800c926 	beq	r5,zero,80014ec <_realloc_r+0x360>
 80011c8:	80032340 	call	8003234 <__malloc_lock>
 80011cc:	943ffe04 	addi	r16,r18,-8
 80011d0:	88c002c4 	addi	r3,r17,11
 80011d4:	00800584 	movi	r2,22
 80011d8:	82000117 	ldw	r8,4(r16)
 80011dc:	10c01b2e 	bgeu	r2,r3,800124c <_realloc_r+0xc0>
 80011e0:	00bffe04 	movi	r2,-8
 80011e4:	188e703a 	and	r7,r3,r2
 80011e8:	3839883a 	mov	fp,r7
 80011ec:	38001a16 	blt	r7,zero,8001258 <_realloc_r+0xcc>
 80011f0:	e4401936 	bltu	fp,r17,8001258 <_realloc_r+0xcc>
 80011f4:	013fff04 	movi	r4,-4
 80011f8:	4126703a 	and	r19,r8,r4
 80011fc:	99c02616 	blt	r19,r7,8001298 <_realloc_r+0x10c>
 8001200:	802b883a 	mov	r21,r16
 8001204:	9829883a 	mov	r20,r19
 8001208:	84000204 	addi	r16,r16,8
 800120c:	a80f883a 	mov	r7,r21
 8001210:	a70dc83a 	sub	r6,r20,fp
 8001214:	008003c4 	movi	r2,15
 8001218:	1180c136 	bltu	r2,r6,8001520 <_realloc_r+0x394>
 800121c:	38800117 	ldw	r2,4(r7)
 8001220:	a549883a 	add	r4,r20,r21
 8001224:	1080004c 	andi	r2,r2,1
 8001228:	a084b03a 	or	r2,r20,r2
 800122c:	38800115 	stw	r2,4(r7)
 8001230:	20c00117 	ldw	r3,4(r4)
 8001234:	18c00054 	ori	r3,r3,1
 8001238:	20c00115 	stw	r3,4(r4)
 800123c:	b009883a 	mov	r4,r22
 8001240:	80032540 	call	8003254 <__malloc_unlock>
 8001244:	8023883a 	mov	r17,r16
 8001248:	00000606 	br	8001264 <_realloc_r+0xd8>
 800124c:	01c00404 	movi	r7,16
 8001250:	3839883a 	mov	fp,r7
 8001254:	e47fe72e 	bgeu	fp,r17,80011f4 <_realloc_r+0x68>
 8001258:	00800304 	movi	r2,12
 800125c:	0023883a 	mov	r17,zero
 8001260:	b0800015 	stw	r2,0(r22)
 8001264:	8805883a 	mov	r2,r17
 8001268:	dfc00b17 	ldw	ra,44(sp)
 800126c:	df000a17 	ldw	fp,40(sp)
 8001270:	ddc00917 	ldw	r23,36(sp)
 8001274:	dd800817 	ldw	r22,32(sp)
 8001278:	dd400717 	ldw	r21,28(sp)
 800127c:	dd000617 	ldw	r20,24(sp)
 8001280:	dcc00517 	ldw	r19,20(sp)
 8001284:	dc800417 	ldw	r18,16(sp)
 8001288:	dc400317 	ldw	r17,12(sp)
 800128c:	dc000217 	ldw	r16,8(sp)
 8001290:	dec00c04 	addi	sp,sp,48
 8001294:	f800283a 	ret
 8001298:	00820034 	movhi	r2,2048
 800129c:	10965404 	addi	r2,r2,22864
 80012a0:	12400217 	ldw	r9,8(r2)
 80012a4:	84cd883a 	add	r6,r16,r19
 80012a8:	802b883a 	mov	r21,r16
 80012ac:	3240b926 	beq	r6,r9,8001594 <_realloc_r+0x408>
 80012b0:	31400117 	ldw	r5,4(r6)
 80012b4:	00bfff84 	movi	r2,-2
 80012b8:	2884703a 	and	r2,r5,r2
 80012bc:	1185883a 	add	r2,r2,r6
 80012c0:	10c00117 	ldw	r3,4(r2)
 80012c4:	18c0004c 	andi	r3,r3,1
 80012c8:	1807003a 	cmpeq	r3,r3,zero
 80012cc:	1800a326 	beq	r3,zero,800155c <_realloc_r+0x3d0>
 80012d0:	2908703a 	and	r4,r5,r4
 80012d4:	9929883a 	add	r20,r19,r4
 80012d8:	a1c0a30e 	bge	r20,r7,8001568 <_realloc_r+0x3dc>
 80012dc:	4080004c 	andi	r2,r8,1
 80012e0:	1000551e 	bne	r2,zero,8001438 <_realloc_r+0x2ac>
 80012e4:	80800017 	ldw	r2,0(r16)
 80012e8:	80afc83a 	sub	r23,r16,r2
 80012ec:	b8c00117 	ldw	r3,4(r23)
 80012f0:	00bfff04 	movi	r2,-4
 80012f4:	1884703a 	and	r2,r3,r2
 80012f8:	30002e26 	beq	r6,zero,80013b4 <_realloc_r+0x228>
 80012fc:	3240b926 	beq	r6,r9,80015e4 <_realloc_r+0x458>
 8001300:	98a9883a 	add	r20,r19,r2
 8001304:	2509883a 	add	r4,r4,r20
 8001308:	d9000015 	stw	r4,0(sp)
 800130c:	21c02a16 	blt	r4,r7,80013b8 <_realloc_r+0x22c>
 8001310:	30800317 	ldw	r2,12(r6)
 8001314:	30c00217 	ldw	r3,8(r6)
 8001318:	01400904 	movi	r5,36
 800131c:	99bfff04 	addi	r6,r19,-4
 8001320:	18800315 	stw	r2,12(r3)
 8001324:	10c00215 	stw	r3,8(r2)
 8001328:	b9000317 	ldw	r4,12(r23)
 800132c:	b8800217 	ldw	r2,8(r23)
 8001330:	b82b883a 	mov	r21,r23
 8001334:	bc000204 	addi	r16,r23,8
 8001338:	20800215 	stw	r2,8(r4)
 800133c:	11000315 	stw	r4,12(r2)
 8001340:	2980e436 	bltu	r5,r6,80016d4 <_realloc_r+0x548>
 8001344:	008004c4 	movi	r2,19
 8001348:	9009883a 	mov	r4,r18
 800134c:	8011883a 	mov	r8,r16
 8001350:	11800f2e 	bgeu	r2,r6,8001390 <_realloc_r+0x204>
 8001354:	90800017 	ldw	r2,0(r18)
 8001358:	ba000404 	addi	r8,r23,16
 800135c:	91000204 	addi	r4,r18,8
 8001360:	b8800215 	stw	r2,8(r23)
 8001364:	90c00117 	ldw	r3,4(r18)
 8001368:	008006c4 	movi	r2,27
 800136c:	b8c00315 	stw	r3,12(r23)
 8001370:	1180072e 	bgeu	r2,r6,8001390 <_realloc_r+0x204>
 8001374:	90c00217 	ldw	r3,8(r18)
 8001378:	ba000604 	addi	r8,r23,24
 800137c:	91000404 	addi	r4,r18,16
 8001380:	b8c00415 	stw	r3,16(r23)
 8001384:	90800317 	ldw	r2,12(r18)
 8001388:	b8800515 	stw	r2,20(r23)
 800138c:	3140e726 	beq	r6,r5,800172c <_realloc_r+0x5a0>
 8001390:	20800017 	ldw	r2,0(r4)
 8001394:	dd000017 	ldw	r20,0(sp)
 8001398:	b80f883a 	mov	r7,r23
 800139c:	40800015 	stw	r2,0(r8)
 80013a0:	20c00117 	ldw	r3,4(r4)
 80013a4:	40c00115 	stw	r3,4(r8)
 80013a8:	20800217 	ldw	r2,8(r4)
 80013ac:	40800215 	stw	r2,8(r8)
 80013b0:	003f9706 	br	8001210 <_realloc_r+0x84>
 80013b4:	98a9883a 	add	r20,r19,r2
 80013b8:	a1c01f16 	blt	r20,r7,8001438 <_realloc_r+0x2ac>
 80013bc:	b8c00317 	ldw	r3,12(r23)
 80013c0:	b8800217 	ldw	r2,8(r23)
 80013c4:	99bfff04 	addi	r6,r19,-4
 80013c8:	01400904 	movi	r5,36
 80013cc:	b82b883a 	mov	r21,r23
 80013d0:	18800215 	stw	r2,8(r3)
 80013d4:	10c00315 	stw	r3,12(r2)
 80013d8:	bc000204 	addi	r16,r23,8
 80013dc:	2980c336 	bltu	r5,r6,80016ec <_realloc_r+0x560>
 80013e0:	008004c4 	movi	r2,19
 80013e4:	9009883a 	mov	r4,r18
 80013e8:	8011883a 	mov	r8,r16
 80013ec:	11800f2e 	bgeu	r2,r6,800142c <_realloc_r+0x2a0>
 80013f0:	90800017 	ldw	r2,0(r18)
 80013f4:	ba000404 	addi	r8,r23,16
 80013f8:	91000204 	addi	r4,r18,8
 80013fc:	b8800215 	stw	r2,8(r23)
 8001400:	90c00117 	ldw	r3,4(r18)
 8001404:	008006c4 	movi	r2,27
 8001408:	b8c00315 	stw	r3,12(r23)
 800140c:	1180072e 	bgeu	r2,r6,800142c <_realloc_r+0x2a0>
 8001410:	90c00217 	ldw	r3,8(r18)
 8001414:	ba000604 	addi	r8,r23,24
 8001418:	91000404 	addi	r4,r18,16
 800141c:	b8c00415 	stw	r3,16(r23)
 8001420:	90800317 	ldw	r2,12(r18)
 8001424:	b8800515 	stw	r2,20(r23)
 8001428:	3140c726 	beq	r6,r5,8001748 <_realloc_r+0x5bc>
 800142c:	20800017 	ldw	r2,0(r4)
 8001430:	b80f883a 	mov	r7,r23
 8001434:	003fd906 	br	800139c <_realloc_r+0x210>
 8001438:	880b883a 	mov	r5,r17
 800143c:	b009883a 	mov	r4,r22
 8001440:	80007e80 	call	80007e8 <_malloc_r>
 8001444:	1023883a 	mov	r17,r2
 8001448:	10002526 	beq	r2,zero,80014e0 <_realloc_r+0x354>
 800144c:	80800117 	ldw	r2,4(r16)
 8001450:	00ffff84 	movi	r3,-2
 8001454:	893ffe04 	addi	r4,r17,-8
 8001458:	10c4703a 	and	r2,r2,r3
 800145c:	8085883a 	add	r2,r16,r2
 8001460:	20809526 	beq	r4,r2,80016b8 <_realloc_r+0x52c>
 8001464:	99bfff04 	addi	r6,r19,-4
 8001468:	01c00904 	movi	r7,36
 800146c:	39804536 	bltu	r7,r6,8001584 <_realloc_r+0x3f8>
 8001470:	008004c4 	movi	r2,19
 8001474:	9009883a 	mov	r4,r18
 8001478:	880b883a 	mov	r5,r17
 800147c:	11800f2e 	bgeu	r2,r6,80014bc <_realloc_r+0x330>
 8001480:	90800017 	ldw	r2,0(r18)
 8001484:	89400204 	addi	r5,r17,8
 8001488:	91000204 	addi	r4,r18,8
 800148c:	88800015 	stw	r2,0(r17)
 8001490:	90c00117 	ldw	r3,4(r18)
 8001494:	008006c4 	movi	r2,27
 8001498:	88c00115 	stw	r3,4(r17)
 800149c:	1180072e 	bgeu	r2,r6,80014bc <_realloc_r+0x330>
 80014a0:	90c00217 	ldw	r3,8(r18)
 80014a4:	89400404 	addi	r5,r17,16
 80014a8:	91000404 	addi	r4,r18,16
 80014ac:	88c00215 	stw	r3,8(r17)
 80014b0:	90800317 	ldw	r2,12(r18)
 80014b4:	88800315 	stw	r2,12(r17)
 80014b8:	31c09126 	beq	r6,r7,8001700 <_realloc_r+0x574>
 80014bc:	20800017 	ldw	r2,0(r4)
 80014c0:	28800015 	stw	r2,0(r5)
 80014c4:	20c00117 	ldw	r3,4(r4)
 80014c8:	28c00115 	stw	r3,4(r5)
 80014cc:	20800217 	ldw	r2,8(r4)
 80014d0:	28800215 	stw	r2,8(r5)
 80014d4:	900b883a 	mov	r5,r18
 80014d8:	b009883a 	mov	r4,r22
 80014dc:	8001f7c0 	call	8001f7c <_free_r>
 80014e0:	b009883a 	mov	r4,r22
 80014e4:	80032540 	call	8003254 <__malloc_unlock>
 80014e8:	003f5e06 	br	8001264 <_realloc_r+0xd8>
 80014ec:	300b883a 	mov	r5,r6
 80014f0:	dfc00b17 	ldw	ra,44(sp)
 80014f4:	df000a17 	ldw	fp,40(sp)
 80014f8:	ddc00917 	ldw	r23,36(sp)
 80014fc:	dd800817 	ldw	r22,32(sp)
 8001500:	dd400717 	ldw	r21,28(sp)
 8001504:	dd000617 	ldw	r20,24(sp)
 8001508:	dcc00517 	ldw	r19,20(sp)
 800150c:	dc800417 	ldw	r18,16(sp)
 8001510:	dc400317 	ldw	r17,12(sp)
 8001514:	dc000217 	ldw	r16,8(sp)
 8001518:	dec00c04 	addi	sp,sp,48
 800151c:	80007e81 	jmpi	80007e8 <_malloc_r>
 8001520:	38800117 	ldw	r2,4(r7)
 8001524:	e54b883a 	add	r5,fp,r21
 8001528:	31000054 	ori	r4,r6,1
 800152c:	1080004c 	andi	r2,r2,1
 8001530:	1704b03a 	or	r2,r2,fp
 8001534:	38800115 	stw	r2,4(r7)
 8001538:	29000115 	stw	r4,4(r5)
 800153c:	2987883a 	add	r3,r5,r6
 8001540:	18800117 	ldw	r2,4(r3)
 8001544:	29400204 	addi	r5,r5,8
 8001548:	b009883a 	mov	r4,r22
 800154c:	10800054 	ori	r2,r2,1
 8001550:	18800115 	stw	r2,4(r3)
 8001554:	8001f7c0 	call	8001f7c <_free_r>
 8001558:	003f3806 	br	800123c <_realloc_r+0xb0>
 800155c:	000d883a 	mov	r6,zero
 8001560:	0009883a 	mov	r4,zero
 8001564:	003f5d06 	br	80012dc <_realloc_r+0x150>
 8001568:	30c00217 	ldw	r3,8(r6)
 800156c:	30800317 	ldw	r2,12(r6)
 8001570:	800f883a 	mov	r7,r16
 8001574:	84000204 	addi	r16,r16,8
 8001578:	10c00215 	stw	r3,8(r2)
 800157c:	18800315 	stw	r2,12(r3)
 8001580:	003f2306 	br	8001210 <_realloc_r+0x84>
 8001584:	8809883a 	mov	r4,r17
 8001588:	900b883a 	mov	r5,r18
 800158c:	80010ac0 	call	80010ac <memmove>
 8001590:	003fd006 	br	80014d4 <_realloc_r+0x348>
 8001594:	30800117 	ldw	r2,4(r6)
 8001598:	e0c00404 	addi	r3,fp,16
 800159c:	1108703a 	and	r4,r2,r4
 80015a0:	9905883a 	add	r2,r19,r4
 80015a4:	10ff4d16 	blt	r2,r3,80012dc <_realloc_r+0x150>
 80015a8:	1705c83a 	sub	r2,r2,fp
 80015ac:	870b883a 	add	r5,r16,fp
 80015b0:	10800054 	ori	r2,r2,1
 80015b4:	28800115 	stw	r2,4(r5)
 80015b8:	80c00117 	ldw	r3,4(r16)
 80015bc:	00820034 	movhi	r2,2048
 80015c0:	10965404 	addi	r2,r2,22864
 80015c4:	b009883a 	mov	r4,r22
 80015c8:	18c0004c 	andi	r3,r3,1
 80015cc:	e0c6b03a 	or	r3,fp,r3
 80015d0:	11400215 	stw	r5,8(r2)
 80015d4:	80c00115 	stw	r3,4(r16)
 80015d8:	80032540 	call	8003254 <__malloc_unlock>
 80015dc:	84400204 	addi	r17,r16,8
 80015e0:	003f2006 	br	8001264 <_realloc_r+0xd8>
 80015e4:	98a9883a 	add	r20,r19,r2
 80015e8:	2509883a 	add	r4,r4,r20
 80015ec:	e0800404 	addi	r2,fp,16
 80015f0:	d9000115 	stw	r4,4(sp)
 80015f4:	20bf7016 	blt	r4,r2,80013b8 <_realloc_r+0x22c>
 80015f8:	b8c00317 	ldw	r3,12(r23)
 80015fc:	b8800217 	ldw	r2,8(r23)
 8001600:	99bfff04 	addi	r6,r19,-4
 8001604:	01400904 	movi	r5,36
 8001608:	18800215 	stw	r2,8(r3)
 800160c:	10c00315 	stw	r3,12(r2)
 8001610:	bc400204 	addi	r17,r23,8
 8001614:	29804136 	bltu	r5,r6,800171c <_realloc_r+0x590>
 8001618:	008004c4 	movi	r2,19
 800161c:	9009883a 	mov	r4,r18
 8001620:	880f883a 	mov	r7,r17
 8001624:	11800f2e 	bgeu	r2,r6,8001664 <_realloc_r+0x4d8>
 8001628:	90800017 	ldw	r2,0(r18)
 800162c:	b9c00404 	addi	r7,r23,16
 8001630:	91000204 	addi	r4,r18,8
 8001634:	b8800215 	stw	r2,8(r23)
 8001638:	90c00117 	ldw	r3,4(r18)
 800163c:	008006c4 	movi	r2,27
 8001640:	b8c00315 	stw	r3,12(r23)
 8001644:	1180072e 	bgeu	r2,r6,8001664 <_realloc_r+0x4d8>
 8001648:	90c00217 	ldw	r3,8(r18)
 800164c:	b9c00604 	addi	r7,r23,24
 8001650:	91000404 	addi	r4,r18,16
 8001654:	b8c00415 	stw	r3,16(r23)
 8001658:	90800317 	ldw	r2,12(r18)
 800165c:	b8800515 	stw	r2,20(r23)
 8001660:	31404026 	beq	r6,r5,8001764 <_realloc_r+0x5d8>
 8001664:	20800017 	ldw	r2,0(r4)
 8001668:	38800015 	stw	r2,0(r7)
 800166c:	20c00117 	ldw	r3,4(r4)
 8001670:	38c00115 	stw	r3,4(r7)
 8001674:	20800217 	ldw	r2,8(r4)
 8001678:	38800215 	stw	r2,8(r7)
 800167c:	d8c00117 	ldw	r3,4(sp)
 8001680:	bf0b883a 	add	r5,r23,fp
 8001684:	b009883a 	mov	r4,r22
 8001688:	1f05c83a 	sub	r2,r3,fp
 800168c:	10800054 	ori	r2,r2,1
 8001690:	28800115 	stw	r2,4(r5)
 8001694:	b8c00117 	ldw	r3,4(r23)
 8001698:	00820034 	movhi	r2,2048
 800169c:	10965404 	addi	r2,r2,22864
 80016a0:	11400215 	stw	r5,8(r2)
 80016a4:	18c0004c 	andi	r3,r3,1
 80016a8:	e0c6b03a 	or	r3,fp,r3
 80016ac:	b8c00115 	stw	r3,4(r23)
 80016b0:	80032540 	call	8003254 <__malloc_unlock>
 80016b4:	003eeb06 	br	8001264 <_realloc_r+0xd8>
 80016b8:	20800117 	ldw	r2,4(r4)
 80016bc:	00ffff04 	movi	r3,-4
 80016c0:	800f883a 	mov	r7,r16
 80016c4:	10c4703a 	and	r2,r2,r3
 80016c8:	98a9883a 	add	r20,r19,r2
 80016cc:	84000204 	addi	r16,r16,8
 80016d0:	003ecf06 	br	8001210 <_realloc_r+0x84>
 80016d4:	900b883a 	mov	r5,r18
 80016d8:	8009883a 	mov	r4,r16
 80016dc:	80010ac0 	call	80010ac <memmove>
 80016e0:	dd000017 	ldw	r20,0(sp)
 80016e4:	b80f883a 	mov	r7,r23
 80016e8:	003ec906 	br	8001210 <_realloc_r+0x84>
 80016ec:	900b883a 	mov	r5,r18
 80016f0:	8009883a 	mov	r4,r16
 80016f4:	80010ac0 	call	80010ac <memmove>
 80016f8:	b80f883a 	mov	r7,r23
 80016fc:	003ec406 	br	8001210 <_realloc_r+0x84>
 8001700:	90c00417 	ldw	r3,16(r18)
 8001704:	89400604 	addi	r5,r17,24
 8001708:	91000604 	addi	r4,r18,24
 800170c:	88c00415 	stw	r3,16(r17)
 8001710:	90800517 	ldw	r2,20(r18)
 8001714:	88800515 	stw	r2,20(r17)
 8001718:	003f6806 	br	80014bc <_realloc_r+0x330>
 800171c:	900b883a 	mov	r5,r18
 8001720:	8809883a 	mov	r4,r17
 8001724:	80010ac0 	call	80010ac <memmove>
 8001728:	003fd406 	br	800167c <_realloc_r+0x4f0>
 800172c:	90c00417 	ldw	r3,16(r18)
 8001730:	91000604 	addi	r4,r18,24
 8001734:	ba000804 	addi	r8,r23,32
 8001738:	b8c00615 	stw	r3,24(r23)
 800173c:	90800517 	ldw	r2,20(r18)
 8001740:	b8800715 	stw	r2,28(r23)
 8001744:	003f1206 	br	8001390 <_realloc_r+0x204>
 8001748:	90c00417 	ldw	r3,16(r18)
 800174c:	91000604 	addi	r4,r18,24
 8001750:	ba000804 	addi	r8,r23,32
 8001754:	b8c00615 	stw	r3,24(r23)
 8001758:	90800517 	ldw	r2,20(r18)
 800175c:	b8800715 	stw	r2,28(r23)
 8001760:	003f3206 	br	800142c <_realloc_r+0x2a0>
 8001764:	90c00417 	ldw	r3,16(r18)
 8001768:	91000604 	addi	r4,r18,24
 800176c:	b9c00804 	addi	r7,r23,32
 8001770:	b8c00615 	stw	r3,24(r23)
 8001774:	90800517 	ldw	r2,20(r18)
 8001778:	b8800715 	stw	r2,28(r23)
 800177c:	003fb906 	br	8001664 <_realloc_r+0x4d8>

08001780 <_sbrk_r>:
 8001780:	defffd04 	addi	sp,sp,-12
 8001784:	dc000015 	stw	r16,0(sp)
 8001788:	04020074 	movhi	r16,2049
 800178c:	84229104 	addi	r16,r16,-30140
 8001790:	dc400115 	stw	r17,4(sp)
 8001794:	80000015 	stw	zero,0(r16)
 8001798:	2023883a 	mov	r17,r4
 800179c:	2809883a 	mov	r4,r5
 80017a0:	dfc00215 	stw	ra,8(sp)
 80017a4:	80034700 	call	8003470 <sbrk>
 80017a8:	1007883a 	mov	r3,r2
 80017ac:	00bfffc4 	movi	r2,-1
 80017b0:	18800626 	beq	r3,r2,80017cc <_sbrk_r+0x4c>
 80017b4:	1805883a 	mov	r2,r3
 80017b8:	dfc00217 	ldw	ra,8(sp)
 80017bc:	dc400117 	ldw	r17,4(sp)
 80017c0:	dc000017 	ldw	r16,0(sp)
 80017c4:	dec00304 	addi	sp,sp,12
 80017c8:	f800283a 	ret
 80017cc:	80800017 	ldw	r2,0(r16)
 80017d0:	103ff826 	beq	r2,zero,80017b4 <_sbrk_r+0x34>
 80017d4:	88800015 	stw	r2,0(r17)
 80017d8:	1805883a 	mov	r2,r3
 80017dc:	dfc00217 	ldw	ra,8(sp)
 80017e0:	dc400117 	ldw	r17,4(sp)
 80017e4:	dc000017 	ldw	r16,0(sp)
 80017e8:	dec00304 	addi	sp,sp,12
 80017ec:	f800283a 	ret

080017f0 <__swsetup_r>:
 80017f0:	00820034 	movhi	r2,2048
 80017f4:	109be304 	addi	r2,r2,28556
 80017f8:	10c00017 	ldw	r3,0(r2)
 80017fc:	defffd04 	addi	sp,sp,-12
 8001800:	dc400115 	stw	r17,4(sp)
 8001804:	dc000015 	stw	r16,0(sp)
 8001808:	dfc00215 	stw	ra,8(sp)
 800180c:	2023883a 	mov	r17,r4
 8001810:	2821883a 	mov	r16,r5
 8001814:	18000226 	beq	r3,zero,8001820 <__swsetup_r+0x30>
 8001818:	18800e17 	ldw	r2,56(r3)
 800181c:	10001f26 	beq	r2,zero,800189c <__swsetup_r+0xac>
 8001820:	8100030b 	ldhu	r4,12(r16)
 8001824:	2080020c 	andi	r2,r4,8
 8001828:	10002826 	beq	r2,zero,80018cc <__swsetup_r+0xdc>
 800182c:	81400417 	ldw	r5,16(r16)
 8001830:	28001d26 	beq	r5,zero,80018a8 <__swsetup_r+0xb8>
 8001834:	2080004c 	andi	r2,r4,1
 8001838:	1005003a 	cmpeq	r2,r2,zero
 800183c:	10000b26 	beq	r2,zero,800186c <__swsetup_r+0x7c>
 8001840:	2080008c 	andi	r2,r4,2
 8001844:	10001226 	beq	r2,zero,8001890 <__swsetup_r+0xa0>
 8001848:	0005883a 	mov	r2,zero
 800184c:	80800215 	stw	r2,8(r16)
 8001850:	28000b26 	beq	r5,zero,8001880 <__swsetup_r+0x90>
 8001854:	0005883a 	mov	r2,zero
 8001858:	dfc00217 	ldw	ra,8(sp)
 800185c:	dc400117 	ldw	r17,4(sp)
 8001860:	dc000017 	ldw	r16,0(sp)
 8001864:	dec00304 	addi	sp,sp,12
 8001868:	f800283a 	ret
 800186c:	80800517 	ldw	r2,20(r16)
 8001870:	80000215 	stw	zero,8(r16)
 8001874:	0085c83a 	sub	r2,zero,r2
 8001878:	80800615 	stw	r2,24(r16)
 800187c:	283ff51e 	bne	r5,zero,8001854 <__swsetup_r+0x64>
 8001880:	2080200c 	andi	r2,r4,128
 8001884:	103ff326 	beq	r2,zero,8001854 <__swsetup_r+0x64>
 8001888:	00bfffc4 	movi	r2,-1
 800188c:	003ff206 	br	8001858 <__swsetup_r+0x68>
 8001890:	80800517 	ldw	r2,20(r16)
 8001894:	80800215 	stw	r2,8(r16)
 8001898:	003fed06 	br	8001850 <__swsetup_r+0x60>
 800189c:	1809883a 	mov	r4,r3
 80018a0:	8001bc40 	call	8001bc4 <__sinit>
 80018a4:	003fde06 	br	8001820 <__swsetup_r+0x30>
 80018a8:	20c0a00c 	andi	r3,r4,640
 80018ac:	00808004 	movi	r2,512
 80018b0:	18bfe026 	beq	r3,r2,8001834 <__swsetup_r+0x44>
 80018b4:	8809883a 	mov	r4,r17
 80018b8:	800b883a 	mov	r5,r16
 80018bc:	80024100 	call	8002410 <__smakebuf_r>
 80018c0:	8100030b 	ldhu	r4,12(r16)
 80018c4:	81400417 	ldw	r5,16(r16)
 80018c8:	003fda06 	br	8001834 <__swsetup_r+0x44>
 80018cc:	2080040c 	andi	r2,r4,16
 80018d0:	103fed26 	beq	r2,zero,8001888 <__swsetup_r+0x98>
 80018d4:	2080010c 	andi	r2,r4,4
 80018d8:	10001226 	beq	r2,zero,8001924 <__swsetup_r+0x134>
 80018dc:	81400c17 	ldw	r5,48(r16)
 80018e0:	28000526 	beq	r5,zero,80018f8 <__swsetup_r+0x108>
 80018e4:	80801004 	addi	r2,r16,64
 80018e8:	28800226 	beq	r5,r2,80018f4 <__swsetup_r+0x104>
 80018ec:	8809883a 	mov	r4,r17
 80018f0:	8001f7c0 	call	8001f7c <_free_r>
 80018f4:	80000c15 	stw	zero,48(r16)
 80018f8:	8080030b 	ldhu	r2,12(r16)
 80018fc:	81400417 	ldw	r5,16(r16)
 8001900:	80000115 	stw	zero,4(r16)
 8001904:	10bff6cc 	andi	r2,r2,65499
 8001908:	8080030d 	sth	r2,12(r16)
 800190c:	81400015 	stw	r5,0(r16)
 8001910:	8080030b 	ldhu	r2,12(r16)
 8001914:	10800214 	ori	r2,r2,8
 8001918:	113fffcc 	andi	r4,r2,65535
 800191c:	8080030d 	sth	r2,12(r16)
 8001920:	003fc306 	br	8001830 <__swsetup_r+0x40>
 8001924:	81400417 	ldw	r5,16(r16)
 8001928:	003ff906 	br	8001910 <__swsetup_r+0x120>

0800192c <_fflush_r>:
 800192c:	defffb04 	addi	sp,sp,-20
 8001930:	dcc00315 	stw	r19,12(sp)
 8001934:	dc800215 	stw	r18,8(sp)
 8001938:	dfc00415 	stw	ra,16(sp)
 800193c:	dc400115 	stw	r17,4(sp)
 8001940:	dc000015 	stw	r16,0(sp)
 8001944:	2027883a 	mov	r19,r4
 8001948:	2825883a 	mov	r18,r5
 800194c:	20000226 	beq	r4,zero,8001958 <_fflush_r+0x2c>
 8001950:	20800e17 	ldw	r2,56(r4)
 8001954:	10005626 	beq	r2,zero,8001ab0 <_fflush_r+0x184>
 8001958:	9100030b 	ldhu	r4,12(r18)
 800195c:	20ffffcc 	andi	r3,r4,65535
 8001960:	18e0001c 	xori	r3,r3,32768
 8001964:	18e00004 	addi	r3,r3,-32768
 8001968:	1880020c 	andi	r2,r3,8
 800196c:	1000261e 	bne	r2,zero,8001a08 <_fflush_r+0xdc>
 8001970:	90c00117 	ldw	r3,4(r18)
 8001974:	20820014 	ori	r2,r4,2048
 8001978:	9080030d 	sth	r2,12(r18)
 800197c:	1009883a 	mov	r4,r2
 8001980:	00c0400e 	bge	zero,r3,8001a84 <_fflush_r+0x158>
 8001984:	92000a17 	ldw	r8,40(r18)
 8001988:	40004026 	beq	r8,zero,8001a8c <_fflush_r+0x160>
 800198c:	2084000c 	andi	r2,r4,4096
 8001990:	10005326 	beq	r2,zero,8001ae0 <_fflush_r+0x1b4>
 8001994:	94001417 	ldw	r16,80(r18)
 8001998:	9080030b 	ldhu	r2,12(r18)
 800199c:	1080010c 	andi	r2,r2,4
 80019a0:	1000481e 	bne	r2,zero,8001ac4 <_fflush_r+0x198>
 80019a4:	91400717 	ldw	r5,28(r18)
 80019a8:	9809883a 	mov	r4,r19
 80019ac:	800d883a 	mov	r6,r16
 80019b0:	000f883a 	mov	r7,zero
 80019b4:	403ee83a 	callr	r8
 80019b8:	8080261e 	bne	r16,r2,8001a54 <_fflush_r+0x128>
 80019bc:	9080030b 	ldhu	r2,12(r18)
 80019c0:	91000417 	ldw	r4,16(r18)
 80019c4:	90000115 	stw	zero,4(r18)
 80019c8:	10bdffcc 	andi	r2,r2,63487
 80019cc:	10ffffcc 	andi	r3,r2,65535
 80019d0:	18c4000c 	andi	r3,r3,4096
 80019d4:	9080030d 	sth	r2,12(r18)
 80019d8:	91000015 	stw	r4,0(r18)
 80019dc:	18002b26 	beq	r3,zero,8001a8c <_fflush_r+0x160>
 80019e0:	0007883a 	mov	r3,zero
 80019e4:	1805883a 	mov	r2,r3
 80019e8:	94001415 	stw	r16,80(r18)
 80019ec:	dfc00417 	ldw	ra,16(sp)
 80019f0:	dcc00317 	ldw	r19,12(sp)
 80019f4:	dc800217 	ldw	r18,8(sp)
 80019f8:	dc400117 	ldw	r17,4(sp)
 80019fc:	dc000017 	ldw	r16,0(sp)
 8001a00:	dec00504 	addi	sp,sp,20
 8001a04:	f800283a 	ret
 8001a08:	94400417 	ldw	r17,16(r18)
 8001a0c:	88001f26 	beq	r17,zero,8001a8c <_fflush_r+0x160>
 8001a10:	90800017 	ldw	r2,0(r18)
 8001a14:	18c000cc 	andi	r3,r3,3
 8001a18:	94400015 	stw	r17,0(r18)
 8001a1c:	1461c83a 	sub	r16,r2,r17
 8001a20:	18002526 	beq	r3,zero,8001ab8 <_fflush_r+0x18c>
 8001a24:	0005883a 	mov	r2,zero
 8001a28:	90800215 	stw	r2,8(r18)
 8001a2c:	0400170e 	bge	zero,r16,8001a8c <_fflush_r+0x160>
 8001a30:	90c00917 	ldw	r3,36(r18)
 8001a34:	91400717 	ldw	r5,28(r18)
 8001a38:	880d883a 	mov	r6,r17
 8001a3c:	800f883a 	mov	r7,r16
 8001a40:	9809883a 	mov	r4,r19
 8001a44:	183ee83a 	callr	r3
 8001a48:	88a3883a 	add	r17,r17,r2
 8001a4c:	80a1c83a 	sub	r16,r16,r2
 8001a50:	00bff616 	blt	zero,r2,8001a2c <_fflush_r+0x100>
 8001a54:	9080030b 	ldhu	r2,12(r18)
 8001a58:	00ffffc4 	movi	r3,-1
 8001a5c:	10801014 	ori	r2,r2,64
 8001a60:	9080030d 	sth	r2,12(r18)
 8001a64:	1805883a 	mov	r2,r3
 8001a68:	dfc00417 	ldw	ra,16(sp)
 8001a6c:	dcc00317 	ldw	r19,12(sp)
 8001a70:	dc800217 	ldw	r18,8(sp)
 8001a74:	dc400117 	ldw	r17,4(sp)
 8001a78:	dc000017 	ldw	r16,0(sp)
 8001a7c:	dec00504 	addi	sp,sp,20
 8001a80:	f800283a 	ret
 8001a84:	90800f17 	ldw	r2,60(r18)
 8001a88:	00bfbe16 	blt	zero,r2,8001984 <_fflush_r+0x58>
 8001a8c:	0007883a 	mov	r3,zero
 8001a90:	1805883a 	mov	r2,r3
 8001a94:	dfc00417 	ldw	ra,16(sp)
 8001a98:	dcc00317 	ldw	r19,12(sp)
 8001a9c:	dc800217 	ldw	r18,8(sp)
 8001aa0:	dc400117 	ldw	r17,4(sp)
 8001aa4:	dc000017 	ldw	r16,0(sp)
 8001aa8:	dec00504 	addi	sp,sp,20
 8001aac:	f800283a 	ret
 8001ab0:	8001bc40 	call	8001bc4 <__sinit>
 8001ab4:	003fa806 	br	8001958 <_fflush_r+0x2c>
 8001ab8:	90800517 	ldw	r2,20(r18)
 8001abc:	90800215 	stw	r2,8(r18)
 8001ac0:	003fda06 	br	8001a2c <_fflush_r+0x100>
 8001ac4:	90800117 	ldw	r2,4(r18)
 8001ac8:	90c00c17 	ldw	r3,48(r18)
 8001acc:	80a1c83a 	sub	r16,r16,r2
 8001ad0:	183fb426 	beq	r3,zero,80019a4 <_fflush_r+0x78>
 8001ad4:	90800f17 	ldw	r2,60(r18)
 8001ad8:	80a1c83a 	sub	r16,r16,r2
 8001adc:	003fb106 	br	80019a4 <_fflush_r+0x78>
 8001ae0:	91400717 	ldw	r5,28(r18)
 8001ae4:	9809883a 	mov	r4,r19
 8001ae8:	000d883a 	mov	r6,zero
 8001aec:	01c00044 	movi	r7,1
 8001af0:	403ee83a 	callr	r8
 8001af4:	1021883a 	mov	r16,r2
 8001af8:	00bfffc4 	movi	r2,-1
 8001afc:	80800226 	beq	r16,r2,8001b08 <_fflush_r+0x1dc>
 8001b00:	92000a17 	ldw	r8,40(r18)
 8001b04:	003fa406 	br	8001998 <_fflush_r+0x6c>
 8001b08:	98c00017 	ldw	r3,0(r19)
 8001b0c:	00800744 	movi	r2,29
 8001b10:	18bfde26 	beq	r3,r2,8001a8c <_fflush_r+0x160>
 8001b14:	9080030b 	ldhu	r2,12(r18)
 8001b18:	8007883a 	mov	r3,r16
 8001b1c:	10801014 	ori	r2,r2,64
 8001b20:	9080030d 	sth	r2,12(r18)
 8001b24:	003fcf06 	br	8001a64 <_fflush_r+0x138>

08001b28 <fflush>:
 8001b28:	01420034 	movhi	r5,2048
 8001b2c:	29464b04 	addi	r5,r5,6444
 8001b30:	2007883a 	mov	r3,r4
 8001b34:	20000526 	beq	r4,zero,8001b4c <fflush+0x24>
 8001b38:	00820034 	movhi	r2,2048
 8001b3c:	109be304 	addi	r2,r2,28556
 8001b40:	11000017 	ldw	r4,0(r2)
 8001b44:	180b883a 	mov	r5,r3
 8001b48:	800192c1 	jmpi	800192c <_fflush_r>
 8001b4c:	00820034 	movhi	r2,2048
 8001b50:	109be404 	addi	r2,r2,28560
 8001b54:	11000017 	ldw	r4,0(r2)
 8001b58:	80022901 	jmpi	8002290 <_fwalk_reent>

08001b5c <std>:
 8001b5c:	00820034 	movhi	r2,2048
 8001b60:	10898f04 	addi	r2,r2,9788
 8001b64:	20800b15 	stw	r2,44(r4)
 8001b68:	00820034 	movhi	r2,2048
 8001b6c:	1089ca04 	addi	r2,r2,10024
 8001b70:	20800815 	stw	r2,32(r4)
 8001b74:	00c20034 	movhi	r3,2048
 8001b78:	18c9ab04 	addi	r3,r3,9900
 8001b7c:	00820034 	movhi	r2,2048
 8001b80:	10899104 	addi	r2,r2,9796
 8001b84:	2140030d 	sth	r5,12(r4)
 8001b88:	2180038d 	sth	r6,14(r4)
 8001b8c:	20c00915 	stw	r3,36(r4)
 8001b90:	20800a15 	stw	r2,40(r4)
 8001b94:	20000015 	stw	zero,0(r4)
 8001b98:	20000115 	stw	zero,4(r4)
 8001b9c:	20000215 	stw	zero,8(r4)
 8001ba0:	20000415 	stw	zero,16(r4)
 8001ba4:	20000515 	stw	zero,20(r4)
 8001ba8:	20000615 	stw	zero,24(r4)
 8001bac:	21000715 	stw	r4,28(r4)
 8001bb0:	f800283a 	ret

08001bb4 <__sfp_lock_acquire>:
 8001bb4:	f800283a 	ret

08001bb8 <__sfp_lock_release>:
 8001bb8:	f800283a 	ret

08001bbc <__sinit_lock_acquire>:
 8001bbc:	f800283a 	ret

08001bc0 <__sinit_lock_release>:
 8001bc0:	f800283a 	ret

08001bc4 <__sinit>:
 8001bc4:	20800e17 	ldw	r2,56(r4)
 8001bc8:	defffd04 	addi	sp,sp,-12
 8001bcc:	dc400115 	stw	r17,4(sp)
 8001bd0:	dc000015 	stw	r16,0(sp)
 8001bd4:	dfc00215 	stw	ra,8(sp)
 8001bd8:	04400044 	movi	r17,1
 8001bdc:	01400104 	movi	r5,4
 8001be0:	000d883a 	mov	r6,zero
 8001be4:	2021883a 	mov	r16,r4
 8001be8:	2200bb04 	addi	r8,r4,748
 8001bec:	200f883a 	mov	r7,r4
 8001bf0:	10000526 	beq	r2,zero,8001c08 <__sinit+0x44>
 8001bf4:	dfc00217 	ldw	ra,8(sp)
 8001bf8:	dc400117 	ldw	r17,4(sp)
 8001bfc:	dc000017 	ldw	r16,0(sp)
 8001c00:	dec00304 	addi	sp,sp,12
 8001c04:	f800283a 	ret
 8001c08:	21000117 	ldw	r4,4(r4)
 8001c0c:	00820034 	movhi	r2,2048
 8001c10:	10872a04 	addi	r2,r2,7336
 8001c14:	00c000c4 	movi	r3,3
 8001c18:	80800f15 	stw	r2,60(r16)
 8001c1c:	80c0b915 	stw	r3,740(r16)
 8001c20:	8200ba15 	stw	r8,744(r16)
 8001c24:	84400e15 	stw	r17,56(r16)
 8001c28:	8000b815 	stw	zero,736(r16)
 8001c2c:	8001b5c0 	call	8001b5c <std>
 8001c30:	81000217 	ldw	r4,8(r16)
 8001c34:	880d883a 	mov	r6,r17
 8001c38:	800f883a 	mov	r7,r16
 8001c3c:	01400284 	movi	r5,10
 8001c40:	8001b5c0 	call	8001b5c <std>
 8001c44:	81000317 	ldw	r4,12(r16)
 8001c48:	800f883a 	mov	r7,r16
 8001c4c:	01400484 	movi	r5,18
 8001c50:	01800084 	movi	r6,2
 8001c54:	dfc00217 	ldw	ra,8(sp)
 8001c58:	dc400117 	ldw	r17,4(sp)
 8001c5c:	dc000017 	ldw	r16,0(sp)
 8001c60:	dec00304 	addi	sp,sp,12
 8001c64:	8001b5c1 	jmpi	8001b5c <std>

08001c68 <__fp_lock>:
 8001c68:	0005883a 	mov	r2,zero
 8001c6c:	f800283a 	ret

08001c70 <__fp_unlock>:
 8001c70:	0005883a 	mov	r2,zero
 8001c74:	f800283a 	ret

08001c78 <__fp_unlock_all>:
 8001c78:	00820034 	movhi	r2,2048
 8001c7c:	109be304 	addi	r2,r2,28556
 8001c80:	11000017 	ldw	r4,0(r2)
 8001c84:	01420034 	movhi	r5,2048
 8001c88:	29471c04 	addi	r5,r5,7280
 8001c8c:	80023581 	jmpi	8002358 <_fwalk>

08001c90 <__fp_lock_all>:
 8001c90:	00820034 	movhi	r2,2048
 8001c94:	109be304 	addi	r2,r2,28556
 8001c98:	11000017 	ldw	r4,0(r2)
 8001c9c:	01420034 	movhi	r5,2048
 8001ca0:	29471a04 	addi	r5,r5,7272
 8001ca4:	80023581 	jmpi	8002358 <_fwalk>

08001ca8 <_cleanup_r>:
 8001ca8:	01420034 	movhi	r5,2048
 8001cac:	294a6004 	addi	r5,r5,10624
 8001cb0:	80023581 	jmpi	8002358 <_fwalk>

08001cb4 <_cleanup>:
 8001cb4:	00820034 	movhi	r2,2048
 8001cb8:	109be404 	addi	r2,r2,28560
 8001cbc:	11000017 	ldw	r4,0(r2)
 8001cc0:	8001ca81 	jmpi	8001ca8 <_cleanup_r>

08001cc4 <__sfmoreglue>:
 8001cc4:	defffc04 	addi	sp,sp,-16
 8001cc8:	dc000015 	stw	r16,0(sp)
 8001ccc:	2821883a 	mov	r16,r5
 8001cd0:	dc400115 	stw	r17,4(sp)
 8001cd4:	01401704 	movi	r5,92
 8001cd8:	2023883a 	mov	r17,r4
 8001cdc:	8009883a 	mov	r4,r16
 8001ce0:	dfc00315 	stw	ra,12(sp)
 8001ce4:	dcc00215 	stw	r19,8(sp)
 8001ce8:	8002b680 	call	8002b68 <__mulsi3>
 8001cec:	11400304 	addi	r5,r2,12
 8001cf0:	8809883a 	mov	r4,r17
 8001cf4:	1027883a 	mov	r19,r2
 8001cf8:	80007e80 	call	80007e8 <_malloc_r>
 8001cfc:	10c00304 	addi	r3,r2,12
 8001d00:	1023883a 	mov	r17,r2
 8001d04:	1809883a 	mov	r4,r3
 8001d08:	980d883a 	mov	r6,r19
 8001d0c:	000b883a 	mov	r5,zero
 8001d10:	10000b26 	beq	r2,zero,8001d40 <__sfmoreglue+0x7c>
 8001d14:	14000115 	stw	r16,4(r2)
 8001d18:	10c00215 	stw	r3,8(r2)
 8001d1c:	10000015 	stw	zero,0(r2)
 8001d20:	80025a40 	call	80025a4 <memset>
 8001d24:	8805883a 	mov	r2,r17
 8001d28:	dfc00317 	ldw	ra,12(sp)
 8001d2c:	dcc00217 	ldw	r19,8(sp)
 8001d30:	dc400117 	ldw	r17,4(sp)
 8001d34:	dc000017 	ldw	r16,0(sp)
 8001d38:	dec00404 	addi	sp,sp,16
 8001d3c:	f800283a 	ret
 8001d40:	0023883a 	mov	r17,zero
 8001d44:	8805883a 	mov	r2,r17
 8001d48:	dfc00317 	ldw	ra,12(sp)
 8001d4c:	dcc00217 	ldw	r19,8(sp)
 8001d50:	dc400117 	ldw	r17,4(sp)
 8001d54:	dc000017 	ldw	r16,0(sp)
 8001d58:	dec00404 	addi	sp,sp,16
 8001d5c:	f800283a 	ret

08001d60 <__sfp>:
 8001d60:	defffd04 	addi	sp,sp,-12
 8001d64:	00820034 	movhi	r2,2048
 8001d68:	109be404 	addi	r2,r2,28560
 8001d6c:	dc000015 	stw	r16,0(sp)
 8001d70:	14000017 	ldw	r16,0(r2)
 8001d74:	dc400115 	stw	r17,4(sp)
 8001d78:	dfc00215 	stw	ra,8(sp)
 8001d7c:	80800e17 	ldw	r2,56(r16)
 8001d80:	2023883a 	mov	r17,r4
 8001d84:	10002626 	beq	r2,zero,8001e20 <__sfp+0xc0>
 8001d88:	8400b804 	addi	r16,r16,736
 8001d8c:	80800117 	ldw	r2,4(r16)
 8001d90:	81000217 	ldw	r4,8(r16)
 8001d94:	10ffffc4 	addi	r3,r2,-1
 8001d98:	18000916 	blt	r3,zero,8001dc0 <__sfp+0x60>
 8001d9c:	2080030f 	ldh	r2,12(r4)
 8001da0:	10000b26 	beq	r2,zero,8001dd0 <__sfp+0x70>
 8001da4:	017fffc4 	movi	r5,-1
 8001da8:	00000206 	br	8001db4 <__sfp+0x54>
 8001dac:	2080030f 	ldh	r2,12(r4)
 8001db0:	10000726 	beq	r2,zero,8001dd0 <__sfp+0x70>
 8001db4:	18ffffc4 	addi	r3,r3,-1
 8001db8:	21001704 	addi	r4,r4,92
 8001dbc:	197ffb1e 	bne	r3,r5,8001dac <__sfp+0x4c>
 8001dc0:	80800017 	ldw	r2,0(r16)
 8001dc4:	10001926 	beq	r2,zero,8001e2c <__sfp+0xcc>
 8001dc8:	1021883a 	mov	r16,r2
 8001dcc:	003fef06 	br	8001d8c <__sfp+0x2c>
 8001dd0:	00bfffc4 	movi	r2,-1
 8001dd4:	00c00044 	movi	r3,1
 8001dd8:	2080038d 	sth	r2,14(r4)
 8001ddc:	20c0030d 	sth	r3,12(r4)
 8001de0:	20000015 	stw	zero,0(r4)
 8001de4:	20000215 	stw	zero,8(r4)
 8001de8:	20000115 	stw	zero,4(r4)
 8001dec:	20000415 	stw	zero,16(r4)
 8001df0:	20000515 	stw	zero,20(r4)
 8001df4:	20000615 	stw	zero,24(r4)
 8001df8:	20000c15 	stw	zero,48(r4)
 8001dfc:	20000d15 	stw	zero,52(r4)
 8001e00:	20001115 	stw	zero,68(r4)
 8001e04:	20001215 	stw	zero,72(r4)
 8001e08:	2005883a 	mov	r2,r4
 8001e0c:	dfc00217 	ldw	ra,8(sp)
 8001e10:	dc400117 	ldw	r17,4(sp)
 8001e14:	dc000017 	ldw	r16,0(sp)
 8001e18:	dec00304 	addi	sp,sp,12
 8001e1c:	f800283a 	ret
 8001e20:	8009883a 	mov	r4,r16
 8001e24:	8001bc40 	call	8001bc4 <__sinit>
 8001e28:	003fd706 	br	8001d88 <__sfp+0x28>
 8001e2c:	8809883a 	mov	r4,r17
 8001e30:	01400104 	movi	r5,4
 8001e34:	8001cc40 	call	8001cc4 <__sfmoreglue>
 8001e38:	80800015 	stw	r2,0(r16)
 8001e3c:	103fe21e 	bne	r2,zero,8001dc8 <__sfp+0x68>
 8001e40:	00800304 	movi	r2,12
 8001e44:	0009883a 	mov	r4,zero
 8001e48:	88800015 	stw	r2,0(r17)
 8001e4c:	003fee06 	br	8001e08 <__sfp+0xa8>

08001e50 <_malloc_trim_r>:
 8001e50:	defffb04 	addi	sp,sp,-20
 8001e54:	dcc00315 	stw	r19,12(sp)
 8001e58:	04c20034 	movhi	r19,2048
 8001e5c:	9cd65404 	addi	r19,r19,22864
 8001e60:	dc800215 	stw	r18,8(sp)
 8001e64:	dc400115 	stw	r17,4(sp)
 8001e68:	dc000015 	stw	r16,0(sp)
 8001e6c:	2823883a 	mov	r17,r5
 8001e70:	2025883a 	mov	r18,r4
 8001e74:	dfc00415 	stw	ra,16(sp)
 8001e78:	80032340 	call	8003234 <__malloc_lock>
 8001e7c:	98800217 	ldw	r2,8(r19)
 8001e80:	9009883a 	mov	r4,r18
 8001e84:	000b883a 	mov	r5,zero
 8001e88:	10c00117 	ldw	r3,4(r2)
 8001e8c:	00bfff04 	movi	r2,-4
 8001e90:	18a0703a 	and	r16,r3,r2
 8001e94:	8463c83a 	sub	r17,r16,r17
 8001e98:	8c43fbc4 	addi	r17,r17,4079
 8001e9c:	8822d33a 	srli	r17,r17,12
 8001ea0:	0083ffc4 	movi	r2,4095
 8001ea4:	8c7fffc4 	addi	r17,r17,-1
 8001ea8:	8822933a 	slli	r17,r17,12
 8001eac:	1440060e 	bge	r2,r17,8001ec8 <_malloc_trim_r+0x78>
 8001eb0:	80017800 	call	8001780 <_sbrk_r>
 8001eb4:	98c00217 	ldw	r3,8(r19)
 8001eb8:	9009883a 	mov	r4,r18
 8001ebc:	044bc83a 	sub	r5,zero,r17
 8001ec0:	80c7883a 	add	r3,r16,r3
 8001ec4:	10c00926 	beq	r2,r3,8001eec <_malloc_trim_r+0x9c>
 8001ec8:	80032540 	call	8003254 <__malloc_unlock>
 8001ecc:	0005883a 	mov	r2,zero
 8001ed0:	dfc00417 	ldw	ra,16(sp)
 8001ed4:	dcc00317 	ldw	r19,12(sp)
 8001ed8:	dc800217 	ldw	r18,8(sp)
 8001edc:	dc400117 	ldw	r17,4(sp)
 8001ee0:	dc000017 	ldw	r16,0(sp)
 8001ee4:	dec00504 	addi	sp,sp,20
 8001ee8:	f800283a 	ret
 8001eec:	9009883a 	mov	r4,r18
 8001ef0:	80017800 	call	8001780 <_sbrk_r>
 8001ef4:	844dc83a 	sub	r6,r16,r17
 8001ef8:	00ffffc4 	movi	r3,-1
 8001efc:	9009883a 	mov	r4,r18
 8001f00:	000b883a 	mov	r5,zero
 8001f04:	01c20074 	movhi	r7,2049
 8001f08:	39e29804 	addi	r7,r7,-30112
 8001f0c:	31800054 	ori	r6,r6,1
 8001f10:	10c00926 	beq	r2,r3,8001f38 <_malloc_trim_r+0xe8>
 8001f14:	38800017 	ldw	r2,0(r7)
 8001f18:	98c00217 	ldw	r3,8(r19)
 8001f1c:	9009883a 	mov	r4,r18
 8001f20:	1445c83a 	sub	r2,r2,r17
 8001f24:	38800015 	stw	r2,0(r7)
 8001f28:	19800115 	stw	r6,4(r3)
 8001f2c:	80032540 	call	8003254 <__malloc_unlock>
 8001f30:	00800044 	movi	r2,1
 8001f34:	003fe606 	br	8001ed0 <_malloc_trim_r+0x80>
 8001f38:	80017800 	call	8001780 <_sbrk_r>
 8001f3c:	99800217 	ldw	r6,8(r19)
 8001f40:	100f883a 	mov	r7,r2
 8001f44:	9009883a 	mov	r4,r18
 8001f48:	1187c83a 	sub	r3,r2,r6
 8001f4c:	008003c4 	movi	r2,15
 8001f50:	19400054 	ori	r5,r3,1
 8001f54:	10ffdc0e 	bge	r2,r3,8001ec8 <_malloc_trim_r+0x78>
 8001f58:	00820034 	movhi	r2,2048
 8001f5c:	109be604 	addi	r2,r2,28568
 8001f60:	10c00017 	ldw	r3,0(r2)
 8001f64:	00820074 	movhi	r2,2049
 8001f68:	10a29804 	addi	r2,r2,-30112
 8001f6c:	31400115 	stw	r5,4(r6)
 8001f70:	38c7c83a 	sub	r3,r7,r3
 8001f74:	10c00015 	stw	r3,0(r2)
 8001f78:	003fd306 	br	8001ec8 <_malloc_trim_r+0x78>

08001f7c <_free_r>:
 8001f7c:	defffd04 	addi	sp,sp,-12
 8001f80:	dc400115 	stw	r17,4(sp)
 8001f84:	dc000015 	stw	r16,0(sp)
 8001f88:	dfc00215 	stw	ra,8(sp)
 8001f8c:	2821883a 	mov	r16,r5
 8001f90:	2023883a 	mov	r17,r4
 8001f94:	28005a26 	beq	r5,zero,8002100 <_free_r+0x184>
 8001f98:	80032340 	call	8003234 <__malloc_lock>
 8001f9c:	823ffe04 	addi	r8,r16,-8
 8001fa0:	41400117 	ldw	r5,4(r8)
 8001fa4:	00bfff84 	movi	r2,-2
 8001fa8:	02820034 	movhi	r10,2048
 8001fac:	52965404 	addi	r10,r10,22864
 8001fb0:	288e703a 	and	r7,r5,r2
 8001fb4:	41cd883a 	add	r6,r8,r7
 8001fb8:	30c00117 	ldw	r3,4(r6)
 8001fbc:	51000217 	ldw	r4,8(r10)
 8001fc0:	00bfff04 	movi	r2,-4
 8001fc4:	1892703a 	and	r9,r3,r2
 8001fc8:	5017883a 	mov	r11,r10
 8001fcc:	31006726 	beq	r6,r4,800216c <_free_r+0x1f0>
 8001fd0:	2880004c 	andi	r2,r5,1
 8001fd4:	1005003a 	cmpeq	r2,r2,zero
 8001fd8:	32400115 	stw	r9,4(r6)
 8001fdc:	10001a1e 	bne	r2,zero,8002048 <_free_r+0xcc>
 8001fe0:	000b883a 	mov	r5,zero
 8001fe4:	3247883a 	add	r3,r6,r9
 8001fe8:	18800117 	ldw	r2,4(r3)
 8001fec:	1080004c 	andi	r2,r2,1
 8001ff0:	1000231e 	bne	r2,zero,8002080 <_free_r+0x104>
 8001ff4:	280ac03a 	cmpne	r5,r5,zero
 8001ff8:	3a4f883a 	add	r7,r7,r9
 8001ffc:	2800451e 	bne	r5,zero,8002114 <_free_r+0x198>
 8002000:	31000217 	ldw	r4,8(r6)
 8002004:	00820034 	movhi	r2,2048
 8002008:	10965604 	addi	r2,r2,22872
 800200c:	20807b26 	beq	r4,r2,80021fc <_free_r+0x280>
 8002010:	30800317 	ldw	r2,12(r6)
 8002014:	3a07883a 	add	r3,r7,r8
 8002018:	19c00015 	stw	r7,0(r3)
 800201c:	11000215 	stw	r4,8(r2)
 8002020:	20800315 	stw	r2,12(r4)
 8002024:	38800054 	ori	r2,r7,1
 8002028:	40800115 	stw	r2,4(r8)
 800202c:	28001a26 	beq	r5,zero,8002098 <_free_r+0x11c>
 8002030:	8809883a 	mov	r4,r17
 8002034:	dfc00217 	ldw	ra,8(sp)
 8002038:	dc400117 	ldw	r17,4(sp)
 800203c:	dc000017 	ldw	r16,0(sp)
 8002040:	dec00304 	addi	sp,sp,12
 8002044:	80032541 	jmpi	8003254 <__malloc_unlock>
 8002048:	80bffe17 	ldw	r2,-8(r16)
 800204c:	50c00204 	addi	r3,r10,8
 8002050:	4091c83a 	sub	r8,r8,r2
 8002054:	41000217 	ldw	r4,8(r8)
 8002058:	388f883a 	add	r7,r7,r2
 800205c:	20c06126 	beq	r4,r3,80021e4 <_free_r+0x268>
 8002060:	40800317 	ldw	r2,12(r8)
 8002064:	3247883a 	add	r3,r6,r9
 8002068:	000b883a 	mov	r5,zero
 800206c:	11000215 	stw	r4,8(r2)
 8002070:	20800315 	stw	r2,12(r4)
 8002074:	18800117 	ldw	r2,4(r3)
 8002078:	1080004c 	andi	r2,r2,1
 800207c:	103fdd26 	beq	r2,zero,8001ff4 <_free_r+0x78>
 8002080:	38800054 	ori	r2,r7,1
 8002084:	3a07883a 	add	r3,r7,r8
 8002088:	280ac03a 	cmpne	r5,r5,zero
 800208c:	40800115 	stw	r2,4(r8)
 8002090:	19c00015 	stw	r7,0(r3)
 8002094:	283fe61e 	bne	r5,zero,8002030 <_free_r+0xb4>
 8002098:	00807fc4 	movi	r2,511
 800209c:	11c01f2e 	bgeu	r2,r7,800211c <_free_r+0x1a0>
 80020a0:	3806d27a 	srli	r3,r7,9
 80020a4:	1800481e 	bne	r3,zero,80021c8 <_free_r+0x24c>
 80020a8:	3804d0fa 	srli	r2,r7,3
 80020ac:	100690fa 	slli	r3,r2,3
 80020b0:	1acd883a 	add	r6,r3,r11
 80020b4:	31400217 	ldw	r5,8(r6)
 80020b8:	31405926 	beq	r6,r5,8002220 <_free_r+0x2a4>
 80020bc:	28800117 	ldw	r2,4(r5)
 80020c0:	00ffff04 	movi	r3,-4
 80020c4:	10c4703a 	and	r2,r2,r3
 80020c8:	3880022e 	bgeu	r7,r2,80020d4 <_free_r+0x158>
 80020cc:	29400217 	ldw	r5,8(r5)
 80020d0:	317ffa1e 	bne	r6,r5,80020bc <_free_r+0x140>
 80020d4:	29800317 	ldw	r6,12(r5)
 80020d8:	41800315 	stw	r6,12(r8)
 80020dc:	41400215 	stw	r5,8(r8)
 80020e0:	8809883a 	mov	r4,r17
 80020e4:	2a000315 	stw	r8,12(r5)
 80020e8:	32000215 	stw	r8,8(r6)
 80020ec:	dfc00217 	ldw	ra,8(sp)
 80020f0:	dc400117 	ldw	r17,4(sp)
 80020f4:	dc000017 	ldw	r16,0(sp)
 80020f8:	dec00304 	addi	sp,sp,12
 80020fc:	80032541 	jmpi	8003254 <__malloc_unlock>
 8002100:	dfc00217 	ldw	ra,8(sp)
 8002104:	dc400117 	ldw	r17,4(sp)
 8002108:	dc000017 	ldw	r16,0(sp)
 800210c:	dec00304 	addi	sp,sp,12
 8002110:	f800283a 	ret
 8002114:	31000217 	ldw	r4,8(r6)
 8002118:	003fbd06 	br	8002010 <_free_r+0x94>
 800211c:	3806d0fa 	srli	r3,r7,3
 8002120:	00800044 	movi	r2,1
 8002124:	51400117 	ldw	r5,4(r10)
 8002128:	180890fa 	slli	r4,r3,3
 800212c:	1807d0ba 	srai	r3,r3,2
 8002130:	22c9883a 	add	r4,r4,r11
 8002134:	21800217 	ldw	r6,8(r4)
 8002138:	10c4983a 	sll	r2,r2,r3
 800213c:	41000315 	stw	r4,12(r8)
 8002140:	41800215 	stw	r6,8(r8)
 8002144:	288ab03a 	or	r5,r5,r2
 8002148:	22000215 	stw	r8,8(r4)
 800214c:	8809883a 	mov	r4,r17
 8002150:	51400115 	stw	r5,4(r10)
 8002154:	32000315 	stw	r8,12(r6)
 8002158:	dfc00217 	ldw	ra,8(sp)
 800215c:	dc400117 	ldw	r17,4(sp)
 8002160:	dc000017 	ldw	r16,0(sp)
 8002164:	dec00304 	addi	sp,sp,12
 8002168:	80032541 	jmpi	8003254 <__malloc_unlock>
 800216c:	2880004c 	andi	r2,r5,1
 8002170:	3a4d883a 	add	r6,r7,r9
 8002174:	1000071e 	bne	r2,zero,8002194 <_free_r+0x218>
 8002178:	80bffe17 	ldw	r2,-8(r16)
 800217c:	4091c83a 	sub	r8,r8,r2
 8002180:	41000317 	ldw	r4,12(r8)
 8002184:	40c00217 	ldw	r3,8(r8)
 8002188:	308d883a 	add	r6,r6,r2
 800218c:	20c00215 	stw	r3,8(r4)
 8002190:	19000315 	stw	r4,12(r3)
 8002194:	00820034 	movhi	r2,2048
 8002198:	109be504 	addi	r2,r2,28564
 800219c:	11000017 	ldw	r4,0(r2)
 80021a0:	30c00054 	ori	r3,r6,1
 80021a4:	52000215 	stw	r8,8(r10)
 80021a8:	40c00115 	stw	r3,4(r8)
 80021ac:	313fa036 	bltu	r6,r4,8002030 <_free_r+0xb4>
 80021b0:	00820074 	movhi	r2,2049
 80021b4:	10a28e04 	addi	r2,r2,-30152
 80021b8:	11400017 	ldw	r5,0(r2)
 80021bc:	8809883a 	mov	r4,r17
 80021c0:	8001e500 	call	8001e50 <_malloc_trim_r>
 80021c4:	003f9a06 	br	8002030 <_free_r+0xb4>
 80021c8:	00800104 	movi	r2,4
 80021cc:	10c0072e 	bgeu	r2,r3,80021ec <_free_r+0x270>
 80021d0:	00800504 	movi	r2,20
 80021d4:	10c01936 	bltu	r2,r3,800223c <_free_r+0x2c0>
 80021d8:	188016c4 	addi	r2,r3,91
 80021dc:	100690fa 	slli	r3,r2,3
 80021e0:	003fb306 	br	80020b0 <_free_r+0x134>
 80021e4:	01400044 	movi	r5,1
 80021e8:	003f7e06 	br	8001fe4 <_free_r+0x68>
 80021ec:	3804d1ba 	srli	r2,r7,6
 80021f0:	10800e04 	addi	r2,r2,56
 80021f4:	100690fa 	slli	r3,r2,3
 80021f8:	003fad06 	br	80020b0 <_free_r+0x134>
 80021fc:	22000315 	stw	r8,12(r4)
 8002200:	22000215 	stw	r8,8(r4)
 8002204:	3a05883a 	add	r2,r7,r8
 8002208:	38c00054 	ori	r3,r7,1
 800220c:	11c00015 	stw	r7,0(r2)
 8002210:	41000215 	stw	r4,8(r8)
 8002214:	40c00115 	stw	r3,4(r8)
 8002218:	41000315 	stw	r4,12(r8)
 800221c:	003f8406 	br	8002030 <_free_r+0xb4>
 8002220:	1005d0ba 	srai	r2,r2,2
 8002224:	00c00044 	movi	r3,1
 8002228:	51000117 	ldw	r4,4(r10)
 800222c:	1886983a 	sll	r3,r3,r2
 8002230:	20c8b03a 	or	r4,r4,r3
 8002234:	51000115 	stw	r4,4(r10)
 8002238:	003fa706 	br	80020d8 <_free_r+0x15c>
 800223c:	00801504 	movi	r2,84
 8002240:	10c00436 	bltu	r2,r3,8002254 <_free_r+0x2d8>
 8002244:	3804d33a 	srli	r2,r7,12
 8002248:	10801b84 	addi	r2,r2,110
 800224c:	100690fa 	slli	r3,r2,3
 8002250:	003f9706 	br	80020b0 <_free_r+0x134>
 8002254:	00805504 	movi	r2,340
 8002258:	10c00436 	bltu	r2,r3,800226c <_free_r+0x2f0>
 800225c:	3804d3fa 	srli	r2,r7,15
 8002260:	10801dc4 	addi	r2,r2,119
 8002264:	100690fa 	slli	r3,r2,3
 8002268:	003f9106 	br	80020b0 <_free_r+0x134>
 800226c:	00815504 	movi	r2,1364
 8002270:	10c0032e 	bgeu	r2,r3,8002280 <_free_r+0x304>
 8002274:	00801f84 	movi	r2,126
 8002278:	00c0fc04 	movi	r3,1008
 800227c:	003f8c06 	br	80020b0 <_free_r+0x134>
 8002280:	3804d4ba 	srli	r2,r7,18
 8002284:	10801f04 	addi	r2,r2,124
 8002288:	100690fa 	slli	r3,r2,3
 800228c:	003f8806 	br	80020b0 <_free_r+0x134>

08002290 <_fwalk_reent>:
 8002290:	defff704 	addi	sp,sp,-36
 8002294:	dcc00315 	stw	r19,12(sp)
 8002298:	24c0b804 	addi	r19,r4,736
 800229c:	dd800615 	stw	r22,24(sp)
 80022a0:	dd400515 	stw	r21,20(sp)
 80022a4:	dfc00815 	stw	ra,32(sp)
 80022a8:	ddc00715 	stw	r23,28(sp)
 80022ac:	dd000415 	stw	r20,16(sp)
 80022b0:	dc800215 	stw	r18,8(sp)
 80022b4:	dc400115 	stw	r17,4(sp)
 80022b8:	dc000015 	stw	r16,0(sp)
 80022bc:	202b883a 	mov	r21,r4
 80022c0:	282d883a 	mov	r22,r5
 80022c4:	8001bb40 	call	8001bb4 <__sfp_lock_acquire>
 80022c8:	98002126 	beq	r19,zero,8002350 <_fwalk_reent+0xc0>
 80022cc:	002f883a 	mov	r23,zero
 80022d0:	9c800117 	ldw	r18,4(r19)
 80022d4:	9c000217 	ldw	r16,8(r19)
 80022d8:	90bfffc4 	addi	r2,r18,-1
 80022dc:	10000d16 	blt	r2,zero,8002314 <_fwalk_reent+0x84>
 80022e0:	0023883a 	mov	r17,zero
 80022e4:	053fffc4 	movi	r20,-1
 80022e8:	8080030f 	ldh	r2,12(r16)
 80022ec:	8c400044 	addi	r17,r17,1
 80022f0:	10000626 	beq	r2,zero,800230c <_fwalk_reent+0x7c>
 80022f4:	8080038f 	ldh	r2,14(r16)
 80022f8:	800b883a 	mov	r5,r16
 80022fc:	a809883a 	mov	r4,r21
 8002300:	15000226 	beq	r2,r20,800230c <_fwalk_reent+0x7c>
 8002304:	b03ee83a 	callr	r22
 8002308:	b8aeb03a 	or	r23,r23,r2
 800230c:	84001704 	addi	r16,r16,92
 8002310:	947ff51e 	bne	r18,r17,80022e8 <_fwalk_reent+0x58>
 8002314:	9cc00017 	ldw	r19,0(r19)
 8002318:	983fed1e 	bne	r19,zero,80022d0 <_fwalk_reent+0x40>
 800231c:	8001bb80 	call	8001bb8 <__sfp_lock_release>
 8002320:	b805883a 	mov	r2,r23
 8002324:	dfc00817 	ldw	ra,32(sp)
 8002328:	ddc00717 	ldw	r23,28(sp)
 800232c:	dd800617 	ldw	r22,24(sp)
 8002330:	dd400517 	ldw	r21,20(sp)
 8002334:	dd000417 	ldw	r20,16(sp)
 8002338:	dcc00317 	ldw	r19,12(sp)
 800233c:	dc800217 	ldw	r18,8(sp)
 8002340:	dc400117 	ldw	r17,4(sp)
 8002344:	dc000017 	ldw	r16,0(sp)
 8002348:	dec00904 	addi	sp,sp,36
 800234c:	f800283a 	ret
 8002350:	002f883a 	mov	r23,zero
 8002354:	003ff106 	br	800231c <_fwalk_reent+0x8c>

08002358 <_fwalk>:
 8002358:	defff804 	addi	sp,sp,-32
 800235c:	dcc00315 	stw	r19,12(sp)
 8002360:	24c0b804 	addi	r19,r4,736
 8002364:	dd400515 	stw	r21,20(sp)
 8002368:	dfc00715 	stw	ra,28(sp)
 800236c:	dd800615 	stw	r22,24(sp)
 8002370:	dd000415 	stw	r20,16(sp)
 8002374:	dc800215 	stw	r18,8(sp)
 8002378:	dc400115 	stw	r17,4(sp)
 800237c:	dc000015 	stw	r16,0(sp)
 8002380:	282b883a 	mov	r21,r5
 8002384:	8001bb40 	call	8001bb4 <__sfp_lock_acquire>
 8002388:	98001f26 	beq	r19,zero,8002408 <_fwalk+0xb0>
 800238c:	002d883a 	mov	r22,zero
 8002390:	9c800117 	ldw	r18,4(r19)
 8002394:	9c000217 	ldw	r16,8(r19)
 8002398:	90bfffc4 	addi	r2,r18,-1
 800239c:	10000c16 	blt	r2,zero,80023d0 <_fwalk+0x78>
 80023a0:	0023883a 	mov	r17,zero
 80023a4:	053fffc4 	movi	r20,-1
 80023a8:	8080030f 	ldh	r2,12(r16)
 80023ac:	8c400044 	addi	r17,r17,1
 80023b0:	10000526 	beq	r2,zero,80023c8 <_fwalk+0x70>
 80023b4:	8080038f 	ldh	r2,14(r16)
 80023b8:	8009883a 	mov	r4,r16
 80023bc:	15000226 	beq	r2,r20,80023c8 <_fwalk+0x70>
 80023c0:	a83ee83a 	callr	r21
 80023c4:	b0acb03a 	or	r22,r22,r2
 80023c8:	84001704 	addi	r16,r16,92
 80023cc:	947ff61e 	bne	r18,r17,80023a8 <_fwalk+0x50>
 80023d0:	9cc00017 	ldw	r19,0(r19)
 80023d4:	983fee1e 	bne	r19,zero,8002390 <_fwalk+0x38>
 80023d8:	8001bb80 	call	8001bb8 <__sfp_lock_release>
 80023dc:	b005883a 	mov	r2,r22
 80023e0:	dfc00717 	ldw	ra,28(sp)
 80023e4:	dd800617 	ldw	r22,24(sp)
 80023e8:	dd400517 	ldw	r21,20(sp)
 80023ec:	dd000417 	ldw	r20,16(sp)
 80023f0:	dcc00317 	ldw	r19,12(sp)
 80023f4:	dc800217 	ldw	r18,8(sp)
 80023f8:	dc400117 	ldw	r17,4(sp)
 80023fc:	dc000017 	ldw	r16,0(sp)
 8002400:	dec00804 	addi	sp,sp,32
 8002404:	f800283a 	ret
 8002408:	002d883a 	mov	r22,zero
 800240c:	003ff206 	br	80023d8 <_fwalk+0x80>

08002410 <__smakebuf_r>:
 8002410:	2880030b 	ldhu	r2,12(r5)
 8002414:	deffed04 	addi	sp,sp,-76
 8002418:	dc401015 	stw	r17,64(sp)
 800241c:	1080008c 	andi	r2,r2,2
 8002420:	dc000f15 	stw	r16,60(sp)
 8002424:	dfc01215 	stw	ra,72(sp)
 8002428:	dc801115 	stw	r18,68(sp)
 800242c:	2821883a 	mov	r16,r5
 8002430:	2023883a 	mov	r17,r4
 8002434:	10000b26 	beq	r2,zero,8002464 <__smakebuf_r+0x54>
 8002438:	28c010c4 	addi	r3,r5,67
 800243c:	00800044 	movi	r2,1
 8002440:	28800515 	stw	r2,20(r5)
 8002444:	28c00415 	stw	r3,16(r5)
 8002448:	28c00015 	stw	r3,0(r5)
 800244c:	dfc01217 	ldw	ra,72(sp)
 8002450:	dc801117 	ldw	r18,68(sp)
 8002454:	dc401017 	ldw	r17,64(sp)
 8002458:	dc000f17 	ldw	r16,60(sp)
 800245c:	dec01304 	addi	sp,sp,76
 8002460:	f800283a 	ret
 8002464:	2940038f 	ldh	r5,14(r5)
 8002468:	28002116 	blt	r5,zero,80024f0 <__smakebuf_r+0xe0>
 800246c:	d80d883a 	mov	r6,sp
 8002470:	80029940 	call	8002994 <_fstat_r>
 8002474:	10001e16 	blt	r2,zero,80024f0 <__smakebuf_r+0xe0>
 8002478:	d8800117 	ldw	r2,4(sp)
 800247c:	00e00014 	movui	r3,32768
 8002480:	113c000c 	andi	r4,r2,61440
 8002484:	20c03126 	beq	r4,r3,800254c <__smakebuf_r+0x13c>
 8002488:	8080030b 	ldhu	r2,12(r16)
 800248c:	00c80004 	movi	r3,8192
 8002490:	10820014 	ori	r2,r2,2048
 8002494:	8080030d 	sth	r2,12(r16)
 8002498:	20c01e26 	beq	r4,r3,8002514 <__smakebuf_r+0x104>
 800249c:	04810004 	movi	r18,1024
 80024a0:	8809883a 	mov	r4,r17
 80024a4:	900b883a 	mov	r5,r18
 80024a8:	80007e80 	call	80007e8 <_malloc_r>
 80024ac:	1009883a 	mov	r4,r2
 80024b0:	10003126 	beq	r2,zero,8002578 <__smakebuf_r+0x168>
 80024b4:	80c0030b 	ldhu	r3,12(r16)
 80024b8:	00820034 	movhi	r2,2048
 80024bc:	10872a04 	addi	r2,r2,7336
 80024c0:	88800f15 	stw	r2,60(r17)
 80024c4:	18c02014 	ori	r3,r3,128
 80024c8:	84800515 	stw	r18,20(r16)
 80024cc:	80c0030d 	sth	r3,12(r16)
 80024d0:	81000415 	stw	r4,16(r16)
 80024d4:	81000015 	stw	r4,0(r16)
 80024d8:	dfc01217 	ldw	ra,72(sp)
 80024dc:	dc801117 	ldw	r18,68(sp)
 80024e0:	dc401017 	ldw	r17,64(sp)
 80024e4:	dc000f17 	ldw	r16,60(sp)
 80024e8:	dec01304 	addi	sp,sp,76
 80024ec:	f800283a 	ret
 80024f0:	80c0030b 	ldhu	r3,12(r16)
 80024f4:	1880200c 	andi	r2,r3,128
 80024f8:	10000426 	beq	r2,zero,800250c <__smakebuf_r+0xfc>
 80024fc:	04801004 	movi	r18,64
 8002500:	18820014 	ori	r2,r3,2048
 8002504:	8080030d 	sth	r2,12(r16)
 8002508:	003fe506 	br	80024a0 <__smakebuf_r+0x90>
 800250c:	04810004 	movi	r18,1024
 8002510:	003ffb06 	br	8002500 <__smakebuf_r+0xf0>
 8002514:	8140038f 	ldh	r5,14(r16)
 8002518:	8809883a 	mov	r4,r17
 800251c:	8002a080 	call	8002a08 <_isatty_r>
 8002520:	103fde26 	beq	r2,zero,800249c <__smakebuf_r+0x8c>
 8002524:	8080030b 	ldhu	r2,12(r16)
 8002528:	80c010c4 	addi	r3,r16,67
 800252c:	04810004 	movi	r18,1024
 8002530:	10800054 	ori	r2,r2,1
 8002534:	8080030d 	sth	r2,12(r16)
 8002538:	00800044 	movi	r2,1
 800253c:	80c00415 	stw	r3,16(r16)
 8002540:	80800515 	stw	r2,20(r16)
 8002544:	80c00015 	stw	r3,0(r16)
 8002548:	003fd506 	br	80024a0 <__smakebuf_r+0x90>
 800254c:	80c00a17 	ldw	r3,40(r16)
 8002550:	00820034 	movhi	r2,2048
 8002554:	10899104 	addi	r2,r2,9796
 8002558:	18bfcb1e 	bne	r3,r2,8002488 <__smakebuf_r+0x78>
 800255c:	8080030b 	ldhu	r2,12(r16)
 8002560:	00c10004 	movi	r3,1024
 8002564:	1825883a 	mov	r18,r3
 8002568:	10c4b03a 	or	r2,r2,r3
 800256c:	8080030d 	sth	r2,12(r16)
 8002570:	80c01315 	stw	r3,76(r16)
 8002574:	003fca06 	br	80024a0 <__smakebuf_r+0x90>
 8002578:	8100030b 	ldhu	r4,12(r16)
 800257c:	2080800c 	andi	r2,r4,512
 8002580:	103fb21e 	bne	r2,zero,800244c <__smakebuf_r+0x3c>
 8002584:	80c010c4 	addi	r3,r16,67
 8002588:	21000094 	ori	r4,r4,2
 800258c:	00800044 	movi	r2,1
 8002590:	80800515 	stw	r2,20(r16)
 8002594:	8100030d 	sth	r4,12(r16)
 8002598:	80c00415 	stw	r3,16(r16)
 800259c:	80c00015 	stw	r3,0(r16)
 80025a0:	003faa06 	br	800244c <__smakebuf_r+0x3c>

080025a4 <memset>:
 80025a4:	008000c4 	movi	r2,3
 80025a8:	29403fcc 	andi	r5,r5,255
 80025ac:	2007883a 	mov	r3,r4
 80025b0:	1180022e 	bgeu	r2,r6,80025bc <memset+0x18>
 80025b4:	2084703a 	and	r2,r4,r2
 80025b8:	10000826 	beq	r2,zero,80025dc <memset+0x38>
 80025bc:	30000526 	beq	r6,zero,80025d4 <memset+0x30>
 80025c0:	2805883a 	mov	r2,r5
 80025c4:	30cd883a 	add	r6,r6,r3
 80025c8:	18800005 	stb	r2,0(r3)
 80025cc:	18c00044 	addi	r3,r3,1
 80025d0:	19bffd1e 	bne	r3,r6,80025c8 <memset+0x24>
 80025d4:	2005883a 	mov	r2,r4
 80025d8:	f800283a 	ret
 80025dc:	2804923a 	slli	r2,r5,8
 80025e0:	020003c4 	movi	r8,15
 80025e4:	200f883a 	mov	r7,r4
 80025e8:	2884b03a 	or	r2,r5,r2
 80025ec:	1006943a 	slli	r3,r2,16
 80025f0:	10c6b03a 	or	r3,r2,r3
 80025f4:	41800a2e 	bgeu	r8,r6,8002620 <memset+0x7c>
 80025f8:	4005883a 	mov	r2,r8
 80025fc:	31bffc04 	addi	r6,r6,-16
 8002600:	38c00015 	stw	r3,0(r7)
 8002604:	38c00115 	stw	r3,4(r7)
 8002608:	38c00215 	stw	r3,8(r7)
 800260c:	38c00315 	stw	r3,12(r7)
 8002610:	39c00404 	addi	r7,r7,16
 8002614:	11bff936 	bltu	r2,r6,80025fc <memset+0x58>
 8002618:	008000c4 	movi	r2,3
 800261c:	1180052e 	bgeu	r2,r6,8002634 <memset+0x90>
 8002620:	31bfff04 	addi	r6,r6,-4
 8002624:	008000c4 	movi	r2,3
 8002628:	38c00015 	stw	r3,0(r7)
 800262c:	39c00104 	addi	r7,r7,4
 8002630:	11bffb36 	bltu	r2,r6,8002620 <memset+0x7c>
 8002634:	3807883a 	mov	r3,r7
 8002638:	003fe006 	br	80025bc <memset+0x18>

0800263c <__sclose>:
 800263c:	2940038f 	ldh	r5,14(r5)
 8002640:	80028001 	jmpi	8002800 <_close_r>

08002644 <__sseek>:
 8002644:	defffe04 	addi	sp,sp,-8
 8002648:	dc000015 	stw	r16,0(sp)
 800264c:	2821883a 	mov	r16,r5
 8002650:	2940038f 	ldh	r5,14(r5)
 8002654:	dfc00115 	stw	ra,4(sp)
 8002658:	8002a780 	call	8002a78 <_lseek_r>
 800265c:	1007883a 	mov	r3,r2
 8002660:	00bfffc4 	movi	r2,-1
 8002664:	18800926 	beq	r3,r2,800268c <__sseek+0x48>
 8002668:	8080030b 	ldhu	r2,12(r16)
 800266c:	80c01415 	stw	r3,80(r16)
 8002670:	10840014 	ori	r2,r2,4096
 8002674:	8080030d 	sth	r2,12(r16)
 8002678:	1805883a 	mov	r2,r3
 800267c:	dfc00117 	ldw	ra,4(sp)
 8002680:	dc000017 	ldw	r16,0(sp)
 8002684:	dec00204 	addi	sp,sp,8
 8002688:	f800283a 	ret
 800268c:	8080030b 	ldhu	r2,12(r16)
 8002690:	10bbffcc 	andi	r2,r2,61439
 8002694:	8080030d 	sth	r2,12(r16)
 8002698:	1805883a 	mov	r2,r3
 800269c:	dfc00117 	ldw	ra,4(sp)
 80026a0:	dc000017 	ldw	r16,0(sp)
 80026a4:	dec00204 	addi	sp,sp,8
 80026a8:	f800283a 	ret

080026ac <__swrite>:
 80026ac:	2880030b 	ldhu	r2,12(r5)
 80026b0:	defffb04 	addi	sp,sp,-20
 80026b4:	dcc00315 	stw	r19,12(sp)
 80026b8:	1080400c 	andi	r2,r2,256
 80026bc:	dc800215 	stw	r18,8(sp)
 80026c0:	dc400115 	stw	r17,4(sp)
 80026c4:	dc000015 	stw	r16,0(sp)
 80026c8:	3027883a 	mov	r19,r6
 80026cc:	3825883a 	mov	r18,r7
 80026d0:	dfc00415 	stw	ra,16(sp)
 80026d4:	2821883a 	mov	r16,r5
 80026d8:	000d883a 	mov	r6,zero
 80026dc:	01c00084 	movi	r7,2
 80026e0:	2023883a 	mov	r17,r4
 80026e4:	10000226 	beq	r2,zero,80026f0 <__swrite+0x44>
 80026e8:	2940038f 	ldh	r5,14(r5)
 80026ec:	8002a780 	call	8002a78 <_lseek_r>
 80026f0:	8080030b 	ldhu	r2,12(r16)
 80026f4:	8140038f 	ldh	r5,14(r16)
 80026f8:	8809883a 	mov	r4,r17
 80026fc:	10bbffcc 	andi	r2,r2,61439
 8002700:	980d883a 	mov	r6,r19
 8002704:	900f883a 	mov	r7,r18
 8002708:	8080030d 	sth	r2,12(r16)
 800270c:	dfc00417 	ldw	ra,16(sp)
 8002710:	dcc00317 	ldw	r19,12(sp)
 8002714:	dc800217 	ldw	r18,8(sp)
 8002718:	dc400117 	ldw	r17,4(sp)
 800271c:	dc000017 	ldw	r16,0(sp)
 8002720:	dec00504 	addi	sp,sp,20
 8002724:	80027881 	jmpi	8002788 <_write_r>

08002728 <__sread>:
 8002728:	defffe04 	addi	sp,sp,-8
 800272c:	dc000015 	stw	r16,0(sp)
 8002730:	2821883a 	mov	r16,r5
 8002734:	2940038f 	ldh	r5,14(r5)
 8002738:	dfc00115 	stw	ra,4(sp)
 800273c:	8002af00 	call	8002af0 <_read_r>
 8002740:	1007883a 	mov	r3,r2
 8002744:	10000816 	blt	r2,zero,8002768 <__sread+0x40>
 8002748:	80801417 	ldw	r2,80(r16)
 800274c:	10c5883a 	add	r2,r2,r3
 8002750:	80801415 	stw	r2,80(r16)
 8002754:	1805883a 	mov	r2,r3
 8002758:	dfc00117 	ldw	ra,4(sp)
 800275c:	dc000017 	ldw	r16,0(sp)
 8002760:	dec00204 	addi	sp,sp,8
 8002764:	f800283a 	ret
 8002768:	8080030b 	ldhu	r2,12(r16)
 800276c:	10bbffcc 	andi	r2,r2,61439
 8002770:	8080030d 	sth	r2,12(r16)
 8002774:	1805883a 	mov	r2,r3
 8002778:	dfc00117 	ldw	ra,4(sp)
 800277c:	dc000017 	ldw	r16,0(sp)
 8002780:	dec00204 	addi	sp,sp,8
 8002784:	f800283a 	ret

08002788 <_write_r>:
 8002788:	defffd04 	addi	sp,sp,-12
 800278c:	dc000015 	stw	r16,0(sp)
 8002790:	04020074 	movhi	r16,2049
 8002794:	84229104 	addi	r16,r16,-30140
 8002798:	dc400115 	stw	r17,4(sp)
 800279c:	80000015 	stw	zero,0(r16)
 80027a0:	2023883a 	mov	r17,r4
 80027a4:	2809883a 	mov	r4,r5
 80027a8:	300b883a 	mov	r5,r6
 80027ac:	380d883a 	mov	r6,r7
 80027b0:	dfc00215 	stw	ra,8(sp)
 80027b4:	800352c0 	call	800352c <write>
 80027b8:	1007883a 	mov	r3,r2
 80027bc:	00bfffc4 	movi	r2,-1
 80027c0:	18800626 	beq	r3,r2,80027dc <_write_r+0x54>
 80027c4:	1805883a 	mov	r2,r3
 80027c8:	dfc00217 	ldw	ra,8(sp)
 80027cc:	dc400117 	ldw	r17,4(sp)
 80027d0:	dc000017 	ldw	r16,0(sp)
 80027d4:	dec00304 	addi	sp,sp,12
 80027d8:	f800283a 	ret
 80027dc:	80800017 	ldw	r2,0(r16)
 80027e0:	103ff826 	beq	r2,zero,80027c4 <_write_r+0x3c>
 80027e4:	88800015 	stw	r2,0(r17)
 80027e8:	1805883a 	mov	r2,r3
 80027ec:	dfc00217 	ldw	ra,8(sp)
 80027f0:	dc400117 	ldw	r17,4(sp)
 80027f4:	dc000017 	ldw	r16,0(sp)
 80027f8:	dec00304 	addi	sp,sp,12
 80027fc:	f800283a 	ret

08002800 <_close_r>:
 8002800:	defffd04 	addi	sp,sp,-12
 8002804:	dc000015 	stw	r16,0(sp)
 8002808:	04020074 	movhi	r16,2049
 800280c:	84229104 	addi	r16,r16,-30140
 8002810:	dc400115 	stw	r17,4(sp)
 8002814:	80000015 	stw	zero,0(r16)
 8002818:	2023883a 	mov	r17,r4
 800281c:	2809883a 	mov	r4,r5
 8002820:	dfc00215 	stw	ra,8(sp)
 8002824:	8002ba00 	call	8002ba0 <close>
 8002828:	1007883a 	mov	r3,r2
 800282c:	00bfffc4 	movi	r2,-1
 8002830:	18800626 	beq	r3,r2,800284c <_close_r+0x4c>
 8002834:	1805883a 	mov	r2,r3
 8002838:	dfc00217 	ldw	ra,8(sp)
 800283c:	dc400117 	ldw	r17,4(sp)
 8002840:	dc000017 	ldw	r16,0(sp)
 8002844:	dec00304 	addi	sp,sp,12
 8002848:	f800283a 	ret
 800284c:	80800017 	ldw	r2,0(r16)
 8002850:	103ff826 	beq	r2,zero,8002834 <_close_r+0x34>
 8002854:	88800015 	stw	r2,0(r17)
 8002858:	1805883a 	mov	r2,r3
 800285c:	dfc00217 	ldw	ra,8(sp)
 8002860:	dc400117 	ldw	r17,4(sp)
 8002864:	dc000017 	ldw	r16,0(sp)
 8002868:	dec00304 	addi	sp,sp,12
 800286c:	f800283a 	ret

08002870 <_fclose_r>:
 8002870:	defffc04 	addi	sp,sp,-16
 8002874:	dc400115 	stw	r17,4(sp)
 8002878:	dc000015 	stw	r16,0(sp)
 800287c:	dfc00315 	stw	ra,12(sp)
 8002880:	dc800215 	stw	r18,8(sp)
 8002884:	2821883a 	mov	r16,r5
 8002888:	2023883a 	mov	r17,r4
 800288c:	28002926 	beq	r5,zero,8002934 <_fclose_r+0xc4>
 8002890:	8001bb40 	call	8001bb4 <__sfp_lock_acquire>
 8002894:	88000226 	beq	r17,zero,80028a0 <_fclose_r+0x30>
 8002898:	88800e17 	ldw	r2,56(r17)
 800289c:	10002d26 	beq	r2,zero,8002954 <_fclose_r+0xe4>
 80028a0:	8080030f 	ldh	r2,12(r16)
 80028a4:	10002226 	beq	r2,zero,8002930 <_fclose_r+0xc0>
 80028a8:	8809883a 	mov	r4,r17
 80028ac:	800b883a 	mov	r5,r16
 80028b0:	800192c0 	call	800192c <_fflush_r>
 80028b4:	1025883a 	mov	r18,r2
 80028b8:	80800b17 	ldw	r2,44(r16)
 80028bc:	10000426 	beq	r2,zero,80028d0 <_fclose_r+0x60>
 80028c0:	81400717 	ldw	r5,28(r16)
 80028c4:	8809883a 	mov	r4,r17
 80028c8:	103ee83a 	callr	r2
 80028cc:	10002a16 	blt	r2,zero,8002978 <_fclose_r+0x108>
 80028d0:	8080030b 	ldhu	r2,12(r16)
 80028d4:	1080200c 	andi	r2,r2,128
 80028d8:	1000231e 	bne	r2,zero,8002968 <_fclose_r+0xf8>
 80028dc:	81400c17 	ldw	r5,48(r16)
 80028e0:	28000526 	beq	r5,zero,80028f8 <_fclose_r+0x88>
 80028e4:	80801004 	addi	r2,r16,64
 80028e8:	28800226 	beq	r5,r2,80028f4 <_fclose_r+0x84>
 80028ec:	8809883a 	mov	r4,r17
 80028f0:	8001f7c0 	call	8001f7c <_free_r>
 80028f4:	80000c15 	stw	zero,48(r16)
 80028f8:	81401117 	ldw	r5,68(r16)
 80028fc:	28000326 	beq	r5,zero,800290c <_fclose_r+0x9c>
 8002900:	8809883a 	mov	r4,r17
 8002904:	8001f7c0 	call	8001f7c <_free_r>
 8002908:	80001115 	stw	zero,68(r16)
 800290c:	8000030d 	sth	zero,12(r16)
 8002910:	8001bb80 	call	8001bb8 <__sfp_lock_release>
 8002914:	9005883a 	mov	r2,r18
 8002918:	dfc00317 	ldw	ra,12(sp)
 800291c:	dc800217 	ldw	r18,8(sp)
 8002920:	dc400117 	ldw	r17,4(sp)
 8002924:	dc000017 	ldw	r16,0(sp)
 8002928:	dec00404 	addi	sp,sp,16
 800292c:	f800283a 	ret
 8002930:	8001bb80 	call	8001bb8 <__sfp_lock_release>
 8002934:	0025883a 	mov	r18,zero
 8002938:	9005883a 	mov	r2,r18
 800293c:	dfc00317 	ldw	ra,12(sp)
 8002940:	dc800217 	ldw	r18,8(sp)
 8002944:	dc400117 	ldw	r17,4(sp)
 8002948:	dc000017 	ldw	r16,0(sp)
 800294c:	dec00404 	addi	sp,sp,16
 8002950:	f800283a 	ret
 8002954:	8809883a 	mov	r4,r17
 8002958:	8001bc40 	call	8001bc4 <__sinit>
 800295c:	8080030f 	ldh	r2,12(r16)
 8002960:	103fd11e 	bne	r2,zero,80028a8 <_fclose_r+0x38>
 8002964:	003ff206 	br	8002930 <_fclose_r+0xc0>
 8002968:	81400417 	ldw	r5,16(r16)
 800296c:	8809883a 	mov	r4,r17
 8002970:	8001f7c0 	call	8001f7c <_free_r>
 8002974:	003fd906 	br	80028dc <_fclose_r+0x6c>
 8002978:	04bfffc4 	movi	r18,-1
 800297c:	003fd406 	br	80028d0 <_fclose_r+0x60>

08002980 <fclose>:
 8002980:	00820034 	movhi	r2,2048
 8002984:	109be304 	addi	r2,r2,28556
 8002988:	200b883a 	mov	r5,r4
 800298c:	11000017 	ldw	r4,0(r2)
 8002990:	80028701 	jmpi	8002870 <_fclose_r>

08002994 <_fstat_r>:
 8002994:	defffd04 	addi	sp,sp,-12
 8002998:	dc000015 	stw	r16,0(sp)
 800299c:	04020074 	movhi	r16,2049
 80029a0:	84229104 	addi	r16,r16,-30140
 80029a4:	dc400115 	stw	r17,4(sp)
 80029a8:	80000015 	stw	zero,0(r16)
 80029ac:	2023883a 	mov	r17,r4
 80029b0:	2809883a 	mov	r4,r5
 80029b4:	300b883a 	mov	r5,r6
 80029b8:	dfc00215 	stw	ra,8(sp)
 80029bc:	8002d2c0 	call	8002d2c <fstat>
 80029c0:	1007883a 	mov	r3,r2
 80029c4:	00bfffc4 	movi	r2,-1
 80029c8:	18800626 	beq	r3,r2,80029e4 <_fstat_r+0x50>
 80029cc:	1805883a 	mov	r2,r3
 80029d0:	dfc00217 	ldw	ra,8(sp)
 80029d4:	dc400117 	ldw	r17,4(sp)
 80029d8:	dc000017 	ldw	r16,0(sp)
 80029dc:	dec00304 	addi	sp,sp,12
 80029e0:	f800283a 	ret
 80029e4:	80800017 	ldw	r2,0(r16)
 80029e8:	103ff826 	beq	r2,zero,80029cc <_fstat_r+0x38>
 80029ec:	88800015 	stw	r2,0(r17)
 80029f0:	1805883a 	mov	r2,r3
 80029f4:	dfc00217 	ldw	ra,8(sp)
 80029f8:	dc400117 	ldw	r17,4(sp)
 80029fc:	dc000017 	ldw	r16,0(sp)
 8002a00:	dec00304 	addi	sp,sp,12
 8002a04:	f800283a 	ret

08002a08 <_isatty_r>:
 8002a08:	defffd04 	addi	sp,sp,-12
 8002a0c:	dc000015 	stw	r16,0(sp)
 8002a10:	04020074 	movhi	r16,2049
 8002a14:	84229104 	addi	r16,r16,-30140
 8002a18:	dc400115 	stw	r17,4(sp)
 8002a1c:	80000015 	stw	zero,0(r16)
 8002a20:	2023883a 	mov	r17,r4
 8002a24:	2809883a 	mov	r4,r5
 8002a28:	dfc00215 	stw	ra,8(sp)
 8002a2c:	8002e640 	call	8002e64 <isatty>
 8002a30:	1007883a 	mov	r3,r2
 8002a34:	00bfffc4 	movi	r2,-1
 8002a38:	18800626 	beq	r3,r2,8002a54 <_isatty_r+0x4c>
 8002a3c:	1805883a 	mov	r2,r3
 8002a40:	dfc00217 	ldw	ra,8(sp)
 8002a44:	dc400117 	ldw	r17,4(sp)
 8002a48:	dc000017 	ldw	r16,0(sp)
 8002a4c:	dec00304 	addi	sp,sp,12
 8002a50:	f800283a 	ret
 8002a54:	80800017 	ldw	r2,0(r16)
 8002a58:	103ff826 	beq	r2,zero,8002a3c <_isatty_r+0x34>
 8002a5c:	88800015 	stw	r2,0(r17)
 8002a60:	1805883a 	mov	r2,r3
 8002a64:	dfc00217 	ldw	ra,8(sp)
 8002a68:	dc400117 	ldw	r17,4(sp)
 8002a6c:	dc000017 	ldw	r16,0(sp)
 8002a70:	dec00304 	addi	sp,sp,12
 8002a74:	f800283a 	ret

08002a78 <_lseek_r>:
 8002a78:	defffd04 	addi	sp,sp,-12
 8002a7c:	dc000015 	stw	r16,0(sp)
 8002a80:	04020074 	movhi	r16,2049
 8002a84:	84229104 	addi	r16,r16,-30140
 8002a88:	dc400115 	stw	r17,4(sp)
 8002a8c:	80000015 	stw	zero,0(r16)
 8002a90:	2023883a 	mov	r17,r4
 8002a94:	2809883a 	mov	r4,r5
 8002a98:	300b883a 	mov	r5,r6
 8002a9c:	380d883a 	mov	r6,r7
 8002aa0:	dfc00215 	stw	ra,8(sp)
 8002aa4:	80030740 	call	8003074 <lseek>
 8002aa8:	1007883a 	mov	r3,r2
 8002aac:	00bfffc4 	movi	r2,-1
 8002ab0:	18800626 	beq	r3,r2,8002acc <_lseek_r+0x54>
 8002ab4:	1805883a 	mov	r2,r3
 8002ab8:	dfc00217 	ldw	ra,8(sp)
 8002abc:	dc400117 	ldw	r17,4(sp)
 8002ac0:	dc000017 	ldw	r16,0(sp)
 8002ac4:	dec00304 	addi	sp,sp,12
 8002ac8:	f800283a 	ret
 8002acc:	80800017 	ldw	r2,0(r16)
 8002ad0:	103ff826 	beq	r2,zero,8002ab4 <_lseek_r+0x3c>
 8002ad4:	88800015 	stw	r2,0(r17)
 8002ad8:	1805883a 	mov	r2,r3
 8002adc:	dfc00217 	ldw	ra,8(sp)
 8002ae0:	dc400117 	ldw	r17,4(sp)
 8002ae4:	dc000017 	ldw	r16,0(sp)
 8002ae8:	dec00304 	addi	sp,sp,12
 8002aec:	f800283a 	ret

08002af0 <_read_r>:
 8002af0:	defffd04 	addi	sp,sp,-12
 8002af4:	dc000015 	stw	r16,0(sp)
 8002af8:	04020074 	movhi	r16,2049
 8002afc:	84229104 	addi	r16,r16,-30140
 8002b00:	dc400115 	stw	r17,4(sp)
 8002b04:	80000015 	stw	zero,0(r16)
 8002b08:	2023883a 	mov	r17,r4
 8002b0c:	2809883a 	mov	r4,r5
 8002b10:	300b883a 	mov	r5,r6
 8002b14:	380d883a 	mov	r6,r7
 8002b18:	dfc00215 	stw	ra,8(sp)
 8002b1c:	80032740 	call	8003274 <read>
 8002b20:	1007883a 	mov	r3,r2
 8002b24:	00bfffc4 	movi	r2,-1
 8002b28:	18800626 	beq	r3,r2,8002b44 <_read_r+0x54>
 8002b2c:	1805883a 	mov	r2,r3
 8002b30:	dfc00217 	ldw	ra,8(sp)
 8002b34:	dc400117 	ldw	r17,4(sp)
 8002b38:	dc000017 	ldw	r16,0(sp)
 8002b3c:	dec00304 	addi	sp,sp,12
 8002b40:	f800283a 	ret
 8002b44:	80800017 	ldw	r2,0(r16)
 8002b48:	103ff826 	beq	r2,zero,8002b2c <_read_r+0x3c>
 8002b4c:	88800015 	stw	r2,0(r17)
 8002b50:	1805883a 	mov	r2,r3
 8002b54:	dfc00217 	ldw	ra,8(sp)
 8002b58:	dc400117 	ldw	r17,4(sp)
 8002b5c:	dc000017 	ldw	r16,0(sp)
 8002b60:	dec00304 	addi	sp,sp,12
 8002b64:	f800283a 	ret

08002b68 <__mulsi3>:
 8002b68:	20000a26 	beq	r4,zero,8002b94 <__mulsi3+0x2c>
 8002b6c:	0007883a 	mov	r3,zero
 8002b70:	2080004c 	andi	r2,r4,1
 8002b74:	1005003a 	cmpeq	r2,r2,zero
 8002b78:	2008d07a 	srli	r4,r4,1
 8002b7c:	1000011e 	bne	r2,zero,8002b84 <__mulsi3+0x1c>
 8002b80:	1947883a 	add	r3,r3,r5
 8002b84:	294b883a 	add	r5,r5,r5
 8002b88:	203ff91e 	bne	r4,zero,8002b70 <__mulsi3+0x8>
 8002b8c:	1805883a 	mov	r2,r3
 8002b90:	f800283a 	ret
 8002b94:	0007883a 	mov	r3,zero
 8002b98:	1805883a 	mov	r2,r3
 8002b9c:	f800283a 	ret

08002ba0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8002ba0:	defff804 	addi	sp,sp,-32
 8002ba4:	dfc00715 	stw	ra,28(sp)
 8002ba8:	df000615 	stw	fp,24(sp)
 8002bac:	df000604 	addi	fp,sp,24
 8002bb0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8002bb4:	e0bffc17 	ldw	r2,-16(fp)
 8002bb8:	1004803a 	cmplt	r2,r2,zero
 8002bbc:	1000091e 	bne	r2,zero,8002be4 <close+0x44>
 8002bc0:	e13ffc17 	ldw	r4,-16(fp)
 8002bc4:	01400304 	movi	r5,12
 8002bc8:	8002b680 	call	8002b68 <__mulsi3>
 8002bcc:	1007883a 	mov	r3,r2
 8002bd0:	00820034 	movhi	r2,2048
 8002bd4:	10976004 	addi	r2,r2,23936
 8002bd8:	1887883a 	add	r3,r3,r2
 8002bdc:	e0ffff15 	stw	r3,-4(fp)
 8002be0:	00000106 	br	8002be8 <close+0x48>
 8002be4:	e03fff15 	stw	zero,-4(fp)
 8002be8:	e0bfff17 	ldw	r2,-4(fp)
 8002bec:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 8002bf0:	e0bffb17 	ldw	r2,-20(fp)
 8002bf4:	1005003a 	cmpeq	r2,r2,zero
 8002bf8:	10001d1e 	bne	r2,zero,8002c70 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8002bfc:	e0bffb17 	ldw	r2,-20(fp)
 8002c00:	10800017 	ldw	r2,0(r2)
 8002c04:	10800417 	ldw	r2,16(r2)
 8002c08:	1005003a 	cmpeq	r2,r2,zero
 8002c0c:	1000071e 	bne	r2,zero,8002c2c <close+0x8c>
 8002c10:	e0bffb17 	ldw	r2,-20(fp)
 8002c14:	10800017 	ldw	r2,0(r2)
 8002c18:	10800417 	ldw	r2,16(r2)
 8002c1c:	e13ffb17 	ldw	r4,-20(fp)
 8002c20:	103ee83a 	callr	r2
 8002c24:	e0bffe15 	stw	r2,-8(fp)
 8002c28:	00000106 	br	8002c30 <close+0x90>
 8002c2c:	e03ffe15 	stw	zero,-8(fp)
 8002c30:	e0bffe17 	ldw	r2,-8(fp)
 8002c34:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8002c38:	e13ffc17 	ldw	r4,-16(fp)
 8002c3c:	80033f80 	call	80033f8 <alt_release_fd>
    if (rval < 0)
 8002c40:	e0bffa17 	ldw	r2,-24(fp)
 8002c44:	1004403a 	cmpge	r2,r2,zero
 8002c48:	1000071e 	bne	r2,zero,8002c68 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 8002c4c:	8002ca00 	call	8002ca0 <alt_get_errno>
 8002c50:	e0fffa17 	ldw	r3,-24(fp)
 8002c54:	00c7c83a 	sub	r3,zero,r3
 8002c58:	10c00015 	stw	r3,0(r2)
      return -1;
 8002c5c:	00bfffc4 	movi	r2,-1
 8002c60:	e0bffd15 	stw	r2,-12(fp)
 8002c64:	00000806 	br	8002c88 <close+0xe8>
    }
    return 0;
 8002c68:	e03ffd15 	stw	zero,-12(fp)
 8002c6c:	00000606 	br	8002c88 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8002c70:	8002ca00 	call	8002ca0 <alt_get_errno>
 8002c74:	1007883a 	mov	r3,r2
 8002c78:	00801444 	movi	r2,81
 8002c7c:	18800015 	stw	r2,0(r3)
    return -1;
 8002c80:	00bfffc4 	movi	r2,-1
 8002c84:	e0bffd15 	stw	r2,-12(fp)
 8002c88:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 8002c8c:	e037883a 	mov	sp,fp
 8002c90:	dfc00117 	ldw	ra,4(sp)
 8002c94:	df000017 	ldw	fp,0(sp)
 8002c98:	dec00204 	addi	sp,sp,8
 8002c9c:	f800283a 	ret

08002ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002ca0:	defffd04 	addi	sp,sp,-12
 8002ca4:	dfc00215 	stw	ra,8(sp)
 8002ca8:	df000115 	stw	fp,4(sp)
 8002cac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8002cb0:	00820034 	movhi	r2,2048
 8002cb4:	109bec04 	addi	r2,r2,28592
 8002cb8:	10800017 	ldw	r2,0(r2)
 8002cbc:	1005003a 	cmpeq	r2,r2,zero
 8002cc0:	1000061e 	bne	r2,zero,8002cdc <alt_get_errno+0x3c>
 8002cc4:	00820034 	movhi	r2,2048
 8002cc8:	109bec04 	addi	r2,r2,28592
 8002ccc:	10800017 	ldw	r2,0(r2)
 8002cd0:	103ee83a 	callr	r2
 8002cd4:	e0bfff15 	stw	r2,-4(fp)
 8002cd8:	00000306 	br	8002ce8 <alt_get_errno+0x48>
 8002cdc:	00820074 	movhi	r2,2049
 8002ce0:	10a29104 	addi	r2,r2,-30140
 8002ce4:	e0bfff15 	stw	r2,-4(fp)
 8002ce8:	e0bfff17 	ldw	r2,-4(fp)
}
 8002cec:	e037883a 	mov	sp,fp
 8002cf0:	dfc00117 	ldw	ra,4(sp)
 8002cf4:	df000017 	ldw	fp,0(sp)
 8002cf8:	dec00204 	addi	sp,sp,8
 8002cfc:	f800283a 	ret

08002d00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8002d00:	defffc04 	addi	sp,sp,-16
 8002d04:	df000315 	stw	fp,12(sp)
 8002d08:	df000304 	addi	fp,sp,12
 8002d0c:	e13ffd15 	stw	r4,-12(fp)
 8002d10:	e17ffe15 	stw	r5,-8(fp)
 8002d14:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8002d18:	e0bfff17 	ldw	r2,-4(fp)
}
 8002d1c:	e037883a 	mov	sp,fp
 8002d20:	df000017 	ldw	fp,0(sp)
 8002d24:	dec00104 	addi	sp,sp,4
 8002d28:	f800283a 	ret

08002d2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8002d2c:	defff904 	addi	sp,sp,-28
 8002d30:	dfc00615 	stw	ra,24(sp)
 8002d34:	df000515 	stw	fp,20(sp)
 8002d38:	df000504 	addi	fp,sp,20
 8002d3c:	e13ffc15 	stw	r4,-16(fp)
 8002d40:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8002d44:	e0bffc17 	ldw	r2,-16(fp)
 8002d48:	1004803a 	cmplt	r2,r2,zero
 8002d4c:	1000091e 	bne	r2,zero,8002d74 <fstat+0x48>
 8002d50:	e13ffc17 	ldw	r4,-16(fp)
 8002d54:	01400304 	movi	r5,12
 8002d58:	8002b680 	call	8002b68 <__mulsi3>
 8002d5c:	1007883a 	mov	r3,r2
 8002d60:	00820034 	movhi	r2,2048
 8002d64:	10976004 	addi	r2,r2,23936
 8002d68:	1887883a 	add	r3,r3,r2
 8002d6c:	e0ffff15 	stw	r3,-4(fp)
 8002d70:	00000106 	br	8002d78 <fstat+0x4c>
 8002d74:	e03fff15 	stw	zero,-4(fp)
 8002d78:	e0bfff17 	ldw	r2,-4(fp)
 8002d7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8002d80:	e0bffb17 	ldw	r2,-20(fp)
 8002d84:	1005003a 	cmpeq	r2,r2,zero
 8002d88:	1000121e 	bne	r2,zero,8002dd4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8002d8c:	e0bffb17 	ldw	r2,-20(fp)
 8002d90:	10800017 	ldw	r2,0(r2)
 8002d94:	10800817 	ldw	r2,32(r2)
 8002d98:	1005003a 	cmpeq	r2,r2,zero
 8002d9c:	1000081e 	bne	r2,zero,8002dc0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 8002da0:	e0bffb17 	ldw	r2,-20(fp)
 8002da4:	10800017 	ldw	r2,0(r2)
 8002da8:	10800817 	ldw	r2,32(r2)
 8002dac:	e13ffb17 	ldw	r4,-20(fp)
 8002db0:	e17ffd17 	ldw	r5,-12(fp)
 8002db4:	103ee83a 	callr	r2
 8002db8:	e0bffe15 	stw	r2,-8(fp)
 8002dbc:	00000b06 	br	8002dec <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8002dc0:	e0fffd17 	ldw	r3,-12(fp)
 8002dc4:	00880004 	movi	r2,8192
 8002dc8:	18800115 	stw	r2,4(r3)
      return 0;
 8002dcc:	e03ffe15 	stw	zero,-8(fp)
 8002dd0:	00000606 	br	8002dec <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8002dd4:	8002e040 	call	8002e04 <alt_get_errno>
 8002dd8:	1007883a 	mov	r3,r2
 8002ddc:	00801444 	movi	r2,81
 8002de0:	18800015 	stw	r2,0(r3)
    return -1;
 8002de4:	00bfffc4 	movi	r2,-1
 8002de8:	e0bffe15 	stw	r2,-8(fp)
 8002dec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 8002df0:	e037883a 	mov	sp,fp
 8002df4:	dfc00117 	ldw	ra,4(sp)
 8002df8:	df000017 	ldw	fp,0(sp)
 8002dfc:	dec00204 	addi	sp,sp,8
 8002e00:	f800283a 	ret

08002e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002e04:	defffd04 	addi	sp,sp,-12
 8002e08:	dfc00215 	stw	ra,8(sp)
 8002e0c:	df000115 	stw	fp,4(sp)
 8002e10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8002e14:	00820034 	movhi	r2,2048
 8002e18:	109bec04 	addi	r2,r2,28592
 8002e1c:	10800017 	ldw	r2,0(r2)
 8002e20:	1005003a 	cmpeq	r2,r2,zero
 8002e24:	1000061e 	bne	r2,zero,8002e40 <alt_get_errno+0x3c>
 8002e28:	00820034 	movhi	r2,2048
 8002e2c:	109bec04 	addi	r2,r2,28592
 8002e30:	10800017 	ldw	r2,0(r2)
 8002e34:	103ee83a 	callr	r2
 8002e38:	e0bfff15 	stw	r2,-4(fp)
 8002e3c:	00000306 	br	8002e4c <alt_get_errno+0x48>
 8002e40:	00820074 	movhi	r2,2049
 8002e44:	10a29104 	addi	r2,r2,-30140
 8002e48:	e0bfff15 	stw	r2,-4(fp)
 8002e4c:	e0bfff17 	ldw	r2,-4(fp)
}
 8002e50:	e037883a 	mov	sp,fp
 8002e54:	dfc00117 	ldw	ra,4(sp)
 8002e58:	df000017 	ldw	fp,0(sp)
 8002e5c:	dec00204 	addi	sp,sp,8
 8002e60:	f800283a 	ret

08002e64 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8002e64:	deffeb04 	addi	sp,sp,-84
 8002e68:	dfc01415 	stw	ra,80(sp)
 8002e6c:	df001315 	stw	fp,76(sp)
 8002e70:	df001304 	addi	fp,sp,76
 8002e74:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8002e78:	e0bffd17 	ldw	r2,-12(fp)
 8002e7c:	1004803a 	cmplt	r2,r2,zero
 8002e80:	1000091e 	bne	r2,zero,8002ea8 <isatty+0x44>
 8002e84:	e13ffd17 	ldw	r4,-12(fp)
 8002e88:	01400304 	movi	r5,12
 8002e8c:	8002b680 	call	8002b68 <__mulsi3>
 8002e90:	1007883a 	mov	r3,r2
 8002e94:	00820034 	movhi	r2,2048
 8002e98:	10976004 	addi	r2,r2,23936
 8002e9c:	1887883a 	add	r3,r3,r2
 8002ea0:	e0ffff15 	stw	r3,-4(fp)
 8002ea4:	00000106 	br	8002eac <isatty+0x48>
 8002ea8:	e03fff15 	stw	zero,-4(fp)
 8002eac:	e0bfff17 	ldw	r2,-4(fp)
 8002eb0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 8002eb4:	e0bfed17 	ldw	r2,-76(fp)
 8002eb8:	1005003a 	cmpeq	r2,r2,zero
 8002ebc:	10000f1e 	bne	r2,zero,8002efc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8002ec0:	e0bfed17 	ldw	r2,-76(fp)
 8002ec4:	10800017 	ldw	r2,0(r2)
 8002ec8:	10800817 	ldw	r2,32(r2)
 8002ecc:	1004c03a 	cmpne	r2,r2,zero
 8002ed0:	1000031e 	bne	r2,zero,8002ee0 <isatty+0x7c>
    {
      return 1;
 8002ed4:	00800044 	movi	r2,1
 8002ed8:	e0bffe15 	stw	r2,-8(fp)
 8002edc:	00000c06 	br	8002f10 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8002ee0:	e17fee04 	addi	r5,fp,-72
 8002ee4:	e13ffd17 	ldw	r4,-12(fp)
 8002ee8:	8002d2c0 	call	8002d2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8002eec:	e0bfef17 	ldw	r2,-68(fp)
 8002ef0:	10880020 	cmpeqi	r2,r2,8192
 8002ef4:	e0bffe15 	stw	r2,-8(fp)
 8002ef8:	00000506 	br	8002f10 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8002efc:	8002f280 	call	8002f28 <alt_get_errno>
 8002f00:	1007883a 	mov	r3,r2
 8002f04:	00801444 	movi	r2,81
 8002f08:	18800015 	stw	r2,0(r3)
    return 0;
 8002f0c:	e03ffe15 	stw	zero,-8(fp)
 8002f10:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 8002f14:	e037883a 	mov	sp,fp
 8002f18:	dfc00117 	ldw	ra,4(sp)
 8002f1c:	df000017 	ldw	fp,0(sp)
 8002f20:	dec00204 	addi	sp,sp,8
 8002f24:	f800283a 	ret

08002f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002f28:	defffd04 	addi	sp,sp,-12
 8002f2c:	dfc00215 	stw	ra,8(sp)
 8002f30:	df000115 	stw	fp,4(sp)
 8002f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8002f38:	00820034 	movhi	r2,2048
 8002f3c:	109bec04 	addi	r2,r2,28592
 8002f40:	10800017 	ldw	r2,0(r2)
 8002f44:	1005003a 	cmpeq	r2,r2,zero
 8002f48:	1000061e 	bne	r2,zero,8002f64 <alt_get_errno+0x3c>
 8002f4c:	00820034 	movhi	r2,2048
 8002f50:	109bec04 	addi	r2,r2,28592
 8002f54:	10800017 	ldw	r2,0(r2)
 8002f58:	103ee83a 	callr	r2
 8002f5c:	e0bfff15 	stw	r2,-4(fp)
 8002f60:	00000306 	br	8002f70 <alt_get_errno+0x48>
 8002f64:	00820074 	movhi	r2,2049
 8002f68:	10a29104 	addi	r2,r2,-30140
 8002f6c:	e0bfff15 	stw	r2,-4(fp)
 8002f70:	e0bfff17 	ldw	r2,-4(fp)
}
 8002f74:	e037883a 	mov	sp,fp
 8002f78:	dfc00117 	ldw	ra,4(sp)
 8002f7c:	df000017 	ldw	fp,0(sp)
 8002f80:	dec00204 	addi	sp,sp,8
 8002f84:	f800283a 	ret

08002f88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8002f88:	defffe04 	addi	sp,sp,-8
 8002f8c:	dfc00115 	stw	ra,4(sp)
 8002f90:	df000015 	stw	fp,0(sp)
 8002f94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8002f98:	01020034 	movhi	r4,2048
 8002f9c:	211bf104 	addi	r4,r4,28612
 8002fa0:	01420034 	movhi	r5,2048
 8002fa4:	29555404 	addi	r5,r5,21840
 8002fa8:	01820034 	movhi	r6,2048
 8002fac:	319bf104 	addi	r6,r6,28612
 8002fb0:	80030080 	call	8003008 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8002fb4:	01020034 	movhi	r4,2048
 8002fb8:	21000804 	addi	r4,r4,32
 8002fbc:	01420034 	movhi	r5,2048
 8002fc0:	29400804 	addi	r5,r5,32
 8002fc4:	01820034 	movhi	r6,2048
 8002fc8:	31806d04 	addi	r6,r6,436
 8002fcc:	80030080 	call	8003008 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8002fd0:	01020034 	movhi	r4,2048
 8002fd4:	21153504 	addi	r4,r4,21716
 8002fd8:	01420034 	movhi	r5,2048
 8002fdc:	29553504 	addi	r5,r5,21716
 8002fe0:	01820034 	movhi	r6,2048
 8002fe4:	31955404 	addi	r6,r6,21840
 8002fe8:	80030080 	call	8003008 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8002fec:	800436c0 	call	800436c <alt_dcache_flush_all>
  alt_icache_flush_all();
 8002ff0:	80045640 	call	8004564 <alt_icache_flush_all>
}
 8002ff4:	e037883a 	mov	sp,fp
 8002ff8:	dfc00117 	ldw	ra,4(sp)
 8002ffc:	df000017 	ldw	fp,0(sp)
 8003000:	dec00204 	addi	sp,sp,8
 8003004:	f800283a 	ret

08003008 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8003008:	defffc04 	addi	sp,sp,-16
 800300c:	df000315 	stw	fp,12(sp)
 8003010:	df000304 	addi	fp,sp,12
 8003014:	e13ffd15 	stw	r4,-12(fp)
 8003018:	e17ffe15 	stw	r5,-8(fp)
 800301c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8003020:	e0fffe17 	ldw	r3,-8(fp)
 8003024:	e0bffd17 	ldw	r2,-12(fp)
 8003028:	18800e26 	beq	r3,r2,8003064 <alt_load_section+0x5c>
  {
    while( to != end )
 800302c:	00000a06 	br	8003058 <alt_load_section+0x50>
    {
      *to++ = *from++;
 8003030:	e0bffd17 	ldw	r2,-12(fp)
 8003034:	10c00017 	ldw	r3,0(r2)
 8003038:	e0bffe17 	ldw	r2,-8(fp)
 800303c:	10c00015 	stw	r3,0(r2)
 8003040:	e0bffe17 	ldw	r2,-8(fp)
 8003044:	10800104 	addi	r2,r2,4
 8003048:	e0bffe15 	stw	r2,-8(fp)
 800304c:	e0bffd17 	ldw	r2,-12(fp)
 8003050:	10800104 	addi	r2,r2,4
 8003054:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8003058:	e0fffe17 	ldw	r3,-8(fp)
 800305c:	e0bfff17 	ldw	r2,-4(fp)
 8003060:	18bff31e 	bne	r3,r2,8003030 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8003064:	e037883a 	mov	sp,fp
 8003068:	df000017 	ldw	fp,0(sp)
 800306c:	dec00104 	addi	sp,sp,4
 8003070:	f800283a 	ret

08003074 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8003074:	defff804 	addi	sp,sp,-32
 8003078:	dfc00715 	stw	ra,28(sp)
 800307c:	df000615 	stw	fp,24(sp)
 8003080:	df000604 	addi	fp,sp,24
 8003084:	e13ffc15 	stw	r4,-16(fp)
 8003088:	e17ffd15 	stw	r5,-12(fp)
 800308c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8003090:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003094:	e0bffc17 	ldw	r2,-16(fp)
 8003098:	1004803a 	cmplt	r2,r2,zero
 800309c:	1000091e 	bne	r2,zero,80030c4 <lseek+0x50>
 80030a0:	e13ffc17 	ldw	r4,-16(fp)
 80030a4:	01400304 	movi	r5,12
 80030a8:	8002b680 	call	8002b68 <__mulsi3>
 80030ac:	1007883a 	mov	r3,r2
 80030b0:	00820034 	movhi	r2,2048
 80030b4:	10976004 	addi	r2,r2,23936
 80030b8:	1887883a 	add	r3,r3,r2
 80030bc:	e0ffff15 	stw	r3,-4(fp)
 80030c0:	00000106 	br	80030c8 <lseek+0x54>
 80030c4:	e03fff15 	stw	zero,-4(fp)
 80030c8:	e0bfff17 	ldw	r2,-4(fp)
 80030cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 80030d0:	e0bffb17 	ldw	r2,-20(fp)
 80030d4:	1005003a 	cmpeq	r2,r2,zero
 80030d8:	1000111e 	bne	r2,zero,8003120 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80030dc:	e0bffb17 	ldw	r2,-20(fp)
 80030e0:	10800017 	ldw	r2,0(r2)
 80030e4:	10800717 	ldw	r2,28(r2)
 80030e8:	1005003a 	cmpeq	r2,r2,zero
 80030ec:	1000091e 	bne	r2,zero,8003114 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 80030f0:	e0bffb17 	ldw	r2,-20(fp)
 80030f4:	10800017 	ldw	r2,0(r2)
 80030f8:	10800717 	ldw	r2,28(r2)
 80030fc:	e13ffb17 	ldw	r4,-20(fp)
 8003100:	e17ffd17 	ldw	r5,-12(fp)
 8003104:	e1bffe17 	ldw	r6,-8(fp)
 8003108:	103ee83a 	callr	r2
 800310c:	e0bffa15 	stw	r2,-24(fp)
 8003110:	00000506 	br	8003128 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8003114:	00bfde84 	movi	r2,-134
 8003118:	e0bffa15 	stw	r2,-24(fp)
 800311c:	00000206 	br	8003128 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 8003120:	00bfebc4 	movi	r2,-81
 8003124:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 8003128:	e0bffa17 	ldw	r2,-24(fp)
 800312c:	1004403a 	cmpge	r2,r2,zero
 8003130:	1000071e 	bne	r2,zero,8003150 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 8003134:	80031680 	call	8003168 <alt_get_errno>
 8003138:	1007883a 	mov	r3,r2
 800313c:	e0bffa17 	ldw	r2,-24(fp)
 8003140:	0085c83a 	sub	r2,zero,r2
 8003144:	18800015 	stw	r2,0(r3)
    rc = -1;
 8003148:	00bfffc4 	movi	r2,-1
 800314c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 8003150:	e0bffa17 	ldw	r2,-24(fp)
}
 8003154:	e037883a 	mov	sp,fp
 8003158:	dfc00117 	ldw	ra,4(sp)
 800315c:	df000017 	ldw	fp,0(sp)
 8003160:	dec00204 	addi	sp,sp,8
 8003164:	f800283a 	ret

08003168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003168:	defffd04 	addi	sp,sp,-12
 800316c:	dfc00215 	stw	ra,8(sp)
 8003170:	df000115 	stw	fp,4(sp)
 8003174:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8003178:	00820034 	movhi	r2,2048
 800317c:	109bec04 	addi	r2,r2,28592
 8003180:	10800017 	ldw	r2,0(r2)
 8003184:	1005003a 	cmpeq	r2,r2,zero
 8003188:	1000061e 	bne	r2,zero,80031a4 <alt_get_errno+0x3c>
 800318c:	00820034 	movhi	r2,2048
 8003190:	109bec04 	addi	r2,r2,28592
 8003194:	10800017 	ldw	r2,0(r2)
 8003198:	103ee83a 	callr	r2
 800319c:	e0bfff15 	stw	r2,-4(fp)
 80031a0:	00000306 	br	80031b0 <alt_get_errno+0x48>
 80031a4:	00820074 	movhi	r2,2049
 80031a8:	10a29104 	addi	r2,r2,-30140
 80031ac:	e0bfff15 	stw	r2,-4(fp)
 80031b0:	e0bfff17 	ldw	r2,-4(fp)
}
 80031b4:	e037883a 	mov	sp,fp
 80031b8:	dfc00117 	ldw	ra,4(sp)
 80031bc:	df000017 	ldw	fp,0(sp)
 80031c0:	dec00204 	addi	sp,sp,8
 80031c4:	f800283a 	ret

080031c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80031c8:	defffd04 	addi	sp,sp,-12
 80031cc:	dfc00215 	stw	ra,8(sp)
 80031d0:	df000115 	stw	fp,4(sp)
 80031d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80031d8:	0009883a 	mov	r4,zero
 80031dc:	80036b00 	call	80036b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80031e0:	80036e40 	call	80036e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80031e4:	01020034 	movhi	r4,2048
 80031e8:	21153f04 	addi	r4,r4,21756
 80031ec:	01420034 	movhi	r5,2048
 80031f0:	29553f04 	addi	r5,r5,21756
 80031f4:	01820034 	movhi	r6,2048
 80031f8:	31953f04 	addi	r6,r6,21756
 80031fc:	80049240 	call	8004924 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8003200:	800449c0 	call	800449c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8003204:	01020034 	movhi	r4,2048
 8003208:	21114004 	addi	r4,r4,17664
 800320c:	80050c80 	call	80050c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8003210:	d126af17 	ldw	r4,-25924(gp)
 8003214:	d166b017 	ldw	r5,-25920(gp)
 8003218:	d1a6b117 	ldw	r6,-25916(gp)
 800321c:	80001f00 	call	80001f0 <main>
 8003220:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8003224:	01000044 	movi	r4,1
 8003228:	8002ba00 	call	8002ba0 <close>
  exit (result);
 800322c:	e13fff17 	ldw	r4,-4(fp)
 8003230:	80050dc0 	call	80050dc <exit>

08003234 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8003234:	defffe04 	addi	sp,sp,-8
 8003238:	df000115 	stw	fp,4(sp)
 800323c:	df000104 	addi	fp,sp,4
 8003240:	e13fff15 	stw	r4,-4(fp)
}
 8003244:	e037883a 	mov	sp,fp
 8003248:	df000017 	ldw	fp,0(sp)
 800324c:	dec00104 	addi	sp,sp,4
 8003250:	f800283a 	ret

08003254 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8003254:	defffe04 	addi	sp,sp,-8
 8003258:	df000115 	stw	fp,4(sp)
 800325c:	df000104 	addi	fp,sp,4
 8003260:	e13fff15 	stw	r4,-4(fp)
}
 8003264:	e037883a 	mov	sp,fp
 8003268:	df000017 	ldw	fp,0(sp)
 800326c:	dec00104 	addi	sp,sp,4
 8003270:	f800283a 	ret

08003274 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8003274:	defff704 	addi	sp,sp,-36
 8003278:	dfc00815 	stw	ra,32(sp)
 800327c:	df000715 	stw	fp,28(sp)
 8003280:	df000704 	addi	fp,sp,28
 8003284:	e13ffb15 	stw	r4,-20(fp)
 8003288:	e17ffc15 	stw	r5,-16(fp)
 800328c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003290:	e0bffb17 	ldw	r2,-20(fp)
 8003294:	1004803a 	cmplt	r2,r2,zero
 8003298:	1000091e 	bne	r2,zero,80032c0 <read+0x4c>
 800329c:	e13ffb17 	ldw	r4,-20(fp)
 80032a0:	01400304 	movi	r5,12
 80032a4:	8002b680 	call	8002b68 <__mulsi3>
 80032a8:	1007883a 	mov	r3,r2
 80032ac:	00820034 	movhi	r2,2048
 80032b0:	10976004 	addi	r2,r2,23936
 80032b4:	1887883a 	add	r3,r3,r2
 80032b8:	e0ffff15 	stw	r3,-4(fp)
 80032bc:	00000106 	br	80032c4 <read+0x50>
 80032c0:	e03fff15 	stw	zero,-4(fp)
 80032c4:	e0bfff17 	ldw	r2,-4(fp)
 80032c8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 80032cc:	e0bffa17 	ldw	r2,-24(fp)
 80032d0:	1005003a 	cmpeq	r2,r2,zero
 80032d4:	1000241e 	bne	r2,zero,8003368 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80032d8:	e0bffa17 	ldw	r2,-24(fp)
 80032dc:	10800217 	ldw	r2,8(r2)
 80032e0:	108000cc 	andi	r2,r2,3
 80032e4:	10800060 	cmpeqi	r2,r2,1
 80032e8:	10001a1e 	bne	r2,zero,8003354 <read+0xe0>
 80032ec:	e0bffa17 	ldw	r2,-24(fp)
 80032f0:	10800017 	ldw	r2,0(r2)
 80032f4:	10800517 	ldw	r2,20(r2)
 80032f8:	1005003a 	cmpeq	r2,r2,zero
 80032fc:	1000151e 	bne	r2,zero,8003354 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8003300:	e0bffa17 	ldw	r2,-24(fp)
 8003304:	10800017 	ldw	r2,0(r2)
 8003308:	10800517 	ldw	r2,20(r2)
 800330c:	e17ffc17 	ldw	r5,-16(fp)
 8003310:	e1bffd17 	ldw	r6,-12(fp)
 8003314:	e13ffa17 	ldw	r4,-24(fp)
 8003318:	103ee83a 	callr	r2
 800331c:	e0bff915 	stw	r2,-28(fp)
 8003320:	e0bff917 	ldw	r2,-28(fp)
 8003324:	1004403a 	cmpge	r2,r2,zero
 8003328:	1000071e 	bne	r2,zero,8003348 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 800332c:	80033980 	call	8003398 <alt_get_errno>
 8003330:	e0fff917 	ldw	r3,-28(fp)
 8003334:	00c7c83a 	sub	r3,zero,r3
 8003338:	10c00015 	stw	r3,0(r2)
          return -1;
 800333c:	00bfffc4 	movi	r2,-1
 8003340:	e0bffe15 	stw	r2,-8(fp)
 8003344:	00000e06 	br	8003380 <read+0x10c>
        }
        return rval;
 8003348:	e0bff917 	ldw	r2,-28(fp)
 800334c:	e0bffe15 	stw	r2,-8(fp)
 8003350:	00000b06 	br	8003380 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8003354:	80033980 	call	8003398 <alt_get_errno>
 8003358:	1007883a 	mov	r3,r2
 800335c:	00800344 	movi	r2,13
 8003360:	18800015 	stw	r2,0(r3)
 8003364:	00000406 	br	8003378 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8003368:	80033980 	call	8003398 <alt_get_errno>
 800336c:	1007883a 	mov	r3,r2
 8003370:	00801444 	movi	r2,81
 8003374:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8003378:	00bfffc4 	movi	r2,-1
 800337c:	e0bffe15 	stw	r2,-8(fp)
 8003380:	e0bffe17 	ldw	r2,-8(fp)
}
 8003384:	e037883a 	mov	sp,fp
 8003388:	dfc00117 	ldw	ra,4(sp)
 800338c:	df000017 	ldw	fp,0(sp)
 8003390:	dec00204 	addi	sp,sp,8
 8003394:	f800283a 	ret

08003398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003398:	defffd04 	addi	sp,sp,-12
 800339c:	dfc00215 	stw	ra,8(sp)
 80033a0:	df000115 	stw	fp,4(sp)
 80033a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 80033a8:	00820034 	movhi	r2,2048
 80033ac:	109bec04 	addi	r2,r2,28592
 80033b0:	10800017 	ldw	r2,0(r2)
 80033b4:	1005003a 	cmpeq	r2,r2,zero
 80033b8:	1000061e 	bne	r2,zero,80033d4 <alt_get_errno+0x3c>
 80033bc:	00820034 	movhi	r2,2048
 80033c0:	109bec04 	addi	r2,r2,28592
 80033c4:	10800017 	ldw	r2,0(r2)
 80033c8:	103ee83a 	callr	r2
 80033cc:	e0bfff15 	stw	r2,-4(fp)
 80033d0:	00000306 	br	80033e0 <alt_get_errno+0x48>
 80033d4:	00820074 	movhi	r2,2049
 80033d8:	10a29104 	addi	r2,r2,-30140
 80033dc:	e0bfff15 	stw	r2,-4(fp)
 80033e0:	e0bfff17 	ldw	r2,-4(fp)
}
 80033e4:	e037883a 	mov	sp,fp
 80033e8:	dfc00117 	ldw	ra,4(sp)
 80033ec:	df000017 	ldw	fp,0(sp)
 80033f0:	dec00204 	addi	sp,sp,8
 80033f4:	f800283a 	ret

080033f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80033f8:	defffc04 	addi	sp,sp,-16
 80033fc:	dfc00315 	stw	ra,12(sp)
 8003400:	df000215 	stw	fp,8(sp)
 8003404:	dc000115 	stw	r16,4(sp)
 8003408:	df000104 	addi	fp,sp,4
 800340c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8003410:	e0bfff17 	ldw	r2,-4(fp)
 8003414:	108000d0 	cmplti	r2,r2,3
 8003418:	10000f1e 	bne	r2,zero,8003458 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 800341c:	e13fff17 	ldw	r4,-4(fp)
 8003420:	04020034 	movhi	r16,2048
 8003424:	84176004 	addi	r16,r16,23936
 8003428:	01400304 	movi	r5,12
 800342c:	8002b680 	call	8002b68 <__mulsi3>
 8003430:	1405883a 	add	r2,r2,r16
 8003434:	10800204 	addi	r2,r2,8
 8003438:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800343c:	e13fff17 	ldw	r4,-4(fp)
 8003440:	04020034 	movhi	r16,2048
 8003444:	84176004 	addi	r16,r16,23936
 8003448:	01400304 	movi	r5,12
 800344c:	8002b680 	call	8002b68 <__mulsi3>
 8003450:	1405883a 	add	r2,r2,r16
 8003454:	10000015 	stw	zero,0(r2)
  }
}
 8003458:	e037883a 	mov	sp,fp
 800345c:	dfc00217 	ldw	ra,8(sp)
 8003460:	df000117 	ldw	fp,4(sp)
 8003464:	dc000017 	ldw	r16,0(sp)
 8003468:	dec00304 	addi	sp,sp,12
 800346c:	f800283a 	ret

08003470 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8003470:	defff804 	addi	sp,sp,-32
 8003474:	df000715 	stw	fp,28(sp)
 8003478:	df000704 	addi	fp,sp,28
 800347c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003480:	0005303a 	rdctl	r2,status
 8003484:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003488:	e0fffb17 	ldw	r3,-20(fp)
 800348c:	00bfff84 	movi	r2,-2
 8003490:	1884703a 	and	r2,r3,r2
 8003494:	1001703a 	wrctl	status,r2
  
  return context;
 8003498:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800349c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80034a0:	d0a00a17 	ldw	r2,-32728(gp)
 80034a4:	10c000c4 	addi	r3,r2,3
 80034a8:	00bfff04 	movi	r2,-4
 80034ac:	1884703a 	and	r2,r3,r2
 80034b0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80034b4:	d0e00a17 	ldw	r3,-32728(gp)
 80034b8:	e0bffe17 	ldw	r2,-8(fp)
 80034bc:	1887883a 	add	r3,r3,r2
 80034c0:	00840034 	movhi	r2,4096
 80034c4:	10800004 	addi	r2,r2,0
 80034c8:	10c0072e 	bgeu	r2,r3,80034e8 <sbrk+0x78>
 80034cc:	e0bffd17 	ldw	r2,-12(fp)
 80034d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80034d4:	e0bffa17 	ldw	r2,-24(fp)
 80034d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80034dc:	00bfffc4 	movi	r2,-1
 80034e0:	e0bfff15 	stw	r2,-4(fp)
 80034e4:	00000c06 	br	8003518 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 80034e8:	d0a00a17 	ldw	r2,-32728(gp)
 80034ec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 80034f0:	d0e00a17 	ldw	r3,-32728(gp)
 80034f4:	e0bffe17 	ldw	r2,-8(fp)
 80034f8:	1885883a 	add	r2,r3,r2
 80034fc:	d0a00a15 	stw	r2,-32728(gp)
 8003500:	e0bffd17 	ldw	r2,-12(fp)
 8003504:	e0bff915 	stw	r2,-28(fp)
 8003508:	e0bff917 	ldw	r2,-28(fp)
 800350c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8003510:	e0bffc17 	ldw	r2,-16(fp)
 8003514:	e0bfff15 	stw	r2,-4(fp)
 8003518:	e0bfff17 	ldw	r2,-4(fp)
} 
 800351c:	e037883a 	mov	sp,fp
 8003520:	df000017 	ldw	fp,0(sp)
 8003524:	dec00104 	addi	sp,sp,4
 8003528:	f800283a 	ret

0800352c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800352c:	defff704 	addi	sp,sp,-36
 8003530:	dfc00815 	stw	ra,32(sp)
 8003534:	df000715 	stw	fp,28(sp)
 8003538:	df000704 	addi	fp,sp,28
 800353c:	e13ffb15 	stw	r4,-20(fp)
 8003540:	e17ffc15 	stw	r5,-16(fp)
 8003544:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003548:	e0bffb17 	ldw	r2,-20(fp)
 800354c:	1004803a 	cmplt	r2,r2,zero
 8003550:	1000091e 	bne	r2,zero,8003578 <write+0x4c>
 8003554:	e13ffb17 	ldw	r4,-20(fp)
 8003558:	01400304 	movi	r5,12
 800355c:	8002b680 	call	8002b68 <__mulsi3>
 8003560:	1007883a 	mov	r3,r2
 8003564:	00820034 	movhi	r2,2048
 8003568:	10976004 	addi	r2,r2,23936
 800356c:	1887883a 	add	r3,r3,r2
 8003570:	e0ffff15 	stw	r3,-4(fp)
 8003574:	00000106 	br	800357c <write+0x50>
 8003578:	e03fff15 	stw	zero,-4(fp)
 800357c:	e0bfff17 	ldw	r2,-4(fp)
 8003580:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 8003584:	e0bffa17 	ldw	r2,-24(fp)
 8003588:	1005003a 	cmpeq	r2,r2,zero
 800358c:	1000241e 	bne	r2,zero,8003620 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8003590:	e0bffa17 	ldw	r2,-24(fp)
 8003594:	10800217 	ldw	r2,8(r2)
 8003598:	108000cc 	andi	r2,r2,3
 800359c:	1005003a 	cmpeq	r2,r2,zero
 80035a0:	10001a1e 	bne	r2,zero,800360c <write+0xe0>
 80035a4:	e0bffa17 	ldw	r2,-24(fp)
 80035a8:	10800017 	ldw	r2,0(r2)
 80035ac:	10800617 	ldw	r2,24(r2)
 80035b0:	1005003a 	cmpeq	r2,r2,zero
 80035b4:	1000151e 	bne	r2,zero,800360c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80035b8:	e0bffa17 	ldw	r2,-24(fp)
 80035bc:	10800017 	ldw	r2,0(r2)
 80035c0:	10800617 	ldw	r2,24(r2)
 80035c4:	e17ffc17 	ldw	r5,-16(fp)
 80035c8:	e1bffd17 	ldw	r6,-12(fp)
 80035cc:	e13ffa17 	ldw	r4,-24(fp)
 80035d0:	103ee83a 	callr	r2
 80035d4:	e0bff915 	stw	r2,-28(fp)
 80035d8:	e0bff917 	ldw	r2,-28(fp)
 80035dc:	1004403a 	cmpge	r2,r2,zero
 80035e0:	1000071e 	bne	r2,zero,8003600 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 80035e4:	80036500 	call	8003650 <alt_get_errno>
 80035e8:	e0fff917 	ldw	r3,-28(fp)
 80035ec:	00c7c83a 	sub	r3,zero,r3
 80035f0:	10c00015 	stw	r3,0(r2)
        return -1;
 80035f4:	00bfffc4 	movi	r2,-1
 80035f8:	e0bffe15 	stw	r2,-8(fp)
 80035fc:	00000e06 	br	8003638 <write+0x10c>
      }
      return rval;
 8003600:	e0bff917 	ldw	r2,-28(fp)
 8003604:	e0bffe15 	stw	r2,-8(fp)
 8003608:	00000b06 	br	8003638 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800360c:	80036500 	call	8003650 <alt_get_errno>
 8003610:	1007883a 	mov	r3,r2
 8003614:	00800344 	movi	r2,13
 8003618:	18800015 	stw	r2,0(r3)
 800361c:	00000406 	br	8003630 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8003620:	80036500 	call	8003650 <alt_get_errno>
 8003624:	1007883a 	mov	r3,r2
 8003628:	00801444 	movi	r2,81
 800362c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8003630:	00bfffc4 	movi	r2,-1
 8003634:	e0bffe15 	stw	r2,-8(fp)
 8003638:	e0bffe17 	ldw	r2,-8(fp)
}
 800363c:	e037883a 	mov	sp,fp
 8003640:	dfc00117 	ldw	ra,4(sp)
 8003644:	df000017 	ldw	fp,0(sp)
 8003648:	dec00204 	addi	sp,sp,8
 800364c:	f800283a 	ret

08003650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003650:	defffd04 	addi	sp,sp,-12
 8003654:	dfc00215 	stw	ra,8(sp)
 8003658:	df000115 	stw	fp,4(sp)
 800365c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8003660:	00820034 	movhi	r2,2048
 8003664:	109bec04 	addi	r2,r2,28592
 8003668:	10800017 	ldw	r2,0(r2)
 800366c:	1005003a 	cmpeq	r2,r2,zero
 8003670:	1000061e 	bne	r2,zero,800368c <alt_get_errno+0x3c>
 8003674:	00820034 	movhi	r2,2048
 8003678:	109bec04 	addi	r2,r2,28592
 800367c:	10800017 	ldw	r2,0(r2)
 8003680:	103ee83a 	callr	r2
 8003684:	e0bfff15 	stw	r2,-4(fp)
 8003688:	00000306 	br	8003698 <alt_get_errno+0x48>
 800368c:	00820074 	movhi	r2,2049
 8003690:	10a29104 	addi	r2,r2,-30140
 8003694:	e0bfff15 	stw	r2,-4(fp)
 8003698:	e0bfff17 	ldw	r2,-4(fp)
}
 800369c:	e037883a 	mov	sp,fp
 80036a0:	dfc00117 	ldw	ra,4(sp)
 80036a4:	df000017 	ldw	fp,0(sp)
 80036a8:	dec00204 	addi	sp,sp,8
 80036ac:	f800283a 	ret

080036b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80036b0:	defffd04 	addi	sp,sp,-12
 80036b4:	dfc00215 	stw	ra,8(sp)
 80036b8:	df000115 	stw	fp,4(sp)
 80036bc:	df000104 	addi	fp,sp,4
 80036c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 80036c4:	8004e240 	call	8004e24 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80036c8:	00800044 	movi	r2,1
 80036cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80036d0:	e037883a 	mov	sp,fp
 80036d4:	dfc00117 	ldw	ra,4(sp)
 80036d8:	df000017 	ldw	fp,0(sp)
 80036dc:	dec00204 	addi	sp,sp,8
 80036e0:	f800283a 	ret

080036e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80036e4:	defffe04 	addi	sp,sp,-8
 80036e8:	dfc00115 	stw	ra,4(sp)
 80036ec:	df000015 	stw	fp,0(sp)
 80036f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80036f4:	01020034 	movhi	r4,2048
 80036f8:	2117ca04 	addi	r4,r4,24360
 80036fc:	000b883a 	mov	r5,zero
 8003700:	000d883a 	mov	r6,zero
 8003704:	80038b40 	call	80038b4 <altera_avalon_jtag_uart_init>
 8003708:	01020034 	movhi	r4,2048
 800370c:	2117c004 	addi	r4,r4,24320
 8003710:	80037340 	call	8003734 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 8003714:	01020034 	movhi	r4,2048
 8003718:	211bd804 	addi	r4,r4,28512
 800371c:	80037340 	call	8003734 <alt_dev_reg>
}
 8003720:	e037883a 	mov	sp,fp
 8003724:	dfc00117 	ldw	ra,4(sp)
 8003728:	df000017 	ldw	fp,0(sp)
 800372c:	dec00204 	addi	sp,sp,8
 8003730:	f800283a 	ret

08003734 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8003734:	defffd04 	addi	sp,sp,-12
 8003738:	dfc00215 	stw	ra,8(sp)
 800373c:	df000115 	stw	fp,4(sp)
 8003740:	df000104 	addi	fp,sp,4
 8003744:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8003748:	e13fff17 	ldw	r4,-4(fp)
 800374c:	01420034 	movhi	r5,2048
 8003750:	295be904 	addi	r5,r5,28580
 8003754:	80043880 	call	8004388 <alt_dev_llist_insert>
}
 8003758:	e037883a 	mov	sp,fp
 800375c:	dfc00117 	ldw	ra,4(sp)
 8003760:	df000017 	ldw	fp,0(sp)
 8003764:	dec00204 	addi	sp,sp,8
 8003768:	f800283a 	ret

0800376c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800376c:	defffa04 	addi	sp,sp,-24
 8003770:	dfc00515 	stw	ra,20(sp)
 8003774:	df000415 	stw	fp,16(sp)
 8003778:	df000404 	addi	fp,sp,16
 800377c:	e13ffd15 	stw	r4,-12(fp)
 8003780:	e17ffe15 	stw	r5,-8(fp)
 8003784:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003788:	e0bffd17 	ldw	r2,-12(fp)
 800378c:	10800017 	ldw	r2,0(r2)
 8003790:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8003794:	e0bffc17 	ldw	r2,-16(fp)
 8003798:	11000a04 	addi	r4,r2,40
 800379c:	e0bffd17 	ldw	r2,-12(fp)
 80037a0:	11c00217 	ldw	r7,8(r2)
 80037a4:	e17ffe17 	ldw	r5,-8(fp)
 80037a8:	e1bfff17 	ldw	r6,-4(fp)
 80037ac:	8003db40 	call	8003db4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80037b0:	e037883a 	mov	sp,fp
 80037b4:	dfc00117 	ldw	ra,4(sp)
 80037b8:	df000017 	ldw	fp,0(sp)
 80037bc:	dec00204 	addi	sp,sp,8
 80037c0:	f800283a 	ret

080037c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80037c4:	defffa04 	addi	sp,sp,-24
 80037c8:	dfc00515 	stw	ra,20(sp)
 80037cc:	df000415 	stw	fp,16(sp)
 80037d0:	df000404 	addi	fp,sp,16
 80037d4:	e13ffd15 	stw	r4,-12(fp)
 80037d8:	e17ffe15 	stw	r5,-8(fp)
 80037dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80037e0:	e0bffd17 	ldw	r2,-12(fp)
 80037e4:	10800017 	ldw	r2,0(r2)
 80037e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80037ec:	e0bffc17 	ldw	r2,-16(fp)
 80037f0:	11000a04 	addi	r4,r2,40
 80037f4:	e0bffd17 	ldw	r2,-12(fp)
 80037f8:	11c00217 	ldw	r7,8(r2)
 80037fc:	e17ffe17 	ldw	r5,-8(fp)
 8003800:	e1bfff17 	ldw	r6,-4(fp)
 8003804:	8003fd80 	call	8003fd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8003808:	e037883a 	mov	sp,fp
 800380c:	dfc00117 	ldw	ra,4(sp)
 8003810:	df000017 	ldw	fp,0(sp)
 8003814:	dec00204 	addi	sp,sp,8
 8003818:	f800283a 	ret

0800381c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800381c:	defffc04 	addi	sp,sp,-16
 8003820:	dfc00315 	stw	ra,12(sp)
 8003824:	df000215 	stw	fp,8(sp)
 8003828:	df000204 	addi	fp,sp,8
 800382c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003830:	e0bfff17 	ldw	r2,-4(fp)
 8003834:	10800017 	ldw	r2,0(r2)
 8003838:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800383c:	e0bffe17 	ldw	r2,-8(fp)
 8003840:	11000a04 	addi	r4,r2,40
 8003844:	e0bfff17 	ldw	r2,-4(fp)
 8003848:	11400217 	ldw	r5,8(r2)
 800384c:	8003c4c0 	call	8003c4c <altera_avalon_jtag_uart_close>
}
 8003850:	e037883a 	mov	sp,fp
 8003854:	dfc00117 	ldw	ra,4(sp)
 8003858:	df000017 	ldw	fp,0(sp)
 800385c:	dec00204 	addi	sp,sp,8
 8003860:	f800283a 	ret

08003864 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8003864:	defffa04 	addi	sp,sp,-24
 8003868:	dfc00515 	stw	ra,20(sp)
 800386c:	df000415 	stw	fp,16(sp)
 8003870:	df000404 	addi	fp,sp,16
 8003874:	e13ffd15 	stw	r4,-12(fp)
 8003878:	e17ffe15 	stw	r5,-8(fp)
 800387c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8003880:	e0bffd17 	ldw	r2,-12(fp)
 8003884:	10800017 	ldw	r2,0(r2)
 8003888:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800388c:	e0bffc17 	ldw	r2,-16(fp)
 8003890:	11000a04 	addi	r4,r2,40
 8003894:	e17ffe17 	ldw	r5,-8(fp)
 8003898:	e1bfff17 	ldw	r6,-4(fp)
 800389c:	8003cc00 	call	8003cc0 <altera_avalon_jtag_uart_ioctl>
}
 80038a0:	e037883a 	mov	sp,fp
 80038a4:	dfc00117 	ldw	ra,4(sp)
 80038a8:	df000017 	ldw	fp,0(sp)
 80038ac:	dec00204 	addi	sp,sp,8
 80038b0:	f800283a 	ret

080038b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80038b4:	defffa04 	addi	sp,sp,-24
 80038b8:	dfc00515 	stw	ra,20(sp)
 80038bc:	df000415 	stw	fp,16(sp)
 80038c0:	df000404 	addi	fp,sp,16
 80038c4:	e13ffd15 	stw	r4,-12(fp)
 80038c8:	e17ffe15 	stw	r5,-8(fp)
 80038cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80038d0:	e0fffd17 	ldw	r3,-12(fp)
 80038d4:	00800044 	movi	r2,1
 80038d8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80038dc:	e0bffd17 	ldw	r2,-12(fp)
 80038e0:	10800017 	ldw	r2,0(r2)
 80038e4:	11000104 	addi	r4,r2,4
 80038e8:	e0bffd17 	ldw	r2,-12(fp)
 80038ec:	10800817 	ldw	r2,32(r2)
 80038f0:	1007883a 	mov	r3,r2
 80038f4:	2005883a 	mov	r2,r4
 80038f8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80038fc:	e13ffe17 	ldw	r4,-8(fp)
 8003900:	e17fff17 	ldw	r5,-4(fp)
 8003904:	d8000015 	stw	zero,0(sp)
 8003908:	01820034 	movhi	r6,2048
 800390c:	318e5d04 	addi	r6,r6,14708
 8003910:	e1fffd17 	ldw	r7,-12(fp)
 8003914:	80045800 	call	8004580 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8003918:	e0bffd17 	ldw	r2,-12(fp)
 800391c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8003920:	e0bffd17 	ldw	r2,-12(fp)
 8003924:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003928:	00820074 	movhi	r2,2049
 800392c:	10a29604 	addi	r2,r2,-30120
 8003930:	10800017 	ldw	r2,0(r2)
 8003934:	100b883a 	mov	r5,r2
 8003938:	01820034 	movhi	r6,2048
 800393c:	318ee704 	addi	r6,r6,15260
 8003940:	e1fffd17 	ldw	r7,-12(fp)
 8003944:	80042180 	call	8004218 <alt_alarm_start>
 8003948:	1004403a 	cmpge	r2,r2,zero
 800394c:	1000041e 	bne	r2,zero,8003960 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8003950:	e0fffd17 	ldw	r3,-12(fp)
 8003954:	00a00034 	movhi	r2,32768
 8003958:	10bfffc4 	addi	r2,r2,-1
 800395c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8003960:	e037883a 	mov	sp,fp
 8003964:	dfc00117 	ldw	ra,4(sp)
 8003968:	df000017 	ldw	fp,0(sp)
 800396c:	dec00204 	addi	sp,sp,8
 8003970:	f800283a 	ret

08003974 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8003974:	defff804 	addi	sp,sp,-32
 8003978:	df000715 	stw	fp,28(sp)
 800397c:	df000704 	addi	fp,sp,28
 8003980:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8003984:	e0bfff17 	ldw	r2,-4(fp)
 8003988:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 800398c:	e0bffe17 	ldw	r2,-8(fp)
 8003990:	10800017 	ldw	r2,0(r2)
 8003994:	e0bffd15 	stw	r2,-12(fp)
 8003998:	00000006 	br	800399c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800399c:	e0bffd17 	ldw	r2,-12(fp)
 80039a0:	10800104 	addi	r2,r2,4
 80039a4:	10800037 	ldwio	r2,0(r2)
 80039a8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80039ac:	e0bffc17 	ldw	r2,-16(fp)
 80039b0:	1080c00c 	andi	r2,r2,768
 80039b4:	1005003a 	cmpeq	r2,r2,zero
 80039b8:	1000741e 	bne	r2,zero,8003b8c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80039bc:	e0bffc17 	ldw	r2,-16(fp)
 80039c0:	1080400c 	andi	r2,r2,256
 80039c4:	1005003a 	cmpeq	r2,r2,zero
 80039c8:	1000351e 	bne	r2,zero,8003aa0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80039cc:	00800074 	movhi	r2,1
 80039d0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80039d4:	e0bffe17 	ldw	r2,-8(fp)
 80039d8:	10800a17 	ldw	r2,40(r2)
 80039dc:	10800044 	addi	r2,r2,1
 80039e0:	1081ffcc 	andi	r2,r2,2047
 80039e4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 80039e8:	e0bffe17 	ldw	r2,-8(fp)
 80039ec:	10c00b17 	ldw	r3,44(r2)
 80039f0:	e0bffa17 	ldw	r2,-24(fp)
 80039f4:	18801626 	beq	r3,r2,8003a50 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80039f8:	e0bffd17 	ldw	r2,-12(fp)
 80039fc:	10800037 	ldwio	r2,0(r2)
 8003a00:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8003a04:	e0bffb17 	ldw	r2,-20(fp)
 8003a08:	10a0000c 	andi	r2,r2,32768
 8003a0c:	1005003a 	cmpeq	r2,r2,zero
 8003a10:	10000f1e 	bne	r2,zero,8003a50 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8003a14:	e0bffe17 	ldw	r2,-8(fp)
 8003a18:	10c00a17 	ldw	r3,40(r2)
 8003a1c:	e0bffb17 	ldw	r2,-20(fp)
 8003a20:	1009883a 	mov	r4,r2
 8003a24:	e0bffe17 	ldw	r2,-8(fp)
 8003a28:	1885883a 	add	r2,r3,r2
 8003a2c:	10800e04 	addi	r2,r2,56
 8003a30:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003a34:	e0bffe17 	ldw	r2,-8(fp)
 8003a38:	10800a17 	ldw	r2,40(r2)
 8003a3c:	10800044 	addi	r2,r2,1
 8003a40:	10c1ffcc 	andi	r3,r2,2047
 8003a44:	e0bffe17 	ldw	r2,-8(fp)
 8003a48:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8003a4c:	003fe106 	br	80039d4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8003a50:	e0bffb17 	ldw	r2,-20(fp)
 8003a54:	10bfffec 	andhi	r2,r2,65535
 8003a58:	1005003a 	cmpeq	r2,r2,zero
 8003a5c:	1000101e 	bne	r2,zero,8003aa0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003a60:	e0bffe17 	ldw	r2,-8(fp)
 8003a64:	10c00817 	ldw	r3,32(r2)
 8003a68:	00bfff84 	movi	r2,-2
 8003a6c:	1886703a 	and	r3,r3,r2
 8003a70:	e0bffe17 	ldw	r2,-8(fp)
 8003a74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8003a78:	e0bffd17 	ldw	r2,-12(fp)
 8003a7c:	11000104 	addi	r4,r2,4
 8003a80:	e0bffe17 	ldw	r2,-8(fp)
 8003a84:	10800817 	ldw	r2,32(r2)
 8003a88:	1007883a 	mov	r3,r2
 8003a8c:	2005883a 	mov	r2,r4
 8003a90:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003a94:	e0bffd17 	ldw	r2,-12(fp)
 8003a98:	10800104 	addi	r2,r2,4
 8003a9c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8003aa0:	e0bffc17 	ldw	r2,-16(fp)
 8003aa4:	1080800c 	andi	r2,r2,512
 8003aa8:	1005003a 	cmpeq	r2,r2,zero
 8003aac:	103fbb1e 	bne	r2,zero,800399c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8003ab0:	e0bffc17 	ldw	r2,-16(fp)
 8003ab4:	10bfffec 	andhi	r2,r2,65535
 8003ab8:	1004d43a 	srli	r2,r2,16
 8003abc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003ac0:	00001506 	br	8003b18 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8003ac4:	e13ffd17 	ldw	r4,-12(fp)
 8003ac8:	e0bffe17 	ldw	r2,-8(fp)
 8003acc:	10c00d17 	ldw	r3,52(r2)
 8003ad0:	e0bffe17 	ldw	r2,-8(fp)
 8003ad4:	1885883a 	add	r2,r3,r2
 8003ad8:	10820e04 	addi	r2,r2,2104
 8003adc:	10800003 	ldbu	r2,0(r2)
 8003ae0:	10c03fcc 	andi	r3,r2,255
 8003ae4:	18c0201c 	xori	r3,r3,128
 8003ae8:	18ffe004 	addi	r3,r3,-128
 8003aec:	2005883a 	mov	r2,r4
 8003af0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003af4:	e0bffe17 	ldw	r2,-8(fp)
 8003af8:	10800d17 	ldw	r2,52(r2)
 8003afc:	10800044 	addi	r2,r2,1
 8003b00:	10c1ffcc 	andi	r3,r2,2047
 8003b04:	e0bffe17 	ldw	r2,-8(fp)
 8003b08:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8003b0c:	e0bff917 	ldw	r2,-28(fp)
 8003b10:	10bfffc4 	addi	r2,r2,-1
 8003b14:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003b18:	e0bff917 	ldw	r2,-28(fp)
 8003b1c:	1005003a 	cmpeq	r2,r2,zero
 8003b20:	1000051e 	bne	r2,zero,8003b38 <altera_avalon_jtag_uart_irq+0x1c4>
 8003b24:	e0bffe17 	ldw	r2,-8(fp)
 8003b28:	10c00d17 	ldw	r3,52(r2)
 8003b2c:	e0bffe17 	ldw	r2,-8(fp)
 8003b30:	10800c17 	ldw	r2,48(r2)
 8003b34:	18bfe31e 	bne	r3,r2,8003ac4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8003b38:	e0bff917 	ldw	r2,-28(fp)
 8003b3c:	1005003a 	cmpeq	r2,r2,zero
 8003b40:	103f961e 	bne	r2,zero,800399c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8003b44:	e0bffe17 	ldw	r2,-8(fp)
 8003b48:	10c00817 	ldw	r3,32(r2)
 8003b4c:	00bfff44 	movi	r2,-3
 8003b50:	1886703a 	and	r3,r3,r2
 8003b54:	e0bffe17 	ldw	r2,-8(fp)
 8003b58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003b5c:	e0bffe17 	ldw	r2,-8(fp)
 8003b60:	10800017 	ldw	r2,0(r2)
 8003b64:	11000104 	addi	r4,r2,4
 8003b68:	e0bffe17 	ldw	r2,-8(fp)
 8003b6c:	10800817 	ldw	r2,32(r2)
 8003b70:	1007883a 	mov	r3,r2
 8003b74:	2005883a 	mov	r2,r4
 8003b78:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003b7c:	e0bffd17 	ldw	r2,-12(fp)
 8003b80:	10800104 	addi	r2,r2,4
 8003b84:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8003b88:	003f8406 	br	800399c <altera_avalon_jtag_uart_irq+0x28>
}
 8003b8c:	e037883a 	mov	sp,fp
 8003b90:	df000017 	ldw	fp,0(sp)
 8003b94:	dec00104 	addi	sp,sp,4
 8003b98:	f800283a 	ret

08003b9c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8003b9c:	defffc04 	addi	sp,sp,-16
 8003ba0:	df000315 	stw	fp,12(sp)
 8003ba4:	df000304 	addi	fp,sp,12
 8003ba8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8003bac:	e0bfff17 	ldw	r2,-4(fp)
 8003bb0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8003bb4:	e0bffe17 	ldw	r2,-8(fp)
 8003bb8:	10800017 	ldw	r2,0(r2)
 8003bbc:	10800104 	addi	r2,r2,4
 8003bc0:	10800037 	ldwio	r2,0(r2)
 8003bc4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8003bc8:	e0bffd17 	ldw	r2,-12(fp)
 8003bcc:	1081000c 	andi	r2,r2,1024
 8003bd0:	1005003a 	cmpeq	r2,r2,zero
 8003bd4:	10000c1e 	bne	r2,zero,8003c08 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8003bd8:	e0bffe17 	ldw	r2,-8(fp)
 8003bdc:	10800017 	ldw	r2,0(r2)
 8003be0:	11000104 	addi	r4,r2,4
 8003be4:	e0bffe17 	ldw	r2,-8(fp)
 8003be8:	10800817 	ldw	r2,32(r2)
 8003bec:	10810014 	ori	r2,r2,1024
 8003bf0:	1007883a 	mov	r3,r2
 8003bf4:	2005883a 	mov	r2,r4
 8003bf8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 8003bfc:	e0bffe17 	ldw	r2,-8(fp)
 8003c00:	10000915 	stw	zero,36(r2)
 8003c04:	00000a06 	br	8003c30 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8003c08:	e0bffe17 	ldw	r2,-8(fp)
 8003c0c:	10c00917 	ldw	r3,36(r2)
 8003c10:	00a00034 	movhi	r2,32768
 8003c14:	10bfff04 	addi	r2,r2,-4
 8003c18:	10c00536 	bltu	r2,r3,8003c30 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 8003c1c:	e0bffe17 	ldw	r2,-8(fp)
 8003c20:	10800917 	ldw	r2,36(r2)
 8003c24:	10c00044 	addi	r3,r2,1
 8003c28:	e0bffe17 	ldw	r2,-8(fp)
 8003c2c:	10c00915 	stw	r3,36(r2)
 8003c30:	00820074 	movhi	r2,2049
 8003c34:	10a29604 	addi	r2,r2,-30120
 8003c38:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8003c3c:	e037883a 	mov	sp,fp
 8003c40:	df000017 	ldw	fp,0(sp)
 8003c44:	dec00104 	addi	sp,sp,4
 8003c48:	f800283a 	ret

08003c4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8003c4c:	defffc04 	addi	sp,sp,-16
 8003c50:	df000315 	stw	fp,12(sp)
 8003c54:	df000304 	addi	fp,sp,12
 8003c58:	e13ffd15 	stw	r4,-12(fp)
 8003c5c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003c60:	00000706 	br	8003c80 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 8003c64:	e0bffe17 	ldw	r2,-8(fp)
 8003c68:	1090000c 	andi	r2,r2,16384
 8003c6c:	1005003a 	cmpeq	r2,r2,zero
 8003c70:	1000031e 	bne	r2,zero,8003c80 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 8003c74:	00bffd44 	movi	r2,-11
 8003c78:	e0bfff15 	stw	r2,-4(fp)
 8003c7c:	00000b06 	br	8003cac <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003c80:	e0bffd17 	ldw	r2,-12(fp)
 8003c84:	10c00d17 	ldw	r3,52(r2)
 8003c88:	e0bffd17 	ldw	r2,-12(fp)
 8003c8c:	10800c17 	ldw	r2,48(r2)
 8003c90:	18800526 	beq	r3,r2,8003ca8 <altera_avalon_jtag_uart_close+0x5c>
 8003c94:	e0bffd17 	ldw	r2,-12(fp)
 8003c98:	10c00917 	ldw	r3,36(r2)
 8003c9c:	e0bffd17 	ldw	r2,-12(fp)
 8003ca0:	10800117 	ldw	r2,4(r2)
 8003ca4:	18bfef36 	bltu	r3,r2,8003c64 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8003ca8:	e03fff15 	stw	zero,-4(fp)
 8003cac:	e0bfff17 	ldw	r2,-4(fp)
}
 8003cb0:	e037883a 	mov	sp,fp
 8003cb4:	df000017 	ldw	fp,0(sp)
 8003cb8:	dec00104 	addi	sp,sp,4
 8003cbc:	f800283a 	ret

08003cc0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8003cc0:	defff804 	addi	sp,sp,-32
 8003cc4:	df000715 	stw	fp,28(sp)
 8003cc8:	df000704 	addi	fp,sp,28
 8003ccc:	e13ffb15 	stw	r4,-20(fp)
 8003cd0:	e17ffc15 	stw	r5,-16(fp)
 8003cd4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 8003cd8:	00bff9c4 	movi	r2,-25
 8003cdc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 8003ce0:	e0bffc17 	ldw	r2,-16(fp)
 8003ce4:	e0bfff15 	stw	r2,-4(fp)
 8003ce8:	e0ffff17 	ldw	r3,-4(fp)
 8003cec:	189a8060 	cmpeqi	r2,r3,27137
 8003cf0:	1000041e 	bne	r2,zero,8003d04 <altera_avalon_jtag_uart_ioctl+0x44>
 8003cf4:	e0ffff17 	ldw	r3,-4(fp)
 8003cf8:	189a80a0 	cmpeqi	r2,r3,27138
 8003cfc:	10001b1e 	bne	r2,zero,8003d6c <altera_avalon_jtag_uart_ioctl+0xac>
 8003d00:	00002706 	br	8003da0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8003d04:	e0bffb17 	ldw	r2,-20(fp)
 8003d08:	10c00117 	ldw	r3,4(r2)
 8003d0c:	00a00034 	movhi	r2,32768
 8003d10:	10bfffc4 	addi	r2,r2,-1
 8003d14:	18802226 	beq	r3,r2,8003da0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 8003d18:	e0bffd17 	ldw	r2,-12(fp)
 8003d1c:	10800017 	ldw	r2,0(r2)
 8003d20:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8003d24:	e0bff917 	ldw	r2,-28(fp)
 8003d28:	10800090 	cmplti	r2,r2,2
 8003d2c:	1000071e 	bne	r2,zero,8003d4c <altera_avalon_jtag_uart_ioctl+0x8c>
 8003d30:	e0fff917 	ldw	r3,-28(fp)
 8003d34:	00a00034 	movhi	r2,32768
 8003d38:	10bfffc4 	addi	r2,r2,-1
 8003d3c:	18800326 	beq	r3,r2,8003d4c <altera_avalon_jtag_uart_ioctl+0x8c>
 8003d40:	e0bff917 	ldw	r2,-28(fp)
 8003d44:	e0bffe15 	stw	r2,-8(fp)
 8003d48:	00000306 	br	8003d58 <altera_avalon_jtag_uart_ioctl+0x98>
 8003d4c:	00e00034 	movhi	r3,32768
 8003d50:	18ffff84 	addi	r3,r3,-2
 8003d54:	e0fffe15 	stw	r3,-8(fp)
 8003d58:	e0bffb17 	ldw	r2,-20(fp)
 8003d5c:	e0fffe17 	ldw	r3,-8(fp)
 8003d60:	10c00115 	stw	r3,4(r2)
      rc = 0;
 8003d64:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 8003d68:	00000d06 	br	8003da0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8003d6c:	e0bffb17 	ldw	r2,-20(fp)
 8003d70:	10c00117 	ldw	r3,4(r2)
 8003d74:	00a00034 	movhi	r2,32768
 8003d78:	10bfffc4 	addi	r2,r2,-1
 8003d7c:	18800826 	beq	r3,r2,8003da0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8003d80:	e13ffd17 	ldw	r4,-12(fp)
 8003d84:	e0bffb17 	ldw	r2,-20(fp)
 8003d88:	10c00917 	ldw	r3,36(r2)
 8003d8c:	e0bffb17 	ldw	r2,-20(fp)
 8003d90:	10800117 	ldw	r2,4(r2)
 8003d94:	1885803a 	cmpltu	r2,r3,r2
 8003d98:	20800015 	stw	r2,0(r4)
      rc = 0;
 8003d9c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 8003da0:	e0bffa17 	ldw	r2,-24(fp)
}
 8003da4:	e037883a 	mov	sp,fp
 8003da8:	df000017 	ldw	fp,0(sp)
 8003dac:	dec00104 	addi	sp,sp,4
 8003db0:	f800283a 	ret

08003db4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8003db4:	defff204 	addi	sp,sp,-56
 8003db8:	dfc00d15 	stw	ra,52(sp)
 8003dbc:	df000c15 	stw	fp,48(sp)
 8003dc0:	df000c04 	addi	fp,sp,48
 8003dc4:	e13ffb15 	stw	r4,-20(fp)
 8003dc8:	e17ffc15 	stw	r5,-16(fp)
 8003dcc:	e1bffd15 	stw	r6,-12(fp)
 8003dd0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 8003dd4:	e0bffc17 	ldw	r2,-16(fp)
 8003dd8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8003ddc:	00004806 	br	8003f00 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8003de0:	e0bffb17 	ldw	r2,-20(fp)
 8003de4:	10800a17 	ldw	r2,40(r2)
 8003de8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8003dec:	e0bffb17 	ldw	r2,-20(fp)
 8003df0:	10800b17 	ldw	r2,44(r2)
 8003df4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 8003df8:	e0fff717 	ldw	r3,-36(fp)
 8003dfc:	e0bff617 	ldw	r2,-40(fp)
 8003e00:	18800536 	bltu	r3,r2,8003e18 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8003e04:	e0bff717 	ldw	r2,-36(fp)
 8003e08:	e0fff617 	ldw	r3,-40(fp)
 8003e0c:	10c5c83a 	sub	r2,r2,r3
 8003e10:	e0bff815 	stw	r2,-32(fp)
 8003e14:	00000406 	br	8003e28 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8003e18:	00820004 	movi	r2,2048
 8003e1c:	e0fff617 	ldw	r3,-40(fp)
 8003e20:	10c5c83a 	sub	r2,r2,r3
 8003e24:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8003e28:	e0bff817 	ldw	r2,-32(fp)
 8003e2c:	1005003a 	cmpeq	r2,r2,zero
 8003e30:	10001f1e 	bne	r2,zero,8003eb0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 8003e34:	e0fffd17 	ldw	r3,-12(fp)
 8003e38:	e0bff817 	ldw	r2,-32(fp)
 8003e3c:	1880022e 	bgeu	r3,r2,8003e48 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8003e40:	e0bffd17 	ldw	r2,-12(fp)
 8003e44:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8003e48:	e0bffb17 	ldw	r2,-20(fp)
 8003e4c:	10c00e04 	addi	r3,r2,56
 8003e50:	e0bff617 	ldw	r2,-40(fp)
 8003e54:	1887883a 	add	r3,r3,r2
 8003e58:	e0bffa17 	ldw	r2,-24(fp)
 8003e5c:	1009883a 	mov	r4,r2
 8003e60:	180b883a 	mov	r5,r3
 8003e64:	e1bff817 	ldw	r6,-32(fp)
 8003e68:	800100c0 	call	800100c <memcpy>
      ptr   += n;
 8003e6c:	e0fff817 	ldw	r3,-32(fp)
 8003e70:	e0bffa17 	ldw	r2,-24(fp)
 8003e74:	10c5883a 	add	r2,r2,r3
 8003e78:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 8003e7c:	e0fffd17 	ldw	r3,-12(fp)
 8003e80:	e0bff817 	ldw	r2,-32(fp)
 8003e84:	1885c83a 	sub	r2,r3,r2
 8003e88:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003e8c:	e0fff617 	ldw	r3,-40(fp)
 8003e90:	e0bff817 	ldw	r2,-32(fp)
 8003e94:	1885883a 	add	r2,r3,r2
 8003e98:	10c1ffcc 	andi	r3,r2,2047
 8003e9c:	e0bffb17 	ldw	r2,-20(fp)
 8003ea0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8003ea4:	e0bffd17 	ldw	r2,-12(fp)
 8003ea8:	10800048 	cmpgei	r2,r2,1
 8003eac:	103fcc1e 	bne	r2,zero,8003de0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 8003eb0:	e0fffa17 	ldw	r3,-24(fp)
 8003eb4:	e0bffc17 	ldw	r2,-16(fp)
 8003eb8:	1880141e 	bne	r3,r2,8003f0c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8003ebc:	e0bffe17 	ldw	r2,-8(fp)
 8003ec0:	1090000c 	andi	r2,r2,16384
 8003ec4:	1004c03a 	cmpne	r2,r2,zero
 8003ec8:	1000101e 	bne	r2,zero,8003f0c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8003ecc:	e0bffb17 	ldw	r2,-20(fp)
 8003ed0:	10c00a17 	ldw	r3,40(r2)
 8003ed4:	e0bff717 	ldw	r2,-36(fp)
 8003ed8:	1880051e 	bne	r3,r2,8003ef0 <altera_avalon_jtag_uart_read+0x13c>
 8003edc:	e0bffb17 	ldw	r2,-20(fp)
 8003ee0:	10c00917 	ldw	r3,36(r2)
 8003ee4:	e0bffb17 	ldw	r2,-20(fp)
 8003ee8:	10800117 	ldw	r2,4(r2)
 8003eec:	18bff736 	bltu	r3,r2,8003ecc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8003ef0:	e0bffb17 	ldw	r2,-20(fp)
 8003ef4:	10c00a17 	ldw	r3,40(r2)
 8003ef8:	e0bff717 	ldw	r2,-36(fp)
 8003efc:	18800326 	beq	r3,r2,8003f0c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8003f00:	e0bffd17 	ldw	r2,-12(fp)
 8003f04:	10800048 	cmpgei	r2,r2,1
 8003f08:	103fb51e 	bne	r2,zero,8003de0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8003f0c:	e0fffa17 	ldw	r3,-24(fp)
 8003f10:	e0bffc17 	ldw	r2,-16(fp)
 8003f14:	18801926 	beq	r3,r2,8003f7c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003f18:	0005303a 	rdctl	r2,status
 8003f1c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003f20:	e0fff517 	ldw	r3,-44(fp)
 8003f24:	00bfff84 	movi	r2,-2
 8003f28:	1884703a 	and	r2,r3,r2
 8003f2c:	1001703a 	wrctl	status,r2
  
  return context;
 8003f30:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8003f34:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003f38:	e0bffb17 	ldw	r2,-20(fp)
 8003f3c:	10800817 	ldw	r2,32(r2)
 8003f40:	10c00054 	ori	r3,r2,1
 8003f44:	e0bffb17 	ldw	r2,-20(fp)
 8003f48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003f4c:	e0bffb17 	ldw	r2,-20(fp)
 8003f50:	10800017 	ldw	r2,0(r2)
 8003f54:	11000104 	addi	r4,r2,4
 8003f58:	e0bffb17 	ldw	r2,-20(fp)
 8003f5c:	10800817 	ldw	r2,32(r2)
 8003f60:	1007883a 	mov	r3,r2
 8003f64:	2005883a 	mov	r2,r4
 8003f68:	10c00035 	stwio	r3,0(r2)
 8003f6c:	e0bff917 	ldw	r2,-28(fp)
 8003f70:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003f74:	e0bff417 	ldw	r2,-48(fp)
 8003f78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8003f7c:	e0fffa17 	ldw	r3,-24(fp)
 8003f80:	e0bffc17 	ldw	r2,-16(fp)
 8003f84:	18800526 	beq	r3,r2,8003f9c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 8003f88:	e0fffa17 	ldw	r3,-24(fp)
 8003f8c:	e0bffc17 	ldw	r2,-16(fp)
 8003f90:	1887c83a 	sub	r3,r3,r2
 8003f94:	e0ffff15 	stw	r3,-4(fp)
 8003f98:	00000906 	br	8003fc0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 8003f9c:	e0bffe17 	ldw	r2,-8(fp)
 8003fa0:	1090000c 	andi	r2,r2,16384
 8003fa4:	1005003a 	cmpeq	r2,r2,zero
 8003fa8:	1000031e 	bne	r2,zero,8003fb8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8003fac:	00bffd44 	movi	r2,-11
 8003fb0:	e0bfff15 	stw	r2,-4(fp)
 8003fb4:	00000206 	br	8003fc0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8003fb8:	00bffec4 	movi	r2,-5
 8003fbc:	e0bfff15 	stw	r2,-4(fp)
 8003fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 8003fc4:	e037883a 	mov	sp,fp
 8003fc8:	dfc00117 	ldw	ra,4(sp)
 8003fcc:	df000017 	ldw	fp,0(sp)
 8003fd0:	dec00204 	addi	sp,sp,8
 8003fd4:	f800283a 	ret

08003fd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8003fd8:	defff204 	addi	sp,sp,-56
 8003fdc:	dfc00d15 	stw	ra,52(sp)
 8003fe0:	df000c15 	stw	fp,48(sp)
 8003fe4:	df000c04 	addi	fp,sp,48
 8003fe8:	e13ffb15 	stw	r4,-20(fp)
 8003fec:	e17ffc15 	stw	r5,-16(fp)
 8003ff0:	e1bffd15 	stw	r6,-12(fp)
 8003ff4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8003ff8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8003ffc:	e0bffc17 	ldw	r2,-16(fp)
 8004000:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004004:	00003a06 	br	80040f0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8004008:	e0bffb17 	ldw	r2,-20(fp)
 800400c:	10800c17 	ldw	r2,48(r2)
 8004010:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 8004014:	e0bffb17 	ldw	r2,-20(fp)
 8004018:	10800d17 	ldw	r2,52(r2)
 800401c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 8004020:	e0fffa17 	ldw	r3,-24(fp)
 8004024:	e0bff917 	ldw	r2,-28(fp)
 8004028:	1880062e 	bgeu	r3,r2,8004044 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800402c:	e0fff917 	ldw	r3,-28(fp)
 8004030:	e0bffa17 	ldw	r2,-24(fp)
 8004034:	1885c83a 	sub	r2,r3,r2
 8004038:	10bfffc4 	addi	r2,r2,-1
 800403c:	e0bff815 	stw	r2,-32(fp)
 8004040:	00000c06 	br	8004074 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 8004044:	e0bff917 	ldw	r2,-28(fp)
 8004048:	1005003a 	cmpeq	r2,r2,zero
 800404c:	1000051e 	bne	r2,zero,8004064 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8004050:	00820004 	movi	r2,2048
 8004054:	e0fffa17 	ldw	r3,-24(fp)
 8004058:	10c5c83a 	sub	r2,r2,r3
 800405c:	e0bff815 	stw	r2,-32(fp)
 8004060:	00000406 	br	8004074 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004064:	0081ffc4 	movi	r2,2047
 8004068:	e0fffa17 	ldw	r3,-24(fp)
 800406c:	10c5c83a 	sub	r2,r2,r3
 8004070:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 8004074:	e0bff817 	ldw	r2,-32(fp)
 8004078:	1005003a 	cmpeq	r2,r2,zero
 800407c:	10001f1e 	bne	r2,zero,80040fc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 8004080:	e0fffd17 	ldw	r3,-12(fp)
 8004084:	e0bff817 	ldw	r2,-32(fp)
 8004088:	1880022e 	bgeu	r3,r2,8004094 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 800408c:	e0bffd17 	ldw	r2,-12(fp)
 8004090:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8004094:	e0bffb17 	ldw	r2,-20(fp)
 8004098:	10c20e04 	addi	r3,r2,2104
 800409c:	e0bffa17 	ldw	r2,-24(fp)
 80040a0:	1885883a 	add	r2,r3,r2
 80040a4:	e0fffc17 	ldw	r3,-16(fp)
 80040a8:	1009883a 	mov	r4,r2
 80040ac:	180b883a 	mov	r5,r3
 80040b0:	e1bff817 	ldw	r6,-32(fp)
 80040b4:	800100c0 	call	800100c <memcpy>
      ptr   += n;
 80040b8:	e0fff817 	ldw	r3,-32(fp)
 80040bc:	e0bffc17 	ldw	r2,-16(fp)
 80040c0:	10c5883a 	add	r2,r2,r3
 80040c4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 80040c8:	e0fffd17 	ldw	r3,-12(fp)
 80040cc:	e0bff817 	ldw	r2,-32(fp)
 80040d0:	1885c83a 	sub	r2,r3,r2
 80040d4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80040d8:	e0fffa17 	ldw	r3,-24(fp)
 80040dc:	e0bff817 	ldw	r2,-32(fp)
 80040e0:	1885883a 	add	r2,r3,r2
 80040e4:	10c1ffcc 	andi	r3,r2,2047
 80040e8:	e0bffb17 	ldw	r2,-20(fp)
 80040ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80040f0:	e0bffd17 	ldw	r2,-12(fp)
 80040f4:	10800048 	cmpgei	r2,r2,1
 80040f8:	103fc31e 	bne	r2,zero,8004008 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80040fc:	0005303a 	rdctl	r2,status
 8004100:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004104:	e0fff517 	ldw	r3,-44(fp)
 8004108:	00bfff84 	movi	r2,-2
 800410c:	1884703a 	and	r2,r3,r2
 8004110:	1001703a 	wrctl	status,r2
  
  return context;
 8004114:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8004118:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800411c:	e0bffb17 	ldw	r2,-20(fp)
 8004120:	10800817 	ldw	r2,32(r2)
 8004124:	10c00094 	ori	r3,r2,2
 8004128:	e0bffb17 	ldw	r2,-20(fp)
 800412c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004130:	e0bffb17 	ldw	r2,-20(fp)
 8004134:	10800017 	ldw	r2,0(r2)
 8004138:	11000104 	addi	r4,r2,4
 800413c:	e0bffb17 	ldw	r2,-20(fp)
 8004140:	10800817 	ldw	r2,32(r2)
 8004144:	1007883a 	mov	r3,r2
 8004148:	2005883a 	mov	r2,r4
 800414c:	10c00035 	stwio	r3,0(r2)
 8004150:	e0bff717 	ldw	r2,-36(fp)
 8004154:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004158:	e0bff417 	ldw	r2,-48(fp)
 800415c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8004160:	e0bffd17 	ldw	r2,-12(fp)
 8004164:	10800050 	cmplti	r2,r2,1
 8004168:	1000111e 	bne	r2,zero,80041b0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 800416c:	e0bffe17 	ldw	r2,-8(fp)
 8004170:	1090000c 	andi	r2,r2,16384
 8004174:	1004c03a 	cmpne	r2,r2,zero
 8004178:	1000101e 	bne	r2,zero,80041bc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800417c:	e0bffb17 	ldw	r2,-20(fp)
 8004180:	10c00d17 	ldw	r3,52(r2)
 8004184:	e0bff917 	ldw	r2,-28(fp)
 8004188:	1880051e 	bne	r3,r2,80041a0 <altera_avalon_jtag_uart_write+0x1c8>
 800418c:	e0bffb17 	ldw	r2,-20(fp)
 8004190:	10c00917 	ldw	r3,36(r2)
 8004194:	e0bffb17 	ldw	r2,-20(fp)
 8004198:	10800117 	ldw	r2,4(r2)
 800419c:	18bff736 	bltu	r3,r2,800417c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 80041a0:	e0bffb17 	ldw	r2,-20(fp)
 80041a4:	10c00d17 	ldw	r3,52(r2)
 80041a8:	e0bff917 	ldw	r2,-28(fp)
 80041ac:	18800326 	beq	r3,r2,80041bc <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 80041b0:	e0bffd17 	ldw	r2,-12(fp)
 80041b4:	10800048 	cmpgei	r2,r2,1
 80041b8:	103fcd1e 	bne	r2,zero,80040f0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80041bc:	e0fffc17 	ldw	r3,-16(fp)
 80041c0:	e0bff617 	ldw	r2,-40(fp)
 80041c4:	18800526 	beq	r3,r2,80041dc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 80041c8:	e0fffc17 	ldw	r3,-16(fp)
 80041cc:	e0bff617 	ldw	r2,-40(fp)
 80041d0:	1887c83a 	sub	r3,r3,r2
 80041d4:	e0ffff15 	stw	r3,-4(fp)
 80041d8:	00000906 	br	8004200 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 80041dc:	e0bffe17 	ldw	r2,-8(fp)
 80041e0:	1090000c 	andi	r2,r2,16384
 80041e4:	1005003a 	cmpeq	r2,r2,zero
 80041e8:	1000031e 	bne	r2,zero,80041f8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 80041ec:	00bffd44 	movi	r2,-11
 80041f0:	e0bfff15 	stw	r2,-4(fp)
 80041f4:	00000206 	br	8004200 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 80041f8:	00bffec4 	movi	r2,-5
 80041fc:	e0bfff15 	stw	r2,-4(fp)
 8004200:	e0bfff17 	ldw	r2,-4(fp)
}
 8004204:	e037883a 	mov	sp,fp
 8004208:	dfc00117 	ldw	ra,4(sp)
 800420c:	df000017 	ldw	fp,0(sp)
 8004210:	dec00204 	addi	sp,sp,8
 8004214:	f800283a 	ret

08004218 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8004218:	defff404 	addi	sp,sp,-48
 800421c:	df000b15 	stw	fp,44(sp)
 8004220:	df000b04 	addi	fp,sp,44
 8004224:	e13ffb15 	stw	r4,-20(fp)
 8004228:	e17ffc15 	stw	r5,-16(fp)
 800422c:	e1bffd15 	stw	r6,-12(fp)
 8004230:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8004234:	e03ff915 	stw	zero,-28(fp)
 8004238:	00820074 	movhi	r2,2049
 800423c:	10a29604 	addi	r2,r2,-30120
 8004240:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8004244:	1005003a 	cmpeq	r2,r2,zero
 8004248:	1000411e 	bne	r2,zero,8004350 <alt_alarm_start+0x138>
  {
    if (alarm)
 800424c:	e0bffb17 	ldw	r2,-20(fp)
 8004250:	1005003a 	cmpeq	r2,r2,zero
 8004254:	10003b1e 	bne	r2,zero,8004344 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 8004258:	e0fffb17 	ldw	r3,-20(fp)
 800425c:	e0bffd17 	ldw	r2,-12(fp)
 8004260:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 8004264:	e0fffb17 	ldw	r3,-20(fp)
 8004268:	e0bffe17 	ldw	r2,-8(fp)
 800426c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004270:	0005303a 	rdctl	r2,status
 8004274:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004278:	e0fff817 	ldw	r3,-32(fp)
 800427c:	00bfff84 	movi	r2,-2
 8004280:	1884703a 	and	r2,r3,r2
 8004284:	1001703a 	wrctl	status,r2
  
  return context;
 8004288:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800428c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004290:	00820074 	movhi	r2,2049
 8004294:	10a29704 	addi	r2,r2,-30116
 8004298:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800429c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80042a0:	e0fffc17 	ldw	r3,-16(fp)
 80042a4:	e0bff917 	ldw	r2,-28(fp)
 80042a8:	1885883a 	add	r2,r3,r2
 80042ac:	10c00044 	addi	r3,r2,1
 80042b0:	e0bffb17 	ldw	r2,-20(fp)
 80042b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80042b8:	e0bffb17 	ldw	r2,-20(fp)
 80042bc:	10c00217 	ldw	r3,8(r2)
 80042c0:	e0bff917 	ldw	r2,-28(fp)
 80042c4:	1880042e 	bgeu	r3,r2,80042d8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 80042c8:	e0fffb17 	ldw	r3,-20(fp)
 80042cc:	00800044 	movi	r2,1
 80042d0:	18800405 	stb	r2,16(r3)
 80042d4:	00000206 	br	80042e0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 80042d8:	e0bffb17 	ldw	r2,-20(fp)
 80042dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80042e0:	e0fffb17 	ldw	r3,-20(fp)
 80042e4:	00820034 	movhi	r2,2048
 80042e8:	109bef04 	addi	r2,r2,28604
 80042ec:	e0bff615 	stw	r2,-40(fp)
 80042f0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80042f4:	e0fff717 	ldw	r3,-36(fp)
 80042f8:	e0bff617 	ldw	r2,-40(fp)
 80042fc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 8004300:	e0bff617 	ldw	r2,-40(fp)
 8004304:	10c00017 	ldw	r3,0(r2)
 8004308:	e0bff717 	ldw	r2,-36(fp)
 800430c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8004310:	e0bff617 	ldw	r2,-40(fp)
 8004314:	10c00017 	ldw	r3,0(r2)
 8004318:	e0bff717 	ldw	r2,-36(fp)
 800431c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8004320:	e0fff617 	ldw	r3,-40(fp)
 8004324:	e0bff717 	ldw	r2,-36(fp)
 8004328:	18800015 	stw	r2,0(r3)
 800432c:	e0bffa17 	ldw	r2,-24(fp)
 8004330:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004334:	e0bff517 	ldw	r2,-44(fp)
 8004338:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800433c:	e03fff15 	stw	zero,-4(fp)
 8004340:	00000506 	br	8004358 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 8004344:	00bffa84 	movi	r2,-22
 8004348:	e0bfff15 	stw	r2,-4(fp)
 800434c:	00000206 	br	8004358 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 8004350:	00bfde84 	movi	r2,-134
 8004354:	e0bfff15 	stw	r2,-4(fp)
 8004358:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 800435c:	e037883a 	mov	sp,fp
 8004360:	df000017 	ldw	fp,0(sp)
 8004364:	dec00104 	addi	sp,sp,4
 8004368:	f800283a 	ret

0800436c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800436c:	deffff04 	addi	sp,sp,-4
 8004370:	df000015 	stw	fp,0(sp)
 8004374:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8004378:	e037883a 	mov	sp,fp
 800437c:	df000017 	ldw	fp,0(sp)
 8004380:	dec00104 	addi	sp,sp,4
 8004384:	f800283a 	ret

08004388 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8004388:	defff904 	addi	sp,sp,-28
 800438c:	dfc00615 	stw	ra,24(sp)
 8004390:	df000515 	stw	fp,20(sp)
 8004394:	df000504 	addi	fp,sp,20
 8004398:	e13ffd15 	stw	r4,-12(fp)
 800439c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80043a0:	e0bffd17 	ldw	r2,-12(fp)
 80043a4:	1005003a 	cmpeq	r2,r2,zero
 80043a8:	1000041e 	bne	r2,zero,80043bc <alt_dev_llist_insert+0x34>
 80043ac:	e0bffd17 	ldw	r2,-12(fp)
 80043b0:	10800217 	ldw	r2,8(r2)
 80043b4:	1004c03a 	cmpne	r2,r2,zero
 80043b8:	1000071e 	bne	r2,zero,80043d8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 80043bc:	800443c0 	call	800443c <alt_get_errno>
 80043c0:	1007883a 	mov	r3,r2
 80043c4:	00800584 	movi	r2,22
 80043c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80043cc:	00bffa84 	movi	r2,-22
 80043d0:	e0bfff15 	stw	r2,-4(fp)
 80043d4:	00001306 	br	8004424 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80043d8:	e0fffd17 	ldw	r3,-12(fp)
 80043dc:	e0bffe17 	ldw	r2,-8(fp)
 80043e0:	e0bffb15 	stw	r2,-20(fp)
 80043e4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80043e8:	e0fffc17 	ldw	r3,-16(fp)
 80043ec:	e0bffb17 	ldw	r2,-20(fp)
 80043f0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 80043f4:	e0bffb17 	ldw	r2,-20(fp)
 80043f8:	10c00017 	ldw	r3,0(r2)
 80043fc:	e0bffc17 	ldw	r2,-16(fp)
 8004400:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8004404:	e0bffb17 	ldw	r2,-20(fp)
 8004408:	10c00017 	ldw	r3,0(r2)
 800440c:	e0bffc17 	ldw	r2,-16(fp)
 8004410:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 8004414:	e0fffb17 	ldw	r3,-20(fp)
 8004418:	e0bffc17 	ldw	r2,-16(fp)
 800441c:	18800015 	stw	r2,0(r3)

  return 0;  
 8004420:	e03fff15 	stw	zero,-4(fp)
 8004424:	e0bfff17 	ldw	r2,-4(fp)
}
 8004428:	e037883a 	mov	sp,fp
 800442c:	dfc00117 	ldw	ra,4(sp)
 8004430:	df000017 	ldw	fp,0(sp)
 8004434:	dec00204 	addi	sp,sp,8
 8004438:	f800283a 	ret

0800443c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800443c:	defffd04 	addi	sp,sp,-12
 8004440:	dfc00215 	stw	ra,8(sp)
 8004444:	df000115 	stw	fp,4(sp)
 8004448:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800444c:	00820034 	movhi	r2,2048
 8004450:	109bec04 	addi	r2,r2,28592
 8004454:	10800017 	ldw	r2,0(r2)
 8004458:	1005003a 	cmpeq	r2,r2,zero
 800445c:	1000061e 	bne	r2,zero,8004478 <alt_get_errno+0x3c>
 8004460:	00820034 	movhi	r2,2048
 8004464:	109bec04 	addi	r2,r2,28592
 8004468:	10800017 	ldw	r2,0(r2)
 800446c:	103ee83a 	callr	r2
 8004470:	e0bfff15 	stw	r2,-4(fp)
 8004474:	00000306 	br	8004484 <alt_get_errno+0x48>
 8004478:	00820074 	movhi	r2,2049
 800447c:	10a29104 	addi	r2,r2,-30140
 8004480:	e0bfff15 	stw	r2,-4(fp)
 8004484:	e0bfff17 	ldw	r2,-4(fp)
}
 8004488:	e037883a 	mov	sp,fp
 800448c:	dfc00117 	ldw	ra,4(sp)
 8004490:	df000017 	ldw	fp,0(sp)
 8004494:	dec00204 	addi	sp,sp,8
 8004498:	f800283a 	ret

0800449c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800449c:	defffd04 	addi	sp,sp,-12
 80044a0:	dfc00215 	stw	ra,8(sp)
 80044a4:	df000115 	stw	fp,4(sp)
 80044a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80044ac:	00bfff04 	movi	r2,-4
 80044b0:	00c20034 	movhi	r3,2048
 80044b4:	18d53504 	addi	r3,r3,21716
 80044b8:	1885883a 	add	r2,r3,r2
 80044bc:	e0bfff15 	stw	r2,-4(fp)
 80044c0:	00000606 	br	80044dc <_do_ctors+0x40>
        (*ctor) (); 
 80044c4:	e0bfff17 	ldw	r2,-4(fp)
 80044c8:	10800017 	ldw	r2,0(r2)
 80044cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80044d0:	e0bfff17 	ldw	r2,-4(fp)
 80044d4:	10bfff04 	addi	r2,r2,-4
 80044d8:	e0bfff15 	stw	r2,-4(fp)
 80044dc:	e0ffff17 	ldw	r3,-4(fp)
 80044e0:	00820034 	movhi	r2,2048
 80044e4:	10953404 	addi	r2,r2,21712
 80044e8:	18bff62e 	bgeu	r3,r2,80044c4 <_do_ctors+0x28>
        (*ctor) (); 
}
 80044ec:	e037883a 	mov	sp,fp
 80044f0:	dfc00117 	ldw	ra,4(sp)
 80044f4:	df000017 	ldw	fp,0(sp)
 80044f8:	dec00204 	addi	sp,sp,8
 80044fc:	f800283a 	ret

08004500 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8004500:	defffd04 	addi	sp,sp,-12
 8004504:	dfc00215 	stw	ra,8(sp)
 8004508:	df000115 	stw	fp,4(sp)
 800450c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8004510:	00bfff04 	movi	r2,-4
 8004514:	00c20034 	movhi	r3,2048
 8004518:	18d53504 	addi	r3,r3,21716
 800451c:	1885883a 	add	r2,r3,r2
 8004520:	e0bfff15 	stw	r2,-4(fp)
 8004524:	00000606 	br	8004540 <_do_dtors+0x40>
        (*dtor) (); 
 8004528:	e0bfff17 	ldw	r2,-4(fp)
 800452c:	10800017 	ldw	r2,0(r2)
 8004530:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8004534:	e0bfff17 	ldw	r2,-4(fp)
 8004538:	10bfff04 	addi	r2,r2,-4
 800453c:	e0bfff15 	stw	r2,-4(fp)
 8004540:	e0ffff17 	ldw	r3,-4(fp)
 8004544:	00820034 	movhi	r2,2048
 8004548:	10953504 	addi	r2,r2,21716
 800454c:	18bff62e 	bgeu	r3,r2,8004528 <_do_dtors+0x28>
        (*dtor) (); 
}
 8004550:	e037883a 	mov	sp,fp
 8004554:	dfc00117 	ldw	ra,4(sp)
 8004558:	df000017 	ldw	fp,0(sp)
 800455c:	dec00204 	addi	sp,sp,8
 8004560:	f800283a 	ret

08004564 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8004564:	deffff04 	addi	sp,sp,-4
 8004568:	df000015 	stw	fp,0(sp)
 800456c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8004570:	e037883a 	mov	sp,fp
 8004574:	df000017 	ldw	fp,0(sp)
 8004578:	dec00104 	addi	sp,sp,4
 800457c:	f800283a 	ret

08004580 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8004580:	defff904 	addi	sp,sp,-28
 8004584:	dfc00615 	stw	ra,24(sp)
 8004588:	df000515 	stw	fp,20(sp)
 800458c:	df000504 	addi	fp,sp,20
 8004590:	e13ffc15 	stw	r4,-16(fp)
 8004594:	e17ffd15 	stw	r5,-12(fp)
 8004598:	e1bffe15 	stw	r6,-8(fp)
 800459c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80045a0:	e0800217 	ldw	r2,8(fp)
 80045a4:	d8800015 	stw	r2,0(sp)
 80045a8:	e13ffc17 	ldw	r4,-16(fp)
 80045ac:	e17ffd17 	ldw	r5,-12(fp)
 80045b0:	e1bffe17 	ldw	r6,-8(fp)
 80045b4:	e1ffff17 	ldw	r7,-4(fp)
 80045b8:	80047540 	call	8004754 <alt_iic_isr_register>
}  
 80045bc:	e037883a 	mov	sp,fp
 80045c0:	dfc00117 	ldw	ra,4(sp)
 80045c4:	df000017 	ldw	fp,0(sp)
 80045c8:	dec00204 	addi	sp,sp,8
 80045cc:	f800283a 	ret

080045d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80045d0:	defff904 	addi	sp,sp,-28
 80045d4:	df000615 	stw	fp,24(sp)
 80045d8:	df000604 	addi	fp,sp,24
 80045dc:	e13ffe15 	stw	r4,-8(fp)
 80045e0:	e17fff15 	stw	r5,-4(fp)
 80045e4:	e0bfff17 	ldw	r2,-4(fp)
 80045e8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80045ec:	0005303a 	rdctl	r2,status
 80045f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80045f4:	e0fffb17 	ldw	r3,-20(fp)
 80045f8:	00bfff84 	movi	r2,-2
 80045fc:	1884703a 	and	r2,r3,r2
 8004600:	1001703a 	wrctl	status,r2
  
  return context;
 8004604:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004608:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 800460c:	e0fffc17 	ldw	r3,-16(fp)
 8004610:	00800044 	movi	r2,1
 8004614:	10c4983a 	sll	r2,r2,r3
 8004618:	1007883a 	mov	r3,r2
 800461c:	00820074 	movhi	r2,2049
 8004620:	10a29504 	addi	r2,r2,-30124
 8004624:	10800017 	ldw	r2,0(r2)
 8004628:	1886b03a 	or	r3,r3,r2
 800462c:	00820074 	movhi	r2,2049
 8004630:	10a29504 	addi	r2,r2,-30124
 8004634:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8004638:	00820074 	movhi	r2,2049
 800463c:	10a29504 	addi	r2,r2,-30124
 8004640:	10800017 	ldw	r2,0(r2)
 8004644:	100170fa 	wrctl	ienable,r2
 8004648:	e0bffd17 	ldw	r2,-12(fp)
 800464c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004650:	e0bffa17 	ldw	r2,-24(fp)
 8004654:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8004658:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 800465c:	e037883a 	mov	sp,fp
 8004660:	df000017 	ldw	fp,0(sp)
 8004664:	dec00104 	addi	sp,sp,4
 8004668:	f800283a 	ret

0800466c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800466c:	defff904 	addi	sp,sp,-28
 8004670:	df000615 	stw	fp,24(sp)
 8004674:	df000604 	addi	fp,sp,24
 8004678:	e13ffe15 	stw	r4,-8(fp)
 800467c:	e17fff15 	stw	r5,-4(fp)
 8004680:	e0bfff17 	ldw	r2,-4(fp)
 8004684:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004688:	0005303a 	rdctl	r2,status
 800468c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004690:	e0fffb17 	ldw	r3,-20(fp)
 8004694:	00bfff84 	movi	r2,-2
 8004698:	1884703a 	and	r2,r3,r2
 800469c:	1001703a 	wrctl	status,r2
  
  return context;
 80046a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80046a4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 80046a8:	e0fffc17 	ldw	r3,-16(fp)
 80046ac:	00800044 	movi	r2,1
 80046b0:	10c4983a 	sll	r2,r2,r3
 80046b4:	0084303a 	nor	r2,zero,r2
 80046b8:	1007883a 	mov	r3,r2
 80046bc:	00820074 	movhi	r2,2049
 80046c0:	10a29504 	addi	r2,r2,-30124
 80046c4:	10800017 	ldw	r2,0(r2)
 80046c8:	1886703a 	and	r3,r3,r2
 80046cc:	00820074 	movhi	r2,2049
 80046d0:	10a29504 	addi	r2,r2,-30124
 80046d4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80046d8:	00820074 	movhi	r2,2049
 80046dc:	10a29504 	addi	r2,r2,-30124
 80046e0:	10800017 	ldw	r2,0(r2)
 80046e4:	100170fa 	wrctl	ienable,r2
 80046e8:	e0bffd17 	ldw	r2,-12(fp)
 80046ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80046f0:	e0bffa17 	ldw	r2,-24(fp)
 80046f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80046f8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 80046fc:	e037883a 	mov	sp,fp
 8004700:	df000017 	ldw	fp,0(sp)
 8004704:	dec00104 	addi	sp,sp,4
 8004708:	f800283a 	ret

0800470c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800470c:	defffc04 	addi	sp,sp,-16
 8004710:	df000315 	stw	fp,12(sp)
 8004714:	df000304 	addi	fp,sp,12
 8004718:	e13ffe15 	stw	r4,-8(fp)
 800471c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8004720:	000530fa 	rdctl	r2,ienable
 8004724:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8004728:	e0ffff17 	ldw	r3,-4(fp)
 800472c:	00800044 	movi	r2,1
 8004730:	10c4983a 	sll	r2,r2,r3
 8004734:	1007883a 	mov	r3,r2
 8004738:	e0bffd17 	ldw	r2,-12(fp)
 800473c:	1884703a 	and	r2,r3,r2
 8004740:	1004c03a 	cmpne	r2,r2,zero
}
 8004744:	e037883a 	mov	sp,fp
 8004748:	df000017 	ldw	fp,0(sp)
 800474c:	dec00104 	addi	sp,sp,4
 8004750:	f800283a 	ret

08004754 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8004754:	defff404 	addi	sp,sp,-48
 8004758:	dfc00b15 	stw	ra,44(sp)
 800475c:	df000a15 	stw	fp,40(sp)
 8004760:	df000a04 	addi	fp,sp,40
 8004764:	e13ffb15 	stw	r4,-20(fp)
 8004768:	e17ffc15 	stw	r5,-16(fp)
 800476c:	e1bffd15 	stw	r6,-12(fp)
 8004770:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 8004774:	00bffa84 	movi	r2,-22
 8004778:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800477c:	e0bffc17 	ldw	r2,-16(fp)
 8004780:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8004784:	e0bff917 	ldw	r2,-28(fp)
 8004788:	10800808 	cmpgei	r2,r2,32
 800478c:	1000291e 	bne	r2,zero,8004834 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004790:	0005303a 	rdctl	r2,status
 8004794:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004798:	e0fff717 	ldw	r3,-36(fp)
 800479c:	00bfff84 	movi	r2,-2
 80047a0:	1884703a 	and	r2,r3,r2
 80047a4:	1001703a 	wrctl	status,r2
  
  return context;
 80047a8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80047ac:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 80047b0:	e0bff917 	ldw	r2,-28(fp)
 80047b4:	00c20074 	movhi	r3,2049
 80047b8:	18e2a204 	addi	r3,r3,-30072
 80047bc:	100490fa 	slli	r2,r2,3
 80047c0:	10c7883a 	add	r3,r2,r3
 80047c4:	e0bffd17 	ldw	r2,-12(fp)
 80047c8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 80047cc:	e0bff917 	ldw	r2,-28(fp)
 80047d0:	00c20074 	movhi	r3,2049
 80047d4:	18e2a204 	addi	r3,r3,-30072
 80047d8:	100490fa 	slli	r2,r2,3
 80047dc:	10c5883a 	add	r2,r2,r3
 80047e0:	10c00104 	addi	r3,r2,4
 80047e4:	e0bffe17 	ldw	r2,-8(fp)
 80047e8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80047ec:	e0bffd17 	ldw	r2,-12(fp)
 80047f0:	1005003a 	cmpeq	r2,r2,zero
 80047f4:	1000051e 	bne	r2,zero,800480c <alt_iic_isr_register+0xb8>
 80047f8:	e17ff917 	ldw	r5,-28(fp)
 80047fc:	e13ffb17 	ldw	r4,-20(fp)
 8004800:	80045d00 	call	80045d0 <alt_ic_irq_enable>
 8004804:	e0bfff15 	stw	r2,-4(fp)
 8004808:	00000406 	br	800481c <alt_iic_isr_register+0xc8>
 800480c:	e17ff917 	ldw	r5,-28(fp)
 8004810:	e13ffb17 	ldw	r4,-20(fp)
 8004814:	800466c0 	call	800466c <alt_ic_irq_disable>
 8004818:	e0bfff15 	stw	r2,-4(fp)
 800481c:	e0bfff17 	ldw	r2,-4(fp)
 8004820:	e0bffa15 	stw	r2,-24(fp)
 8004824:	e0bff817 	ldw	r2,-32(fp)
 8004828:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800482c:	e0bff617 	ldw	r2,-40(fp)
 8004830:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8004834:	e0bffa17 	ldw	r2,-24(fp)
}
 8004838:	e037883a 	mov	sp,fp
 800483c:	dfc00117 	ldw	ra,4(sp)
 8004840:	df000017 	ldw	fp,0(sp)
 8004844:	dec00204 	addi	sp,sp,8
 8004848:	f800283a 	ret

0800484c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800484c:	defff804 	addi	sp,sp,-32
 8004850:	dfc00715 	stw	ra,28(sp)
 8004854:	df000615 	stw	fp,24(sp)
 8004858:	dc000515 	stw	r16,20(sp)
 800485c:	df000504 	addi	fp,sp,20
 8004860:	e13ffc15 	stw	r4,-16(fp)
 8004864:	e17ffd15 	stw	r5,-12(fp)
 8004868:	e1bffe15 	stw	r6,-8(fp)
 800486c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8004870:	e13ffd17 	ldw	r4,-12(fp)
 8004874:	e17ffe17 	ldw	r5,-8(fp)
 8004878:	e1bfff17 	ldw	r6,-4(fp)
 800487c:	8004a940 	call	8004a94 <open>
 8004880:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8004884:	e0bffb17 	ldw	r2,-20(fp)
 8004888:	1004803a 	cmplt	r2,r2,zero
 800488c:	10001f1e 	bne	r2,zero,800490c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8004890:	e13ffb17 	ldw	r4,-20(fp)
 8004894:	04020034 	movhi	r16,2048
 8004898:	84176004 	addi	r16,r16,23936
 800489c:	01400304 	movi	r5,12
 80048a0:	8002b680 	call	8002b68 <__mulsi3>
 80048a4:	1405883a 	add	r2,r2,r16
 80048a8:	10c00017 	ldw	r3,0(r2)
 80048ac:	e0bffc17 	ldw	r2,-16(fp)
 80048b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80048b4:	e13ffb17 	ldw	r4,-20(fp)
 80048b8:	04020034 	movhi	r16,2048
 80048bc:	84176004 	addi	r16,r16,23936
 80048c0:	01400304 	movi	r5,12
 80048c4:	8002b680 	call	8002b68 <__mulsi3>
 80048c8:	1405883a 	add	r2,r2,r16
 80048cc:	10800104 	addi	r2,r2,4
 80048d0:	10c00017 	ldw	r3,0(r2)
 80048d4:	e0bffc17 	ldw	r2,-16(fp)
 80048d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80048dc:	e13ffb17 	ldw	r4,-20(fp)
 80048e0:	04020034 	movhi	r16,2048
 80048e4:	84176004 	addi	r16,r16,23936
 80048e8:	01400304 	movi	r5,12
 80048ec:	8002b680 	call	8002b68 <__mulsi3>
 80048f0:	1405883a 	add	r2,r2,r16
 80048f4:	10800204 	addi	r2,r2,8
 80048f8:	10c00017 	ldw	r3,0(r2)
 80048fc:	e0bffc17 	ldw	r2,-16(fp)
 8004900:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8004904:	e13ffb17 	ldw	r4,-20(fp)
 8004908:	80033f80 	call	80033f8 <alt_release_fd>
  }
} 
 800490c:	e037883a 	mov	sp,fp
 8004910:	dfc00217 	ldw	ra,8(sp)
 8004914:	df000117 	ldw	fp,4(sp)
 8004918:	dc000017 	ldw	r16,0(sp)
 800491c:	dec00304 	addi	sp,sp,12
 8004920:	f800283a 	ret

08004924 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8004924:	defffb04 	addi	sp,sp,-20
 8004928:	dfc00415 	stw	ra,16(sp)
 800492c:	df000315 	stw	fp,12(sp)
 8004930:	df000304 	addi	fp,sp,12
 8004934:	e13ffd15 	stw	r4,-12(fp)
 8004938:	e17ffe15 	stw	r5,-8(fp)
 800493c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8004940:	01020034 	movhi	r4,2048
 8004944:	21176304 	addi	r4,r4,23948
 8004948:	e17ffd17 	ldw	r5,-12(fp)
 800494c:	01800044 	movi	r6,1
 8004950:	01c07fc4 	movi	r7,511
 8004954:	800484c0 	call	800484c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8004958:	01020034 	movhi	r4,2048
 800495c:	21176004 	addi	r4,r4,23936
 8004960:	e17ffe17 	ldw	r5,-8(fp)
 8004964:	000d883a 	mov	r6,zero
 8004968:	01c07fc4 	movi	r7,511
 800496c:	800484c0 	call	800484c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8004970:	01020034 	movhi	r4,2048
 8004974:	21176604 	addi	r4,r4,23960
 8004978:	e17fff17 	ldw	r5,-4(fp)
 800497c:	01800044 	movi	r6,1
 8004980:	01c07fc4 	movi	r7,511
 8004984:	800484c0 	call	800484c <alt_open_fd>
}  
 8004988:	e037883a 	mov	sp,fp
 800498c:	dfc00117 	ldw	ra,4(sp)
 8004990:	df000017 	ldw	fp,0(sp)
 8004994:	dec00204 	addi	sp,sp,8
 8004998:	f800283a 	ret

0800499c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800499c:	defffa04 	addi	sp,sp,-24
 80049a0:	dfc00515 	stw	ra,20(sp)
 80049a4:	df000415 	stw	fp,16(sp)
 80049a8:	dc000315 	stw	r16,12(sp)
 80049ac:	df000304 	addi	fp,sp,12
 80049b0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80049b4:	e0bffe17 	ldw	r2,-8(fp)
 80049b8:	10800217 	ldw	r2,8(r2)
 80049bc:	10d00034 	orhi	r3,r2,16384
 80049c0:	e0bffe17 	ldw	r2,-8(fp)
 80049c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80049c8:	e03ffd15 	stw	zero,-12(fp)
 80049cc:	00002306 	br	8004a5c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80049d0:	e13ffd17 	ldw	r4,-12(fp)
 80049d4:	04020034 	movhi	r16,2048
 80049d8:	84176004 	addi	r16,r16,23936
 80049dc:	01400304 	movi	r5,12
 80049e0:	8002b680 	call	8002b68 <__mulsi3>
 80049e4:	1405883a 	add	r2,r2,r16
 80049e8:	10c00017 	ldw	r3,0(r2)
 80049ec:	e0bffe17 	ldw	r2,-8(fp)
 80049f0:	10800017 	ldw	r2,0(r2)
 80049f4:	1880161e 	bne	r3,r2,8004a50 <alt_file_locked+0xb4>
 80049f8:	e13ffd17 	ldw	r4,-12(fp)
 80049fc:	04020034 	movhi	r16,2048
 8004a00:	84176004 	addi	r16,r16,23936
 8004a04:	01400304 	movi	r5,12
 8004a08:	8002b680 	call	8002b68 <__mulsi3>
 8004a0c:	1405883a 	add	r2,r2,r16
 8004a10:	10800204 	addi	r2,r2,8
 8004a14:	10800017 	ldw	r2,0(r2)
 8004a18:	1004403a 	cmpge	r2,r2,zero
 8004a1c:	10000c1e 	bne	r2,zero,8004a50 <alt_file_locked+0xb4>
 8004a20:	e13ffd17 	ldw	r4,-12(fp)
 8004a24:	01400304 	movi	r5,12
 8004a28:	8002b680 	call	8002b68 <__mulsi3>
 8004a2c:	1007883a 	mov	r3,r2
 8004a30:	00820034 	movhi	r2,2048
 8004a34:	10976004 	addi	r2,r2,23936
 8004a38:	1887883a 	add	r3,r3,r2
 8004a3c:	e0bffe17 	ldw	r2,-8(fp)
 8004a40:	18800326 	beq	r3,r2,8004a50 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8004a44:	00bffcc4 	movi	r2,-13
 8004a48:	e0bfff15 	stw	r2,-4(fp)
 8004a4c:	00000a06 	br	8004a78 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8004a50:	e0bffd17 	ldw	r2,-12(fp)
 8004a54:	10800044 	addi	r2,r2,1
 8004a58:	e0bffd15 	stw	r2,-12(fp)
 8004a5c:	00820034 	movhi	r2,2048
 8004a60:	109beb04 	addi	r2,r2,28588
 8004a64:	10800017 	ldw	r2,0(r2)
 8004a68:	1007883a 	mov	r3,r2
 8004a6c:	e0bffd17 	ldw	r2,-12(fp)
 8004a70:	18bfd72e 	bgeu	r3,r2,80049d0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8004a74:	e03fff15 	stw	zero,-4(fp)
 8004a78:	e0bfff17 	ldw	r2,-4(fp)
}
 8004a7c:	e037883a 	mov	sp,fp
 8004a80:	dfc00217 	ldw	ra,8(sp)
 8004a84:	df000117 	ldw	fp,4(sp)
 8004a88:	dc000017 	ldw	r16,0(sp)
 8004a8c:	dec00304 	addi	sp,sp,12
 8004a90:	f800283a 	ret

08004a94 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8004a94:	defff404 	addi	sp,sp,-48
 8004a98:	dfc00b15 	stw	ra,44(sp)
 8004a9c:	df000a15 	stw	fp,40(sp)
 8004aa0:	df000a04 	addi	fp,sp,40
 8004aa4:	e13ffb15 	stw	r4,-20(fp)
 8004aa8:	e17ffc15 	stw	r5,-16(fp)
 8004aac:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8004ab0:	00bfffc4 	movi	r2,-1
 8004ab4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8004ab8:	00bffb44 	movi	r2,-19
 8004abc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8004ac0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8004ac4:	e13ffb17 	ldw	r4,-20(fp)
 8004ac8:	01420034 	movhi	r5,2048
 8004acc:	295be904 	addi	r5,r5,28580
 8004ad0:	8004e440 	call	8004e44 <alt_find_dev>
 8004ad4:	e0bffa15 	stw	r2,-24(fp)
 8004ad8:	e0bffa17 	ldw	r2,-24(fp)
 8004adc:	1004c03a 	cmpne	r2,r2,zero
 8004ae0:	1000051e 	bne	r2,zero,8004af8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8004ae4:	e13ffb17 	ldw	r4,-20(fp)
 8004ae8:	8004ed80 	call	8004ed8 <alt_find_file>
 8004aec:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8004af0:	00800044 	movi	r2,1
 8004af4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8004af8:	e0bffa17 	ldw	r2,-24(fp)
 8004afc:	1005003a 	cmpeq	r2,r2,zero
 8004b00:	1000311e 	bne	r2,zero,8004bc8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8004b04:	e13ffa17 	ldw	r4,-24(fp)
 8004b08:	8004ff80 	call	8004ff8 <alt_get_fd>
 8004b0c:	e0bff815 	stw	r2,-32(fp)
 8004b10:	e0bff817 	ldw	r2,-32(fp)
 8004b14:	1004403a 	cmpge	r2,r2,zero
 8004b18:	1000031e 	bne	r2,zero,8004b28 <open+0x94>
    {
      status = index;
 8004b1c:	e0bff817 	ldw	r2,-32(fp)
 8004b20:	e0bff715 	stw	r2,-36(fp)
 8004b24:	00002a06 	br	8004bd0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8004b28:	e13ff817 	ldw	r4,-32(fp)
 8004b2c:	01400304 	movi	r5,12
 8004b30:	8002b680 	call	8002b68 <__mulsi3>
 8004b34:	1007883a 	mov	r3,r2
 8004b38:	00820034 	movhi	r2,2048
 8004b3c:	10976004 	addi	r2,r2,23936
 8004b40:	1885883a 	add	r2,r3,r2
 8004b44:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8004b48:	e0fffc17 	ldw	r3,-16(fp)
 8004b4c:	00900034 	movhi	r2,16384
 8004b50:	10bfffc4 	addi	r2,r2,-1
 8004b54:	1886703a 	and	r3,r3,r2
 8004b58:	e0bff917 	ldw	r2,-28(fp)
 8004b5c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8004b60:	e0bff617 	ldw	r2,-40(fp)
 8004b64:	1004c03a 	cmpne	r2,r2,zero
 8004b68:	1000061e 	bne	r2,zero,8004b84 <open+0xf0>
 8004b6c:	e13ff917 	ldw	r4,-28(fp)
 8004b70:	800499c0 	call	800499c <alt_file_locked>
 8004b74:	e0bff715 	stw	r2,-36(fp)
 8004b78:	e0bff717 	ldw	r2,-36(fp)
 8004b7c:	1004803a 	cmplt	r2,r2,zero
 8004b80:	1000131e 	bne	r2,zero,8004bd0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8004b84:	e0bffa17 	ldw	r2,-24(fp)
 8004b88:	10800317 	ldw	r2,12(r2)
 8004b8c:	1005003a 	cmpeq	r2,r2,zero
 8004b90:	1000091e 	bne	r2,zero,8004bb8 <open+0x124>
 8004b94:	e0bffa17 	ldw	r2,-24(fp)
 8004b98:	10800317 	ldw	r2,12(r2)
 8004b9c:	e13ff917 	ldw	r4,-28(fp)
 8004ba0:	e17ffb17 	ldw	r5,-20(fp)
 8004ba4:	e1bffc17 	ldw	r6,-16(fp)
 8004ba8:	e1fffd17 	ldw	r7,-12(fp)
 8004bac:	103ee83a 	callr	r2
 8004bb0:	e0bfff15 	stw	r2,-4(fp)
 8004bb4:	00000106 	br	8004bbc <open+0x128>
 8004bb8:	e03fff15 	stw	zero,-4(fp)
 8004bbc:	e0bfff17 	ldw	r2,-4(fp)
 8004bc0:	e0bff715 	stw	r2,-36(fp)
 8004bc4:	00000206 	br	8004bd0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8004bc8:	00bffb44 	movi	r2,-19
 8004bcc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8004bd0:	e0bff717 	ldw	r2,-36(fp)
 8004bd4:	1004403a 	cmpge	r2,r2,zero
 8004bd8:	1000091e 	bne	r2,zero,8004c00 <open+0x16c>
  {
    alt_release_fd (index);  
 8004bdc:	e13ff817 	ldw	r4,-32(fp)
 8004be0:	80033f80 	call	80033f8 <alt_release_fd>
    ALT_ERRNO = -status;
 8004be4:	8004c200 	call	8004c20 <alt_get_errno>
 8004be8:	e0fff717 	ldw	r3,-36(fp)
 8004bec:	00c7c83a 	sub	r3,zero,r3
 8004bf0:	10c00015 	stw	r3,0(r2)
    return -1;
 8004bf4:	00bfffc4 	movi	r2,-1
 8004bf8:	e0bffe15 	stw	r2,-8(fp)
 8004bfc:	00000206 	br	8004c08 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 8004c00:	e0bff817 	ldw	r2,-32(fp)
 8004c04:	e0bffe15 	stw	r2,-8(fp)
 8004c08:	e0bffe17 	ldw	r2,-8(fp)
}
 8004c0c:	e037883a 	mov	sp,fp
 8004c10:	dfc00117 	ldw	ra,4(sp)
 8004c14:	df000017 	ldw	fp,0(sp)
 8004c18:	dec00204 	addi	sp,sp,8
 8004c1c:	f800283a 	ret

08004c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004c20:	defffd04 	addi	sp,sp,-12
 8004c24:	dfc00215 	stw	ra,8(sp)
 8004c28:	df000115 	stw	fp,4(sp)
 8004c2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8004c30:	00820034 	movhi	r2,2048
 8004c34:	109bec04 	addi	r2,r2,28592
 8004c38:	10800017 	ldw	r2,0(r2)
 8004c3c:	1005003a 	cmpeq	r2,r2,zero
 8004c40:	1000061e 	bne	r2,zero,8004c5c <alt_get_errno+0x3c>
 8004c44:	00820034 	movhi	r2,2048
 8004c48:	109bec04 	addi	r2,r2,28592
 8004c4c:	10800017 	ldw	r2,0(r2)
 8004c50:	103ee83a 	callr	r2
 8004c54:	e0bfff15 	stw	r2,-4(fp)
 8004c58:	00000306 	br	8004c68 <alt_get_errno+0x48>
 8004c5c:	00820074 	movhi	r2,2049
 8004c60:	10a29104 	addi	r2,r2,-30140
 8004c64:	e0bfff15 	stw	r2,-4(fp)
 8004c68:	e0bfff17 	ldw	r2,-4(fp)
}
 8004c6c:	e037883a 	mov	sp,fp
 8004c70:	dfc00117 	ldw	ra,4(sp)
 8004c74:	df000017 	ldw	fp,0(sp)
 8004c78:	dec00204 	addi	sp,sp,8
 8004c7c:	f800283a 	ret

08004c80 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8004c80:	defffa04 	addi	sp,sp,-24
 8004c84:	df000515 	stw	fp,20(sp)
 8004c88:	df000504 	addi	fp,sp,20
 8004c8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004c90:	0005303a 	rdctl	r2,status
 8004c94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004c98:	e0fffd17 	ldw	r3,-12(fp)
 8004c9c:	00bfff84 	movi	r2,-2
 8004ca0:	1884703a 	and	r2,r3,r2
 8004ca4:	1001703a 	wrctl	status,r2
  
  return context;
 8004ca8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8004cac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 8004cb0:	e0bfff17 	ldw	r2,-4(fp)
 8004cb4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8004cb8:	e0bffc17 	ldw	r2,-16(fp)
 8004cbc:	10c00017 	ldw	r3,0(r2)
 8004cc0:	e0bffc17 	ldw	r2,-16(fp)
 8004cc4:	10800117 	ldw	r2,4(r2)
 8004cc8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 8004ccc:	e0bffc17 	ldw	r2,-16(fp)
 8004cd0:	10c00117 	ldw	r3,4(r2)
 8004cd4:	e0bffc17 	ldw	r2,-16(fp)
 8004cd8:	10800017 	ldw	r2,0(r2)
 8004cdc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8004ce0:	e0fffc17 	ldw	r3,-16(fp)
 8004ce4:	e0bffc17 	ldw	r2,-16(fp)
 8004ce8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 8004cec:	e0fffc17 	ldw	r3,-16(fp)
 8004cf0:	e0bffc17 	ldw	r2,-16(fp)
 8004cf4:	18800015 	stw	r2,0(r3)
 8004cf8:	e0bffe17 	ldw	r2,-8(fp)
 8004cfc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004d00:	e0bffb17 	ldw	r2,-20(fp)
 8004d04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8004d08:	e037883a 	mov	sp,fp
 8004d0c:	df000017 	ldw	fp,0(sp)
 8004d10:	dec00104 	addi	sp,sp,4
 8004d14:	f800283a 	ret

08004d18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8004d18:	defffb04 	addi	sp,sp,-20
 8004d1c:	dfc00415 	stw	ra,16(sp)
 8004d20:	df000315 	stw	fp,12(sp)
 8004d24:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8004d28:	d0a00c17 	ldw	r2,-32720(gp)
 8004d2c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8004d30:	d0a6b417 	ldw	r2,-25904(gp)
 8004d34:	10800044 	addi	r2,r2,1
 8004d38:	d0a6b415 	stw	r2,-25904(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8004d3c:	00003106 	br	8004e04 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 8004d40:	e0bffe17 	ldw	r2,-8(fp)
 8004d44:	10800017 	ldw	r2,0(r2)
 8004d48:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8004d4c:	e0bffe17 	ldw	r2,-8(fp)
 8004d50:	10800403 	ldbu	r2,16(r2)
 8004d54:	10803fcc 	andi	r2,r2,255
 8004d58:	1005003a 	cmpeq	r2,r2,zero
 8004d5c:	1000051e 	bne	r2,zero,8004d74 <alt_tick+0x5c>
 8004d60:	d0a6b417 	ldw	r2,-25904(gp)
 8004d64:	1004c03a 	cmpne	r2,r2,zero
 8004d68:	1000021e 	bne	r2,zero,8004d74 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 8004d6c:	e0bffe17 	ldw	r2,-8(fp)
 8004d70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8004d74:	e0bffe17 	ldw	r2,-8(fp)
 8004d78:	10c00217 	ldw	r3,8(r2)
 8004d7c:	d0a6b417 	ldw	r2,-25904(gp)
 8004d80:	10c01e36 	bltu	r2,r3,8004dfc <alt_tick+0xe4>
 8004d84:	e0bffe17 	ldw	r2,-8(fp)
 8004d88:	10800403 	ldbu	r2,16(r2)
 8004d8c:	10803fcc 	andi	r2,r2,255
 8004d90:	1004c03a 	cmpne	r2,r2,zero
 8004d94:	1000191e 	bne	r2,zero,8004dfc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 8004d98:	e0bffe17 	ldw	r2,-8(fp)
 8004d9c:	10c00317 	ldw	r3,12(r2)
 8004da0:	e0bffe17 	ldw	r2,-8(fp)
 8004da4:	11000517 	ldw	r4,20(r2)
 8004da8:	183ee83a 	callr	r3
 8004dac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8004db0:	e0bffd17 	ldw	r2,-12(fp)
 8004db4:	1004c03a 	cmpne	r2,r2,zero
 8004db8:	1000031e 	bne	r2,zero,8004dc8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 8004dbc:	e13ffe17 	ldw	r4,-8(fp)
 8004dc0:	8004c800 	call	8004c80 <alt_alarm_stop>
 8004dc4:	00000d06 	br	8004dfc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 8004dc8:	e0bffe17 	ldw	r2,-8(fp)
 8004dcc:	10c00217 	ldw	r3,8(r2)
 8004dd0:	e0bffd17 	ldw	r2,-12(fp)
 8004dd4:	1887883a 	add	r3,r3,r2
 8004dd8:	e0bffe17 	ldw	r2,-8(fp)
 8004ddc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8004de0:	e0bffe17 	ldw	r2,-8(fp)
 8004de4:	10c00217 	ldw	r3,8(r2)
 8004de8:	d0a6b417 	ldw	r2,-25904(gp)
 8004dec:	1880032e 	bgeu	r3,r2,8004dfc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 8004df0:	e0fffe17 	ldw	r3,-8(fp)
 8004df4:	00800044 	movi	r2,1
 8004df8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 8004dfc:	e0bfff17 	ldw	r2,-4(fp)
 8004e00:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8004e04:	d0e00c04 	addi	r3,gp,-32720
 8004e08:	e0bffe17 	ldw	r2,-8(fp)
 8004e0c:	10ffcc1e 	bne	r2,r3,8004d40 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 8004e10:	e037883a 	mov	sp,fp
 8004e14:	dfc00117 	ldw	ra,4(sp)
 8004e18:	df000017 	ldw	fp,0(sp)
 8004e1c:	dec00204 	addi	sp,sp,8
 8004e20:	f800283a 	ret

08004e24 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 8004e24:	deffff04 	addi	sp,sp,-4
 8004e28:	df000015 	stw	fp,0(sp)
 8004e2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8004e30:	000170fa 	wrctl	ienable,zero
}
 8004e34:	e037883a 	mov	sp,fp
 8004e38:	df000017 	ldw	fp,0(sp)
 8004e3c:	dec00104 	addi	sp,sp,4
 8004e40:	f800283a 	ret

08004e44 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8004e44:	defff904 	addi	sp,sp,-28
 8004e48:	dfc00615 	stw	ra,24(sp)
 8004e4c:	df000515 	stw	fp,20(sp)
 8004e50:	df000504 	addi	fp,sp,20
 8004e54:	e13ffd15 	stw	r4,-12(fp)
 8004e58:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8004e5c:	e0bffe17 	ldw	r2,-8(fp)
 8004e60:	10800017 	ldw	r2,0(r2)
 8004e64:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8004e68:	e13ffd17 	ldw	r4,-12(fp)
 8004e6c:	80002d80 	call	80002d8 <strlen>
 8004e70:	10800044 	addi	r2,r2,1
 8004e74:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004e78:	00000d06 	br	8004eb0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8004e7c:	e0bffc17 	ldw	r2,-16(fp)
 8004e80:	11000217 	ldw	r4,8(r2)
 8004e84:	e1bffb17 	ldw	r6,-20(fp)
 8004e88:	e17ffd17 	ldw	r5,-12(fp)
 8004e8c:	80051140 	call	8005114 <memcmp>
 8004e90:	1004c03a 	cmpne	r2,r2,zero
 8004e94:	1000031e 	bne	r2,zero,8004ea4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8004e98:	e0bffc17 	ldw	r2,-16(fp)
 8004e9c:	e0bfff15 	stw	r2,-4(fp)
 8004ea0:	00000706 	br	8004ec0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8004ea4:	e0bffc17 	ldw	r2,-16(fp)
 8004ea8:	10800017 	ldw	r2,0(r2)
 8004eac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004eb0:	e0fffe17 	ldw	r3,-8(fp)
 8004eb4:	e0bffc17 	ldw	r2,-16(fp)
 8004eb8:	10fff01e 	bne	r2,r3,8004e7c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8004ebc:	e03fff15 	stw	zero,-4(fp)
 8004ec0:	e0bfff17 	ldw	r2,-4(fp)
}
 8004ec4:	e037883a 	mov	sp,fp
 8004ec8:	dfc00117 	ldw	ra,4(sp)
 8004ecc:	df000017 	ldw	fp,0(sp)
 8004ed0:	dec00204 	addi	sp,sp,8
 8004ed4:	f800283a 	ret

08004ed8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8004ed8:	defffa04 	addi	sp,sp,-24
 8004edc:	dfc00515 	stw	ra,20(sp)
 8004ee0:	df000415 	stw	fp,16(sp)
 8004ee4:	df000404 	addi	fp,sp,16
 8004ee8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8004eec:	00820034 	movhi	r2,2048
 8004ef0:	109be704 	addi	r2,r2,28572
 8004ef4:	10800017 	ldw	r2,0(r2)
 8004ef8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8004efc:	00003306 	br	8004fcc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 8004f00:	e0bffd17 	ldw	r2,-12(fp)
 8004f04:	11000217 	ldw	r4,8(r2)
 8004f08:	80002d80 	call	80002d8 <strlen>
 8004f0c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 8004f10:	e0bffd17 	ldw	r2,-12(fp)
 8004f14:	10c00217 	ldw	r3,8(r2)
 8004f18:	e0bffc17 	ldw	r2,-16(fp)
 8004f1c:	1885883a 	add	r2,r3,r2
 8004f20:	10bfffc4 	addi	r2,r2,-1
 8004f24:	10800003 	ldbu	r2,0(r2)
 8004f28:	10803fcc 	andi	r2,r2,255
 8004f2c:	1080201c 	xori	r2,r2,128
 8004f30:	10bfe004 	addi	r2,r2,-128
 8004f34:	10800bd8 	cmpnei	r2,r2,47
 8004f38:	1000031e 	bne	r2,zero,8004f48 <alt_find_file+0x70>
    {
      len -= 1;
 8004f3c:	e0bffc17 	ldw	r2,-16(fp)
 8004f40:	10bfffc4 	addi	r2,r2,-1
 8004f44:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8004f48:	e0bffc17 	ldw	r2,-16(fp)
 8004f4c:	1007883a 	mov	r3,r2
 8004f50:	e0bffe17 	ldw	r2,-8(fp)
 8004f54:	1885883a 	add	r2,r3,r2
 8004f58:	10800003 	ldbu	r2,0(r2)
 8004f5c:	10803fcc 	andi	r2,r2,255
 8004f60:	1080201c 	xori	r2,r2,128
 8004f64:	10bfe004 	addi	r2,r2,-128
 8004f68:	10800be0 	cmpeqi	r2,r2,47
 8004f6c:	10000a1e 	bne	r2,zero,8004f98 <alt_find_file+0xc0>
 8004f70:	e0bffc17 	ldw	r2,-16(fp)
 8004f74:	1007883a 	mov	r3,r2
 8004f78:	e0bffe17 	ldw	r2,-8(fp)
 8004f7c:	1885883a 	add	r2,r3,r2
 8004f80:	10800003 	ldbu	r2,0(r2)
 8004f84:	10803fcc 	andi	r2,r2,255
 8004f88:	1080201c 	xori	r2,r2,128
 8004f8c:	10bfe004 	addi	r2,r2,-128
 8004f90:	1004c03a 	cmpne	r2,r2,zero
 8004f94:	10000a1e 	bne	r2,zero,8004fc0 <alt_find_file+0xe8>
 8004f98:	e0bffd17 	ldw	r2,-12(fp)
 8004f9c:	11000217 	ldw	r4,8(r2)
 8004fa0:	e1bffc17 	ldw	r6,-16(fp)
 8004fa4:	e17ffe17 	ldw	r5,-8(fp)
 8004fa8:	80051140 	call	8005114 <memcmp>
 8004fac:	1004c03a 	cmpne	r2,r2,zero
 8004fb0:	1000031e 	bne	r2,zero,8004fc0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8004fb4:	e0bffd17 	ldw	r2,-12(fp)
 8004fb8:	e0bfff15 	stw	r2,-4(fp)
 8004fbc:	00000806 	br	8004fe0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 8004fc0:	e0bffd17 	ldw	r2,-12(fp)
 8004fc4:	10800017 	ldw	r2,0(r2)
 8004fc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8004fcc:	00c20034 	movhi	r3,2048
 8004fd0:	18dbe704 	addi	r3,r3,28572
 8004fd4:	e0bffd17 	ldw	r2,-12(fp)
 8004fd8:	10ffc91e 	bne	r2,r3,8004f00 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8004fdc:	e03fff15 	stw	zero,-4(fp)
 8004fe0:	e0bfff17 	ldw	r2,-4(fp)
}
 8004fe4:	e037883a 	mov	sp,fp
 8004fe8:	dfc00117 	ldw	ra,4(sp)
 8004fec:	df000017 	ldw	fp,0(sp)
 8004ff0:	dec00204 	addi	sp,sp,8
 8004ff4:	f800283a 	ret

08004ff8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8004ff8:	defffa04 	addi	sp,sp,-24
 8004ffc:	dfc00515 	stw	ra,20(sp)
 8005000:	df000415 	stw	fp,16(sp)
 8005004:	dc000315 	stw	r16,12(sp)
 8005008:	df000304 	addi	fp,sp,12
 800500c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8005010:	00bffa04 	movi	r2,-24
 8005014:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8005018:	e03ffe15 	stw	zero,-8(fp)
 800501c:	00002006 	br	80050a0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 8005020:	e13ffe17 	ldw	r4,-8(fp)
 8005024:	04020034 	movhi	r16,2048
 8005028:	84176004 	addi	r16,r16,23936
 800502c:	01400304 	movi	r5,12
 8005030:	8002b680 	call	8002b68 <__mulsi3>
 8005034:	1405883a 	add	r2,r2,r16
 8005038:	10800017 	ldw	r2,0(r2)
 800503c:	1004c03a 	cmpne	r2,r2,zero
 8005040:	1000141e 	bne	r2,zero,8005094 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 8005044:	e13ffe17 	ldw	r4,-8(fp)
 8005048:	04020034 	movhi	r16,2048
 800504c:	84176004 	addi	r16,r16,23936
 8005050:	01400304 	movi	r5,12
 8005054:	8002b680 	call	8002b68 <__mulsi3>
 8005058:	1407883a 	add	r3,r2,r16
 800505c:	e0bfff17 	ldw	r2,-4(fp)
 8005060:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 8005064:	00820034 	movhi	r2,2048
 8005068:	109beb04 	addi	r2,r2,28588
 800506c:	10c00017 	ldw	r3,0(r2)
 8005070:	e0bffe17 	ldw	r2,-8(fp)
 8005074:	1880040e 	bge	r3,r2,8005088 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 8005078:	00c20034 	movhi	r3,2048
 800507c:	18dbeb04 	addi	r3,r3,28588
 8005080:	e0bffe17 	ldw	r2,-8(fp)
 8005084:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 8005088:	e0bffe17 	ldw	r2,-8(fp)
 800508c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8005090:	00000606 	br	80050ac <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8005094:	e0bffe17 	ldw	r2,-8(fp)
 8005098:	10800044 	addi	r2,r2,1
 800509c:	e0bffe15 	stw	r2,-8(fp)
 80050a0:	e0bffe17 	ldw	r2,-8(fp)
 80050a4:	10800810 	cmplti	r2,r2,32
 80050a8:	103fdd1e 	bne	r2,zero,8005020 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80050ac:	e0bffd17 	ldw	r2,-12(fp)
}
 80050b0:	e037883a 	mov	sp,fp
 80050b4:	dfc00217 	ldw	ra,8(sp)
 80050b8:	df000117 	ldw	fp,4(sp)
 80050bc:	dc000017 	ldw	r16,0(sp)
 80050c0:	dec00304 	addi	sp,sp,12
 80050c4:	f800283a 	ret

080050c8 <atexit>:
 80050c8:	200b883a 	mov	r5,r4
 80050cc:	000d883a 	mov	r6,zero
 80050d0:	0009883a 	mov	r4,zero
 80050d4:	000f883a 	mov	r7,zero
 80050d8:	80051881 	jmpi	8005188 <__register_exitproc>

080050dc <exit>:
 80050dc:	defffe04 	addi	sp,sp,-8
 80050e0:	000b883a 	mov	r5,zero
 80050e4:	dc000015 	stw	r16,0(sp)
 80050e8:	dfc00115 	stw	ra,4(sp)
 80050ec:	2021883a 	mov	r16,r4
 80050f0:	80052c00 	call	80052c0 <__call_exitprocs>
 80050f4:	00820034 	movhi	r2,2048
 80050f8:	109be404 	addi	r2,r2,28560
 80050fc:	11000017 	ldw	r4,0(r2)
 8005100:	20800f17 	ldw	r2,60(r4)
 8005104:	10000126 	beq	r2,zero,800510c <exit+0x30>
 8005108:	103ee83a 	callr	r2
 800510c:	8009883a 	mov	r4,r16
 8005110:	80054b00 	call	80054b0 <_exit>

08005114 <memcmp>:
 8005114:	00c000c4 	movi	r3,3
 8005118:	1980032e 	bgeu	r3,r6,8005128 <memcmp+0x14>
 800511c:	2144b03a 	or	r2,r4,r5
 8005120:	10c4703a 	and	r2,r2,r3
 8005124:	10000f26 	beq	r2,zero,8005164 <memcmp+0x50>
 8005128:	31ffffc4 	addi	r7,r6,-1
 800512c:	3000061e 	bne	r6,zero,8005148 <memcmp+0x34>
 8005130:	00000a06 	br	800515c <memcmp+0x48>
 8005134:	39ffffc4 	addi	r7,r7,-1
 8005138:	00bfffc4 	movi	r2,-1
 800513c:	21000044 	addi	r4,r4,1
 8005140:	29400044 	addi	r5,r5,1
 8005144:	38800526 	beq	r7,r2,800515c <memcmp+0x48>
 8005148:	20c00003 	ldbu	r3,0(r4)
 800514c:	28800003 	ldbu	r2,0(r5)
 8005150:	18bff826 	beq	r3,r2,8005134 <memcmp+0x20>
 8005154:	1885c83a 	sub	r2,r3,r2
 8005158:	f800283a 	ret
 800515c:	0005883a 	mov	r2,zero
 8005160:	f800283a 	ret
 8005164:	180f883a 	mov	r7,r3
 8005168:	20c00017 	ldw	r3,0(r4)
 800516c:	28800017 	ldw	r2,0(r5)
 8005170:	18bfed1e 	bne	r3,r2,8005128 <memcmp+0x14>
 8005174:	31bfff04 	addi	r6,r6,-4
 8005178:	21000104 	addi	r4,r4,4
 800517c:	29400104 	addi	r5,r5,4
 8005180:	39bff936 	bltu	r7,r6,8005168 <memcmp+0x54>
 8005184:	003fe806 	br	8005128 <memcmp+0x14>

08005188 <__register_exitproc>:
 8005188:	defffa04 	addi	sp,sp,-24
 800518c:	00820034 	movhi	r2,2048
 8005190:	109be404 	addi	r2,r2,28560
 8005194:	dc000015 	stw	r16,0(sp)
 8005198:	14000017 	ldw	r16,0(r2)
 800519c:	dd000415 	stw	r20,16(sp)
 80051a0:	2829883a 	mov	r20,r5
 80051a4:	81405217 	ldw	r5,328(r16)
 80051a8:	dcc00315 	stw	r19,12(sp)
 80051ac:	dc800215 	stw	r18,8(sp)
 80051b0:	dc400115 	stw	r17,4(sp)
 80051b4:	dfc00515 	stw	ra,20(sp)
 80051b8:	2023883a 	mov	r17,r4
 80051bc:	3027883a 	mov	r19,r6
 80051c0:	3825883a 	mov	r18,r7
 80051c4:	28002526 	beq	r5,zero,800525c <__register_exitproc+0xd4>
 80051c8:	29000117 	ldw	r4,4(r5)
 80051cc:	008007c4 	movi	r2,31
 80051d0:	11002716 	blt	r2,r4,8005270 <__register_exitproc+0xe8>
 80051d4:	8800101e 	bne	r17,zero,8005218 <__register_exitproc+0x90>
 80051d8:	2105883a 	add	r2,r4,r4
 80051dc:	1085883a 	add	r2,r2,r2
 80051e0:	20c00044 	addi	r3,r4,1
 80051e4:	1145883a 	add	r2,r2,r5
 80051e8:	0009883a 	mov	r4,zero
 80051ec:	15000215 	stw	r20,8(r2)
 80051f0:	28c00115 	stw	r3,4(r5)
 80051f4:	2005883a 	mov	r2,r4
 80051f8:	dfc00517 	ldw	ra,20(sp)
 80051fc:	dd000417 	ldw	r20,16(sp)
 8005200:	dcc00317 	ldw	r19,12(sp)
 8005204:	dc800217 	ldw	r18,8(sp)
 8005208:	dc400117 	ldw	r17,4(sp)
 800520c:	dc000017 	ldw	r16,0(sp)
 8005210:	dec00604 	addi	sp,sp,24
 8005214:	f800283a 	ret
 8005218:	29802204 	addi	r6,r5,136
 800521c:	00800044 	movi	r2,1
 8005220:	110e983a 	sll	r7,r2,r4
 8005224:	30c04017 	ldw	r3,256(r6)
 8005228:	2105883a 	add	r2,r4,r4
 800522c:	1085883a 	add	r2,r2,r2
 8005230:	1185883a 	add	r2,r2,r6
 8005234:	19c6b03a 	or	r3,r3,r7
 8005238:	14802015 	stw	r18,128(r2)
 800523c:	14c00015 	stw	r19,0(r2)
 8005240:	00800084 	movi	r2,2
 8005244:	30c04015 	stw	r3,256(r6)
 8005248:	88bfe31e 	bne	r17,r2,80051d8 <__register_exitproc+0x50>
 800524c:	30804117 	ldw	r2,260(r6)
 8005250:	11c4b03a 	or	r2,r2,r7
 8005254:	30804115 	stw	r2,260(r6)
 8005258:	003fdf06 	br	80051d8 <__register_exitproc+0x50>
 800525c:	00820074 	movhi	r2,2049
 8005260:	10a2e204 	addi	r2,r2,-29816
 8005264:	100b883a 	mov	r5,r2
 8005268:	80805215 	stw	r2,328(r16)
 800526c:	003fd606 	br	80051c8 <__register_exitproc+0x40>
 8005270:	00800034 	movhi	r2,0
 8005274:	10800004 	addi	r2,r2,0
 8005278:	1000021e 	bne	r2,zero,8005284 <__register_exitproc+0xfc>
 800527c:	013fffc4 	movi	r4,-1
 8005280:	003fdc06 	br	80051f4 <__register_exitproc+0x6c>
 8005284:	01006404 	movi	r4,400
 8005288:	103ee83a 	callr	r2
 800528c:	1007883a 	mov	r3,r2
 8005290:	103ffa26 	beq	r2,zero,800527c <__register_exitproc+0xf4>
 8005294:	80805217 	ldw	r2,328(r16)
 8005298:	180b883a 	mov	r5,r3
 800529c:	18000115 	stw	zero,4(r3)
 80052a0:	18800015 	stw	r2,0(r3)
 80052a4:	80c05215 	stw	r3,328(r16)
 80052a8:	18006215 	stw	zero,392(r3)
 80052ac:	18006315 	stw	zero,396(r3)
 80052b0:	0009883a 	mov	r4,zero
 80052b4:	883fc826 	beq	r17,zero,80051d8 <__register_exitproc+0x50>
 80052b8:	003fd706 	br	8005218 <__register_exitproc+0x90>

080052bc <register_fini>:
 80052bc:	f800283a 	ret

080052c0 <__call_exitprocs>:
 80052c0:	00820034 	movhi	r2,2048
 80052c4:	109be404 	addi	r2,r2,28560
 80052c8:	10800017 	ldw	r2,0(r2)
 80052cc:	defff304 	addi	sp,sp,-52
 80052d0:	df000b15 	stw	fp,44(sp)
 80052d4:	d8800115 	stw	r2,4(sp)
 80052d8:	00800034 	movhi	r2,0
 80052dc:	10800004 	addi	r2,r2,0
 80052e0:	1005003a 	cmpeq	r2,r2,zero
 80052e4:	d8800215 	stw	r2,8(sp)
 80052e8:	d8800117 	ldw	r2,4(sp)
 80052ec:	dd400815 	stw	r21,32(sp)
 80052f0:	dd000715 	stw	r20,28(sp)
 80052f4:	10805204 	addi	r2,r2,328
 80052f8:	dfc00c15 	stw	ra,48(sp)
 80052fc:	ddc00a15 	stw	r23,40(sp)
 8005300:	dd800915 	stw	r22,36(sp)
 8005304:	dcc00615 	stw	r19,24(sp)
 8005308:	dc800515 	stw	r18,20(sp)
 800530c:	dc400415 	stw	r17,16(sp)
 8005310:	dc000315 	stw	r16,12(sp)
 8005314:	282b883a 	mov	r21,r5
 8005318:	2039883a 	mov	fp,r4
 800531c:	d8800015 	stw	r2,0(sp)
 8005320:	2829003a 	cmpeq	r20,r5,zero
 8005324:	d8800117 	ldw	r2,4(sp)
 8005328:	14405217 	ldw	r17,328(r2)
 800532c:	88001026 	beq	r17,zero,8005370 <__call_exitprocs+0xb0>
 8005330:	ddc00017 	ldw	r23,0(sp)
 8005334:	88800117 	ldw	r2,4(r17)
 8005338:	8c802204 	addi	r18,r17,136
 800533c:	143fffc4 	addi	r16,r2,-1
 8005340:	80000916 	blt	r16,zero,8005368 <__call_exitprocs+0xa8>
 8005344:	05bfffc4 	movi	r22,-1
 8005348:	a000151e 	bne	r20,zero,80053a0 <__call_exitprocs+0xe0>
 800534c:	8409883a 	add	r4,r16,r16
 8005350:	2105883a 	add	r2,r4,r4
 8005354:	1485883a 	add	r2,r2,r18
 8005358:	10c02017 	ldw	r3,128(r2)
 800535c:	a8c01126 	beq	r21,r3,80053a4 <__call_exitprocs+0xe4>
 8005360:	843fffc4 	addi	r16,r16,-1
 8005364:	85bff81e 	bne	r16,r22,8005348 <__call_exitprocs+0x88>
 8005368:	d8800217 	ldw	r2,8(sp)
 800536c:	10003126 	beq	r2,zero,8005434 <__call_exitprocs+0x174>
 8005370:	dfc00c17 	ldw	ra,48(sp)
 8005374:	df000b17 	ldw	fp,44(sp)
 8005378:	ddc00a17 	ldw	r23,40(sp)
 800537c:	dd800917 	ldw	r22,36(sp)
 8005380:	dd400817 	ldw	r21,32(sp)
 8005384:	dd000717 	ldw	r20,28(sp)
 8005388:	dcc00617 	ldw	r19,24(sp)
 800538c:	dc800517 	ldw	r18,20(sp)
 8005390:	dc400417 	ldw	r17,16(sp)
 8005394:	dc000317 	ldw	r16,12(sp)
 8005398:	dec00d04 	addi	sp,sp,52
 800539c:	f800283a 	ret
 80053a0:	8409883a 	add	r4,r16,r16
 80053a4:	88c00117 	ldw	r3,4(r17)
 80053a8:	2105883a 	add	r2,r4,r4
 80053ac:	1445883a 	add	r2,r2,r17
 80053b0:	18ffffc4 	addi	r3,r3,-1
 80053b4:	11800217 	ldw	r6,8(r2)
 80053b8:	1c001526 	beq	r3,r16,8005410 <__call_exitprocs+0x150>
 80053bc:	10000215 	stw	zero,8(r2)
 80053c0:	303fe726 	beq	r6,zero,8005360 <__call_exitprocs+0xa0>
 80053c4:	00c00044 	movi	r3,1
 80053c8:	1c06983a 	sll	r3,r3,r16
 80053cc:	90804017 	ldw	r2,256(r18)
 80053d0:	8cc00117 	ldw	r19,4(r17)
 80053d4:	1884703a 	and	r2,r3,r2
 80053d8:	10001426 	beq	r2,zero,800542c <__call_exitprocs+0x16c>
 80053dc:	90804117 	ldw	r2,260(r18)
 80053e0:	1884703a 	and	r2,r3,r2
 80053e4:	10000c1e 	bne	r2,zero,8005418 <__call_exitprocs+0x158>
 80053e8:	2105883a 	add	r2,r4,r4
 80053ec:	1485883a 	add	r2,r2,r18
 80053f0:	11400017 	ldw	r5,0(r2)
 80053f4:	e009883a 	mov	r4,fp
 80053f8:	303ee83a 	callr	r6
 80053fc:	88800117 	ldw	r2,4(r17)
 8005400:	98bfc81e 	bne	r19,r2,8005324 <__call_exitprocs+0x64>
 8005404:	b8800017 	ldw	r2,0(r23)
 8005408:	147fd526 	beq	r2,r17,8005360 <__call_exitprocs+0xa0>
 800540c:	003fc506 	br	8005324 <__call_exitprocs+0x64>
 8005410:	8c000115 	stw	r16,4(r17)
 8005414:	003fea06 	br	80053c0 <__call_exitprocs+0x100>
 8005418:	2105883a 	add	r2,r4,r4
 800541c:	1485883a 	add	r2,r2,r18
 8005420:	11000017 	ldw	r4,0(r2)
 8005424:	303ee83a 	callr	r6
 8005428:	003ff406 	br	80053fc <__call_exitprocs+0x13c>
 800542c:	303ee83a 	callr	r6
 8005430:	003ff206 	br	80053fc <__call_exitprocs+0x13c>
 8005434:	88800117 	ldw	r2,4(r17)
 8005438:	1000081e 	bne	r2,zero,800545c <__call_exitprocs+0x19c>
 800543c:	89000017 	ldw	r4,0(r17)
 8005440:	20000726 	beq	r4,zero,8005460 <__call_exitprocs+0x1a0>
 8005444:	b9000015 	stw	r4,0(r23)
 8005448:	8809883a 	mov	r4,r17
 800544c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x2000>
 8005450:	bc400017 	ldw	r17,0(r23)
 8005454:	883fb71e 	bne	r17,zero,8005334 <__call_exitprocs+0x74>
 8005458:	003fc506 	br	8005370 <__call_exitprocs+0xb0>
 800545c:	89000017 	ldw	r4,0(r17)
 8005460:	882f883a 	mov	r23,r17
 8005464:	2023883a 	mov	r17,r4
 8005468:	883fb21e 	bne	r17,zero,8005334 <__call_exitprocs+0x74>
 800546c:	003fc006 	br	8005370 <__call_exitprocs+0xb0>

08005470 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 8005470:	defffd04 	addi	sp,sp,-12
 8005474:	df000215 	stw	fp,8(sp)
 8005478:	df000204 	addi	fp,sp,8
 800547c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 8005480:	e0bfff17 	ldw	r2,-4(fp)
 8005484:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8005488:	e0bffe17 	ldw	r2,-8(fp)
 800548c:	1005003a 	cmpeq	r2,r2,zero
 8005490:	1000021e 	bne	r2,zero,800549c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 8005494:	002af070 	cmpltui	zero,zero,43969
 8005498:	00000106 	br	80054a0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 800549c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 80054a0:	e037883a 	mov	sp,fp
 80054a4:	df000017 	ldw	fp,0(sp)
 80054a8:	dec00104 	addi	sp,sp,4
 80054ac:	f800283a 	ret

080054b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80054b0:	defffd04 	addi	sp,sp,-12
 80054b4:	dfc00215 	stw	ra,8(sp)
 80054b8:	df000115 	stw	fp,4(sp)
 80054bc:	df000104 	addi	fp,sp,4
 80054c0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 80054c4:	e13fff17 	ldw	r4,-4(fp)
 80054c8:	80054700 	call	8005470 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80054cc:	003fff06 	br	80054cc <_exit+0x1c>
 80054d0:	080052bc 	xorhi	zero,at,330
