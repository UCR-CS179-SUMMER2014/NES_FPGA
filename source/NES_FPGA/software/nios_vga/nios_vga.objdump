
nios_vga.elf:     file format elf32-littlenios2
nios_vga.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000cda0 memsz 0x0000cda0 flags r-x
    LOAD off    0x0000ddc0 vaddr 0x0800cdc0 paddr 0x0800e890 align 2**12
         filesz 0x00001ad0 memsz 0x00001ad0 flags rw-
    LOAD off    0x00010360 vaddr 0x08010360 paddr 0x08010360 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c7a4  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000468  0800c958  0800c958  0000d958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ad0  0800cdc0  0800e890  0000ddc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  08010360  08010360  00010360  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000f890  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c58  00000000  00000000  0000f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000136d  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000225dc  00000000  00000000  0001187d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000778f  00000000  00000000  00033e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013018  00000000  00000000  0003b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000184c  00000000  00000000  0004e600  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002234  00000000  00000000  0004fe4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bd50  00000000  00000000  00052080  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0005ddd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  0005dde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006170b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006170e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00061713  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00061714  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00061718  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006171c  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00061720  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0006172b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00061736  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00061741  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000030  00000000  00000000  0006174c  2**0
                  CONTENTS, READONLY
 28 .jdi          000041c2  00000000  00000000  0006177c  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0004d1d3  00000000  00000000  0006593e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b4 l    d  .text	00000000 .text
0800c958 l    d  .rodata	00000000 .rodata
0800cdc0 l    d  .rwdata	00000000 .rwdata
08010360 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
080001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
08000324 l     F .text	00000058 __sprint_r
0800ca66 l     O .rodata	00000010 blanks.3452
0800ca56 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080023a0 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08003dc8 l     F .text	00000058 std
08003ed4 l     F .text	00000008 __fp_lock
08003edc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0800cdc0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800e85c l     O .rwdata	00000004 charset
0800ca9c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800cbe4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
080082fc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08009428 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
08009d64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08009dc4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08009ec8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08009fec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800a0cc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800a22c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800a45c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800e880 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800a714 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800d77c l     O .rwdata	00001060 jtag_uart_0
0800e7dc l     O .rwdata	00000048 video_character_buffer_with_dma_0
0800e824 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0800a8b4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800aaf4 l     F .text	00000228 altera_avalon_jtag_uart_irq
0800ad1c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800b8c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800bd64 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800beb4 l     F .text	000000f8 alt_file_locked
0800c138 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800c740 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0800c8f4 l     F .text	00000040 alt_sim_halt
08005bb8 g     F .text	00000094 _mprec_log10
08005ca4 g     F .text	00000088 __any_on
080074d0 g     F .text	00000070 _isatty_r
0800cbbc g     O .rodata	00000028 __mprec_tinytens
0800a28c g     F .text	0000006c alt_main
080103bc g     O .bss	00000100 alt_irq
08007540 g     F .text	00000078 _lseek_r
0800e890 g       *ABS*	00000000 __flash_rwdata_start
08008e1c g     F .text	00000088 __eqdf2
0801064c g       *ABS*	00000000 __alt_heap_start
080002ac g     F .text	00000044 printf
08006f14 g     F .text	00000068 __sseek
08003e30 g     F .text	000000a4 __sinit
0800b52c g     F .text	00000114 alt_up_char_buffer_string
08004b3c g     F .text	00000084 _setlocale_r
08003f30 g     F .text	0000009c __sfmoreglue
0800a318 g     F .text	00000020 __malloc_unlock
0800b45c g     F .text	000000d0 alt_up_char_buffer_draw
08005634 g     F .text	000000e0 memmove
08003f20 g     F .text	00000010 _cleanup
08005d2c g     F .text	000000bc _Balloc
08008f2c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800745c g     F .text	00000074 _fstat_r
08010378 g     O .bss	00000004 errno
08010380 g     O .bss	00000004 alt_argv
08016850 g       *ABS*	00000000 _gp
0800d5fc g     O .rwdata	00000180 alt_fd_list
0800b9e8 g     F .text	00000094 alt_find_dev
08005594 g     F .text	000000a0 memcpy
0800b640 g     F .text	0000005c alt_up_char_buffer_clear
08003f14 g     F .text	0000000c _cleanup_r
080090c4 g     F .text	000000f8 __floatsidf
0800be3c g     F .text	00000078 alt_io_redirect
0800903c g     F .text	00000088 __ltdf2
0800c958 g       *ABS*	00000000 __DTOR_END__
0800c33c g     F .text	00000020 altera_nios2_irq_init
08005b08 g     F .text	000000b0 __ratio
0800af34 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
080002f0 g     F .text	00000034 _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08009564 g     F .text	00000008 __udivsi3
08009f28 g     F .text	000000c4 isatty
0800cacc g     O .rodata	000000c8 __mprec_tens
08004b18 g     F .text	00000008 __locale_charset
0801036c g     O .bss	00000004 __malloc_top_pad
0800e858 g     O .rwdata	00000004 __mb_cur_max
08004b20 g     F .text	0000000c _localeconv_r
08006490 g     F .text	0000003c __i2b
080044fc g     F .text	0000049c __sfvwrite_r
08006e9c g     F .text	00000070 _sbrk_r
080075b8 g     F .text	00000078 _read_r
0800d1c0 g     O .rwdata	0000000c __lc_ctype
0800e878 g     O .rwdata	00000004 alt_max_fd
08009a64 g     F .text	00000138 __unpack_d
08007338 g     F .text	00000110 _fclose_r
08003d94 g     F .text	00000034 fflush
08010370 g     O .bss	00000004 __malloc_max_sbrked_mem
0800878c g     F .text	00000074 __adddf3
080059e8 g     F .text	00000120 __b2d
08007c9c g     F .text	00000660 __umoddi3
0800a138 g     F .text	000000f4 lseek
0800e854 g     O .rwdata	00000004 _global_impure_ptr
08006838 g     F .text	000005f4 _realloc_r
0801064c g       *ABS*	00000000 __bss_end
0800bc6c g     F .text	000000f8 alt_iic_isr_register
0800c230 g     F .text	0000010c alt_tick
08007630 g     F .text	0000066c __udivdi3
0800cb94 g     O .rodata	00000028 __mprec_bigtens
08006718 g     F .text	00000120 __s2b
08009294 g     F .text	00000194 __floatunsidf
08005908 g     F .text	00000060 __mcmp
08003efc g     F .text	00000018 __fp_lock_all
0800bc24 g     F .text	00000048 alt_ic_irq_enabled
0800c198 g     F .text	00000098 alt_alarm_stop
08010388 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000c8 alt_irq_handler
0800d5d4 g     O .rwdata	00000028 alt_dev_null
0800b7f0 g     F .text	0000001c alt_dcache_flush_all
080057d4 g     F .text	00000070 __hi0bits
080091bc g     F .text	000000d8 __fixdfsi
0800e890 g       *ABS*	00000000 __ram_rwdata_end
0800e870 g     O .rwdata	00000008 alt_dev_list
0800a5f0 g     F .text	00000124 write
0800cdc0 g       *ABS*	00000000 __ram_rodata_end
08009df0 g     F .text	000000d8 fstat
080065f8 g     F .text	00000120 __pow5mult
08010360 g     O .bss	00000004 __nlocale_changed
0800956c g     F .text	00000008 __umodsi3
0801064c g       *ABS*	00000000 end
0800b398 g     F .text	00000084 alt_up_char_buffer_init
0800aa34 g     F .text	000000c0 altera_avalon_jtag_uart_init
0800c954 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
080096d0 g     F .text	00000080 __clzsi2
0800b158 g     F .text	00000240 altera_avalon_jtag_uart_write
08003e20 g     F .text	00000004 __sfp_lock_acquire
080054b0 g     F .text	000000e4 memchr
0800037c g     F .text	00001ec4 ___vfprintf_internal_r
080041e8 g     F .text	00000314 _free_r
0800c744 g     F .text	000001b0 __call_exitprocs
08010364 g     O .bss	00000004 __mlocale_changed
0800e864 g     O .rwdata	00000004 __malloc_sbrk_base
080001b4 g     F .text	0000003c _start
0801038c g     O .bss	00000004 _alt_tick_rate
080060f0 g     F .text	0000014c __lshift
08010390 g     O .bss	00000004 _alt_nticks
0800a338 g     F .text	00000124 read
0800a7a8 g     F .text	0000010c alt_sys_init
0800c60c g     F .text	00000134 __register_exitproc
0800623c g     F .text	00000254 __multiply
0800adcc g     F .text	00000074 altera_avalon_jtag_uart_close
08009574 g     F .text	00000038 __mulsi3
0800cdc0 g       *ABS*	00000000 __ram_rwdata_start
0800c958 g       *ABS*	00000000 __ram_rodata_start
08010394 g     O .bss	00000028 __malloc_current_mallinfo
08005de8 g     F .text	0000017c __d2b
0800a8ec g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0800c47c g     F .text	000000d0 alt_get_fd
08009b9c g     F .text	000000c8 __fpcmp_parts_d
080072c8 g     F .text	00000070 _close_r
0800c598 g     F .text	00000074 memcmp
0800a99c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0801064c g       *ABS*	00000000 __alt_stack_base
0800a9e4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
08002264 g     F .text	0000013c __swsetup_r
08008bc4 g     F .text	00000258 __divdf3
08003fcc g     F .text	000000f0 __sfp
08005c4c g     F .text	00000058 __copybits
0800d1cc g     O .rwdata	00000408 __malloc_av_
08003e2c g     F .text	00000004 __sinit_lock_release
08008800 g     F .text	000003c4 __muldf3
08006ff8 g     F .text	00000060 __sread
0800c35c g     F .text	00000120 alt_find_file
0800b80c g     F .text	000000b4 alt_dev_llist_insert
0800a2f8 g     F .text	00000020 __malloc_lock
0800a534 g     F .text	000000bc sbrk
08003b98 g     F .text	000001fc _fflush_r
08007200 g     F .text	000000c8 _calloc_r
08010360 g       *ABS*	00000000 __bss_start
08005714 g     F .text	00000098 memset
080001f0 g     F .text	000000bc main
08010384 g     O .bss	00000004 alt_envp
08010374 g     O .bss	00000004 __malloc_max_total_mem
0800b41c g     F .text	00000040 alt_up_char_buffer_open_dev
0800a944 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
08006f0c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08007448 g     F .text	00000014 fclose
080104bc g     O .bss	00000190 _atexit0
080025e4 g     F .text	000015b4 _dtoa_r
08004d70 g     F .text	00000740 _malloc_r
0800e87c g     O .rwdata	00000004 alt_errno
08004a60 g     F .text	000000b8 _fwalk
080094a4 g     F .text	00000060 __divsi3
0800cbf0 g     O .rodata	00000014 __thenan_df
080040bc g     F .text	0000012c _malloc_trim_r
0800c958 g       *ABS*	00000000 __CTOR_END__
08007058 g     F .text	000000bc strcmp
0800c958 g       *ABS*	00000000 __flash_rodata_start
0800c958 g       *ABS*	00000000 __DTOR_LIST__
08008ea4 g     F .text	00000088 __nedf2
0800a774 g     F .text	00000034 alt_irq_init
0800a4bc g     F .text	00000078 alt_release_fd
0800cc04 g     O .rodata	00000100 __clz_tab
08010368 g     O .bss	00000004 _PathLocale
0800c54c g     F .text	00000014 atexit
08007188 g     F .text	00000078 _write_r
08004bc0 g     F .text	0000001c setlocale
0800e850 g     O .rwdata	00000004 _impure_ptr
0801037c g     O .bss	00000004 alt_argc
0800b984 g     F .text	00000064 _do_dtors
08000000 g       *ABS*	00000000 __alt_mem_sdram_0
08000020 g       .exceptions	00000000 alt_irq_entry
08005968 g     F .text	00000080 __ulp
08006e2c g     F .text	00000040 __isinfd
08003ee4 g     F .text	00000018 __fp_unlock_all
0800e868 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004b2c g     F .text	00000010 localeconv
0800ba98 g     F .text	00000050 alt_ic_isr_register
0800e890 g       *ABS*	00000000 _edata
0801064c g       *ABS*	00000000 _end
080001b4 g       *ABS*	00000000 __ram_exceptions_end
0800ae40 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0800bb84 g     F .text	000000a0 alt_ic_irq_disable
08006f7c g     F .text	0000007c __swrite
0800e860 g     O .rwdata	00000004 __malloc_trim_threshold
0800c560 g     F .text	00000038 exit
08004998 g     F .text	000000c8 _fwalk_reent
08005f64 g     F .text	0000018c __mdiff
08009504 g     F .text	00000060 __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08003e24 g     F .text	00000004 __sfp_lock_release
0800c934 g     F .text	00000020 _exit
08006e6c g     F .text	00000030 __isnand
0800b69c g     F .text	00000154 alt_alarm_start
080095ac g     F .text	00000124 __muldi3
08004bdc g     F .text	00000194 __smakebuf_r
08007114 g     F .text	00000074 strlen
0800bfac g     F .text	0000018c open
08008fb4 g     F .text	00000088 __gedf2
0800ba7c g     F .text	0000001c alt_icache_flush_all
0800e884 g     O .rwdata	00000004 alt_priority_mask
0800bae8 g     F .text	0000009c alt_ic_irq_enable
08002240 g     F .text	00000024 __vfprintf_internal
0800870c g     F .text	00000080 __subdf3
08005844 g     F .text	000000c4 __lo0bits
0800e888 g     O .rwdata	00000008 alt_alarm_list
0800b920 g     F .text	00000064 _do_ctors
08009c64 g     F .text	00000100 close
0800a04c g     F .text	00000080 alt_load
08009750 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
08003e28 g     F .text	00000004 __sinit_lock_acquire
080064cc g     F .text	0000012c __multadd
080057ac g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406d14 	ori	at,at,436
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80000fc:	0005313a 	rdctl	r2,ipending
 8000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000110:	00800044 	movi	r2,1
 8000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8000118:	e0ffff17 	ldw	r3,-4(fp)
 800011c:	e0bffe17 	ldw	r2,-8(fp)
 8000120:	1884703a 	and	r2,r3,r2
 8000124:	1005003a 	cmpeq	r2,r2,zero
 8000128:	1000161e 	bne	r2,zero,8000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	e0bffd17 	ldw	r2,-12(fp)
 8000130:	00c20074 	movhi	r3,2049
 8000134:	18c0ef04 	addi	r3,r3,956
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	11400017 	ldw	r5,0(r2)
 8000144:	e0bffd17 	ldw	r2,-12(fp)
 8000148:	00c20074 	movhi	r3,2049
 800014c:	18c0ef04 	addi	r3,r3,956
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	10c5883a 	add	r2,r2,r3
 8000158:	10800104 	addi	r2,r2,4
 800015c:	11000017 	ldw	r4,0(r2)
 8000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000164:	0005313a 	rdctl	r2,ipending
 8000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	1004c03a 	cmpne	r2,r2,zero
 800017c:	103fe31e 	bne	r2,zero,800010c <alt_irq_handler+0x20>
 8000180:	00000706 	br	80001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000184:	e0bffe17 	ldw	r2,-8(fp)
 8000188:	1085883a 	add	r2,r2,r2
 800018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8000190:	e0bffd17 	ldw	r2,-12(fp)
 8000194:	10800044 	addi	r2,r2,1
 8000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800019c:	003fde06 	br	8000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a0:	e037883a 	mov	sp,fp
 80001a4:	dfc00117 	ldw	ra,4(sp)
 80001a8:	df000017 	ldw	fp,0(sp)
 80001ac:	dec00204 	addi	sp,sp,8
 80001b0:	f800283a 	ret

Disassembly of section .text:

080001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001b4:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 80001bc:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c0:	d69a1414 	ori	gp,gp,26704
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001c4:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001c8:	1080d814 	ori	r2,r2,864

    movhi r3, %hi(__bss_end)
 80001cc:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d0:	18c19314 	ori	r3,r3,1612

    beq r2, r3, 1f
 80001d4:	10c00326 	beq	r2,r3,80001e4 <_start+0x30>

0:
    stw zero, (r2)
 80001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e0:	10fffd36 	bltu	r2,r3,80001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001e4:	800a04c0 	call	800a04c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001e8:	800a28c0 	call	800a28c <alt_main>

080001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001ec:	003fff06 	br	80001ec <alt_after_alt_main>

080001f0 <main>:
#include <altera_up_avalon_video_character_buffer_with_dma_regs.h>
#include <stdio.h>


int main()
{
 80001f0:	defffd04 	addi	sp,sp,-12
 80001f4:	dfc00215 	stw	ra,8(sp)
 80001f8:	df000115 	stw	fp,4(sp)
 80001fc:	df000104 	addi	fp,sp,4
	alt_up_char_buffer_dev* buffer;
	alt_up_char_buffer_init(buffer);
 8000200:	e13fff17 	ldw	r4,-4(fp)
 8000204:	800b3980 	call	800b398 <alt_up_char_buffer_init>

	buffer = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma_0");
 8000208:	01020074 	movhi	r4,2049
 800020c:	21325604 	addi	r4,r4,-13992
 8000210:	800b41c0 	call	800b41c <alt_up_char_buffer_open_dev>
 8000214:	e0bfff15 	stw	r2,-4(fp)
	if(!buffer)
 8000218:	e0bfff17 	ldw	r2,-4(fp)
 800021c:	1004c03a 	cmpne	r2,r2,zero
 8000220:	1000041e 	bne	r2,zero,8000234 <main+0x44>
		printf("Failed to load!");
 8000224:	01020074 	movhi	r4,2049
 8000228:	21326004 	addi	r4,r4,-13952
 800022c:	80002ac0 	call	80002ac <printf>
 8000230:	00000306 	br	8000240 <main+0x50>
	else
		printf("Successfully loaded!");
 8000234:	01020074 	movhi	r4,2049
 8000238:	21326404 	addi	r4,r4,-13936
 800023c:	80002ac0 	call	80002ac <printf>

	alt_up_char_buffer_clear(buffer);
 8000240:	e13fff17 	ldw	r4,-4(fp)
 8000244:	800b6400 	call	800b640 <alt_up_char_buffer_clear>

	while(1)
	{
		alt_up_char_buffer_string(buffer, "UCR CS179J - NES FPGA Emulator!", 0,0);
 8000248:	e13fff17 	ldw	r4,-4(fp)
 800024c:	01420074 	movhi	r5,2049
 8000250:	29726a04 	addi	r5,r5,-13912
 8000254:	000d883a 	mov	r6,zero
 8000258:	000f883a 	mov	r7,zero
 800025c:	800b52c0 	call	800b52c <alt_up_char_buffer_string>
		alt_up_char_buffer_string(buffer, "Select Game:", 20,20);
 8000260:	e13fff17 	ldw	r4,-4(fp)
 8000264:	01420074 	movhi	r5,2049
 8000268:	29727204 	addi	r5,r5,-13880
 800026c:	01800504 	movi	r6,20
 8000270:	01c00504 	movi	r7,20
 8000274:	800b52c0 	call	800b52c <alt_up_char_buffer_string>
		alt_up_char_buffer_string(buffer, "1. Mario Bros.", 20,21);
 8000278:	e13fff17 	ldw	r4,-4(fp)
 800027c:	01420074 	movhi	r5,2049
 8000280:	29727604 	addi	r5,r5,-13864
 8000284:	01800504 	movi	r6,20
 8000288:	01c00544 	movi	r7,21
 800028c:	800b52c0 	call	800b52c <alt_up_char_buffer_string>
		alt_up_char_buffer_string(buffer, "2. Donkey Kong", 20,22);
 8000290:	e13fff17 	ldw	r4,-4(fp)
 8000294:	01420074 	movhi	r5,2049
 8000298:	29727a04 	addi	r5,r5,-13848
 800029c:	01800504 	movi	r6,20
 80002a0:	01c00584 	movi	r7,22
 80002a4:	800b52c0 	call	800b52c <alt_up_char_buffer_string>
	}
 80002a8:	003fe706 	br	8000248 <main+0x58>

080002ac <printf>:
 80002ac:	defffb04 	addi	sp,sp,-20
 80002b0:	dfc00115 	stw	ra,4(sp)
 80002b4:	d9400215 	stw	r5,8(sp)
 80002b8:	d9800315 	stw	r6,12(sp)
 80002bc:	d9c00415 	stw	r7,16(sp)
 80002c0:	00820074 	movhi	r2,2049
 80002c4:	10ba1404 	addi	r2,r2,-6064
 80002c8:	10c00017 	ldw	r3,0(r2)
 80002cc:	200b883a 	mov	r5,r4
 80002d0:	d8800204 	addi	r2,sp,8
 80002d4:	19000217 	ldw	r4,8(r3)
 80002d8:	100d883a 	mov	r6,r2
 80002dc:	d8800015 	stw	r2,0(sp)
 80002e0:	80022400 	call	8002240 <__vfprintf_internal>
 80002e4:	dfc00117 	ldw	ra,4(sp)
 80002e8:	dec00504 	addi	sp,sp,20
 80002ec:	f800283a 	ret

080002f0 <_printf_r>:
 80002f0:	defffc04 	addi	sp,sp,-16
 80002f4:	dfc00115 	stw	ra,4(sp)
 80002f8:	d9800215 	stw	r6,8(sp)
 80002fc:	d9c00315 	stw	r7,12(sp)
 8000300:	280d883a 	mov	r6,r5
 8000304:	21400217 	ldw	r5,8(r4)
 8000308:	d8c00204 	addi	r3,sp,8
 800030c:	180f883a 	mov	r7,r3
 8000310:	d8c00015 	stw	r3,0(sp)
 8000314:	800037c0 	call	800037c <___vfprintf_internal_r>
 8000318:	dfc00117 	ldw	ra,4(sp)
 800031c:	dec00404 	addi	sp,sp,16
 8000320:	f800283a 	ret

08000324 <__sprint_r>:
 8000324:	30800217 	ldw	r2,8(r6)
 8000328:	defffe04 	addi	sp,sp,-8
 800032c:	dc000015 	stw	r16,0(sp)
 8000330:	dfc00115 	stw	ra,4(sp)
 8000334:	3021883a 	mov	r16,r6
 8000338:	0007883a 	mov	r3,zero
 800033c:	1000061e 	bne	r2,zero,8000358 <__sprint_r+0x34>
 8000340:	1805883a 	mov	r2,r3
 8000344:	30000115 	stw	zero,4(r6)
 8000348:	dfc00117 	ldw	ra,4(sp)
 800034c:	dc000017 	ldw	r16,0(sp)
 8000350:	dec00204 	addi	sp,sp,8
 8000354:	f800283a 	ret
 8000358:	80044fc0 	call	80044fc <__sfvwrite_r>
 800035c:	1007883a 	mov	r3,r2
 8000360:	1805883a 	mov	r2,r3
 8000364:	80000115 	stw	zero,4(r16)
 8000368:	80000215 	stw	zero,8(r16)
 800036c:	dfc00117 	ldw	ra,4(sp)
 8000370:	dc000017 	ldw	r16,0(sp)
 8000374:	dec00204 	addi	sp,sp,8
 8000378:	f800283a 	ret

0800037c <___vfprintf_internal_r>:
 800037c:	defea404 	addi	sp,sp,-1392
 8000380:	dd815815 	stw	r22,1376(sp)
 8000384:	dc015215 	stw	r16,1352(sp)
 8000388:	d9c15115 	stw	r7,1348(sp)
 800038c:	dfc15b15 	stw	ra,1388(sp)
 8000390:	df015a15 	stw	fp,1384(sp)
 8000394:	ddc15915 	stw	r23,1380(sp)
 8000398:	dd415715 	stw	r21,1372(sp)
 800039c:	dd015615 	stw	r20,1368(sp)
 80003a0:	dcc15515 	stw	r19,1364(sp)
 80003a4:	dc815415 	stw	r18,1360(sp)
 80003a8:	dc415315 	stw	r17,1356(sp)
 80003ac:	282d883a 	mov	r22,r5
 80003b0:	3021883a 	mov	r16,r6
 80003b4:	d9014f15 	stw	r4,1340(sp)
 80003b8:	8004b200 	call	8004b20 <_localeconv_r>
 80003bc:	10800017 	ldw	r2,0(r2)
 80003c0:	d9c15117 	ldw	r7,1348(sp)
 80003c4:	d8814915 	stw	r2,1316(sp)
 80003c8:	d8814f17 	ldw	r2,1340(sp)
 80003cc:	10000226 	beq	r2,zero,80003d8 <___vfprintf_internal_r+0x5c>
 80003d0:	10800e17 	ldw	r2,56(r2)
 80003d4:	10020d26 	beq	r2,zero,8000c0c <___vfprintf_internal_r+0x890>
 80003d8:	b080030b 	ldhu	r2,12(r22)
 80003dc:	1080020c 	andi	r2,r2,8
 80003e0:	10020e26 	beq	r2,zero,8000c1c <___vfprintf_internal_r+0x8a0>
 80003e4:	b0800417 	ldw	r2,16(r22)
 80003e8:	10020c26 	beq	r2,zero,8000c1c <___vfprintf_internal_r+0x8a0>
 80003ec:	b200030b 	ldhu	r8,12(r22)
 80003f0:	00800284 	movi	r2,10
 80003f4:	40c0068c 	andi	r3,r8,26
 80003f8:	18802f1e 	bne	r3,r2,80004b8 <___vfprintf_internal_r+0x13c>
 80003fc:	b080038f 	ldh	r2,14(r22)
 8000400:	10002d16 	blt	r2,zero,80004b8 <___vfprintf_internal_r+0x13c>
 8000404:	b240038b 	ldhu	r9,14(r22)
 8000408:	b2800717 	ldw	r10,28(r22)
 800040c:	b2c00917 	ldw	r11,36(r22)
 8000410:	d9014f17 	ldw	r4,1340(sp)
 8000414:	dc402904 	addi	r17,sp,164
 8000418:	d8804004 	addi	r2,sp,256
 800041c:	00c10004 	movi	r3,1024
 8000420:	423fff4c 	andi	r8,r8,65533
 8000424:	800d883a 	mov	r6,r16
 8000428:	880b883a 	mov	r5,r17
 800042c:	da002c0d 	sth	r8,176(sp)
 8000430:	da402c8d 	sth	r9,178(sp)
 8000434:	da803015 	stw	r10,192(sp)
 8000438:	dac03215 	stw	r11,200(sp)
 800043c:	d8802d15 	stw	r2,180(sp)
 8000440:	d8c02e15 	stw	r3,184(sp)
 8000444:	d8802915 	stw	r2,164(sp)
 8000448:	d8c02b15 	stw	r3,172(sp)
 800044c:	d8002f15 	stw	zero,188(sp)
 8000450:	800037c0 	call	800037c <___vfprintf_internal_r>
 8000454:	d8814b15 	stw	r2,1324(sp)
 8000458:	10000416 	blt	r2,zero,800046c <___vfprintf_internal_r+0xf0>
 800045c:	d9014f17 	ldw	r4,1340(sp)
 8000460:	880b883a 	mov	r5,r17
 8000464:	8003b980 	call	8003b98 <_fflush_r>
 8000468:	1002321e 	bne	r2,zero,8000d34 <___vfprintf_internal_r+0x9b8>
 800046c:	d8802c0b 	ldhu	r2,176(sp)
 8000470:	1080100c 	andi	r2,r2,64
 8000474:	10000326 	beq	r2,zero,8000484 <___vfprintf_internal_r+0x108>
 8000478:	b080030b 	ldhu	r2,12(r22)
 800047c:	10801014 	ori	r2,r2,64
 8000480:	b080030d 	sth	r2,12(r22)
 8000484:	d8814b17 	ldw	r2,1324(sp)
 8000488:	dfc15b17 	ldw	ra,1388(sp)
 800048c:	df015a17 	ldw	fp,1384(sp)
 8000490:	ddc15917 	ldw	r23,1380(sp)
 8000494:	dd815817 	ldw	r22,1376(sp)
 8000498:	dd415717 	ldw	r21,1372(sp)
 800049c:	dd015617 	ldw	r20,1368(sp)
 80004a0:	dcc15517 	ldw	r19,1364(sp)
 80004a4:	dc815417 	ldw	r18,1360(sp)
 80004a8:	dc415317 	ldw	r17,1356(sp)
 80004ac:	dc015217 	ldw	r16,1352(sp)
 80004b0:	dec15c04 	addi	sp,sp,1392
 80004b4:	f800283a 	ret
 80004b8:	0005883a 	mov	r2,zero
 80004bc:	0007883a 	mov	r3,zero
 80004c0:	dd401904 	addi	r21,sp,100
 80004c4:	d8814215 	stw	r2,1288(sp)
 80004c8:	802f883a 	mov	r23,r16
 80004cc:	d8c14315 	stw	r3,1292(sp)
 80004d0:	d8014b15 	stw	zero,1324(sp)
 80004d4:	d8014815 	stw	zero,1312(sp)
 80004d8:	d8014415 	stw	zero,1296(sp)
 80004dc:	d8014715 	stw	zero,1308(sp)
 80004e0:	dd400c15 	stw	r21,48(sp)
 80004e4:	d8000e15 	stw	zero,56(sp)
 80004e8:	d8000d15 	stw	zero,52(sp)
 80004ec:	b8800007 	ldb	r2,0(r23)
 80004f0:	10001926 	beq	r2,zero,8000558 <___vfprintf_internal_r+0x1dc>
 80004f4:	00c00944 	movi	r3,37
 80004f8:	10c01726 	beq	r2,r3,8000558 <___vfprintf_internal_r+0x1dc>
 80004fc:	b821883a 	mov	r16,r23
 8000500:	00000106 	br	8000508 <___vfprintf_internal_r+0x18c>
 8000504:	10c00326 	beq	r2,r3,8000514 <___vfprintf_internal_r+0x198>
 8000508:	84000044 	addi	r16,r16,1
 800050c:	80800007 	ldb	r2,0(r16)
 8000510:	103ffc1e 	bne	r2,zero,8000504 <___vfprintf_internal_r+0x188>
 8000514:	85e7c83a 	sub	r19,r16,r23
 8000518:	98000e26 	beq	r19,zero,8000554 <___vfprintf_internal_r+0x1d8>
 800051c:	dc800e17 	ldw	r18,56(sp)
 8000520:	dc400d17 	ldw	r17,52(sp)
 8000524:	008001c4 	movi	r2,7
 8000528:	94e5883a 	add	r18,r18,r19
 800052c:	8c400044 	addi	r17,r17,1
 8000530:	adc00015 	stw	r23,0(r21)
 8000534:	dc800e15 	stw	r18,56(sp)
 8000538:	acc00115 	stw	r19,4(r21)
 800053c:	dc400d15 	stw	r17,52(sp)
 8000540:	14428b16 	blt	r2,r17,8000f70 <___vfprintf_internal_r+0xbf4>
 8000544:	ad400204 	addi	r21,r21,8
 8000548:	d9014b17 	ldw	r4,1324(sp)
 800054c:	24c9883a 	add	r4,r4,r19
 8000550:	d9014b15 	stw	r4,1324(sp)
 8000554:	802f883a 	mov	r23,r16
 8000558:	b8800007 	ldb	r2,0(r23)
 800055c:	10013c26 	beq	r2,zero,8000a50 <___vfprintf_internal_r+0x6d4>
 8000560:	bdc00044 	addi	r23,r23,1
 8000564:	d8000405 	stb	zero,16(sp)
 8000568:	b8c00007 	ldb	r3,0(r23)
 800056c:	04ffffc4 	movi	r19,-1
 8000570:	d8014c15 	stw	zero,1328(sp)
 8000574:	d8014a15 	stw	zero,1320(sp)
 8000578:	d8c14d15 	stw	r3,1332(sp)
 800057c:	bdc00044 	addi	r23,r23,1
 8000580:	d9414d17 	ldw	r5,1332(sp)
 8000584:	00801604 	movi	r2,88
 8000588:	28fff804 	addi	r3,r5,-32
 800058c:	10c06036 	bltu	r2,r3,8000710 <___vfprintf_internal_r+0x394>
 8000590:	18c5883a 	add	r2,r3,r3
 8000594:	1085883a 	add	r2,r2,r2
 8000598:	00c20034 	movhi	r3,2048
 800059c:	18c16b04 	addi	r3,r3,1452
 80005a0:	10c5883a 	add	r2,r2,r3
 80005a4:	11000017 	ldw	r4,0(r2)
 80005a8:	2000683a 	jmp	r4
 80005ac:	08001520 	cmpeqi	zero,at,84
 80005b0:	08000710 	cmplti	zero,at,28
 80005b4:	08000710 	cmplti	zero,at,28
 80005b8:	0800150c 	andi	zero,at,84
 80005bc:	08000710 	cmplti	zero,at,28
 80005c0:	08000710 	cmplti	zero,at,28
 80005c4:	08000710 	cmplti	zero,at,28
 80005c8:	08000710 	cmplti	zero,at,28
 80005cc:	08000710 	cmplti	zero,at,28
 80005d0:	08000710 	cmplti	zero,at,28
 80005d4:	080012ec 	andhi	zero,at,75
 80005d8:	080014fc 	xorhi	zero,at,83
 80005dc:	08000710 	cmplti	zero,at,28
 80005e0:	08001304 	addi	zero,at,76
 80005e4:	080015a4 	muli	zero,at,86
 80005e8:	08000710 	cmplti	zero,at,28
 80005ec:	08001590 	cmplti	zero,at,86
 80005f0:	0800154c 	andi	zero,at,85
 80005f4:	0800154c 	andi	zero,at,85
 80005f8:	0800154c 	andi	zero,at,85
 80005fc:	0800154c 	andi	zero,at,85
 8000600:	0800154c 	andi	zero,at,85
 8000604:	0800154c 	andi	zero,at,85
 8000608:	0800154c 	andi	zero,at,85
 800060c:	0800154c 	andi	zero,at,85
 8000610:	0800154c 	andi	zero,at,85
 8000614:	08000710 	cmplti	zero,at,28
 8000618:	08000710 	cmplti	zero,at,28
 800061c:	08000710 	cmplti	zero,at,28
 8000620:	08000710 	cmplti	zero,at,28
 8000624:	08000710 	cmplti	zero,at,28
 8000628:	08000710 	cmplti	zero,at,28
 800062c:	08000710 	cmplti	zero,at,28
 8000630:	08000710 	cmplti	zero,at,28
 8000634:	08000710 	cmplti	zero,at,28
 8000638:	08000710 	cmplti	zero,at,28
 800063c:	08000d68 	cmpgeui	zero,at,53
 8000640:	080013d4 	ori	zero,at,79
 8000644:	08000710 	cmplti	zero,at,28
 8000648:	080013d4 	ori	zero,at,79
 800064c:	08000710 	cmplti	zero,at,28
 8000650:	08000710 	cmplti	zero,at,28
 8000654:	08000710 	cmplti	zero,at,28
 8000658:	08000710 	cmplti	zero,at,28
 800065c:	08001538 	rdprs	zero,at,84
 8000660:	08000710 	cmplti	zero,at,28
 8000664:	08000710 	cmplti	zero,at,28
 8000668:	08000e1c 	xori	zero,at,56
 800066c:	08000710 	cmplti	zero,at,28
 8000670:	08000710 	cmplti	zero,at,28
 8000674:	08000710 	cmplti	zero,at,28
 8000678:	08000710 	cmplti	zero,at,28
 800067c:	08000710 	cmplti	zero,at,28
 8000680:	08000e68 	cmpgeui	zero,at,57
 8000684:	08000710 	cmplti	zero,at,28
 8000688:	08000710 	cmplti	zero,at,28
 800068c:	08001488 	cmpgei	zero,at,82
 8000690:	08000710 	cmplti	zero,at,28
 8000694:	08000710 	cmplti	zero,at,28
 8000698:	08000710 	cmplti	zero,at,28
 800069c:	08000710 	cmplti	zero,at,28
 80006a0:	08000710 	cmplti	zero,at,28
 80006a4:	08000710 	cmplti	zero,at,28
 80006a8:	08000710 	cmplti	zero,at,28
 80006ac:	08000710 	cmplti	zero,at,28
 80006b0:	08000710 	cmplti	zero,at,28
 80006b4:	08000710 	cmplti	zero,at,28
 80006b8:	0800145c 	xori	zero,at,81
 80006bc:	08000d74 	orhi	zero,at,53
 80006c0:	080013d4 	ori	zero,at,79
 80006c4:	080013d4 	ori	zero,at,79
 80006c8:	080013d4 	ori	zero,at,79
 80006cc:	080013c0 	call	80013c <__alt_mem_onchip_memory2_0+0x7f013c>
 80006d0:	08000d74 	orhi	zero,at,53
 80006d4:	08000710 	cmplti	zero,at,28
 80006d8:	08000710 	cmplti	zero,at,28
 80006dc:	08001348 	cmpgei	zero,at,77
 80006e0:	08000710 	cmplti	zero,at,28
 80006e4:	08001318 	cmpnei	zero,at,76
 80006e8:	08000e28 	cmpgeui	zero,at,56
 80006ec:	08001378 	rdprs	zero,at,77
 80006f0:	08001364 	muli	zero,at,77
 80006f4:	08000710 	cmplti	zero,at,28
 80006f8:	0800160c 	andi	zero,at,88
 80006fc:	08000710 	cmplti	zero,at,28
 8000700:	08000e74 	orhi	zero,at,57
 8000704:	08000710 	cmplti	zero,at,28
 8000708:	08000710 	cmplti	zero,at,28
 800070c:	080014ec 	andhi	zero,at,83
 8000710:	d9014d17 	ldw	r4,1332(sp)
 8000714:	2000ce26 	beq	r4,zero,8000a50 <___vfprintf_internal_r+0x6d4>
 8000718:	01400044 	movi	r5,1
 800071c:	d9800f04 	addi	r6,sp,60
 8000720:	d9c14015 	stw	r7,1280(sp)
 8000724:	d9414515 	stw	r5,1300(sp)
 8000728:	d9814115 	stw	r6,1284(sp)
 800072c:	280f883a 	mov	r7,r5
 8000730:	d9000f05 	stb	r4,60(sp)
 8000734:	d8000405 	stb	zero,16(sp)
 8000738:	d8014615 	stw	zero,1304(sp)
 800073c:	d8c14c17 	ldw	r3,1328(sp)
 8000740:	1880008c 	andi	r2,r3,2
 8000744:	1005003a 	cmpeq	r2,r2,zero
 8000748:	d8815015 	stw	r2,1344(sp)
 800074c:	1000031e 	bne	r2,zero,800075c <___vfprintf_internal_r+0x3e0>
 8000750:	d9014517 	ldw	r4,1300(sp)
 8000754:	21000084 	addi	r4,r4,2
 8000758:	d9014515 	stw	r4,1300(sp)
 800075c:	d9414c17 	ldw	r5,1328(sp)
 8000760:	2940210c 	andi	r5,r5,132
 8000764:	d9414e15 	stw	r5,1336(sp)
 8000768:	28002d1e 	bne	r5,zero,8000820 <___vfprintf_internal_r+0x4a4>
 800076c:	d9814a17 	ldw	r6,1320(sp)
 8000770:	d8814517 	ldw	r2,1300(sp)
 8000774:	30a1c83a 	sub	r16,r6,r2
 8000778:	0400290e 	bge	zero,r16,8000820 <___vfprintf_internal_r+0x4a4>
 800077c:	00800404 	movi	r2,16
 8000780:	14045e0e 	bge	r2,r16,80018fc <___vfprintf_internal_r+0x1580>
 8000784:	dc800e17 	ldw	r18,56(sp)
 8000788:	dc400d17 	ldw	r17,52(sp)
 800078c:	1027883a 	mov	r19,r2
 8000790:	07020074 	movhi	fp,2049
 8000794:	e7329984 	addi	fp,fp,-13722
 8000798:	050001c4 	movi	r20,7
 800079c:	00000306 	br	80007ac <___vfprintf_internal_r+0x430>
 80007a0:	843ffc04 	addi	r16,r16,-16
 80007a4:	ad400204 	addi	r21,r21,8
 80007a8:	9c00130e 	bge	r19,r16,80007f8 <___vfprintf_internal_r+0x47c>
 80007ac:	94800404 	addi	r18,r18,16
 80007b0:	8c400044 	addi	r17,r17,1
 80007b4:	af000015 	stw	fp,0(r21)
 80007b8:	acc00115 	stw	r19,4(r21)
 80007bc:	dc800e15 	stw	r18,56(sp)
 80007c0:	dc400d15 	stw	r17,52(sp)
 80007c4:	a47ff60e 	bge	r20,r17,80007a0 <___vfprintf_internal_r+0x424>
 80007c8:	d9014f17 	ldw	r4,1340(sp)
 80007cc:	b00b883a 	mov	r5,r22
 80007d0:	d9800c04 	addi	r6,sp,48
 80007d4:	d9c15115 	stw	r7,1348(sp)
 80007d8:	80003240 	call	8000324 <__sprint_r>
 80007dc:	d9c15117 	ldw	r7,1348(sp)
 80007e0:	10009e1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 80007e4:	843ffc04 	addi	r16,r16,-16
 80007e8:	dc800e17 	ldw	r18,56(sp)
 80007ec:	dc400d17 	ldw	r17,52(sp)
 80007f0:	dd401904 	addi	r21,sp,100
 80007f4:	9c3fed16 	blt	r19,r16,80007ac <___vfprintf_internal_r+0x430>
 80007f8:	9425883a 	add	r18,r18,r16
 80007fc:	8c400044 	addi	r17,r17,1
 8000800:	008001c4 	movi	r2,7
 8000804:	af000015 	stw	fp,0(r21)
 8000808:	ac000115 	stw	r16,4(r21)
 800080c:	dc800e15 	stw	r18,56(sp)
 8000810:	dc400d15 	stw	r17,52(sp)
 8000814:	1441f516 	blt	r2,r17,8000fec <___vfprintf_internal_r+0xc70>
 8000818:	ad400204 	addi	r21,r21,8
 800081c:	00000206 	br	8000828 <___vfprintf_internal_r+0x4ac>
 8000820:	dc800e17 	ldw	r18,56(sp)
 8000824:	dc400d17 	ldw	r17,52(sp)
 8000828:	d8800407 	ldb	r2,16(sp)
 800082c:	10000b26 	beq	r2,zero,800085c <___vfprintf_internal_r+0x4e0>
 8000830:	00800044 	movi	r2,1
 8000834:	94800044 	addi	r18,r18,1
 8000838:	8c400044 	addi	r17,r17,1
 800083c:	a8800115 	stw	r2,4(r21)
 8000840:	d8c00404 	addi	r3,sp,16
 8000844:	008001c4 	movi	r2,7
 8000848:	a8c00015 	stw	r3,0(r21)
 800084c:	dc800e15 	stw	r18,56(sp)
 8000850:	dc400d15 	stw	r17,52(sp)
 8000854:	1441da16 	blt	r2,r17,8000fc0 <___vfprintf_internal_r+0xc44>
 8000858:	ad400204 	addi	r21,r21,8
 800085c:	d9015017 	ldw	r4,1344(sp)
 8000860:	20000b1e 	bne	r4,zero,8000890 <___vfprintf_internal_r+0x514>
 8000864:	d8800444 	addi	r2,sp,17
 8000868:	94800084 	addi	r18,r18,2
 800086c:	8c400044 	addi	r17,r17,1
 8000870:	a8800015 	stw	r2,0(r21)
 8000874:	00c00084 	movi	r3,2
 8000878:	008001c4 	movi	r2,7
 800087c:	a8c00115 	stw	r3,4(r21)
 8000880:	dc800e15 	stw	r18,56(sp)
 8000884:	dc400d15 	stw	r17,52(sp)
 8000888:	1441c216 	blt	r2,r17,8000f94 <___vfprintf_internal_r+0xc18>
 800088c:	ad400204 	addi	r21,r21,8
 8000890:	d9414e17 	ldw	r5,1336(sp)
 8000894:	00802004 	movi	r2,128
 8000898:	2880b126 	beq	r5,r2,8000b60 <___vfprintf_internal_r+0x7e4>
 800089c:	d8c14617 	ldw	r3,1304(sp)
 80008a0:	19e1c83a 	sub	r16,r3,r7
 80008a4:	0400260e 	bge	zero,r16,8000940 <___vfprintf_internal_r+0x5c4>
 80008a8:	00800404 	movi	r2,16
 80008ac:	1403cf0e 	bge	r2,r16,80017ec <___vfprintf_internal_r+0x1470>
 80008b0:	1027883a 	mov	r19,r2
 80008b4:	07020074 	movhi	fp,2049
 80008b8:	e7329584 	addi	fp,fp,-13738
 80008bc:	050001c4 	movi	r20,7
 80008c0:	00000306 	br	80008d0 <___vfprintf_internal_r+0x554>
 80008c4:	843ffc04 	addi	r16,r16,-16
 80008c8:	ad400204 	addi	r21,r21,8
 80008cc:	9c00130e 	bge	r19,r16,800091c <___vfprintf_internal_r+0x5a0>
 80008d0:	94800404 	addi	r18,r18,16
 80008d4:	8c400044 	addi	r17,r17,1
 80008d8:	af000015 	stw	fp,0(r21)
 80008dc:	acc00115 	stw	r19,4(r21)
 80008e0:	dc800e15 	stw	r18,56(sp)
 80008e4:	dc400d15 	stw	r17,52(sp)
 80008e8:	a47ff60e 	bge	r20,r17,80008c4 <___vfprintf_internal_r+0x548>
 80008ec:	d9014f17 	ldw	r4,1340(sp)
 80008f0:	b00b883a 	mov	r5,r22
 80008f4:	d9800c04 	addi	r6,sp,48
 80008f8:	d9c15115 	stw	r7,1348(sp)
 80008fc:	80003240 	call	8000324 <__sprint_r>
 8000900:	d9c15117 	ldw	r7,1348(sp)
 8000904:	1000551e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8000908:	843ffc04 	addi	r16,r16,-16
 800090c:	dc800e17 	ldw	r18,56(sp)
 8000910:	dc400d17 	ldw	r17,52(sp)
 8000914:	dd401904 	addi	r21,sp,100
 8000918:	9c3fed16 	blt	r19,r16,80008d0 <___vfprintf_internal_r+0x554>
 800091c:	9425883a 	add	r18,r18,r16
 8000920:	8c400044 	addi	r17,r17,1
 8000924:	008001c4 	movi	r2,7
 8000928:	af000015 	stw	fp,0(r21)
 800092c:	ac000115 	stw	r16,4(r21)
 8000930:	dc800e15 	stw	r18,56(sp)
 8000934:	dc400d15 	stw	r17,52(sp)
 8000938:	14418216 	blt	r2,r17,8000f44 <___vfprintf_internal_r+0xbc8>
 800093c:	ad400204 	addi	r21,r21,8
 8000940:	d9014c17 	ldw	r4,1328(sp)
 8000944:	2080400c 	andi	r2,r4,256
 8000948:	10004a1e 	bne	r2,zero,8000a74 <___vfprintf_internal_r+0x6f8>
 800094c:	d9414117 	ldw	r5,1284(sp)
 8000950:	91e5883a 	add	r18,r18,r7
 8000954:	8c400044 	addi	r17,r17,1
 8000958:	008001c4 	movi	r2,7
 800095c:	a9400015 	stw	r5,0(r21)
 8000960:	a9c00115 	stw	r7,4(r21)
 8000964:	dc800e15 	stw	r18,56(sp)
 8000968:	dc400d15 	stw	r17,52(sp)
 800096c:	14416716 	blt	r2,r17,8000f0c <___vfprintf_internal_r+0xb90>
 8000970:	a8c00204 	addi	r3,r21,8
 8000974:	d9814c17 	ldw	r6,1328(sp)
 8000978:	3080010c 	andi	r2,r6,4
 800097c:	10002826 	beq	r2,zero,8000a20 <___vfprintf_internal_r+0x6a4>
 8000980:	d8814a17 	ldw	r2,1320(sp)
 8000984:	d9014517 	ldw	r4,1300(sp)
 8000988:	1121c83a 	sub	r16,r2,r4
 800098c:	0400240e 	bge	zero,r16,8000a20 <___vfprintf_internal_r+0x6a4>
 8000990:	00800404 	movi	r2,16
 8000994:	1404550e 	bge	r2,r16,8001aec <___vfprintf_internal_r+0x1770>
 8000998:	dc400d17 	ldw	r17,52(sp)
 800099c:	1027883a 	mov	r19,r2
 80009a0:	07020074 	movhi	fp,2049
 80009a4:	e7329984 	addi	fp,fp,-13722
 80009a8:	050001c4 	movi	r20,7
 80009ac:	00000306 	br	80009bc <___vfprintf_internal_r+0x640>
 80009b0:	843ffc04 	addi	r16,r16,-16
 80009b4:	18c00204 	addi	r3,r3,8
 80009b8:	9c00110e 	bge	r19,r16,8000a00 <___vfprintf_internal_r+0x684>
 80009bc:	94800404 	addi	r18,r18,16
 80009c0:	8c400044 	addi	r17,r17,1
 80009c4:	1f000015 	stw	fp,0(r3)
 80009c8:	1cc00115 	stw	r19,4(r3)
 80009cc:	dc800e15 	stw	r18,56(sp)
 80009d0:	dc400d15 	stw	r17,52(sp)
 80009d4:	a47ff60e 	bge	r20,r17,80009b0 <___vfprintf_internal_r+0x634>
 80009d8:	d9014f17 	ldw	r4,1340(sp)
 80009dc:	b00b883a 	mov	r5,r22
 80009e0:	d9800c04 	addi	r6,sp,48
 80009e4:	80003240 	call	8000324 <__sprint_r>
 80009e8:	10001c1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 80009ec:	843ffc04 	addi	r16,r16,-16
 80009f0:	dc800e17 	ldw	r18,56(sp)
 80009f4:	dc400d17 	ldw	r17,52(sp)
 80009f8:	d8c01904 	addi	r3,sp,100
 80009fc:	9c3fef16 	blt	r19,r16,80009bc <___vfprintf_internal_r+0x640>
 8000a00:	9425883a 	add	r18,r18,r16
 8000a04:	8c400044 	addi	r17,r17,1
 8000a08:	008001c4 	movi	r2,7
 8000a0c:	1f000015 	stw	fp,0(r3)
 8000a10:	1c000115 	stw	r16,4(r3)
 8000a14:	dc800e15 	stw	r18,56(sp)
 8000a18:	dc400d15 	stw	r17,52(sp)
 8000a1c:	1440cb16 	blt	r2,r17,8000d4c <___vfprintf_internal_r+0x9d0>
 8000a20:	d8814a17 	ldw	r2,1320(sp)
 8000a24:	d9414517 	ldw	r5,1300(sp)
 8000a28:	1140010e 	bge	r2,r5,8000a30 <___vfprintf_internal_r+0x6b4>
 8000a2c:	2805883a 	mov	r2,r5
 8000a30:	d9814b17 	ldw	r6,1324(sp)
 8000a34:	308d883a 	add	r6,r6,r2
 8000a38:	d9814b15 	stw	r6,1324(sp)
 8000a3c:	90013b1e 	bne	r18,zero,8000f2c <___vfprintf_internal_r+0xbb0>
 8000a40:	d9c14017 	ldw	r7,1280(sp)
 8000a44:	dd401904 	addi	r21,sp,100
 8000a48:	d8000d15 	stw	zero,52(sp)
 8000a4c:	003ea706 	br	80004ec <___vfprintf_internal_r+0x170>
 8000a50:	d8800e17 	ldw	r2,56(sp)
 8000a54:	1005451e 	bne	r2,zero,8001f6c <___vfprintf_internal_r+0x1bf0>
 8000a58:	d8000d15 	stw	zero,52(sp)
 8000a5c:	b080030b 	ldhu	r2,12(r22)
 8000a60:	1080100c 	andi	r2,r2,64
 8000a64:	103e8726 	beq	r2,zero,8000484 <___vfprintf_internal_r+0x108>
 8000a68:	00bfffc4 	movi	r2,-1
 8000a6c:	d8814b15 	stw	r2,1324(sp)
 8000a70:	003e8406 	br	8000484 <___vfprintf_internal_r+0x108>
 8000a74:	d9814d17 	ldw	r6,1332(sp)
 8000a78:	00801944 	movi	r2,101
 8000a7c:	11806e16 	blt	r2,r6,8000c38 <___vfprintf_internal_r+0x8bc>
 8000a80:	d9414717 	ldw	r5,1308(sp)
 8000a84:	00c00044 	movi	r3,1
 8000a88:	1943490e 	bge	r3,r5,80017b0 <___vfprintf_internal_r+0x1434>
 8000a8c:	d8814117 	ldw	r2,1284(sp)
 8000a90:	94800044 	addi	r18,r18,1
 8000a94:	8c400044 	addi	r17,r17,1
 8000a98:	a8800015 	stw	r2,0(r21)
 8000a9c:	008001c4 	movi	r2,7
 8000aa0:	a8c00115 	stw	r3,4(r21)
 8000aa4:	dc800e15 	stw	r18,56(sp)
 8000aa8:	dc400d15 	stw	r17,52(sp)
 8000aac:	1441ca16 	blt	r2,r17,80011d8 <___vfprintf_internal_r+0xe5c>
 8000ab0:	a8c00204 	addi	r3,r21,8
 8000ab4:	d9014917 	ldw	r4,1316(sp)
 8000ab8:	00800044 	movi	r2,1
 8000abc:	94800044 	addi	r18,r18,1
 8000ac0:	8c400044 	addi	r17,r17,1
 8000ac4:	18800115 	stw	r2,4(r3)
 8000ac8:	008001c4 	movi	r2,7
 8000acc:	19000015 	stw	r4,0(r3)
 8000ad0:	dc800e15 	stw	r18,56(sp)
 8000ad4:	dc400d15 	stw	r17,52(sp)
 8000ad8:	1441b616 	blt	r2,r17,80011b4 <___vfprintf_internal_r+0xe38>
 8000adc:	1cc00204 	addi	r19,r3,8
 8000ae0:	d9014217 	ldw	r4,1288(sp)
 8000ae4:	d9414317 	ldw	r5,1292(sp)
 8000ae8:	000d883a 	mov	r6,zero
 8000aec:	000f883a 	mov	r7,zero
 8000af0:	8008ea40 	call	8008ea4 <__nedf2>
 8000af4:	10017426 	beq	r2,zero,80010c8 <___vfprintf_internal_r+0xd4c>
 8000af8:	d9414717 	ldw	r5,1308(sp)
 8000afc:	d9814117 	ldw	r6,1284(sp)
 8000b00:	8c400044 	addi	r17,r17,1
 8000b04:	2c85883a 	add	r2,r5,r18
 8000b08:	14bfffc4 	addi	r18,r2,-1
 8000b0c:	28bfffc4 	addi	r2,r5,-1
 8000b10:	30c00044 	addi	r3,r6,1
 8000b14:	98800115 	stw	r2,4(r19)
 8000b18:	008001c4 	movi	r2,7
 8000b1c:	98c00015 	stw	r3,0(r19)
 8000b20:	dc800e15 	stw	r18,56(sp)
 8000b24:	dc400d15 	stw	r17,52(sp)
 8000b28:	14418e16 	blt	r2,r17,8001164 <___vfprintf_internal_r+0xde8>
 8000b2c:	9cc00204 	addi	r19,r19,8
 8000b30:	d9414817 	ldw	r5,1312(sp)
 8000b34:	d8800804 	addi	r2,sp,32
 8000b38:	8c400044 	addi	r17,r17,1
 8000b3c:	9165883a 	add	r18,r18,r5
 8000b40:	98800015 	stw	r2,0(r19)
 8000b44:	008001c4 	movi	r2,7
 8000b48:	99400115 	stw	r5,4(r19)
 8000b4c:	dc800e15 	stw	r18,56(sp)
 8000b50:	dc400d15 	stw	r17,52(sp)
 8000b54:	1440ed16 	blt	r2,r17,8000f0c <___vfprintf_internal_r+0xb90>
 8000b58:	98c00204 	addi	r3,r19,8
 8000b5c:	003f8506 	br	8000974 <___vfprintf_internal_r+0x5f8>
 8000b60:	d9814a17 	ldw	r6,1320(sp)
 8000b64:	d8814517 	ldw	r2,1300(sp)
 8000b68:	30a1c83a 	sub	r16,r6,r2
 8000b6c:	043f4b0e 	bge	zero,r16,800089c <___vfprintf_internal_r+0x520>
 8000b70:	00800404 	movi	r2,16
 8000b74:	14043a0e 	bge	r2,r16,8001c60 <___vfprintf_internal_r+0x18e4>
 8000b78:	1027883a 	mov	r19,r2
 8000b7c:	07020074 	movhi	fp,2049
 8000b80:	e7329584 	addi	fp,fp,-13738
 8000b84:	050001c4 	movi	r20,7
 8000b88:	00000306 	br	8000b98 <___vfprintf_internal_r+0x81c>
 8000b8c:	843ffc04 	addi	r16,r16,-16
 8000b90:	ad400204 	addi	r21,r21,8
 8000b94:	9c00130e 	bge	r19,r16,8000be4 <___vfprintf_internal_r+0x868>
 8000b98:	94800404 	addi	r18,r18,16
 8000b9c:	8c400044 	addi	r17,r17,1
 8000ba0:	af000015 	stw	fp,0(r21)
 8000ba4:	acc00115 	stw	r19,4(r21)
 8000ba8:	dc800e15 	stw	r18,56(sp)
 8000bac:	dc400d15 	stw	r17,52(sp)
 8000bb0:	a47ff60e 	bge	r20,r17,8000b8c <___vfprintf_internal_r+0x810>
 8000bb4:	d9014f17 	ldw	r4,1340(sp)
 8000bb8:	b00b883a 	mov	r5,r22
 8000bbc:	d9800c04 	addi	r6,sp,48
 8000bc0:	d9c15115 	stw	r7,1348(sp)
 8000bc4:	80003240 	call	8000324 <__sprint_r>
 8000bc8:	d9c15117 	ldw	r7,1348(sp)
 8000bcc:	103fa31e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8000bd0:	843ffc04 	addi	r16,r16,-16
 8000bd4:	dc800e17 	ldw	r18,56(sp)
 8000bd8:	dc400d17 	ldw	r17,52(sp)
 8000bdc:	dd401904 	addi	r21,sp,100
 8000be0:	9c3fed16 	blt	r19,r16,8000b98 <___vfprintf_internal_r+0x81c>
 8000be4:	9425883a 	add	r18,r18,r16
 8000be8:	8c400044 	addi	r17,r17,1
 8000bec:	008001c4 	movi	r2,7
 8000bf0:	af000015 	stw	fp,0(r21)
 8000bf4:	ac000115 	stw	r16,4(r21)
 8000bf8:	dc800e15 	stw	r18,56(sp)
 8000bfc:	dc400d15 	stw	r17,52(sp)
 8000c00:	14416116 	blt	r2,r17,8001188 <___vfprintf_internal_r+0xe0c>
 8000c04:	ad400204 	addi	r21,r21,8
 8000c08:	003f2406 	br	800089c <___vfprintf_internal_r+0x520>
 8000c0c:	d9014f17 	ldw	r4,1340(sp)
 8000c10:	8003e300 	call	8003e30 <__sinit>
 8000c14:	d9c15117 	ldw	r7,1348(sp)
 8000c18:	003def06 	br	80003d8 <___vfprintf_internal_r+0x5c>
 8000c1c:	d9014f17 	ldw	r4,1340(sp)
 8000c20:	b00b883a 	mov	r5,r22
 8000c24:	d9c15115 	stw	r7,1348(sp)
 8000c28:	80022640 	call	8002264 <__swsetup_r>
 8000c2c:	d9c15117 	ldw	r7,1348(sp)
 8000c30:	103dee26 	beq	r2,zero,80003ec <___vfprintf_internal_r+0x70>
 8000c34:	003f8c06 	br	8000a68 <___vfprintf_internal_r+0x6ec>
 8000c38:	d9014217 	ldw	r4,1288(sp)
 8000c3c:	d9414317 	ldw	r5,1292(sp)
 8000c40:	000d883a 	mov	r6,zero
 8000c44:	000f883a 	mov	r7,zero
 8000c48:	8008e1c0 	call	8008e1c <__eqdf2>
 8000c4c:	1000f21e 	bne	r2,zero,8001018 <___vfprintf_internal_r+0xc9c>
 8000c50:	00820074 	movhi	r2,2049
 8000c54:	10b29504 	addi	r2,r2,-13740
 8000c58:	94800044 	addi	r18,r18,1
 8000c5c:	8c400044 	addi	r17,r17,1
 8000c60:	a8800015 	stw	r2,0(r21)
 8000c64:	00c00044 	movi	r3,1
 8000c68:	008001c4 	movi	r2,7
 8000c6c:	a8c00115 	stw	r3,4(r21)
 8000c70:	dc800e15 	stw	r18,56(sp)
 8000c74:	dc400d15 	stw	r17,52(sp)
 8000c78:	14430016 	blt	r2,r17,800187c <___vfprintf_internal_r+0x1500>
 8000c7c:	a8c00204 	addi	r3,r21,8
 8000c80:	d8800517 	ldw	r2,20(sp)
 8000c84:	d9014717 	ldw	r4,1308(sp)
 8000c88:	11015c0e 	bge	r2,r4,80011fc <___vfprintf_internal_r+0xe80>
 8000c8c:	dc400d17 	ldw	r17,52(sp)
 8000c90:	d9814917 	ldw	r6,1316(sp)
 8000c94:	00800044 	movi	r2,1
 8000c98:	94800044 	addi	r18,r18,1
 8000c9c:	8c400044 	addi	r17,r17,1
 8000ca0:	18800115 	stw	r2,4(r3)
 8000ca4:	008001c4 	movi	r2,7
 8000ca8:	19800015 	stw	r6,0(r3)
 8000cac:	dc800e15 	stw	r18,56(sp)
 8000cb0:	dc400d15 	stw	r17,52(sp)
 8000cb4:	14431616 	blt	r2,r17,8001910 <___vfprintf_internal_r+0x1594>
 8000cb8:	18c00204 	addi	r3,r3,8
 8000cbc:	d8814717 	ldw	r2,1308(sp)
 8000cc0:	143fffc4 	addi	r16,r2,-1
 8000cc4:	043f2b0e 	bge	zero,r16,8000974 <___vfprintf_internal_r+0x5f8>
 8000cc8:	00800404 	movi	r2,16
 8000ccc:	1402a80e 	bge	r2,r16,8001770 <___vfprintf_internal_r+0x13f4>
 8000cd0:	dc400d17 	ldw	r17,52(sp)
 8000cd4:	1027883a 	mov	r19,r2
 8000cd8:	07020074 	movhi	fp,2049
 8000cdc:	e7329584 	addi	fp,fp,-13738
 8000ce0:	050001c4 	movi	r20,7
 8000ce4:	00000306 	br	8000cf4 <___vfprintf_internal_r+0x978>
 8000ce8:	18c00204 	addi	r3,r3,8
 8000cec:	843ffc04 	addi	r16,r16,-16
 8000cf0:	9c02a20e 	bge	r19,r16,800177c <___vfprintf_internal_r+0x1400>
 8000cf4:	94800404 	addi	r18,r18,16
 8000cf8:	8c400044 	addi	r17,r17,1
 8000cfc:	1f000015 	stw	fp,0(r3)
 8000d00:	1cc00115 	stw	r19,4(r3)
 8000d04:	dc800e15 	stw	r18,56(sp)
 8000d08:	dc400d15 	stw	r17,52(sp)
 8000d0c:	a47ff60e 	bge	r20,r17,8000ce8 <___vfprintf_internal_r+0x96c>
 8000d10:	d9014f17 	ldw	r4,1340(sp)
 8000d14:	b00b883a 	mov	r5,r22
 8000d18:	d9800c04 	addi	r6,sp,48
 8000d1c:	80003240 	call	8000324 <__sprint_r>
 8000d20:	103f4e1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8000d24:	dc800e17 	ldw	r18,56(sp)
 8000d28:	dc400d17 	ldw	r17,52(sp)
 8000d2c:	d8c01904 	addi	r3,sp,100
 8000d30:	003fee06 	br	8000cec <___vfprintf_internal_r+0x970>
 8000d34:	d8802c0b 	ldhu	r2,176(sp)
 8000d38:	00ffffc4 	movi	r3,-1
 8000d3c:	d8c14b15 	stw	r3,1324(sp)
 8000d40:	1080100c 	andi	r2,r2,64
 8000d44:	103dcc1e 	bne	r2,zero,8000478 <___vfprintf_internal_r+0xfc>
 8000d48:	003dce06 	br	8000484 <___vfprintf_internal_r+0x108>
 8000d4c:	d9014f17 	ldw	r4,1340(sp)
 8000d50:	b00b883a 	mov	r5,r22
 8000d54:	d9800c04 	addi	r6,sp,48
 8000d58:	80003240 	call	8000324 <__sprint_r>
 8000d5c:	103f3f1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8000d60:	dc800e17 	ldw	r18,56(sp)
 8000d64:	003f2e06 	br	8000a20 <___vfprintf_internal_r+0x6a4>
 8000d68:	d9414c17 	ldw	r5,1328(sp)
 8000d6c:	29400414 	ori	r5,r5,16
 8000d70:	d9414c15 	stw	r5,1328(sp)
 8000d74:	d9814c17 	ldw	r6,1328(sp)
 8000d78:	3080080c 	andi	r2,r6,32
 8000d7c:	10014f1e 	bne	r2,zero,80012bc <___vfprintf_internal_r+0xf40>
 8000d80:	d8c14c17 	ldw	r3,1328(sp)
 8000d84:	1880040c 	andi	r2,r3,16
 8000d88:	1002f01e 	bne	r2,zero,800194c <___vfprintf_internal_r+0x15d0>
 8000d8c:	d9014c17 	ldw	r4,1328(sp)
 8000d90:	2080100c 	andi	r2,r4,64
 8000d94:	1002ed26 	beq	r2,zero,800194c <___vfprintf_internal_r+0x15d0>
 8000d98:	3880000f 	ldh	r2,0(r7)
 8000d9c:	39c00104 	addi	r7,r7,4
 8000da0:	d9c14015 	stw	r7,1280(sp)
 8000da4:	1023d7fa 	srai	r17,r2,31
 8000da8:	1021883a 	mov	r16,r2
 8000dac:	88037816 	blt	r17,zero,8001b90 <___vfprintf_internal_r+0x1814>
 8000db0:	01000044 	movi	r4,1
 8000db4:	98000416 	blt	r19,zero,8000dc8 <___vfprintf_internal_r+0xa4c>
 8000db8:	d8c14c17 	ldw	r3,1328(sp)
 8000dbc:	00bfdfc4 	movi	r2,-129
 8000dc0:	1886703a 	and	r3,r3,r2
 8000dc4:	d8c14c15 	stw	r3,1328(sp)
 8000dc8:	8444b03a 	or	r2,r16,r17
 8000dcc:	10022c1e 	bne	r2,zero,8001680 <___vfprintf_internal_r+0x1304>
 8000dd0:	98022b1e 	bne	r19,zero,8001680 <___vfprintf_internal_r+0x1304>
 8000dd4:	20803fcc 	andi	r2,r4,255
 8000dd8:	1002a126 	beq	r2,zero,8001860 <___vfprintf_internal_r+0x14e4>
 8000ddc:	d8c01904 	addi	r3,sp,100
 8000de0:	dd000f04 	addi	r20,sp,60
 8000de4:	d8c14115 	stw	r3,1284(sp)
 8000de8:	d8c14117 	ldw	r3,1284(sp)
 8000dec:	dcc14515 	stw	r19,1300(sp)
 8000df0:	a0c5c83a 	sub	r2,r20,r3
 8000df4:	11c00a04 	addi	r7,r2,40
 8000df8:	99c0010e 	bge	r19,r7,8000e00 <___vfprintf_internal_r+0xa84>
 8000dfc:	d9c14515 	stw	r7,1300(sp)
 8000e00:	dcc14615 	stw	r19,1304(sp)
 8000e04:	d8800407 	ldb	r2,16(sp)
 8000e08:	103e4c26 	beq	r2,zero,800073c <___vfprintf_internal_r+0x3c0>
 8000e0c:	d8814517 	ldw	r2,1300(sp)
 8000e10:	10800044 	addi	r2,r2,1
 8000e14:	d8814515 	stw	r2,1300(sp)
 8000e18:	003e4806 	br	800073c <___vfprintf_internal_r+0x3c0>
 8000e1c:	d9814c17 	ldw	r6,1328(sp)
 8000e20:	31800414 	ori	r6,r6,16
 8000e24:	d9814c15 	stw	r6,1328(sp)
 8000e28:	d8c14c17 	ldw	r3,1328(sp)
 8000e2c:	1880080c 	andi	r2,r3,32
 8000e30:	1001271e 	bne	r2,zero,80012d0 <___vfprintf_internal_r+0xf54>
 8000e34:	d9414c17 	ldw	r5,1328(sp)
 8000e38:	2880040c 	andi	r2,r5,16
 8000e3c:	1002bc1e 	bne	r2,zero,8001930 <___vfprintf_internal_r+0x15b4>
 8000e40:	d9814c17 	ldw	r6,1328(sp)
 8000e44:	3080100c 	andi	r2,r6,64
 8000e48:	1002b926 	beq	r2,zero,8001930 <___vfprintf_internal_r+0x15b4>
 8000e4c:	3c00000b 	ldhu	r16,0(r7)
 8000e50:	0009883a 	mov	r4,zero
 8000e54:	39c00104 	addi	r7,r7,4
 8000e58:	0023883a 	mov	r17,zero
 8000e5c:	d9c14015 	stw	r7,1280(sp)
 8000e60:	d8000405 	stb	zero,16(sp)
 8000e64:	003fd306 	br	8000db4 <___vfprintf_internal_r+0xa38>
 8000e68:	d9014c17 	ldw	r4,1328(sp)
 8000e6c:	21000414 	ori	r4,r4,16
 8000e70:	d9014c15 	stw	r4,1328(sp)
 8000e74:	d9414c17 	ldw	r5,1328(sp)
 8000e78:	2880080c 	andi	r2,r5,32
 8000e7c:	1001081e 	bne	r2,zero,80012a0 <___vfprintf_internal_r+0xf24>
 8000e80:	d8c14c17 	ldw	r3,1328(sp)
 8000e84:	1880040c 	andi	r2,r3,16
 8000e88:	1002b61e 	bne	r2,zero,8001964 <___vfprintf_internal_r+0x15e8>
 8000e8c:	d9014c17 	ldw	r4,1328(sp)
 8000e90:	2080100c 	andi	r2,r4,64
 8000e94:	1002b326 	beq	r2,zero,8001964 <___vfprintf_internal_r+0x15e8>
 8000e98:	3c00000b 	ldhu	r16,0(r7)
 8000e9c:	01000044 	movi	r4,1
 8000ea0:	39c00104 	addi	r7,r7,4
 8000ea4:	0023883a 	mov	r17,zero
 8000ea8:	d9c14015 	stw	r7,1280(sp)
 8000eac:	d8000405 	stb	zero,16(sp)
 8000eb0:	003fc006 	br	8000db4 <___vfprintf_internal_r+0xa38>
 8000eb4:	d9014f17 	ldw	r4,1340(sp)
 8000eb8:	b00b883a 	mov	r5,r22
 8000ebc:	d9800c04 	addi	r6,sp,48
 8000ec0:	80003240 	call	8000324 <__sprint_r>
 8000ec4:	103ee51e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8000ec8:	dc800e17 	ldw	r18,56(sp)
 8000ecc:	d8c01904 	addi	r3,sp,100
 8000ed0:	d9814c17 	ldw	r6,1328(sp)
 8000ed4:	3080004c 	andi	r2,r6,1
 8000ed8:	1005003a 	cmpeq	r2,r2,zero
 8000edc:	103ea51e 	bne	r2,zero,8000974 <___vfprintf_internal_r+0x5f8>
 8000ee0:	00800044 	movi	r2,1
 8000ee4:	dc400d17 	ldw	r17,52(sp)
 8000ee8:	18800115 	stw	r2,4(r3)
 8000eec:	d8814917 	ldw	r2,1316(sp)
 8000ef0:	94800044 	addi	r18,r18,1
 8000ef4:	8c400044 	addi	r17,r17,1
 8000ef8:	18800015 	stw	r2,0(r3)
 8000efc:	008001c4 	movi	r2,7
 8000f00:	dc800e15 	stw	r18,56(sp)
 8000f04:	dc400d15 	stw	r17,52(sp)
 8000f08:	1442240e 	bge	r2,r17,800179c <___vfprintf_internal_r+0x1420>
 8000f0c:	d9014f17 	ldw	r4,1340(sp)
 8000f10:	b00b883a 	mov	r5,r22
 8000f14:	d9800c04 	addi	r6,sp,48
 8000f18:	80003240 	call	8000324 <__sprint_r>
 8000f1c:	103ecf1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8000f20:	dc800e17 	ldw	r18,56(sp)
 8000f24:	d8c01904 	addi	r3,sp,100
 8000f28:	003e9206 	br	8000974 <___vfprintf_internal_r+0x5f8>
 8000f2c:	d9014f17 	ldw	r4,1340(sp)
 8000f30:	b00b883a 	mov	r5,r22
 8000f34:	d9800c04 	addi	r6,sp,48
 8000f38:	80003240 	call	8000324 <__sprint_r>
 8000f3c:	103ec026 	beq	r2,zero,8000a40 <___vfprintf_internal_r+0x6c4>
 8000f40:	003ec606 	br	8000a5c <___vfprintf_internal_r+0x6e0>
 8000f44:	d9014f17 	ldw	r4,1340(sp)
 8000f48:	b00b883a 	mov	r5,r22
 8000f4c:	d9800c04 	addi	r6,sp,48
 8000f50:	d9c15115 	stw	r7,1348(sp)
 8000f54:	80003240 	call	8000324 <__sprint_r>
 8000f58:	d9c15117 	ldw	r7,1348(sp)
 8000f5c:	103ebf1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8000f60:	dc800e17 	ldw	r18,56(sp)
 8000f64:	dc400d17 	ldw	r17,52(sp)
 8000f68:	dd401904 	addi	r21,sp,100
 8000f6c:	003e7406 	br	8000940 <___vfprintf_internal_r+0x5c4>
 8000f70:	d9014f17 	ldw	r4,1340(sp)
 8000f74:	b00b883a 	mov	r5,r22
 8000f78:	d9800c04 	addi	r6,sp,48
 8000f7c:	d9c15115 	stw	r7,1348(sp)
 8000f80:	80003240 	call	8000324 <__sprint_r>
 8000f84:	d9c15117 	ldw	r7,1348(sp)
 8000f88:	103eb41e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8000f8c:	dd401904 	addi	r21,sp,100
 8000f90:	003d6d06 	br	8000548 <___vfprintf_internal_r+0x1cc>
 8000f94:	d9014f17 	ldw	r4,1340(sp)
 8000f98:	b00b883a 	mov	r5,r22
 8000f9c:	d9800c04 	addi	r6,sp,48
 8000fa0:	d9c15115 	stw	r7,1348(sp)
 8000fa4:	80003240 	call	8000324 <__sprint_r>
 8000fa8:	d9c15117 	ldw	r7,1348(sp)
 8000fac:	103eab1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8000fb0:	dc800e17 	ldw	r18,56(sp)
 8000fb4:	dc400d17 	ldw	r17,52(sp)
 8000fb8:	dd401904 	addi	r21,sp,100
 8000fbc:	003e3406 	br	8000890 <___vfprintf_internal_r+0x514>
 8000fc0:	d9014f17 	ldw	r4,1340(sp)
 8000fc4:	b00b883a 	mov	r5,r22
 8000fc8:	d9800c04 	addi	r6,sp,48
 8000fcc:	d9c15115 	stw	r7,1348(sp)
 8000fd0:	80003240 	call	8000324 <__sprint_r>
 8000fd4:	d9c15117 	ldw	r7,1348(sp)
 8000fd8:	103ea01e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8000fdc:	dc800e17 	ldw	r18,56(sp)
 8000fe0:	dc400d17 	ldw	r17,52(sp)
 8000fe4:	dd401904 	addi	r21,sp,100
 8000fe8:	003e1c06 	br	800085c <___vfprintf_internal_r+0x4e0>
 8000fec:	d9014f17 	ldw	r4,1340(sp)
 8000ff0:	b00b883a 	mov	r5,r22
 8000ff4:	d9800c04 	addi	r6,sp,48
 8000ff8:	d9c15115 	stw	r7,1348(sp)
 8000ffc:	80003240 	call	8000324 <__sprint_r>
 8001000:	d9c15117 	ldw	r7,1348(sp)
 8001004:	103e951e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001008:	dc800e17 	ldw	r18,56(sp)
 800100c:	dc400d17 	ldw	r17,52(sp)
 8001010:	dd401904 	addi	r21,sp,100
 8001014:	003e0406 	br	8000828 <___vfprintf_internal_r+0x4ac>
 8001018:	d9000517 	ldw	r4,20(sp)
 800101c:	0102580e 	bge	zero,r4,8001980 <___vfprintf_internal_r+0x1604>
 8001020:	d9814717 	ldw	r6,1308(sp)
 8001024:	21807a16 	blt	r4,r6,8001210 <___vfprintf_internal_r+0xe94>
 8001028:	d8814117 	ldw	r2,1284(sp)
 800102c:	91a5883a 	add	r18,r18,r6
 8001030:	8c400044 	addi	r17,r17,1
 8001034:	a8800015 	stw	r2,0(r21)
 8001038:	008001c4 	movi	r2,7
 800103c:	a9800115 	stw	r6,4(r21)
 8001040:	dc800e15 	stw	r18,56(sp)
 8001044:	dc400d15 	stw	r17,52(sp)
 8001048:	1442fc16 	blt	r2,r17,8001c3c <___vfprintf_internal_r+0x18c0>
 800104c:	a8c00204 	addi	r3,r21,8
 8001050:	d9414717 	ldw	r5,1308(sp)
 8001054:	2161c83a 	sub	r16,r4,r5
 8001058:	043f9d0e 	bge	zero,r16,8000ed0 <___vfprintf_internal_r+0xb54>
 800105c:	00800404 	movi	r2,16
 8001060:	1402190e 	bge	r2,r16,80018c8 <___vfprintf_internal_r+0x154c>
 8001064:	dc400d17 	ldw	r17,52(sp)
 8001068:	1027883a 	mov	r19,r2
 800106c:	07020074 	movhi	fp,2049
 8001070:	e7329584 	addi	fp,fp,-13738
 8001074:	050001c4 	movi	r20,7
 8001078:	00000306 	br	8001088 <___vfprintf_internal_r+0xd0c>
 800107c:	18c00204 	addi	r3,r3,8
 8001080:	843ffc04 	addi	r16,r16,-16
 8001084:	9c02130e 	bge	r19,r16,80018d4 <___vfprintf_internal_r+0x1558>
 8001088:	94800404 	addi	r18,r18,16
 800108c:	8c400044 	addi	r17,r17,1
 8001090:	1f000015 	stw	fp,0(r3)
 8001094:	1cc00115 	stw	r19,4(r3)
 8001098:	dc800e15 	stw	r18,56(sp)
 800109c:	dc400d15 	stw	r17,52(sp)
 80010a0:	a47ff60e 	bge	r20,r17,800107c <___vfprintf_internal_r+0xd00>
 80010a4:	d9014f17 	ldw	r4,1340(sp)
 80010a8:	b00b883a 	mov	r5,r22
 80010ac:	d9800c04 	addi	r6,sp,48
 80010b0:	80003240 	call	8000324 <__sprint_r>
 80010b4:	103e691e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 80010b8:	dc800e17 	ldw	r18,56(sp)
 80010bc:	dc400d17 	ldw	r17,52(sp)
 80010c0:	d8c01904 	addi	r3,sp,100
 80010c4:	003fee06 	br	8001080 <___vfprintf_internal_r+0xd04>
 80010c8:	d8814717 	ldw	r2,1308(sp)
 80010cc:	143fffc4 	addi	r16,r2,-1
 80010d0:	043e970e 	bge	zero,r16,8000b30 <___vfprintf_internal_r+0x7b4>
 80010d4:	00800404 	movi	r2,16
 80010d8:	1400180e 	bge	r2,r16,800113c <___vfprintf_internal_r+0xdc0>
 80010dc:	1029883a 	mov	r20,r2
 80010e0:	07020074 	movhi	fp,2049
 80010e4:	e7329584 	addi	fp,fp,-13738
 80010e8:	054001c4 	movi	r21,7
 80010ec:	00000306 	br	80010fc <___vfprintf_internal_r+0xd80>
 80010f0:	9cc00204 	addi	r19,r19,8
 80010f4:	843ffc04 	addi	r16,r16,-16
 80010f8:	a400120e 	bge	r20,r16,8001144 <___vfprintf_internal_r+0xdc8>
 80010fc:	94800404 	addi	r18,r18,16
 8001100:	8c400044 	addi	r17,r17,1
 8001104:	9f000015 	stw	fp,0(r19)
 8001108:	9d000115 	stw	r20,4(r19)
 800110c:	dc800e15 	stw	r18,56(sp)
 8001110:	dc400d15 	stw	r17,52(sp)
 8001114:	ac7ff60e 	bge	r21,r17,80010f0 <___vfprintf_internal_r+0xd74>
 8001118:	d9014f17 	ldw	r4,1340(sp)
 800111c:	b00b883a 	mov	r5,r22
 8001120:	d9800c04 	addi	r6,sp,48
 8001124:	80003240 	call	8000324 <__sprint_r>
 8001128:	103e4c1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 800112c:	dc800e17 	ldw	r18,56(sp)
 8001130:	dc400d17 	ldw	r17,52(sp)
 8001134:	dcc01904 	addi	r19,sp,100
 8001138:	003fee06 	br	80010f4 <___vfprintf_internal_r+0xd78>
 800113c:	07020074 	movhi	fp,2049
 8001140:	e7329584 	addi	fp,fp,-13738
 8001144:	9425883a 	add	r18,r18,r16
 8001148:	8c400044 	addi	r17,r17,1
 800114c:	008001c4 	movi	r2,7
 8001150:	9f000015 	stw	fp,0(r19)
 8001154:	9c000115 	stw	r16,4(r19)
 8001158:	dc800e15 	stw	r18,56(sp)
 800115c:	dc400d15 	stw	r17,52(sp)
 8001160:	147e720e 	bge	r2,r17,8000b2c <___vfprintf_internal_r+0x7b0>
 8001164:	d9014f17 	ldw	r4,1340(sp)
 8001168:	b00b883a 	mov	r5,r22
 800116c:	d9800c04 	addi	r6,sp,48
 8001170:	80003240 	call	8000324 <__sprint_r>
 8001174:	103e391e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001178:	dc800e17 	ldw	r18,56(sp)
 800117c:	dc400d17 	ldw	r17,52(sp)
 8001180:	dcc01904 	addi	r19,sp,100
 8001184:	003e6a06 	br	8000b30 <___vfprintf_internal_r+0x7b4>
 8001188:	d9014f17 	ldw	r4,1340(sp)
 800118c:	b00b883a 	mov	r5,r22
 8001190:	d9800c04 	addi	r6,sp,48
 8001194:	d9c15115 	stw	r7,1348(sp)
 8001198:	80003240 	call	8000324 <__sprint_r>
 800119c:	d9c15117 	ldw	r7,1348(sp)
 80011a0:	103e2e1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 80011a4:	dc800e17 	ldw	r18,56(sp)
 80011a8:	dc400d17 	ldw	r17,52(sp)
 80011ac:	dd401904 	addi	r21,sp,100
 80011b0:	003dba06 	br	800089c <___vfprintf_internal_r+0x520>
 80011b4:	d9014f17 	ldw	r4,1340(sp)
 80011b8:	b00b883a 	mov	r5,r22
 80011bc:	d9800c04 	addi	r6,sp,48
 80011c0:	80003240 	call	8000324 <__sprint_r>
 80011c4:	103e251e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 80011c8:	dc800e17 	ldw	r18,56(sp)
 80011cc:	dc400d17 	ldw	r17,52(sp)
 80011d0:	dcc01904 	addi	r19,sp,100
 80011d4:	003e4206 	br	8000ae0 <___vfprintf_internal_r+0x764>
 80011d8:	d9014f17 	ldw	r4,1340(sp)
 80011dc:	b00b883a 	mov	r5,r22
 80011e0:	d9800c04 	addi	r6,sp,48
 80011e4:	80003240 	call	8000324 <__sprint_r>
 80011e8:	103e1c1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 80011ec:	dc800e17 	ldw	r18,56(sp)
 80011f0:	dc400d17 	ldw	r17,52(sp)
 80011f4:	d8c01904 	addi	r3,sp,100
 80011f8:	003e2e06 	br	8000ab4 <___vfprintf_internal_r+0x738>
 80011fc:	d9414c17 	ldw	r5,1328(sp)
 8001200:	2880004c 	andi	r2,r5,1
 8001204:	1005003a 	cmpeq	r2,r2,zero
 8001208:	103dda1e 	bne	r2,zero,8000974 <___vfprintf_internal_r+0x5f8>
 800120c:	003e9f06 	br	8000c8c <___vfprintf_internal_r+0x910>
 8001210:	d8c14117 	ldw	r3,1284(sp)
 8001214:	9125883a 	add	r18,r18,r4
 8001218:	8c400044 	addi	r17,r17,1
 800121c:	008001c4 	movi	r2,7
 8001220:	a8c00015 	stw	r3,0(r21)
 8001224:	a9000115 	stw	r4,4(r21)
 8001228:	dc800e15 	stw	r18,56(sp)
 800122c:	dc400d15 	stw	r17,52(sp)
 8001230:	14426c16 	blt	r2,r17,8001be4 <___vfprintf_internal_r+0x1868>
 8001234:	a8c00204 	addi	r3,r21,8
 8001238:	d9414917 	ldw	r5,1316(sp)
 800123c:	00800044 	movi	r2,1
 8001240:	94800044 	addi	r18,r18,1
 8001244:	8c400044 	addi	r17,r17,1
 8001248:	18800115 	stw	r2,4(r3)
 800124c:	008001c4 	movi	r2,7
 8001250:	19400015 	stw	r5,0(r3)
 8001254:	dc800e15 	stw	r18,56(sp)
 8001258:	dc400d15 	stw	r17,52(sp)
 800125c:	2021883a 	mov	r16,r4
 8001260:	14425616 	blt	r2,r17,8001bbc <___vfprintf_internal_r+0x1840>
 8001264:	19400204 	addi	r5,r3,8
 8001268:	d9814717 	ldw	r6,1308(sp)
 800126c:	8c400044 	addi	r17,r17,1
 8001270:	dc400d15 	stw	r17,52(sp)
 8001274:	3107c83a 	sub	r3,r6,r4
 8001278:	d9014117 	ldw	r4,1284(sp)
 800127c:	90e5883a 	add	r18,r18,r3
 8001280:	28c00115 	stw	r3,4(r5)
 8001284:	8105883a 	add	r2,r16,r4
 8001288:	28800015 	stw	r2,0(r5)
 800128c:	008001c4 	movi	r2,7
 8001290:	dc800e15 	stw	r18,56(sp)
 8001294:	147f1d16 	blt	r2,r17,8000f0c <___vfprintf_internal_r+0xb90>
 8001298:	28c00204 	addi	r3,r5,8
 800129c:	003db506 	br	8000974 <___vfprintf_internal_r+0x5f8>
 80012a0:	3c000017 	ldw	r16,0(r7)
 80012a4:	3c400117 	ldw	r17,4(r7)
 80012a8:	39800204 	addi	r6,r7,8
 80012ac:	01000044 	movi	r4,1
 80012b0:	d9814015 	stw	r6,1280(sp)
 80012b4:	d8000405 	stb	zero,16(sp)
 80012b8:	003ebe06 	br	8000db4 <___vfprintf_internal_r+0xa38>
 80012bc:	3c000017 	ldw	r16,0(r7)
 80012c0:	3c400117 	ldw	r17,4(r7)
 80012c4:	38800204 	addi	r2,r7,8
 80012c8:	d8814015 	stw	r2,1280(sp)
 80012cc:	003eb706 	br	8000dac <___vfprintf_internal_r+0xa30>
 80012d0:	3c000017 	ldw	r16,0(r7)
 80012d4:	3c400117 	ldw	r17,4(r7)
 80012d8:	39000204 	addi	r4,r7,8
 80012dc:	d9014015 	stw	r4,1280(sp)
 80012e0:	0009883a 	mov	r4,zero
 80012e4:	d8000405 	stb	zero,16(sp)
 80012e8:	003eb206 	br	8000db4 <___vfprintf_internal_r+0xa38>
 80012ec:	38c00017 	ldw	r3,0(r7)
 80012f0:	39c00104 	addi	r7,r7,4
 80012f4:	d8c14a15 	stw	r3,1320(sp)
 80012f8:	1800d70e 	bge	r3,zero,8001658 <___vfprintf_internal_r+0x12dc>
 80012fc:	00c7c83a 	sub	r3,zero,r3
 8001300:	d8c14a15 	stw	r3,1320(sp)
 8001304:	d9014c17 	ldw	r4,1328(sp)
 8001308:	b8c00007 	ldb	r3,0(r23)
 800130c:	21000114 	ori	r4,r4,4
 8001310:	d9014c15 	stw	r4,1328(sp)
 8001314:	003c9806 	br	8000578 <___vfprintf_internal_r+0x1fc>
 8001318:	d9814c17 	ldw	r6,1328(sp)
 800131c:	3080080c 	andi	r2,r6,32
 8001320:	1001f626 	beq	r2,zero,8001afc <___vfprintf_internal_r+0x1780>
 8001324:	d9014b17 	ldw	r4,1324(sp)
 8001328:	38800017 	ldw	r2,0(r7)
 800132c:	39c00104 	addi	r7,r7,4
 8001330:	d9c14015 	stw	r7,1280(sp)
 8001334:	2007d7fa 	srai	r3,r4,31
 8001338:	d9c14017 	ldw	r7,1280(sp)
 800133c:	11000015 	stw	r4,0(r2)
 8001340:	10c00115 	stw	r3,4(r2)
 8001344:	003c6906 	br	80004ec <___vfprintf_internal_r+0x170>
 8001348:	b8c00007 	ldb	r3,0(r23)
 800134c:	00801b04 	movi	r2,108
 8001350:	18825526 	beq	r3,r2,8001ca8 <___vfprintf_internal_r+0x192c>
 8001354:	d9414c17 	ldw	r5,1328(sp)
 8001358:	29400414 	ori	r5,r5,16
 800135c:	d9414c15 	stw	r5,1328(sp)
 8001360:	003c8506 	br	8000578 <___vfprintf_internal_r+0x1fc>
 8001364:	d9814c17 	ldw	r6,1328(sp)
 8001368:	b8c00007 	ldb	r3,0(r23)
 800136c:	31800814 	ori	r6,r6,32
 8001370:	d9814c15 	stw	r6,1328(sp)
 8001374:	003c8006 	br	8000578 <___vfprintf_internal_r+0x1fc>
 8001378:	d8814c17 	ldw	r2,1328(sp)
 800137c:	3c000017 	ldw	r16,0(r7)
 8001380:	00c01e04 	movi	r3,120
 8001384:	10800094 	ori	r2,r2,2
 8001388:	d8814c15 	stw	r2,1328(sp)
 800138c:	39c00104 	addi	r7,r7,4
 8001390:	01420074 	movhi	r5,2049
 8001394:	29727e04 	addi	r5,r5,-13832
 8001398:	00800c04 	movi	r2,48
 800139c:	0023883a 	mov	r17,zero
 80013a0:	01000084 	movi	r4,2
 80013a4:	d9c14015 	stw	r7,1280(sp)
 80013a8:	d8c14d15 	stw	r3,1332(sp)
 80013ac:	d9414415 	stw	r5,1296(sp)
 80013b0:	d8800445 	stb	r2,17(sp)
 80013b4:	d8c00485 	stb	r3,18(sp)
 80013b8:	d8000405 	stb	zero,16(sp)
 80013bc:	003e7d06 	br	8000db4 <___vfprintf_internal_r+0xa38>
 80013c0:	d8814c17 	ldw	r2,1328(sp)
 80013c4:	b8c00007 	ldb	r3,0(r23)
 80013c8:	10801014 	ori	r2,r2,64
 80013cc:	d8814c15 	stw	r2,1328(sp)
 80013d0:	003c6906 	br	8000578 <___vfprintf_internal_r+0x1fc>
 80013d4:	d9414c17 	ldw	r5,1328(sp)
 80013d8:	2880020c 	andi	r2,r5,8
 80013dc:	1001e526 	beq	r2,zero,8001b74 <___vfprintf_internal_r+0x17f8>
 80013e0:	39800017 	ldw	r6,0(r7)
 80013e4:	38800204 	addi	r2,r7,8
 80013e8:	d8814015 	stw	r2,1280(sp)
 80013ec:	d9814215 	stw	r6,1288(sp)
 80013f0:	39c00117 	ldw	r7,4(r7)
 80013f4:	d9c14315 	stw	r7,1292(sp)
 80013f8:	d9014217 	ldw	r4,1288(sp)
 80013fc:	d9414317 	ldw	r5,1292(sp)
 8001400:	8006e2c0 	call	8006e2c <__isinfd>
 8001404:	10021d26 	beq	r2,zero,8001c7c <___vfprintf_internal_r+0x1900>
 8001408:	d9014217 	ldw	r4,1288(sp)
 800140c:	d9414317 	ldw	r5,1292(sp)
 8001410:	000d883a 	mov	r6,zero
 8001414:	000f883a 	mov	r7,zero
 8001418:	800903c0 	call	800903c <__ltdf2>
 800141c:	1002d016 	blt	r2,zero,8001f60 <___vfprintf_internal_r+0x1be4>
 8001420:	d9414d17 	ldw	r5,1332(sp)
 8001424:	008011c4 	movi	r2,71
 8001428:	11421016 	blt	r2,r5,8001c6c <___vfprintf_internal_r+0x18f0>
 800142c:	01820074 	movhi	r6,2049
 8001430:	31b28304 	addi	r6,r6,-13812
 8001434:	d9814115 	stw	r6,1284(sp)
 8001438:	d9014c17 	ldw	r4,1328(sp)
 800143c:	00c000c4 	movi	r3,3
 8001440:	00bfdfc4 	movi	r2,-129
 8001444:	2088703a 	and	r4,r4,r2
 8001448:	180f883a 	mov	r7,r3
 800144c:	d8c14515 	stw	r3,1300(sp)
 8001450:	d9014c15 	stw	r4,1328(sp)
 8001454:	d8014615 	stw	zero,1304(sp)
 8001458:	003e6a06 	br	8000e04 <___vfprintf_internal_r+0xa88>
 800145c:	38800017 	ldw	r2,0(r7)
 8001460:	00c00044 	movi	r3,1
 8001464:	39c00104 	addi	r7,r7,4
 8001468:	d9c14015 	stw	r7,1280(sp)
 800146c:	d9000f04 	addi	r4,sp,60
 8001470:	180f883a 	mov	r7,r3
 8001474:	d8c14515 	stw	r3,1300(sp)
 8001478:	d9014115 	stw	r4,1284(sp)
 800147c:	d8800f05 	stb	r2,60(sp)
 8001480:	d8000405 	stb	zero,16(sp)
 8001484:	003cac06 	br	8000738 <___vfprintf_internal_r+0x3bc>
 8001488:	01420074 	movhi	r5,2049
 800148c:	29728904 	addi	r5,r5,-13788
 8001490:	d9414415 	stw	r5,1296(sp)
 8001494:	d9814c17 	ldw	r6,1328(sp)
 8001498:	3080080c 	andi	r2,r6,32
 800149c:	1000ff26 	beq	r2,zero,800189c <___vfprintf_internal_r+0x1520>
 80014a0:	3c000017 	ldw	r16,0(r7)
 80014a4:	3c400117 	ldw	r17,4(r7)
 80014a8:	38800204 	addi	r2,r7,8
 80014ac:	d8814015 	stw	r2,1280(sp)
 80014b0:	d9414c17 	ldw	r5,1328(sp)
 80014b4:	2880004c 	andi	r2,r5,1
 80014b8:	1005003a 	cmpeq	r2,r2,zero
 80014bc:	1000b91e 	bne	r2,zero,80017a4 <___vfprintf_internal_r+0x1428>
 80014c0:	8444b03a 	or	r2,r16,r17
 80014c4:	1000b726 	beq	r2,zero,80017a4 <___vfprintf_internal_r+0x1428>
 80014c8:	d9814d17 	ldw	r6,1332(sp)
 80014cc:	29400094 	ori	r5,r5,2
 80014d0:	00800c04 	movi	r2,48
 80014d4:	01000084 	movi	r4,2
 80014d8:	d9414c15 	stw	r5,1328(sp)
 80014dc:	d8800445 	stb	r2,17(sp)
 80014e0:	d9800485 	stb	r6,18(sp)
 80014e4:	d8000405 	stb	zero,16(sp)
 80014e8:	003e3206 	br	8000db4 <___vfprintf_internal_r+0xa38>
 80014ec:	01820074 	movhi	r6,2049
 80014f0:	31b27e04 	addi	r6,r6,-13832
 80014f4:	d9814415 	stw	r6,1296(sp)
 80014f8:	003fe606 	br	8001494 <___vfprintf_internal_r+0x1118>
 80014fc:	00800ac4 	movi	r2,43
 8001500:	d8800405 	stb	r2,16(sp)
 8001504:	b8c00007 	ldb	r3,0(r23)
 8001508:	003c1b06 	br	8000578 <___vfprintf_internal_r+0x1fc>
 800150c:	d8814c17 	ldw	r2,1328(sp)
 8001510:	b8c00007 	ldb	r3,0(r23)
 8001514:	10800054 	ori	r2,r2,1
 8001518:	d8814c15 	stw	r2,1328(sp)
 800151c:	003c1606 	br	8000578 <___vfprintf_internal_r+0x1fc>
 8001520:	d8800407 	ldb	r2,16(sp)
 8001524:	10004c1e 	bne	r2,zero,8001658 <___vfprintf_internal_r+0x12dc>
 8001528:	00800804 	movi	r2,32
 800152c:	d8800405 	stb	r2,16(sp)
 8001530:	b8c00007 	ldb	r3,0(r23)
 8001534:	003c1006 	br	8000578 <___vfprintf_internal_r+0x1fc>
 8001538:	d9814c17 	ldw	r6,1328(sp)
 800153c:	b8c00007 	ldb	r3,0(r23)
 8001540:	31800214 	ori	r6,r6,8
 8001544:	d9814c15 	stw	r6,1328(sp)
 8001548:	003c0b06 	br	8000578 <___vfprintf_internal_r+0x1fc>
 800154c:	0009883a 	mov	r4,zero
 8001550:	04000244 	movi	r16,9
 8001554:	01400284 	movi	r5,10
 8001558:	d9c15115 	stw	r7,1348(sp)
 800155c:	80095740 	call	8009574 <__mulsi3>
 8001560:	b9000007 	ldb	r4,0(r23)
 8001564:	d8c14d17 	ldw	r3,1332(sp)
 8001568:	bdc00044 	addi	r23,r23,1
 800156c:	d9014d15 	stw	r4,1332(sp)
 8001570:	d9414d17 	ldw	r5,1332(sp)
 8001574:	1885883a 	add	r2,r3,r2
 8001578:	113ff404 	addi	r4,r2,-48
 800157c:	28bff404 	addi	r2,r5,-48
 8001580:	d9c15117 	ldw	r7,1348(sp)
 8001584:	80bff32e 	bgeu	r16,r2,8001554 <___vfprintf_internal_r+0x11d8>
 8001588:	d9014a15 	stw	r4,1320(sp)
 800158c:	003bfc06 	br	8000580 <___vfprintf_internal_r+0x204>
 8001590:	d8814c17 	ldw	r2,1328(sp)
 8001594:	b8c00007 	ldb	r3,0(r23)
 8001598:	10802014 	ori	r2,r2,128
 800159c:	d8814c15 	stw	r2,1328(sp)
 80015a0:	003bf506 	br	8000578 <___vfprintf_internal_r+0x1fc>
 80015a4:	b8c00007 	ldb	r3,0(r23)
 80015a8:	00800a84 	movi	r2,42
 80015ac:	bdc00044 	addi	r23,r23,1
 80015b0:	18831826 	beq	r3,r2,8002214 <___vfprintf_internal_r+0x1e98>
 80015b4:	d8c14d15 	stw	r3,1332(sp)
 80015b8:	18bff404 	addi	r2,r3,-48
 80015bc:	00c00244 	movi	r3,9
 80015c0:	18827b36 	bltu	r3,r2,8001fb0 <___vfprintf_internal_r+0x1c34>
 80015c4:	1821883a 	mov	r16,r3
 80015c8:	0009883a 	mov	r4,zero
 80015cc:	01400284 	movi	r5,10
 80015d0:	d9c15115 	stw	r7,1348(sp)
 80015d4:	80095740 	call	8009574 <__mulsi3>
 80015d8:	d9414d17 	ldw	r5,1332(sp)
 80015dc:	b9800007 	ldb	r6,0(r23)
 80015e0:	d9c15117 	ldw	r7,1348(sp)
 80015e4:	1145883a 	add	r2,r2,r5
 80015e8:	113ff404 	addi	r4,r2,-48
 80015ec:	30bff404 	addi	r2,r6,-48
 80015f0:	d9814d15 	stw	r6,1332(sp)
 80015f4:	bdc00044 	addi	r23,r23,1
 80015f8:	80bff42e 	bgeu	r16,r2,80015cc <___vfprintf_internal_r+0x1250>
 80015fc:	2027883a 	mov	r19,r4
 8001600:	203bdf0e 	bge	r4,zero,8000580 <___vfprintf_internal_r+0x204>
 8001604:	04ffffc4 	movi	r19,-1
 8001608:	003bdd06 	br	8000580 <___vfprintf_internal_r+0x204>
 800160c:	d8000405 	stb	zero,16(sp)
 8001610:	39800017 	ldw	r6,0(r7)
 8001614:	39c00104 	addi	r7,r7,4
 8001618:	d9c14015 	stw	r7,1280(sp)
 800161c:	d9814115 	stw	r6,1284(sp)
 8001620:	3001c926 	beq	r6,zero,8001d48 <___vfprintf_internal_r+0x19cc>
 8001624:	98000e16 	blt	r19,zero,8001660 <___vfprintf_internal_r+0x12e4>
 8001628:	d9014117 	ldw	r4,1284(sp)
 800162c:	000b883a 	mov	r5,zero
 8001630:	980d883a 	mov	r6,r19
 8001634:	80054b00 	call	80054b0 <memchr>
 8001638:	10025926 	beq	r2,zero,8001fa0 <___vfprintf_internal_r+0x1c24>
 800163c:	d8c14117 	ldw	r3,1284(sp)
 8001640:	10cfc83a 	sub	r7,r2,r3
 8001644:	99c19e16 	blt	r19,r7,8001cc0 <___vfprintf_internal_r+0x1944>
 8001648:	d9c14515 	stw	r7,1300(sp)
 800164c:	38000916 	blt	r7,zero,8001674 <___vfprintf_internal_r+0x12f8>
 8001650:	d8014615 	stw	zero,1304(sp)
 8001654:	003deb06 	br	8000e04 <___vfprintf_internal_r+0xa88>
 8001658:	b8c00007 	ldb	r3,0(r23)
 800165c:	003bc606 	br	8000578 <___vfprintf_internal_r+0x1fc>
 8001660:	d9014117 	ldw	r4,1284(sp)
 8001664:	80071140 	call	8007114 <strlen>
 8001668:	d8814515 	stw	r2,1300(sp)
 800166c:	100f883a 	mov	r7,r2
 8001670:	103ff70e 	bge	r2,zero,8001650 <___vfprintf_internal_r+0x12d4>
 8001674:	d8014515 	stw	zero,1300(sp)
 8001678:	d8014615 	stw	zero,1304(sp)
 800167c:	003de106 	br	8000e04 <___vfprintf_internal_r+0xa88>
 8001680:	20c03fcc 	andi	r3,r4,255
 8001684:	00800044 	movi	r2,1
 8001688:	18802d26 	beq	r3,r2,8001740 <___vfprintf_internal_r+0x13c4>
 800168c:	18800e36 	bltu	r3,r2,80016c8 <___vfprintf_internal_r+0x134c>
 8001690:	00800084 	movi	r2,2
 8001694:	1880fa26 	beq	r3,r2,8001a80 <___vfprintf_internal_r+0x1704>
 8001698:	01020074 	movhi	r4,2049
 800169c:	21328e04 	addi	r4,r4,-13768
 80016a0:	80071140 	call	8007114 <strlen>
 80016a4:	100f883a 	mov	r7,r2
 80016a8:	dcc14515 	stw	r19,1300(sp)
 80016ac:	9880010e 	bge	r19,r2,80016b4 <___vfprintf_internal_r+0x1338>
 80016b0:	d8814515 	stw	r2,1300(sp)
 80016b4:	00820074 	movhi	r2,2049
 80016b8:	10b28e04 	addi	r2,r2,-13768
 80016bc:	dcc14615 	stw	r19,1304(sp)
 80016c0:	d8814115 	stw	r2,1284(sp)
 80016c4:	003dcf06 	br	8000e04 <___vfprintf_internal_r+0xa88>
 80016c8:	d9401904 	addi	r5,sp,100
 80016cc:	dd000f04 	addi	r20,sp,60
 80016d0:	d9414115 	stw	r5,1284(sp)
 80016d4:	880a977a 	slli	r5,r17,29
 80016d8:	d9814117 	ldw	r6,1284(sp)
 80016dc:	8004d0fa 	srli	r2,r16,3
 80016e0:	8806d0fa 	srli	r3,r17,3
 80016e4:	810001cc 	andi	r4,r16,7
 80016e8:	2884b03a 	or	r2,r5,r2
 80016ec:	31bfffc4 	addi	r6,r6,-1
 80016f0:	21000c04 	addi	r4,r4,48
 80016f4:	d9814115 	stw	r6,1284(sp)
 80016f8:	10cab03a 	or	r5,r2,r3
 80016fc:	31000005 	stb	r4,0(r6)
 8001700:	1021883a 	mov	r16,r2
 8001704:	1823883a 	mov	r17,r3
 8001708:	283ff21e 	bne	r5,zero,80016d4 <___vfprintf_internal_r+0x1358>
 800170c:	d8c14c17 	ldw	r3,1328(sp)
 8001710:	1880004c 	andi	r2,r3,1
 8001714:	1005003a 	cmpeq	r2,r2,zero
 8001718:	103db31e 	bne	r2,zero,8000de8 <___vfprintf_internal_r+0xa6c>
 800171c:	20803fcc 	andi	r2,r4,255
 8001720:	1080201c 	xori	r2,r2,128
 8001724:	10bfe004 	addi	r2,r2,-128
 8001728:	00c00c04 	movi	r3,48
 800172c:	10fdae26 	beq	r2,r3,8000de8 <___vfprintf_internal_r+0xa6c>
 8001730:	31bfffc4 	addi	r6,r6,-1
 8001734:	d9814115 	stw	r6,1284(sp)
 8001738:	30c00005 	stb	r3,0(r6)
 800173c:	003daa06 	br	8000de8 <___vfprintf_internal_r+0xa6c>
 8001740:	88800068 	cmpgeui	r2,r17,1
 8001744:	10002c1e 	bne	r2,zero,80017f8 <___vfprintf_internal_r+0x147c>
 8001748:	8800021e 	bne	r17,zero,8001754 <___vfprintf_internal_r+0x13d8>
 800174c:	00800244 	movi	r2,9
 8001750:	14002936 	bltu	r2,r16,80017f8 <___vfprintf_internal_r+0x147c>
 8001754:	d90018c4 	addi	r4,sp,99
 8001758:	dd000f04 	addi	r20,sp,60
 800175c:	d9014115 	stw	r4,1284(sp)
 8001760:	d9014117 	ldw	r4,1284(sp)
 8001764:	80800c04 	addi	r2,r16,48
 8001768:	20800005 	stb	r2,0(r4)
 800176c:	003d9e06 	br	8000de8 <___vfprintf_internal_r+0xa6c>
 8001770:	dc400d17 	ldw	r17,52(sp)
 8001774:	07020074 	movhi	fp,2049
 8001778:	e7329584 	addi	fp,fp,-13738
 800177c:	9425883a 	add	r18,r18,r16
 8001780:	8c400044 	addi	r17,r17,1
 8001784:	008001c4 	movi	r2,7
 8001788:	1f000015 	stw	fp,0(r3)
 800178c:	1c000115 	stw	r16,4(r3)
 8001790:	dc800e15 	stw	r18,56(sp)
 8001794:	dc400d15 	stw	r17,52(sp)
 8001798:	147ddc16 	blt	r2,r17,8000f0c <___vfprintf_internal_r+0xb90>
 800179c:	18c00204 	addi	r3,r3,8
 80017a0:	003c7406 	br	8000974 <___vfprintf_internal_r+0x5f8>
 80017a4:	01000084 	movi	r4,2
 80017a8:	d8000405 	stb	zero,16(sp)
 80017ac:	003d8106 	br	8000db4 <___vfprintf_internal_r+0xa38>
 80017b0:	d9814c17 	ldw	r6,1328(sp)
 80017b4:	30c4703a 	and	r2,r6,r3
 80017b8:	1005003a 	cmpeq	r2,r2,zero
 80017bc:	103cb326 	beq	r2,zero,8000a8c <___vfprintf_internal_r+0x710>
 80017c0:	d9014117 	ldw	r4,1284(sp)
 80017c4:	94800044 	addi	r18,r18,1
 80017c8:	8c400044 	addi	r17,r17,1
 80017cc:	008001c4 	movi	r2,7
 80017d0:	a9000015 	stw	r4,0(r21)
 80017d4:	a8c00115 	stw	r3,4(r21)
 80017d8:	dc800e15 	stw	r18,56(sp)
 80017dc:	dc400d15 	stw	r17,52(sp)
 80017e0:	147e6016 	blt	r2,r17,8001164 <___vfprintf_internal_r+0xde8>
 80017e4:	acc00204 	addi	r19,r21,8
 80017e8:	003cd106 	br	8000b30 <___vfprintf_internal_r+0x7b4>
 80017ec:	07020074 	movhi	fp,2049
 80017f0:	e7329584 	addi	fp,fp,-13738
 80017f4:	003c4906 	br	800091c <___vfprintf_internal_r+0x5a0>
 80017f8:	dd000f04 	addi	r20,sp,60
 80017fc:	dc801904 	addi	r18,sp,100
 8001800:	8009883a 	mov	r4,r16
 8001804:	880b883a 	mov	r5,r17
 8001808:	01800284 	movi	r6,10
 800180c:	000f883a 	mov	r7,zero
 8001810:	8007c9c0 	call	8007c9c <__umoddi3>
 8001814:	12000c04 	addi	r8,r2,48
 8001818:	94bfffc4 	addi	r18,r18,-1
 800181c:	8009883a 	mov	r4,r16
 8001820:	880b883a 	mov	r5,r17
 8001824:	01800284 	movi	r6,10
 8001828:	000f883a 	mov	r7,zero
 800182c:	92000005 	stb	r8,0(r18)
 8001830:	80076300 	call	8007630 <__udivdi3>
 8001834:	1009883a 	mov	r4,r2
 8001838:	1021883a 	mov	r16,r2
 800183c:	18800068 	cmpgeui	r2,r3,1
 8001840:	1823883a 	mov	r17,r3
 8001844:	103fee1e 	bne	r2,zero,8001800 <___vfprintf_internal_r+0x1484>
 8001848:	1800021e 	bne	r3,zero,8001854 <___vfprintf_internal_r+0x14d8>
 800184c:	00800244 	movi	r2,9
 8001850:	113feb36 	bltu	r2,r4,8001800 <___vfprintf_internal_r+0x1484>
 8001854:	94bfffc4 	addi	r18,r18,-1
 8001858:	dc814115 	stw	r18,1284(sp)
 800185c:	003fc006 	br	8001760 <___vfprintf_internal_r+0x13e4>
 8001860:	d9014c17 	ldw	r4,1328(sp)
 8001864:	2080004c 	andi	r2,r4,1
 8001868:	10009a1e 	bne	r2,zero,8001ad4 <___vfprintf_internal_r+0x1758>
 800186c:	d9401904 	addi	r5,sp,100
 8001870:	dd000f04 	addi	r20,sp,60
 8001874:	d9414115 	stw	r5,1284(sp)
 8001878:	003d5b06 	br	8000de8 <___vfprintf_internal_r+0xa6c>
 800187c:	d9014f17 	ldw	r4,1340(sp)
 8001880:	b00b883a 	mov	r5,r22
 8001884:	d9800c04 	addi	r6,sp,48
 8001888:	80003240 	call	8000324 <__sprint_r>
 800188c:	103c731e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001890:	dc800e17 	ldw	r18,56(sp)
 8001894:	d8c01904 	addi	r3,sp,100
 8001898:	003cf906 	br	8000c80 <___vfprintf_internal_r+0x904>
 800189c:	d8c14c17 	ldw	r3,1328(sp)
 80018a0:	1880040c 	andi	r2,r3,16
 80018a4:	1000711e 	bne	r2,zero,8001a6c <___vfprintf_internal_r+0x16f0>
 80018a8:	d9014c17 	ldw	r4,1328(sp)
 80018ac:	2080100c 	andi	r2,r4,64
 80018b0:	10006e26 	beq	r2,zero,8001a6c <___vfprintf_internal_r+0x16f0>
 80018b4:	3c00000b 	ldhu	r16,0(r7)
 80018b8:	0023883a 	mov	r17,zero
 80018bc:	39c00104 	addi	r7,r7,4
 80018c0:	d9c14015 	stw	r7,1280(sp)
 80018c4:	003efa06 	br	80014b0 <___vfprintf_internal_r+0x1134>
 80018c8:	dc400d17 	ldw	r17,52(sp)
 80018cc:	07020074 	movhi	fp,2049
 80018d0:	e7329584 	addi	fp,fp,-13738
 80018d4:	9425883a 	add	r18,r18,r16
 80018d8:	8c400044 	addi	r17,r17,1
 80018dc:	008001c4 	movi	r2,7
 80018e0:	1f000015 	stw	fp,0(r3)
 80018e4:	1c000115 	stw	r16,4(r3)
 80018e8:	dc800e15 	stw	r18,56(sp)
 80018ec:	dc400d15 	stw	r17,52(sp)
 80018f0:	147d7016 	blt	r2,r17,8000eb4 <___vfprintf_internal_r+0xb38>
 80018f4:	18c00204 	addi	r3,r3,8
 80018f8:	003d7506 	br	8000ed0 <___vfprintf_internal_r+0xb54>
 80018fc:	dc800e17 	ldw	r18,56(sp)
 8001900:	dc400d17 	ldw	r17,52(sp)
 8001904:	07020074 	movhi	fp,2049
 8001908:	e7329984 	addi	fp,fp,-13722
 800190c:	003bba06 	br	80007f8 <___vfprintf_internal_r+0x47c>
 8001910:	d9014f17 	ldw	r4,1340(sp)
 8001914:	b00b883a 	mov	r5,r22
 8001918:	d9800c04 	addi	r6,sp,48
 800191c:	80003240 	call	8000324 <__sprint_r>
 8001920:	103c4e1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001924:	dc800e17 	ldw	r18,56(sp)
 8001928:	d8c01904 	addi	r3,sp,100
 800192c:	003ce306 	br	8000cbc <___vfprintf_internal_r+0x940>
 8001930:	3c000017 	ldw	r16,0(r7)
 8001934:	0009883a 	mov	r4,zero
 8001938:	39c00104 	addi	r7,r7,4
 800193c:	0023883a 	mov	r17,zero
 8001940:	d9c14015 	stw	r7,1280(sp)
 8001944:	d8000405 	stb	zero,16(sp)
 8001948:	003d1a06 	br	8000db4 <___vfprintf_internal_r+0xa38>
 800194c:	38800017 	ldw	r2,0(r7)
 8001950:	39c00104 	addi	r7,r7,4
 8001954:	d9c14015 	stw	r7,1280(sp)
 8001958:	1023d7fa 	srai	r17,r2,31
 800195c:	1021883a 	mov	r16,r2
 8001960:	003d1206 	br	8000dac <___vfprintf_internal_r+0xa30>
 8001964:	3c000017 	ldw	r16,0(r7)
 8001968:	01000044 	movi	r4,1
 800196c:	39c00104 	addi	r7,r7,4
 8001970:	0023883a 	mov	r17,zero
 8001974:	d9c14015 	stw	r7,1280(sp)
 8001978:	d8000405 	stb	zero,16(sp)
 800197c:	003d0d06 	br	8000db4 <___vfprintf_internal_r+0xa38>
 8001980:	00820074 	movhi	r2,2049
 8001984:	10b29504 	addi	r2,r2,-13740
 8001988:	94800044 	addi	r18,r18,1
 800198c:	8c400044 	addi	r17,r17,1
 8001990:	a8800015 	stw	r2,0(r21)
 8001994:	00c00044 	movi	r3,1
 8001998:	008001c4 	movi	r2,7
 800199c:	a8c00115 	stw	r3,4(r21)
 80019a0:	dc800e15 	stw	r18,56(sp)
 80019a4:	dc400d15 	stw	r17,52(sp)
 80019a8:	1440ca16 	blt	r2,r17,8001cd4 <___vfprintf_internal_r+0x1958>
 80019ac:	a8c00204 	addi	r3,r21,8
 80019b0:	2000061e 	bne	r4,zero,80019cc <___vfprintf_internal_r+0x1650>
 80019b4:	d9414717 	ldw	r5,1308(sp)
 80019b8:	2800041e 	bne	r5,zero,80019cc <___vfprintf_internal_r+0x1650>
 80019bc:	d9814c17 	ldw	r6,1328(sp)
 80019c0:	3080004c 	andi	r2,r6,1
 80019c4:	1005003a 	cmpeq	r2,r2,zero
 80019c8:	103bea1e 	bne	r2,zero,8000974 <___vfprintf_internal_r+0x5f8>
 80019cc:	00800044 	movi	r2,1
 80019d0:	dc400d17 	ldw	r17,52(sp)
 80019d4:	18800115 	stw	r2,4(r3)
 80019d8:	d8814917 	ldw	r2,1316(sp)
 80019dc:	94800044 	addi	r18,r18,1
 80019e0:	8c400044 	addi	r17,r17,1
 80019e4:	18800015 	stw	r2,0(r3)
 80019e8:	008001c4 	movi	r2,7
 80019ec:	dc800e15 	stw	r18,56(sp)
 80019f0:	dc400d15 	stw	r17,52(sp)
 80019f4:	1440ca16 	blt	r2,r17,8001d20 <___vfprintf_internal_r+0x19a4>
 80019f8:	18c00204 	addi	r3,r3,8
 80019fc:	0121c83a 	sub	r16,zero,r4
 8001a00:	0400500e 	bge	zero,r16,8001b44 <___vfprintf_internal_r+0x17c8>
 8001a04:	00800404 	movi	r2,16
 8001a08:	1400800e 	bge	r2,r16,8001c0c <___vfprintf_internal_r+0x1890>
 8001a0c:	1027883a 	mov	r19,r2
 8001a10:	07020074 	movhi	fp,2049
 8001a14:	e7329584 	addi	fp,fp,-13738
 8001a18:	050001c4 	movi	r20,7
 8001a1c:	00000306 	br	8001a2c <___vfprintf_internal_r+0x16b0>
 8001a20:	18c00204 	addi	r3,r3,8
 8001a24:	843ffc04 	addi	r16,r16,-16
 8001a28:	9c007a0e 	bge	r19,r16,8001c14 <___vfprintf_internal_r+0x1898>
 8001a2c:	94800404 	addi	r18,r18,16
 8001a30:	8c400044 	addi	r17,r17,1
 8001a34:	1f000015 	stw	fp,0(r3)
 8001a38:	1cc00115 	stw	r19,4(r3)
 8001a3c:	dc800e15 	stw	r18,56(sp)
 8001a40:	dc400d15 	stw	r17,52(sp)
 8001a44:	a47ff60e 	bge	r20,r17,8001a20 <___vfprintf_internal_r+0x16a4>
 8001a48:	d9014f17 	ldw	r4,1340(sp)
 8001a4c:	b00b883a 	mov	r5,r22
 8001a50:	d9800c04 	addi	r6,sp,48
 8001a54:	80003240 	call	8000324 <__sprint_r>
 8001a58:	103c001e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001a5c:	dc800e17 	ldw	r18,56(sp)
 8001a60:	dc400d17 	ldw	r17,52(sp)
 8001a64:	d8c01904 	addi	r3,sp,100
 8001a68:	003fee06 	br	8001a24 <___vfprintf_internal_r+0x16a8>
 8001a6c:	3c000017 	ldw	r16,0(r7)
 8001a70:	0023883a 	mov	r17,zero
 8001a74:	39c00104 	addi	r7,r7,4
 8001a78:	d9c14015 	stw	r7,1280(sp)
 8001a7c:	003e8c06 	br	80014b0 <___vfprintf_internal_r+0x1134>
 8001a80:	d9401904 	addi	r5,sp,100
 8001a84:	dd000f04 	addi	r20,sp,60
 8001a88:	d9414115 	stw	r5,1284(sp)
 8001a8c:	d9814417 	ldw	r6,1296(sp)
 8001a90:	880a973a 	slli	r5,r17,28
 8001a94:	8004d13a 	srli	r2,r16,4
 8001a98:	810003cc 	andi	r4,r16,15
 8001a9c:	3109883a 	add	r4,r6,r4
 8001aa0:	2884b03a 	or	r2,r5,r2
 8001aa4:	21400003 	ldbu	r5,0(r4)
 8001aa8:	d9014117 	ldw	r4,1284(sp)
 8001aac:	8806d13a 	srli	r3,r17,4
 8001ab0:	1021883a 	mov	r16,r2
 8001ab4:	213fffc4 	addi	r4,r4,-1
 8001ab8:	d9014115 	stw	r4,1284(sp)
 8001abc:	d9814117 	ldw	r6,1284(sp)
 8001ac0:	10c8b03a 	or	r4,r2,r3
 8001ac4:	1823883a 	mov	r17,r3
 8001ac8:	31400005 	stb	r5,0(r6)
 8001acc:	203fef1e 	bne	r4,zero,8001a8c <___vfprintf_internal_r+0x1710>
 8001ad0:	003cc506 	br	8000de8 <___vfprintf_internal_r+0xa6c>
 8001ad4:	00800c04 	movi	r2,48
 8001ad8:	d98018c4 	addi	r6,sp,99
 8001adc:	dd000f04 	addi	r20,sp,60
 8001ae0:	d88018c5 	stb	r2,99(sp)
 8001ae4:	d9814115 	stw	r6,1284(sp)
 8001ae8:	003cbf06 	br	8000de8 <___vfprintf_internal_r+0xa6c>
 8001aec:	dc400d17 	ldw	r17,52(sp)
 8001af0:	07020074 	movhi	fp,2049
 8001af4:	e7329984 	addi	fp,fp,-13722
 8001af8:	003bc106 	br	8000a00 <___vfprintf_internal_r+0x684>
 8001afc:	d9414c17 	ldw	r5,1328(sp)
 8001b00:	2880040c 	andi	r2,r5,16
 8001b04:	10007c26 	beq	r2,zero,8001cf8 <___vfprintf_internal_r+0x197c>
 8001b08:	38800017 	ldw	r2,0(r7)
 8001b0c:	39c00104 	addi	r7,r7,4
 8001b10:	d9c14015 	stw	r7,1280(sp)
 8001b14:	d9814b17 	ldw	r6,1324(sp)
 8001b18:	d9c14017 	ldw	r7,1280(sp)
 8001b1c:	11800015 	stw	r6,0(r2)
 8001b20:	003a7206 	br	80004ec <___vfprintf_internal_r+0x170>
 8001b24:	d9014f17 	ldw	r4,1340(sp)
 8001b28:	b00b883a 	mov	r5,r22
 8001b2c:	d9800c04 	addi	r6,sp,48
 8001b30:	80003240 	call	8000324 <__sprint_r>
 8001b34:	103bc91e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001b38:	dc800e17 	ldw	r18,56(sp)
 8001b3c:	dc400d17 	ldw	r17,52(sp)
 8001b40:	d8c01904 	addi	r3,sp,100
 8001b44:	d9014717 	ldw	r4,1308(sp)
 8001b48:	d9414117 	ldw	r5,1284(sp)
 8001b4c:	8c400044 	addi	r17,r17,1
 8001b50:	9125883a 	add	r18,r18,r4
 8001b54:	008001c4 	movi	r2,7
 8001b58:	19400015 	stw	r5,0(r3)
 8001b5c:	19000115 	stw	r4,4(r3)
 8001b60:	dc800e15 	stw	r18,56(sp)
 8001b64:	dc400d15 	stw	r17,52(sp)
 8001b68:	147ce816 	blt	r2,r17,8000f0c <___vfprintf_internal_r+0xb90>
 8001b6c:	18c00204 	addi	r3,r3,8
 8001b70:	003b8006 	br	8000974 <___vfprintf_internal_r+0x5f8>
 8001b74:	38c00017 	ldw	r3,0(r7)
 8001b78:	39000204 	addi	r4,r7,8
 8001b7c:	d9014015 	stw	r4,1280(sp)
 8001b80:	d8c14215 	stw	r3,1288(sp)
 8001b84:	39c00117 	ldw	r7,4(r7)
 8001b88:	d9c14315 	stw	r7,1292(sp)
 8001b8c:	003e1a06 	br	80013f8 <___vfprintf_internal_r+0x107c>
 8001b90:	0005883a 	mov	r2,zero
 8001b94:	1409c83a 	sub	r4,r2,r16
 8001b98:	1105803a 	cmpltu	r2,r2,r4
 8001b9c:	044bc83a 	sub	r5,zero,r17
 8001ba0:	2885c83a 	sub	r2,r5,r2
 8001ba4:	2021883a 	mov	r16,r4
 8001ba8:	1023883a 	mov	r17,r2
 8001bac:	01000044 	movi	r4,1
 8001bb0:	00800b44 	movi	r2,45
 8001bb4:	d8800405 	stb	r2,16(sp)
 8001bb8:	003c7e06 	br	8000db4 <___vfprintf_internal_r+0xa38>
 8001bbc:	d9014f17 	ldw	r4,1340(sp)
 8001bc0:	b00b883a 	mov	r5,r22
 8001bc4:	d9800c04 	addi	r6,sp,48
 8001bc8:	80003240 	call	8000324 <__sprint_r>
 8001bcc:	103ba31e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001bd0:	dc800e17 	ldw	r18,56(sp)
 8001bd4:	dc400d17 	ldw	r17,52(sp)
 8001bd8:	d9000517 	ldw	r4,20(sp)
 8001bdc:	d9401904 	addi	r5,sp,100
 8001be0:	003da106 	br	8001268 <___vfprintf_internal_r+0xeec>
 8001be4:	d9014f17 	ldw	r4,1340(sp)
 8001be8:	b00b883a 	mov	r5,r22
 8001bec:	d9800c04 	addi	r6,sp,48
 8001bf0:	80003240 	call	8000324 <__sprint_r>
 8001bf4:	103b991e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001bf8:	dc800e17 	ldw	r18,56(sp)
 8001bfc:	dc400d17 	ldw	r17,52(sp)
 8001c00:	d9000517 	ldw	r4,20(sp)
 8001c04:	d8c01904 	addi	r3,sp,100
 8001c08:	003d8b06 	br	8001238 <___vfprintf_internal_r+0xebc>
 8001c0c:	07020074 	movhi	fp,2049
 8001c10:	e7329584 	addi	fp,fp,-13738
 8001c14:	9425883a 	add	r18,r18,r16
 8001c18:	8c400044 	addi	r17,r17,1
 8001c1c:	008001c4 	movi	r2,7
 8001c20:	1f000015 	stw	fp,0(r3)
 8001c24:	1c000115 	stw	r16,4(r3)
 8001c28:	dc800e15 	stw	r18,56(sp)
 8001c2c:	dc400d15 	stw	r17,52(sp)
 8001c30:	147fbc16 	blt	r2,r17,8001b24 <___vfprintf_internal_r+0x17a8>
 8001c34:	18c00204 	addi	r3,r3,8
 8001c38:	003fc206 	br	8001b44 <___vfprintf_internal_r+0x17c8>
 8001c3c:	d9014f17 	ldw	r4,1340(sp)
 8001c40:	b00b883a 	mov	r5,r22
 8001c44:	d9800c04 	addi	r6,sp,48
 8001c48:	80003240 	call	8000324 <__sprint_r>
 8001c4c:	103b831e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001c50:	dc800e17 	ldw	r18,56(sp)
 8001c54:	d9000517 	ldw	r4,20(sp)
 8001c58:	d8c01904 	addi	r3,sp,100
 8001c5c:	003cfc06 	br	8001050 <___vfprintf_internal_r+0xcd4>
 8001c60:	07020074 	movhi	fp,2049
 8001c64:	e7329584 	addi	fp,fp,-13738
 8001c68:	003bde06 	br	8000be4 <___vfprintf_internal_r+0x868>
 8001c6c:	00820074 	movhi	r2,2049
 8001c70:	10b28404 	addi	r2,r2,-13808
 8001c74:	d8814115 	stw	r2,1284(sp)
 8001c78:	003def06 	br	8001438 <___vfprintf_internal_r+0x10bc>
 8001c7c:	d9014217 	ldw	r4,1288(sp)
 8001c80:	d9414317 	ldw	r5,1292(sp)
 8001c84:	8006e6c0 	call	8006e6c <__isnand>
 8001c88:	10003926 	beq	r2,zero,8001d70 <___vfprintf_internal_r+0x19f4>
 8001c8c:	d9414d17 	ldw	r5,1332(sp)
 8001c90:	008011c4 	movi	r2,71
 8001c94:	1140ce16 	blt	r2,r5,8001fd0 <___vfprintf_internal_r+0x1c54>
 8001c98:	01820074 	movhi	r6,2049
 8001c9c:	31b28504 	addi	r6,r6,-13804
 8001ca0:	d9814115 	stw	r6,1284(sp)
 8001ca4:	003de406 	br	8001438 <___vfprintf_internal_r+0x10bc>
 8001ca8:	d9014c17 	ldw	r4,1328(sp)
 8001cac:	bdc00044 	addi	r23,r23,1
 8001cb0:	b8c00007 	ldb	r3,0(r23)
 8001cb4:	21000814 	ori	r4,r4,32
 8001cb8:	d9014c15 	stw	r4,1328(sp)
 8001cbc:	003a2e06 	br	8000578 <___vfprintf_internal_r+0x1fc>
 8001cc0:	dcc14515 	stw	r19,1300(sp)
 8001cc4:	98011016 	blt	r19,zero,8002108 <___vfprintf_internal_r+0x1d8c>
 8001cc8:	980f883a 	mov	r7,r19
 8001ccc:	d8014615 	stw	zero,1304(sp)
 8001cd0:	003c4c06 	br	8000e04 <___vfprintf_internal_r+0xa88>
 8001cd4:	d9014f17 	ldw	r4,1340(sp)
 8001cd8:	b00b883a 	mov	r5,r22
 8001cdc:	d9800c04 	addi	r6,sp,48
 8001ce0:	80003240 	call	8000324 <__sprint_r>
 8001ce4:	103b5d1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001ce8:	dc800e17 	ldw	r18,56(sp)
 8001cec:	d9000517 	ldw	r4,20(sp)
 8001cf0:	d8c01904 	addi	r3,sp,100
 8001cf4:	003f2e06 	br	80019b0 <___vfprintf_internal_r+0x1634>
 8001cf8:	d8c14c17 	ldw	r3,1328(sp)
 8001cfc:	1880100c 	andi	r2,r3,64
 8001d00:	1000a026 	beq	r2,zero,8001f84 <___vfprintf_internal_r+0x1c08>
 8001d04:	38800017 	ldw	r2,0(r7)
 8001d08:	39c00104 	addi	r7,r7,4
 8001d0c:	d9c14015 	stw	r7,1280(sp)
 8001d10:	d9014b17 	ldw	r4,1324(sp)
 8001d14:	d9c14017 	ldw	r7,1280(sp)
 8001d18:	1100000d 	sth	r4,0(r2)
 8001d1c:	0039f306 	br	80004ec <___vfprintf_internal_r+0x170>
 8001d20:	d9014f17 	ldw	r4,1340(sp)
 8001d24:	b00b883a 	mov	r5,r22
 8001d28:	d9800c04 	addi	r6,sp,48
 8001d2c:	80003240 	call	8000324 <__sprint_r>
 8001d30:	103b4a1e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001d34:	dc800e17 	ldw	r18,56(sp)
 8001d38:	dc400d17 	ldw	r17,52(sp)
 8001d3c:	d9000517 	ldw	r4,20(sp)
 8001d40:	d8c01904 	addi	r3,sp,100
 8001d44:	003f2d06 	br	80019fc <___vfprintf_internal_r+0x1680>
 8001d48:	00800184 	movi	r2,6
 8001d4c:	14c09a36 	bltu	r2,r19,8001fb8 <___vfprintf_internal_r+0x1c3c>
 8001d50:	dcc14515 	stw	r19,1300(sp)
 8001d54:	9800010e 	bge	r19,zero,8001d5c <___vfprintf_internal_r+0x19e0>
 8001d58:	d8014515 	stw	zero,1300(sp)
 8001d5c:	00820074 	movhi	r2,2049
 8001d60:	10b28704 	addi	r2,r2,-13796
 8001d64:	980f883a 	mov	r7,r19
 8001d68:	d8814115 	stw	r2,1284(sp)
 8001d6c:	003a7206 	br	8000738 <___vfprintf_internal_r+0x3bc>
 8001d70:	00bfffc4 	movi	r2,-1
 8001d74:	9880e226 	beq	r19,r2,8002100 <___vfprintf_internal_r+0x1d84>
 8001d78:	d9414d17 	ldw	r5,1332(sp)
 8001d7c:	008019c4 	movi	r2,103
 8001d80:	2880dc26 	beq	r5,r2,80020f4 <___vfprintf_internal_r+0x1d78>
 8001d84:	008011c4 	movi	r2,71
 8001d88:	2880da26 	beq	r5,r2,80020f4 <___vfprintf_internal_r+0x1d78>
 8001d8c:	d9414c17 	ldw	r5,1328(sp)
 8001d90:	d9014317 	ldw	r4,1292(sp)
 8001d94:	d9814217 	ldw	r6,1288(sp)
 8001d98:	29404014 	ori	r5,r5,256
 8001d9c:	d9414c15 	stw	r5,1328(sp)
 8001da0:	2000cc16 	blt	r4,zero,80020d4 <___vfprintf_internal_r+0x1d58>
 8001da4:	3021883a 	mov	r16,r6
 8001da8:	2023883a 	mov	r17,r4
 8001dac:	0039883a 	mov	fp,zero
 8001db0:	d9414d17 	ldw	r5,1332(sp)
 8001db4:	00801984 	movi	r2,102
 8001db8:	2880b726 	beq	r5,r2,8002098 <___vfprintf_internal_r+0x1d1c>
 8001dbc:	00801184 	movi	r2,70
 8001dc0:	2880b526 	beq	r5,r2,8002098 <___vfprintf_internal_r+0x1d1c>
 8001dc4:	00801944 	movi	r2,101
 8001dc8:	2880c826 	beq	r5,r2,80020ec <___vfprintf_internal_r+0x1d70>
 8001dcc:	00801144 	movi	r2,69
 8001dd0:	2880c626 	beq	r5,r2,80020ec <___vfprintf_internal_r+0x1d70>
 8001dd4:	9829883a 	mov	r20,r19
 8001dd8:	d9014f17 	ldw	r4,1340(sp)
 8001ddc:	d8800504 	addi	r2,sp,20
 8001de0:	880d883a 	mov	r6,r17
 8001de4:	d8800115 	stw	r2,4(sp)
 8001de8:	d8c00604 	addi	r3,sp,24
 8001dec:	d8800704 	addi	r2,sp,28
 8001df0:	800b883a 	mov	r5,r16
 8001df4:	01c00084 	movi	r7,2
 8001df8:	d8c00215 	stw	r3,8(sp)
 8001dfc:	d8800315 	stw	r2,12(sp)
 8001e00:	dd000015 	stw	r20,0(sp)
 8001e04:	80025e40 	call	80025e4 <_dtoa_r>
 8001e08:	d9814d17 	ldw	r6,1332(sp)
 8001e0c:	d8814115 	stw	r2,1284(sp)
 8001e10:	008019c4 	movi	r2,103
 8001e14:	30809526 	beq	r6,r2,800206c <___vfprintf_internal_r+0x1cf0>
 8001e18:	d8c14d17 	ldw	r3,1332(sp)
 8001e1c:	008011c4 	movi	r2,71
 8001e20:	18809226 	beq	r3,r2,800206c <___vfprintf_internal_r+0x1cf0>
 8001e24:	d9414117 	ldw	r5,1284(sp)
 8001e28:	d9814d17 	ldw	r6,1332(sp)
 8001e2c:	00801984 	movi	r2,102
 8001e30:	2d25883a 	add	r18,r5,r20
 8001e34:	30808626 	beq	r6,r2,8002050 <___vfprintf_internal_r+0x1cd4>
 8001e38:	00801184 	movi	r2,70
 8001e3c:	30808426 	beq	r6,r2,8002050 <___vfprintf_internal_r+0x1cd4>
 8001e40:	000d883a 	mov	r6,zero
 8001e44:	000f883a 	mov	r7,zero
 8001e48:	880b883a 	mov	r5,r17
 8001e4c:	8009883a 	mov	r4,r16
 8001e50:	8008e1c0 	call	8008e1c <__eqdf2>
 8001e54:	1000751e 	bne	r2,zero,800202c <___vfprintf_internal_r+0x1cb0>
 8001e58:	9005883a 	mov	r2,r18
 8001e5c:	dc800715 	stw	r18,28(sp)
 8001e60:	d9014117 	ldw	r4,1284(sp)
 8001e64:	d9414d17 	ldw	r5,1332(sp)
 8001e68:	00c019c4 	movi	r3,103
 8001e6c:	1125c83a 	sub	r18,r2,r4
 8001e70:	28c06826 	beq	r5,r3,8002014 <___vfprintf_internal_r+0x1c98>
 8001e74:	008011c4 	movi	r2,71
 8001e78:	28806626 	beq	r5,r2,8002014 <___vfprintf_internal_r+0x1c98>
 8001e7c:	d9000517 	ldw	r4,20(sp)
 8001e80:	d8c14d17 	ldw	r3,1332(sp)
 8001e84:	00801944 	movi	r2,101
 8001e88:	10c05516 	blt	r2,r3,8001fe0 <___vfprintf_internal_r+0x1c64>
 8001e8c:	213fffc4 	addi	r4,r4,-1
 8001e90:	d9000515 	stw	r4,20(sp)
 8001e94:	d8c00805 	stb	r3,32(sp)
 8001e98:	2021883a 	mov	r16,r4
 8001e9c:	2000c116 	blt	r4,zero,80021a4 <___vfprintf_internal_r+0x1e28>
 8001ea0:	00800ac4 	movi	r2,43
 8001ea4:	d8800845 	stb	r2,33(sp)
 8001ea8:	00800244 	movi	r2,9
 8001eac:	1400af0e 	bge	r2,r16,800216c <___vfprintf_internal_r+0x1df0>
 8001eb0:	1027883a 	mov	r19,r2
 8001eb4:	dc400b84 	addi	r17,sp,46
 8001eb8:	8009883a 	mov	r4,r16
 8001ebc:	01400284 	movi	r5,10
 8001ec0:	80095040 	call	8009504 <__modsi3>
 8001ec4:	10800c04 	addi	r2,r2,48
 8001ec8:	8c7fffc4 	addi	r17,r17,-1
 8001ecc:	8009883a 	mov	r4,r16
 8001ed0:	01400284 	movi	r5,10
 8001ed4:	88800005 	stb	r2,0(r17)
 8001ed8:	80094a40 	call	80094a4 <__divsi3>
 8001edc:	1021883a 	mov	r16,r2
 8001ee0:	98bff516 	blt	r19,r2,8001eb8 <___vfprintf_internal_r+0x1b3c>
 8001ee4:	10c00c04 	addi	r3,r2,48
 8001ee8:	d88009c4 	addi	r2,sp,39
 8001eec:	108001c4 	addi	r2,r2,7
 8001ef0:	897fffc4 	addi	r5,r17,-1
 8001ef4:	88ffffc5 	stb	r3,-1(r17)
 8001ef8:	2880a72e 	bgeu	r5,r2,8002198 <___vfprintf_internal_r+0x1e1c>
 8001efc:	1009883a 	mov	r4,r2
 8001f00:	d9800804 	addi	r6,sp,32
 8001f04:	d8c00884 	addi	r3,sp,34
 8001f08:	28800003 	ldbu	r2,0(r5)
 8001f0c:	29400044 	addi	r5,r5,1
 8001f10:	18800005 	stb	r2,0(r3)
 8001f14:	18c00044 	addi	r3,r3,1
 8001f18:	293ffb36 	bltu	r5,r4,8001f08 <___vfprintf_internal_r+0x1b8c>
 8001f1c:	1987c83a 	sub	r3,r3,r6
 8001f20:	00800044 	movi	r2,1
 8001f24:	d8c14815 	stw	r3,1312(sp)
 8001f28:	90cf883a 	add	r7,r18,r3
 8001f2c:	1480960e 	bge	r2,r18,8002188 <___vfprintf_internal_r+0x1e0c>
 8001f30:	39c00044 	addi	r7,r7,1
 8001f34:	d9c14515 	stw	r7,1300(sp)
 8001f38:	38003416 	blt	r7,zero,800200c <___vfprintf_internal_r+0x1c90>
 8001f3c:	e0803fcc 	andi	r2,fp,255
 8001f40:	1080201c 	xori	r2,r2,128
 8001f44:	10bfe004 	addi	r2,r2,-128
 8001f48:	10004e26 	beq	r2,zero,8002084 <___vfprintf_internal_r+0x1d08>
 8001f4c:	00800b44 	movi	r2,45
 8001f50:	dc814715 	stw	r18,1308(sp)
 8001f54:	d8014615 	stw	zero,1304(sp)
 8001f58:	d8800405 	stb	r2,16(sp)
 8001f5c:	003bab06 	br	8000e0c <___vfprintf_internal_r+0xa90>
 8001f60:	00800b44 	movi	r2,45
 8001f64:	d8800405 	stb	r2,16(sp)
 8001f68:	003d2d06 	br	8001420 <___vfprintf_internal_r+0x10a4>
 8001f6c:	d9014f17 	ldw	r4,1340(sp)
 8001f70:	b00b883a 	mov	r5,r22
 8001f74:	d9800c04 	addi	r6,sp,48
 8001f78:	80003240 	call	8000324 <__sprint_r>
 8001f7c:	103ab71e 	bne	r2,zero,8000a5c <___vfprintf_internal_r+0x6e0>
 8001f80:	003ab506 	br	8000a58 <___vfprintf_internal_r+0x6dc>
 8001f84:	38800017 	ldw	r2,0(r7)
 8001f88:	39c00104 	addi	r7,r7,4
 8001f8c:	d9c14015 	stw	r7,1280(sp)
 8001f90:	d9414b17 	ldw	r5,1324(sp)
 8001f94:	d9c14017 	ldw	r7,1280(sp)
 8001f98:	11400015 	stw	r5,0(r2)
 8001f9c:	00395306 	br	80004ec <___vfprintf_internal_r+0x170>
 8001fa0:	980f883a 	mov	r7,r19
 8001fa4:	dcc14515 	stw	r19,1300(sp)
 8001fa8:	d8014615 	stw	zero,1304(sp)
 8001fac:	003b9506 	br	8000e04 <___vfprintf_internal_r+0xa88>
 8001fb0:	0027883a 	mov	r19,zero
 8001fb4:	00397206 	br	8000580 <___vfprintf_internal_r+0x204>
 8001fb8:	00c20074 	movhi	r3,2049
 8001fbc:	18f28704 	addi	r3,r3,-13796
 8001fc0:	100f883a 	mov	r7,r2
 8001fc4:	d8814515 	stw	r2,1300(sp)
 8001fc8:	d8c14115 	stw	r3,1284(sp)
 8001fcc:	0039da06 	br	8000738 <___vfprintf_internal_r+0x3bc>
 8001fd0:	00820074 	movhi	r2,2049
 8001fd4:	10b28604 	addi	r2,r2,-13800
 8001fd8:	d8814115 	stw	r2,1284(sp)
 8001fdc:	003d1606 	br	8001438 <___vfprintf_internal_r+0x10bc>
 8001fe0:	d9414d17 	ldw	r5,1332(sp)
 8001fe4:	00801984 	movi	r2,102
 8001fe8:	28804926 	beq	r5,r2,8002110 <___vfprintf_internal_r+0x1d94>
 8001fec:	200f883a 	mov	r7,r4
 8001ff0:	24805716 	blt	r4,r18,8002150 <___vfprintf_internal_r+0x1dd4>
 8001ff4:	d9414c17 	ldw	r5,1328(sp)
 8001ff8:	2880004c 	andi	r2,r5,1
 8001ffc:	10000126 	beq	r2,zero,8002004 <___vfprintf_internal_r+0x1c88>
 8002000:	21c00044 	addi	r7,r4,1
 8002004:	d9c14515 	stw	r7,1300(sp)
 8002008:	383fcc0e 	bge	r7,zero,8001f3c <___vfprintf_internal_r+0x1bc0>
 800200c:	d8014515 	stw	zero,1300(sp)
 8002010:	003fca06 	br	8001f3c <___vfprintf_internal_r+0x1bc0>
 8002014:	d9000517 	ldw	r4,20(sp)
 8002018:	00bfff04 	movi	r2,-4
 800201c:	1100480e 	bge	r2,r4,8002140 <___vfprintf_internal_r+0x1dc4>
 8002020:	99004716 	blt	r19,r4,8002140 <___vfprintf_internal_r+0x1dc4>
 8002024:	d8c14d15 	stw	r3,1332(sp)
 8002028:	003ff006 	br	8001fec <___vfprintf_internal_r+0x1c70>
 800202c:	d8800717 	ldw	r2,28(sp)
 8002030:	14bf8b2e 	bgeu	r2,r18,8001e60 <___vfprintf_internal_r+0x1ae4>
 8002034:	9007883a 	mov	r3,r18
 8002038:	01000c04 	movi	r4,48
 800203c:	11000005 	stb	r4,0(r2)
 8002040:	10800044 	addi	r2,r2,1
 8002044:	d8800715 	stw	r2,28(sp)
 8002048:	18bffc1e 	bne	r3,r2,800203c <___vfprintf_internal_r+0x1cc0>
 800204c:	003f8406 	br	8001e60 <___vfprintf_internal_r+0x1ae4>
 8002050:	d8814117 	ldw	r2,1284(sp)
 8002054:	10c00007 	ldb	r3,0(r2)
 8002058:	00800c04 	movi	r2,48
 800205c:	18805b26 	beq	r3,r2,80021cc <___vfprintf_internal_r+0x1e50>
 8002060:	d9000517 	ldw	r4,20(sp)
 8002064:	9125883a 	add	r18,r18,r4
 8002068:	003f7506 	br	8001e40 <___vfprintf_internal_r+0x1ac4>
 800206c:	d9014c17 	ldw	r4,1328(sp)
 8002070:	2080004c 	andi	r2,r4,1
 8002074:	1005003a 	cmpeq	r2,r2,zero
 8002078:	103f6a26 	beq	r2,zero,8001e24 <___vfprintf_internal_r+0x1aa8>
 800207c:	d8800717 	ldw	r2,28(sp)
 8002080:	003f7706 	br	8001e60 <___vfprintf_internal_r+0x1ae4>
 8002084:	d9c14515 	stw	r7,1300(sp)
 8002088:	38004d16 	blt	r7,zero,80021c0 <___vfprintf_internal_r+0x1e44>
 800208c:	dc814715 	stw	r18,1308(sp)
 8002090:	d8014615 	stw	zero,1304(sp)
 8002094:	003b5b06 	br	8000e04 <___vfprintf_internal_r+0xa88>
 8002098:	d9014f17 	ldw	r4,1340(sp)
 800209c:	d8800504 	addi	r2,sp,20
 80020a0:	d8800115 	stw	r2,4(sp)
 80020a4:	d8c00604 	addi	r3,sp,24
 80020a8:	d8800704 	addi	r2,sp,28
 80020ac:	800b883a 	mov	r5,r16
 80020b0:	880d883a 	mov	r6,r17
 80020b4:	01c000c4 	movi	r7,3
 80020b8:	d8c00215 	stw	r3,8(sp)
 80020bc:	d8800315 	stw	r2,12(sp)
 80020c0:	dcc00015 	stw	r19,0(sp)
 80020c4:	9829883a 	mov	r20,r19
 80020c8:	80025e40 	call	80025e4 <_dtoa_r>
 80020cc:	d8814115 	stw	r2,1284(sp)
 80020d0:	003f5106 	br	8001e18 <___vfprintf_internal_r+0x1a9c>
 80020d4:	d8c14217 	ldw	r3,1288(sp)
 80020d8:	d9014317 	ldw	r4,1292(sp)
 80020dc:	07000b44 	movi	fp,45
 80020e0:	1821883a 	mov	r16,r3
 80020e4:	2460003c 	xorhi	r17,r4,32768
 80020e8:	003f3106 	br	8001db0 <___vfprintf_internal_r+0x1a34>
 80020ec:	9d000044 	addi	r20,r19,1
 80020f0:	003f3906 	br	8001dd8 <___vfprintf_internal_r+0x1a5c>
 80020f4:	983f251e 	bne	r19,zero,8001d8c <___vfprintf_internal_r+0x1a10>
 80020f8:	04c00044 	movi	r19,1
 80020fc:	003f2306 	br	8001d8c <___vfprintf_internal_r+0x1a10>
 8002100:	04c00184 	movi	r19,6
 8002104:	003f2106 	br	8001d8c <___vfprintf_internal_r+0x1a10>
 8002108:	d8014515 	stw	zero,1300(sp)
 800210c:	003eee06 	br	8001cc8 <___vfprintf_internal_r+0x194c>
 8002110:	200f883a 	mov	r7,r4
 8002114:	0100370e 	bge	zero,r4,80021f4 <___vfprintf_internal_r+0x1e78>
 8002118:	9800031e 	bne	r19,zero,8002128 <___vfprintf_internal_r+0x1dac>
 800211c:	d9814c17 	ldw	r6,1328(sp)
 8002120:	3080004c 	andi	r2,r6,1
 8002124:	103fb726 	beq	r2,zero,8002004 <___vfprintf_internal_r+0x1c88>
 8002128:	20800044 	addi	r2,r4,1
 800212c:	98a7883a 	add	r19,r19,r2
 8002130:	dcc14515 	stw	r19,1300(sp)
 8002134:	980f883a 	mov	r7,r19
 8002138:	983f800e 	bge	r19,zero,8001f3c <___vfprintf_internal_r+0x1bc0>
 800213c:	003fb306 	br	800200c <___vfprintf_internal_r+0x1c90>
 8002140:	d9814d17 	ldw	r6,1332(sp)
 8002144:	31bfff84 	addi	r6,r6,-2
 8002148:	d9814d15 	stw	r6,1332(sp)
 800214c:	003f4c06 	br	8001e80 <___vfprintf_internal_r+0x1b04>
 8002150:	0100180e 	bge	zero,r4,80021b4 <___vfprintf_internal_r+0x1e38>
 8002154:	00800044 	movi	r2,1
 8002158:	1485883a 	add	r2,r2,r18
 800215c:	d8814515 	stw	r2,1300(sp)
 8002160:	100f883a 	mov	r7,r2
 8002164:	103f750e 	bge	r2,zero,8001f3c <___vfprintf_internal_r+0x1bc0>
 8002168:	003fa806 	br	800200c <___vfprintf_internal_r+0x1c90>
 800216c:	80c00c04 	addi	r3,r16,48
 8002170:	00800c04 	movi	r2,48
 8002174:	d8c008c5 	stb	r3,35(sp)
 8002178:	d9800804 	addi	r6,sp,32
 800217c:	d8c00904 	addi	r3,sp,36
 8002180:	d8800885 	stb	r2,34(sp)
 8002184:	003f6506 	br	8001f1c <___vfprintf_internal_r+0x1ba0>
 8002188:	d9014c17 	ldw	r4,1328(sp)
 800218c:	2084703a 	and	r2,r4,r2
 8002190:	103f9c26 	beq	r2,zero,8002004 <___vfprintf_internal_r+0x1c88>
 8002194:	003f6606 	br	8001f30 <___vfprintf_internal_r+0x1bb4>
 8002198:	d9800804 	addi	r6,sp,32
 800219c:	d8c00884 	addi	r3,sp,34
 80021a0:	003f5e06 	br	8001f1c <___vfprintf_internal_r+0x1ba0>
 80021a4:	00800b44 	movi	r2,45
 80021a8:	0121c83a 	sub	r16,zero,r4
 80021ac:	d8800845 	stb	r2,33(sp)
 80021b0:	003f3d06 	br	8001ea8 <___vfprintf_internal_r+0x1b2c>
 80021b4:	00800084 	movi	r2,2
 80021b8:	1105c83a 	sub	r2,r2,r4
 80021bc:	003fe606 	br	8002158 <___vfprintf_internal_r+0x1ddc>
 80021c0:	d8014515 	stw	zero,1300(sp)
 80021c4:	dc814715 	stw	r18,1308(sp)
 80021c8:	003fb106 	br	8002090 <___vfprintf_internal_r+0x1d14>
 80021cc:	000d883a 	mov	r6,zero
 80021d0:	000f883a 	mov	r7,zero
 80021d4:	8009883a 	mov	r4,r16
 80021d8:	880b883a 	mov	r5,r17
 80021dc:	8008ea40 	call	8008ea4 <__nedf2>
 80021e0:	103f9f26 	beq	r2,zero,8002060 <___vfprintf_internal_r+0x1ce4>
 80021e4:	00800044 	movi	r2,1
 80021e8:	1509c83a 	sub	r4,r2,r20
 80021ec:	d9000515 	stw	r4,20(sp)
 80021f0:	003f9b06 	br	8002060 <___vfprintf_internal_r+0x1ce4>
 80021f4:	98000d1e 	bne	r19,zero,800222c <___vfprintf_internal_r+0x1eb0>
 80021f8:	d8c14c17 	ldw	r3,1328(sp)
 80021fc:	1880004c 	andi	r2,r3,1
 8002200:	10000a1e 	bne	r2,zero,800222c <___vfprintf_internal_r+0x1eb0>
 8002204:	01000044 	movi	r4,1
 8002208:	200f883a 	mov	r7,r4
 800220c:	d9014515 	stw	r4,1300(sp)
 8002210:	003f4a06 	br	8001f3c <___vfprintf_internal_r+0x1bc0>
 8002214:	3cc00017 	ldw	r19,0(r7)
 8002218:	39c00104 	addi	r7,r7,4
 800221c:	983d0e0e 	bge	r19,zero,8001658 <___vfprintf_internal_r+0x12dc>
 8002220:	b8c00007 	ldb	r3,0(r23)
 8002224:	04ffffc4 	movi	r19,-1
 8002228:	0038d306 	br	8000578 <___vfprintf_internal_r+0x1fc>
 800222c:	9cc00084 	addi	r19,r19,2
 8002230:	dcc14515 	stw	r19,1300(sp)
 8002234:	980f883a 	mov	r7,r19
 8002238:	983f400e 	bge	r19,zero,8001f3c <___vfprintf_internal_r+0x1bc0>
 800223c:	003f7306 	br	800200c <___vfprintf_internal_r+0x1c90>

08002240 <__vfprintf_internal>:
 8002240:	00820074 	movhi	r2,2049
 8002244:	10ba1404 	addi	r2,r2,-6064
 8002248:	2013883a 	mov	r9,r4
 800224c:	11000017 	ldw	r4,0(r2)
 8002250:	2805883a 	mov	r2,r5
 8002254:	300f883a 	mov	r7,r6
 8002258:	480b883a 	mov	r5,r9
 800225c:	100d883a 	mov	r6,r2
 8002260:	800037c1 	jmpi	800037c <___vfprintf_internal_r>

08002264 <__swsetup_r>:
 8002264:	00820074 	movhi	r2,2049
 8002268:	10ba1404 	addi	r2,r2,-6064
 800226c:	10c00017 	ldw	r3,0(r2)
 8002270:	defffd04 	addi	sp,sp,-12
 8002274:	dc400115 	stw	r17,4(sp)
 8002278:	dc000015 	stw	r16,0(sp)
 800227c:	dfc00215 	stw	ra,8(sp)
 8002280:	2023883a 	mov	r17,r4
 8002284:	2821883a 	mov	r16,r5
 8002288:	18000226 	beq	r3,zero,8002294 <__swsetup_r+0x30>
 800228c:	18800e17 	ldw	r2,56(r3)
 8002290:	10001f26 	beq	r2,zero,8002310 <__swsetup_r+0xac>
 8002294:	8100030b 	ldhu	r4,12(r16)
 8002298:	2080020c 	andi	r2,r4,8
 800229c:	10002826 	beq	r2,zero,8002340 <__swsetup_r+0xdc>
 80022a0:	81400417 	ldw	r5,16(r16)
 80022a4:	28001d26 	beq	r5,zero,800231c <__swsetup_r+0xb8>
 80022a8:	2080004c 	andi	r2,r4,1
 80022ac:	1005003a 	cmpeq	r2,r2,zero
 80022b0:	10000b26 	beq	r2,zero,80022e0 <__swsetup_r+0x7c>
 80022b4:	2080008c 	andi	r2,r4,2
 80022b8:	10001226 	beq	r2,zero,8002304 <__swsetup_r+0xa0>
 80022bc:	0005883a 	mov	r2,zero
 80022c0:	80800215 	stw	r2,8(r16)
 80022c4:	28000b26 	beq	r5,zero,80022f4 <__swsetup_r+0x90>
 80022c8:	0005883a 	mov	r2,zero
 80022cc:	dfc00217 	ldw	ra,8(sp)
 80022d0:	dc400117 	ldw	r17,4(sp)
 80022d4:	dc000017 	ldw	r16,0(sp)
 80022d8:	dec00304 	addi	sp,sp,12
 80022dc:	f800283a 	ret
 80022e0:	80800517 	ldw	r2,20(r16)
 80022e4:	80000215 	stw	zero,8(r16)
 80022e8:	0085c83a 	sub	r2,zero,r2
 80022ec:	80800615 	stw	r2,24(r16)
 80022f0:	283ff51e 	bne	r5,zero,80022c8 <__swsetup_r+0x64>
 80022f4:	2080200c 	andi	r2,r4,128
 80022f8:	103ff326 	beq	r2,zero,80022c8 <__swsetup_r+0x64>
 80022fc:	00bfffc4 	movi	r2,-1
 8002300:	003ff206 	br	80022cc <__swsetup_r+0x68>
 8002304:	80800517 	ldw	r2,20(r16)
 8002308:	80800215 	stw	r2,8(r16)
 800230c:	003fed06 	br	80022c4 <__swsetup_r+0x60>
 8002310:	1809883a 	mov	r4,r3
 8002314:	8003e300 	call	8003e30 <__sinit>
 8002318:	003fde06 	br	8002294 <__swsetup_r+0x30>
 800231c:	20c0a00c 	andi	r3,r4,640
 8002320:	00808004 	movi	r2,512
 8002324:	18bfe026 	beq	r3,r2,80022a8 <__swsetup_r+0x44>
 8002328:	8809883a 	mov	r4,r17
 800232c:	800b883a 	mov	r5,r16
 8002330:	8004bdc0 	call	8004bdc <__smakebuf_r>
 8002334:	8100030b 	ldhu	r4,12(r16)
 8002338:	81400417 	ldw	r5,16(r16)
 800233c:	003fda06 	br	80022a8 <__swsetup_r+0x44>
 8002340:	2080040c 	andi	r2,r4,16
 8002344:	103fed26 	beq	r2,zero,80022fc <__swsetup_r+0x98>
 8002348:	2080010c 	andi	r2,r4,4
 800234c:	10001226 	beq	r2,zero,8002398 <__swsetup_r+0x134>
 8002350:	81400c17 	ldw	r5,48(r16)
 8002354:	28000526 	beq	r5,zero,800236c <__swsetup_r+0x108>
 8002358:	80801004 	addi	r2,r16,64
 800235c:	28800226 	beq	r5,r2,8002368 <__swsetup_r+0x104>
 8002360:	8809883a 	mov	r4,r17
 8002364:	80041e80 	call	80041e8 <_free_r>
 8002368:	80000c15 	stw	zero,48(r16)
 800236c:	8080030b 	ldhu	r2,12(r16)
 8002370:	81400417 	ldw	r5,16(r16)
 8002374:	80000115 	stw	zero,4(r16)
 8002378:	10bff6cc 	andi	r2,r2,65499
 800237c:	8080030d 	sth	r2,12(r16)
 8002380:	81400015 	stw	r5,0(r16)
 8002384:	8080030b 	ldhu	r2,12(r16)
 8002388:	10800214 	ori	r2,r2,8
 800238c:	113fffcc 	andi	r4,r2,65535
 8002390:	8080030d 	sth	r2,12(r16)
 8002394:	003fc306 	br	80022a4 <__swsetup_r+0x40>
 8002398:	81400417 	ldw	r5,16(r16)
 800239c:	003ff906 	br	8002384 <__swsetup_r+0x120>

080023a0 <quorem>:
 80023a0:	28c00417 	ldw	r3,16(r5)
 80023a4:	20800417 	ldw	r2,16(r4)
 80023a8:	defff104 	addi	sp,sp,-60
 80023ac:	dfc00e15 	stw	ra,56(sp)
 80023b0:	df000d15 	stw	fp,52(sp)
 80023b4:	ddc00c15 	stw	r23,48(sp)
 80023b8:	dd800b15 	stw	r22,44(sp)
 80023bc:	dd400a15 	stw	r21,40(sp)
 80023c0:	dd000915 	stw	r20,36(sp)
 80023c4:	dcc00815 	stw	r19,32(sp)
 80023c8:	dc800715 	stw	r18,28(sp)
 80023cc:	dc400615 	stw	r17,24(sp)
 80023d0:	dc000515 	stw	r16,20(sp)
 80023d4:	d9000315 	stw	r4,12(sp)
 80023d8:	d9400415 	stw	r5,16(sp)
 80023dc:	10c07f16 	blt	r2,r3,80025dc <quorem+0x23c>
 80023e0:	1d3fffc4 	addi	r20,r3,-1
 80023e4:	d8c00417 	ldw	r3,16(sp)
 80023e8:	d9000317 	ldw	r4,12(sp)
 80023ec:	a505883a 	add	r2,r20,r20
 80023f0:	1085883a 	add	r2,r2,r2
 80023f4:	1cc00504 	addi	r19,r3,20
 80023f8:	25c00504 	addi	r23,r4,20
 80023fc:	98ad883a 	add	r22,r19,r2
 8002400:	15c7883a 	add	r3,r2,r23
 8002404:	b1400017 	ldw	r5,0(r22)
 8002408:	19000017 	ldw	r4,0(r3)
 800240c:	d8c00015 	stw	r3,0(sp)
 8002410:	29400044 	addi	r5,r5,1
 8002414:	d9000215 	stw	r4,8(sp)
 8002418:	80095640 	call	8009564 <__udivsi3>
 800241c:	1039883a 	mov	fp,r2
 8002420:	10003d1e 	bne	r2,zero,8002518 <quorem+0x178>
 8002424:	d9400417 	ldw	r5,16(sp)
 8002428:	d9000317 	ldw	r4,12(sp)
 800242c:	80059080 	call	8005908 <__mcmp>
 8002430:	10002c16 	blt	r2,zero,80024e4 <quorem+0x144>
 8002434:	e7000044 	addi	fp,fp,1
 8002438:	b80f883a 	mov	r7,r23
 800243c:	0011883a 	mov	r8,zero
 8002440:	0009883a 	mov	r4,zero
 8002444:	99400017 	ldw	r5,0(r19)
 8002448:	38c00017 	ldw	r3,0(r7)
 800244c:	9cc00104 	addi	r19,r19,4
 8002450:	28bfffcc 	andi	r2,r5,65535
 8002454:	2085883a 	add	r2,r4,r2
 8002458:	11bfffcc 	andi	r6,r2,65535
 800245c:	193fffcc 	andi	r4,r3,65535
 8002460:	1004d43a 	srli	r2,r2,16
 8002464:	280ad43a 	srli	r5,r5,16
 8002468:	2189c83a 	sub	r4,r4,r6
 800246c:	2209883a 	add	r4,r4,r8
 8002470:	1806d43a 	srli	r3,r3,16
 8002474:	288b883a 	add	r5,r5,r2
 8002478:	200dd43a 	srai	r6,r4,16
 800247c:	28bfffcc 	andi	r2,r5,65535
 8002480:	1887c83a 	sub	r3,r3,r2
 8002484:	1987883a 	add	r3,r3,r6
 8002488:	3900000d 	sth	r4,0(r7)
 800248c:	38c0008d 	sth	r3,2(r7)
 8002490:	2808d43a 	srli	r4,r5,16
 8002494:	39c00104 	addi	r7,r7,4
 8002498:	1811d43a 	srai	r8,r3,16
 800249c:	b4ffe92e 	bgeu	r22,r19,8002444 <quorem+0xa4>
 80024a0:	a505883a 	add	r2,r20,r20
 80024a4:	1085883a 	add	r2,r2,r2
 80024a8:	b885883a 	add	r2,r23,r2
 80024ac:	10c00017 	ldw	r3,0(r2)
 80024b0:	18000c1e 	bne	r3,zero,80024e4 <quorem+0x144>
 80024b4:	113fff04 	addi	r4,r2,-4
 80024b8:	b900082e 	bgeu	r23,r4,80024dc <quorem+0x13c>
 80024bc:	10bfff17 	ldw	r2,-4(r2)
 80024c0:	10000326 	beq	r2,zero,80024d0 <quorem+0x130>
 80024c4:	00000506 	br	80024dc <quorem+0x13c>
 80024c8:	20800017 	ldw	r2,0(r4)
 80024cc:	1000031e 	bne	r2,zero,80024dc <quorem+0x13c>
 80024d0:	213fff04 	addi	r4,r4,-4
 80024d4:	a53fffc4 	addi	r20,r20,-1
 80024d8:	b93ffb36 	bltu	r23,r4,80024c8 <quorem+0x128>
 80024dc:	d9000317 	ldw	r4,12(sp)
 80024e0:	25000415 	stw	r20,16(r4)
 80024e4:	e005883a 	mov	r2,fp
 80024e8:	dfc00e17 	ldw	ra,56(sp)
 80024ec:	df000d17 	ldw	fp,52(sp)
 80024f0:	ddc00c17 	ldw	r23,48(sp)
 80024f4:	dd800b17 	ldw	r22,44(sp)
 80024f8:	dd400a17 	ldw	r21,40(sp)
 80024fc:	dd000917 	ldw	r20,36(sp)
 8002500:	dcc00817 	ldw	r19,32(sp)
 8002504:	dc800717 	ldw	r18,28(sp)
 8002508:	dc400617 	ldw	r17,24(sp)
 800250c:	dc000517 	ldw	r16,20(sp)
 8002510:	dec00f04 	addi	sp,sp,60
 8002514:	f800283a 	ret
 8002518:	b823883a 	mov	r17,r23
 800251c:	9825883a 	mov	r18,r19
 8002520:	d8000115 	stw	zero,4(sp)
 8002524:	002b883a 	mov	r21,zero
 8002528:	94000017 	ldw	r16,0(r18)
 800252c:	e009883a 	mov	r4,fp
 8002530:	94800104 	addi	r18,r18,4
 8002534:	817fffcc 	andi	r5,r16,65535
 8002538:	80095740 	call	8009574 <__mulsi3>
 800253c:	800ad43a 	srli	r5,r16,16
 8002540:	e009883a 	mov	r4,fp
 8002544:	a8a1883a 	add	r16,r21,r2
 8002548:	80095740 	call	8009574 <__mulsi3>
 800254c:	89000017 	ldw	r4,0(r17)
 8002550:	80ffffcc 	andi	r3,r16,65535
 8002554:	8020d43a 	srli	r16,r16,16
 8002558:	217fffcc 	andi	r5,r4,65535
 800255c:	28cbc83a 	sub	r5,r5,r3
 8002560:	d8c00117 	ldw	r3,4(sp)
 8002564:	2008d43a 	srli	r4,r4,16
 8002568:	1405883a 	add	r2,r2,r16
 800256c:	28cb883a 	add	r5,r5,r3
 8002570:	280dd43a 	srai	r6,r5,16
 8002574:	10ffffcc 	andi	r3,r2,65535
 8002578:	20c9c83a 	sub	r4,r4,r3
 800257c:	2189883a 	add	r4,r4,r6
 8002580:	8900008d 	sth	r4,2(r17)
 8002584:	2009d43a 	srai	r4,r4,16
 8002588:	8940000d 	sth	r5,0(r17)
 800258c:	102ad43a 	srli	r21,r2,16
 8002590:	8c400104 	addi	r17,r17,4
 8002594:	d9000115 	stw	r4,4(sp)
 8002598:	b4bfe32e 	bgeu	r22,r18,8002528 <quorem+0x188>
 800259c:	d9000217 	ldw	r4,8(sp)
 80025a0:	203fa01e 	bne	r4,zero,8002424 <quorem+0x84>
 80025a4:	d8800017 	ldw	r2,0(sp)
 80025a8:	10ffff04 	addi	r3,r2,-4
 80025ac:	b8c0082e 	bgeu	r23,r3,80025d0 <quorem+0x230>
 80025b0:	10bfff17 	ldw	r2,-4(r2)
 80025b4:	10000326 	beq	r2,zero,80025c4 <quorem+0x224>
 80025b8:	00000506 	br	80025d0 <quorem+0x230>
 80025bc:	18800017 	ldw	r2,0(r3)
 80025c0:	1000031e 	bne	r2,zero,80025d0 <quorem+0x230>
 80025c4:	18ffff04 	addi	r3,r3,-4
 80025c8:	a53fffc4 	addi	r20,r20,-1
 80025cc:	b8fffb36 	bltu	r23,r3,80025bc <quorem+0x21c>
 80025d0:	d8c00317 	ldw	r3,12(sp)
 80025d4:	1d000415 	stw	r20,16(r3)
 80025d8:	003f9206 	br	8002424 <quorem+0x84>
 80025dc:	0005883a 	mov	r2,zero
 80025e0:	003fc106 	br	80024e8 <quorem+0x148>

080025e4 <_dtoa_r>:
 80025e4:	22001017 	ldw	r8,64(r4)
 80025e8:	deffda04 	addi	sp,sp,-152
 80025ec:	dd402115 	stw	r21,132(sp)
 80025f0:	dd002015 	stw	r20,128(sp)
 80025f4:	dc801e15 	stw	r18,120(sp)
 80025f8:	dc401d15 	stw	r17,116(sp)
 80025fc:	dfc02515 	stw	ra,148(sp)
 8002600:	df002415 	stw	fp,144(sp)
 8002604:	ddc02315 	stw	r23,140(sp)
 8002608:	dd802215 	stw	r22,136(sp)
 800260c:	dcc01f15 	stw	r19,124(sp)
 8002610:	dc001c15 	stw	r16,112(sp)
 8002614:	d9001615 	stw	r4,88(sp)
 8002618:	3023883a 	mov	r17,r6
 800261c:	2829883a 	mov	r20,r5
 8002620:	d9c01715 	stw	r7,92(sp)
 8002624:	dc802817 	ldw	r18,160(sp)
 8002628:	302b883a 	mov	r21,r6
 800262c:	40000a26 	beq	r8,zero,8002658 <_dtoa_r+0x74>
 8002630:	20801117 	ldw	r2,68(r4)
 8002634:	400b883a 	mov	r5,r8
 8002638:	40800115 	stw	r2,4(r8)
 800263c:	20c01117 	ldw	r3,68(r4)
 8002640:	00800044 	movi	r2,1
 8002644:	10c4983a 	sll	r2,r2,r3
 8002648:	40800215 	stw	r2,8(r8)
 800264c:	80057ac0 	call	80057ac <_Bfree>
 8002650:	d8c01617 	ldw	r3,88(sp)
 8002654:	18001015 	stw	zero,64(r3)
 8002658:	8800a316 	blt	r17,zero,80028e8 <_dtoa_r+0x304>
 800265c:	90000015 	stw	zero,0(r18)
 8002660:	a8dffc2c 	andhi	r3,r21,32752
 8002664:	009ffc34 	movhi	r2,32752
 8002668:	18809126 	beq	r3,r2,80028b0 <_dtoa_r+0x2cc>
 800266c:	000d883a 	mov	r6,zero
 8002670:	000f883a 	mov	r7,zero
 8002674:	a009883a 	mov	r4,r20
 8002678:	a80b883a 	mov	r5,r21
 800267c:	dd001215 	stw	r20,72(sp)
 8002680:	dd401315 	stw	r21,76(sp)
 8002684:	8008ea40 	call	8008ea4 <__nedf2>
 8002688:	1000171e 	bne	r2,zero,80026e8 <_dtoa_r+0x104>
 800268c:	d9802717 	ldw	r6,156(sp)
 8002690:	00800044 	movi	r2,1
 8002694:	30800015 	stw	r2,0(r6)
 8002698:	d8802917 	ldw	r2,164(sp)
 800269c:	10029b26 	beq	r2,zero,800310c <_dtoa_r+0xb28>
 80026a0:	d9002917 	ldw	r4,164(sp)
 80026a4:	00820074 	movhi	r2,2049
 80026a8:	10b29544 	addi	r2,r2,-13739
 80026ac:	10ffffc4 	addi	r3,r2,-1
 80026b0:	20800015 	stw	r2,0(r4)
 80026b4:	1805883a 	mov	r2,r3
 80026b8:	dfc02517 	ldw	ra,148(sp)
 80026bc:	df002417 	ldw	fp,144(sp)
 80026c0:	ddc02317 	ldw	r23,140(sp)
 80026c4:	dd802217 	ldw	r22,136(sp)
 80026c8:	dd402117 	ldw	r21,132(sp)
 80026cc:	dd002017 	ldw	r20,128(sp)
 80026d0:	dcc01f17 	ldw	r19,124(sp)
 80026d4:	dc801e17 	ldw	r18,120(sp)
 80026d8:	dc401d17 	ldw	r17,116(sp)
 80026dc:	dc001c17 	ldw	r16,112(sp)
 80026e0:	dec02604 	addi	sp,sp,152
 80026e4:	f800283a 	ret
 80026e8:	d9001617 	ldw	r4,88(sp)
 80026ec:	d9401217 	ldw	r5,72(sp)
 80026f0:	d8800104 	addi	r2,sp,4
 80026f4:	a80d883a 	mov	r6,r21
 80026f8:	d9c00204 	addi	r7,sp,8
 80026fc:	d8800015 	stw	r2,0(sp)
 8002700:	8005de80 	call	8005de8 <__d2b>
 8002704:	d8800715 	stw	r2,28(sp)
 8002708:	a804d53a 	srli	r2,r21,20
 800270c:	1101ffcc 	andi	r4,r2,2047
 8002710:	20008626 	beq	r4,zero,800292c <_dtoa_r+0x348>
 8002714:	d8c01217 	ldw	r3,72(sp)
 8002718:	00800434 	movhi	r2,16
 800271c:	10bfffc4 	addi	r2,r2,-1
 8002720:	ddc00117 	ldw	r23,4(sp)
 8002724:	a884703a 	and	r2,r21,r2
 8002728:	1811883a 	mov	r8,r3
 800272c:	124ffc34 	orhi	r9,r2,16368
 8002730:	25bf0044 	addi	r22,r4,-1023
 8002734:	d8000815 	stw	zero,32(sp)
 8002738:	0005883a 	mov	r2,zero
 800273c:	00cffe34 	movhi	r3,16376
 8002740:	480b883a 	mov	r5,r9
 8002744:	4009883a 	mov	r4,r8
 8002748:	180f883a 	mov	r7,r3
 800274c:	100d883a 	mov	r6,r2
 8002750:	800870c0 	call	800870c <__subdf3>
 8002754:	0218dbf4 	movhi	r8,25455
 8002758:	4210d844 	addi	r8,r8,17249
 800275c:	024ff4f4 	movhi	r9,16339
 8002760:	4a61e9c4 	addi	r9,r9,-30809
 8002764:	480f883a 	mov	r7,r9
 8002768:	400d883a 	mov	r6,r8
 800276c:	180b883a 	mov	r5,r3
 8002770:	1009883a 	mov	r4,r2
 8002774:	80088000 	call	8008800 <__muldf3>
 8002778:	0222d874 	movhi	r8,35681
 800277c:	42322cc4 	addi	r8,r8,-14157
 8002780:	024ff1f4 	movhi	r9,16327
 8002784:	4a628a04 	addi	r9,r9,-30168
 8002788:	480f883a 	mov	r7,r9
 800278c:	400d883a 	mov	r6,r8
 8002790:	180b883a 	mov	r5,r3
 8002794:	1009883a 	mov	r4,r2
 8002798:	800878c0 	call	800878c <__adddf3>
 800279c:	b009883a 	mov	r4,r22
 80027a0:	1021883a 	mov	r16,r2
 80027a4:	1823883a 	mov	r17,r3
 80027a8:	80090c40 	call	80090c4 <__floatsidf>
 80027ac:	021427f4 	movhi	r8,20639
 80027b0:	421e7ec4 	addi	r8,r8,31227
 80027b4:	024ff4f4 	movhi	r9,16339
 80027b8:	4a5104c4 	addi	r9,r9,17427
 80027bc:	480f883a 	mov	r7,r9
 80027c0:	400d883a 	mov	r6,r8
 80027c4:	180b883a 	mov	r5,r3
 80027c8:	1009883a 	mov	r4,r2
 80027cc:	80088000 	call	8008800 <__muldf3>
 80027d0:	180f883a 	mov	r7,r3
 80027d4:	880b883a 	mov	r5,r17
 80027d8:	100d883a 	mov	r6,r2
 80027dc:	8009883a 	mov	r4,r16
 80027e0:	800878c0 	call	800878c <__adddf3>
 80027e4:	1009883a 	mov	r4,r2
 80027e8:	180b883a 	mov	r5,r3
 80027ec:	1021883a 	mov	r16,r2
 80027f0:	1823883a 	mov	r17,r3
 80027f4:	80091bc0 	call	80091bc <__fixdfsi>
 80027f8:	000d883a 	mov	r6,zero
 80027fc:	000f883a 	mov	r7,zero
 8002800:	8009883a 	mov	r4,r16
 8002804:	880b883a 	mov	r5,r17
 8002808:	d8800d15 	stw	r2,52(sp)
 800280c:	800903c0 	call	800903c <__ltdf2>
 8002810:	10031716 	blt	r2,zero,8003470 <_dtoa_r+0xe8c>
 8002814:	d8c00d17 	ldw	r3,52(sp)
 8002818:	00800584 	movi	r2,22
 800281c:	10c1482e 	bgeu	r2,r3,8002d40 <_dtoa_r+0x75c>
 8002820:	01000044 	movi	r4,1
 8002824:	d9000c15 	stw	r4,48(sp)
 8002828:	bd85c83a 	sub	r2,r23,r22
 800282c:	11bfffc4 	addi	r6,r2,-1
 8002830:	30030b16 	blt	r6,zero,8003460 <_dtoa_r+0xe7c>
 8002834:	d9800a15 	stw	r6,40(sp)
 8002838:	d8001115 	stw	zero,68(sp)
 800283c:	d8c00d17 	ldw	r3,52(sp)
 8002840:	1802ff16 	blt	r3,zero,8003440 <_dtoa_r+0xe5c>
 8002844:	d9000a17 	ldw	r4,40(sp)
 8002848:	d8c00915 	stw	r3,36(sp)
 800284c:	d8001015 	stw	zero,64(sp)
 8002850:	20c9883a 	add	r4,r4,r3
 8002854:	d9000a15 	stw	r4,40(sp)
 8002858:	d9001717 	ldw	r4,92(sp)
 800285c:	00800244 	movi	r2,9
 8002860:	11004636 	bltu	r2,r4,800297c <_dtoa_r+0x398>
 8002864:	00800144 	movi	r2,5
 8002868:	11020416 	blt	r2,r4,800307c <_dtoa_r+0xa98>
 800286c:	04400044 	movi	r17,1
 8002870:	d8c01717 	ldw	r3,92(sp)
 8002874:	00800144 	movi	r2,5
 8002878:	10c1ed36 	bltu	r2,r3,8003030 <_dtoa_r+0xa4c>
 800287c:	18c5883a 	add	r2,r3,r3
 8002880:	1085883a 	add	r2,r2,r2
 8002884:	00c20034 	movhi	r3,2048
 8002888:	18ca2604 	addi	r3,r3,10392
 800288c:	10c5883a 	add	r2,r2,r3
 8002890:	11000017 	ldw	r4,0(r2)
 8002894:	2000683a 	jmp	r4
 8002898:	08002984 	addi	zero,at,166
 800289c:	08002984 	addi	zero,at,166
 80028a0:	08003384 	addi	zero,at,206
 80028a4:	0800335c 	xori	zero,at,205
 80028a8:	080033a0 	cmpeqi	zero,at,206
 80028ac:	080033ac 	andhi	zero,at,206
 80028b0:	d9002717 	ldw	r4,156(sp)
 80028b4:	0089c3c4 	movi	r2,9999
 80028b8:	20800015 	stw	r2,0(r4)
 80028bc:	a0001026 	beq	r20,zero,8002900 <_dtoa_r+0x31c>
 80028c0:	00c20074 	movhi	r3,2049
 80028c4:	18f2a104 	addi	r3,r3,-13692
 80028c8:	d9802917 	ldw	r6,164(sp)
 80028cc:	303f7926 	beq	r6,zero,80026b4 <_dtoa_r+0xd0>
 80028d0:	188000c7 	ldb	r2,3(r3)
 80028d4:	190000c4 	addi	r4,r3,3
 80028d8:	1000101e 	bne	r2,zero,800291c <_dtoa_r+0x338>
 80028dc:	d8802917 	ldw	r2,164(sp)
 80028e0:	11000015 	stw	r4,0(r2)
 80028e4:	003f7306 	br	80026b4 <_dtoa_r+0xd0>
 80028e8:	00a00034 	movhi	r2,32768
 80028ec:	10bfffc4 	addi	r2,r2,-1
 80028f0:	00c00044 	movi	r3,1
 80028f4:	88aa703a 	and	r21,r17,r2
 80028f8:	90c00015 	stw	r3,0(r18)
 80028fc:	003f5806 	br	8002660 <_dtoa_r+0x7c>
 8002900:	00800434 	movhi	r2,16
 8002904:	10bfffc4 	addi	r2,r2,-1
 8002908:	a884703a 	and	r2,r21,r2
 800290c:	103fec1e 	bne	r2,zero,80028c0 <_dtoa_r+0x2dc>
 8002910:	00c20074 	movhi	r3,2049
 8002914:	18f29e04 	addi	r3,r3,-13704
 8002918:	003feb06 	br	80028c8 <_dtoa_r+0x2e4>
 800291c:	d8802917 	ldw	r2,164(sp)
 8002920:	19000204 	addi	r4,r3,8
 8002924:	11000015 	stw	r4,0(r2)
 8002928:	003f6206 	br	80026b4 <_dtoa_r+0xd0>
 800292c:	ddc00117 	ldw	r23,4(sp)
 8002930:	d8800217 	ldw	r2,8(sp)
 8002934:	01000804 	movi	r4,32
 8002938:	b8c10c84 	addi	r3,r23,1074
 800293c:	18a3883a 	add	r17,r3,r2
 8002940:	2441b80e 	bge	r4,r17,8003024 <_dtoa_r+0xa40>
 8002944:	00c01004 	movi	r3,64
 8002948:	1c47c83a 	sub	r3,r3,r17
 800294c:	88bff804 	addi	r2,r17,-32
 8002950:	a8c6983a 	sll	r3,r21,r3
 8002954:	a084d83a 	srl	r2,r20,r2
 8002958:	1888b03a 	or	r4,r3,r2
 800295c:	80092940 	call	8009294 <__floatunsidf>
 8002960:	1011883a 	mov	r8,r2
 8002964:	00bf8434 	movhi	r2,65040
 8002968:	01000044 	movi	r4,1
 800296c:	10d3883a 	add	r9,r2,r3
 8002970:	8dbef344 	addi	r22,r17,-1075
 8002974:	d9000815 	stw	r4,32(sp)
 8002978:	003f6f06 	br	8002738 <_dtoa_r+0x154>
 800297c:	d8001715 	stw	zero,92(sp)
 8002980:	04400044 	movi	r17,1
 8002984:	00bfffc4 	movi	r2,-1
 8002988:	00c00044 	movi	r3,1
 800298c:	d8800e15 	stw	r2,56(sp)
 8002990:	d8002615 	stw	zero,152(sp)
 8002994:	d8800f15 	stw	r2,60(sp)
 8002998:	d8c00b15 	stw	r3,44(sp)
 800299c:	1021883a 	mov	r16,r2
 80029a0:	d8801617 	ldw	r2,88(sp)
 80029a4:	10001115 	stw	zero,68(r2)
 80029a8:	d8801617 	ldw	r2,88(sp)
 80029ac:	11401117 	ldw	r5,68(r2)
 80029b0:	1009883a 	mov	r4,r2
 80029b4:	8005d2c0 	call	8005d2c <_Balloc>
 80029b8:	d8c01617 	ldw	r3,88(sp)
 80029bc:	d8800515 	stw	r2,20(sp)
 80029c0:	18801015 	stw	r2,64(r3)
 80029c4:	00800384 	movi	r2,14
 80029c8:	14006836 	bltu	r2,r16,8002b6c <_dtoa_r+0x588>
 80029cc:	8805003a 	cmpeq	r2,r17,zero
 80029d0:	1000661e 	bne	r2,zero,8002b6c <_dtoa_r+0x588>
 80029d4:	d9000d17 	ldw	r4,52(sp)
 80029d8:	0102300e 	bge	zero,r4,800329c <_dtoa_r+0xcb8>
 80029dc:	208003cc 	andi	r2,r4,15
 80029e0:	100490fa 	slli	r2,r2,3
 80029e4:	2025d13a 	srai	r18,r4,4
 80029e8:	00c20074 	movhi	r3,2049
 80029ec:	18f2b304 	addi	r3,r3,-13620
 80029f0:	10c5883a 	add	r2,r2,r3
 80029f4:	90c0040c 	andi	r3,r18,16
 80029f8:	14000017 	ldw	r16,0(r2)
 80029fc:	14400117 	ldw	r17,4(r2)
 8002a00:	18036a1e 	bne	r3,zero,80037ac <_dtoa_r+0x11c8>
 8002a04:	05800084 	movi	r22,2
 8002a08:	90001026 	beq	r18,zero,8002a4c <_dtoa_r+0x468>
 8002a0c:	04c20074 	movhi	r19,2049
 8002a10:	9cf2e504 	addi	r19,r19,-13420
 8002a14:	9080004c 	andi	r2,r18,1
 8002a18:	1005003a 	cmpeq	r2,r2,zero
 8002a1c:	1000081e 	bne	r2,zero,8002a40 <_dtoa_r+0x45c>
 8002a20:	99800017 	ldw	r6,0(r19)
 8002a24:	99c00117 	ldw	r7,4(r19)
 8002a28:	880b883a 	mov	r5,r17
 8002a2c:	8009883a 	mov	r4,r16
 8002a30:	80088000 	call	8008800 <__muldf3>
 8002a34:	1021883a 	mov	r16,r2
 8002a38:	b5800044 	addi	r22,r22,1
 8002a3c:	1823883a 	mov	r17,r3
 8002a40:	9025d07a 	srai	r18,r18,1
 8002a44:	9cc00204 	addi	r19,r19,8
 8002a48:	903ff21e 	bne	r18,zero,8002a14 <_dtoa_r+0x430>
 8002a4c:	a80b883a 	mov	r5,r21
 8002a50:	a009883a 	mov	r4,r20
 8002a54:	880f883a 	mov	r7,r17
 8002a58:	800d883a 	mov	r6,r16
 8002a5c:	8008bc40 	call	8008bc4 <__divdf3>
 8002a60:	1029883a 	mov	r20,r2
 8002a64:	182b883a 	mov	r21,r3
 8002a68:	d8c00c17 	ldw	r3,48(sp)
 8002a6c:	1805003a 	cmpeq	r2,r3,zero
 8002a70:	1000081e 	bne	r2,zero,8002a94 <_dtoa_r+0x4b0>
 8002a74:	0005883a 	mov	r2,zero
 8002a78:	00cffc34 	movhi	r3,16368
 8002a7c:	180f883a 	mov	r7,r3
 8002a80:	a009883a 	mov	r4,r20
 8002a84:	a80b883a 	mov	r5,r21
 8002a88:	100d883a 	mov	r6,r2
 8002a8c:	800903c0 	call	800903c <__ltdf2>
 8002a90:	1003fe16 	blt	r2,zero,8003a8c <_dtoa_r+0x14a8>
 8002a94:	b009883a 	mov	r4,r22
 8002a98:	80090c40 	call	80090c4 <__floatsidf>
 8002a9c:	180b883a 	mov	r5,r3
 8002aa0:	1009883a 	mov	r4,r2
 8002aa4:	a00d883a 	mov	r6,r20
 8002aa8:	a80f883a 	mov	r7,r21
 8002aac:	80088000 	call	8008800 <__muldf3>
 8002ab0:	0011883a 	mov	r8,zero
 8002ab4:	02500734 	movhi	r9,16412
 8002ab8:	1009883a 	mov	r4,r2
 8002abc:	180b883a 	mov	r5,r3
 8002ac0:	480f883a 	mov	r7,r9
 8002ac4:	400d883a 	mov	r6,r8
 8002ac8:	800878c0 	call	800878c <__adddf3>
 8002acc:	d9000f17 	ldw	r4,60(sp)
 8002ad0:	102d883a 	mov	r22,r2
 8002ad4:	00bf3034 	movhi	r2,64704
 8002ad8:	18b9883a 	add	fp,r3,r2
 8002adc:	e02f883a 	mov	r23,fp
 8002ae0:	20028f1e 	bne	r4,zero,8003520 <_dtoa_r+0xf3c>
 8002ae4:	0005883a 	mov	r2,zero
 8002ae8:	00d00534 	movhi	r3,16404
 8002aec:	a009883a 	mov	r4,r20
 8002af0:	a80b883a 	mov	r5,r21
 8002af4:	180f883a 	mov	r7,r3
 8002af8:	100d883a 	mov	r6,r2
 8002afc:	800870c0 	call	800870c <__subdf3>
 8002b00:	1009883a 	mov	r4,r2
 8002b04:	e00f883a 	mov	r7,fp
 8002b08:	180b883a 	mov	r5,r3
 8002b0c:	b00d883a 	mov	r6,r22
 8002b10:	1025883a 	mov	r18,r2
 8002b14:	1827883a 	mov	r19,r3
 8002b18:	8008f2c0 	call	8008f2c <__gtdf2>
 8002b1c:	00834f16 	blt	zero,r2,800385c <_dtoa_r+0x1278>
 8002b20:	e0e0003c 	xorhi	r3,fp,32768
 8002b24:	9009883a 	mov	r4,r18
 8002b28:	980b883a 	mov	r5,r19
 8002b2c:	180f883a 	mov	r7,r3
 8002b30:	b00d883a 	mov	r6,r22
 8002b34:	800903c0 	call	800903c <__ltdf2>
 8002b38:	1000080e 	bge	r2,zero,8002b5c <_dtoa_r+0x578>
 8002b3c:	0027883a 	mov	r19,zero
 8002b40:	0025883a 	mov	r18,zero
 8002b44:	d8802617 	ldw	r2,152(sp)
 8002b48:	df000517 	ldw	fp,20(sp)
 8002b4c:	d8000615 	stw	zero,24(sp)
 8002b50:	0084303a 	nor	r2,zero,r2
 8002b54:	d8800d15 	stw	r2,52(sp)
 8002b58:	00019b06 	br	80031c8 <_dtoa_r+0xbe4>
 8002b5c:	d9801217 	ldw	r6,72(sp)
 8002b60:	d8801317 	ldw	r2,76(sp)
 8002b64:	3029883a 	mov	r20,r6
 8002b68:	102b883a 	mov	r21,r2
 8002b6c:	d8c00217 	ldw	r3,8(sp)
 8002b70:	18008516 	blt	r3,zero,8002d88 <_dtoa_r+0x7a4>
 8002b74:	d9000d17 	ldw	r4,52(sp)
 8002b78:	00800384 	movi	r2,14
 8002b7c:	11008216 	blt	r2,r4,8002d88 <_dtoa_r+0x7a4>
 8002b80:	200490fa 	slli	r2,r4,3
 8002b84:	d9802617 	ldw	r6,152(sp)
 8002b88:	00c20074 	movhi	r3,2049
 8002b8c:	18f2b304 	addi	r3,r3,-13620
 8002b90:	10c5883a 	add	r2,r2,r3
 8002b94:	14800017 	ldw	r18,0(r2)
 8002b98:	14c00117 	ldw	r19,4(r2)
 8002b9c:	30031e16 	blt	r6,zero,8003818 <_dtoa_r+0x1234>
 8002ba0:	d9000517 	ldw	r4,20(sp)
 8002ba4:	d8c00f17 	ldw	r3,60(sp)
 8002ba8:	a823883a 	mov	r17,r21
 8002bac:	a021883a 	mov	r16,r20
 8002bb0:	192b883a 	add	r21,r3,r4
 8002bb4:	2039883a 	mov	fp,r4
 8002bb8:	00000f06 	br	8002bf8 <_dtoa_r+0x614>
 8002bbc:	0005883a 	mov	r2,zero
 8002bc0:	00d00934 	movhi	r3,16420
 8002bc4:	5009883a 	mov	r4,r10
 8002bc8:	580b883a 	mov	r5,r11
 8002bcc:	180f883a 	mov	r7,r3
 8002bd0:	100d883a 	mov	r6,r2
 8002bd4:	80088000 	call	8008800 <__muldf3>
 8002bd8:	180b883a 	mov	r5,r3
 8002bdc:	000d883a 	mov	r6,zero
 8002be0:	000f883a 	mov	r7,zero
 8002be4:	1009883a 	mov	r4,r2
 8002be8:	1021883a 	mov	r16,r2
 8002bec:	1823883a 	mov	r17,r3
 8002bf0:	8008ea40 	call	8008ea4 <__nedf2>
 8002bf4:	10004526 	beq	r2,zero,8002d0c <_dtoa_r+0x728>
 8002bf8:	900d883a 	mov	r6,r18
 8002bfc:	980f883a 	mov	r7,r19
 8002c00:	8009883a 	mov	r4,r16
 8002c04:	880b883a 	mov	r5,r17
 8002c08:	8008bc40 	call	8008bc4 <__divdf3>
 8002c0c:	180b883a 	mov	r5,r3
 8002c10:	1009883a 	mov	r4,r2
 8002c14:	80091bc0 	call	80091bc <__fixdfsi>
 8002c18:	1009883a 	mov	r4,r2
 8002c1c:	1029883a 	mov	r20,r2
 8002c20:	80090c40 	call	80090c4 <__floatsidf>
 8002c24:	180f883a 	mov	r7,r3
 8002c28:	9009883a 	mov	r4,r18
 8002c2c:	980b883a 	mov	r5,r19
 8002c30:	100d883a 	mov	r6,r2
 8002c34:	80088000 	call	8008800 <__muldf3>
 8002c38:	180f883a 	mov	r7,r3
 8002c3c:	880b883a 	mov	r5,r17
 8002c40:	8009883a 	mov	r4,r16
 8002c44:	100d883a 	mov	r6,r2
 8002c48:	800870c0 	call	800870c <__subdf3>
 8002c4c:	1015883a 	mov	r10,r2
 8002c50:	a0800c04 	addi	r2,r20,48
 8002c54:	e0800005 	stb	r2,0(fp)
 8002c58:	e7000044 	addi	fp,fp,1
 8002c5c:	1817883a 	mov	r11,r3
 8002c60:	e57fd61e 	bne	fp,r21,8002bbc <_dtoa_r+0x5d8>
 8002c64:	500d883a 	mov	r6,r10
 8002c68:	180f883a 	mov	r7,r3
 8002c6c:	5009883a 	mov	r4,r10
 8002c70:	180b883a 	mov	r5,r3
 8002c74:	800878c0 	call	800878c <__adddf3>
 8002c78:	100d883a 	mov	r6,r2
 8002c7c:	9009883a 	mov	r4,r18
 8002c80:	980b883a 	mov	r5,r19
 8002c84:	180f883a 	mov	r7,r3
 8002c88:	1021883a 	mov	r16,r2
 8002c8c:	1823883a 	mov	r17,r3
 8002c90:	800903c0 	call	800903c <__ltdf2>
 8002c94:	10000816 	blt	r2,zero,8002cb8 <_dtoa_r+0x6d4>
 8002c98:	980b883a 	mov	r5,r19
 8002c9c:	800d883a 	mov	r6,r16
 8002ca0:	880f883a 	mov	r7,r17
 8002ca4:	9009883a 	mov	r4,r18
 8002ca8:	8008e1c0 	call	8008e1c <__eqdf2>
 8002cac:	1000171e 	bne	r2,zero,8002d0c <_dtoa_r+0x728>
 8002cb0:	a080004c 	andi	r2,r20,1
 8002cb4:	10001526 	beq	r2,zero,8002d0c <_dtoa_r+0x728>
 8002cb8:	d8800d17 	ldw	r2,52(sp)
 8002cbc:	d8800415 	stw	r2,16(sp)
 8002cc0:	e009883a 	mov	r4,fp
 8002cc4:	213fffc4 	addi	r4,r4,-1
 8002cc8:	20c00007 	ldb	r3,0(r4)
 8002ccc:	00800e44 	movi	r2,57
 8002cd0:	1880081e 	bne	r3,r2,8002cf4 <_dtoa_r+0x710>
 8002cd4:	d8800517 	ldw	r2,20(sp)
 8002cd8:	113ffa1e 	bne	r2,r4,8002cc4 <_dtoa_r+0x6e0>
 8002cdc:	d8c00417 	ldw	r3,16(sp)
 8002ce0:	d9800517 	ldw	r6,20(sp)
 8002ce4:	00800c04 	movi	r2,48
 8002ce8:	18c00044 	addi	r3,r3,1
 8002cec:	d8c00415 	stw	r3,16(sp)
 8002cf0:	30800005 	stb	r2,0(r6)
 8002cf4:	20800003 	ldbu	r2,0(r4)
 8002cf8:	d8c00417 	ldw	r3,16(sp)
 8002cfc:	27000044 	addi	fp,r4,1
 8002d00:	10800044 	addi	r2,r2,1
 8002d04:	d8c00d15 	stw	r3,52(sp)
 8002d08:	20800005 	stb	r2,0(r4)
 8002d0c:	d9001617 	ldw	r4,88(sp)
 8002d10:	d9400717 	ldw	r5,28(sp)
 8002d14:	80057ac0 	call	80057ac <_Bfree>
 8002d18:	e0000005 	stb	zero,0(fp)
 8002d1c:	d9800d17 	ldw	r6,52(sp)
 8002d20:	d8c02717 	ldw	r3,156(sp)
 8002d24:	d9002917 	ldw	r4,164(sp)
 8002d28:	30800044 	addi	r2,r6,1
 8002d2c:	18800015 	stw	r2,0(r3)
 8002d30:	20029c26 	beq	r4,zero,80037a4 <_dtoa_r+0x11c0>
 8002d34:	d8c00517 	ldw	r3,20(sp)
 8002d38:	27000015 	stw	fp,0(r4)
 8002d3c:	003e5d06 	br	80026b4 <_dtoa_r+0xd0>
 8002d40:	d9800d17 	ldw	r6,52(sp)
 8002d44:	00c20074 	movhi	r3,2049
 8002d48:	18f2b304 	addi	r3,r3,-13620
 8002d4c:	d9001217 	ldw	r4,72(sp)
 8002d50:	300490fa 	slli	r2,r6,3
 8002d54:	d9401317 	ldw	r5,76(sp)
 8002d58:	10c5883a 	add	r2,r2,r3
 8002d5c:	12000017 	ldw	r8,0(r2)
 8002d60:	12400117 	ldw	r9,4(r2)
 8002d64:	400d883a 	mov	r6,r8
 8002d68:	480f883a 	mov	r7,r9
 8002d6c:	800903c0 	call	800903c <__ltdf2>
 8002d70:	1000030e 	bge	r2,zero,8002d80 <_dtoa_r+0x79c>
 8002d74:	d8800d17 	ldw	r2,52(sp)
 8002d78:	10bfffc4 	addi	r2,r2,-1
 8002d7c:	d8800d15 	stw	r2,52(sp)
 8002d80:	d8000c15 	stw	zero,48(sp)
 8002d84:	003ea806 	br	8002828 <_dtoa_r+0x244>
 8002d88:	d9000b17 	ldw	r4,44(sp)
 8002d8c:	202cc03a 	cmpne	r22,r4,zero
 8002d90:	b000c71e 	bne	r22,zero,80030b0 <_dtoa_r+0xacc>
 8002d94:	dc001117 	ldw	r16,68(sp)
 8002d98:	dc801017 	ldw	r18,64(sp)
 8002d9c:	0027883a 	mov	r19,zero
 8002da0:	04000b0e 	bge	zero,r16,8002dd0 <_dtoa_r+0x7ec>
 8002da4:	d8c00a17 	ldw	r3,40(sp)
 8002da8:	00c0090e 	bge	zero,r3,8002dd0 <_dtoa_r+0x7ec>
 8002dac:	8005883a 	mov	r2,r16
 8002db0:	1c011316 	blt	r3,r16,8003200 <_dtoa_r+0xc1c>
 8002db4:	d9000a17 	ldw	r4,40(sp)
 8002db8:	d9801117 	ldw	r6,68(sp)
 8002dbc:	80a1c83a 	sub	r16,r16,r2
 8002dc0:	2089c83a 	sub	r4,r4,r2
 8002dc4:	308dc83a 	sub	r6,r6,r2
 8002dc8:	d9000a15 	stw	r4,40(sp)
 8002dcc:	d9801115 	stw	r6,68(sp)
 8002dd0:	d8801017 	ldw	r2,64(sp)
 8002dd4:	0080150e 	bge	zero,r2,8002e2c <_dtoa_r+0x848>
 8002dd8:	d8c00b17 	ldw	r3,44(sp)
 8002ddc:	1805003a 	cmpeq	r2,r3,zero
 8002de0:	1001c91e 	bne	r2,zero,8003508 <_dtoa_r+0xf24>
 8002de4:	04800e0e 	bge	zero,r18,8002e20 <_dtoa_r+0x83c>
 8002de8:	d9001617 	ldw	r4,88(sp)
 8002dec:	980b883a 	mov	r5,r19
 8002df0:	900d883a 	mov	r6,r18
 8002df4:	80065f80 	call	80065f8 <__pow5mult>
 8002df8:	d9001617 	ldw	r4,88(sp)
 8002dfc:	d9800717 	ldw	r6,28(sp)
 8002e00:	100b883a 	mov	r5,r2
 8002e04:	1027883a 	mov	r19,r2
 8002e08:	800623c0 	call	800623c <__multiply>
 8002e0c:	d9001617 	ldw	r4,88(sp)
 8002e10:	d9400717 	ldw	r5,28(sp)
 8002e14:	1023883a 	mov	r17,r2
 8002e18:	80057ac0 	call	80057ac <_Bfree>
 8002e1c:	dc400715 	stw	r17,28(sp)
 8002e20:	d9001017 	ldw	r4,64(sp)
 8002e24:	248dc83a 	sub	r6,r4,r18
 8002e28:	30010e1e 	bne	r6,zero,8003264 <_dtoa_r+0xc80>
 8002e2c:	d9001617 	ldw	r4,88(sp)
 8002e30:	04400044 	movi	r17,1
 8002e34:	880b883a 	mov	r5,r17
 8002e38:	80064900 	call	8006490 <__i2b>
 8002e3c:	d9800917 	ldw	r6,36(sp)
 8002e40:	1025883a 	mov	r18,r2
 8002e44:	0180040e 	bge	zero,r6,8002e58 <_dtoa_r+0x874>
 8002e48:	d9001617 	ldw	r4,88(sp)
 8002e4c:	100b883a 	mov	r5,r2
 8002e50:	80065f80 	call	80065f8 <__pow5mult>
 8002e54:	1025883a 	mov	r18,r2
 8002e58:	d8801717 	ldw	r2,92(sp)
 8002e5c:	8880f30e 	bge	r17,r2,800322c <_dtoa_r+0xc48>
 8002e60:	0023883a 	mov	r17,zero
 8002e64:	d9800917 	ldw	r6,36(sp)
 8002e68:	30019e1e 	bne	r6,zero,80034e4 <_dtoa_r+0xf00>
 8002e6c:	00c00044 	movi	r3,1
 8002e70:	d9000a17 	ldw	r4,40(sp)
 8002e74:	20c5883a 	add	r2,r4,r3
 8002e78:	10c007cc 	andi	r3,r2,31
 8002e7c:	1800841e 	bne	r3,zero,8003090 <_dtoa_r+0xaac>
 8002e80:	00800704 	movi	r2,28
 8002e84:	d9000a17 	ldw	r4,40(sp)
 8002e88:	d9801117 	ldw	r6,68(sp)
 8002e8c:	80a1883a 	add	r16,r16,r2
 8002e90:	2089883a 	add	r4,r4,r2
 8002e94:	308d883a 	add	r6,r6,r2
 8002e98:	d9000a15 	stw	r4,40(sp)
 8002e9c:	d9801115 	stw	r6,68(sp)
 8002ea0:	d8801117 	ldw	r2,68(sp)
 8002ea4:	0080050e 	bge	zero,r2,8002ebc <_dtoa_r+0x8d8>
 8002ea8:	d9400717 	ldw	r5,28(sp)
 8002eac:	d9001617 	ldw	r4,88(sp)
 8002eb0:	100d883a 	mov	r6,r2
 8002eb4:	80060f00 	call	80060f0 <__lshift>
 8002eb8:	d8800715 	stw	r2,28(sp)
 8002ebc:	d8c00a17 	ldw	r3,40(sp)
 8002ec0:	00c0050e 	bge	zero,r3,8002ed8 <_dtoa_r+0x8f4>
 8002ec4:	d9001617 	ldw	r4,88(sp)
 8002ec8:	900b883a 	mov	r5,r18
 8002ecc:	180d883a 	mov	r6,r3
 8002ed0:	80060f00 	call	80060f0 <__lshift>
 8002ed4:	1025883a 	mov	r18,r2
 8002ed8:	d9000c17 	ldw	r4,48(sp)
 8002edc:	2005003a 	cmpeq	r2,r4,zero
 8002ee0:	10016f26 	beq	r2,zero,80034a0 <_dtoa_r+0xebc>
 8002ee4:	d9000f17 	ldw	r4,60(sp)
 8002ee8:	0102170e 	bge	zero,r4,8003748 <_dtoa_r+0x1164>
 8002eec:	d9800b17 	ldw	r6,44(sp)
 8002ef0:	3005003a 	cmpeq	r2,r6,zero
 8002ef4:	1000881e 	bne	r2,zero,8003118 <_dtoa_r+0xb34>
 8002ef8:	0400050e 	bge	zero,r16,8002f10 <_dtoa_r+0x92c>
 8002efc:	d9001617 	ldw	r4,88(sp)
 8002f00:	980b883a 	mov	r5,r19
 8002f04:	800d883a 	mov	r6,r16
 8002f08:	80060f00 	call	80060f0 <__lshift>
 8002f0c:	1027883a 	mov	r19,r2
 8002f10:	8804c03a 	cmpne	r2,r17,zero
 8002f14:	1002541e 	bne	r2,zero,8003868 <_dtoa_r+0x1284>
 8002f18:	980b883a 	mov	r5,r19
 8002f1c:	dd800517 	ldw	r22,20(sp)
 8002f20:	dcc00615 	stw	r19,24(sp)
 8002f24:	a700004c 	andi	fp,r20,1
 8002f28:	2827883a 	mov	r19,r5
 8002f2c:	d9000717 	ldw	r4,28(sp)
 8002f30:	900b883a 	mov	r5,r18
 8002f34:	80023a00 	call	80023a0 <quorem>
 8002f38:	d9000717 	ldw	r4,28(sp)
 8002f3c:	d9400617 	ldw	r5,24(sp)
 8002f40:	1023883a 	mov	r17,r2
 8002f44:	8dc00c04 	addi	r23,r17,48
 8002f48:	80059080 	call	8005908 <__mcmp>
 8002f4c:	d9001617 	ldw	r4,88(sp)
 8002f50:	900b883a 	mov	r5,r18
 8002f54:	980d883a 	mov	r6,r19
 8002f58:	1029883a 	mov	r20,r2
 8002f5c:	8005f640 	call	8005f64 <__mdiff>
 8002f60:	102b883a 	mov	r21,r2
 8002f64:	10800317 	ldw	r2,12(r2)
 8002f68:	1001281e 	bne	r2,zero,800340c <_dtoa_r+0xe28>
 8002f6c:	d9000717 	ldw	r4,28(sp)
 8002f70:	a80b883a 	mov	r5,r21
 8002f74:	80059080 	call	8005908 <__mcmp>
 8002f78:	d9001617 	ldw	r4,88(sp)
 8002f7c:	1021883a 	mov	r16,r2
 8002f80:	a80b883a 	mov	r5,r21
 8002f84:	80057ac0 	call	80057ac <_Bfree>
 8002f88:	8000041e 	bne	r16,zero,8002f9c <_dtoa_r+0x9b8>
 8002f8c:	d8801717 	ldw	r2,92(sp)
 8002f90:	1000021e 	bne	r2,zero,8002f9c <_dtoa_r+0x9b8>
 8002f94:	e004c03a 	cmpne	r2,fp,zero
 8002f98:	10011726 	beq	r2,zero,80033f8 <_dtoa_r+0xe14>
 8002f9c:	a0010616 	blt	r20,zero,80033b8 <_dtoa_r+0xdd4>
 8002fa0:	a000041e 	bne	r20,zero,8002fb4 <_dtoa_r+0x9d0>
 8002fa4:	d8c01717 	ldw	r3,92(sp)
 8002fa8:	1800021e 	bne	r3,zero,8002fb4 <_dtoa_r+0x9d0>
 8002fac:	e004c03a 	cmpne	r2,fp,zero
 8002fb0:	10010126 	beq	r2,zero,80033b8 <_dtoa_r+0xdd4>
 8002fb4:	04023d16 	blt	zero,r16,80038ac <_dtoa_r+0x12c8>
 8002fb8:	b5c00005 	stb	r23,0(r22)
 8002fbc:	d9800517 	ldw	r6,20(sp)
 8002fc0:	d9000f17 	ldw	r4,60(sp)
 8002fc4:	b5800044 	addi	r22,r22,1
 8002fc8:	3105883a 	add	r2,r6,r4
 8002fcc:	b0806526 	beq	r22,r2,8003164 <_dtoa_r+0xb80>
 8002fd0:	d9400717 	ldw	r5,28(sp)
 8002fd4:	d9001617 	ldw	r4,88(sp)
 8002fd8:	01800284 	movi	r6,10
 8002fdc:	000f883a 	mov	r7,zero
 8002fe0:	80064cc0 	call	80064cc <__multadd>
 8002fe4:	d8800715 	stw	r2,28(sp)
 8002fe8:	d8800617 	ldw	r2,24(sp)
 8002fec:	14c10c26 	beq	r2,r19,8003420 <_dtoa_r+0xe3c>
 8002ff0:	d9400617 	ldw	r5,24(sp)
 8002ff4:	d9001617 	ldw	r4,88(sp)
 8002ff8:	01800284 	movi	r6,10
 8002ffc:	000f883a 	mov	r7,zero
 8003000:	80064cc0 	call	80064cc <__multadd>
 8003004:	d9001617 	ldw	r4,88(sp)
 8003008:	980b883a 	mov	r5,r19
 800300c:	01800284 	movi	r6,10
 8003010:	000f883a 	mov	r7,zero
 8003014:	d8800615 	stw	r2,24(sp)
 8003018:	80064cc0 	call	80064cc <__multadd>
 800301c:	1027883a 	mov	r19,r2
 8003020:	003fc206 	br	8002f2c <_dtoa_r+0x948>
 8003024:	2445c83a 	sub	r2,r4,r17
 8003028:	a088983a 	sll	r4,r20,r2
 800302c:	003e4b06 	br	800295c <_dtoa_r+0x378>
 8003030:	01bfffc4 	movi	r6,-1
 8003034:	00800044 	movi	r2,1
 8003038:	d9800e15 	stw	r6,56(sp)
 800303c:	d9800f15 	stw	r6,60(sp)
 8003040:	d8800b15 	stw	r2,44(sp)
 8003044:	d8c01617 	ldw	r3,88(sp)
 8003048:	008005c4 	movi	r2,23
 800304c:	18001115 	stw	zero,68(r3)
 8003050:	1580082e 	bgeu	r2,r22,8003074 <_dtoa_r+0xa90>
 8003054:	00c00104 	movi	r3,4
 8003058:	0009883a 	mov	r4,zero
 800305c:	18c7883a 	add	r3,r3,r3
 8003060:	18800504 	addi	r2,r3,20
 8003064:	21000044 	addi	r4,r4,1
 8003068:	b0bffc2e 	bgeu	r22,r2,800305c <_dtoa_r+0xa78>
 800306c:	d9801617 	ldw	r6,88(sp)
 8003070:	31001115 	stw	r4,68(r6)
 8003074:	dc000f17 	ldw	r16,60(sp)
 8003078:	003e4b06 	br	80029a8 <_dtoa_r+0x3c4>
 800307c:	d9801717 	ldw	r6,92(sp)
 8003080:	0023883a 	mov	r17,zero
 8003084:	31bfff04 	addi	r6,r6,-4
 8003088:	d9801715 	stw	r6,92(sp)
 800308c:	003df806 	br	8002870 <_dtoa_r+0x28c>
 8003090:	00800804 	movi	r2,32
 8003094:	10c9c83a 	sub	r4,r2,r3
 8003098:	00c00104 	movi	r3,4
 800309c:	19005a16 	blt	r3,r4,8003208 <_dtoa_r+0xc24>
 80030a0:	008000c4 	movi	r2,3
 80030a4:	113f7e16 	blt	r2,r4,8002ea0 <_dtoa_r+0x8bc>
 80030a8:	20800704 	addi	r2,r4,28
 80030ac:	003f7506 	br	8002e84 <_dtoa_r+0x8a0>
 80030b0:	d9801717 	ldw	r6,92(sp)
 80030b4:	00800044 	movi	r2,1
 80030b8:	1180a10e 	bge	r2,r6,8003340 <_dtoa_r+0xd5c>
 80030bc:	d9800f17 	ldw	r6,60(sp)
 80030c0:	d8c01017 	ldw	r3,64(sp)
 80030c4:	30bfffc4 	addi	r2,r6,-1
 80030c8:	1881c616 	blt	r3,r2,80037e4 <_dtoa_r+0x1200>
 80030cc:	18a5c83a 	sub	r18,r3,r2
 80030d0:	d8800f17 	ldw	r2,60(sp)
 80030d4:	10026216 	blt	r2,zero,8003a60 <_dtoa_r+0x147c>
 80030d8:	dc001117 	ldw	r16,68(sp)
 80030dc:	1007883a 	mov	r3,r2
 80030e0:	d9800a17 	ldw	r6,40(sp)
 80030e4:	d8801117 	ldw	r2,68(sp)
 80030e8:	d9001617 	ldw	r4,88(sp)
 80030ec:	30cd883a 	add	r6,r6,r3
 80030f0:	10c5883a 	add	r2,r2,r3
 80030f4:	01400044 	movi	r5,1
 80030f8:	d9800a15 	stw	r6,40(sp)
 80030fc:	d8801115 	stw	r2,68(sp)
 8003100:	80064900 	call	8006490 <__i2b>
 8003104:	1027883a 	mov	r19,r2
 8003108:	003f2506 	br	8002da0 <_dtoa_r+0x7bc>
 800310c:	00c20074 	movhi	r3,2049
 8003110:	18f29504 	addi	r3,r3,-13740
 8003114:	003d6706 	br	80026b4 <_dtoa_r+0xd0>
 8003118:	dd800517 	ldw	r22,20(sp)
 800311c:	04000044 	movi	r16,1
 8003120:	00000706 	br	8003140 <_dtoa_r+0xb5c>
 8003124:	d9400717 	ldw	r5,28(sp)
 8003128:	d9001617 	ldw	r4,88(sp)
 800312c:	01800284 	movi	r6,10
 8003130:	000f883a 	mov	r7,zero
 8003134:	80064cc0 	call	80064cc <__multadd>
 8003138:	d8800715 	stw	r2,28(sp)
 800313c:	84000044 	addi	r16,r16,1
 8003140:	d9000717 	ldw	r4,28(sp)
 8003144:	900b883a 	mov	r5,r18
 8003148:	80023a00 	call	80023a0 <quorem>
 800314c:	15c00c04 	addi	r23,r2,48
 8003150:	b5c00005 	stb	r23,0(r22)
 8003154:	d8c00f17 	ldw	r3,60(sp)
 8003158:	b5800044 	addi	r22,r22,1
 800315c:	80fff116 	blt	r16,r3,8003124 <_dtoa_r+0xb40>
 8003160:	d8000615 	stw	zero,24(sp)
 8003164:	d9400717 	ldw	r5,28(sp)
 8003168:	d9001617 	ldw	r4,88(sp)
 800316c:	01800044 	movi	r6,1
 8003170:	80060f00 	call	80060f0 <__lshift>
 8003174:	1009883a 	mov	r4,r2
 8003178:	900b883a 	mov	r5,r18
 800317c:	d8800715 	stw	r2,28(sp)
 8003180:	80059080 	call	8005908 <__mcmp>
 8003184:	00803c0e 	bge	zero,r2,8003278 <_dtoa_r+0xc94>
 8003188:	b009883a 	mov	r4,r22
 800318c:	213fffc4 	addi	r4,r4,-1
 8003190:	21400003 	ldbu	r5,0(r4)
 8003194:	00800e44 	movi	r2,57
 8003198:	28c03fcc 	andi	r3,r5,255
 800319c:	18c0201c 	xori	r3,r3,128
 80031a0:	18ffe004 	addi	r3,r3,-128
 80031a4:	1881981e 	bne	r3,r2,8003808 <_dtoa_r+0x1224>
 80031a8:	d9800517 	ldw	r6,20(sp)
 80031ac:	21bff71e 	bne	r4,r6,800318c <_dtoa_r+0xba8>
 80031b0:	d8800d17 	ldw	r2,52(sp)
 80031b4:	37000044 	addi	fp,r6,1
 80031b8:	10800044 	addi	r2,r2,1
 80031bc:	d8800d15 	stw	r2,52(sp)
 80031c0:	00800c44 	movi	r2,49
 80031c4:	30800005 	stb	r2,0(r6)
 80031c8:	d9001617 	ldw	r4,88(sp)
 80031cc:	900b883a 	mov	r5,r18
 80031d0:	80057ac0 	call	80057ac <_Bfree>
 80031d4:	983ecd26 	beq	r19,zero,8002d0c <_dtoa_r+0x728>
 80031d8:	d8c00617 	ldw	r3,24(sp)
 80031dc:	18000426 	beq	r3,zero,80031f0 <_dtoa_r+0xc0c>
 80031e0:	1cc00326 	beq	r3,r19,80031f0 <_dtoa_r+0xc0c>
 80031e4:	d9001617 	ldw	r4,88(sp)
 80031e8:	180b883a 	mov	r5,r3
 80031ec:	80057ac0 	call	80057ac <_Bfree>
 80031f0:	d9001617 	ldw	r4,88(sp)
 80031f4:	980b883a 	mov	r5,r19
 80031f8:	80057ac0 	call	80057ac <_Bfree>
 80031fc:	003ec306 	br	8002d0c <_dtoa_r+0x728>
 8003200:	1805883a 	mov	r2,r3
 8003204:	003eeb06 	br	8002db4 <_dtoa_r+0x7d0>
 8003208:	d9800a17 	ldw	r6,40(sp)
 800320c:	d8c01117 	ldw	r3,68(sp)
 8003210:	20bfff04 	addi	r2,r4,-4
 8003214:	308d883a 	add	r6,r6,r2
 8003218:	1887883a 	add	r3,r3,r2
 800321c:	80a1883a 	add	r16,r16,r2
 8003220:	d9800a15 	stw	r6,40(sp)
 8003224:	d8c01115 	stw	r3,68(sp)
 8003228:	003f1d06 	br	8002ea0 <_dtoa_r+0x8bc>
 800322c:	a03f0c1e 	bne	r20,zero,8002e60 <_dtoa_r+0x87c>
 8003230:	00800434 	movhi	r2,16
 8003234:	10bfffc4 	addi	r2,r2,-1
 8003238:	a884703a 	and	r2,r21,r2
 800323c:	103f081e 	bne	r2,zero,8002e60 <_dtoa_r+0x87c>
 8003240:	a89ffc2c 	andhi	r2,r21,32752
 8003244:	103f0626 	beq	r2,zero,8002e60 <_dtoa_r+0x87c>
 8003248:	d8c01117 	ldw	r3,68(sp)
 800324c:	d9000a17 	ldw	r4,40(sp)
 8003250:	18c00044 	addi	r3,r3,1
 8003254:	21000044 	addi	r4,r4,1
 8003258:	d8c01115 	stw	r3,68(sp)
 800325c:	d9000a15 	stw	r4,40(sp)
 8003260:	003f0006 	br	8002e64 <_dtoa_r+0x880>
 8003264:	d9400717 	ldw	r5,28(sp)
 8003268:	d9001617 	ldw	r4,88(sp)
 800326c:	80065f80 	call	80065f8 <__pow5mult>
 8003270:	d8800715 	stw	r2,28(sp)
 8003274:	003eed06 	br	8002e2c <_dtoa_r+0x848>
 8003278:	1000021e 	bne	r2,zero,8003284 <_dtoa_r+0xca0>
 800327c:	b880004c 	andi	r2,r23,1
 8003280:	103fc11e 	bne	r2,zero,8003188 <_dtoa_r+0xba4>
 8003284:	b5bfffc4 	addi	r22,r22,-1
 8003288:	b0c00007 	ldb	r3,0(r22)
 800328c:	00800c04 	movi	r2,48
 8003290:	18bffc26 	beq	r3,r2,8003284 <_dtoa_r+0xca0>
 8003294:	b7000044 	addi	fp,r22,1
 8003298:	003fcb06 	br	80031c8 <_dtoa_r+0xbe4>
 800329c:	d9800d17 	ldw	r6,52(sp)
 80032a0:	018fc83a 	sub	r7,zero,r6
 80032a4:	3801f726 	beq	r7,zero,8003a84 <_dtoa_r+0x14a0>
 80032a8:	398003cc 	andi	r6,r7,15
 80032ac:	300c90fa 	slli	r6,r6,3
 80032b0:	01420074 	movhi	r5,2049
 80032b4:	2972b304 	addi	r5,r5,-13620
 80032b8:	d9001217 	ldw	r4,72(sp)
 80032bc:	314d883a 	add	r6,r6,r5
 80032c0:	30c00117 	ldw	r3,4(r6)
 80032c4:	30800017 	ldw	r2,0(r6)
 80032c8:	d9401317 	ldw	r5,76(sp)
 80032cc:	3821d13a 	srai	r16,r7,4
 80032d0:	100d883a 	mov	r6,r2
 80032d4:	180f883a 	mov	r7,r3
 80032d8:	80088000 	call	8008800 <__muldf3>
 80032dc:	1011883a 	mov	r8,r2
 80032e0:	1813883a 	mov	r9,r3
 80032e4:	1029883a 	mov	r20,r2
 80032e8:	182b883a 	mov	r21,r3
 80032ec:	8001e526 	beq	r16,zero,8003a84 <_dtoa_r+0x14a0>
 80032f0:	05800084 	movi	r22,2
 80032f4:	04420074 	movhi	r17,2049
 80032f8:	8c72e504 	addi	r17,r17,-13420
 80032fc:	8080004c 	andi	r2,r16,1
 8003300:	1005003a 	cmpeq	r2,r2,zero
 8003304:	1000081e 	bne	r2,zero,8003328 <_dtoa_r+0xd44>
 8003308:	89800017 	ldw	r6,0(r17)
 800330c:	89c00117 	ldw	r7,4(r17)
 8003310:	480b883a 	mov	r5,r9
 8003314:	4009883a 	mov	r4,r8
 8003318:	80088000 	call	8008800 <__muldf3>
 800331c:	1011883a 	mov	r8,r2
 8003320:	b5800044 	addi	r22,r22,1
 8003324:	1813883a 	mov	r9,r3
 8003328:	8021d07a 	srai	r16,r16,1
 800332c:	8c400204 	addi	r17,r17,8
 8003330:	803ff21e 	bne	r16,zero,80032fc <_dtoa_r+0xd18>
 8003334:	4029883a 	mov	r20,r8
 8003338:	482b883a 	mov	r21,r9
 800333c:	003dca06 	br	8002a68 <_dtoa_r+0x484>
 8003340:	d9000817 	ldw	r4,32(sp)
 8003344:	2005003a 	cmpeq	r2,r4,zero
 8003348:	1001f61e 	bne	r2,zero,8003b24 <_dtoa_r+0x1540>
 800334c:	dc001117 	ldw	r16,68(sp)
 8003350:	dc801017 	ldw	r18,64(sp)
 8003354:	18c10cc4 	addi	r3,r3,1075
 8003358:	003f6106 	br	80030e0 <_dtoa_r+0xafc>
 800335c:	d8000b15 	stw	zero,44(sp)
 8003360:	d9802617 	ldw	r6,152(sp)
 8003364:	d8c00d17 	ldw	r3,52(sp)
 8003368:	30800044 	addi	r2,r6,1
 800336c:	18ad883a 	add	r22,r3,r2
 8003370:	b13fffc4 	addi	r4,r22,-1
 8003374:	d9000e15 	stw	r4,56(sp)
 8003378:	0581f60e 	bge	zero,r22,8003b54 <_dtoa_r+0x1570>
 800337c:	dd800f15 	stw	r22,60(sp)
 8003380:	003f3006 	br	8003044 <_dtoa_r+0xa60>
 8003384:	d8000b15 	stw	zero,44(sp)
 8003388:	d9002617 	ldw	r4,152(sp)
 800338c:	0101eb0e 	bge	zero,r4,8003b3c <_dtoa_r+0x1558>
 8003390:	202d883a 	mov	r22,r4
 8003394:	d9000e15 	stw	r4,56(sp)
 8003398:	d9000f15 	stw	r4,60(sp)
 800339c:	003f2906 	br	8003044 <_dtoa_r+0xa60>
 80033a0:	01800044 	movi	r6,1
 80033a4:	d9800b15 	stw	r6,44(sp)
 80033a8:	003ff706 	br	8003388 <_dtoa_r+0xda4>
 80033ac:	01000044 	movi	r4,1
 80033b0:	d9000b15 	stw	r4,44(sp)
 80033b4:	003fea06 	br	8003360 <_dtoa_r+0xd7c>
 80033b8:	04000c0e 	bge	zero,r16,80033ec <_dtoa_r+0xe08>
 80033bc:	d9400717 	ldw	r5,28(sp)
 80033c0:	d9001617 	ldw	r4,88(sp)
 80033c4:	01800044 	movi	r6,1
 80033c8:	80060f00 	call	80060f0 <__lshift>
 80033cc:	1009883a 	mov	r4,r2
 80033d0:	900b883a 	mov	r5,r18
 80033d4:	d8800715 	stw	r2,28(sp)
 80033d8:	80059080 	call	8005908 <__mcmp>
 80033dc:	0081e00e 	bge	zero,r2,8003b60 <_dtoa_r+0x157c>
 80033e0:	bdc00044 	addi	r23,r23,1
 80033e4:	00800e84 	movi	r2,58
 80033e8:	b881a226 	beq	r23,r2,8003a74 <_dtoa_r+0x1490>
 80033ec:	b7000044 	addi	fp,r22,1
 80033f0:	b5c00005 	stb	r23,0(r22)
 80033f4:	003f7406 	br	80031c8 <_dtoa_r+0xbe4>
 80033f8:	00800e44 	movi	r2,57
 80033fc:	b8819d26 	beq	r23,r2,8003a74 <_dtoa_r+0x1490>
 8003400:	053ffa0e 	bge	zero,r20,80033ec <_dtoa_r+0xe08>
 8003404:	8dc00c44 	addi	r23,r17,49
 8003408:	003ff806 	br	80033ec <_dtoa_r+0xe08>
 800340c:	d9001617 	ldw	r4,88(sp)
 8003410:	a80b883a 	mov	r5,r21
 8003414:	04000044 	movi	r16,1
 8003418:	80057ac0 	call	80057ac <_Bfree>
 800341c:	003edf06 	br	8002f9c <_dtoa_r+0x9b8>
 8003420:	d9001617 	ldw	r4,88(sp)
 8003424:	980b883a 	mov	r5,r19
 8003428:	01800284 	movi	r6,10
 800342c:	000f883a 	mov	r7,zero
 8003430:	80064cc0 	call	80064cc <__multadd>
 8003434:	1027883a 	mov	r19,r2
 8003438:	d8800615 	stw	r2,24(sp)
 800343c:	003ebb06 	br	8002f2c <_dtoa_r+0x948>
 8003440:	d9801117 	ldw	r6,68(sp)
 8003444:	d8800d17 	ldw	r2,52(sp)
 8003448:	d8000915 	stw	zero,36(sp)
 800344c:	308dc83a 	sub	r6,r6,r2
 8003450:	0087c83a 	sub	r3,zero,r2
 8003454:	d9801115 	stw	r6,68(sp)
 8003458:	d8c01015 	stw	r3,64(sp)
 800345c:	003cfe06 	br	8002858 <_dtoa_r+0x274>
 8003460:	018dc83a 	sub	r6,zero,r6
 8003464:	d9801115 	stw	r6,68(sp)
 8003468:	d8000a15 	stw	zero,40(sp)
 800346c:	003cf306 	br	800283c <_dtoa_r+0x258>
 8003470:	d9000d17 	ldw	r4,52(sp)
 8003474:	80090c40 	call	80090c4 <__floatsidf>
 8003478:	880b883a 	mov	r5,r17
 800347c:	8009883a 	mov	r4,r16
 8003480:	180f883a 	mov	r7,r3
 8003484:	100d883a 	mov	r6,r2
 8003488:	8008ea40 	call	8008ea4 <__nedf2>
 800348c:	103ce126 	beq	r2,zero,8002814 <_dtoa_r+0x230>
 8003490:	d9800d17 	ldw	r6,52(sp)
 8003494:	31bfffc4 	addi	r6,r6,-1
 8003498:	d9800d15 	stw	r6,52(sp)
 800349c:	003cdd06 	br	8002814 <_dtoa_r+0x230>
 80034a0:	d9000717 	ldw	r4,28(sp)
 80034a4:	900b883a 	mov	r5,r18
 80034a8:	80059080 	call	8005908 <__mcmp>
 80034ac:	103e8d0e 	bge	r2,zero,8002ee4 <_dtoa_r+0x900>
 80034b0:	d9400717 	ldw	r5,28(sp)
 80034b4:	d9001617 	ldw	r4,88(sp)
 80034b8:	01800284 	movi	r6,10
 80034bc:	000f883a 	mov	r7,zero
 80034c0:	80064cc0 	call	80064cc <__multadd>
 80034c4:	d9800d17 	ldw	r6,52(sp)
 80034c8:	d8800715 	stw	r2,28(sp)
 80034cc:	31bfffc4 	addi	r6,r6,-1
 80034d0:	d9800d15 	stw	r6,52(sp)
 80034d4:	b001a71e 	bne	r22,zero,8003b74 <_dtoa_r+0x1590>
 80034d8:	d8800e17 	ldw	r2,56(sp)
 80034dc:	d8800f15 	stw	r2,60(sp)
 80034e0:	003e8006 	br	8002ee4 <_dtoa_r+0x900>
 80034e4:	90800417 	ldw	r2,16(r18)
 80034e8:	1085883a 	add	r2,r2,r2
 80034ec:	1085883a 	add	r2,r2,r2
 80034f0:	1485883a 	add	r2,r2,r18
 80034f4:	11000417 	ldw	r4,16(r2)
 80034f8:	80057d40 	call	80057d4 <__hi0bits>
 80034fc:	00c00804 	movi	r3,32
 8003500:	1887c83a 	sub	r3,r3,r2
 8003504:	003e5a06 	br	8002e70 <_dtoa_r+0x88c>
 8003508:	d9400717 	ldw	r5,28(sp)
 800350c:	d9801017 	ldw	r6,64(sp)
 8003510:	d9001617 	ldw	r4,88(sp)
 8003514:	80065f80 	call	80065f8 <__pow5mult>
 8003518:	d8800715 	stw	r2,28(sp)
 800351c:	003e4306 	br	8002e2c <_dtoa_r+0x848>
 8003520:	d9800f17 	ldw	r6,60(sp)
 8003524:	d8800d17 	ldw	r2,52(sp)
 8003528:	d9800315 	stw	r6,12(sp)
 800352c:	d8800415 	stw	r2,16(sp)
 8003530:	d8c00b17 	ldw	r3,44(sp)
 8003534:	1805003a 	cmpeq	r2,r3,zero
 8003538:	1000e21e 	bne	r2,zero,80038c4 <_dtoa_r+0x12e0>
 800353c:	d9000317 	ldw	r4,12(sp)
 8003540:	0005883a 	mov	r2,zero
 8003544:	00cff834 	movhi	r3,16352
 8003548:	200c90fa 	slli	r6,r4,3
 800354c:	01020074 	movhi	r4,2049
 8003550:	2132b304 	addi	r4,r4,-13620
 8003554:	180b883a 	mov	r5,r3
 8003558:	310d883a 	add	r6,r6,r4
 800355c:	327fff17 	ldw	r9,-4(r6)
 8003560:	323ffe17 	ldw	r8,-8(r6)
 8003564:	1009883a 	mov	r4,r2
 8003568:	480f883a 	mov	r7,r9
 800356c:	400d883a 	mov	r6,r8
 8003570:	8008bc40 	call	8008bc4 <__divdf3>
 8003574:	180b883a 	mov	r5,r3
 8003578:	b00d883a 	mov	r6,r22
 800357c:	b80f883a 	mov	r7,r23
 8003580:	1009883a 	mov	r4,r2
 8003584:	800870c0 	call	800870c <__subdf3>
 8003588:	a80b883a 	mov	r5,r21
 800358c:	a009883a 	mov	r4,r20
 8003590:	d8c01915 	stw	r3,100(sp)
 8003594:	d8801815 	stw	r2,96(sp)
 8003598:	80091bc0 	call	80091bc <__fixdfsi>
 800359c:	1009883a 	mov	r4,r2
 80035a0:	1027883a 	mov	r19,r2
 80035a4:	80090c40 	call	80090c4 <__floatsidf>
 80035a8:	a80b883a 	mov	r5,r21
 80035ac:	a009883a 	mov	r4,r20
 80035b0:	180f883a 	mov	r7,r3
 80035b4:	100d883a 	mov	r6,r2
 80035b8:	800870c0 	call	800870c <__subdf3>
 80035bc:	d9801817 	ldw	r6,96(sp)
 80035c0:	1823883a 	mov	r17,r3
 80035c4:	d8801415 	stw	r2,80(sp)
 80035c8:	302d883a 	mov	r22,r6
 80035cc:	d9800517 	ldw	r6,20(sp)
 80035d0:	9cc00c04 	addi	r19,r19,48
 80035d4:	dc401515 	stw	r17,84(sp)
 80035d8:	d8c01917 	ldw	r3,100(sp)
 80035dc:	34c00005 	stb	r19,0(r6)
 80035e0:	d8800517 	ldw	r2,20(sp)
 80035e4:	d9401917 	ldw	r5,100(sp)
 80035e8:	d9801417 	ldw	r6,80(sp)
 80035ec:	b009883a 	mov	r4,r22
 80035f0:	880f883a 	mov	r7,r17
 80035f4:	182f883a 	mov	r23,r3
 80035f8:	17000044 	addi	fp,r2,1
 80035fc:	8008f2c0 	call	8008f2c <__gtdf2>
 8003600:	00804e16 	blt	zero,r2,800373c <_dtoa_r+0x1158>
 8003604:	d9801417 	ldw	r6,80(sp)
 8003608:	0005883a 	mov	r2,zero
 800360c:	00cffc34 	movhi	r3,16368
 8003610:	180b883a 	mov	r5,r3
 8003614:	880f883a 	mov	r7,r17
 8003618:	1009883a 	mov	r4,r2
 800361c:	800870c0 	call	800870c <__subdf3>
 8003620:	d9401917 	ldw	r5,100(sp)
 8003624:	180f883a 	mov	r7,r3
 8003628:	b009883a 	mov	r4,r22
 800362c:	100d883a 	mov	r6,r2
 8003630:	8008f2c0 	call	8008f2c <__gtdf2>
 8003634:	00bda216 	blt	zero,r2,8002cc0 <_dtoa_r+0x6dc>
 8003638:	d8c00317 	ldw	r3,12(sp)
 800363c:	00800044 	movi	r2,1
 8003640:	10c01216 	blt	r2,r3,800368c <_dtoa_r+0x10a8>
 8003644:	003d4506 	br	8002b5c <_dtoa_r+0x578>
 8003648:	d9801417 	ldw	r6,80(sp)
 800364c:	0005883a 	mov	r2,zero
 8003650:	00cffc34 	movhi	r3,16368
 8003654:	180b883a 	mov	r5,r3
 8003658:	880f883a 	mov	r7,r17
 800365c:	1009883a 	mov	r4,r2
 8003660:	800870c0 	call	800870c <__subdf3>
 8003664:	d9c01b17 	ldw	r7,108(sp)
 8003668:	180b883a 	mov	r5,r3
 800366c:	1009883a 	mov	r4,r2
 8003670:	b00d883a 	mov	r6,r22
 8003674:	800903c0 	call	800903c <__ltdf2>
 8003678:	103d9116 	blt	r2,zero,8002cc0 <_dtoa_r+0x6dc>
 800367c:	d9800517 	ldw	r6,20(sp)
 8003680:	d9000317 	ldw	r4,12(sp)
 8003684:	3105883a 	add	r2,r6,r4
 8003688:	e0bd3426 	beq	fp,r2,8002b5c <_dtoa_r+0x578>
 800368c:	04500934 	movhi	r17,16420
 8003690:	0021883a 	mov	r16,zero
 8003694:	b80b883a 	mov	r5,r23
 8003698:	b009883a 	mov	r4,r22
 800369c:	800d883a 	mov	r6,r16
 80036a0:	880f883a 	mov	r7,r17
 80036a4:	80088000 	call	8008800 <__muldf3>
 80036a8:	d9401517 	ldw	r5,84(sp)
 80036ac:	d9001417 	ldw	r4,80(sp)
 80036b0:	880f883a 	mov	r7,r17
 80036b4:	000d883a 	mov	r6,zero
 80036b8:	d8801a15 	stw	r2,104(sp)
 80036bc:	d8c01b15 	stw	r3,108(sp)
 80036c0:	80088000 	call	8008800 <__muldf3>
 80036c4:	180b883a 	mov	r5,r3
 80036c8:	1009883a 	mov	r4,r2
 80036cc:	1823883a 	mov	r17,r3
 80036d0:	1021883a 	mov	r16,r2
 80036d4:	80091bc0 	call	80091bc <__fixdfsi>
 80036d8:	1009883a 	mov	r4,r2
 80036dc:	102b883a 	mov	r21,r2
 80036e0:	80090c40 	call	80090c4 <__floatsidf>
 80036e4:	880b883a 	mov	r5,r17
 80036e8:	8009883a 	mov	r4,r16
 80036ec:	180f883a 	mov	r7,r3
 80036f0:	100d883a 	mov	r6,r2
 80036f4:	800870c0 	call	800870c <__subdf3>
 80036f8:	1021883a 	mov	r16,r2
 80036fc:	d9001b17 	ldw	r4,108(sp)
 8003700:	1823883a 	mov	r17,r3
 8003704:	dc001415 	stw	r16,80(sp)
 8003708:	ad400c04 	addi	r21,r21,48
 800370c:	dc401515 	stw	r17,84(sp)
 8003710:	d8801a17 	ldw	r2,104(sp)
 8003714:	e5400005 	stb	r21,0(fp)
 8003718:	202f883a 	mov	r23,r4
 800371c:	d9c01b17 	ldw	r7,108(sp)
 8003720:	d9001417 	ldw	r4,80(sp)
 8003724:	880b883a 	mov	r5,r17
 8003728:	100d883a 	mov	r6,r2
 800372c:	102d883a 	mov	r22,r2
 8003730:	e7000044 	addi	fp,fp,1
 8003734:	800903c0 	call	800903c <__ltdf2>
 8003738:	103fc30e 	bge	r2,zero,8003648 <_dtoa_r+0x1064>
 800373c:	d9000417 	ldw	r4,16(sp)
 8003740:	d9000d15 	stw	r4,52(sp)
 8003744:	003d7106 	br	8002d0c <_dtoa_r+0x728>
 8003748:	d9801717 	ldw	r6,92(sp)
 800374c:	00800084 	movi	r2,2
 8003750:	11bde60e 	bge	r2,r6,8002eec <_dtoa_r+0x908>
 8003754:	203cfb1e 	bne	r4,zero,8002b44 <_dtoa_r+0x560>
 8003758:	d9001617 	ldw	r4,88(sp)
 800375c:	900b883a 	mov	r5,r18
 8003760:	01800144 	movi	r6,5
 8003764:	000f883a 	mov	r7,zero
 8003768:	80064cc0 	call	80064cc <__multadd>
 800376c:	d9000717 	ldw	r4,28(sp)
 8003770:	100b883a 	mov	r5,r2
 8003774:	1025883a 	mov	r18,r2
 8003778:	80059080 	call	8005908 <__mcmp>
 800377c:	00bcf10e 	bge	zero,r2,8002b44 <_dtoa_r+0x560>
 8003780:	d8c00d17 	ldw	r3,52(sp)
 8003784:	d9000517 	ldw	r4,20(sp)
 8003788:	d8000615 	stw	zero,24(sp)
 800378c:	18c00044 	addi	r3,r3,1
 8003790:	d8c00d15 	stw	r3,52(sp)
 8003794:	00800c44 	movi	r2,49
 8003798:	27000044 	addi	fp,r4,1
 800379c:	20800005 	stb	r2,0(r4)
 80037a0:	003e8906 	br	80031c8 <_dtoa_r+0xbe4>
 80037a4:	d8c00517 	ldw	r3,20(sp)
 80037a8:	003bc206 	br	80026b4 <_dtoa_r+0xd0>
 80037ac:	01820074 	movhi	r6,2049
 80037b0:	31b2e504 	addi	r6,r6,-13420
 80037b4:	30c00917 	ldw	r3,36(r6)
 80037b8:	30800817 	ldw	r2,32(r6)
 80037bc:	d9001217 	ldw	r4,72(sp)
 80037c0:	d9401317 	ldw	r5,76(sp)
 80037c4:	180f883a 	mov	r7,r3
 80037c8:	100d883a 	mov	r6,r2
 80037cc:	8008bc40 	call	8008bc4 <__divdf3>
 80037d0:	948003cc 	andi	r18,r18,15
 80037d4:	058000c4 	movi	r22,3
 80037d8:	1029883a 	mov	r20,r2
 80037dc:	182b883a 	mov	r21,r3
 80037e0:	003c8906 	br	8002a08 <_dtoa_r+0x424>
 80037e4:	d9001017 	ldw	r4,64(sp)
 80037e8:	d9800917 	ldw	r6,36(sp)
 80037ec:	0025883a 	mov	r18,zero
 80037f0:	1105c83a 	sub	r2,r2,r4
 80037f4:	2089883a 	add	r4,r4,r2
 80037f8:	308d883a 	add	r6,r6,r2
 80037fc:	d9001015 	stw	r4,64(sp)
 8003800:	d9800915 	stw	r6,36(sp)
 8003804:	003e3206 	br	80030d0 <_dtoa_r+0xaec>
 8003808:	28800044 	addi	r2,r5,1
 800380c:	27000044 	addi	fp,r4,1
 8003810:	20800005 	stb	r2,0(r4)
 8003814:	003e6c06 	br	80031c8 <_dtoa_r+0xbe4>
 8003818:	d8800f17 	ldw	r2,60(sp)
 800381c:	00bce016 	blt	zero,r2,8002ba0 <_dtoa_r+0x5bc>
 8003820:	d9800f17 	ldw	r6,60(sp)
 8003824:	303cc51e 	bne	r6,zero,8002b3c <_dtoa_r+0x558>
 8003828:	0005883a 	mov	r2,zero
 800382c:	00d00534 	movhi	r3,16404
 8003830:	980b883a 	mov	r5,r19
 8003834:	180f883a 	mov	r7,r3
 8003838:	9009883a 	mov	r4,r18
 800383c:	100d883a 	mov	r6,r2
 8003840:	80088000 	call	8008800 <__muldf3>
 8003844:	180b883a 	mov	r5,r3
 8003848:	a80f883a 	mov	r7,r21
 800384c:	1009883a 	mov	r4,r2
 8003850:	a00d883a 	mov	r6,r20
 8003854:	8008fb40 	call	8008fb4 <__gedf2>
 8003858:	103cb80e 	bge	r2,zero,8002b3c <_dtoa_r+0x558>
 800385c:	0027883a 	mov	r19,zero
 8003860:	0025883a 	mov	r18,zero
 8003864:	003fc606 	br	8003780 <_dtoa_r+0x119c>
 8003868:	99400117 	ldw	r5,4(r19)
 800386c:	d9001617 	ldw	r4,88(sp)
 8003870:	8005d2c0 	call	8005d2c <_Balloc>
 8003874:	99800417 	ldw	r6,16(r19)
 8003878:	11000304 	addi	r4,r2,12
 800387c:	99400304 	addi	r5,r19,12
 8003880:	318d883a 	add	r6,r6,r6
 8003884:	318d883a 	add	r6,r6,r6
 8003888:	31800204 	addi	r6,r6,8
 800388c:	1023883a 	mov	r17,r2
 8003890:	80055940 	call	8005594 <memcpy>
 8003894:	d9001617 	ldw	r4,88(sp)
 8003898:	880b883a 	mov	r5,r17
 800389c:	01800044 	movi	r6,1
 80038a0:	80060f00 	call	80060f0 <__lshift>
 80038a4:	100b883a 	mov	r5,r2
 80038a8:	003d9c06 	br	8002f1c <_dtoa_r+0x938>
 80038ac:	00800e44 	movi	r2,57
 80038b0:	b8807026 	beq	r23,r2,8003a74 <_dtoa_r+0x1490>
 80038b4:	b8800044 	addi	r2,r23,1
 80038b8:	b7000044 	addi	fp,r22,1
 80038bc:	b0800005 	stb	r2,0(r22)
 80038c0:	003e4106 	br	80031c8 <_dtoa_r+0xbe4>
 80038c4:	d8800317 	ldw	r2,12(sp)
 80038c8:	01820074 	movhi	r6,2049
 80038cc:	31b2b304 	addi	r6,r6,-13620
 80038d0:	b009883a 	mov	r4,r22
 80038d4:	100e90fa 	slli	r7,r2,3
 80038d8:	b80b883a 	mov	r5,r23
 80038dc:	398f883a 	add	r7,r7,r6
 80038e0:	38bffe17 	ldw	r2,-8(r7)
 80038e4:	d9800517 	ldw	r6,20(sp)
 80038e8:	38ffff17 	ldw	r3,-4(r7)
 80038ec:	37000044 	addi	fp,r6,1
 80038f0:	180f883a 	mov	r7,r3
 80038f4:	100d883a 	mov	r6,r2
 80038f8:	80088000 	call	8008800 <__muldf3>
 80038fc:	a80b883a 	mov	r5,r21
 8003900:	a009883a 	mov	r4,r20
 8003904:	182f883a 	mov	r23,r3
 8003908:	102d883a 	mov	r22,r2
 800390c:	80091bc0 	call	80091bc <__fixdfsi>
 8003910:	1009883a 	mov	r4,r2
 8003914:	1027883a 	mov	r19,r2
 8003918:	80090c40 	call	80090c4 <__floatsidf>
 800391c:	a80b883a 	mov	r5,r21
 8003920:	a009883a 	mov	r4,r20
 8003924:	180f883a 	mov	r7,r3
 8003928:	100d883a 	mov	r6,r2
 800392c:	800870c0 	call	800870c <__subdf3>
 8003930:	180b883a 	mov	r5,r3
 8003934:	d8c00517 	ldw	r3,20(sp)
 8003938:	9cc00c04 	addi	r19,r19,48
 800393c:	1009883a 	mov	r4,r2
 8003940:	1cc00005 	stb	r19,0(r3)
 8003944:	2021883a 	mov	r16,r4
 8003948:	d9000317 	ldw	r4,12(sp)
 800394c:	00800044 	movi	r2,1
 8003950:	2823883a 	mov	r17,r5
 8003954:	20802226 	beq	r4,r2,80039e0 <_dtoa_r+0x13fc>
 8003958:	1029883a 	mov	r20,r2
 800395c:	0005883a 	mov	r2,zero
 8003960:	00d00934 	movhi	r3,16420
 8003964:	180f883a 	mov	r7,r3
 8003968:	100d883a 	mov	r6,r2
 800396c:	880b883a 	mov	r5,r17
 8003970:	8009883a 	mov	r4,r16
 8003974:	80088000 	call	8008800 <__muldf3>
 8003978:	180b883a 	mov	r5,r3
 800397c:	1009883a 	mov	r4,r2
 8003980:	1823883a 	mov	r17,r3
 8003984:	1021883a 	mov	r16,r2
 8003988:	80091bc0 	call	80091bc <__fixdfsi>
 800398c:	1009883a 	mov	r4,r2
 8003990:	102b883a 	mov	r21,r2
 8003994:	80090c40 	call	80090c4 <__floatsidf>
 8003998:	880b883a 	mov	r5,r17
 800399c:	8009883a 	mov	r4,r16
 80039a0:	180f883a 	mov	r7,r3
 80039a4:	100d883a 	mov	r6,r2
 80039a8:	800870c0 	call	800870c <__subdf3>
 80039ac:	180b883a 	mov	r5,r3
 80039b0:	d8c00517 	ldw	r3,20(sp)
 80039b4:	1009883a 	mov	r4,r2
 80039b8:	ad400c04 	addi	r21,r21,48
 80039bc:	1d05883a 	add	r2,r3,r20
 80039c0:	15400005 	stb	r21,0(r2)
 80039c4:	2021883a 	mov	r16,r4
 80039c8:	d9000317 	ldw	r4,12(sp)
 80039cc:	a5000044 	addi	r20,r20,1
 80039d0:	2823883a 	mov	r17,r5
 80039d4:	a13fe11e 	bne	r20,r4,800395c <_dtoa_r+0x1378>
 80039d8:	e505883a 	add	r2,fp,r20
 80039dc:	173fffc4 	addi	fp,r2,-1
 80039e0:	0025883a 	mov	r18,zero
 80039e4:	04cff834 	movhi	r19,16352
 80039e8:	b009883a 	mov	r4,r22
 80039ec:	b80b883a 	mov	r5,r23
 80039f0:	900d883a 	mov	r6,r18
 80039f4:	980f883a 	mov	r7,r19
 80039f8:	800878c0 	call	800878c <__adddf3>
 80039fc:	180b883a 	mov	r5,r3
 8003a00:	1009883a 	mov	r4,r2
 8003a04:	800d883a 	mov	r6,r16
 8003a08:	880f883a 	mov	r7,r17
 8003a0c:	800903c0 	call	800903c <__ltdf2>
 8003a10:	103cab16 	blt	r2,zero,8002cc0 <_dtoa_r+0x6dc>
 8003a14:	0009883a 	mov	r4,zero
 8003a18:	980b883a 	mov	r5,r19
 8003a1c:	b80f883a 	mov	r7,r23
 8003a20:	b00d883a 	mov	r6,r22
 8003a24:	800870c0 	call	800870c <__subdf3>
 8003a28:	180b883a 	mov	r5,r3
 8003a2c:	880f883a 	mov	r7,r17
 8003a30:	1009883a 	mov	r4,r2
 8003a34:	800d883a 	mov	r6,r16
 8003a38:	8008f2c0 	call	8008f2c <__gtdf2>
 8003a3c:	00bc470e 	bge	zero,r2,8002b5c <_dtoa_r+0x578>
 8003a40:	00c00c04 	movi	r3,48
 8003a44:	e73fffc4 	addi	fp,fp,-1
 8003a48:	e0800007 	ldb	r2,0(fp)
 8003a4c:	10fffd26 	beq	r2,r3,8003a44 <_dtoa_r+0x1460>
 8003a50:	d9800417 	ldw	r6,16(sp)
 8003a54:	e7000044 	addi	fp,fp,1
 8003a58:	d9800d15 	stw	r6,52(sp)
 8003a5c:	003cab06 	br	8002d0c <_dtoa_r+0x728>
 8003a60:	d8c00f17 	ldw	r3,60(sp)
 8003a64:	d9001117 	ldw	r4,68(sp)
 8003a68:	20e1c83a 	sub	r16,r4,r3
 8003a6c:	0007883a 	mov	r3,zero
 8003a70:	003d9b06 	br	80030e0 <_dtoa_r+0xafc>
 8003a74:	00800e44 	movi	r2,57
 8003a78:	b0800005 	stb	r2,0(r22)
 8003a7c:	b5800044 	addi	r22,r22,1
 8003a80:	003dc106 	br	8003188 <_dtoa_r+0xba4>
 8003a84:	05800084 	movi	r22,2
 8003a88:	003bf706 	br	8002a68 <_dtoa_r+0x484>
 8003a8c:	d9000f17 	ldw	r4,60(sp)
 8003a90:	013c000e 	bge	zero,r4,8002a94 <_dtoa_r+0x4b0>
 8003a94:	d9800e17 	ldw	r6,56(sp)
 8003a98:	01bc300e 	bge	zero,r6,8002b5c <_dtoa_r+0x578>
 8003a9c:	0005883a 	mov	r2,zero
 8003aa0:	00d00934 	movhi	r3,16420
 8003aa4:	a80b883a 	mov	r5,r21
 8003aa8:	180f883a 	mov	r7,r3
 8003aac:	a009883a 	mov	r4,r20
 8003ab0:	100d883a 	mov	r6,r2
 8003ab4:	80088000 	call	8008800 <__muldf3>
 8003ab8:	b1000044 	addi	r4,r22,1
 8003abc:	1021883a 	mov	r16,r2
 8003ac0:	1823883a 	mov	r17,r3
 8003ac4:	80090c40 	call	80090c4 <__floatsidf>
 8003ac8:	880b883a 	mov	r5,r17
 8003acc:	8009883a 	mov	r4,r16
 8003ad0:	180f883a 	mov	r7,r3
 8003ad4:	100d883a 	mov	r6,r2
 8003ad8:	80088000 	call	8008800 <__muldf3>
 8003adc:	0011883a 	mov	r8,zero
 8003ae0:	02500734 	movhi	r9,16412
 8003ae4:	180b883a 	mov	r5,r3
 8003ae8:	480f883a 	mov	r7,r9
 8003aec:	1009883a 	mov	r4,r2
 8003af0:	400d883a 	mov	r6,r8
 8003af4:	800878c0 	call	800878c <__adddf3>
 8003af8:	102d883a 	mov	r22,r2
 8003afc:	00bf3034 	movhi	r2,64704
 8003b00:	10ef883a 	add	r23,r2,r3
 8003b04:	d8800d17 	ldw	r2,52(sp)
 8003b08:	d8c00e17 	ldw	r3,56(sp)
 8003b0c:	8029883a 	mov	r20,r16
 8003b10:	10bfffc4 	addi	r2,r2,-1
 8003b14:	882b883a 	mov	r21,r17
 8003b18:	d8800415 	stw	r2,16(sp)
 8003b1c:	d8c00315 	stw	r3,12(sp)
 8003b20:	003e8306 	br	8003530 <_dtoa_r+0xf4c>
 8003b24:	d8800117 	ldw	r2,4(sp)
 8003b28:	dc001117 	ldw	r16,68(sp)
 8003b2c:	dc801017 	ldw	r18,64(sp)
 8003b30:	00c00d84 	movi	r3,54
 8003b34:	1887c83a 	sub	r3,r3,r2
 8003b38:	003d6906 	br	80030e0 <_dtoa_r+0xafc>
 8003b3c:	01800044 	movi	r6,1
 8003b40:	3021883a 	mov	r16,r6
 8003b44:	d9800f15 	stw	r6,60(sp)
 8003b48:	d9802615 	stw	r6,152(sp)
 8003b4c:	d9800e15 	stw	r6,56(sp)
 8003b50:	003b9306 	br	80029a0 <_dtoa_r+0x3bc>
 8003b54:	b021883a 	mov	r16,r22
 8003b58:	dd800f15 	stw	r22,60(sp)
 8003b5c:	003b9006 	br	80029a0 <_dtoa_r+0x3bc>
 8003b60:	103e221e 	bne	r2,zero,80033ec <_dtoa_r+0xe08>
 8003b64:	b880004c 	andi	r2,r23,1
 8003b68:	1005003a 	cmpeq	r2,r2,zero
 8003b6c:	103e1f1e 	bne	r2,zero,80033ec <_dtoa_r+0xe08>
 8003b70:	003e1b06 	br	80033e0 <_dtoa_r+0xdfc>
 8003b74:	d9001617 	ldw	r4,88(sp)
 8003b78:	980b883a 	mov	r5,r19
 8003b7c:	01800284 	movi	r6,10
 8003b80:	000f883a 	mov	r7,zero
 8003b84:	80064cc0 	call	80064cc <__multadd>
 8003b88:	d8c00e17 	ldw	r3,56(sp)
 8003b8c:	1027883a 	mov	r19,r2
 8003b90:	d8c00f15 	stw	r3,60(sp)
 8003b94:	003cd306 	br	8002ee4 <_dtoa_r+0x900>

08003b98 <_fflush_r>:
 8003b98:	defffb04 	addi	sp,sp,-20
 8003b9c:	dcc00315 	stw	r19,12(sp)
 8003ba0:	dc800215 	stw	r18,8(sp)
 8003ba4:	dfc00415 	stw	ra,16(sp)
 8003ba8:	dc400115 	stw	r17,4(sp)
 8003bac:	dc000015 	stw	r16,0(sp)
 8003bb0:	2027883a 	mov	r19,r4
 8003bb4:	2825883a 	mov	r18,r5
 8003bb8:	20000226 	beq	r4,zero,8003bc4 <_fflush_r+0x2c>
 8003bbc:	20800e17 	ldw	r2,56(r4)
 8003bc0:	10005626 	beq	r2,zero,8003d1c <_fflush_r+0x184>
 8003bc4:	9100030b 	ldhu	r4,12(r18)
 8003bc8:	20ffffcc 	andi	r3,r4,65535
 8003bcc:	18e0001c 	xori	r3,r3,32768
 8003bd0:	18e00004 	addi	r3,r3,-32768
 8003bd4:	1880020c 	andi	r2,r3,8
 8003bd8:	1000261e 	bne	r2,zero,8003c74 <_fflush_r+0xdc>
 8003bdc:	90c00117 	ldw	r3,4(r18)
 8003be0:	20820014 	ori	r2,r4,2048
 8003be4:	9080030d 	sth	r2,12(r18)
 8003be8:	1009883a 	mov	r4,r2
 8003bec:	00c0400e 	bge	zero,r3,8003cf0 <_fflush_r+0x158>
 8003bf0:	92000a17 	ldw	r8,40(r18)
 8003bf4:	40004026 	beq	r8,zero,8003cf8 <_fflush_r+0x160>
 8003bf8:	2084000c 	andi	r2,r4,4096
 8003bfc:	10005326 	beq	r2,zero,8003d4c <_fflush_r+0x1b4>
 8003c00:	94001417 	ldw	r16,80(r18)
 8003c04:	9080030b 	ldhu	r2,12(r18)
 8003c08:	1080010c 	andi	r2,r2,4
 8003c0c:	1000481e 	bne	r2,zero,8003d30 <_fflush_r+0x198>
 8003c10:	91400717 	ldw	r5,28(r18)
 8003c14:	9809883a 	mov	r4,r19
 8003c18:	800d883a 	mov	r6,r16
 8003c1c:	000f883a 	mov	r7,zero
 8003c20:	403ee83a 	callr	r8
 8003c24:	8080261e 	bne	r16,r2,8003cc0 <_fflush_r+0x128>
 8003c28:	9080030b 	ldhu	r2,12(r18)
 8003c2c:	91000417 	ldw	r4,16(r18)
 8003c30:	90000115 	stw	zero,4(r18)
 8003c34:	10bdffcc 	andi	r2,r2,63487
 8003c38:	10ffffcc 	andi	r3,r2,65535
 8003c3c:	18c4000c 	andi	r3,r3,4096
 8003c40:	9080030d 	sth	r2,12(r18)
 8003c44:	91000015 	stw	r4,0(r18)
 8003c48:	18002b26 	beq	r3,zero,8003cf8 <_fflush_r+0x160>
 8003c4c:	0007883a 	mov	r3,zero
 8003c50:	1805883a 	mov	r2,r3
 8003c54:	94001415 	stw	r16,80(r18)
 8003c58:	dfc00417 	ldw	ra,16(sp)
 8003c5c:	dcc00317 	ldw	r19,12(sp)
 8003c60:	dc800217 	ldw	r18,8(sp)
 8003c64:	dc400117 	ldw	r17,4(sp)
 8003c68:	dc000017 	ldw	r16,0(sp)
 8003c6c:	dec00504 	addi	sp,sp,20
 8003c70:	f800283a 	ret
 8003c74:	94400417 	ldw	r17,16(r18)
 8003c78:	88001f26 	beq	r17,zero,8003cf8 <_fflush_r+0x160>
 8003c7c:	90800017 	ldw	r2,0(r18)
 8003c80:	18c000cc 	andi	r3,r3,3
 8003c84:	94400015 	stw	r17,0(r18)
 8003c88:	1461c83a 	sub	r16,r2,r17
 8003c8c:	18002526 	beq	r3,zero,8003d24 <_fflush_r+0x18c>
 8003c90:	0005883a 	mov	r2,zero
 8003c94:	90800215 	stw	r2,8(r18)
 8003c98:	0400170e 	bge	zero,r16,8003cf8 <_fflush_r+0x160>
 8003c9c:	90c00917 	ldw	r3,36(r18)
 8003ca0:	91400717 	ldw	r5,28(r18)
 8003ca4:	880d883a 	mov	r6,r17
 8003ca8:	800f883a 	mov	r7,r16
 8003cac:	9809883a 	mov	r4,r19
 8003cb0:	183ee83a 	callr	r3
 8003cb4:	88a3883a 	add	r17,r17,r2
 8003cb8:	80a1c83a 	sub	r16,r16,r2
 8003cbc:	00bff616 	blt	zero,r2,8003c98 <_fflush_r+0x100>
 8003cc0:	9080030b 	ldhu	r2,12(r18)
 8003cc4:	00ffffc4 	movi	r3,-1
 8003cc8:	10801014 	ori	r2,r2,64
 8003ccc:	9080030d 	sth	r2,12(r18)
 8003cd0:	1805883a 	mov	r2,r3
 8003cd4:	dfc00417 	ldw	ra,16(sp)
 8003cd8:	dcc00317 	ldw	r19,12(sp)
 8003cdc:	dc800217 	ldw	r18,8(sp)
 8003ce0:	dc400117 	ldw	r17,4(sp)
 8003ce4:	dc000017 	ldw	r16,0(sp)
 8003ce8:	dec00504 	addi	sp,sp,20
 8003cec:	f800283a 	ret
 8003cf0:	90800f17 	ldw	r2,60(r18)
 8003cf4:	00bfbe16 	blt	zero,r2,8003bf0 <_fflush_r+0x58>
 8003cf8:	0007883a 	mov	r3,zero
 8003cfc:	1805883a 	mov	r2,r3
 8003d00:	dfc00417 	ldw	ra,16(sp)
 8003d04:	dcc00317 	ldw	r19,12(sp)
 8003d08:	dc800217 	ldw	r18,8(sp)
 8003d0c:	dc400117 	ldw	r17,4(sp)
 8003d10:	dc000017 	ldw	r16,0(sp)
 8003d14:	dec00504 	addi	sp,sp,20
 8003d18:	f800283a 	ret
 8003d1c:	8003e300 	call	8003e30 <__sinit>
 8003d20:	003fa806 	br	8003bc4 <_fflush_r+0x2c>
 8003d24:	90800517 	ldw	r2,20(r18)
 8003d28:	90800215 	stw	r2,8(r18)
 8003d2c:	003fda06 	br	8003c98 <_fflush_r+0x100>
 8003d30:	90800117 	ldw	r2,4(r18)
 8003d34:	90c00c17 	ldw	r3,48(r18)
 8003d38:	80a1c83a 	sub	r16,r16,r2
 8003d3c:	183fb426 	beq	r3,zero,8003c10 <_fflush_r+0x78>
 8003d40:	90800f17 	ldw	r2,60(r18)
 8003d44:	80a1c83a 	sub	r16,r16,r2
 8003d48:	003fb106 	br	8003c10 <_fflush_r+0x78>
 8003d4c:	91400717 	ldw	r5,28(r18)
 8003d50:	9809883a 	mov	r4,r19
 8003d54:	000d883a 	mov	r6,zero
 8003d58:	01c00044 	movi	r7,1
 8003d5c:	403ee83a 	callr	r8
 8003d60:	1021883a 	mov	r16,r2
 8003d64:	00bfffc4 	movi	r2,-1
 8003d68:	80800226 	beq	r16,r2,8003d74 <_fflush_r+0x1dc>
 8003d6c:	92000a17 	ldw	r8,40(r18)
 8003d70:	003fa406 	br	8003c04 <_fflush_r+0x6c>
 8003d74:	98c00017 	ldw	r3,0(r19)
 8003d78:	00800744 	movi	r2,29
 8003d7c:	18bfde26 	beq	r3,r2,8003cf8 <_fflush_r+0x160>
 8003d80:	9080030b 	ldhu	r2,12(r18)
 8003d84:	8007883a 	mov	r3,r16
 8003d88:	10801014 	ori	r2,r2,64
 8003d8c:	9080030d 	sth	r2,12(r18)
 8003d90:	003fcf06 	br	8003cd0 <_fflush_r+0x138>

08003d94 <fflush>:
 8003d94:	01420034 	movhi	r5,2048
 8003d98:	294ee604 	addi	r5,r5,15256
 8003d9c:	2007883a 	mov	r3,r4
 8003da0:	20000526 	beq	r4,zero,8003db8 <fflush+0x24>
 8003da4:	00820074 	movhi	r2,2049
 8003da8:	10ba1404 	addi	r2,r2,-6064
 8003dac:	11000017 	ldw	r4,0(r2)
 8003db0:	180b883a 	mov	r5,r3
 8003db4:	8003b981 	jmpi	8003b98 <_fflush_r>
 8003db8:	00820074 	movhi	r2,2049
 8003dbc:	10ba1504 	addi	r2,r2,-6060
 8003dc0:	11000017 	ldw	r4,0(r2)
 8003dc4:	80049981 	jmpi	8004998 <_fwalk_reent>

08003dc8 <std>:
 8003dc8:	00820034 	movhi	r2,2048
 8003dcc:	109bc304 	addi	r2,r2,28428
 8003dd0:	20800b15 	stw	r2,44(r4)
 8003dd4:	00820034 	movhi	r2,2048
 8003dd8:	109bfe04 	addi	r2,r2,28664
 8003ddc:	20800815 	stw	r2,32(r4)
 8003de0:	00c20034 	movhi	r3,2048
 8003de4:	18dbdf04 	addi	r3,r3,28540
 8003de8:	00820034 	movhi	r2,2048
 8003dec:	109bc504 	addi	r2,r2,28436
 8003df0:	2140030d 	sth	r5,12(r4)
 8003df4:	2180038d 	sth	r6,14(r4)
 8003df8:	20c00915 	stw	r3,36(r4)
 8003dfc:	20800a15 	stw	r2,40(r4)
 8003e00:	20000015 	stw	zero,0(r4)
 8003e04:	20000115 	stw	zero,4(r4)
 8003e08:	20000215 	stw	zero,8(r4)
 8003e0c:	20000415 	stw	zero,16(r4)
 8003e10:	20000515 	stw	zero,20(r4)
 8003e14:	20000615 	stw	zero,24(r4)
 8003e18:	21000715 	stw	r4,28(r4)
 8003e1c:	f800283a 	ret

08003e20 <__sfp_lock_acquire>:
 8003e20:	f800283a 	ret

08003e24 <__sfp_lock_release>:
 8003e24:	f800283a 	ret

08003e28 <__sinit_lock_acquire>:
 8003e28:	f800283a 	ret

08003e2c <__sinit_lock_release>:
 8003e2c:	f800283a 	ret

08003e30 <__sinit>:
 8003e30:	20800e17 	ldw	r2,56(r4)
 8003e34:	defffd04 	addi	sp,sp,-12
 8003e38:	dc400115 	stw	r17,4(sp)
 8003e3c:	dc000015 	stw	r16,0(sp)
 8003e40:	dfc00215 	stw	ra,8(sp)
 8003e44:	04400044 	movi	r17,1
 8003e48:	01400104 	movi	r5,4
 8003e4c:	000d883a 	mov	r6,zero
 8003e50:	2021883a 	mov	r16,r4
 8003e54:	2200bb04 	addi	r8,r4,748
 8003e58:	200f883a 	mov	r7,r4
 8003e5c:	10000526 	beq	r2,zero,8003e74 <__sinit+0x44>
 8003e60:	dfc00217 	ldw	ra,8(sp)
 8003e64:	dc400117 	ldw	r17,4(sp)
 8003e68:	dc000017 	ldw	r16,0(sp)
 8003e6c:	dec00304 	addi	sp,sp,12
 8003e70:	f800283a 	ret
 8003e74:	21000117 	ldw	r4,4(r4)
 8003e78:	00820034 	movhi	r2,2048
 8003e7c:	108fc504 	addi	r2,r2,16148
 8003e80:	00c000c4 	movi	r3,3
 8003e84:	80800f15 	stw	r2,60(r16)
 8003e88:	80c0b915 	stw	r3,740(r16)
 8003e8c:	8200ba15 	stw	r8,744(r16)
 8003e90:	84400e15 	stw	r17,56(r16)
 8003e94:	8000b815 	stw	zero,736(r16)
 8003e98:	8003dc80 	call	8003dc8 <std>
 8003e9c:	81000217 	ldw	r4,8(r16)
 8003ea0:	880d883a 	mov	r6,r17
 8003ea4:	800f883a 	mov	r7,r16
 8003ea8:	01400284 	movi	r5,10
 8003eac:	8003dc80 	call	8003dc8 <std>
 8003eb0:	81000317 	ldw	r4,12(r16)
 8003eb4:	800f883a 	mov	r7,r16
 8003eb8:	01400484 	movi	r5,18
 8003ebc:	01800084 	movi	r6,2
 8003ec0:	dfc00217 	ldw	ra,8(sp)
 8003ec4:	dc400117 	ldw	r17,4(sp)
 8003ec8:	dc000017 	ldw	r16,0(sp)
 8003ecc:	dec00304 	addi	sp,sp,12
 8003ed0:	8003dc81 	jmpi	8003dc8 <std>

08003ed4 <__fp_lock>:
 8003ed4:	0005883a 	mov	r2,zero
 8003ed8:	f800283a 	ret

08003edc <__fp_unlock>:
 8003edc:	0005883a 	mov	r2,zero
 8003ee0:	f800283a 	ret

08003ee4 <__fp_unlock_all>:
 8003ee4:	00820074 	movhi	r2,2049
 8003ee8:	10ba1404 	addi	r2,r2,-6064
 8003eec:	11000017 	ldw	r4,0(r2)
 8003ef0:	01420034 	movhi	r5,2048
 8003ef4:	294fb704 	addi	r5,r5,16092
 8003ef8:	8004a601 	jmpi	8004a60 <_fwalk>

08003efc <__fp_lock_all>:
 8003efc:	00820074 	movhi	r2,2049
 8003f00:	10ba1404 	addi	r2,r2,-6064
 8003f04:	11000017 	ldw	r4,0(r2)
 8003f08:	01420034 	movhi	r5,2048
 8003f0c:	294fb504 	addi	r5,r5,16084
 8003f10:	8004a601 	jmpi	8004a60 <_fwalk>

08003f14 <_cleanup_r>:
 8003f14:	01420034 	movhi	r5,2048
 8003f18:	295d1204 	addi	r5,r5,29768
 8003f1c:	8004a601 	jmpi	8004a60 <_fwalk>

08003f20 <_cleanup>:
 8003f20:	00820074 	movhi	r2,2049
 8003f24:	10ba1504 	addi	r2,r2,-6060
 8003f28:	11000017 	ldw	r4,0(r2)
 8003f2c:	8003f141 	jmpi	8003f14 <_cleanup_r>

08003f30 <__sfmoreglue>:
 8003f30:	defffc04 	addi	sp,sp,-16
 8003f34:	dc000015 	stw	r16,0(sp)
 8003f38:	2821883a 	mov	r16,r5
 8003f3c:	dc400115 	stw	r17,4(sp)
 8003f40:	01401704 	movi	r5,92
 8003f44:	2023883a 	mov	r17,r4
 8003f48:	8009883a 	mov	r4,r16
 8003f4c:	dfc00315 	stw	ra,12(sp)
 8003f50:	dcc00215 	stw	r19,8(sp)
 8003f54:	80095740 	call	8009574 <__mulsi3>
 8003f58:	11400304 	addi	r5,r2,12
 8003f5c:	8809883a 	mov	r4,r17
 8003f60:	1027883a 	mov	r19,r2
 8003f64:	8004d700 	call	8004d70 <_malloc_r>
 8003f68:	10c00304 	addi	r3,r2,12
 8003f6c:	1023883a 	mov	r17,r2
 8003f70:	1809883a 	mov	r4,r3
 8003f74:	980d883a 	mov	r6,r19
 8003f78:	000b883a 	mov	r5,zero
 8003f7c:	10000b26 	beq	r2,zero,8003fac <__sfmoreglue+0x7c>
 8003f80:	14000115 	stw	r16,4(r2)
 8003f84:	10c00215 	stw	r3,8(r2)
 8003f88:	10000015 	stw	zero,0(r2)
 8003f8c:	80057140 	call	8005714 <memset>
 8003f90:	8805883a 	mov	r2,r17
 8003f94:	dfc00317 	ldw	ra,12(sp)
 8003f98:	dcc00217 	ldw	r19,8(sp)
 8003f9c:	dc400117 	ldw	r17,4(sp)
 8003fa0:	dc000017 	ldw	r16,0(sp)
 8003fa4:	dec00404 	addi	sp,sp,16
 8003fa8:	f800283a 	ret
 8003fac:	0023883a 	mov	r17,zero
 8003fb0:	8805883a 	mov	r2,r17
 8003fb4:	dfc00317 	ldw	ra,12(sp)
 8003fb8:	dcc00217 	ldw	r19,8(sp)
 8003fbc:	dc400117 	ldw	r17,4(sp)
 8003fc0:	dc000017 	ldw	r16,0(sp)
 8003fc4:	dec00404 	addi	sp,sp,16
 8003fc8:	f800283a 	ret

08003fcc <__sfp>:
 8003fcc:	defffd04 	addi	sp,sp,-12
 8003fd0:	00820074 	movhi	r2,2049
 8003fd4:	10ba1504 	addi	r2,r2,-6060
 8003fd8:	dc000015 	stw	r16,0(sp)
 8003fdc:	14000017 	ldw	r16,0(r2)
 8003fe0:	dc400115 	stw	r17,4(sp)
 8003fe4:	dfc00215 	stw	ra,8(sp)
 8003fe8:	80800e17 	ldw	r2,56(r16)
 8003fec:	2023883a 	mov	r17,r4
 8003ff0:	10002626 	beq	r2,zero,800408c <__sfp+0xc0>
 8003ff4:	8400b804 	addi	r16,r16,736
 8003ff8:	80800117 	ldw	r2,4(r16)
 8003ffc:	81000217 	ldw	r4,8(r16)
 8004000:	10ffffc4 	addi	r3,r2,-1
 8004004:	18000916 	blt	r3,zero,800402c <__sfp+0x60>
 8004008:	2080030f 	ldh	r2,12(r4)
 800400c:	10000b26 	beq	r2,zero,800403c <__sfp+0x70>
 8004010:	017fffc4 	movi	r5,-1
 8004014:	00000206 	br	8004020 <__sfp+0x54>
 8004018:	2080030f 	ldh	r2,12(r4)
 800401c:	10000726 	beq	r2,zero,800403c <__sfp+0x70>
 8004020:	18ffffc4 	addi	r3,r3,-1
 8004024:	21001704 	addi	r4,r4,92
 8004028:	197ffb1e 	bne	r3,r5,8004018 <__sfp+0x4c>
 800402c:	80800017 	ldw	r2,0(r16)
 8004030:	10001926 	beq	r2,zero,8004098 <__sfp+0xcc>
 8004034:	1021883a 	mov	r16,r2
 8004038:	003fef06 	br	8003ff8 <__sfp+0x2c>
 800403c:	00bfffc4 	movi	r2,-1
 8004040:	00c00044 	movi	r3,1
 8004044:	2080038d 	sth	r2,14(r4)
 8004048:	20c0030d 	sth	r3,12(r4)
 800404c:	20000015 	stw	zero,0(r4)
 8004050:	20000215 	stw	zero,8(r4)
 8004054:	20000115 	stw	zero,4(r4)
 8004058:	20000415 	stw	zero,16(r4)
 800405c:	20000515 	stw	zero,20(r4)
 8004060:	20000615 	stw	zero,24(r4)
 8004064:	20000c15 	stw	zero,48(r4)
 8004068:	20000d15 	stw	zero,52(r4)
 800406c:	20001115 	stw	zero,68(r4)
 8004070:	20001215 	stw	zero,72(r4)
 8004074:	2005883a 	mov	r2,r4
 8004078:	dfc00217 	ldw	ra,8(sp)
 800407c:	dc400117 	ldw	r17,4(sp)
 8004080:	dc000017 	ldw	r16,0(sp)
 8004084:	dec00304 	addi	sp,sp,12
 8004088:	f800283a 	ret
 800408c:	8009883a 	mov	r4,r16
 8004090:	8003e300 	call	8003e30 <__sinit>
 8004094:	003fd706 	br	8003ff4 <__sfp+0x28>
 8004098:	8809883a 	mov	r4,r17
 800409c:	01400104 	movi	r5,4
 80040a0:	8003f300 	call	8003f30 <__sfmoreglue>
 80040a4:	80800015 	stw	r2,0(r16)
 80040a8:	103fe21e 	bne	r2,zero,8004034 <__sfp+0x68>
 80040ac:	00800304 	movi	r2,12
 80040b0:	0009883a 	mov	r4,zero
 80040b4:	88800015 	stw	r2,0(r17)
 80040b8:	003fee06 	br	8004074 <__sfp+0xa8>

080040bc <_malloc_trim_r>:
 80040bc:	defffb04 	addi	sp,sp,-20
 80040c0:	dcc00315 	stw	r19,12(sp)
 80040c4:	04c20074 	movhi	r19,2049
 80040c8:	9cf47304 	addi	r19,r19,-11828
 80040cc:	dc800215 	stw	r18,8(sp)
 80040d0:	dc400115 	stw	r17,4(sp)
 80040d4:	dc000015 	stw	r16,0(sp)
 80040d8:	2823883a 	mov	r17,r5
 80040dc:	2025883a 	mov	r18,r4
 80040e0:	dfc00415 	stw	ra,16(sp)
 80040e4:	800a2f80 	call	800a2f8 <__malloc_lock>
 80040e8:	98800217 	ldw	r2,8(r19)
 80040ec:	9009883a 	mov	r4,r18
 80040f0:	000b883a 	mov	r5,zero
 80040f4:	10c00117 	ldw	r3,4(r2)
 80040f8:	00bfff04 	movi	r2,-4
 80040fc:	18a0703a 	and	r16,r3,r2
 8004100:	8463c83a 	sub	r17,r16,r17
 8004104:	8c43fbc4 	addi	r17,r17,4079
 8004108:	8822d33a 	srli	r17,r17,12
 800410c:	0083ffc4 	movi	r2,4095
 8004110:	8c7fffc4 	addi	r17,r17,-1
 8004114:	8822933a 	slli	r17,r17,12
 8004118:	1440060e 	bge	r2,r17,8004134 <_malloc_trim_r+0x78>
 800411c:	8006e9c0 	call	8006e9c <_sbrk_r>
 8004120:	98c00217 	ldw	r3,8(r19)
 8004124:	9009883a 	mov	r4,r18
 8004128:	044bc83a 	sub	r5,zero,r17
 800412c:	80c7883a 	add	r3,r16,r3
 8004130:	10c00926 	beq	r2,r3,8004158 <_malloc_trim_r+0x9c>
 8004134:	800a3180 	call	800a318 <__malloc_unlock>
 8004138:	0005883a 	mov	r2,zero
 800413c:	dfc00417 	ldw	ra,16(sp)
 8004140:	dcc00317 	ldw	r19,12(sp)
 8004144:	dc800217 	ldw	r18,8(sp)
 8004148:	dc400117 	ldw	r17,4(sp)
 800414c:	dc000017 	ldw	r16,0(sp)
 8004150:	dec00504 	addi	sp,sp,20
 8004154:	f800283a 	ret
 8004158:	9009883a 	mov	r4,r18
 800415c:	8006e9c0 	call	8006e9c <_sbrk_r>
 8004160:	844dc83a 	sub	r6,r16,r17
 8004164:	00ffffc4 	movi	r3,-1
 8004168:	9009883a 	mov	r4,r18
 800416c:	000b883a 	mov	r5,zero
 8004170:	01c20074 	movhi	r7,2049
 8004174:	39c0e504 	addi	r7,r7,916
 8004178:	31800054 	ori	r6,r6,1
 800417c:	10c00926 	beq	r2,r3,80041a4 <_malloc_trim_r+0xe8>
 8004180:	38800017 	ldw	r2,0(r7)
 8004184:	98c00217 	ldw	r3,8(r19)
 8004188:	9009883a 	mov	r4,r18
 800418c:	1445c83a 	sub	r2,r2,r17
 8004190:	38800015 	stw	r2,0(r7)
 8004194:	19800115 	stw	r6,4(r3)
 8004198:	800a3180 	call	800a318 <__malloc_unlock>
 800419c:	00800044 	movi	r2,1
 80041a0:	003fe606 	br	800413c <_malloc_trim_r+0x80>
 80041a4:	8006e9c0 	call	8006e9c <_sbrk_r>
 80041a8:	99800217 	ldw	r6,8(r19)
 80041ac:	100f883a 	mov	r7,r2
 80041b0:	9009883a 	mov	r4,r18
 80041b4:	1187c83a 	sub	r3,r2,r6
 80041b8:	008003c4 	movi	r2,15
 80041bc:	19400054 	ori	r5,r3,1
 80041c0:	10ffdc0e 	bge	r2,r3,8004134 <_malloc_trim_r+0x78>
 80041c4:	00820074 	movhi	r2,2049
 80041c8:	10ba1904 	addi	r2,r2,-6044
 80041cc:	10c00017 	ldw	r3,0(r2)
 80041d0:	00820074 	movhi	r2,2049
 80041d4:	1080e504 	addi	r2,r2,916
 80041d8:	31400115 	stw	r5,4(r6)
 80041dc:	38c7c83a 	sub	r3,r7,r3
 80041e0:	10c00015 	stw	r3,0(r2)
 80041e4:	003fd306 	br	8004134 <_malloc_trim_r+0x78>

080041e8 <_free_r>:
 80041e8:	defffd04 	addi	sp,sp,-12
 80041ec:	dc400115 	stw	r17,4(sp)
 80041f0:	dc000015 	stw	r16,0(sp)
 80041f4:	dfc00215 	stw	ra,8(sp)
 80041f8:	2821883a 	mov	r16,r5
 80041fc:	2023883a 	mov	r17,r4
 8004200:	28005a26 	beq	r5,zero,800436c <_free_r+0x184>
 8004204:	800a2f80 	call	800a2f8 <__malloc_lock>
 8004208:	823ffe04 	addi	r8,r16,-8
 800420c:	41400117 	ldw	r5,4(r8)
 8004210:	00bfff84 	movi	r2,-2
 8004214:	02820074 	movhi	r10,2049
 8004218:	52b47304 	addi	r10,r10,-11828
 800421c:	288e703a 	and	r7,r5,r2
 8004220:	41cd883a 	add	r6,r8,r7
 8004224:	30c00117 	ldw	r3,4(r6)
 8004228:	51000217 	ldw	r4,8(r10)
 800422c:	00bfff04 	movi	r2,-4
 8004230:	1892703a 	and	r9,r3,r2
 8004234:	5017883a 	mov	r11,r10
 8004238:	31006726 	beq	r6,r4,80043d8 <_free_r+0x1f0>
 800423c:	2880004c 	andi	r2,r5,1
 8004240:	1005003a 	cmpeq	r2,r2,zero
 8004244:	32400115 	stw	r9,4(r6)
 8004248:	10001a1e 	bne	r2,zero,80042b4 <_free_r+0xcc>
 800424c:	000b883a 	mov	r5,zero
 8004250:	3247883a 	add	r3,r6,r9
 8004254:	18800117 	ldw	r2,4(r3)
 8004258:	1080004c 	andi	r2,r2,1
 800425c:	1000231e 	bne	r2,zero,80042ec <_free_r+0x104>
 8004260:	280ac03a 	cmpne	r5,r5,zero
 8004264:	3a4f883a 	add	r7,r7,r9
 8004268:	2800451e 	bne	r5,zero,8004380 <_free_r+0x198>
 800426c:	31000217 	ldw	r4,8(r6)
 8004270:	00820074 	movhi	r2,2049
 8004274:	10b47504 	addi	r2,r2,-11820
 8004278:	20807b26 	beq	r4,r2,8004468 <_free_r+0x280>
 800427c:	30800317 	ldw	r2,12(r6)
 8004280:	3a07883a 	add	r3,r7,r8
 8004284:	19c00015 	stw	r7,0(r3)
 8004288:	11000215 	stw	r4,8(r2)
 800428c:	20800315 	stw	r2,12(r4)
 8004290:	38800054 	ori	r2,r7,1
 8004294:	40800115 	stw	r2,4(r8)
 8004298:	28001a26 	beq	r5,zero,8004304 <_free_r+0x11c>
 800429c:	8809883a 	mov	r4,r17
 80042a0:	dfc00217 	ldw	ra,8(sp)
 80042a4:	dc400117 	ldw	r17,4(sp)
 80042a8:	dc000017 	ldw	r16,0(sp)
 80042ac:	dec00304 	addi	sp,sp,12
 80042b0:	800a3181 	jmpi	800a318 <__malloc_unlock>
 80042b4:	80bffe17 	ldw	r2,-8(r16)
 80042b8:	50c00204 	addi	r3,r10,8
 80042bc:	4091c83a 	sub	r8,r8,r2
 80042c0:	41000217 	ldw	r4,8(r8)
 80042c4:	388f883a 	add	r7,r7,r2
 80042c8:	20c06126 	beq	r4,r3,8004450 <_free_r+0x268>
 80042cc:	40800317 	ldw	r2,12(r8)
 80042d0:	3247883a 	add	r3,r6,r9
 80042d4:	000b883a 	mov	r5,zero
 80042d8:	11000215 	stw	r4,8(r2)
 80042dc:	20800315 	stw	r2,12(r4)
 80042e0:	18800117 	ldw	r2,4(r3)
 80042e4:	1080004c 	andi	r2,r2,1
 80042e8:	103fdd26 	beq	r2,zero,8004260 <_free_r+0x78>
 80042ec:	38800054 	ori	r2,r7,1
 80042f0:	3a07883a 	add	r3,r7,r8
 80042f4:	280ac03a 	cmpne	r5,r5,zero
 80042f8:	40800115 	stw	r2,4(r8)
 80042fc:	19c00015 	stw	r7,0(r3)
 8004300:	283fe61e 	bne	r5,zero,800429c <_free_r+0xb4>
 8004304:	00807fc4 	movi	r2,511
 8004308:	11c01f2e 	bgeu	r2,r7,8004388 <_free_r+0x1a0>
 800430c:	3806d27a 	srli	r3,r7,9
 8004310:	1800481e 	bne	r3,zero,8004434 <_free_r+0x24c>
 8004314:	3804d0fa 	srli	r2,r7,3
 8004318:	100690fa 	slli	r3,r2,3
 800431c:	1acd883a 	add	r6,r3,r11
 8004320:	31400217 	ldw	r5,8(r6)
 8004324:	31405926 	beq	r6,r5,800448c <_free_r+0x2a4>
 8004328:	28800117 	ldw	r2,4(r5)
 800432c:	00ffff04 	movi	r3,-4
 8004330:	10c4703a 	and	r2,r2,r3
 8004334:	3880022e 	bgeu	r7,r2,8004340 <_free_r+0x158>
 8004338:	29400217 	ldw	r5,8(r5)
 800433c:	317ffa1e 	bne	r6,r5,8004328 <_free_r+0x140>
 8004340:	29800317 	ldw	r6,12(r5)
 8004344:	41800315 	stw	r6,12(r8)
 8004348:	41400215 	stw	r5,8(r8)
 800434c:	8809883a 	mov	r4,r17
 8004350:	2a000315 	stw	r8,12(r5)
 8004354:	32000215 	stw	r8,8(r6)
 8004358:	dfc00217 	ldw	ra,8(sp)
 800435c:	dc400117 	ldw	r17,4(sp)
 8004360:	dc000017 	ldw	r16,0(sp)
 8004364:	dec00304 	addi	sp,sp,12
 8004368:	800a3181 	jmpi	800a318 <__malloc_unlock>
 800436c:	dfc00217 	ldw	ra,8(sp)
 8004370:	dc400117 	ldw	r17,4(sp)
 8004374:	dc000017 	ldw	r16,0(sp)
 8004378:	dec00304 	addi	sp,sp,12
 800437c:	f800283a 	ret
 8004380:	31000217 	ldw	r4,8(r6)
 8004384:	003fbd06 	br	800427c <_free_r+0x94>
 8004388:	3806d0fa 	srli	r3,r7,3
 800438c:	00800044 	movi	r2,1
 8004390:	51400117 	ldw	r5,4(r10)
 8004394:	180890fa 	slli	r4,r3,3
 8004398:	1807d0ba 	srai	r3,r3,2
 800439c:	22c9883a 	add	r4,r4,r11
 80043a0:	21800217 	ldw	r6,8(r4)
 80043a4:	10c4983a 	sll	r2,r2,r3
 80043a8:	41000315 	stw	r4,12(r8)
 80043ac:	41800215 	stw	r6,8(r8)
 80043b0:	288ab03a 	or	r5,r5,r2
 80043b4:	22000215 	stw	r8,8(r4)
 80043b8:	8809883a 	mov	r4,r17
 80043bc:	51400115 	stw	r5,4(r10)
 80043c0:	32000315 	stw	r8,12(r6)
 80043c4:	dfc00217 	ldw	ra,8(sp)
 80043c8:	dc400117 	ldw	r17,4(sp)
 80043cc:	dc000017 	ldw	r16,0(sp)
 80043d0:	dec00304 	addi	sp,sp,12
 80043d4:	800a3181 	jmpi	800a318 <__malloc_unlock>
 80043d8:	2880004c 	andi	r2,r5,1
 80043dc:	3a4d883a 	add	r6,r7,r9
 80043e0:	1000071e 	bne	r2,zero,8004400 <_free_r+0x218>
 80043e4:	80bffe17 	ldw	r2,-8(r16)
 80043e8:	4091c83a 	sub	r8,r8,r2
 80043ec:	41000317 	ldw	r4,12(r8)
 80043f0:	40c00217 	ldw	r3,8(r8)
 80043f4:	308d883a 	add	r6,r6,r2
 80043f8:	20c00215 	stw	r3,8(r4)
 80043fc:	19000315 	stw	r4,12(r3)
 8004400:	00820074 	movhi	r2,2049
 8004404:	10ba1804 	addi	r2,r2,-6048
 8004408:	11000017 	ldw	r4,0(r2)
 800440c:	30c00054 	ori	r3,r6,1
 8004410:	52000215 	stw	r8,8(r10)
 8004414:	40c00115 	stw	r3,4(r8)
 8004418:	313fa036 	bltu	r6,r4,800429c <_free_r+0xb4>
 800441c:	00820074 	movhi	r2,2049
 8004420:	1080db04 	addi	r2,r2,876
 8004424:	11400017 	ldw	r5,0(r2)
 8004428:	8809883a 	mov	r4,r17
 800442c:	80040bc0 	call	80040bc <_malloc_trim_r>
 8004430:	003f9a06 	br	800429c <_free_r+0xb4>
 8004434:	00800104 	movi	r2,4
 8004438:	10c0072e 	bgeu	r2,r3,8004458 <_free_r+0x270>
 800443c:	00800504 	movi	r2,20
 8004440:	10c01936 	bltu	r2,r3,80044a8 <_free_r+0x2c0>
 8004444:	188016c4 	addi	r2,r3,91
 8004448:	100690fa 	slli	r3,r2,3
 800444c:	003fb306 	br	800431c <_free_r+0x134>
 8004450:	01400044 	movi	r5,1
 8004454:	003f7e06 	br	8004250 <_free_r+0x68>
 8004458:	3804d1ba 	srli	r2,r7,6
 800445c:	10800e04 	addi	r2,r2,56
 8004460:	100690fa 	slli	r3,r2,3
 8004464:	003fad06 	br	800431c <_free_r+0x134>
 8004468:	22000315 	stw	r8,12(r4)
 800446c:	22000215 	stw	r8,8(r4)
 8004470:	3a05883a 	add	r2,r7,r8
 8004474:	38c00054 	ori	r3,r7,1
 8004478:	11c00015 	stw	r7,0(r2)
 800447c:	41000215 	stw	r4,8(r8)
 8004480:	40c00115 	stw	r3,4(r8)
 8004484:	41000315 	stw	r4,12(r8)
 8004488:	003f8406 	br	800429c <_free_r+0xb4>
 800448c:	1005d0ba 	srai	r2,r2,2
 8004490:	00c00044 	movi	r3,1
 8004494:	51000117 	ldw	r4,4(r10)
 8004498:	1886983a 	sll	r3,r3,r2
 800449c:	20c8b03a 	or	r4,r4,r3
 80044a0:	51000115 	stw	r4,4(r10)
 80044a4:	003fa706 	br	8004344 <_free_r+0x15c>
 80044a8:	00801504 	movi	r2,84
 80044ac:	10c00436 	bltu	r2,r3,80044c0 <_free_r+0x2d8>
 80044b0:	3804d33a 	srli	r2,r7,12
 80044b4:	10801b84 	addi	r2,r2,110
 80044b8:	100690fa 	slli	r3,r2,3
 80044bc:	003f9706 	br	800431c <_free_r+0x134>
 80044c0:	00805504 	movi	r2,340
 80044c4:	10c00436 	bltu	r2,r3,80044d8 <_free_r+0x2f0>
 80044c8:	3804d3fa 	srli	r2,r7,15
 80044cc:	10801dc4 	addi	r2,r2,119
 80044d0:	100690fa 	slli	r3,r2,3
 80044d4:	003f9106 	br	800431c <_free_r+0x134>
 80044d8:	00815504 	movi	r2,1364
 80044dc:	10c0032e 	bgeu	r2,r3,80044ec <_free_r+0x304>
 80044e0:	00801f84 	movi	r2,126
 80044e4:	00c0fc04 	movi	r3,1008
 80044e8:	003f8c06 	br	800431c <_free_r+0x134>
 80044ec:	3804d4ba 	srli	r2,r7,18
 80044f0:	10801f04 	addi	r2,r2,124
 80044f4:	100690fa 	slli	r3,r2,3
 80044f8:	003f8806 	br	800431c <_free_r+0x134>

080044fc <__sfvwrite_r>:
 80044fc:	30800217 	ldw	r2,8(r6)
 8004500:	defff504 	addi	sp,sp,-44
 8004504:	df000915 	stw	fp,36(sp)
 8004508:	dd800715 	stw	r22,28(sp)
 800450c:	dc800315 	stw	r18,12(sp)
 8004510:	dfc00a15 	stw	ra,40(sp)
 8004514:	ddc00815 	stw	r23,32(sp)
 8004518:	dd400615 	stw	r21,24(sp)
 800451c:	dd000515 	stw	r20,20(sp)
 8004520:	dcc00415 	stw	r19,16(sp)
 8004524:	dc400215 	stw	r17,8(sp)
 8004528:	dc000115 	stw	r16,4(sp)
 800452c:	302d883a 	mov	r22,r6
 8004530:	2039883a 	mov	fp,r4
 8004534:	2825883a 	mov	r18,r5
 8004538:	10001c26 	beq	r2,zero,80045ac <__sfvwrite_r+0xb0>
 800453c:	29c0030b 	ldhu	r7,12(r5)
 8004540:	3880020c 	andi	r2,r7,8
 8004544:	10002726 	beq	r2,zero,80045e4 <__sfvwrite_r+0xe8>
 8004548:	28800417 	ldw	r2,16(r5)
 800454c:	10002526 	beq	r2,zero,80045e4 <__sfvwrite_r+0xe8>
 8004550:	3880008c 	andi	r2,r7,2
 8004554:	b5400017 	ldw	r21,0(r22)
 8004558:	10002826 	beq	r2,zero,80045fc <__sfvwrite_r+0x100>
 800455c:	0021883a 	mov	r16,zero
 8004560:	0023883a 	mov	r17,zero
 8004564:	880d883a 	mov	r6,r17
 8004568:	e009883a 	mov	r4,fp
 800456c:	00810004 	movi	r2,1024
 8004570:	80006e26 	beq	r16,zero,800472c <__sfvwrite_r+0x230>
 8004574:	800f883a 	mov	r7,r16
 8004578:	91400717 	ldw	r5,28(r18)
 800457c:	1400012e 	bgeu	r2,r16,8004584 <__sfvwrite_r+0x88>
 8004580:	100f883a 	mov	r7,r2
 8004584:	90c00917 	ldw	r3,36(r18)
 8004588:	183ee83a 	callr	r3
 800458c:	1007883a 	mov	r3,r2
 8004590:	80a1c83a 	sub	r16,r16,r2
 8004594:	88a3883a 	add	r17,r17,r2
 8004598:	00806d0e 	bge	zero,r2,8004750 <__sfvwrite_r+0x254>
 800459c:	b0800217 	ldw	r2,8(r22)
 80045a0:	10c5c83a 	sub	r2,r2,r3
 80045a4:	b0800215 	stw	r2,8(r22)
 80045a8:	103fee1e 	bne	r2,zero,8004564 <__sfvwrite_r+0x68>
 80045ac:	0009883a 	mov	r4,zero
 80045b0:	2005883a 	mov	r2,r4
 80045b4:	dfc00a17 	ldw	ra,40(sp)
 80045b8:	df000917 	ldw	fp,36(sp)
 80045bc:	ddc00817 	ldw	r23,32(sp)
 80045c0:	dd800717 	ldw	r22,28(sp)
 80045c4:	dd400617 	ldw	r21,24(sp)
 80045c8:	dd000517 	ldw	r20,20(sp)
 80045cc:	dcc00417 	ldw	r19,16(sp)
 80045d0:	dc800317 	ldw	r18,12(sp)
 80045d4:	dc400217 	ldw	r17,8(sp)
 80045d8:	dc000117 	ldw	r16,4(sp)
 80045dc:	dec00b04 	addi	sp,sp,44
 80045e0:	f800283a 	ret
 80045e4:	80022640 	call	8002264 <__swsetup_r>
 80045e8:	1000e41e 	bne	r2,zero,800497c <__sfvwrite_r+0x480>
 80045ec:	91c0030b 	ldhu	r7,12(r18)
 80045f0:	b5400017 	ldw	r21,0(r22)
 80045f4:	3880008c 	andi	r2,r7,2
 80045f8:	103fd81e 	bne	r2,zero,800455c <__sfvwrite_r+0x60>
 80045fc:	3880004c 	andi	r2,r7,1
 8004600:	1005003a 	cmpeq	r2,r2,zero
 8004604:	10005726 	beq	r2,zero,8004764 <__sfvwrite_r+0x268>
 8004608:	0029883a 	mov	r20,zero
 800460c:	002f883a 	mov	r23,zero
 8004610:	a0004226 	beq	r20,zero,800471c <__sfvwrite_r+0x220>
 8004614:	3880800c 	andi	r2,r7,512
 8004618:	94000217 	ldw	r16,8(r18)
 800461c:	10008b26 	beq	r2,zero,800484c <__sfvwrite_r+0x350>
 8004620:	800d883a 	mov	r6,r16
 8004624:	a400a536 	bltu	r20,r16,80048bc <__sfvwrite_r+0x3c0>
 8004628:	3881200c 	andi	r2,r7,1152
 800462c:	10002726 	beq	r2,zero,80046cc <__sfvwrite_r+0x1d0>
 8004630:	90800517 	ldw	r2,20(r18)
 8004634:	92000417 	ldw	r8,16(r18)
 8004638:	91400017 	ldw	r5,0(r18)
 800463c:	1087883a 	add	r3,r2,r2
 8004640:	1887883a 	add	r3,r3,r2
 8004644:	1808d7fa 	srli	r4,r3,31
 8004648:	2a21c83a 	sub	r16,r5,r8
 800464c:	80800044 	addi	r2,r16,1
 8004650:	20c9883a 	add	r4,r4,r3
 8004654:	2027d07a 	srai	r19,r4,1
 8004658:	a085883a 	add	r2,r20,r2
 800465c:	980d883a 	mov	r6,r19
 8004660:	9880022e 	bgeu	r19,r2,800466c <__sfvwrite_r+0x170>
 8004664:	1027883a 	mov	r19,r2
 8004668:	100d883a 	mov	r6,r2
 800466c:	3881000c 	andi	r2,r7,1024
 8004670:	1000b826 	beq	r2,zero,8004954 <__sfvwrite_r+0x458>
 8004674:	300b883a 	mov	r5,r6
 8004678:	e009883a 	mov	r4,fp
 800467c:	8004d700 	call	8004d70 <_malloc_r>
 8004680:	10003126 	beq	r2,zero,8004748 <__sfvwrite_r+0x24c>
 8004684:	91400417 	ldw	r5,16(r18)
 8004688:	1009883a 	mov	r4,r2
 800468c:	800d883a 	mov	r6,r16
 8004690:	1023883a 	mov	r17,r2
 8004694:	80055940 	call	8005594 <memcpy>
 8004698:	90c0030b 	ldhu	r3,12(r18)
 800469c:	00beffc4 	movi	r2,-1025
 80046a0:	1886703a 	and	r3,r3,r2
 80046a4:	18c02014 	ori	r3,r3,128
 80046a8:	90c0030d 	sth	r3,12(r18)
 80046ac:	9c07c83a 	sub	r3,r19,r16
 80046b0:	8c05883a 	add	r2,r17,r16
 80046b4:	a00d883a 	mov	r6,r20
 80046b8:	a021883a 	mov	r16,r20
 80046bc:	90800015 	stw	r2,0(r18)
 80046c0:	90c00215 	stw	r3,8(r18)
 80046c4:	94400415 	stw	r17,16(r18)
 80046c8:	94c00515 	stw	r19,20(r18)
 80046cc:	91000017 	ldw	r4,0(r18)
 80046d0:	b80b883a 	mov	r5,r23
 80046d4:	a023883a 	mov	r17,r20
 80046d8:	80056340 	call	8005634 <memmove>
 80046dc:	90c00217 	ldw	r3,8(r18)
 80046e0:	90800017 	ldw	r2,0(r18)
 80046e4:	a027883a 	mov	r19,r20
 80046e8:	1c07c83a 	sub	r3,r3,r16
 80046ec:	1405883a 	add	r2,r2,r16
 80046f0:	90c00215 	stw	r3,8(r18)
 80046f4:	a021883a 	mov	r16,r20
 80046f8:	90800015 	stw	r2,0(r18)
 80046fc:	b0800217 	ldw	r2,8(r22)
 8004700:	1405c83a 	sub	r2,r2,r16
 8004704:	b0800215 	stw	r2,8(r22)
 8004708:	103fa826 	beq	r2,zero,80045ac <__sfvwrite_r+0xb0>
 800470c:	a469c83a 	sub	r20,r20,r17
 8004710:	91c0030b 	ldhu	r7,12(r18)
 8004714:	bcef883a 	add	r23,r23,r19
 8004718:	a03fbe1e 	bne	r20,zero,8004614 <__sfvwrite_r+0x118>
 800471c:	adc00017 	ldw	r23,0(r21)
 8004720:	ad000117 	ldw	r20,4(r21)
 8004724:	ad400204 	addi	r21,r21,8
 8004728:	003fb906 	br	8004610 <__sfvwrite_r+0x114>
 800472c:	ac400017 	ldw	r17,0(r21)
 8004730:	ac000117 	ldw	r16,4(r21)
 8004734:	ad400204 	addi	r21,r21,8
 8004738:	003f8a06 	br	8004564 <__sfvwrite_r+0x68>
 800473c:	91400417 	ldw	r5,16(r18)
 8004740:	e009883a 	mov	r4,fp
 8004744:	80041e80 	call	80041e8 <_free_r>
 8004748:	00800304 	movi	r2,12
 800474c:	e0800015 	stw	r2,0(fp)
 8004750:	9080030b 	ldhu	r2,12(r18)
 8004754:	013fffc4 	movi	r4,-1
 8004758:	10801014 	ori	r2,r2,64
 800475c:	9080030d 	sth	r2,12(r18)
 8004760:	003f9306 	br	80045b0 <__sfvwrite_r+0xb4>
 8004764:	0027883a 	mov	r19,zero
 8004768:	002f883a 	mov	r23,zero
 800476c:	d8000015 	stw	zero,0(sp)
 8004770:	0029883a 	mov	r20,zero
 8004774:	98001e26 	beq	r19,zero,80047f0 <__sfvwrite_r+0x2f4>
 8004778:	d8c00017 	ldw	r3,0(sp)
 800477c:	1804c03a 	cmpne	r2,r3,zero
 8004780:	10005e26 	beq	r2,zero,80048fc <__sfvwrite_r+0x400>
 8004784:	9821883a 	mov	r16,r19
 8004788:	a4c0012e 	bgeu	r20,r19,8004790 <__sfvwrite_r+0x294>
 800478c:	a021883a 	mov	r16,r20
 8004790:	91000017 	ldw	r4,0(r18)
 8004794:	90800417 	ldw	r2,16(r18)
 8004798:	91800217 	ldw	r6,8(r18)
 800479c:	91c00517 	ldw	r7,20(r18)
 80047a0:	1100022e 	bgeu	r2,r4,80047ac <__sfvwrite_r+0x2b0>
 80047a4:	31e3883a 	add	r17,r6,r7
 80047a8:	8c001616 	blt	r17,r16,8004804 <__sfvwrite_r+0x308>
 80047ac:	81c03816 	blt	r16,r7,8004890 <__sfvwrite_r+0x394>
 80047b0:	90c00917 	ldw	r3,36(r18)
 80047b4:	91400717 	ldw	r5,28(r18)
 80047b8:	e009883a 	mov	r4,fp
 80047bc:	b80d883a 	mov	r6,r23
 80047c0:	183ee83a 	callr	r3
 80047c4:	1023883a 	mov	r17,r2
 80047c8:	00bfe10e 	bge	zero,r2,8004750 <__sfvwrite_r+0x254>
 80047cc:	a469c83a 	sub	r20,r20,r17
 80047d0:	a0001826 	beq	r20,zero,8004834 <__sfvwrite_r+0x338>
 80047d4:	b0800217 	ldw	r2,8(r22)
 80047d8:	1445c83a 	sub	r2,r2,r17
 80047dc:	b0800215 	stw	r2,8(r22)
 80047e0:	103f7226 	beq	r2,zero,80045ac <__sfvwrite_r+0xb0>
 80047e4:	9c67c83a 	sub	r19,r19,r17
 80047e8:	bc6f883a 	add	r23,r23,r17
 80047ec:	983fe21e 	bne	r19,zero,8004778 <__sfvwrite_r+0x27c>
 80047f0:	adc00017 	ldw	r23,0(r21)
 80047f4:	acc00117 	ldw	r19,4(r21)
 80047f8:	ad400204 	addi	r21,r21,8
 80047fc:	d8000015 	stw	zero,0(sp)
 8004800:	003fdc06 	br	8004774 <__sfvwrite_r+0x278>
 8004804:	b80b883a 	mov	r5,r23
 8004808:	880d883a 	mov	r6,r17
 800480c:	80056340 	call	8005634 <memmove>
 8004810:	90c00017 	ldw	r3,0(r18)
 8004814:	e009883a 	mov	r4,fp
 8004818:	900b883a 	mov	r5,r18
 800481c:	1c47883a 	add	r3,r3,r17
 8004820:	90c00015 	stw	r3,0(r18)
 8004824:	8003b980 	call	8003b98 <_fflush_r>
 8004828:	103fc91e 	bne	r2,zero,8004750 <__sfvwrite_r+0x254>
 800482c:	a469c83a 	sub	r20,r20,r17
 8004830:	a03fe81e 	bne	r20,zero,80047d4 <__sfvwrite_r+0x2d8>
 8004834:	e009883a 	mov	r4,fp
 8004838:	900b883a 	mov	r5,r18
 800483c:	8003b980 	call	8003b98 <_fflush_r>
 8004840:	103fc31e 	bne	r2,zero,8004750 <__sfvwrite_r+0x254>
 8004844:	d8000015 	stw	zero,0(sp)
 8004848:	003fe206 	br	80047d4 <__sfvwrite_r+0x2d8>
 800484c:	91000017 	ldw	r4,0(r18)
 8004850:	90800417 	ldw	r2,16(r18)
 8004854:	1100022e 	bgeu	r2,r4,8004860 <__sfvwrite_r+0x364>
 8004858:	8023883a 	mov	r17,r16
 800485c:	85003136 	bltu	r16,r20,8004924 <__sfvwrite_r+0x428>
 8004860:	91c00517 	ldw	r7,20(r18)
 8004864:	a1c01836 	bltu	r20,r7,80048c8 <__sfvwrite_r+0x3cc>
 8004868:	90c00917 	ldw	r3,36(r18)
 800486c:	91400717 	ldw	r5,28(r18)
 8004870:	e009883a 	mov	r4,fp
 8004874:	b80d883a 	mov	r6,r23
 8004878:	183ee83a 	callr	r3
 800487c:	1021883a 	mov	r16,r2
 8004880:	00bfb30e 	bge	zero,r2,8004750 <__sfvwrite_r+0x254>
 8004884:	1023883a 	mov	r17,r2
 8004888:	1027883a 	mov	r19,r2
 800488c:	003f9b06 	br	80046fc <__sfvwrite_r+0x200>
 8004890:	b80b883a 	mov	r5,r23
 8004894:	800d883a 	mov	r6,r16
 8004898:	80056340 	call	8005634 <memmove>
 800489c:	90c00217 	ldw	r3,8(r18)
 80048a0:	90800017 	ldw	r2,0(r18)
 80048a4:	8023883a 	mov	r17,r16
 80048a8:	1c07c83a 	sub	r3,r3,r16
 80048ac:	1405883a 	add	r2,r2,r16
 80048b0:	90c00215 	stw	r3,8(r18)
 80048b4:	90800015 	stw	r2,0(r18)
 80048b8:	003fc406 	br	80047cc <__sfvwrite_r+0x2d0>
 80048bc:	a00d883a 	mov	r6,r20
 80048c0:	a021883a 	mov	r16,r20
 80048c4:	003f8106 	br	80046cc <__sfvwrite_r+0x1d0>
 80048c8:	b80b883a 	mov	r5,r23
 80048cc:	a00d883a 	mov	r6,r20
 80048d0:	80056340 	call	8005634 <memmove>
 80048d4:	90c00217 	ldw	r3,8(r18)
 80048d8:	90800017 	ldw	r2,0(r18)
 80048dc:	a021883a 	mov	r16,r20
 80048e0:	1d07c83a 	sub	r3,r3,r20
 80048e4:	1505883a 	add	r2,r2,r20
 80048e8:	a023883a 	mov	r17,r20
 80048ec:	a027883a 	mov	r19,r20
 80048f0:	90c00215 	stw	r3,8(r18)
 80048f4:	90800015 	stw	r2,0(r18)
 80048f8:	003f8006 	br	80046fc <__sfvwrite_r+0x200>
 80048fc:	b809883a 	mov	r4,r23
 8004900:	01400284 	movi	r5,10
 8004904:	980d883a 	mov	r6,r19
 8004908:	80054b00 	call	80054b0 <memchr>
 800490c:	10001726 	beq	r2,zero,800496c <__sfvwrite_r+0x470>
 8004910:	15c5c83a 	sub	r2,r2,r23
 8004914:	15000044 	addi	r20,r2,1
 8004918:	00800044 	movi	r2,1
 800491c:	d8800015 	stw	r2,0(sp)
 8004920:	003f9806 	br	8004784 <__sfvwrite_r+0x288>
 8004924:	b80b883a 	mov	r5,r23
 8004928:	800d883a 	mov	r6,r16
 800492c:	80056340 	call	8005634 <memmove>
 8004930:	90c00017 	ldw	r3,0(r18)
 8004934:	e009883a 	mov	r4,fp
 8004938:	900b883a 	mov	r5,r18
 800493c:	1c07883a 	add	r3,r3,r16
 8004940:	90c00015 	stw	r3,0(r18)
 8004944:	8027883a 	mov	r19,r16
 8004948:	8003b980 	call	8003b98 <_fflush_r>
 800494c:	103f6b26 	beq	r2,zero,80046fc <__sfvwrite_r+0x200>
 8004950:	003f7f06 	br	8004750 <__sfvwrite_r+0x254>
 8004954:	400b883a 	mov	r5,r8
 8004958:	e009883a 	mov	r4,fp
 800495c:	80068380 	call	8006838 <_realloc_r>
 8004960:	103f7626 	beq	r2,zero,800473c <__sfvwrite_r+0x240>
 8004964:	1023883a 	mov	r17,r2
 8004968:	003f5006 	br	80046ac <__sfvwrite_r+0x1b0>
 800496c:	00c00044 	movi	r3,1
 8004970:	9d000044 	addi	r20,r19,1
 8004974:	d8c00015 	stw	r3,0(sp)
 8004978:	003f8206 	br	8004784 <__sfvwrite_r+0x288>
 800497c:	9080030b 	ldhu	r2,12(r18)
 8004980:	00c00244 	movi	r3,9
 8004984:	013fffc4 	movi	r4,-1
 8004988:	10801014 	ori	r2,r2,64
 800498c:	9080030d 	sth	r2,12(r18)
 8004990:	e0c00015 	stw	r3,0(fp)
 8004994:	003f0606 	br	80045b0 <__sfvwrite_r+0xb4>

08004998 <_fwalk_reent>:
 8004998:	defff704 	addi	sp,sp,-36
 800499c:	dcc00315 	stw	r19,12(sp)
 80049a0:	24c0b804 	addi	r19,r4,736
 80049a4:	dd800615 	stw	r22,24(sp)
 80049a8:	dd400515 	stw	r21,20(sp)
 80049ac:	dfc00815 	stw	ra,32(sp)
 80049b0:	ddc00715 	stw	r23,28(sp)
 80049b4:	dd000415 	stw	r20,16(sp)
 80049b8:	dc800215 	stw	r18,8(sp)
 80049bc:	dc400115 	stw	r17,4(sp)
 80049c0:	dc000015 	stw	r16,0(sp)
 80049c4:	202b883a 	mov	r21,r4
 80049c8:	282d883a 	mov	r22,r5
 80049cc:	8003e200 	call	8003e20 <__sfp_lock_acquire>
 80049d0:	98002126 	beq	r19,zero,8004a58 <_fwalk_reent+0xc0>
 80049d4:	002f883a 	mov	r23,zero
 80049d8:	9c800117 	ldw	r18,4(r19)
 80049dc:	9c000217 	ldw	r16,8(r19)
 80049e0:	90bfffc4 	addi	r2,r18,-1
 80049e4:	10000d16 	blt	r2,zero,8004a1c <_fwalk_reent+0x84>
 80049e8:	0023883a 	mov	r17,zero
 80049ec:	053fffc4 	movi	r20,-1
 80049f0:	8080030f 	ldh	r2,12(r16)
 80049f4:	8c400044 	addi	r17,r17,1
 80049f8:	10000626 	beq	r2,zero,8004a14 <_fwalk_reent+0x7c>
 80049fc:	8080038f 	ldh	r2,14(r16)
 8004a00:	800b883a 	mov	r5,r16
 8004a04:	a809883a 	mov	r4,r21
 8004a08:	15000226 	beq	r2,r20,8004a14 <_fwalk_reent+0x7c>
 8004a0c:	b03ee83a 	callr	r22
 8004a10:	b8aeb03a 	or	r23,r23,r2
 8004a14:	84001704 	addi	r16,r16,92
 8004a18:	947ff51e 	bne	r18,r17,80049f0 <_fwalk_reent+0x58>
 8004a1c:	9cc00017 	ldw	r19,0(r19)
 8004a20:	983fed1e 	bne	r19,zero,80049d8 <_fwalk_reent+0x40>
 8004a24:	8003e240 	call	8003e24 <__sfp_lock_release>
 8004a28:	b805883a 	mov	r2,r23
 8004a2c:	dfc00817 	ldw	ra,32(sp)
 8004a30:	ddc00717 	ldw	r23,28(sp)
 8004a34:	dd800617 	ldw	r22,24(sp)
 8004a38:	dd400517 	ldw	r21,20(sp)
 8004a3c:	dd000417 	ldw	r20,16(sp)
 8004a40:	dcc00317 	ldw	r19,12(sp)
 8004a44:	dc800217 	ldw	r18,8(sp)
 8004a48:	dc400117 	ldw	r17,4(sp)
 8004a4c:	dc000017 	ldw	r16,0(sp)
 8004a50:	dec00904 	addi	sp,sp,36
 8004a54:	f800283a 	ret
 8004a58:	002f883a 	mov	r23,zero
 8004a5c:	003ff106 	br	8004a24 <_fwalk_reent+0x8c>

08004a60 <_fwalk>:
 8004a60:	defff804 	addi	sp,sp,-32
 8004a64:	dcc00315 	stw	r19,12(sp)
 8004a68:	24c0b804 	addi	r19,r4,736
 8004a6c:	dd400515 	stw	r21,20(sp)
 8004a70:	dfc00715 	stw	ra,28(sp)
 8004a74:	dd800615 	stw	r22,24(sp)
 8004a78:	dd000415 	stw	r20,16(sp)
 8004a7c:	dc800215 	stw	r18,8(sp)
 8004a80:	dc400115 	stw	r17,4(sp)
 8004a84:	dc000015 	stw	r16,0(sp)
 8004a88:	282b883a 	mov	r21,r5
 8004a8c:	8003e200 	call	8003e20 <__sfp_lock_acquire>
 8004a90:	98001f26 	beq	r19,zero,8004b10 <_fwalk+0xb0>
 8004a94:	002d883a 	mov	r22,zero
 8004a98:	9c800117 	ldw	r18,4(r19)
 8004a9c:	9c000217 	ldw	r16,8(r19)
 8004aa0:	90bfffc4 	addi	r2,r18,-1
 8004aa4:	10000c16 	blt	r2,zero,8004ad8 <_fwalk+0x78>
 8004aa8:	0023883a 	mov	r17,zero
 8004aac:	053fffc4 	movi	r20,-1
 8004ab0:	8080030f 	ldh	r2,12(r16)
 8004ab4:	8c400044 	addi	r17,r17,1
 8004ab8:	10000526 	beq	r2,zero,8004ad0 <_fwalk+0x70>
 8004abc:	8080038f 	ldh	r2,14(r16)
 8004ac0:	8009883a 	mov	r4,r16
 8004ac4:	15000226 	beq	r2,r20,8004ad0 <_fwalk+0x70>
 8004ac8:	a83ee83a 	callr	r21
 8004acc:	b0acb03a 	or	r22,r22,r2
 8004ad0:	84001704 	addi	r16,r16,92
 8004ad4:	947ff61e 	bne	r18,r17,8004ab0 <_fwalk+0x50>
 8004ad8:	9cc00017 	ldw	r19,0(r19)
 8004adc:	983fee1e 	bne	r19,zero,8004a98 <_fwalk+0x38>
 8004ae0:	8003e240 	call	8003e24 <__sfp_lock_release>
 8004ae4:	b005883a 	mov	r2,r22
 8004ae8:	dfc00717 	ldw	ra,28(sp)
 8004aec:	dd800617 	ldw	r22,24(sp)
 8004af0:	dd400517 	ldw	r21,20(sp)
 8004af4:	dd000417 	ldw	r20,16(sp)
 8004af8:	dcc00317 	ldw	r19,12(sp)
 8004afc:	dc800217 	ldw	r18,8(sp)
 8004b00:	dc400117 	ldw	r17,4(sp)
 8004b04:	dc000017 	ldw	r16,0(sp)
 8004b08:	dec00804 	addi	sp,sp,32
 8004b0c:	f800283a 	ret
 8004b10:	002d883a 	mov	r22,zero
 8004b14:	003ff206 	br	8004ae0 <_fwalk+0x80>

08004b18 <__locale_charset>:
 8004b18:	d0a00317 	ldw	r2,-32756(gp)
 8004b1c:	f800283a 	ret

08004b20 <_localeconv_r>:
 8004b20:	00820074 	movhi	r2,2049
 8004b24:	10b2a704 	addi	r2,r2,-13668
 8004b28:	f800283a 	ret

08004b2c <localeconv>:
 8004b2c:	00820074 	movhi	r2,2049
 8004b30:	10ba1404 	addi	r2,r2,-6064
 8004b34:	11000017 	ldw	r4,0(r2)
 8004b38:	8004b201 	jmpi	8004b20 <_localeconv_r>

08004b3c <_setlocale_r>:
 8004b3c:	defffc04 	addi	sp,sp,-16
 8004b40:	00c20074 	movhi	r3,2049
 8004b44:	18f2a204 	addi	r3,r3,-13688
 8004b48:	dc800215 	stw	r18,8(sp)
 8004b4c:	dc400115 	stw	r17,4(sp)
 8004b50:	dc000015 	stw	r16,0(sp)
 8004b54:	2023883a 	mov	r17,r4
 8004b58:	2825883a 	mov	r18,r5
 8004b5c:	dfc00315 	stw	ra,12(sp)
 8004b60:	3021883a 	mov	r16,r6
 8004b64:	3009883a 	mov	r4,r6
 8004b68:	180b883a 	mov	r5,r3
 8004b6c:	30000926 	beq	r6,zero,8004b94 <_setlocale_r+0x58>
 8004b70:	80070580 	call	8007058 <strcmp>
 8004b74:	8009883a 	mov	r4,r16
 8004b78:	01420074 	movhi	r5,2049
 8004b7c:	29728d04 	addi	r5,r5,-13772
 8004b80:	10000b1e 	bne	r2,zero,8004bb0 <_setlocale_r+0x74>
 8004b84:	8c000d15 	stw	r16,52(r17)
 8004b88:	8c800c15 	stw	r18,48(r17)
 8004b8c:	00c20074 	movhi	r3,2049
 8004b90:	18f2a204 	addi	r3,r3,-13688
 8004b94:	1805883a 	mov	r2,r3
 8004b98:	dfc00317 	ldw	ra,12(sp)
 8004b9c:	dc800217 	ldw	r18,8(sp)
 8004ba0:	dc400117 	ldw	r17,4(sp)
 8004ba4:	dc000017 	ldw	r16,0(sp)
 8004ba8:	dec00404 	addi	sp,sp,16
 8004bac:	f800283a 	ret
 8004bb0:	80070580 	call	8007058 <strcmp>
 8004bb4:	0007883a 	mov	r3,zero
 8004bb8:	103ff226 	beq	r2,zero,8004b84 <_setlocale_r+0x48>
 8004bbc:	003ff506 	br	8004b94 <_setlocale_r+0x58>

08004bc0 <setlocale>:
 8004bc0:	01820074 	movhi	r6,2049
 8004bc4:	31ba1404 	addi	r6,r6,-6064
 8004bc8:	2007883a 	mov	r3,r4
 8004bcc:	31000017 	ldw	r4,0(r6)
 8004bd0:	280d883a 	mov	r6,r5
 8004bd4:	180b883a 	mov	r5,r3
 8004bd8:	8004b3c1 	jmpi	8004b3c <_setlocale_r>

08004bdc <__smakebuf_r>:
 8004bdc:	2880030b 	ldhu	r2,12(r5)
 8004be0:	deffed04 	addi	sp,sp,-76
 8004be4:	dc401015 	stw	r17,64(sp)
 8004be8:	1080008c 	andi	r2,r2,2
 8004bec:	dc000f15 	stw	r16,60(sp)
 8004bf0:	dfc01215 	stw	ra,72(sp)
 8004bf4:	dc801115 	stw	r18,68(sp)
 8004bf8:	2821883a 	mov	r16,r5
 8004bfc:	2023883a 	mov	r17,r4
 8004c00:	10000b26 	beq	r2,zero,8004c30 <__smakebuf_r+0x54>
 8004c04:	28c010c4 	addi	r3,r5,67
 8004c08:	00800044 	movi	r2,1
 8004c0c:	28800515 	stw	r2,20(r5)
 8004c10:	28c00415 	stw	r3,16(r5)
 8004c14:	28c00015 	stw	r3,0(r5)
 8004c18:	dfc01217 	ldw	ra,72(sp)
 8004c1c:	dc801117 	ldw	r18,68(sp)
 8004c20:	dc401017 	ldw	r17,64(sp)
 8004c24:	dc000f17 	ldw	r16,60(sp)
 8004c28:	dec01304 	addi	sp,sp,76
 8004c2c:	f800283a 	ret
 8004c30:	2940038f 	ldh	r5,14(r5)
 8004c34:	28002116 	blt	r5,zero,8004cbc <__smakebuf_r+0xe0>
 8004c38:	d80d883a 	mov	r6,sp
 8004c3c:	800745c0 	call	800745c <_fstat_r>
 8004c40:	10001e16 	blt	r2,zero,8004cbc <__smakebuf_r+0xe0>
 8004c44:	d8800117 	ldw	r2,4(sp)
 8004c48:	00e00014 	movui	r3,32768
 8004c4c:	113c000c 	andi	r4,r2,61440
 8004c50:	20c03126 	beq	r4,r3,8004d18 <__smakebuf_r+0x13c>
 8004c54:	8080030b 	ldhu	r2,12(r16)
 8004c58:	00c80004 	movi	r3,8192
 8004c5c:	10820014 	ori	r2,r2,2048
 8004c60:	8080030d 	sth	r2,12(r16)
 8004c64:	20c01e26 	beq	r4,r3,8004ce0 <__smakebuf_r+0x104>
 8004c68:	04810004 	movi	r18,1024
 8004c6c:	8809883a 	mov	r4,r17
 8004c70:	900b883a 	mov	r5,r18
 8004c74:	8004d700 	call	8004d70 <_malloc_r>
 8004c78:	1009883a 	mov	r4,r2
 8004c7c:	10003126 	beq	r2,zero,8004d44 <__smakebuf_r+0x168>
 8004c80:	80c0030b 	ldhu	r3,12(r16)
 8004c84:	00820034 	movhi	r2,2048
 8004c88:	108fc504 	addi	r2,r2,16148
 8004c8c:	88800f15 	stw	r2,60(r17)
 8004c90:	18c02014 	ori	r3,r3,128
 8004c94:	84800515 	stw	r18,20(r16)
 8004c98:	80c0030d 	sth	r3,12(r16)
 8004c9c:	81000415 	stw	r4,16(r16)
 8004ca0:	81000015 	stw	r4,0(r16)
 8004ca4:	dfc01217 	ldw	ra,72(sp)
 8004ca8:	dc801117 	ldw	r18,68(sp)
 8004cac:	dc401017 	ldw	r17,64(sp)
 8004cb0:	dc000f17 	ldw	r16,60(sp)
 8004cb4:	dec01304 	addi	sp,sp,76
 8004cb8:	f800283a 	ret
 8004cbc:	80c0030b 	ldhu	r3,12(r16)
 8004cc0:	1880200c 	andi	r2,r3,128
 8004cc4:	10000426 	beq	r2,zero,8004cd8 <__smakebuf_r+0xfc>
 8004cc8:	04801004 	movi	r18,64
 8004ccc:	18820014 	ori	r2,r3,2048
 8004cd0:	8080030d 	sth	r2,12(r16)
 8004cd4:	003fe506 	br	8004c6c <__smakebuf_r+0x90>
 8004cd8:	04810004 	movi	r18,1024
 8004cdc:	003ffb06 	br	8004ccc <__smakebuf_r+0xf0>
 8004ce0:	8140038f 	ldh	r5,14(r16)
 8004ce4:	8809883a 	mov	r4,r17
 8004ce8:	80074d00 	call	80074d0 <_isatty_r>
 8004cec:	103fde26 	beq	r2,zero,8004c68 <__smakebuf_r+0x8c>
 8004cf0:	8080030b 	ldhu	r2,12(r16)
 8004cf4:	80c010c4 	addi	r3,r16,67
 8004cf8:	04810004 	movi	r18,1024
 8004cfc:	10800054 	ori	r2,r2,1
 8004d00:	8080030d 	sth	r2,12(r16)
 8004d04:	00800044 	movi	r2,1
 8004d08:	80c00415 	stw	r3,16(r16)
 8004d0c:	80800515 	stw	r2,20(r16)
 8004d10:	80c00015 	stw	r3,0(r16)
 8004d14:	003fd506 	br	8004c6c <__smakebuf_r+0x90>
 8004d18:	80c00a17 	ldw	r3,40(r16)
 8004d1c:	00820034 	movhi	r2,2048
 8004d20:	109bc504 	addi	r2,r2,28436
 8004d24:	18bfcb1e 	bne	r3,r2,8004c54 <__smakebuf_r+0x78>
 8004d28:	8080030b 	ldhu	r2,12(r16)
 8004d2c:	00c10004 	movi	r3,1024
 8004d30:	1825883a 	mov	r18,r3
 8004d34:	10c4b03a 	or	r2,r2,r3
 8004d38:	8080030d 	sth	r2,12(r16)
 8004d3c:	80c01315 	stw	r3,76(r16)
 8004d40:	003fca06 	br	8004c6c <__smakebuf_r+0x90>
 8004d44:	8100030b 	ldhu	r4,12(r16)
 8004d48:	2080800c 	andi	r2,r4,512
 8004d4c:	103fb21e 	bne	r2,zero,8004c18 <__smakebuf_r+0x3c>
 8004d50:	80c010c4 	addi	r3,r16,67
 8004d54:	21000094 	ori	r4,r4,2
 8004d58:	00800044 	movi	r2,1
 8004d5c:	80800515 	stw	r2,20(r16)
 8004d60:	8100030d 	sth	r4,12(r16)
 8004d64:	80c00415 	stw	r3,16(r16)
 8004d68:	80c00015 	stw	r3,0(r16)
 8004d6c:	003faa06 	br	8004c18 <__smakebuf_r+0x3c>

08004d70 <_malloc_r>:
 8004d70:	defff604 	addi	sp,sp,-40
 8004d74:	28c002c4 	addi	r3,r5,11
 8004d78:	00800584 	movi	r2,22
 8004d7c:	dc800215 	stw	r18,8(sp)
 8004d80:	dfc00915 	stw	ra,36(sp)
 8004d84:	df000815 	stw	fp,32(sp)
 8004d88:	ddc00715 	stw	r23,28(sp)
 8004d8c:	dd800615 	stw	r22,24(sp)
 8004d90:	dd400515 	stw	r21,20(sp)
 8004d94:	dd000415 	stw	r20,16(sp)
 8004d98:	dcc00315 	stw	r19,12(sp)
 8004d9c:	dc400115 	stw	r17,4(sp)
 8004da0:	dc000015 	stw	r16,0(sp)
 8004da4:	2025883a 	mov	r18,r4
 8004da8:	10c01236 	bltu	r2,r3,8004df4 <_malloc_r+0x84>
 8004dac:	04400404 	movi	r17,16
 8004db0:	8940142e 	bgeu	r17,r5,8004e04 <_malloc_r+0x94>
 8004db4:	00800304 	movi	r2,12
 8004db8:	0007883a 	mov	r3,zero
 8004dbc:	90800015 	stw	r2,0(r18)
 8004dc0:	1805883a 	mov	r2,r3
 8004dc4:	dfc00917 	ldw	ra,36(sp)
 8004dc8:	df000817 	ldw	fp,32(sp)
 8004dcc:	ddc00717 	ldw	r23,28(sp)
 8004dd0:	dd800617 	ldw	r22,24(sp)
 8004dd4:	dd400517 	ldw	r21,20(sp)
 8004dd8:	dd000417 	ldw	r20,16(sp)
 8004ddc:	dcc00317 	ldw	r19,12(sp)
 8004de0:	dc800217 	ldw	r18,8(sp)
 8004de4:	dc400117 	ldw	r17,4(sp)
 8004de8:	dc000017 	ldw	r16,0(sp)
 8004dec:	dec00a04 	addi	sp,sp,40
 8004df0:	f800283a 	ret
 8004df4:	00bffe04 	movi	r2,-8
 8004df8:	18a2703a 	and	r17,r3,r2
 8004dfc:	883fed16 	blt	r17,zero,8004db4 <_malloc_r+0x44>
 8004e00:	897fec36 	bltu	r17,r5,8004db4 <_malloc_r+0x44>
 8004e04:	9009883a 	mov	r4,r18
 8004e08:	800a2f80 	call	800a2f8 <__malloc_lock>
 8004e0c:	00807dc4 	movi	r2,503
 8004e10:	14402b2e 	bgeu	r2,r17,8004ec0 <_malloc_r+0x150>
 8004e14:	8806d27a 	srli	r3,r17,9
 8004e18:	18003f1e 	bne	r3,zero,8004f18 <_malloc_r+0x1a8>
 8004e1c:	880cd0fa 	srli	r6,r17,3
 8004e20:	300490fa 	slli	r2,r6,3
 8004e24:	02c20074 	movhi	r11,2049
 8004e28:	5af47304 	addi	r11,r11,-11828
 8004e2c:	12cb883a 	add	r5,r2,r11
 8004e30:	2c000317 	ldw	r16,12(r5)
 8004e34:	580f883a 	mov	r7,r11
 8004e38:	2c00041e 	bne	r5,r16,8004e4c <_malloc_r+0xdc>
 8004e3c:	00000a06 	br	8004e68 <_malloc_r+0xf8>
 8004e40:	1800860e 	bge	r3,zero,800505c <_malloc_r+0x2ec>
 8004e44:	84000317 	ldw	r16,12(r16)
 8004e48:	2c000726 	beq	r5,r16,8004e68 <_malloc_r+0xf8>
 8004e4c:	80800117 	ldw	r2,4(r16)
 8004e50:	00ffff04 	movi	r3,-4
 8004e54:	10c8703a 	and	r4,r2,r3
 8004e58:	2447c83a 	sub	r3,r4,r17
 8004e5c:	008003c4 	movi	r2,15
 8004e60:	10fff70e 	bge	r2,r3,8004e40 <_malloc_r+0xd0>
 8004e64:	31bfffc4 	addi	r6,r6,-1
 8004e68:	32400044 	addi	r9,r6,1
 8004e6c:	02820074 	movhi	r10,2049
 8004e70:	52b47504 	addi	r10,r10,-11820
 8004e74:	54000217 	ldw	r16,8(r10)
 8004e78:	8280a026 	beq	r16,r10,80050fc <_malloc_r+0x38c>
 8004e7c:	80800117 	ldw	r2,4(r16)
 8004e80:	00ffff04 	movi	r3,-4
 8004e84:	10ca703a 	and	r5,r2,r3
 8004e88:	2c4dc83a 	sub	r6,r5,r17
 8004e8c:	008003c4 	movi	r2,15
 8004e90:	11808316 	blt	r2,r6,80050a0 <_malloc_r+0x330>
 8004e94:	52800315 	stw	r10,12(r10)
 8004e98:	52800215 	stw	r10,8(r10)
 8004e9c:	30002916 	blt	r6,zero,8004f44 <_malloc_r+0x1d4>
 8004ea0:	8147883a 	add	r3,r16,r5
 8004ea4:	18800117 	ldw	r2,4(r3)
 8004ea8:	9009883a 	mov	r4,r18
 8004eac:	10800054 	ori	r2,r2,1
 8004eb0:	18800115 	stw	r2,4(r3)
 8004eb4:	800a3180 	call	800a318 <__malloc_unlock>
 8004eb8:	80c00204 	addi	r3,r16,8
 8004ebc:	003fc006 	br	8004dc0 <_malloc_r+0x50>
 8004ec0:	02c20074 	movhi	r11,2049
 8004ec4:	5af47304 	addi	r11,r11,-11828
 8004ec8:	8ac5883a 	add	r2,r17,r11
 8004ecc:	14000317 	ldw	r16,12(r2)
 8004ed0:	580f883a 	mov	r7,r11
 8004ed4:	8806d0fa 	srli	r3,r17,3
 8004ed8:	14006c26 	beq	r2,r16,800508c <_malloc_r+0x31c>
 8004edc:	80c00117 	ldw	r3,4(r16)
 8004ee0:	00bfff04 	movi	r2,-4
 8004ee4:	81800317 	ldw	r6,12(r16)
 8004ee8:	1886703a 	and	r3,r3,r2
 8004eec:	80c7883a 	add	r3,r16,r3
 8004ef0:	18800117 	ldw	r2,4(r3)
 8004ef4:	81400217 	ldw	r5,8(r16)
 8004ef8:	9009883a 	mov	r4,r18
 8004efc:	10800054 	ori	r2,r2,1
 8004f00:	18800115 	stw	r2,4(r3)
 8004f04:	31400215 	stw	r5,8(r6)
 8004f08:	29800315 	stw	r6,12(r5)
 8004f0c:	800a3180 	call	800a318 <__malloc_unlock>
 8004f10:	80c00204 	addi	r3,r16,8
 8004f14:	003faa06 	br	8004dc0 <_malloc_r+0x50>
 8004f18:	00800104 	movi	r2,4
 8004f1c:	10c0052e 	bgeu	r2,r3,8004f34 <_malloc_r+0x1c4>
 8004f20:	00800504 	movi	r2,20
 8004f24:	10c07836 	bltu	r2,r3,8005108 <_malloc_r+0x398>
 8004f28:	198016c4 	addi	r6,r3,91
 8004f2c:	300490fa 	slli	r2,r6,3
 8004f30:	003fbc06 	br	8004e24 <_malloc_r+0xb4>
 8004f34:	8804d1ba 	srli	r2,r17,6
 8004f38:	11800e04 	addi	r6,r2,56
 8004f3c:	300490fa 	slli	r2,r6,3
 8004f40:	003fb806 	br	8004e24 <_malloc_r+0xb4>
 8004f44:	00807fc4 	movi	r2,511
 8004f48:	1140bb36 	bltu	r2,r5,8005238 <_malloc_r+0x4c8>
 8004f4c:	2806d0fa 	srli	r3,r5,3
 8004f50:	573ffe04 	addi	fp,r10,-8
 8004f54:	00800044 	movi	r2,1
 8004f58:	180890fa 	slli	r4,r3,3
 8004f5c:	1807d0ba 	srai	r3,r3,2
 8004f60:	e1c00117 	ldw	r7,4(fp)
 8004f64:	5909883a 	add	r4,r11,r4
 8004f68:	21400217 	ldw	r5,8(r4)
 8004f6c:	10c4983a 	sll	r2,r2,r3
 8004f70:	81000315 	stw	r4,12(r16)
 8004f74:	81400215 	stw	r5,8(r16)
 8004f78:	388eb03a 	or	r7,r7,r2
 8004f7c:	2c000315 	stw	r16,12(r5)
 8004f80:	24000215 	stw	r16,8(r4)
 8004f84:	e1c00115 	stw	r7,4(fp)
 8004f88:	4807883a 	mov	r3,r9
 8004f8c:	4800cd16 	blt	r9,zero,80052c4 <_malloc_r+0x554>
 8004f90:	1807d0ba 	srai	r3,r3,2
 8004f94:	00800044 	movi	r2,1
 8004f98:	10c8983a 	sll	r4,r2,r3
 8004f9c:	39004436 	bltu	r7,r4,80050b0 <_malloc_r+0x340>
 8004fa0:	21c4703a 	and	r2,r4,r7
 8004fa4:	10000a1e 	bne	r2,zero,8004fd0 <_malloc_r+0x260>
 8004fa8:	2109883a 	add	r4,r4,r4
 8004fac:	00bfff04 	movi	r2,-4
 8004fb0:	4884703a 	and	r2,r9,r2
 8004fb4:	3906703a 	and	r3,r7,r4
 8004fb8:	12400104 	addi	r9,r2,4
 8004fbc:	1800041e 	bne	r3,zero,8004fd0 <_malloc_r+0x260>
 8004fc0:	2109883a 	add	r4,r4,r4
 8004fc4:	3904703a 	and	r2,r7,r4
 8004fc8:	4a400104 	addi	r9,r9,4
 8004fcc:	103ffc26 	beq	r2,zero,8004fc0 <_malloc_r+0x250>
 8004fd0:	480490fa 	slli	r2,r9,3
 8004fd4:	4819883a 	mov	r12,r9
 8004fd8:	023fff04 	movi	r8,-4
 8004fdc:	589b883a 	add	r13,r11,r2
 8004fe0:	6807883a 	mov	r3,r13
 8004fe4:	014003c4 	movi	r5,15
 8004fe8:	1c000317 	ldw	r16,12(r3)
 8004fec:	1c00041e 	bne	r3,r16,8005000 <_malloc_r+0x290>
 8004ff0:	0000a706 	br	8005290 <_malloc_r+0x520>
 8004ff4:	3000ab0e 	bge	r6,zero,80052a4 <_malloc_r+0x534>
 8004ff8:	84000317 	ldw	r16,12(r16)
 8004ffc:	1c00a426 	beq	r3,r16,8005290 <_malloc_r+0x520>
 8005000:	80800117 	ldw	r2,4(r16)
 8005004:	1204703a 	and	r2,r2,r8
 8005008:	144dc83a 	sub	r6,r2,r17
 800500c:	29bff90e 	bge	r5,r6,8004ff4 <_malloc_r+0x284>
 8005010:	81000317 	ldw	r4,12(r16)
 8005014:	80c00217 	ldw	r3,8(r16)
 8005018:	89400054 	ori	r5,r17,1
 800501c:	8445883a 	add	r2,r16,r17
 8005020:	20c00215 	stw	r3,8(r4)
 8005024:	19000315 	stw	r4,12(r3)
 8005028:	81400115 	stw	r5,4(r16)
 800502c:	1187883a 	add	r3,r2,r6
 8005030:	31000054 	ori	r4,r6,1
 8005034:	50800315 	stw	r2,12(r10)
 8005038:	50800215 	stw	r2,8(r10)
 800503c:	19800015 	stw	r6,0(r3)
 8005040:	11000115 	stw	r4,4(r2)
 8005044:	12800215 	stw	r10,8(r2)
 8005048:	12800315 	stw	r10,12(r2)
 800504c:	9009883a 	mov	r4,r18
 8005050:	800a3180 	call	800a318 <__malloc_unlock>
 8005054:	80c00204 	addi	r3,r16,8
 8005058:	003f5906 	br	8004dc0 <_malloc_r+0x50>
 800505c:	8109883a 	add	r4,r16,r4
 8005060:	20800117 	ldw	r2,4(r4)
 8005064:	80c00217 	ldw	r3,8(r16)
 8005068:	81400317 	ldw	r5,12(r16)
 800506c:	10800054 	ori	r2,r2,1
 8005070:	20800115 	stw	r2,4(r4)
 8005074:	28c00215 	stw	r3,8(r5)
 8005078:	19400315 	stw	r5,12(r3)
 800507c:	9009883a 	mov	r4,r18
 8005080:	800a3180 	call	800a318 <__malloc_unlock>
 8005084:	80c00204 	addi	r3,r16,8
 8005088:	003f4d06 	br	8004dc0 <_malloc_r+0x50>
 800508c:	80800204 	addi	r2,r16,8
 8005090:	14000317 	ldw	r16,12(r2)
 8005094:	143f911e 	bne	r2,r16,8004edc <_malloc_r+0x16c>
 8005098:	1a400084 	addi	r9,r3,2
 800509c:	003f7306 	br	8004e6c <_malloc_r+0xfc>
 80050a0:	88c00054 	ori	r3,r17,1
 80050a4:	8445883a 	add	r2,r16,r17
 80050a8:	80c00115 	stw	r3,4(r16)
 80050ac:	003fdf06 	br	800502c <_malloc_r+0x2bc>
 80050b0:	e4000217 	ldw	r16,8(fp)
 80050b4:	00bfff04 	movi	r2,-4
 80050b8:	80c00117 	ldw	r3,4(r16)
 80050bc:	802d883a 	mov	r22,r16
 80050c0:	18aa703a 	and	r21,r3,r2
 80050c4:	ac401636 	bltu	r21,r17,8005120 <_malloc_r+0x3b0>
 80050c8:	ac49c83a 	sub	r4,r21,r17
 80050cc:	008003c4 	movi	r2,15
 80050d0:	1100130e 	bge	r2,r4,8005120 <_malloc_r+0x3b0>
 80050d4:	88800054 	ori	r2,r17,1
 80050d8:	8447883a 	add	r3,r16,r17
 80050dc:	80800115 	stw	r2,4(r16)
 80050e0:	20800054 	ori	r2,r4,1
 80050e4:	18800115 	stw	r2,4(r3)
 80050e8:	e0c00215 	stw	r3,8(fp)
 80050ec:	9009883a 	mov	r4,r18
 80050f0:	800a3180 	call	800a318 <__malloc_unlock>
 80050f4:	80c00204 	addi	r3,r16,8
 80050f8:	003f3106 	br	8004dc0 <_malloc_r+0x50>
 80050fc:	39c00117 	ldw	r7,4(r7)
 8005100:	573ffe04 	addi	fp,r10,-8
 8005104:	003fa006 	br	8004f88 <_malloc_r+0x218>
 8005108:	00801504 	movi	r2,84
 800510c:	10c06736 	bltu	r2,r3,80052ac <_malloc_r+0x53c>
 8005110:	8804d33a 	srli	r2,r17,12
 8005114:	11801b84 	addi	r6,r2,110
 8005118:	300490fa 	slli	r2,r6,3
 800511c:	003f4106 	br	8004e24 <_malloc_r+0xb4>
 8005120:	d0a6c717 	ldw	r2,-25828(gp)
 8005124:	d0e00517 	ldw	r3,-32748(gp)
 8005128:	053fffc4 	movi	r20,-1
 800512c:	10800404 	addi	r2,r2,16
 8005130:	88a7883a 	add	r19,r17,r2
 8005134:	1d000326 	beq	r3,r20,8005144 <_malloc_r+0x3d4>
 8005138:	98c3ffc4 	addi	r3,r19,4095
 800513c:	00bc0004 	movi	r2,-4096
 8005140:	18a6703a 	and	r19,r3,r2
 8005144:	9009883a 	mov	r4,r18
 8005148:	980b883a 	mov	r5,r19
 800514c:	8006e9c0 	call	8006e9c <_sbrk_r>
 8005150:	1009883a 	mov	r4,r2
 8005154:	15000426 	beq	r2,r20,8005168 <_malloc_r+0x3f8>
 8005158:	854b883a 	add	r5,r16,r21
 800515c:	1029883a 	mov	r20,r2
 8005160:	11405a2e 	bgeu	r2,r5,80052cc <_malloc_r+0x55c>
 8005164:	87000c26 	beq	r16,fp,8005198 <_malloc_r+0x428>
 8005168:	e4000217 	ldw	r16,8(fp)
 800516c:	80c00117 	ldw	r3,4(r16)
 8005170:	00bfff04 	movi	r2,-4
 8005174:	1884703a 	and	r2,r3,r2
 8005178:	14400336 	bltu	r2,r17,8005188 <_malloc_r+0x418>
 800517c:	1449c83a 	sub	r4,r2,r17
 8005180:	008003c4 	movi	r2,15
 8005184:	113fd316 	blt	r2,r4,80050d4 <_malloc_r+0x364>
 8005188:	9009883a 	mov	r4,r18
 800518c:	800a3180 	call	800a318 <__malloc_unlock>
 8005190:	0007883a 	mov	r3,zero
 8005194:	003f0a06 	br	8004dc0 <_malloc_r+0x50>
 8005198:	05c20074 	movhi	r23,2049
 800519c:	bdc0e504 	addi	r23,r23,916
 80051a0:	b8800017 	ldw	r2,0(r23)
 80051a4:	988d883a 	add	r6,r19,r2
 80051a8:	b9800015 	stw	r6,0(r23)
 80051ac:	d0e00517 	ldw	r3,-32748(gp)
 80051b0:	00bfffc4 	movi	r2,-1
 80051b4:	18808e26 	beq	r3,r2,80053f0 <_malloc_r+0x680>
 80051b8:	2145c83a 	sub	r2,r4,r5
 80051bc:	3085883a 	add	r2,r6,r2
 80051c0:	b8800015 	stw	r2,0(r23)
 80051c4:	20c001cc 	andi	r3,r4,7
 80051c8:	18005f1e 	bne	r3,zero,8005348 <_malloc_r+0x5d8>
 80051cc:	000b883a 	mov	r5,zero
 80051d0:	a4c5883a 	add	r2,r20,r19
 80051d4:	1083ffcc 	andi	r2,r2,4095
 80051d8:	00c40004 	movi	r3,4096
 80051dc:	1887c83a 	sub	r3,r3,r2
 80051e0:	28e7883a 	add	r19,r5,r3
 80051e4:	9009883a 	mov	r4,r18
 80051e8:	980b883a 	mov	r5,r19
 80051ec:	8006e9c0 	call	8006e9c <_sbrk_r>
 80051f0:	1007883a 	mov	r3,r2
 80051f4:	00bfffc4 	movi	r2,-1
 80051f8:	18807a26 	beq	r3,r2,80053e4 <_malloc_r+0x674>
 80051fc:	1d05c83a 	sub	r2,r3,r20
 8005200:	9885883a 	add	r2,r19,r2
 8005204:	10c00054 	ori	r3,r2,1
 8005208:	b8800017 	ldw	r2,0(r23)
 800520c:	a021883a 	mov	r16,r20
 8005210:	a0c00115 	stw	r3,4(r20)
 8005214:	9885883a 	add	r2,r19,r2
 8005218:	b8800015 	stw	r2,0(r23)
 800521c:	e5000215 	stw	r20,8(fp)
 8005220:	b7003626 	beq	r22,fp,80052fc <_malloc_r+0x58c>
 8005224:	018003c4 	movi	r6,15
 8005228:	35404b36 	bltu	r6,r21,8005358 <_malloc_r+0x5e8>
 800522c:	00800044 	movi	r2,1
 8005230:	a0800115 	stw	r2,4(r20)
 8005234:	003fcd06 	br	800516c <_malloc_r+0x3fc>
 8005238:	2808d27a 	srli	r4,r5,9
 800523c:	2000371e 	bne	r4,zero,800531c <_malloc_r+0x5ac>
 8005240:	2808d0fa 	srli	r4,r5,3
 8005244:	200690fa 	slli	r3,r4,3
 8005248:	1ad1883a 	add	r8,r3,r11
 800524c:	41800217 	ldw	r6,8(r8)
 8005250:	41805b26 	beq	r8,r6,80053c0 <_malloc_r+0x650>
 8005254:	30800117 	ldw	r2,4(r6)
 8005258:	00ffff04 	movi	r3,-4
 800525c:	10c4703a 	and	r2,r2,r3
 8005260:	2880022e 	bgeu	r5,r2,800526c <_malloc_r+0x4fc>
 8005264:	31800217 	ldw	r6,8(r6)
 8005268:	41bffa1e 	bne	r8,r6,8005254 <_malloc_r+0x4e4>
 800526c:	32000317 	ldw	r8,12(r6)
 8005270:	39c00117 	ldw	r7,4(r7)
 8005274:	82000315 	stw	r8,12(r16)
 8005278:	81800215 	stw	r6,8(r16)
 800527c:	07020074 	movhi	fp,2049
 8005280:	e7347304 	addi	fp,fp,-11828
 8005284:	34000315 	stw	r16,12(r6)
 8005288:	44000215 	stw	r16,8(r8)
 800528c:	003f3e06 	br	8004f88 <_malloc_r+0x218>
 8005290:	63000044 	addi	r12,r12,1
 8005294:	608000cc 	andi	r2,r12,3
 8005298:	10005d26 	beq	r2,zero,8005410 <_malloc_r+0x6a0>
 800529c:	18c00204 	addi	r3,r3,8
 80052a0:	003f5106 	br	8004fe8 <_malloc_r+0x278>
 80052a4:	8089883a 	add	r4,r16,r2
 80052a8:	003f6d06 	br	8005060 <_malloc_r+0x2f0>
 80052ac:	00805504 	movi	r2,340
 80052b0:	10c02036 	bltu	r2,r3,8005334 <_malloc_r+0x5c4>
 80052b4:	8804d3fa 	srli	r2,r17,15
 80052b8:	11801dc4 	addi	r6,r2,119
 80052bc:	300490fa 	slli	r2,r6,3
 80052c0:	003ed806 	br	8004e24 <_malloc_r+0xb4>
 80052c4:	48c000c4 	addi	r3,r9,3
 80052c8:	003f3106 	br	8004f90 <_malloc_r+0x220>
 80052cc:	05c20074 	movhi	r23,2049
 80052d0:	bdc0e504 	addi	r23,r23,916
 80052d4:	b8800017 	ldw	r2,0(r23)
 80052d8:	988d883a 	add	r6,r19,r2
 80052dc:	b9800015 	stw	r6,0(r23)
 80052e0:	293fb21e 	bne	r5,r4,80051ac <_malloc_r+0x43c>
 80052e4:	2083ffcc 	andi	r2,r4,4095
 80052e8:	103fb01e 	bne	r2,zero,80051ac <_malloc_r+0x43c>
 80052ec:	e4000217 	ldw	r16,8(fp)
 80052f0:	9d45883a 	add	r2,r19,r21
 80052f4:	10800054 	ori	r2,r2,1
 80052f8:	80800115 	stw	r2,4(r16)
 80052fc:	b8c00017 	ldw	r3,0(r23)
 8005300:	d0a6c817 	ldw	r2,-25824(gp)
 8005304:	10c0012e 	bgeu	r2,r3,800530c <_malloc_r+0x59c>
 8005308:	d0e6c815 	stw	r3,-25824(gp)
 800530c:	d0a6c917 	ldw	r2,-25820(gp)
 8005310:	10ff962e 	bgeu	r2,r3,800516c <_malloc_r+0x3fc>
 8005314:	d0e6c915 	stw	r3,-25820(gp)
 8005318:	003f9406 	br	800516c <_malloc_r+0x3fc>
 800531c:	00800104 	movi	r2,4
 8005320:	11001e36 	bltu	r2,r4,800539c <_malloc_r+0x62c>
 8005324:	2804d1ba 	srli	r2,r5,6
 8005328:	11000e04 	addi	r4,r2,56
 800532c:	200690fa 	slli	r3,r4,3
 8005330:	003fc506 	br	8005248 <_malloc_r+0x4d8>
 8005334:	00815504 	movi	r2,1364
 8005338:	10c01d2e 	bgeu	r2,r3,80053b0 <_malloc_r+0x640>
 800533c:	01801f84 	movi	r6,126
 8005340:	0080fc04 	movi	r2,1008
 8005344:	003eb706 	br	8004e24 <_malloc_r+0xb4>
 8005348:	00800204 	movi	r2,8
 800534c:	10cbc83a 	sub	r5,r2,r3
 8005350:	2169883a 	add	r20,r4,r5
 8005354:	003f9e06 	br	80051d0 <_malloc_r+0x460>
 8005358:	00bffe04 	movi	r2,-8
 800535c:	a93ffd04 	addi	r4,r21,-12
 8005360:	2088703a 	and	r4,r4,r2
 8005364:	b10b883a 	add	r5,r22,r4
 8005368:	00c00144 	movi	r3,5
 800536c:	28c00215 	stw	r3,8(r5)
 8005370:	28c00115 	stw	r3,4(r5)
 8005374:	b0800117 	ldw	r2,4(r22)
 8005378:	1080004c 	andi	r2,r2,1
 800537c:	2084b03a 	or	r2,r4,r2
 8005380:	b0800115 	stw	r2,4(r22)
 8005384:	313fdd2e 	bgeu	r6,r4,80052fc <_malloc_r+0x58c>
 8005388:	b1400204 	addi	r5,r22,8
 800538c:	9009883a 	mov	r4,r18
 8005390:	80041e80 	call	80041e8 <_free_r>
 8005394:	e4000217 	ldw	r16,8(fp)
 8005398:	003fd806 	br	80052fc <_malloc_r+0x58c>
 800539c:	00800504 	movi	r2,20
 80053a0:	11001536 	bltu	r2,r4,80053f8 <_malloc_r+0x688>
 80053a4:	210016c4 	addi	r4,r4,91
 80053a8:	200690fa 	slli	r3,r4,3
 80053ac:	003fa606 	br	8005248 <_malloc_r+0x4d8>
 80053b0:	8804d4ba 	srli	r2,r17,18
 80053b4:	11801f04 	addi	r6,r2,124
 80053b8:	300490fa 	slli	r2,r6,3
 80053bc:	003e9906 	br	8004e24 <_malloc_r+0xb4>
 80053c0:	2009d0ba 	srai	r4,r4,2
 80053c4:	01420074 	movhi	r5,2049
 80053c8:	29747304 	addi	r5,r5,-11828
 80053cc:	00c00044 	movi	r3,1
 80053d0:	28800117 	ldw	r2,4(r5)
 80053d4:	1906983a 	sll	r3,r3,r4
 80053d8:	10c4b03a 	or	r2,r2,r3
 80053dc:	28800115 	stw	r2,4(r5)
 80053e0:	003fa306 	br	8005270 <_malloc_r+0x500>
 80053e4:	0027883a 	mov	r19,zero
 80053e8:	00c00044 	movi	r3,1
 80053ec:	003f8606 	br	8005208 <_malloc_r+0x498>
 80053f0:	d1200515 	stw	r4,-32748(gp)
 80053f4:	003f7306 	br	80051c4 <_malloc_r+0x454>
 80053f8:	00801504 	movi	r2,84
 80053fc:	11001936 	bltu	r2,r4,8005464 <_malloc_r+0x6f4>
 8005400:	2804d33a 	srli	r2,r5,12
 8005404:	11001b84 	addi	r4,r2,110
 8005408:	200690fa 	slli	r3,r4,3
 800540c:	003f8e06 	br	8005248 <_malloc_r+0x4d8>
 8005410:	480b883a 	mov	r5,r9
 8005414:	6807883a 	mov	r3,r13
 8005418:	288000cc 	andi	r2,r5,3
 800541c:	18fffe04 	addi	r3,r3,-8
 8005420:	297fffc4 	addi	r5,r5,-1
 8005424:	10001526 	beq	r2,zero,800547c <_malloc_r+0x70c>
 8005428:	18800217 	ldw	r2,8(r3)
 800542c:	10fffa26 	beq	r2,r3,8005418 <_malloc_r+0x6a8>
 8005430:	2109883a 	add	r4,r4,r4
 8005434:	393f1e36 	bltu	r7,r4,80050b0 <_malloc_r+0x340>
 8005438:	203f1d26 	beq	r4,zero,80050b0 <_malloc_r+0x340>
 800543c:	21c4703a 	and	r2,r4,r7
 8005440:	10000226 	beq	r2,zero,800544c <_malloc_r+0x6dc>
 8005444:	6013883a 	mov	r9,r12
 8005448:	003ee106 	br	8004fd0 <_malloc_r+0x260>
 800544c:	2109883a 	add	r4,r4,r4
 8005450:	3904703a 	and	r2,r7,r4
 8005454:	63000104 	addi	r12,r12,4
 8005458:	103ffc26 	beq	r2,zero,800544c <_malloc_r+0x6dc>
 800545c:	6013883a 	mov	r9,r12
 8005460:	003edb06 	br	8004fd0 <_malloc_r+0x260>
 8005464:	00805504 	movi	r2,340
 8005468:	11000836 	bltu	r2,r4,800548c <_malloc_r+0x71c>
 800546c:	2804d3fa 	srli	r2,r5,15
 8005470:	11001dc4 	addi	r4,r2,119
 8005474:	200690fa 	slli	r3,r4,3
 8005478:	003f7306 	br	8005248 <_malloc_r+0x4d8>
 800547c:	0104303a 	nor	r2,zero,r4
 8005480:	388e703a 	and	r7,r7,r2
 8005484:	e1c00115 	stw	r7,4(fp)
 8005488:	003fe906 	br	8005430 <_malloc_r+0x6c0>
 800548c:	00815504 	movi	r2,1364
 8005490:	1100032e 	bgeu	r2,r4,80054a0 <_malloc_r+0x730>
 8005494:	01001f84 	movi	r4,126
 8005498:	00c0fc04 	movi	r3,1008
 800549c:	003f6a06 	br	8005248 <_malloc_r+0x4d8>
 80054a0:	2804d4ba 	srli	r2,r5,18
 80054a4:	11001f04 	addi	r4,r2,124
 80054a8:	200690fa 	slli	r3,r4,3
 80054ac:	003f6606 	br	8005248 <_malloc_r+0x4d8>

080054b0 <memchr>:
 80054b0:	008000c4 	movi	r2,3
 80054b4:	29403fcc 	andi	r5,r5,255
 80054b8:	2007883a 	mov	r3,r4
 80054bc:	1180022e 	bgeu	r2,r6,80054c8 <memchr+0x18>
 80054c0:	2084703a 	and	r2,r4,r2
 80054c4:	10000b26 	beq	r2,zero,80054f4 <memchr+0x44>
 80054c8:	313fffc4 	addi	r4,r6,-1
 80054cc:	3000051e 	bne	r6,zero,80054e4 <memchr+0x34>
 80054d0:	00002c06 	br	8005584 <memchr+0xd4>
 80054d4:	213fffc4 	addi	r4,r4,-1
 80054d8:	00bfffc4 	movi	r2,-1
 80054dc:	18c00044 	addi	r3,r3,1
 80054e0:	20802826 	beq	r4,r2,8005584 <memchr+0xd4>
 80054e4:	18800003 	ldbu	r2,0(r3)
 80054e8:	28bffa1e 	bne	r5,r2,80054d4 <memchr+0x24>
 80054ec:	1805883a 	mov	r2,r3
 80054f0:	f800283a 	ret
 80054f4:	0011883a 	mov	r8,zero
 80054f8:	0007883a 	mov	r3,zero
 80054fc:	01c00104 	movi	r7,4
 8005500:	4004923a 	slli	r2,r8,8
 8005504:	18c00044 	addi	r3,r3,1
 8005508:	1151883a 	add	r8,r2,r5
 800550c:	19fffc1e 	bne	r3,r7,8005500 <memchr+0x50>
 8005510:	02bfbff4 	movhi	r10,65279
 8005514:	52bfbfc4 	addi	r10,r10,-257
 8005518:	02602074 	movhi	r9,32897
 800551c:	4a602004 	addi	r9,r9,-32640
 8005520:	02c000c4 	movi	r11,3
 8005524:	20800017 	ldw	r2,0(r4)
 8005528:	31bfff04 	addi	r6,r6,-4
 800552c:	200f883a 	mov	r7,r4
 8005530:	1204f03a 	xor	r2,r2,r8
 8005534:	1287883a 	add	r3,r2,r10
 8005538:	1a46703a 	and	r3,r3,r9
 800553c:	0084303a 	nor	r2,zero,r2
 8005540:	10c4703a 	and	r2,r2,r3
 8005544:	10000b26 	beq	r2,zero,8005574 <memchr+0xc4>
 8005548:	20800003 	ldbu	r2,0(r4)
 800554c:	28800f26 	beq	r5,r2,800558c <memchr+0xdc>
 8005550:	20800043 	ldbu	r2,1(r4)
 8005554:	21c00044 	addi	r7,r4,1
 8005558:	28800c26 	beq	r5,r2,800558c <memchr+0xdc>
 800555c:	20800083 	ldbu	r2,2(r4)
 8005560:	21c00084 	addi	r7,r4,2
 8005564:	28800926 	beq	r5,r2,800558c <memchr+0xdc>
 8005568:	208000c3 	ldbu	r2,3(r4)
 800556c:	21c000c4 	addi	r7,r4,3
 8005570:	28800626 	beq	r5,r2,800558c <memchr+0xdc>
 8005574:	21000104 	addi	r4,r4,4
 8005578:	59bfea36 	bltu	r11,r6,8005524 <memchr+0x74>
 800557c:	2007883a 	mov	r3,r4
 8005580:	003fd106 	br	80054c8 <memchr+0x18>
 8005584:	0005883a 	mov	r2,zero
 8005588:	f800283a 	ret
 800558c:	3805883a 	mov	r2,r7
 8005590:	f800283a 	ret

08005594 <memcpy>:
 8005594:	01c003c4 	movi	r7,15
 8005598:	2007883a 	mov	r3,r4
 800559c:	3980032e 	bgeu	r7,r6,80055ac <memcpy+0x18>
 80055a0:	2904b03a 	or	r2,r5,r4
 80055a4:	108000cc 	andi	r2,r2,3
 80055a8:	10000926 	beq	r2,zero,80055d0 <memcpy+0x3c>
 80055ac:	30000626 	beq	r6,zero,80055c8 <memcpy+0x34>
 80055b0:	30cd883a 	add	r6,r6,r3
 80055b4:	28800003 	ldbu	r2,0(r5)
 80055b8:	29400044 	addi	r5,r5,1
 80055bc:	18800005 	stb	r2,0(r3)
 80055c0:	18c00044 	addi	r3,r3,1
 80055c4:	30fffb1e 	bne	r6,r3,80055b4 <memcpy+0x20>
 80055c8:	2005883a 	mov	r2,r4
 80055cc:	f800283a 	ret
 80055d0:	3811883a 	mov	r8,r7
 80055d4:	200f883a 	mov	r7,r4
 80055d8:	28c00017 	ldw	r3,0(r5)
 80055dc:	31bffc04 	addi	r6,r6,-16
 80055e0:	38c00015 	stw	r3,0(r7)
 80055e4:	28800117 	ldw	r2,4(r5)
 80055e8:	38800115 	stw	r2,4(r7)
 80055ec:	28c00217 	ldw	r3,8(r5)
 80055f0:	38c00215 	stw	r3,8(r7)
 80055f4:	28800317 	ldw	r2,12(r5)
 80055f8:	29400404 	addi	r5,r5,16
 80055fc:	38800315 	stw	r2,12(r7)
 8005600:	39c00404 	addi	r7,r7,16
 8005604:	41bff436 	bltu	r8,r6,80055d8 <memcpy+0x44>
 8005608:	008000c4 	movi	r2,3
 800560c:	1180072e 	bgeu	r2,r6,800562c <memcpy+0x98>
 8005610:	1007883a 	mov	r3,r2
 8005614:	28800017 	ldw	r2,0(r5)
 8005618:	31bfff04 	addi	r6,r6,-4
 800561c:	29400104 	addi	r5,r5,4
 8005620:	38800015 	stw	r2,0(r7)
 8005624:	39c00104 	addi	r7,r7,4
 8005628:	19bffa36 	bltu	r3,r6,8005614 <memcpy+0x80>
 800562c:	3807883a 	mov	r3,r7
 8005630:	003fde06 	br	80055ac <memcpy+0x18>

08005634 <memmove>:
 8005634:	2807883a 	mov	r3,r5
 8005638:	2011883a 	mov	r8,r4
 800563c:	29000c2e 	bgeu	r5,r4,8005670 <memmove+0x3c>
 8005640:	298f883a 	add	r7,r5,r6
 8005644:	21c00a2e 	bgeu	r4,r7,8005670 <memmove+0x3c>
 8005648:	30000726 	beq	r6,zero,8005668 <memmove+0x34>
 800564c:	2187883a 	add	r3,r4,r6
 8005650:	198dc83a 	sub	r6,r3,r6
 8005654:	39ffffc4 	addi	r7,r7,-1
 8005658:	38800003 	ldbu	r2,0(r7)
 800565c:	18ffffc4 	addi	r3,r3,-1
 8005660:	18800005 	stb	r2,0(r3)
 8005664:	19bffb1e 	bne	r3,r6,8005654 <memmove+0x20>
 8005668:	2005883a 	mov	r2,r4
 800566c:	f800283a 	ret
 8005670:	01c003c4 	movi	r7,15
 8005674:	39800a36 	bltu	r7,r6,80056a0 <memmove+0x6c>
 8005678:	303ffb26 	beq	r6,zero,8005668 <memmove+0x34>
 800567c:	400f883a 	mov	r7,r8
 8005680:	320d883a 	add	r6,r6,r8
 8005684:	28800003 	ldbu	r2,0(r5)
 8005688:	29400044 	addi	r5,r5,1
 800568c:	38800005 	stb	r2,0(r7)
 8005690:	39c00044 	addi	r7,r7,1
 8005694:	39bffb1e 	bne	r7,r6,8005684 <memmove+0x50>
 8005698:	2005883a 	mov	r2,r4
 800569c:	f800283a 	ret
 80056a0:	1904b03a 	or	r2,r3,r4
 80056a4:	108000cc 	andi	r2,r2,3
 80056a8:	103ff31e 	bne	r2,zero,8005678 <memmove+0x44>
 80056ac:	3811883a 	mov	r8,r7
 80056b0:	180b883a 	mov	r5,r3
 80056b4:	200f883a 	mov	r7,r4
 80056b8:	28c00017 	ldw	r3,0(r5)
 80056bc:	31bffc04 	addi	r6,r6,-16
 80056c0:	38c00015 	stw	r3,0(r7)
 80056c4:	28800117 	ldw	r2,4(r5)
 80056c8:	38800115 	stw	r2,4(r7)
 80056cc:	28c00217 	ldw	r3,8(r5)
 80056d0:	38c00215 	stw	r3,8(r7)
 80056d4:	28800317 	ldw	r2,12(r5)
 80056d8:	29400404 	addi	r5,r5,16
 80056dc:	38800315 	stw	r2,12(r7)
 80056e0:	39c00404 	addi	r7,r7,16
 80056e4:	41bff436 	bltu	r8,r6,80056b8 <memmove+0x84>
 80056e8:	008000c4 	movi	r2,3
 80056ec:	1180072e 	bgeu	r2,r6,800570c <memmove+0xd8>
 80056f0:	1007883a 	mov	r3,r2
 80056f4:	28800017 	ldw	r2,0(r5)
 80056f8:	31bfff04 	addi	r6,r6,-4
 80056fc:	29400104 	addi	r5,r5,4
 8005700:	38800015 	stw	r2,0(r7)
 8005704:	39c00104 	addi	r7,r7,4
 8005708:	19bffa36 	bltu	r3,r6,80056f4 <memmove+0xc0>
 800570c:	3811883a 	mov	r8,r7
 8005710:	003fd906 	br	8005678 <memmove+0x44>

08005714 <memset>:
 8005714:	008000c4 	movi	r2,3
 8005718:	29403fcc 	andi	r5,r5,255
 800571c:	2007883a 	mov	r3,r4
 8005720:	1180022e 	bgeu	r2,r6,800572c <memset+0x18>
 8005724:	2084703a 	and	r2,r4,r2
 8005728:	10000826 	beq	r2,zero,800574c <memset+0x38>
 800572c:	30000526 	beq	r6,zero,8005744 <memset+0x30>
 8005730:	2805883a 	mov	r2,r5
 8005734:	30cd883a 	add	r6,r6,r3
 8005738:	18800005 	stb	r2,0(r3)
 800573c:	18c00044 	addi	r3,r3,1
 8005740:	19bffd1e 	bne	r3,r6,8005738 <memset+0x24>
 8005744:	2005883a 	mov	r2,r4
 8005748:	f800283a 	ret
 800574c:	2804923a 	slli	r2,r5,8
 8005750:	020003c4 	movi	r8,15
 8005754:	200f883a 	mov	r7,r4
 8005758:	2884b03a 	or	r2,r5,r2
 800575c:	1006943a 	slli	r3,r2,16
 8005760:	10c6b03a 	or	r3,r2,r3
 8005764:	41800a2e 	bgeu	r8,r6,8005790 <memset+0x7c>
 8005768:	4005883a 	mov	r2,r8
 800576c:	31bffc04 	addi	r6,r6,-16
 8005770:	38c00015 	stw	r3,0(r7)
 8005774:	38c00115 	stw	r3,4(r7)
 8005778:	38c00215 	stw	r3,8(r7)
 800577c:	38c00315 	stw	r3,12(r7)
 8005780:	39c00404 	addi	r7,r7,16
 8005784:	11bff936 	bltu	r2,r6,800576c <memset+0x58>
 8005788:	008000c4 	movi	r2,3
 800578c:	1180052e 	bgeu	r2,r6,80057a4 <memset+0x90>
 8005790:	31bfff04 	addi	r6,r6,-4
 8005794:	008000c4 	movi	r2,3
 8005798:	38c00015 	stw	r3,0(r7)
 800579c:	39c00104 	addi	r7,r7,4
 80057a0:	11bffb36 	bltu	r2,r6,8005790 <memset+0x7c>
 80057a4:	3807883a 	mov	r3,r7
 80057a8:	003fe006 	br	800572c <memset+0x18>

080057ac <_Bfree>:
 80057ac:	28000826 	beq	r5,zero,80057d0 <_Bfree+0x24>
 80057b0:	28800117 	ldw	r2,4(r5)
 80057b4:	21001317 	ldw	r4,76(r4)
 80057b8:	1085883a 	add	r2,r2,r2
 80057bc:	1085883a 	add	r2,r2,r2
 80057c0:	1105883a 	add	r2,r2,r4
 80057c4:	10c00017 	ldw	r3,0(r2)
 80057c8:	28c00015 	stw	r3,0(r5)
 80057cc:	11400015 	stw	r5,0(r2)
 80057d0:	f800283a 	ret

080057d4 <__hi0bits>:
 80057d4:	20bfffec 	andhi	r2,r4,65535
 80057d8:	10001426 	beq	r2,zero,800582c <__hi0bits+0x58>
 80057dc:	0007883a 	mov	r3,zero
 80057e0:	20bfc02c 	andhi	r2,r4,65280
 80057e4:	1000021e 	bne	r2,zero,80057f0 <__hi0bits+0x1c>
 80057e8:	2008923a 	slli	r4,r4,8
 80057ec:	18c00204 	addi	r3,r3,8
 80057f0:	20bc002c 	andhi	r2,r4,61440
 80057f4:	1000021e 	bne	r2,zero,8005800 <__hi0bits+0x2c>
 80057f8:	2008913a 	slli	r4,r4,4
 80057fc:	18c00104 	addi	r3,r3,4
 8005800:	20b0002c 	andhi	r2,r4,49152
 8005804:	1000031e 	bne	r2,zero,8005814 <__hi0bits+0x40>
 8005808:	2105883a 	add	r2,r4,r4
 800580c:	18c00084 	addi	r3,r3,2
 8005810:	1089883a 	add	r4,r2,r2
 8005814:	20000316 	blt	r4,zero,8005824 <__hi0bits+0x50>
 8005818:	2090002c 	andhi	r2,r4,16384
 800581c:	10000626 	beq	r2,zero,8005838 <__hi0bits+0x64>
 8005820:	18c00044 	addi	r3,r3,1
 8005824:	1805883a 	mov	r2,r3
 8005828:	f800283a 	ret
 800582c:	2008943a 	slli	r4,r4,16
 8005830:	00c00404 	movi	r3,16
 8005834:	003fea06 	br	80057e0 <__hi0bits+0xc>
 8005838:	00c00804 	movi	r3,32
 800583c:	1805883a 	mov	r2,r3
 8005840:	f800283a 	ret

08005844 <__lo0bits>:
 8005844:	20c00017 	ldw	r3,0(r4)
 8005848:	188001cc 	andi	r2,r3,7
 800584c:	10000a26 	beq	r2,zero,8005878 <__lo0bits+0x34>
 8005850:	1880004c 	andi	r2,r3,1
 8005854:	1005003a 	cmpeq	r2,r2,zero
 8005858:	10002126 	beq	r2,zero,80058e0 <__lo0bits+0x9c>
 800585c:	1880008c 	andi	r2,r3,2
 8005860:	1000251e 	bne	r2,zero,80058f8 <__lo0bits+0xb4>
 8005864:	1804d0ba 	srli	r2,r3,2
 8005868:	01400084 	movi	r5,2
 800586c:	20800015 	stw	r2,0(r4)
 8005870:	2805883a 	mov	r2,r5
 8005874:	f800283a 	ret
 8005878:	18bfffcc 	andi	r2,r3,65535
 800587c:	10001526 	beq	r2,zero,80058d4 <__lo0bits+0x90>
 8005880:	000b883a 	mov	r5,zero
 8005884:	18803fcc 	andi	r2,r3,255
 8005888:	1000021e 	bne	r2,zero,8005894 <__lo0bits+0x50>
 800588c:	1806d23a 	srli	r3,r3,8
 8005890:	29400204 	addi	r5,r5,8
 8005894:	188003cc 	andi	r2,r3,15
 8005898:	1000021e 	bne	r2,zero,80058a4 <__lo0bits+0x60>
 800589c:	1806d13a 	srli	r3,r3,4
 80058a0:	29400104 	addi	r5,r5,4
 80058a4:	188000cc 	andi	r2,r3,3
 80058a8:	1000021e 	bne	r2,zero,80058b4 <__lo0bits+0x70>
 80058ac:	1806d0ba 	srli	r3,r3,2
 80058b0:	29400084 	addi	r5,r5,2
 80058b4:	1880004c 	andi	r2,r3,1
 80058b8:	1000031e 	bne	r2,zero,80058c8 <__lo0bits+0x84>
 80058bc:	1806d07a 	srli	r3,r3,1
 80058c0:	18000a26 	beq	r3,zero,80058ec <__lo0bits+0xa8>
 80058c4:	29400044 	addi	r5,r5,1
 80058c8:	2805883a 	mov	r2,r5
 80058cc:	20c00015 	stw	r3,0(r4)
 80058d0:	f800283a 	ret
 80058d4:	1806d43a 	srli	r3,r3,16
 80058d8:	01400404 	movi	r5,16
 80058dc:	003fe906 	br	8005884 <__lo0bits+0x40>
 80058e0:	000b883a 	mov	r5,zero
 80058e4:	2805883a 	mov	r2,r5
 80058e8:	f800283a 	ret
 80058ec:	01400804 	movi	r5,32
 80058f0:	2805883a 	mov	r2,r5
 80058f4:	f800283a 	ret
 80058f8:	1804d07a 	srli	r2,r3,1
 80058fc:	01400044 	movi	r5,1
 8005900:	20800015 	stw	r2,0(r4)
 8005904:	003fda06 	br	8005870 <__lo0bits+0x2c>

08005908 <__mcmp>:
 8005908:	20800417 	ldw	r2,16(r4)
 800590c:	28c00417 	ldw	r3,16(r5)
 8005910:	10cfc83a 	sub	r7,r2,r3
 8005914:	38000c1e 	bne	r7,zero,8005948 <__mcmp+0x40>
 8005918:	18c5883a 	add	r2,r3,r3
 800591c:	1085883a 	add	r2,r2,r2
 8005920:	10c00504 	addi	r3,r2,20
 8005924:	21000504 	addi	r4,r4,20
 8005928:	28cb883a 	add	r5,r5,r3
 800592c:	2085883a 	add	r2,r4,r2
 8005930:	10bfff04 	addi	r2,r2,-4
 8005934:	297fff04 	addi	r5,r5,-4
 8005938:	11800017 	ldw	r6,0(r2)
 800593c:	28c00017 	ldw	r3,0(r5)
 8005940:	30c0031e 	bne	r6,r3,8005950 <__mcmp+0x48>
 8005944:	20bffa36 	bltu	r4,r2,8005930 <__mcmp+0x28>
 8005948:	3805883a 	mov	r2,r7
 800594c:	f800283a 	ret
 8005950:	30c00336 	bltu	r6,r3,8005960 <__mcmp+0x58>
 8005954:	01c00044 	movi	r7,1
 8005958:	3805883a 	mov	r2,r7
 800595c:	f800283a 	ret
 8005960:	01ffffc4 	movi	r7,-1
 8005964:	003ff806 	br	8005948 <__mcmp+0x40>

08005968 <__ulp>:
 8005968:	295ffc2c 	andhi	r5,r5,32752
 800596c:	013f3034 	movhi	r4,64704
 8005970:	290b883a 	add	r5,r5,r4
 8005974:	0145c83a 	sub	r2,zero,r5
 8005978:	1007d53a 	srai	r3,r2,20
 800597c:	000d883a 	mov	r6,zero
 8005980:	0140040e 	bge	zero,r5,8005994 <__ulp+0x2c>
 8005984:	280f883a 	mov	r7,r5
 8005988:	3807883a 	mov	r3,r7
 800598c:	3005883a 	mov	r2,r6
 8005990:	f800283a 	ret
 8005994:	008004c4 	movi	r2,19
 8005998:	193ffb04 	addi	r4,r3,-20
 800599c:	10c00c0e 	bge	r2,r3,80059d0 <__ulp+0x68>
 80059a0:	008007c4 	movi	r2,31
 80059a4:	1107c83a 	sub	r3,r2,r4
 80059a8:	00800784 	movi	r2,30
 80059ac:	01400044 	movi	r5,1
 80059b0:	11000216 	blt	r2,r4,80059bc <__ulp+0x54>
 80059b4:	00800044 	movi	r2,1
 80059b8:	10ca983a 	sll	r5,r2,r3
 80059bc:	000f883a 	mov	r7,zero
 80059c0:	280d883a 	mov	r6,r5
 80059c4:	3807883a 	mov	r3,r7
 80059c8:	3005883a 	mov	r2,r6
 80059cc:	f800283a 	ret
 80059d0:	00800234 	movhi	r2,8
 80059d4:	10cfd83a 	sra	r7,r2,r3
 80059d8:	000d883a 	mov	r6,zero
 80059dc:	3005883a 	mov	r2,r6
 80059e0:	3807883a 	mov	r3,r7
 80059e4:	f800283a 	ret

080059e8 <__b2d>:
 80059e8:	20800417 	ldw	r2,16(r4)
 80059ec:	defff904 	addi	sp,sp,-28
 80059f0:	dd000415 	stw	r20,16(sp)
 80059f4:	1085883a 	add	r2,r2,r2
 80059f8:	25000504 	addi	r20,r4,20
 80059fc:	1085883a 	add	r2,r2,r2
 8005a00:	dc000015 	stw	r16,0(sp)
 8005a04:	a0a1883a 	add	r16,r20,r2
 8005a08:	dd400515 	stw	r21,20(sp)
 8005a0c:	857fff17 	ldw	r21,-4(r16)
 8005a10:	dc400115 	stw	r17,4(sp)
 8005a14:	dfc00615 	stw	ra,24(sp)
 8005a18:	a809883a 	mov	r4,r21
 8005a1c:	2823883a 	mov	r17,r5
 8005a20:	dcc00315 	stw	r19,12(sp)
 8005a24:	dc800215 	stw	r18,8(sp)
 8005a28:	80057d40 	call	80057d4 <__hi0bits>
 8005a2c:	100b883a 	mov	r5,r2
 8005a30:	00800804 	movi	r2,32
 8005a34:	1145c83a 	sub	r2,r2,r5
 8005a38:	88800015 	stw	r2,0(r17)
 8005a3c:	00800284 	movi	r2,10
 8005a40:	80ffff04 	addi	r3,r16,-4
 8005a44:	11401416 	blt	r2,r5,8005a98 <__b2d+0xb0>
 8005a48:	008002c4 	movi	r2,11
 8005a4c:	1149c83a 	sub	r4,r2,r5
 8005a50:	a0c02736 	bltu	r20,r3,8005af0 <__b2d+0x108>
 8005a54:	000d883a 	mov	r6,zero
 8005a58:	28800544 	addi	r2,r5,21
 8005a5c:	a906d83a 	srl	r3,r21,r4
 8005a60:	a884983a 	sll	r2,r21,r2
 8005a64:	1ccffc34 	orhi	r19,r3,16368
 8005a68:	11a4b03a 	or	r18,r2,r6
 8005a6c:	9005883a 	mov	r2,r18
 8005a70:	9807883a 	mov	r3,r19
 8005a74:	dfc00617 	ldw	ra,24(sp)
 8005a78:	dd400517 	ldw	r21,20(sp)
 8005a7c:	dd000417 	ldw	r20,16(sp)
 8005a80:	dcc00317 	ldw	r19,12(sp)
 8005a84:	dc800217 	ldw	r18,8(sp)
 8005a88:	dc400117 	ldw	r17,4(sp)
 8005a8c:	dc000017 	ldw	r16,0(sp)
 8005a90:	dec00704 	addi	sp,sp,28
 8005a94:	f800283a 	ret
 8005a98:	a0c00e36 	bltu	r20,r3,8005ad4 <__b2d+0xec>
 8005a9c:	293ffd44 	addi	r4,r5,-11
 8005aa0:	000d883a 	mov	r6,zero
 8005aa4:	20000f26 	beq	r4,zero,8005ae4 <__b2d+0xfc>
 8005aa8:	00800804 	movi	r2,32
 8005aac:	110bc83a 	sub	r5,r2,r4
 8005ab0:	a0c01236 	bltu	r20,r3,8005afc <__b2d+0x114>
 8005ab4:	000f883a 	mov	r7,zero
 8005ab8:	a904983a 	sll	r2,r21,r4
 8005abc:	3146d83a 	srl	r3,r6,r5
 8005ac0:	3108983a 	sll	r4,r6,r4
 8005ac4:	108ffc34 	orhi	r2,r2,16368
 8005ac8:	18a6b03a 	or	r19,r3,r2
 8005acc:	3924b03a 	or	r18,r7,r4
 8005ad0:	003fe606 	br	8005a6c <__b2d+0x84>
 8005ad4:	293ffd44 	addi	r4,r5,-11
 8005ad8:	81bffe17 	ldw	r6,-8(r16)
 8005adc:	80fffe04 	addi	r3,r16,-8
 8005ae0:	203ff11e 	bne	r4,zero,8005aa8 <__b2d+0xc0>
 8005ae4:	accffc34 	orhi	r19,r21,16368
 8005ae8:	3025883a 	mov	r18,r6
 8005aec:	003fdf06 	br	8005a6c <__b2d+0x84>
 8005af0:	18bfff17 	ldw	r2,-4(r3)
 8005af4:	110cd83a 	srl	r6,r2,r4
 8005af8:	003fd706 	br	8005a58 <__b2d+0x70>
 8005afc:	18bfff17 	ldw	r2,-4(r3)
 8005b00:	114ed83a 	srl	r7,r2,r5
 8005b04:	003fec06 	br	8005ab8 <__b2d+0xd0>

08005b08 <__ratio>:
 8005b08:	defff904 	addi	sp,sp,-28
 8005b0c:	dc400215 	stw	r17,8(sp)
 8005b10:	2823883a 	mov	r17,r5
 8005b14:	d80b883a 	mov	r5,sp
 8005b18:	dfc00615 	stw	ra,24(sp)
 8005b1c:	dd000515 	stw	r20,20(sp)
 8005b20:	dcc00415 	stw	r19,16(sp)
 8005b24:	dc800315 	stw	r18,12(sp)
 8005b28:	2025883a 	mov	r18,r4
 8005b2c:	80059e80 	call	80059e8 <__b2d>
 8005b30:	8809883a 	mov	r4,r17
 8005b34:	d9400104 	addi	r5,sp,4
 8005b38:	1027883a 	mov	r19,r2
 8005b3c:	1829883a 	mov	r20,r3
 8005b40:	80059e80 	call	80059e8 <__b2d>
 8005b44:	89000417 	ldw	r4,16(r17)
 8005b48:	91c00417 	ldw	r7,16(r18)
 8005b4c:	d9800117 	ldw	r6,4(sp)
 8005b50:	180b883a 	mov	r5,r3
 8005b54:	390fc83a 	sub	r7,r7,r4
 8005b58:	1009883a 	mov	r4,r2
 8005b5c:	d8800017 	ldw	r2,0(sp)
 8005b60:	380e917a 	slli	r7,r7,5
 8005b64:	2011883a 	mov	r8,r4
 8005b68:	1185c83a 	sub	r2,r2,r6
 8005b6c:	11c5883a 	add	r2,r2,r7
 8005b70:	1006953a 	slli	r3,r2,20
 8005b74:	2813883a 	mov	r9,r5
 8005b78:	00800d0e 	bge	zero,r2,8005bb0 <__ratio+0xa8>
 8005b7c:	1d29883a 	add	r20,r3,r20
 8005b80:	a00b883a 	mov	r5,r20
 8005b84:	480f883a 	mov	r7,r9
 8005b88:	9809883a 	mov	r4,r19
 8005b8c:	400d883a 	mov	r6,r8
 8005b90:	8008bc40 	call	8008bc4 <__divdf3>
 8005b94:	dfc00617 	ldw	ra,24(sp)
 8005b98:	dd000517 	ldw	r20,20(sp)
 8005b9c:	dcc00417 	ldw	r19,16(sp)
 8005ba0:	dc800317 	ldw	r18,12(sp)
 8005ba4:	dc400217 	ldw	r17,8(sp)
 8005ba8:	dec00704 	addi	sp,sp,28
 8005bac:	f800283a 	ret
 8005bb0:	28d3c83a 	sub	r9,r5,r3
 8005bb4:	003ff206 	br	8005b80 <__ratio+0x78>

08005bb8 <_mprec_log10>:
 8005bb8:	defffe04 	addi	sp,sp,-8
 8005bbc:	008005c4 	movi	r2,23
 8005bc0:	dc000015 	stw	r16,0(sp)
 8005bc4:	dfc00115 	stw	ra,4(sp)
 8005bc8:	2021883a 	mov	r16,r4
 8005bcc:	11000c16 	blt	r2,r4,8005c00 <_mprec_log10+0x48>
 8005bd0:	200490fa 	slli	r2,r4,3
 8005bd4:	00c20074 	movhi	r3,2049
 8005bd8:	18f2b304 	addi	r3,r3,-13620
 8005bdc:	10c5883a 	add	r2,r2,r3
 8005be0:	12400117 	ldw	r9,4(r2)
 8005be4:	12000017 	ldw	r8,0(r2)
 8005be8:	4807883a 	mov	r3,r9
 8005bec:	4005883a 	mov	r2,r8
 8005bf0:	dfc00117 	ldw	ra,4(sp)
 8005bf4:	dc000017 	ldw	r16,0(sp)
 8005bf8:	dec00204 	addi	sp,sp,8
 8005bfc:	f800283a 	ret
 8005c00:	0011883a 	mov	r8,zero
 8005c04:	024ffc34 	movhi	r9,16368
 8005c08:	0005883a 	mov	r2,zero
 8005c0c:	00d00934 	movhi	r3,16420
 8005c10:	480b883a 	mov	r5,r9
 8005c14:	4009883a 	mov	r4,r8
 8005c18:	180f883a 	mov	r7,r3
 8005c1c:	100d883a 	mov	r6,r2
 8005c20:	80088000 	call	8008800 <__muldf3>
 8005c24:	843fffc4 	addi	r16,r16,-1
 8005c28:	1011883a 	mov	r8,r2
 8005c2c:	1813883a 	mov	r9,r3
 8005c30:	803ff51e 	bne	r16,zero,8005c08 <_mprec_log10+0x50>
 8005c34:	4005883a 	mov	r2,r8
 8005c38:	4807883a 	mov	r3,r9
 8005c3c:	dfc00117 	ldw	ra,4(sp)
 8005c40:	dc000017 	ldw	r16,0(sp)
 8005c44:	dec00204 	addi	sp,sp,8
 8005c48:	f800283a 	ret

08005c4c <__copybits>:
 8005c4c:	297fffc4 	addi	r5,r5,-1
 8005c50:	30800417 	ldw	r2,16(r6)
 8005c54:	280bd17a 	srai	r5,r5,5
 8005c58:	31800504 	addi	r6,r6,20
 8005c5c:	1085883a 	add	r2,r2,r2
 8005c60:	294b883a 	add	r5,r5,r5
 8005c64:	294b883a 	add	r5,r5,r5
 8005c68:	1085883a 	add	r2,r2,r2
 8005c6c:	290b883a 	add	r5,r5,r4
 8005c70:	3087883a 	add	r3,r6,r2
 8005c74:	29400104 	addi	r5,r5,4
 8005c78:	30c0052e 	bgeu	r6,r3,8005c90 <__copybits+0x44>
 8005c7c:	30800017 	ldw	r2,0(r6)
 8005c80:	31800104 	addi	r6,r6,4
 8005c84:	20800015 	stw	r2,0(r4)
 8005c88:	21000104 	addi	r4,r4,4
 8005c8c:	30fffb36 	bltu	r6,r3,8005c7c <__copybits+0x30>
 8005c90:	2140032e 	bgeu	r4,r5,8005ca0 <__copybits+0x54>
 8005c94:	20000015 	stw	zero,0(r4)
 8005c98:	21000104 	addi	r4,r4,4
 8005c9c:	217ffd36 	bltu	r4,r5,8005c94 <__copybits+0x48>
 8005ca0:	f800283a 	ret

08005ca4 <__any_on>:
 8005ca4:	20800417 	ldw	r2,16(r4)
 8005ca8:	2807d17a 	srai	r3,r5,5
 8005cac:	21000504 	addi	r4,r4,20
 8005cb0:	10c00d0e 	bge	r2,r3,8005ce8 <__any_on+0x44>
 8005cb4:	1085883a 	add	r2,r2,r2
 8005cb8:	1085883a 	add	r2,r2,r2
 8005cbc:	208d883a 	add	r6,r4,r2
 8005cc0:	2180182e 	bgeu	r4,r6,8005d24 <__any_on+0x80>
 8005cc4:	30bfff17 	ldw	r2,-4(r6)
 8005cc8:	30ffff04 	addi	r3,r6,-4
 8005ccc:	1000041e 	bne	r2,zero,8005ce0 <__any_on+0x3c>
 8005cd0:	20c0142e 	bgeu	r4,r3,8005d24 <__any_on+0x80>
 8005cd4:	18ffff04 	addi	r3,r3,-4
 8005cd8:	18800017 	ldw	r2,0(r3)
 8005cdc:	103ffc26 	beq	r2,zero,8005cd0 <__any_on+0x2c>
 8005ce0:	00800044 	movi	r2,1
 8005ce4:	f800283a 	ret
 8005ce8:	18800a0e 	bge	r3,r2,8005d14 <__any_on+0x70>
 8005cec:	294007cc 	andi	r5,r5,31
 8005cf0:	28000826 	beq	r5,zero,8005d14 <__any_on+0x70>
 8005cf4:	18c5883a 	add	r2,r3,r3
 8005cf8:	1085883a 	add	r2,r2,r2
 8005cfc:	208d883a 	add	r6,r4,r2
 8005d00:	30c00017 	ldw	r3,0(r6)
 8005d04:	1944d83a 	srl	r2,r3,r5
 8005d08:	1144983a 	sll	r2,r2,r5
 8005d0c:	18bff41e 	bne	r3,r2,8005ce0 <__any_on+0x3c>
 8005d10:	003feb06 	br	8005cc0 <__any_on+0x1c>
 8005d14:	18c5883a 	add	r2,r3,r3
 8005d18:	1085883a 	add	r2,r2,r2
 8005d1c:	208d883a 	add	r6,r4,r2
 8005d20:	003fe706 	br	8005cc0 <__any_on+0x1c>
 8005d24:	0005883a 	mov	r2,zero
 8005d28:	f800283a 	ret

08005d2c <_Balloc>:
 8005d2c:	20c01317 	ldw	r3,76(r4)
 8005d30:	defffb04 	addi	sp,sp,-20
 8005d34:	dcc00315 	stw	r19,12(sp)
 8005d38:	dc800215 	stw	r18,8(sp)
 8005d3c:	dfc00415 	stw	ra,16(sp)
 8005d40:	2825883a 	mov	r18,r5
 8005d44:	dc400115 	stw	r17,4(sp)
 8005d48:	dc000015 	stw	r16,0(sp)
 8005d4c:	2027883a 	mov	r19,r4
 8005d50:	01800404 	movi	r6,16
 8005d54:	01400104 	movi	r5,4
 8005d58:	18001726 	beq	r3,zero,8005db8 <_Balloc+0x8c>
 8005d5c:	01400044 	movi	r5,1
 8005d60:	9485883a 	add	r2,r18,r18
 8005d64:	2ca2983a 	sll	r17,r5,r18
 8005d68:	1085883a 	add	r2,r2,r2
 8005d6c:	10c7883a 	add	r3,r2,r3
 8005d70:	1c000017 	ldw	r16,0(r3)
 8005d74:	8c4d883a 	add	r6,r17,r17
 8005d78:	318d883a 	add	r6,r6,r6
 8005d7c:	9809883a 	mov	r4,r19
 8005d80:	31800504 	addi	r6,r6,20
 8005d84:	80001226 	beq	r16,zero,8005dd0 <_Balloc+0xa4>
 8005d88:	80800017 	ldw	r2,0(r16)
 8005d8c:	18800015 	stw	r2,0(r3)
 8005d90:	80000415 	stw	zero,16(r16)
 8005d94:	80000315 	stw	zero,12(r16)
 8005d98:	8005883a 	mov	r2,r16
 8005d9c:	dfc00417 	ldw	ra,16(sp)
 8005da0:	dcc00317 	ldw	r19,12(sp)
 8005da4:	dc800217 	ldw	r18,8(sp)
 8005da8:	dc400117 	ldw	r17,4(sp)
 8005dac:	dc000017 	ldw	r16,0(sp)
 8005db0:	dec00504 	addi	sp,sp,20
 8005db4:	f800283a 	ret
 8005db8:	80072000 	call	8007200 <_calloc_r>
 8005dbc:	1007883a 	mov	r3,r2
 8005dc0:	0021883a 	mov	r16,zero
 8005dc4:	98801315 	stw	r2,76(r19)
 8005dc8:	103fe41e 	bne	r2,zero,8005d5c <_Balloc+0x30>
 8005dcc:	003ff206 	br	8005d98 <_Balloc+0x6c>
 8005dd0:	80072000 	call	8007200 <_calloc_r>
 8005dd4:	103ff026 	beq	r2,zero,8005d98 <_Balloc+0x6c>
 8005dd8:	1021883a 	mov	r16,r2
 8005ddc:	14800115 	stw	r18,4(r2)
 8005de0:	14400215 	stw	r17,8(r2)
 8005de4:	003fea06 	br	8005d90 <_Balloc+0x64>

08005de8 <__d2b>:
 8005de8:	defff504 	addi	sp,sp,-44
 8005dec:	dcc00515 	stw	r19,20(sp)
 8005df0:	04c00044 	movi	r19,1
 8005df4:	dc000215 	stw	r16,8(sp)
 8005df8:	2821883a 	mov	r16,r5
 8005dfc:	980b883a 	mov	r5,r19
 8005e00:	ddc00915 	stw	r23,36(sp)
 8005e04:	dd800815 	stw	r22,32(sp)
 8005e08:	dd400715 	stw	r21,28(sp)
 8005e0c:	dd000615 	stw	r20,24(sp)
 8005e10:	dc800415 	stw	r18,16(sp)
 8005e14:	dc400315 	stw	r17,12(sp)
 8005e18:	dfc00a15 	stw	ra,40(sp)
 8005e1c:	3023883a 	mov	r17,r6
 8005e20:	382d883a 	mov	r22,r7
 8005e24:	ddc00b17 	ldw	r23,44(sp)
 8005e28:	8005d2c0 	call	8005d2c <_Balloc>
 8005e2c:	1025883a 	mov	r18,r2
 8005e30:	00a00034 	movhi	r2,32768
 8005e34:	10bfffc4 	addi	r2,r2,-1
 8005e38:	8888703a 	and	r4,r17,r2
 8005e3c:	202ad53a 	srli	r21,r4,20
 8005e40:	00800434 	movhi	r2,16
 8005e44:	10bfffc4 	addi	r2,r2,-1
 8005e48:	8886703a 	and	r3,r17,r2
 8005e4c:	a829003a 	cmpeq	r20,r21,zero
 8005e50:	800b883a 	mov	r5,r16
 8005e54:	d8c00115 	stw	r3,4(sp)
 8005e58:	94000504 	addi	r16,r18,20
 8005e5c:	a000021e 	bne	r20,zero,8005e68 <__d2b+0x80>
 8005e60:	18c00434 	orhi	r3,r3,16
 8005e64:	d8c00115 	stw	r3,4(sp)
 8005e68:	28002726 	beq	r5,zero,8005f08 <__d2b+0x120>
 8005e6c:	d809883a 	mov	r4,sp
 8005e70:	d9400015 	stw	r5,0(sp)
 8005e74:	80058440 	call	8005844 <__lo0bits>
 8005e78:	100d883a 	mov	r6,r2
 8005e7c:	10003526 	beq	r2,zero,8005f54 <__d2b+0x16c>
 8005e80:	d8c00117 	ldw	r3,4(sp)
 8005e84:	00800804 	movi	r2,32
 8005e88:	1185c83a 	sub	r2,r2,r6
 8005e8c:	d9000017 	ldw	r4,0(sp)
 8005e90:	1886983a 	sll	r3,r3,r2
 8005e94:	1906b03a 	or	r3,r3,r4
 8005e98:	90c00515 	stw	r3,20(r18)
 8005e9c:	d8c00117 	ldw	r3,4(sp)
 8005ea0:	1986d83a 	srl	r3,r3,r6
 8005ea4:	d8c00115 	stw	r3,4(sp)
 8005ea8:	180b003a 	cmpeq	r5,r3,zero
 8005eac:	00800084 	movi	r2,2
 8005eb0:	114bc83a 	sub	r5,r2,r5
 8005eb4:	80c00115 	stw	r3,4(r16)
 8005eb8:	91400415 	stw	r5,16(r18)
 8005ebc:	a0001a1e 	bne	r20,zero,8005f28 <__d2b+0x140>
 8005ec0:	3545883a 	add	r2,r6,r21
 8005ec4:	10bef344 	addi	r2,r2,-1075
 8005ec8:	00c00d44 	movi	r3,53
 8005ecc:	b0800015 	stw	r2,0(r22)
 8005ed0:	1987c83a 	sub	r3,r3,r6
 8005ed4:	b8c00015 	stw	r3,0(r23)
 8005ed8:	9005883a 	mov	r2,r18
 8005edc:	dfc00a17 	ldw	ra,40(sp)
 8005ee0:	ddc00917 	ldw	r23,36(sp)
 8005ee4:	dd800817 	ldw	r22,32(sp)
 8005ee8:	dd400717 	ldw	r21,28(sp)
 8005eec:	dd000617 	ldw	r20,24(sp)
 8005ef0:	dcc00517 	ldw	r19,20(sp)
 8005ef4:	dc800417 	ldw	r18,16(sp)
 8005ef8:	dc400317 	ldw	r17,12(sp)
 8005efc:	dc000217 	ldw	r16,8(sp)
 8005f00:	dec00b04 	addi	sp,sp,44
 8005f04:	f800283a 	ret
 8005f08:	d9000104 	addi	r4,sp,4
 8005f0c:	80058440 	call	8005844 <__lo0bits>
 8005f10:	11800804 	addi	r6,r2,32
 8005f14:	d8800117 	ldw	r2,4(sp)
 8005f18:	94c00415 	stw	r19,16(r18)
 8005f1c:	980b883a 	mov	r5,r19
 8005f20:	90800515 	stw	r2,20(r18)
 8005f24:	a03fe626 	beq	r20,zero,8005ec0 <__d2b+0xd8>
 8005f28:	2945883a 	add	r2,r5,r5
 8005f2c:	1085883a 	add	r2,r2,r2
 8005f30:	1405883a 	add	r2,r2,r16
 8005f34:	113fff17 	ldw	r4,-4(r2)
 8005f38:	30fef384 	addi	r3,r6,-1074
 8005f3c:	2820917a 	slli	r16,r5,5
 8005f40:	b0c00015 	stw	r3,0(r22)
 8005f44:	80057d40 	call	80057d4 <__hi0bits>
 8005f48:	80a1c83a 	sub	r16,r16,r2
 8005f4c:	bc000015 	stw	r16,0(r23)
 8005f50:	003fe106 	br	8005ed8 <__d2b+0xf0>
 8005f54:	d8800017 	ldw	r2,0(sp)
 8005f58:	90800515 	stw	r2,20(r18)
 8005f5c:	d8c00117 	ldw	r3,4(sp)
 8005f60:	003fd106 	br	8005ea8 <__d2b+0xc0>

08005f64 <__mdiff>:
 8005f64:	defffb04 	addi	sp,sp,-20
 8005f68:	dc000015 	stw	r16,0(sp)
 8005f6c:	2821883a 	mov	r16,r5
 8005f70:	dc800215 	stw	r18,8(sp)
 8005f74:	300b883a 	mov	r5,r6
 8005f78:	2025883a 	mov	r18,r4
 8005f7c:	8009883a 	mov	r4,r16
 8005f80:	dc400115 	stw	r17,4(sp)
 8005f84:	dfc00415 	stw	ra,16(sp)
 8005f88:	dcc00315 	stw	r19,12(sp)
 8005f8c:	3023883a 	mov	r17,r6
 8005f90:	80059080 	call	8005908 <__mcmp>
 8005f94:	10004226 	beq	r2,zero,80060a0 <__mdiff+0x13c>
 8005f98:	10005016 	blt	r2,zero,80060dc <__mdiff+0x178>
 8005f9c:	0027883a 	mov	r19,zero
 8005fa0:	81400117 	ldw	r5,4(r16)
 8005fa4:	9009883a 	mov	r4,r18
 8005fa8:	8005d2c0 	call	8005d2c <_Balloc>
 8005fac:	1019883a 	mov	r12,r2
 8005fb0:	82800417 	ldw	r10,16(r16)
 8005fb4:	88800417 	ldw	r2,16(r17)
 8005fb8:	81800504 	addi	r6,r16,20
 8005fbc:	5287883a 	add	r3,r10,r10
 8005fc0:	1085883a 	add	r2,r2,r2
 8005fc4:	18c7883a 	add	r3,r3,r3
 8005fc8:	1085883a 	add	r2,r2,r2
 8005fcc:	8a000504 	addi	r8,r17,20
 8005fd0:	64c00315 	stw	r19,12(r12)
 8005fd4:	30db883a 	add	r13,r6,r3
 8005fd8:	4097883a 	add	r11,r8,r2
 8005fdc:	61c00504 	addi	r7,r12,20
 8005fe0:	0013883a 	mov	r9,zero
 8005fe4:	31000017 	ldw	r4,0(r6)
 8005fe8:	41400017 	ldw	r5,0(r8)
 8005fec:	42000104 	addi	r8,r8,4
 8005ff0:	20bfffcc 	andi	r2,r4,65535
 8005ff4:	28ffffcc 	andi	r3,r5,65535
 8005ff8:	10c5c83a 	sub	r2,r2,r3
 8005ffc:	1245883a 	add	r2,r2,r9
 8006000:	2008d43a 	srli	r4,r4,16
 8006004:	280ad43a 	srli	r5,r5,16
 8006008:	1007d43a 	srai	r3,r2,16
 800600c:	3880000d 	sth	r2,0(r7)
 8006010:	2149c83a 	sub	r4,r4,r5
 8006014:	20c9883a 	add	r4,r4,r3
 8006018:	3900008d 	sth	r4,2(r7)
 800601c:	31800104 	addi	r6,r6,4
 8006020:	39c00104 	addi	r7,r7,4
 8006024:	2013d43a 	srai	r9,r4,16
 8006028:	42ffee36 	bltu	r8,r11,8005fe4 <__mdiff+0x80>
 800602c:	33400c2e 	bgeu	r6,r13,8006060 <__mdiff+0xfc>
 8006030:	30800017 	ldw	r2,0(r6)
 8006034:	31800104 	addi	r6,r6,4
 8006038:	10ffffcc 	andi	r3,r2,65535
 800603c:	1a47883a 	add	r3,r3,r9
 8006040:	1004d43a 	srli	r2,r2,16
 8006044:	1809d43a 	srai	r4,r3,16
 8006048:	38c0000d 	sth	r3,0(r7)
 800604c:	1105883a 	add	r2,r2,r4
 8006050:	3880008d 	sth	r2,2(r7)
 8006054:	1013d43a 	srai	r9,r2,16
 8006058:	39c00104 	addi	r7,r7,4
 800605c:	337ff436 	bltu	r6,r13,8006030 <__mdiff+0xcc>
 8006060:	38bfff17 	ldw	r2,-4(r7)
 8006064:	38ffff04 	addi	r3,r7,-4
 8006068:	1000041e 	bne	r2,zero,800607c <__mdiff+0x118>
 800606c:	18ffff04 	addi	r3,r3,-4
 8006070:	18800017 	ldw	r2,0(r3)
 8006074:	52bfffc4 	addi	r10,r10,-1
 8006078:	103ffc26 	beq	r2,zero,800606c <__mdiff+0x108>
 800607c:	6005883a 	mov	r2,r12
 8006080:	62800415 	stw	r10,16(r12)
 8006084:	dfc00417 	ldw	ra,16(sp)
 8006088:	dcc00317 	ldw	r19,12(sp)
 800608c:	dc800217 	ldw	r18,8(sp)
 8006090:	dc400117 	ldw	r17,4(sp)
 8006094:	dc000017 	ldw	r16,0(sp)
 8006098:	dec00504 	addi	sp,sp,20
 800609c:	f800283a 	ret
 80060a0:	9009883a 	mov	r4,r18
 80060a4:	000b883a 	mov	r5,zero
 80060a8:	8005d2c0 	call	8005d2c <_Balloc>
 80060ac:	1019883a 	mov	r12,r2
 80060b0:	00800044 	movi	r2,1
 80060b4:	60800415 	stw	r2,16(r12)
 80060b8:	6005883a 	mov	r2,r12
 80060bc:	60000515 	stw	zero,20(r12)
 80060c0:	dfc00417 	ldw	ra,16(sp)
 80060c4:	dcc00317 	ldw	r19,12(sp)
 80060c8:	dc800217 	ldw	r18,8(sp)
 80060cc:	dc400117 	ldw	r17,4(sp)
 80060d0:	dc000017 	ldw	r16,0(sp)
 80060d4:	dec00504 	addi	sp,sp,20
 80060d8:	f800283a 	ret
 80060dc:	880d883a 	mov	r6,r17
 80060e0:	04c00044 	movi	r19,1
 80060e4:	8023883a 	mov	r17,r16
 80060e8:	3021883a 	mov	r16,r6
 80060ec:	003fac06 	br	8005fa0 <__mdiff+0x3c>

080060f0 <__lshift>:
 80060f0:	defff904 	addi	sp,sp,-28
 80060f4:	28800417 	ldw	r2,16(r5)
 80060f8:	dc000015 	stw	r16,0(sp)
 80060fc:	3021d17a 	srai	r16,r6,5
 8006100:	28c00217 	ldw	r3,8(r5)
 8006104:	10800044 	addi	r2,r2,1
 8006108:	dc400115 	stw	r17,4(sp)
 800610c:	80a3883a 	add	r17,r16,r2
 8006110:	dd400515 	stw	r21,20(sp)
 8006114:	dd000415 	stw	r20,16(sp)
 8006118:	dc800215 	stw	r18,8(sp)
 800611c:	dfc00615 	stw	ra,24(sp)
 8006120:	2825883a 	mov	r18,r5
 8006124:	dcc00315 	stw	r19,12(sp)
 8006128:	3029883a 	mov	r20,r6
 800612c:	202b883a 	mov	r21,r4
 8006130:	29400117 	ldw	r5,4(r5)
 8006134:	1c40030e 	bge	r3,r17,8006144 <__lshift+0x54>
 8006138:	18c7883a 	add	r3,r3,r3
 800613c:	29400044 	addi	r5,r5,1
 8006140:	1c7ffd16 	blt	r3,r17,8006138 <__lshift+0x48>
 8006144:	a809883a 	mov	r4,r21
 8006148:	8005d2c0 	call	8005d2c <_Balloc>
 800614c:	1027883a 	mov	r19,r2
 8006150:	11400504 	addi	r5,r2,20
 8006154:	0400090e 	bge	zero,r16,800617c <__lshift+0x8c>
 8006158:	2805883a 	mov	r2,r5
 800615c:	0007883a 	mov	r3,zero
 8006160:	18c00044 	addi	r3,r3,1
 8006164:	10000015 	stw	zero,0(r2)
 8006168:	10800104 	addi	r2,r2,4
 800616c:	80fffc1e 	bne	r16,r3,8006160 <__lshift+0x70>
 8006170:	8405883a 	add	r2,r16,r16
 8006174:	1085883a 	add	r2,r2,r2
 8006178:	288b883a 	add	r5,r5,r2
 800617c:	90800417 	ldw	r2,16(r18)
 8006180:	91000504 	addi	r4,r18,20
 8006184:	a18007cc 	andi	r6,r20,31
 8006188:	1085883a 	add	r2,r2,r2
 800618c:	1085883a 	add	r2,r2,r2
 8006190:	208f883a 	add	r7,r4,r2
 8006194:	30001e26 	beq	r6,zero,8006210 <__lshift+0x120>
 8006198:	00800804 	movi	r2,32
 800619c:	1191c83a 	sub	r8,r2,r6
 80061a0:	0007883a 	mov	r3,zero
 80061a4:	20800017 	ldw	r2,0(r4)
 80061a8:	1184983a 	sll	r2,r2,r6
 80061ac:	1884b03a 	or	r2,r3,r2
 80061b0:	28800015 	stw	r2,0(r5)
 80061b4:	20c00017 	ldw	r3,0(r4)
 80061b8:	21000104 	addi	r4,r4,4
 80061bc:	29400104 	addi	r5,r5,4
 80061c0:	1a06d83a 	srl	r3,r3,r8
 80061c4:	21fff736 	bltu	r4,r7,80061a4 <__lshift+0xb4>
 80061c8:	28c00015 	stw	r3,0(r5)
 80061cc:	18000126 	beq	r3,zero,80061d4 <__lshift+0xe4>
 80061d0:	8c400044 	addi	r17,r17,1
 80061d4:	88bfffc4 	addi	r2,r17,-1
 80061d8:	98800415 	stw	r2,16(r19)
 80061dc:	a809883a 	mov	r4,r21
 80061e0:	900b883a 	mov	r5,r18
 80061e4:	80057ac0 	call	80057ac <_Bfree>
 80061e8:	9805883a 	mov	r2,r19
 80061ec:	dfc00617 	ldw	ra,24(sp)
 80061f0:	dd400517 	ldw	r21,20(sp)
 80061f4:	dd000417 	ldw	r20,16(sp)
 80061f8:	dcc00317 	ldw	r19,12(sp)
 80061fc:	dc800217 	ldw	r18,8(sp)
 8006200:	dc400117 	ldw	r17,4(sp)
 8006204:	dc000017 	ldw	r16,0(sp)
 8006208:	dec00704 	addi	sp,sp,28
 800620c:	f800283a 	ret
 8006210:	20800017 	ldw	r2,0(r4)
 8006214:	21000104 	addi	r4,r4,4
 8006218:	28800015 	stw	r2,0(r5)
 800621c:	29400104 	addi	r5,r5,4
 8006220:	21ffec2e 	bgeu	r4,r7,80061d4 <__lshift+0xe4>
 8006224:	20800017 	ldw	r2,0(r4)
 8006228:	21000104 	addi	r4,r4,4
 800622c:	28800015 	stw	r2,0(r5)
 8006230:	29400104 	addi	r5,r5,4
 8006234:	21fff636 	bltu	r4,r7,8006210 <__lshift+0x120>
 8006238:	003fe606 	br	80061d4 <__lshift+0xe4>

0800623c <__multiply>:
 800623c:	defff004 	addi	sp,sp,-64
 8006240:	dc800815 	stw	r18,32(sp)
 8006244:	dc400715 	stw	r17,28(sp)
 8006248:	2c800417 	ldw	r18,16(r5)
 800624c:	34400417 	ldw	r17,16(r6)
 8006250:	dcc00915 	stw	r19,36(sp)
 8006254:	dc000615 	stw	r16,24(sp)
 8006258:	dfc00f15 	stw	ra,60(sp)
 800625c:	df000e15 	stw	fp,56(sp)
 8006260:	ddc00d15 	stw	r23,52(sp)
 8006264:	dd800c15 	stw	r22,48(sp)
 8006268:	dd400b15 	stw	r21,44(sp)
 800626c:	dd000a15 	stw	r20,40(sp)
 8006270:	2821883a 	mov	r16,r5
 8006274:	3027883a 	mov	r19,r6
 8006278:	9440040e 	bge	r18,r17,800628c <__multiply+0x50>
 800627c:	8825883a 	mov	r18,r17
 8006280:	2c400417 	ldw	r17,16(r5)
 8006284:	2827883a 	mov	r19,r5
 8006288:	3021883a 	mov	r16,r6
 800628c:	80800217 	ldw	r2,8(r16)
 8006290:	9447883a 	add	r3,r18,r17
 8006294:	d8c00415 	stw	r3,16(sp)
 8006298:	81400117 	ldw	r5,4(r16)
 800629c:	10c0010e 	bge	r2,r3,80062a4 <__multiply+0x68>
 80062a0:	29400044 	addi	r5,r5,1
 80062a4:	8005d2c0 	call	8005d2c <_Balloc>
 80062a8:	d8800515 	stw	r2,20(sp)
 80062ac:	d9000417 	ldw	r4,16(sp)
 80062b0:	d8c00517 	ldw	r3,20(sp)
 80062b4:	2105883a 	add	r2,r4,r4
 80062b8:	1085883a 	add	r2,r2,r2
 80062bc:	19000504 	addi	r4,r3,20
 80062c0:	2085883a 	add	r2,r4,r2
 80062c4:	d8800315 	stw	r2,12(sp)
 80062c8:	2080052e 	bgeu	r4,r2,80062e0 <__multiply+0xa4>
 80062cc:	2005883a 	mov	r2,r4
 80062d0:	d8c00317 	ldw	r3,12(sp)
 80062d4:	10000015 	stw	zero,0(r2)
 80062d8:	10800104 	addi	r2,r2,4
 80062dc:	10fffc36 	bltu	r2,r3,80062d0 <__multiply+0x94>
 80062e0:	8c45883a 	add	r2,r17,r17
 80062e4:	9487883a 	add	r3,r18,r18
 80062e8:	9dc00504 	addi	r23,r19,20
 80062ec:	1085883a 	add	r2,r2,r2
 80062f0:	84000504 	addi	r16,r16,20
 80062f4:	18c7883a 	add	r3,r3,r3
 80062f8:	b885883a 	add	r2,r23,r2
 80062fc:	dc000015 	stw	r16,0(sp)
 8006300:	d8800215 	stw	r2,8(sp)
 8006304:	80f9883a 	add	fp,r16,r3
 8006308:	b880432e 	bgeu	r23,r2,8006418 <__multiply+0x1dc>
 800630c:	d9000115 	stw	r4,4(sp)
 8006310:	b9000017 	ldw	r4,0(r23)
 8006314:	253fffcc 	andi	r20,r4,65535
 8006318:	a0001a26 	beq	r20,zero,8006384 <__multiply+0x148>
 800631c:	dcc00017 	ldw	r19,0(sp)
 8006320:	dc800117 	ldw	r18,4(sp)
 8006324:	002b883a 	mov	r21,zero
 8006328:	9c400017 	ldw	r17,0(r19)
 800632c:	94000017 	ldw	r16,0(r18)
 8006330:	a009883a 	mov	r4,r20
 8006334:	897fffcc 	andi	r5,r17,65535
 8006338:	80095740 	call	8009574 <__mulsi3>
 800633c:	880ad43a 	srli	r5,r17,16
 8006340:	80ffffcc 	andi	r3,r16,65535
 8006344:	a8c7883a 	add	r3,r21,r3
 8006348:	a009883a 	mov	r4,r20
 800634c:	10e3883a 	add	r17,r2,r3
 8006350:	8020d43a 	srli	r16,r16,16
 8006354:	80095740 	call	8009574 <__mulsi3>
 8006358:	8806d43a 	srli	r3,r17,16
 800635c:	1405883a 	add	r2,r2,r16
 8006360:	9cc00104 	addi	r19,r19,4
 8006364:	1887883a 	add	r3,r3,r2
 8006368:	90c0008d 	sth	r3,2(r18)
 800636c:	9440000d 	sth	r17,0(r18)
 8006370:	182ad43a 	srli	r21,r3,16
 8006374:	94800104 	addi	r18,r18,4
 8006378:	9f3feb36 	bltu	r19,fp,8006328 <__multiply+0xec>
 800637c:	95400015 	stw	r21,0(r18)
 8006380:	b9000017 	ldw	r4,0(r23)
 8006384:	202ad43a 	srli	r21,r4,16
 8006388:	a8001c26 	beq	r21,zero,80063fc <__multiply+0x1c0>
 800638c:	d9000117 	ldw	r4,4(sp)
 8006390:	dd000017 	ldw	r20,0(sp)
 8006394:	002d883a 	mov	r22,zero
 8006398:	24c00017 	ldw	r19,0(r4)
 800639c:	2025883a 	mov	r18,r4
 80063a0:	9823883a 	mov	r17,r19
 80063a4:	a4000017 	ldw	r16,0(r20)
 80063a8:	a809883a 	mov	r4,r21
 80063ac:	a5000104 	addi	r20,r20,4
 80063b0:	817fffcc 	andi	r5,r16,65535
 80063b4:	80095740 	call	8009574 <__mulsi3>
 80063b8:	8806d43a 	srli	r3,r17,16
 80063bc:	800ad43a 	srli	r5,r16,16
 80063c0:	94c0000d 	sth	r19,0(r18)
 80063c4:	b0c7883a 	add	r3,r22,r3
 80063c8:	10e1883a 	add	r16,r2,r3
 80063cc:	9400008d 	sth	r16,2(r18)
 80063d0:	a809883a 	mov	r4,r21
 80063d4:	94800104 	addi	r18,r18,4
 80063d8:	80095740 	call	8009574 <__mulsi3>
 80063dc:	94400017 	ldw	r17,0(r18)
 80063e0:	8020d43a 	srli	r16,r16,16
 80063e4:	88ffffcc 	andi	r3,r17,65535
 80063e8:	10c5883a 	add	r2,r2,r3
 80063ec:	80a7883a 	add	r19,r16,r2
 80063f0:	982cd43a 	srli	r22,r19,16
 80063f4:	a73feb36 	bltu	r20,fp,80063a4 <__multiply+0x168>
 80063f8:	94c00015 	stw	r19,0(r18)
 80063fc:	d8800217 	ldw	r2,8(sp)
 8006400:	bdc00104 	addi	r23,r23,4
 8006404:	b880042e 	bgeu	r23,r2,8006418 <__multiply+0x1dc>
 8006408:	d8c00117 	ldw	r3,4(sp)
 800640c:	18c00104 	addi	r3,r3,4
 8006410:	d8c00115 	stw	r3,4(sp)
 8006414:	003fbe06 	br	8006310 <__multiply+0xd4>
 8006418:	d9000417 	ldw	r4,16(sp)
 800641c:	01000c0e 	bge	zero,r4,8006450 <__multiply+0x214>
 8006420:	d8c00317 	ldw	r3,12(sp)
 8006424:	18bfff17 	ldw	r2,-4(r3)
 8006428:	18ffff04 	addi	r3,r3,-4
 800642c:	10000326 	beq	r2,zero,800643c <__multiply+0x200>
 8006430:	00000706 	br	8006450 <__multiply+0x214>
 8006434:	18800017 	ldw	r2,0(r3)
 8006438:	1000051e 	bne	r2,zero,8006450 <__multiply+0x214>
 800643c:	d9000417 	ldw	r4,16(sp)
 8006440:	18ffff04 	addi	r3,r3,-4
 8006444:	213fffc4 	addi	r4,r4,-1
 8006448:	d9000415 	stw	r4,16(sp)
 800644c:	203ff91e 	bne	r4,zero,8006434 <__multiply+0x1f8>
 8006450:	d8800417 	ldw	r2,16(sp)
 8006454:	d8c00517 	ldw	r3,20(sp)
 8006458:	18800415 	stw	r2,16(r3)
 800645c:	1805883a 	mov	r2,r3
 8006460:	dfc00f17 	ldw	ra,60(sp)
 8006464:	df000e17 	ldw	fp,56(sp)
 8006468:	ddc00d17 	ldw	r23,52(sp)
 800646c:	dd800c17 	ldw	r22,48(sp)
 8006470:	dd400b17 	ldw	r21,44(sp)
 8006474:	dd000a17 	ldw	r20,40(sp)
 8006478:	dcc00917 	ldw	r19,36(sp)
 800647c:	dc800817 	ldw	r18,32(sp)
 8006480:	dc400717 	ldw	r17,28(sp)
 8006484:	dc000617 	ldw	r16,24(sp)
 8006488:	dec01004 	addi	sp,sp,64
 800648c:	f800283a 	ret

08006490 <__i2b>:
 8006490:	defffd04 	addi	sp,sp,-12
 8006494:	dc000015 	stw	r16,0(sp)
 8006498:	04000044 	movi	r16,1
 800649c:	dc800115 	stw	r18,4(sp)
 80064a0:	2825883a 	mov	r18,r5
 80064a4:	800b883a 	mov	r5,r16
 80064a8:	dfc00215 	stw	ra,8(sp)
 80064ac:	8005d2c0 	call	8005d2c <_Balloc>
 80064b0:	14000415 	stw	r16,16(r2)
 80064b4:	14800515 	stw	r18,20(r2)
 80064b8:	dfc00217 	ldw	ra,8(sp)
 80064bc:	dc800117 	ldw	r18,4(sp)
 80064c0:	dc000017 	ldw	r16,0(sp)
 80064c4:	dec00304 	addi	sp,sp,12
 80064c8:	f800283a 	ret

080064cc <__multadd>:
 80064cc:	defff604 	addi	sp,sp,-40
 80064d0:	dd800615 	stw	r22,24(sp)
 80064d4:	2d800417 	ldw	r22,16(r5)
 80064d8:	df000815 	stw	fp,32(sp)
 80064dc:	ddc00715 	stw	r23,28(sp)
 80064e0:	dd400515 	stw	r21,20(sp)
 80064e4:	dd000415 	stw	r20,16(sp)
 80064e8:	dcc00315 	stw	r19,12(sp)
 80064ec:	dc800215 	stw	r18,8(sp)
 80064f0:	dfc00915 	stw	ra,36(sp)
 80064f4:	dc400115 	stw	r17,4(sp)
 80064f8:	dc000015 	stw	r16,0(sp)
 80064fc:	282f883a 	mov	r23,r5
 8006500:	2039883a 	mov	fp,r4
 8006504:	302b883a 	mov	r21,r6
 8006508:	3829883a 	mov	r20,r7
 800650c:	2c800504 	addi	r18,r5,20
 8006510:	0027883a 	mov	r19,zero
 8006514:	94400017 	ldw	r17,0(r18)
 8006518:	a80b883a 	mov	r5,r21
 800651c:	9cc00044 	addi	r19,r19,1
 8006520:	893fffcc 	andi	r4,r17,65535
 8006524:	80095740 	call	8009574 <__mulsi3>
 8006528:	8808d43a 	srli	r4,r17,16
 800652c:	1521883a 	add	r16,r2,r20
 8006530:	a80b883a 	mov	r5,r21
 8006534:	80095740 	call	8009574 <__mulsi3>
 8006538:	8008d43a 	srli	r4,r16,16
 800653c:	843fffcc 	andi	r16,r16,65535
 8006540:	1105883a 	add	r2,r2,r4
 8006544:	1006943a 	slli	r3,r2,16
 8006548:	1028d43a 	srli	r20,r2,16
 800654c:	1c07883a 	add	r3,r3,r16
 8006550:	90c00015 	stw	r3,0(r18)
 8006554:	94800104 	addi	r18,r18,4
 8006558:	9dbfee16 	blt	r19,r22,8006514 <__multadd+0x48>
 800655c:	a0000826 	beq	r20,zero,8006580 <__multadd+0xb4>
 8006560:	b8800217 	ldw	r2,8(r23)
 8006564:	b080130e 	bge	r22,r2,80065b4 <__multadd+0xe8>
 8006568:	b585883a 	add	r2,r22,r22
 800656c:	1085883a 	add	r2,r2,r2
 8006570:	15c5883a 	add	r2,r2,r23
 8006574:	b0c00044 	addi	r3,r22,1
 8006578:	15000515 	stw	r20,20(r2)
 800657c:	b8c00415 	stw	r3,16(r23)
 8006580:	b805883a 	mov	r2,r23
 8006584:	dfc00917 	ldw	ra,36(sp)
 8006588:	df000817 	ldw	fp,32(sp)
 800658c:	ddc00717 	ldw	r23,28(sp)
 8006590:	dd800617 	ldw	r22,24(sp)
 8006594:	dd400517 	ldw	r21,20(sp)
 8006598:	dd000417 	ldw	r20,16(sp)
 800659c:	dcc00317 	ldw	r19,12(sp)
 80065a0:	dc800217 	ldw	r18,8(sp)
 80065a4:	dc400117 	ldw	r17,4(sp)
 80065a8:	dc000017 	ldw	r16,0(sp)
 80065ac:	dec00a04 	addi	sp,sp,40
 80065b0:	f800283a 	ret
 80065b4:	b9400117 	ldw	r5,4(r23)
 80065b8:	e009883a 	mov	r4,fp
 80065bc:	29400044 	addi	r5,r5,1
 80065c0:	8005d2c0 	call	8005d2c <_Balloc>
 80065c4:	b9800417 	ldw	r6,16(r23)
 80065c8:	b9400304 	addi	r5,r23,12
 80065cc:	11000304 	addi	r4,r2,12
 80065d0:	318d883a 	add	r6,r6,r6
 80065d4:	318d883a 	add	r6,r6,r6
 80065d8:	31800204 	addi	r6,r6,8
 80065dc:	1023883a 	mov	r17,r2
 80065e0:	80055940 	call	8005594 <memcpy>
 80065e4:	b80b883a 	mov	r5,r23
 80065e8:	e009883a 	mov	r4,fp
 80065ec:	80057ac0 	call	80057ac <_Bfree>
 80065f0:	882f883a 	mov	r23,r17
 80065f4:	003fdc06 	br	8006568 <__multadd+0x9c>

080065f8 <__pow5mult>:
 80065f8:	defffa04 	addi	sp,sp,-24
 80065fc:	308000cc 	andi	r2,r6,3
 8006600:	dd000415 	stw	r20,16(sp)
 8006604:	dcc00315 	stw	r19,12(sp)
 8006608:	dc000015 	stw	r16,0(sp)
 800660c:	dfc00515 	stw	ra,20(sp)
 8006610:	dc800215 	stw	r18,8(sp)
 8006614:	dc400115 	stw	r17,4(sp)
 8006618:	3021883a 	mov	r16,r6
 800661c:	2027883a 	mov	r19,r4
 8006620:	2829883a 	mov	r20,r5
 8006624:	10002b1e 	bne	r2,zero,80066d4 <__pow5mult+0xdc>
 8006628:	8025d0ba 	srai	r18,r16,2
 800662c:	90001b26 	beq	r18,zero,800669c <__pow5mult+0xa4>
 8006630:	9c001217 	ldw	r16,72(r19)
 8006634:	8000081e 	bne	r16,zero,8006658 <__pow5mult+0x60>
 8006638:	00003006 	br	80066fc <__pow5mult+0x104>
 800663c:	800b883a 	mov	r5,r16
 8006640:	800d883a 	mov	r6,r16
 8006644:	9809883a 	mov	r4,r19
 8006648:	90001426 	beq	r18,zero,800669c <__pow5mult+0xa4>
 800664c:	80800017 	ldw	r2,0(r16)
 8006650:	10001b26 	beq	r2,zero,80066c0 <__pow5mult+0xc8>
 8006654:	1021883a 	mov	r16,r2
 8006658:	9080004c 	andi	r2,r18,1
 800665c:	1005003a 	cmpeq	r2,r2,zero
 8006660:	9025d07a 	srai	r18,r18,1
 8006664:	800d883a 	mov	r6,r16
 8006668:	9809883a 	mov	r4,r19
 800666c:	a00b883a 	mov	r5,r20
 8006670:	103ff21e 	bne	r2,zero,800663c <__pow5mult+0x44>
 8006674:	800623c0 	call	800623c <__multiply>
 8006678:	a00b883a 	mov	r5,r20
 800667c:	9809883a 	mov	r4,r19
 8006680:	1023883a 	mov	r17,r2
 8006684:	80057ac0 	call	80057ac <_Bfree>
 8006688:	8829883a 	mov	r20,r17
 800668c:	800b883a 	mov	r5,r16
 8006690:	800d883a 	mov	r6,r16
 8006694:	9809883a 	mov	r4,r19
 8006698:	903fec1e 	bne	r18,zero,800664c <__pow5mult+0x54>
 800669c:	a005883a 	mov	r2,r20
 80066a0:	dfc00517 	ldw	ra,20(sp)
 80066a4:	dd000417 	ldw	r20,16(sp)
 80066a8:	dcc00317 	ldw	r19,12(sp)
 80066ac:	dc800217 	ldw	r18,8(sp)
 80066b0:	dc400117 	ldw	r17,4(sp)
 80066b4:	dc000017 	ldw	r16,0(sp)
 80066b8:	dec00604 	addi	sp,sp,24
 80066bc:	f800283a 	ret
 80066c0:	800623c0 	call	800623c <__multiply>
 80066c4:	80800015 	stw	r2,0(r16)
 80066c8:	1021883a 	mov	r16,r2
 80066cc:	10000015 	stw	zero,0(r2)
 80066d0:	003fe106 	br	8006658 <__pow5mult+0x60>
 80066d4:	1085883a 	add	r2,r2,r2
 80066d8:	00c20074 	movhi	r3,2049
 80066dc:	18f2f904 	addi	r3,r3,-13340
 80066e0:	1085883a 	add	r2,r2,r2
 80066e4:	10c5883a 	add	r2,r2,r3
 80066e8:	11bfff17 	ldw	r6,-4(r2)
 80066ec:	000f883a 	mov	r7,zero
 80066f0:	80064cc0 	call	80064cc <__multadd>
 80066f4:	1029883a 	mov	r20,r2
 80066f8:	003fcb06 	br	8006628 <__pow5mult+0x30>
 80066fc:	9809883a 	mov	r4,r19
 8006700:	01409c44 	movi	r5,625
 8006704:	80064900 	call	8006490 <__i2b>
 8006708:	98801215 	stw	r2,72(r19)
 800670c:	1021883a 	mov	r16,r2
 8006710:	10000015 	stw	zero,0(r2)
 8006714:	003fd006 	br	8006658 <__pow5mult+0x60>

08006718 <__s2b>:
 8006718:	defff904 	addi	sp,sp,-28
 800671c:	dcc00315 	stw	r19,12(sp)
 8006720:	dc800215 	stw	r18,8(sp)
 8006724:	2827883a 	mov	r19,r5
 8006728:	2025883a 	mov	r18,r4
 800672c:	01400244 	movi	r5,9
 8006730:	39000204 	addi	r4,r7,8
 8006734:	dd000415 	stw	r20,16(sp)
 8006738:	dc400115 	stw	r17,4(sp)
 800673c:	dfc00615 	stw	ra,24(sp)
 8006740:	dd400515 	stw	r21,20(sp)
 8006744:	dc000015 	stw	r16,0(sp)
 8006748:	3829883a 	mov	r20,r7
 800674c:	3023883a 	mov	r17,r6
 8006750:	80094a40 	call	80094a4 <__divsi3>
 8006754:	00c00044 	movi	r3,1
 8006758:	1880350e 	bge	r3,r2,8006830 <__s2b+0x118>
 800675c:	000b883a 	mov	r5,zero
 8006760:	18c7883a 	add	r3,r3,r3
 8006764:	29400044 	addi	r5,r5,1
 8006768:	18bffd16 	blt	r3,r2,8006760 <__s2b+0x48>
 800676c:	9009883a 	mov	r4,r18
 8006770:	8005d2c0 	call	8005d2c <_Balloc>
 8006774:	1011883a 	mov	r8,r2
 8006778:	d8800717 	ldw	r2,28(sp)
 800677c:	00c00044 	movi	r3,1
 8006780:	01800244 	movi	r6,9
 8006784:	40800515 	stw	r2,20(r8)
 8006788:	40c00415 	stw	r3,16(r8)
 800678c:	3440260e 	bge	r6,r17,8006828 <__s2b+0x110>
 8006790:	3021883a 	mov	r16,r6
 8006794:	99ab883a 	add	r21,r19,r6
 8006798:	9c05883a 	add	r2,r19,r16
 800679c:	11c00007 	ldb	r7,0(r2)
 80067a0:	400b883a 	mov	r5,r8
 80067a4:	9009883a 	mov	r4,r18
 80067a8:	39fff404 	addi	r7,r7,-48
 80067ac:	01800284 	movi	r6,10
 80067b0:	80064cc0 	call	80064cc <__multadd>
 80067b4:	84000044 	addi	r16,r16,1
 80067b8:	1011883a 	mov	r8,r2
 80067bc:	8c3ff61e 	bne	r17,r16,8006798 <__s2b+0x80>
 80067c0:	ac45883a 	add	r2,r21,r17
 80067c4:	117ffe04 	addi	r5,r2,-8
 80067c8:	880d883a 	mov	r6,r17
 80067cc:	35000c0e 	bge	r6,r20,8006800 <__s2b+0xe8>
 80067d0:	a185c83a 	sub	r2,r20,r6
 80067d4:	2821883a 	mov	r16,r5
 80067d8:	28a3883a 	add	r17,r5,r2
 80067dc:	81c00007 	ldb	r7,0(r16)
 80067e0:	400b883a 	mov	r5,r8
 80067e4:	9009883a 	mov	r4,r18
 80067e8:	39fff404 	addi	r7,r7,-48
 80067ec:	01800284 	movi	r6,10
 80067f0:	80064cc0 	call	80064cc <__multadd>
 80067f4:	84000044 	addi	r16,r16,1
 80067f8:	1011883a 	mov	r8,r2
 80067fc:	847ff71e 	bne	r16,r17,80067dc <__s2b+0xc4>
 8006800:	4005883a 	mov	r2,r8
 8006804:	dfc00617 	ldw	ra,24(sp)
 8006808:	dd400517 	ldw	r21,20(sp)
 800680c:	dd000417 	ldw	r20,16(sp)
 8006810:	dcc00317 	ldw	r19,12(sp)
 8006814:	dc800217 	ldw	r18,8(sp)
 8006818:	dc400117 	ldw	r17,4(sp)
 800681c:	dc000017 	ldw	r16,0(sp)
 8006820:	dec00704 	addi	sp,sp,28
 8006824:	f800283a 	ret
 8006828:	99400284 	addi	r5,r19,10
 800682c:	003fe706 	br	80067cc <__s2b+0xb4>
 8006830:	000b883a 	mov	r5,zero
 8006834:	003fcd06 	br	800676c <__s2b+0x54>

08006838 <_realloc_r>:
 8006838:	defff404 	addi	sp,sp,-48
 800683c:	dd800815 	stw	r22,32(sp)
 8006840:	dc800415 	stw	r18,16(sp)
 8006844:	dc400315 	stw	r17,12(sp)
 8006848:	dfc00b15 	stw	ra,44(sp)
 800684c:	df000a15 	stw	fp,40(sp)
 8006850:	ddc00915 	stw	r23,36(sp)
 8006854:	dd400715 	stw	r21,28(sp)
 8006858:	dd000615 	stw	r20,24(sp)
 800685c:	dcc00515 	stw	r19,20(sp)
 8006860:	dc000215 	stw	r16,8(sp)
 8006864:	2825883a 	mov	r18,r5
 8006868:	3023883a 	mov	r17,r6
 800686c:	202d883a 	mov	r22,r4
 8006870:	2800c926 	beq	r5,zero,8006b98 <_realloc_r+0x360>
 8006874:	800a2f80 	call	800a2f8 <__malloc_lock>
 8006878:	943ffe04 	addi	r16,r18,-8
 800687c:	88c002c4 	addi	r3,r17,11
 8006880:	00800584 	movi	r2,22
 8006884:	82000117 	ldw	r8,4(r16)
 8006888:	10c01b2e 	bgeu	r2,r3,80068f8 <_realloc_r+0xc0>
 800688c:	00bffe04 	movi	r2,-8
 8006890:	188e703a 	and	r7,r3,r2
 8006894:	3839883a 	mov	fp,r7
 8006898:	38001a16 	blt	r7,zero,8006904 <_realloc_r+0xcc>
 800689c:	e4401936 	bltu	fp,r17,8006904 <_realloc_r+0xcc>
 80068a0:	013fff04 	movi	r4,-4
 80068a4:	4126703a 	and	r19,r8,r4
 80068a8:	99c02616 	blt	r19,r7,8006944 <_realloc_r+0x10c>
 80068ac:	802b883a 	mov	r21,r16
 80068b0:	9829883a 	mov	r20,r19
 80068b4:	84000204 	addi	r16,r16,8
 80068b8:	a80f883a 	mov	r7,r21
 80068bc:	a70dc83a 	sub	r6,r20,fp
 80068c0:	008003c4 	movi	r2,15
 80068c4:	1180c136 	bltu	r2,r6,8006bcc <_realloc_r+0x394>
 80068c8:	38800117 	ldw	r2,4(r7)
 80068cc:	a549883a 	add	r4,r20,r21
 80068d0:	1080004c 	andi	r2,r2,1
 80068d4:	a084b03a 	or	r2,r20,r2
 80068d8:	38800115 	stw	r2,4(r7)
 80068dc:	20c00117 	ldw	r3,4(r4)
 80068e0:	18c00054 	ori	r3,r3,1
 80068e4:	20c00115 	stw	r3,4(r4)
 80068e8:	b009883a 	mov	r4,r22
 80068ec:	800a3180 	call	800a318 <__malloc_unlock>
 80068f0:	8023883a 	mov	r17,r16
 80068f4:	00000606 	br	8006910 <_realloc_r+0xd8>
 80068f8:	01c00404 	movi	r7,16
 80068fc:	3839883a 	mov	fp,r7
 8006900:	e47fe72e 	bgeu	fp,r17,80068a0 <_realloc_r+0x68>
 8006904:	00800304 	movi	r2,12
 8006908:	0023883a 	mov	r17,zero
 800690c:	b0800015 	stw	r2,0(r22)
 8006910:	8805883a 	mov	r2,r17
 8006914:	dfc00b17 	ldw	ra,44(sp)
 8006918:	df000a17 	ldw	fp,40(sp)
 800691c:	ddc00917 	ldw	r23,36(sp)
 8006920:	dd800817 	ldw	r22,32(sp)
 8006924:	dd400717 	ldw	r21,28(sp)
 8006928:	dd000617 	ldw	r20,24(sp)
 800692c:	dcc00517 	ldw	r19,20(sp)
 8006930:	dc800417 	ldw	r18,16(sp)
 8006934:	dc400317 	ldw	r17,12(sp)
 8006938:	dc000217 	ldw	r16,8(sp)
 800693c:	dec00c04 	addi	sp,sp,48
 8006940:	f800283a 	ret
 8006944:	00820074 	movhi	r2,2049
 8006948:	10b47304 	addi	r2,r2,-11828
 800694c:	12400217 	ldw	r9,8(r2)
 8006950:	84cd883a 	add	r6,r16,r19
 8006954:	802b883a 	mov	r21,r16
 8006958:	3240b926 	beq	r6,r9,8006c40 <_realloc_r+0x408>
 800695c:	31400117 	ldw	r5,4(r6)
 8006960:	00bfff84 	movi	r2,-2
 8006964:	2884703a 	and	r2,r5,r2
 8006968:	1185883a 	add	r2,r2,r6
 800696c:	10c00117 	ldw	r3,4(r2)
 8006970:	18c0004c 	andi	r3,r3,1
 8006974:	1807003a 	cmpeq	r3,r3,zero
 8006978:	1800a326 	beq	r3,zero,8006c08 <_realloc_r+0x3d0>
 800697c:	2908703a 	and	r4,r5,r4
 8006980:	9929883a 	add	r20,r19,r4
 8006984:	a1c0a30e 	bge	r20,r7,8006c14 <_realloc_r+0x3dc>
 8006988:	4080004c 	andi	r2,r8,1
 800698c:	1000551e 	bne	r2,zero,8006ae4 <_realloc_r+0x2ac>
 8006990:	80800017 	ldw	r2,0(r16)
 8006994:	80afc83a 	sub	r23,r16,r2
 8006998:	b8c00117 	ldw	r3,4(r23)
 800699c:	00bfff04 	movi	r2,-4
 80069a0:	1884703a 	and	r2,r3,r2
 80069a4:	30002e26 	beq	r6,zero,8006a60 <_realloc_r+0x228>
 80069a8:	3240b926 	beq	r6,r9,8006c90 <_realloc_r+0x458>
 80069ac:	98a9883a 	add	r20,r19,r2
 80069b0:	2509883a 	add	r4,r4,r20
 80069b4:	d9000015 	stw	r4,0(sp)
 80069b8:	21c02a16 	blt	r4,r7,8006a64 <_realloc_r+0x22c>
 80069bc:	30800317 	ldw	r2,12(r6)
 80069c0:	30c00217 	ldw	r3,8(r6)
 80069c4:	01400904 	movi	r5,36
 80069c8:	99bfff04 	addi	r6,r19,-4
 80069cc:	18800315 	stw	r2,12(r3)
 80069d0:	10c00215 	stw	r3,8(r2)
 80069d4:	b9000317 	ldw	r4,12(r23)
 80069d8:	b8800217 	ldw	r2,8(r23)
 80069dc:	b82b883a 	mov	r21,r23
 80069e0:	bc000204 	addi	r16,r23,8
 80069e4:	20800215 	stw	r2,8(r4)
 80069e8:	11000315 	stw	r4,12(r2)
 80069ec:	2980e436 	bltu	r5,r6,8006d80 <_realloc_r+0x548>
 80069f0:	008004c4 	movi	r2,19
 80069f4:	9009883a 	mov	r4,r18
 80069f8:	8011883a 	mov	r8,r16
 80069fc:	11800f2e 	bgeu	r2,r6,8006a3c <_realloc_r+0x204>
 8006a00:	90800017 	ldw	r2,0(r18)
 8006a04:	ba000404 	addi	r8,r23,16
 8006a08:	91000204 	addi	r4,r18,8
 8006a0c:	b8800215 	stw	r2,8(r23)
 8006a10:	90c00117 	ldw	r3,4(r18)
 8006a14:	008006c4 	movi	r2,27
 8006a18:	b8c00315 	stw	r3,12(r23)
 8006a1c:	1180072e 	bgeu	r2,r6,8006a3c <_realloc_r+0x204>
 8006a20:	90c00217 	ldw	r3,8(r18)
 8006a24:	ba000604 	addi	r8,r23,24
 8006a28:	91000404 	addi	r4,r18,16
 8006a2c:	b8c00415 	stw	r3,16(r23)
 8006a30:	90800317 	ldw	r2,12(r18)
 8006a34:	b8800515 	stw	r2,20(r23)
 8006a38:	3140e726 	beq	r6,r5,8006dd8 <_realloc_r+0x5a0>
 8006a3c:	20800017 	ldw	r2,0(r4)
 8006a40:	dd000017 	ldw	r20,0(sp)
 8006a44:	b80f883a 	mov	r7,r23
 8006a48:	40800015 	stw	r2,0(r8)
 8006a4c:	20c00117 	ldw	r3,4(r4)
 8006a50:	40c00115 	stw	r3,4(r8)
 8006a54:	20800217 	ldw	r2,8(r4)
 8006a58:	40800215 	stw	r2,8(r8)
 8006a5c:	003f9706 	br	80068bc <_realloc_r+0x84>
 8006a60:	98a9883a 	add	r20,r19,r2
 8006a64:	a1c01f16 	blt	r20,r7,8006ae4 <_realloc_r+0x2ac>
 8006a68:	b8c00317 	ldw	r3,12(r23)
 8006a6c:	b8800217 	ldw	r2,8(r23)
 8006a70:	99bfff04 	addi	r6,r19,-4
 8006a74:	01400904 	movi	r5,36
 8006a78:	b82b883a 	mov	r21,r23
 8006a7c:	18800215 	stw	r2,8(r3)
 8006a80:	10c00315 	stw	r3,12(r2)
 8006a84:	bc000204 	addi	r16,r23,8
 8006a88:	2980c336 	bltu	r5,r6,8006d98 <_realloc_r+0x560>
 8006a8c:	008004c4 	movi	r2,19
 8006a90:	9009883a 	mov	r4,r18
 8006a94:	8011883a 	mov	r8,r16
 8006a98:	11800f2e 	bgeu	r2,r6,8006ad8 <_realloc_r+0x2a0>
 8006a9c:	90800017 	ldw	r2,0(r18)
 8006aa0:	ba000404 	addi	r8,r23,16
 8006aa4:	91000204 	addi	r4,r18,8
 8006aa8:	b8800215 	stw	r2,8(r23)
 8006aac:	90c00117 	ldw	r3,4(r18)
 8006ab0:	008006c4 	movi	r2,27
 8006ab4:	b8c00315 	stw	r3,12(r23)
 8006ab8:	1180072e 	bgeu	r2,r6,8006ad8 <_realloc_r+0x2a0>
 8006abc:	90c00217 	ldw	r3,8(r18)
 8006ac0:	ba000604 	addi	r8,r23,24
 8006ac4:	91000404 	addi	r4,r18,16
 8006ac8:	b8c00415 	stw	r3,16(r23)
 8006acc:	90800317 	ldw	r2,12(r18)
 8006ad0:	b8800515 	stw	r2,20(r23)
 8006ad4:	3140c726 	beq	r6,r5,8006df4 <_realloc_r+0x5bc>
 8006ad8:	20800017 	ldw	r2,0(r4)
 8006adc:	b80f883a 	mov	r7,r23
 8006ae0:	003fd906 	br	8006a48 <_realloc_r+0x210>
 8006ae4:	880b883a 	mov	r5,r17
 8006ae8:	b009883a 	mov	r4,r22
 8006aec:	8004d700 	call	8004d70 <_malloc_r>
 8006af0:	1023883a 	mov	r17,r2
 8006af4:	10002526 	beq	r2,zero,8006b8c <_realloc_r+0x354>
 8006af8:	80800117 	ldw	r2,4(r16)
 8006afc:	00ffff84 	movi	r3,-2
 8006b00:	893ffe04 	addi	r4,r17,-8
 8006b04:	10c4703a 	and	r2,r2,r3
 8006b08:	8085883a 	add	r2,r16,r2
 8006b0c:	20809526 	beq	r4,r2,8006d64 <_realloc_r+0x52c>
 8006b10:	99bfff04 	addi	r6,r19,-4
 8006b14:	01c00904 	movi	r7,36
 8006b18:	39804536 	bltu	r7,r6,8006c30 <_realloc_r+0x3f8>
 8006b1c:	008004c4 	movi	r2,19
 8006b20:	9009883a 	mov	r4,r18
 8006b24:	880b883a 	mov	r5,r17
 8006b28:	11800f2e 	bgeu	r2,r6,8006b68 <_realloc_r+0x330>
 8006b2c:	90800017 	ldw	r2,0(r18)
 8006b30:	89400204 	addi	r5,r17,8
 8006b34:	91000204 	addi	r4,r18,8
 8006b38:	88800015 	stw	r2,0(r17)
 8006b3c:	90c00117 	ldw	r3,4(r18)
 8006b40:	008006c4 	movi	r2,27
 8006b44:	88c00115 	stw	r3,4(r17)
 8006b48:	1180072e 	bgeu	r2,r6,8006b68 <_realloc_r+0x330>
 8006b4c:	90c00217 	ldw	r3,8(r18)
 8006b50:	89400404 	addi	r5,r17,16
 8006b54:	91000404 	addi	r4,r18,16
 8006b58:	88c00215 	stw	r3,8(r17)
 8006b5c:	90800317 	ldw	r2,12(r18)
 8006b60:	88800315 	stw	r2,12(r17)
 8006b64:	31c09126 	beq	r6,r7,8006dac <_realloc_r+0x574>
 8006b68:	20800017 	ldw	r2,0(r4)
 8006b6c:	28800015 	stw	r2,0(r5)
 8006b70:	20c00117 	ldw	r3,4(r4)
 8006b74:	28c00115 	stw	r3,4(r5)
 8006b78:	20800217 	ldw	r2,8(r4)
 8006b7c:	28800215 	stw	r2,8(r5)
 8006b80:	900b883a 	mov	r5,r18
 8006b84:	b009883a 	mov	r4,r22
 8006b88:	80041e80 	call	80041e8 <_free_r>
 8006b8c:	b009883a 	mov	r4,r22
 8006b90:	800a3180 	call	800a318 <__malloc_unlock>
 8006b94:	003f5e06 	br	8006910 <_realloc_r+0xd8>
 8006b98:	300b883a 	mov	r5,r6
 8006b9c:	dfc00b17 	ldw	ra,44(sp)
 8006ba0:	df000a17 	ldw	fp,40(sp)
 8006ba4:	ddc00917 	ldw	r23,36(sp)
 8006ba8:	dd800817 	ldw	r22,32(sp)
 8006bac:	dd400717 	ldw	r21,28(sp)
 8006bb0:	dd000617 	ldw	r20,24(sp)
 8006bb4:	dcc00517 	ldw	r19,20(sp)
 8006bb8:	dc800417 	ldw	r18,16(sp)
 8006bbc:	dc400317 	ldw	r17,12(sp)
 8006bc0:	dc000217 	ldw	r16,8(sp)
 8006bc4:	dec00c04 	addi	sp,sp,48
 8006bc8:	8004d701 	jmpi	8004d70 <_malloc_r>
 8006bcc:	38800117 	ldw	r2,4(r7)
 8006bd0:	e54b883a 	add	r5,fp,r21
 8006bd4:	31000054 	ori	r4,r6,1
 8006bd8:	1080004c 	andi	r2,r2,1
 8006bdc:	1704b03a 	or	r2,r2,fp
 8006be0:	38800115 	stw	r2,4(r7)
 8006be4:	29000115 	stw	r4,4(r5)
 8006be8:	2987883a 	add	r3,r5,r6
 8006bec:	18800117 	ldw	r2,4(r3)
 8006bf0:	29400204 	addi	r5,r5,8
 8006bf4:	b009883a 	mov	r4,r22
 8006bf8:	10800054 	ori	r2,r2,1
 8006bfc:	18800115 	stw	r2,4(r3)
 8006c00:	80041e80 	call	80041e8 <_free_r>
 8006c04:	003f3806 	br	80068e8 <_realloc_r+0xb0>
 8006c08:	000d883a 	mov	r6,zero
 8006c0c:	0009883a 	mov	r4,zero
 8006c10:	003f5d06 	br	8006988 <_realloc_r+0x150>
 8006c14:	30c00217 	ldw	r3,8(r6)
 8006c18:	30800317 	ldw	r2,12(r6)
 8006c1c:	800f883a 	mov	r7,r16
 8006c20:	84000204 	addi	r16,r16,8
 8006c24:	10c00215 	stw	r3,8(r2)
 8006c28:	18800315 	stw	r2,12(r3)
 8006c2c:	003f2306 	br	80068bc <_realloc_r+0x84>
 8006c30:	8809883a 	mov	r4,r17
 8006c34:	900b883a 	mov	r5,r18
 8006c38:	80056340 	call	8005634 <memmove>
 8006c3c:	003fd006 	br	8006b80 <_realloc_r+0x348>
 8006c40:	30800117 	ldw	r2,4(r6)
 8006c44:	e0c00404 	addi	r3,fp,16
 8006c48:	1108703a 	and	r4,r2,r4
 8006c4c:	9905883a 	add	r2,r19,r4
 8006c50:	10ff4d16 	blt	r2,r3,8006988 <_realloc_r+0x150>
 8006c54:	1705c83a 	sub	r2,r2,fp
 8006c58:	870b883a 	add	r5,r16,fp
 8006c5c:	10800054 	ori	r2,r2,1
 8006c60:	28800115 	stw	r2,4(r5)
 8006c64:	80c00117 	ldw	r3,4(r16)
 8006c68:	00820074 	movhi	r2,2049
 8006c6c:	10b47304 	addi	r2,r2,-11828
 8006c70:	b009883a 	mov	r4,r22
 8006c74:	18c0004c 	andi	r3,r3,1
 8006c78:	e0c6b03a 	or	r3,fp,r3
 8006c7c:	11400215 	stw	r5,8(r2)
 8006c80:	80c00115 	stw	r3,4(r16)
 8006c84:	800a3180 	call	800a318 <__malloc_unlock>
 8006c88:	84400204 	addi	r17,r16,8
 8006c8c:	003f2006 	br	8006910 <_realloc_r+0xd8>
 8006c90:	98a9883a 	add	r20,r19,r2
 8006c94:	2509883a 	add	r4,r4,r20
 8006c98:	e0800404 	addi	r2,fp,16
 8006c9c:	d9000115 	stw	r4,4(sp)
 8006ca0:	20bf7016 	blt	r4,r2,8006a64 <_realloc_r+0x22c>
 8006ca4:	b8c00317 	ldw	r3,12(r23)
 8006ca8:	b8800217 	ldw	r2,8(r23)
 8006cac:	99bfff04 	addi	r6,r19,-4
 8006cb0:	01400904 	movi	r5,36
 8006cb4:	18800215 	stw	r2,8(r3)
 8006cb8:	10c00315 	stw	r3,12(r2)
 8006cbc:	bc400204 	addi	r17,r23,8
 8006cc0:	29804136 	bltu	r5,r6,8006dc8 <_realloc_r+0x590>
 8006cc4:	008004c4 	movi	r2,19
 8006cc8:	9009883a 	mov	r4,r18
 8006ccc:	880f883a 	mov	r7,r17
 8006cd0:	11800f2e 	bgeu	r2,r6,8006d10 <_realloc_r+0x4d8>
 8006cd4:	90800017 	ldw	r2,0(r18)
 8006cd8:	b9c00404 	addi	r7,r23,16
 8006cdc:	91000204 	addi	r4,r18,8
 8006ce0:	b8800215 	stw	r2,8(r23)
 8006ce4:	90c00117 	ldw	r3,4(r18)
 8006ce8:	008006c4 	movi	r2,27
 8006cec:	b8c00315 	stw	r3,12(r23)
 8006cf0:	1180072e 	bgeu	r2,r6,8006d10 <_realloc_r+0x4d8>
 8006cf4:	90c00217 	ldw	r3,8(r18)
 8006cf8:	b9c00604 	addi	r7,r23,24
 8006cfc:	91000404 	addi	r4,r18,16
 8006d00:	b8c00415 	stw	r3,16(r23)
 8006d04:	90800317 	ldw	r2,12(r18)
 8006d08:	b8800515 	stw	r2,20(r23)
 8006d0c:	31404026 	beq	r6,r5,8006e10 <_realloc_r+0x5d8>
 8006d10:	20800017 	ldw	r2,0(r4)
 8006d14:	38800015 	stw	r2,0(r7)
 8006d18:	20c00117 	ldw	r3,4(r4)
 8006d1c:	38c00115 	stw	r3,4(r7)
 8006d20:	20800217 	ldw	r2,8(r4)
 8006d24:	38800215 	stw	r2,8(r7)
 8006d28:	d8c00117 	ldw	r3,4(sp)
 8006d2c:	bf0b883a 	add	r5,r23,fp
 8006d30:	b009883a 	mov	r4,r22
 8006d34:	1f05c83a 	sub	r2,r3,fp
 8006d38:	10800054 	ori	r2,r2,1
 8006d3c:	28800115 	stw	r2,4(r5)
 8006d40:	b8c00117 	ldw	r3,4(r23)
 8006d44:	00820074 	movhi	r2,2049
 8006d48:	10b47304 	addi	r2,r2,-11828
 8006d4c:	11400215 	stw	r5,8(r2)
 8006d50:	18c0004c 	andi	r3,r3,1
 8006d54:	e0c6b03a 	or	r3,fp,r3
 8006d58:	b8c00115 	stw	r3,4(r23)
 8006d5c:	800a3180 	call	800a318 <__malloc_unlock>
 8006d60:	003eeb06 	br	8006910 <_realloc_r+0xd8>
 8006d64:	20800117 	ldw	r2,4(r4)
 8006d68:	00ffff04 	movi	r3,-4
 8006d6c:	800f883a 	mov	r7,r16
 8006d70:	10c4703a 	and	r2,r2,r3
 8006d74:	98a9883a 	add	r20,r19,r2
 8006d78:	84000204 	addi	r16,r16,8
 8006d7c:	003ecf06 	br	80068bc <_realloc_r+0x84>
 8006d80:	900b883a 	mov	r5,r18
 8006d84:	8009883a 	mov	r4,r16
 8006d88:	80056340 	call	8005634 <memmove>
 8006d8c:	dd000017 	ldw	r20,0(sp)
 8006d90:	b80f883a 	mov	r7,r23
 8006d94:	003ec906 	br	80068bc <_realloc_r+0x84>
 8006d98:	900b883a 	mov	r5,r18
 8006d9c:	8009883a 	mov	r4,r16
 8006da0:	80056340 	call	8005634 <memmove>
 8006da4:	b80f883a 	mov	r7,r23
 8006da8:	003ec406 	br	80068bc <_realloc_r+0x84>
 8006dac:	90c00417 	ldw	r3,16(r18)
 8006db0:	89400604 	addi	r5,r17,24
 8006db4:	91000604 	addi	r4,r18,24
 8006db8:	88c00415 	stw	r3,16(r17)
 8006dbc:	90800517 	ldw	r2,20(r18)
 8006dc0:	88800515 	stw	r2,20(r17)
 8006dc4:	003f6806 	br	8006b68 <_realloc_r+0x330>
 8006dc8:	900b883a 	mov	r5,r18
 8006dcc:	8809883a 	mov	r4,r17
 8006dd0:	80056340 	call	8005634 <memmove>
 8006dd4:	003fd406 	br	8006d28 <_realloc_r+0x4f0>
 8006dd8:	90c00417 	ldw	r3,16(r18)
 8006ddc:	91000604 	addi	r4,r18,24
 8006de0:	ba000804 	addi	r8,r23,32
 8006de4:	b8c00615 	stw	r3,24(r23)
 8006de8:	90800517 	ldw	r2,20(r18)
 8006dec:	b8800715 	stw	r2,28(r23)
 8006df0:	003f1206 	br	8006a3c <_realloc_r+0x204>
 8006df4:	90c00417 	ldw	r3,16(r18)
 8006df8:	91000604 	addi	r4,r18,24
 8006dfc:	ba000804 	addi	r8,r23,32
 8006e00:	b8c00615 	stw	r3,24(r23)
 8006e04:	90800517 	ldw	r2,20(r18)
 8006e08:	b8800715 	stw	r2,28(r23)
 8006e0c:	003f3206 	br	8006ad8 <_realloc_r+0x2a0>
 8006e10:	90c00417 	ldw	r3,16(r18)
 8006e14:	91000604 	addi	r4,r18,24
 8006e18:	b9c00804 	addi	r7,r23,32
 8006e1c:	b8c00615 	stw	r3,24(r23)
 8006e20:	90800517 	ldw	r2,20(r18)
 8006e24:	b8800715 	stw	r2,28(r23)
 8006e28:	003fb906 	br	8006d10 <_realloc_r+0x4d8>

08006e2c <__isinfd>:
 8006e2c:	200d883a 	mov	r6,r4
 8006e30:	0109c83a 	sub	r4,zero,r4
 8006e34:	2188b03a 	or	r4,r4,r6
 8006e38:	2008d7fa 	srli	r4,r4,31
 8006e3c:	00a00034 	movhi	r2,32768
 8006e40:	10bfffc4 	addi	r2,r2,-1
 8006e44:	1144703a 	and	r2,r2,r5
 8006e48:	2088b03a 	or	r4,r4,r2
 8006e4c:	009ffc34 	movhi	r2,32752
 8006e50:	1105c83a 	sub	r2,r2,r4
 8006e54:	0087c83a 	sub	r3,zero,r2
 8006e58:	10c4b03a 	or	r2,r2,r3
 8006e5c:	1004d7fa 	srli	r2,r2,31
 8006e60:	00c00044 	movi	r3,1
 8006e64:	1885c83a 	sub	r2,r3,r2
 8006e68:	f800283a 	ret

08006e6c <__isnand>:
 8006e6c:	200d883a 	mov	r6,r4
 8006e70:	0109c83a 	sub	r4,zero,r4
 8006e74:	2188b03a 	or	r4,r4,r6
 8006e78:	2008d7fa 	srli	r4,r4,31
 8006e7c:	00a00034 	movhi	r2,32768
 8006e80:	10bfffc4 	addi	r2,r2,-1
 8006e84:	1144703a 	and	r2,r2,r5
 8006e88:	2088b03a 	or	r4,r4,r2
 8006e8c:	009ffc34 	movhi	r2,32752
 8006e90:	1105c83a 	sub	r2,r2,r4
 8006e94:	1004d7fa 	srli	r2,r2,31
 8006e98:	f800283a 	ret

08006e9c <_sbrk_r>:
 8006e9c:	defffd04 	addi	sp,sp,-12
 8006ea0:	dc000015 	stw	r16,0(sp)
 8006ea4:	04020074 	movhi	r16,2049
 8006ea8:	8400de04 	addi	r16,r16,888
 8006eac:	dc400115 	stw	r17,4(sp)
 8006eb0:	80000015 	stw	zero,0(r16)
 8006eb4:	2023883a 	mov	r17,r4
 8006eb8:	2809883a 	mov	r4,r5
 8006ebc:	dfc00215 	stw	ra,8(sp)
 8006ec0:	800a5340 	call	800a534 <sbrk>
 8006ec4:	1007883a 	mov	r3,r2
 8006ec8:	00bfffc4 	movi	r2,-1
 8006ecc:	18800626 	beq	r3,r2,8006ee8 <_sbrk_r+0x4c>
 8006ed0:	1805883a 	mov	r2,r3
 8006ed4:	dfc00217 	ldw	ra,8(sp)
 8006ed8:	dc400117 	ldw	r17,4(sp)
 8006edc:	dc000017 	ldw	r16,0(sp)
 8006ee0:	dec00304 	addi	sp,sp,12
 8006ee4:	f800283a 	ret
 8006ee8:	80800017 	ldw	r2,0(r16)
 8006eec:	103ff826 	beq	r2,zero,8006ed0 <_sbrk_r+0x34>
 8006ef0:	88800015 	stw	r2,0(r17)
 8006ef4:	1805883a 	mov	r2,r3
 8006ef8:	dfc00217 	ldw	ra,8(sp)
 8006efc:	dc400117 	ldw	r17,4(sp)
 8006f00:	dc000017 	ldw	r16,0(sp)
 8006f04:	dec00304 	addi	sp,sp,12
 8006f08:	f800283a 	ret

08006f0c <__sclose>:
 8006f0c:	2940038f 	ldh	r5,14(r5)
 8006f10:	80072c81 	jmpi	80072c8 <_close_r>

08006f14 <__sseek>:
 8006f14:	defffe04 	addi	sp,sp,-8
 8006f18:	dc000015 	stw	r16,0(sp)
 8006f1c:	2821883a 	mov	r16,r5
 8006f20:	2940038f 	ldh	r5,14(r5)
 8006f24:	dfc00115 	stw	ra,4(sp)
 8006f28:	80075400 	call	8007540 <_lseek_r>
 8006f2c:	1007883a 	mov	r3,r2
 8006f30:	00bfffc4 	movi	r2,-1
 8006f34:	18800926 	beq	r3,r2,8006f5c <__sseek+0x48>
 8006f38:	8080030b 	ldhu	r2,12(r16)
 8006f3c:	80c01415 	stw	r3,80(r16)
 8006f40:	10840014 	ori	r2,r2,4096
 8006f44:	8080030d 	sth	r2,12(r16)
 8006f48:	1805883a 	mov	r2,r3
 8006f4c:	dfc00117 	ldw	ra,4(sp)
 8006f50:	dc000017 	ldw	r16,0(sp)
 8006f54:	dec00204 	addi	sp,sp,8
 8006f58:	f800283a 	ret
 8006f5c:	8080030b 	ldhu	r2,12(r16)
 8006f60:	10bbffcc 	andi	r2,r2,61439
 8006f64:	8080030d 	sth	r2,12(r16)
 8006f68:	1805883a 	mov	r2,r3
 8006f6c:	dfc00117 	ldw	ra,4(sp)
 8006f70:	dc000017 	ldw	r16,0(sp)
 8006f74:	dec00204 	addi	sp,sp,8
 8006f78:	f800283a 	ret

08006f7c <__swrite>:
 8006f7c:	2880030b 	ldhu	r2,12(r5)
 8006f80:	defffb04 	addi	sp,sp,-20
 8006f84:	dcc00315 	stw	r19,12(sp)
 8006f88:	1080400c 	andi	r2,r2,256
 8006f8c:	dc800215 	stw	r18,8(sp)
 8006f90:	dc400115 	stw	r17,4(sp)
 8006f94:	dc000015 	stw	r16,0(sp)
 8006f98:	3027883a 	mov	r19,r6
 8006f9c:	3825883a 	mov	r18,r7
 8006fa0:	dfc00415 	stw	ra,16(sp)
 8006fa4:	2821883a 	mov	r16,r5
 8006fa8:	000d883a 	mov	r6,zero
 8006fac:	01c00084 	movi	r7,2
 8006fb0:	2023883a 	mov	r17,r4
 8006fb4:	10000226 	beq	r2,zero,8006fc0 <__swrite+0x44>
 8006fb8:	2940038f 	ldh	r5,14(r5)
 8006fbc:	80075400 	call	8007540 <_lseek_r>
 8006fc0:	8080030b 	ldhu	r2,12(r16)
 8006fc4:	8140038f 	ldh	r5,14(r16)
 8006fc8:	8809883a 	mov	r4,r17
 8006fcc:	10bbffcc 	andi	r2,r2,61439
 8006fd0:	980d883a 	mov	r6,r19
 8006fd4:	900f883a 	mov	r7,r18
 8006fd8:	8080030d 	sth	r2,12(r16)
 8006fdc:	dfc00417 	ldw	ra,16(sp)
 8006fe0:	dcc00317 	ldw	r19,12(sp)
 8006fe4:	dc800217 	ldw	r18,8(sp)
 8006fe8:	dc400117 	ldw	r17,4(sp)
 8006fec:	dc000017 	ldw	r16,0(sp)
 8006ff0:	dec00504 	addi	sp,sp,20
 8006ff4:	80071881 	jmpi	8007188 <_write_r>

08006ff8 <__sread>:
 8006ff8:	defffe04 	addi	sp,sp,-8
 8006ffc:	dc000015 	stw	r16,0(sp)
 8007000:	2821883a 	mov	r16,r5
 8007004:	2940038f 	ldh	r5,14(r5)
 8007008:	dfc00115 	stw	ra,4(sp)
 800700c:	80075b80 	call	80075b8 <_read_r>
 8007010:	1007883a 	mov	r3,r2
 8007014:	10000816 	blt	r2,zero,8007038 <__sread+0x40>
 8007018:	80801417 	ldw	r2,80(r16)
 800701c:	10c5883a 	add	r2,r2,r3
 8007020:	80801415 	stw	r2,80(r16)
 8007024:	1805883a 	mov	r2,r3
 8007028:	dfc00117 	ldw	ra,4(sp)
 800702c:	dc000017 	ldw	r16,0(sp)
 8007030:	dec00204 	addi	sp,sp,8
 8007034:	f800283a 	ret
 8007038:	8080030b 	ldhu	r2,12(r16)
 800703c:	10bbffcc 	andi	r2,r2,61439
 8007040:	8080030d 	sth	r2,12(r16)
 8007044:	1805883a 	mov	r2,r3
 8007048:	dfc00117 	ldw	ra,4(sp)
 800704c:	dc000017 	ldw	r16,0(sp)
 8007050:	dec00204 	addi	sp,sp,8
 8007054:	f800283a 	ret

08007058 <strcmp>:
 8007058:	2144b03a 	or	r2,r4,r5
 800705c:	108000cc 	andi	r2,r2,3
 8007060:	10001d1e 	bne	r2,zero,80070d8 <strcmp+0x80>
 8007064:	200f883a 	mov	r7,r4
 8007068:	28800017 	ldw	r2,0(r5)
 800706c:	21000017 	ldw	r4,0(r4)
 8007070:	280d883a 	mov	r6,r5
 8007074:	2080161e 	bne	r4,r2,80070d0 <strcmp+0x78>
 8007078:	023fbff4 	movhi	r8,65279
 800707c:	423fbfc4 	addi	r8,r8,-257
 8007080:	2207883a 	add	r3,r4,r8
 8007084:	01602074 	movhi	r5,32897
 8007088:	29602004 	addi	r5,r5,-32640
 800708c:	1946703a 	and	r3,r3,r5
 8007090:	0104303a 	nor	r2,zero,r4
 8007094:	10c4703a 	and	r2,r2,r3
 8007098:	10001c1e 	bne	r2,zero,800710c <strcmp+0xb4>
 800709c:	4013883a 	mov	r9,r8
 80070a0:	2811883a 	mov	r8,r5
 80070a4:	00000106 	br	80070ac <strcmp+0x54>
 80070a8:	1800181e 	bne	r3,zero,800710c <strcmp+0xb4>
 80070ac:	39c00104 	addi	r7,r7,4
 80070b0:	39000017 	ldw	r4,0(r7)
 80070b4:	31800104 	addi	r6,r6,4
 80070b8:	31400017 	ldw	r5,0(r6)
 80070bc:	2245883a 	add	r2,r4,r9
 80070c0:	1204703a 	and	r2,r2,r8
 80070c4:	0106303a 	nor	r3,zero,r4
 80070c8:	1886703a 	and	r3,r3,r2
 80070cc:	217ff626 	beq	r4,r5,80070a8 <strcmp+0x50>
 80070d0:	3809883a 	mov	r4,r7
 80070d4:	300b883a 	mov	r5,r6
 80070d8:	20c00007 	ldb	r3,0(r4)
 80070dc:	1800051e 	bne	r3,zero,80070f4 <strcmp+0x9c>
 80070e0:	00000606 	br	80070fc <strcmp+0xa4>
 80070e4:	21000044 	addi	r4,r4,1
 80070e8:	20c00007 	ldb	r3,0(r4)
 80070ec:	29400044 	addi	r5,r5,1
 80070f0:	18000226 	beq	r3,zero,80070fc <strcmp+0xa4>
 80070f4:	28800007 	ldb	r2,0(r5)
 80070f8:	18bffa26 	beq	r3,r2,80070e4 <strcmp+0x8c>
 80070fc:	20c00003 	ldbu	r3,0(r4)
 8007100:	28800003 	ldbu	r2,0(r5)
 8007104:	1885c83a 	sub	r2,r3,r2
 8007108:	f800283a 	ret
 800710c:	0005883a 	mov	r2,zero
 8007110:	f800283a 	ret

08007114 <strlen>:
 8007114:	208000cc 	andi	r2,r4,3
 8007118:	2011883a 	mov	r8,r4
 800711c:	1000161e 	bne	r2,zero,8007178 <strlen+0x64>
 8007120:	20c00017 	ldw	r3,0(r4)
 8007124:	017fbff4 	movhi	r5,65279
 8007128:	297fbfc4 	addi	r5,r5,-257
 800712c:	01e02074 	movhi	r7,32897
 8007130:	39e02004 	addi	r7,r7,-32640
 8007134:	1945883a 	add	r2,r3,r5
 8007138:	11c4703a 	and	r2,r2,r7
 800713c:	00c6303a 	nor	r3,zero,r3
 8007140:	1886703a 	and	r3,r3,r2
 8007144:	18000c1e 	bne	r3,zero,8007178 <strlen+0x64>
 8007148:	280d883a 	mov	r6,r5
 800714c:	380b883a 	mov	r5,r7
 8007150:	21000104 	addi	r4,r4,4
 8007154:	20800017 	ldw	r2,0(r4)
 8007158:	1187883a 	add	r3,r2,r6
 800715c:	1946703a 	and	r3,r3,r5
 8007160:	0084303a 	nor	r2,zero,r2
 8007164:	10c4703a 	and	r2,r2,r3
 8007168:	103ff926 	beq	r2,zero,8007150 <strlen+0x3c>
 800716c:	20800007 	ldb	r2,0(r4)
 8007170:	10000326 	beq	r2,zero,8007180 <strlen+0x6c>
 8007174:	21000044 	addi	r4,r4,1
 8007178:	20800007 	ldb	r2,0(r4)
 800717c:	103ffd1e 	bne	r2,zero,8007174 <strlen+0x60>
 8007180:	2205c83a 	sub	r2,r4,r8
 8007184:	f800283a 	ret

08007188 <_write_r>:
 8007188:	defffd04 	addi	sp,sp,-12
 800718c:	dc000015 	stw	r16,0(sp)
 8007190:	04020074 	movhi	r16,2049
 8007194:	8400de04 	addi	r16,r16,888
 8007198:	dc400115 	stw	r17,4(sp)
 800719c:	80000015 	stw	zero,0(r16)
 80071a0:	2023883a 	mov	r17,r4
 80071a4:	2809883a 	mov	r4,r5
 80071a8:	300b883a 	mov	r5,r6
 80071ac:	380d883a 	mov	r6,r7
 80071b0:	dfc00215 	stw	ra,8(sp)
 80071b4:	800a5f00 	call	800a5f0 <write>
 80071b8:	1007883a 	mov	r3,r2
 80071bc:	00bfffc4 	movi	r2,-1
 80071c0:	18800626 	beq	r3,r2,80071dc <_write_r+0x54>
 80071c4:	1805883a 	mov	r2,r3
 80071c8:	dfc00217 	ldw	ra,8(sp)
 80071cc:	dc400117 	ldw	r17,4(sp)
 80071d0:	dc000017 	ldw	r16,0(sp)
 80071d4:	dec00304 	addi	sp,sp,12
 80071d8:	f800283a 	ret
 80071dc:	80800017 	ldw	r2,0(r16)
 80071e0:	103ff826 	beq	r2,zero,80071c4 <_write_r+0x3c>
 80071e4:	88800015 	stw	r2,0(r17)
 80071e8:	1805883a 	mov	r2,r3
 80071ec:	dfc00217 	ldw	ra,8(sp)
 80071f0:	dc400117 	ldw	r17,4(sp)
 80071f4:	dc000017 	ldw	r16,0(sp)
 80071f8:	dec00304 	addi	sp,sp,12
 80071fc:	f800283a 	ret

08007200 <_calloc_r>:
 8007200:	defffe04 	addi	sp,sp,-8
 8007204:	dc400015 	stw	r17,0(sp)
 8007208:	2023883a 	mov	r17,r4
 800720c:	2809883a 	mov	r4,r5
 8007210:	300b883a 	mov	r5,r6
 8007214:	dfc00115 	stw	ra,4(sp)
 8007218:	80095740 	call	8009574 <__mulsi3>
 800721c:	100b883a 	mov	r5,r2
 8007220:	8809883a 	mov	r4,r17
 8007224:	8004d700 	call	8004d70 <_malloc_r>
 8007228:	1023883a 	mov	r17,r2
 800722c:	01c00904 	movi	r7,36
 8007230:	10000d26 	beq	r2,zero,8007268 <_calloc_r+0x68>
 8007234:	10ffff17 	ldw	r3,-4(r2)
 8007238:	1009883a 	mov	r4,r2
 800723c:	00bfff04 	movi	r2,-4
 8007240:	1886703a 	and	r3,r3,r2
 8007244:	1887883a 	add	r3,r3,r2
 8007248:	180d883a 	mov	r6,r3
 800724c:	000b883a 	mov	r5,zero
 8007250:	38c01736 	bltu	r7,r3,80072b0 <_calloc_r+0xb0>
 8007254:	008004c4 	movi	r2,19
 8007258:	10c00836 	bltu	r2,r3,800727c <_calloc_r+0x7c>
 800725c:	20000215 	stw	zero,8(r4)
 8007260:	20000015 	stw	zero,0(r4)
 8007264:	20000115 	stw	zero,4(r4)
 8007268:	8805883a 	mov	r2,r17
 800726c:	dfc00117 	ldw	ra,4(sp)
 8007270:	dc400017 	ldw	r17,0(sp)
 8007274:	dec00204 	addi	sp,sp,8
 8007278:	f800283a 	ret
 800727c:	008006c4 	movi	r2,27
 8007280:	88000015 	stw	zero,0(r17)
 8007284:	88000115 	stw	zero,4(r17)
 8007288:	89000204 	addi	r4,r17,8
 800728c:	10fff32e 	bgeu	r2,r3,800725c <_calloc_r+0x5c>
 8007290:	88000215 	stw	zero,8(r17)
 8007294:	88000315 	stw	zero,12(r17)
 8007298:	89000404 	addi	r4,r17,16
 800729c:	19ffef1e 	bne	r3,r7,800725c <_calloc_r+0x5c>
 80072a0:	89000604 	addi	r4,r17,24
 80072a4:	88000415 	stw	zero,16(r17)
 80072a8:	88000515 	stw	zero,20(r17)
 80072ac:	003feb06 	br	800725c <_calloc_r+0x5c>
 80072b0:	80057140 	call	8005714 <memset>
 80072b4:	8805883a 	mov	r2,r17
 80072b8:	dfc00117 	ldw	ra,4(sp)
 80072bc:	dc400017 	ldw	r17,0(sp)
 80072c0:	dec00204 	addi	sp,sp,8
 80072c4:	f800283a 	ret

080072c8 <_close_r>:
 80072c8:	defffd04 	addi	sp,sp,-12
 80072cc:	dc000015 	stw	r16,0(sp)
 80072d0:	04020074 	movhi	r16,2049
 80072d4:	8400de04 	addi	r16,r16,888
 80072d8:	dc400115 	stw	r17,4(sp)
 80072dc:	80000015 	stw	zero,0(r16)
 80072e0:	2023883a 	mov	r17,r4
 80072e4:	2809883a 	mov	r4,r5
 80072e8:	dfc00215 	stw	ra,8(sp)
 80072ec:	8009c640 	call	8009c64 <close>
 80072f0:	1007883a 	mov	r3,r2
 80072f4:	00bfffc4 	movi	r2,-1
 80072f8:	18800626 	beq	r3,r2,8007314 <_close_r+0x4c>
 80072fc:	1805883a 	mov	r2,r3
 8007300:	dfc00217 	ldw	ra,8(sp)
 8007304:	dc400117 	ldw	r17,4(sp)
 8007308:	dc000017 	ldw	r16,0(sp)
 800730c:	dec00304 	addi	sp,sp,12
 8007310:	f800283a 	ret
 8007314:	80800017 	ldw	r2,0(r16)
 8007318:	103ff826 	beq	r2,zero,80072fc <_close_r+0x34>
 800731c:	88800015 	stw	r2,0(r17)
 8007320:	1805883a 	mov	r2,r3
 8007324:	dfc00217 	ldw	ra,8(sp)
 8007328:	dc400117 	ldw	r17,4(sp)
 800732c:	dc000017 	ldw	r16,0(sp)
 8007330:	dec00304 	addi	sp,sp,12
 8007334:	f800283a 	ret

08007338 <_fclose_r>:
 8007338:	defffc04 	addi	sp,sp,-16
 800733c:	dc400115 	stw	r17,4(sp)
 8007340:	dc000015 	stw	r16,0(sp)
 8007344:	dfc00315 	stw	ra,12(sp)
 8007348:	dc800215 	stw	r18,8(sp)
 800734c:	2821883a 	mov	r16,r5
 8007350:	2023883a 	mov	r17,r4
 8007354:	28002926 	beq	r5,zero,80073fc <_fclose_r+0xc4>
 8007358:	8003e200 	call	8003e20 <__sfp_lock_acquire>
 800735c:	88000226 	beq	r17,zero,8007368 <_fclose_r+0x30>
 8007360:	88800e17 	ldw	r2,56(r17)
 8007364:	10002d26 	beq	r2,zero,800741c <_fclose_r+0xe4>
 8007368:	8080030f 	ldh	r2,12(r16)
 800736c:	10002226 	beq	r2,zero,80073f8 <_fclose_r+0xc0>
 8007370:	8809883a 	mov	r4,r17
 8007374:	800b883a 	mov	r5,r16
 8007378:	8003b980 	call	8003b98 <_fflush_r>
 800737c:	1025883a 	mov	r18,r2
 8007380:	80800b17 	ldw	r2,44(r16)
 8007384:	10000426 	beq	r2,zero,8007398 <_fclose_r+0x60>
 8007388:	81400717 	ldw	r5,28(r16)
 800738c:	8809883a 	mov	r4,r17
 8007390:	103ee83a 	callr	r2
 8007394:	10002a16 	blt	r2,zero,8007440 <_fclose_r+0x108>
 8007398:	8080030b 	ldhu	r2,12(r16)
 800739c:	1080200c 	andi	r2,r2,128
 80073a0:	1000231e 	bne	r2,zero,8007430 <_fclose_r+0xf8>
 80073a4:	81400c17 	ldw	r5,48(r16)
 80073a8:	28000526 	beq	r5,zero,80073c0 <_fclose_r+0x88>
 80073ac:	80801004 	addi	r2,r16,64
 80073b0:	28800226 	beq	r5,r2,80073bc <_fclose_r+0x84>
 80073b4:	8809883a 	mov	r4,r17
 80073b8:	80041e80 	call	80041e8 <_free_r>
 80073bc:	80000c15 	stw	zero,48(r16)
 80073c0:	81401117 	ldw	r5,68(r16)
 80073c4:	28000326 	beq	r5,zero,80073d4 <_fclose_r+0x9c>
 80073c8:	8809883a 	mov	r4,r17
 80073cc:	80041e80 	call	80041e8 <_free_r>
 80073d0:	80001115 	stw	zero,68(r16)
 80073d4:	8000030d 	sth	zero,12(r16)
 80073d8:	8003e240 	call	8003e24 <__sfp_lock_release>
 80073dc:	9005883a 	mov	r2,r18
 80073e0:	dfc00317 	ldw	ra,12(sp)
 80073e4:	dc800217 	ldw	r18,8(sp)
 80073e8:	dc400117 	ldw	r17,4(sp)
 80073ec:	dc000017 	ldw	r16,0(sp)
 80073f0:	dec00404 	addi	sp,sp,16
 80073f4:	f800283a 	ret
 80073f8:	8003e240 	call	8003e24 <__sfp_lock_release>
 80073fc:	0025883a 	mov	r18,zero
 8007400:	9005883a 	mov	r2,r18
 8007404:	dfc00317 	ldw	ra,12(sp)
 8007408:	dc800217 	ldw	r18,8(sp)
 800740c:	dc400117 	ldw	r17,4(sp)
 8007410:	dc000017 	ldw	r16,0(sp)
 8007414:	dec00404 	addi	sp,sp,16
 8007418:	f800283a 	ret
 800741c:	8809883a 	mov	r4,r17
 8007420:	8003e300 	call	8003e30 <__sinit>
 8007424:	8080030f 	ldh	r2,12(r16)
 8007428:	103fd11e 	bne	r2,zero,8007370 <_fclose_r+0x38>
 800742c:	003ff206 	br	80073f8 <_fclose_r+0xc0>
 8007430:	81400417 	ldw	r5,16(r16)
 8007434:	8809883a 	mov	r4,r17
 8007438:	80041e80 	call	80041e8 <_free_r>
 800743c:	003fd906 	br	80073a4 <_fclose_r+0x6c>
 8007440:	04bfffc4 	movi	r18,-1
 8007444:	003fd406 	br	8007398 <_fclose_r+0x60>

08007448 <fclose>:
 8007448:	00820074 	movhi	r2,2049
 800744c:	10ba1404 	addi	r2,r2,-6064
 8007450:	200b883a 	mov	r5,r4
 8007454:	11000017 	ldw	r4,0(r2)
 8007458:	80073381 	jmpi	8007338 <_fclose_r>

0800745c <_fstat_r>:
 800745c:	defffd04 	addi	sp,sp,-12
 8007460:	dc000015 	stw	r16,0(sp)
 8007464:	04020074 	movhi	r16,2049
 8007468:	8400de04 	addi	r16,r16,888
 800746c:	dc400115 	stw	r17,4(sp)
 8007470:	80000015 	stw	zero,0(r16)
 8007474:	2023883a 	mov	r17,r4
 8007478:	2809883a 	mov	r4,r5
 800747c:	300b883a 	mov	r5,r6
 8007480:	dfc00215 	stw	ra,8(sp)
 8007484:	8009df00 	call	8009df0 <fstat>
 8007488:	1007883a 	mov	r3,r2
 800748c:	00bfffc4 	movi	r2,-1
 8007490:	18800626 	beq	r3,r2,80074ac <_fstat_r+0x50>
 8007494:	1805883a 	mov	r2,r3
 8007498:	dfc00217 	ldw	ra,8(sp)
 800749c:	dc400117 	ldw	r17,4(sp)
 80074a0:	dc000017 	ldw	r16,0(sp)
 80074a4:	dec00304 	addi	sp,sp,12
 80074a8:	f800283a 	ret
 80074ac:	80800017 	ldw	r2,0(r16)
 80074b0:	103ff826 	beq	r2,zero,8007494 <_fstat_r+0x38>
 80074b4:	88800015 	stw	r2,0(r17)
 80074b8:	1805883a 	mov	r2,r3
 80074bc:	dfc00217 	ldw	ra,8(sp)
 80074c0:	dc400117 	ldw	r17,4(sp)
 80074c4:	dc000017 	ldw	r16,0(sp)
 80074c8:	dec00304 	addi	sp,sp,12
 80074cc:	f800283a 	ret

080074d0 <_isatty_r>:
 80074d0:	defffd04 	addi	sp,sp,-12
 80074d4:	dc000015 	stw	r16,0(sp)
 80074d8:	04020074 	movhi	r16,2049
 80074dc:	8400de04 	addi	r16,r16,888
 80074e0:	dc400115 	stw	r17,4(sp)
 80074e4:	80000015 	stw	zero,0(r16)
 80074e8:	2023883a 	mov	r17,r4
 80074ec:	2809883a 	mov	r4,r5
 80074f0:	dfc00215 	stw	ra,8(sp)
 80074f4:	8009f280 	call	8009f28 <isatty>
 80074f8:	1007883a 	mov	r3,r2
 80074fc:	00bfffc4 	movi	r2,-1
 8007500:	18800626 	beq	r3,r2,800751c <_isatty_r+0x4c>
 8007504:	1805883a 	mov	r2,r3
 8007508:	dfc00217 	ldw	ra,8(sp)
 800750c:	dc400117 	ldw	r17,4(sp)
 8007510:	dc000017 	ldw	r16,0(sp)
 8007514:	dec00304 	addi	sp,sp,12
 8007518:	f800283a 	ret
 800751c:	80800017 	ldw	r2,0(r16)
 8007520:	103ff826 	beq	r2,zero,8007504 <_isatty_r+0x34>
 8007524:	88800015 	stw	r2,0(r17)
 8007528:	1805883a 	mov	r2,r3
 800752c:	dfc00217 	ldw	ra,8(sp)
 8007530:	dc400117 	ldw	r17,4(sp)
 8007534:	dc000017 	ldw	r16,0(sp)
 8007538:	dec00304 	addi	sp,sp,12
 800753c:	f800283a 	ret

08007540 <_lseek_r>:
 8007540:	defffd04 	addi	sp,sp,-12
 8007544:	dc000015 	stw	r16,0(sp)
 8007548:	04020074 	movhi	r16,2049
 800754c:	8400de04 	addi	r16,r16,888
 8007550:	dc400115 	stw	r17,4(sp)
 8007554:	80000015 	stw	zero,0(r16)
 8007558:	2023883a 	mov	r17,r4
 800755c:	2809883a 	mov	r4,r5
 8007560:	300b883a 	mov	r5,r6
 8007564:	380d883a 	mov	r6,r7
 8007568:	dfc00215 	stw	ra,8(sp)
 800756c:	800a1380 	call	800a138 <lseek>
 8007570:	1007883a 	mov	r3,r2
 8007574:	00bfffc4 	movi	r2,-1
 8007578:	18800626 	beq	r3,r2,8007594 <_lseek_r+0x54>
 800757c:	1805883a 	mov	r2,r3
 8007580:	dfc00217 	ldw	ra,8(sp)
 8007584:	dc400117 	ldw	r17,4(sp)
 8007588:	dc000017 	ldw	r16,0(sp)
 800758c:	dec00304 	addi	sp,sp,12
 8007590:	f800283a 	ret
 8007594:	80800017 	ldw	r2,0(r16)
 8007598:	103ff826 	beq	r2,zero,800757c <_lseek_r+0x3c>
 800759c:	88800015 	stw	r2,0(r17)
 80075a0:	1805883a 	mov	r2,r3
 80075a4:	dfc00217 	ldw	ra,8(sp)
 80075a8:	dc400117 	ldw	r17,4(sp)
 80075ac:	dc000017 	ldw	r16,0(sp)
 80075b0:	dec00304 	addi	sp,sp,12
 80075b4:	f800283a 	ret

080075b8 <_read_r>:
 80075b8:	defffd04 	addi	sp,sp,-12
 80075bc:	dc000015 	stw	r16,0(sp)
 80075c0:	04020074 	movhi	r16,2049
 80075c4:	8400de04 	addi	r16,r16,888
 80075c8:	dc400115 	stw	r17,4(sp)
 80075cc:	80000015 	stw	zero,0(r16)
 80075d0:	2023883a 	mov	r17,r4
 80075d4:	2809883a 	mov	r4,r5
 80075d8:	300b883a 	mov	r5,r6
 80075dc:	380d883a 	mov	r6,r7
 80075e0:	dfc00215 	stw	ra,8(sp)
 80075e4:	800a3380 	call	800a338 <read>
 80075e8:	1007883a 	mov	r3,r2
 80075ec:	00bfffc4 	movi	r2,-1
 80075f0:	18800626 	beq	r3,r2,800760c <_read_r+0x54>
 80075f4:	1805883a 	mov	r2,r3
 80075f8:	dfc00217 	ldw	ra,8(sp)
 80075fc:	dc400117 	ldw	r17,4(sp)
 8007600:	dc000017 	ldw	r16,0(sp)
 8007604:	dec00304 	addi	sp,sp,12
 8007608:	f800283a 	ret
 800760c:	80800017 	ldw	r2,0(r16)
 8007610:	103ff826 	beq	r2,zero,80075f4 <_read_r+0x3c>
 8007614:	88800015 	stw	r2,0(r17)
 8007618:	1805883a 	mov	r2,r3
 800761c:	dfc00217 	ldw	ra,8(sp)
 8007620:	dc400117 	ldw	r17,4(sp)
 8007624:	dc000017 	ldw	r16,0(sp)
 8007628:	dec00304 	addi	sp,sp,12
 800762c:	f800283a 	ret

08007630 <__udivdi3>:
 8007630:	defff104 	addi	sp,sp,-60
 8007634:	0015883a 	mov	r10,zero
 8007638:	2005883a 	mov	r2,r4
 800763c:	3011883a 	mov	r8,r6
 8007640:	df000d15 	stw	fp,52(sp)
 8007644:	dd400a15 	stw	r21,40(sp)
 8007648:	dcc00815 	stw	r19,32(sp)
 800764c:	dfc00e15 	stw	ra,56(sp)
 8007650:	ddc00c15 	stw	r23,48(sp)
 8007654:	dd800b15 	stw	r22,44(sp)
 8007658:	dd000915 	stw	r20,36(sp)
 800765c:	dc800715 	stw	r18,28(sp)
 8007660:	dc400615 	stw	r17,24(sp)
 8007664:	dc000515 	stw	r16,20(sp)
 8007668:	da800315 	stw	r10,12(sp)
 800766c:	4027883a 	mov	r19,r8
 8007670:	1039883a 	mov	fp,r2
 8007674:	282b883a 	mov	r21,r5
 8007678:	da800415 	stw	r10,16(sp)
 800767c:	3800401e 	bne	r7,zero,8007780 <__udivdi3+0x150>
 8007680:	2a006536 	bltu	r5,r8,8007818 <__udivdi3+0x1e8>
 8007684:	4000b526 	beq	r8,zero,800795c <__udivdi3+0x32c>
 8007688:	00bfffd4 	movui	r2,65535
 800768c:	14c0ad36 	bltu	r2,r19,8007944 <__udivdi3+0x314>
 8007690:	00803fc4 	movi	r2,255
 8007694:	14c15e36 	bltu	r2,r19,8007c10 <__udivdi3+0x5e0>
 8007698:	000b883a 	mov	r5,zero
 800769c:	0005883a 	mov	r2,zero
 80076a0:	9884d83a 	srl	r2,r19,r2
 80076a4:	01020074 	movhi	r4,2049
 80076a8:	21330104 	addi	r4,r4,-13308
 80076ac:	01800804 	movi	r6,32
 80076b0:	1105883a 	add	r2,r2,r4
 80076b4:	10c00003 	ldbu	r3,0(r2)
 80076b8:	28c7883a 	add	r3,r5,r3
 80076bc:	30e9c83a 	sub	r20,r6,r3
 80076c0:	a0010a1e 	bne	r20,zero,8007aec <__udivdi3+0x4bc>
 80076c4:	982ed43a 	srli	r23,r19,16
 80076c8:	acebc83a 	sub	r21,r21,r19
 80076cc:	9dbfffcc 	andi	r22,r19,65535
 80076d0:	05000044 	movi	r20,1
 80076d4:	a809883a 	mov	r4,r21
 80076d8:	b80b883a 	mov	r5,r23
 80076dc:	80095640 	call	8009564 <__udivsi3>
 80076e0:	100b883a 	mov	r5,r2
 80076e4:	b009883a 	mov	r4,r22
 80076e8:	1021883a 	mov	r16,r2
 80076ec:	80095740 	call	8009574 <__mulsi3>
 80076f0:	a809883a 	mov	r4,r21
 80076f4:	b80b883a 	mov	r5,r23
 80076f8:	1023883a 	mov	r17,r2
 80076fc:	800956c0 	call	800956c <__umodsi3>
 8007700:	1004943a 	slli	r2,r2,16
 8007704:	e006d43a 	srli	r3,fp,16
 8007708:	10c4b03a 	or	r2,r2,r3
 800770c:	1440042e 	bgeu	r2,r17,8007720 <__udivdi3+0xf0>
 8007710:	14c5883a 	add	r2,r2,r19
 8007714:	843fffc4 	addi	r16,r16,-1
 8007718:	14c00136 	bltu	r2,r19,8007720 <__udivdi3+0xf0>
 800771c:	14415c36 	bltu	r2,r17,8007c90 <__udivdi3+0x660>
 8007720:	1463c83a 	sub	r17,r2,r17
 8007724:	8809883a 	mov	r4,r17
 8007728:	b80b883a 	mov	r5,r23
 800772c:	80095640 	call	8009564 <__udivsi3>
 8007730:	100b883a 	mov	r5,r2
 8007734:	b009883a 	mov	r4,r22
 8007738:	102b883a 	mov	r21,r2
 800773c:	80095740 	call	8009574 <__mulsi3>
 8007740:	8809883a 	mov	r4,r17
 8007744:	b80b883a 	mov	r5,r23
 8007748:	1025883a 	mov	r18,r2
 800774c:	800956c0 	call	800956c <__umodsi3>
 8007750:	1004943a 	slli	r2,r2,16
 8007754:	e0ffffcc 	andi	r3,fp,65535
 8007758:	10c4b03a 	or	r2,r2,r3
 800775c:	1480042e 	bgeu	r2,r18,8007770 <__udivdi3+0x140>
 8007760:	9885883a 	add	r2,r19,r2
 8007764:	ad7fffc4 	addi	r21,r21,-1
 8007768:	14c00136 	bltu	r2,r19,8007770 <__udivdi3+0x140>
 800776c:	14813c36 	bltu	r2,r18,8007c60 <__udivdi3+0x630>
 8007770:	8004943a 	slli	r2,r16,16
 8007774:	a009883a 	mov	r4,r20
 8007778:	a884b03a 	or	r2,r21,r2
 800777c:	00001506 	br	80077d4 <__udivdi3+0x1a4>
 8007780:	380d883a 	mov	r6,r7
 8007784:	29c06c36 	bltu	r5,r7,8007938 <__udivdi3+0x308>
 8007788:	00bfffd4 	movui	r2,65535
 800778c:	11c06436 	bltu	r2,r7,8007920 <__udivdi3+0x2f0>
 8007790:	00803fc4 	movi	r2,255
 8007794:	11c11836 	bltu	r2,r7,8007bf8 <__udivdi3+0x5c8>
 8007798:	000b883a 	mov	r5,zero
 800779c:	0005883a 	mov	r2,zero
 80077a0:	3084d83a 	srl	r2,r6,r2
 80077a4:	01020074 	movhi	r4,2049
 80077a8:	21330104 	addi	r4,r4,-13308
 80077ac:	01c00804 	movi	r7,32
 80077b0:	1105883a 	add	r2,r2,r4
 80077b4:	10c00003 	ldbu	r3,0(r2)
 80077b8:	28c7883a 	add	r3,r5,r3
 80077bc:	38edc83a 	sub	r22,r7,r3
 80077c0:	b000731e 	bne	r22,zero,8007990 <__udivdi3+0x360>
 80077c4:	35400136 	bltu	r6,r21,80077cc <__udivdi3+0x19c>
 80077c8:	e4c05b36 	bltu	fp,r19,8007938 <__udivdi3+0x308>
 80077cc:	00800044 	movi	r2,1
 80077d0:	0009883a 	mov	r4,zero
 80077d4:	d8800315 	stw	r2,12(sp)
 80077d8:	d9400317 	ldw	r5,12(sp)
 80077dc:	2007883a 	mov	r3,r4
 80077e0:	d9000415 	stw	r4,16(sp)
 80077e4:	2805883a 	mov	r2,r5
 80077e8:	dfc00e17 	ldw	ra,56(sp)
 80077ec:	df000d17 	ldw	fp,52(sp)
 80077f0:	ddc00c17 	ldw	r23,48(sp)
 80077f4:	dd800b17 	ldw	r22,44(sp)
 80077f8:	dd400a17 	ldw	r21,40(sp)
 80077fc:	dd000917 	ldw	r20,36(sp)
 8007800:	dcc00817 	ldw	r19,32(sp)
 8007804:	dc800717 	ldw	r18,28(sp)
 8007808:	dc400617 	ldw	r17,24(sp)
 800780c:	dc000517 	ldw	r16,20(sp)
 8007810:	dec00f04 	addi	sp,sp,60
 8007814:	f800283a 	ret
 8007818:	00bfffd4 	movui	r2,65535
 800781c:	12005636 	bltu	r2,r8,8007978 <__udivdi3+0x348>
 8007820:	00803fc4 	movi	r2,255
 8007824:	12010036 	bltu	r2,r8,8007c28 <__udivdi3+0x5f8>
 8007828:	000b883a 	mov	r5,zero
 800782c:	0005883a 	mov	r2,zero
 8007830:	9884d83a 	srl	r2,r19,r2
 8007834:	01020074 	movhi	r4,2049
 8007838:	21330104 	addi	r4,r4,-13308
 800783c:	01800804 	movi	r6,32
 8007840:	1105883a 	add	r2,r2,r4
 8007844:	10c00003 	ldbu	r3,0(r2)
 8007848:	28c7883a 	add	r3,r5,r3
 800784c:	30cbc83a 	sub	r5,r6,r3
 8007850:	28000626 	beq	r5,zero,800786c <__udivdi3+0x23c>
 8007854:	3145c83a 	sub	r2,r6,r5
 8007858:	e084d83a 	srl	r2,fp,r2
 800785c:	a946983a 	sll	r3,r21,r5
 8007860:	e178983a 	sll	fp,fp,r5
 8007864:	9966983a 	sll	r19,r19,r5
 8007868:	18aab03a 	or	r21,r3,r2
 800786c:	982ed43a 	srli	r23,r19,16
 8007870:	a809883a 	mov	r4,r21
 8007874:	9cbfffcc 	andi	r18,r19,65535
 8007878:	b80b883a 	mov	r5,r23
 800787c:	80095640 	call	8009564 <__udivsi3>
 8007880:	100b883a 	mov	r5,r2
 8007884:	9009883a 	mov	r4,r18
 8007888:	1021883a 	mov	r16,r2
 800788c:	80095740 	call	8009574 <__mulsi3>
 8007890:	a809883a 	mov	r4,r21
 8007894:	b80b883a 	mov	r5,r23
 8007898:	1023883a 	mov	r17,r2
 800789c:	800956c0 	call	800956c <__umodsi3>
 80078a0:	1004943a 	slli	r2,r2,16
 80078a4:	e006d43a 	srli	r3,fp,16
 80078a8:	10c4b03a 	or	r2,r2,r3
 80078ac:	1440042e 	bgeu	r2,r17,80078c0 <__udivdi3+0x290>
 80078b0:	14c5883a 	add	r2,r2,r19
 80078b4:	843fffc4 	addi	r16,r16,-1
 80078b8:	14c00136 	bltu	r2,r19,80078c0 <__udivdi3+0x290>
 80078bc:	1440ea36 	bltu	r2,r17,8007c68 <__udivdi3+0x638>
 80078c0:	1463c83a 	sub	r17,r2,r17
 80078c4:	8809883a 	mov	r4,r17
 80078c8:	b80b883a 	mov	r5,r23
 80078cc:	80095640 	call	8009564 <__udivsi3>
 80078d0:	100b883a 	mov	r5,r2
 80078d4:	9009883a 	mov	r4,r18
 80078d8:	102b883a 	mov	r21,r2
 80078dc:	80095740 	call	8009574 <__mulsi3>
 80078e0:	8809883a 	mov	r4,r17
 80078e4:	b80b883a 	mov	r5,r23
 80078e8:	1025883a 	mov	r18,r2
 80078ec:	800956c0 	call	800956c <__umodsi3>
 80078f0:	1004943a 	slli	r2,r2,16
 80078f4:	e0ffffcc 	andi	r3,fp,65535
 80078f8:	10c4b03a 	or	r2,r2,r3
 80078fc:	1480042e 	bgeu	r2,r18,8007910 <__udivdi3+0x2e0>
 8007900:	9885883a 	add	r2,r19,r2
 8007904:	ad7fffc4 	addi	r21,r21,-1
 8007908:	14c00136 	bltu	r2,r19,8007910 <__udivdi3+0x2e0>
 800790c:	1480d936 	bltu	r2,r18,8007c74 <__udivdi3+0x644>
 8007910:	8004943a 	slli	r2,r16,16
 8007914:	0009883a 	mov	r4,zero
 8007918:	a884b03a 	or	r2,r21,r2
 800791c:	003fad06 	br	80077d4 <__udivdi3+0x1a4>
 8007920:	00804034 	movhi	r2,256
 8007924:	10bfffc4 	addi	r2,r2,-1
 8007928:	11c0b636 	bltu	r2,r7,8007c04 <__udivdi3+0x5d4>
 800792c:	01400404 	movi	r5,16
 8007930:	2805883a 	mov	r2,r5
 8007934:	003f9a06 	br	80077a0 <__udivdi3+0x170>
 8007938:	0005883a 	mov	r2,zero
 800793c:	0009883a 	mov	r4,zero
 8007940:	003fa406 	br	80077d4 <__udivdi3+0x1a4>
 8007944:	00804034 	movhi	r2,256
 8007948:	10bfffc4 	addi	r2,r2,-1
 800794c:	14c0b336 	bltu	r2,r19,8007c1c <__udivdi3+0x5ec>
 8007950:	01400404 	movi	r5,16
 8007954:	2805883a 	mov	r2,r5
 8007958:	003f5106 	br	80076a0 <__udivdi3+0x70>
 800795c:	01000044 	movi	r4,1
 8007960:	000b883a 	mov	r5,zero
 8007964:	80095640 	call	8009564 <__udivsi3>
 8007968:	1027883a 	mov	r19,r2
 800796c:	00bfffd4 	movui	r2,65535
 8007970:	14fff436 	bltu	r2,r19,8007944 <__udivdi3+0x314>
 8007974:	003f4606 	br	8007690 <__udivdi3+0x60>
 8007978:	00804034 	movhi	r2,256
 800797c:	10bfffc4 	addi	r2,r2,-1
 8007980:	1200ac36 	bltu	r2,r8,8007c34 <__udivdi3+0x604>
 8007984:	01400404 	movi	r5,16
 8007988:	2805883a 	mov	r2,r5
 800798c:	003fa806 	br	8007830 <__udivdi3+0x200>
 8007990:	3d85c83a 	sub	r2,r7,r22
 8007994:	3588983a 	sll	r4,r6,r22
 8007998:	9886d83a 	srl	r3,r19,r2
 800799c:	a8a2d83a 	srl	r17,r21,r2
 80079a0:	e084d83a 	srl	r2,fp,r2
 80079a4:	20eeb03a 	or	r23,r4,r3
 80079a8:	b824d43a 	srli	r18,r23,16
 80079ac:	ad86983a 	sll	r3,r21,r22
 80079b0:	8809883a 	mov	r4,r17
 80079b4:	900b883a 	mov	r5,r18
 80079b8:	1886b03a 	or	r3,r3,r2
 80079bc:	d8c00115 	stw	r3,4(sp)
 80079c0:	bc3fffcc 	andi	r16,r23,65535
 80079c4:	80095640 	call	8009564 <__udivsi3>
 80079c8:	100b883a 	mov	r5,r2
 80079cc:	8009883a 	mov	r4,r16
 80079d0:	1029883a 	mov	r20,r2
 80079d4:	80095740 	call	8009574 <__mulsi3>
 80079d8:	900b883a 	mov	r5,r18
 80079dc:	8809883a 	mov	r4,r17
 80079e0:	102b883a 	mov	r21,r2
 80079e4:	800956c0 	call	800956c <__umodsi3>
 80079e8:	d9400117 	ldw	r5,4(sp)
 80079ec:	1004943a 	slli	r2,r2,16
 80079f0:	9da6983a 	sll	r19,r19,r22
 80079f4:	2806d43a 	srli	r3,r5,16
 80079f8:	10c4b03a 	or	r2,r2,r3
 80079fc:	1540032e 	bgeu	r2,r21,8007a0c <__udivdi3+0x3dc>
 8007a00:	15c5883a 	add	r2,r2,r23
 8007a04:	a53fffc4 	addi	r20,r20,-1
 8007a08:	15c0912e 	bgeu	r2,r23,8007c50 <__udivdi3+0x620>
 8007a0c:	1563c83a 	sub	r17,r2,r21
 8007a10:	8809883a 	mov	r4,r17
 8007a14:	900b883a 	mov	r5,r18
 8007a18:	80095640 	call	8009564 <__udivsi3>
 8007a1c:	100b883a 	mov	r5,r2
 8007a20:	8009883a 	mov	r4,r16
 8007a24:	102b883a 	mov	r21,r2
 8007a28:	80095740 	call	8009574 <__mulsi3>
 8007a2c:	8809883a 	mov	r4,r17
 8007a30:	900b883a 	mov	r5,r18
 8007a34:	1021883a 	mov	r16,r2
 8007a38:	800956c0 	call	800956c <__umodsi3>
 8007a3c:	da800117 	ldw	r10,4(sp)
 8007a40:	1004943a 	slli	r2,r2,16
 8007a44:	50ffffcc 	andi	r3,r10,65535
 8007a48:	10c6b03a 	or	r3,r2,r3
 8007a4c:	1c00032e 	bgeu	r3,r16,8007a5c <__udivdi3+0x42c>
 8007a50:	1dc7883a 	add	r3,r3,r23
 8007a54:	ad7fffc4 	addi	r21,r21,-1
 8007a58:	1dc0792e 	bgeu	r3,r23,8007c40 <__udivdi3+0x610>
 8007a5c:	a004943a 	slli	r2,r20,16
 8007a60:	982ed43a 	srli	r23,r19,16
 8007a64:	9cffffcc 	andi	r19,r19,65535
 8007a68:	a8a4b03a 	or	r18,r21,r2
 8007a6c:	947fffcc 	andi	r17,r18,65535
 8007a70:	902ad43a 	srli	r21,r18,16
 8007a74:	8809883a 	mov	r4,r17
 8007a78:	980b883a 	mov	r5,r19
 8007a7c:	1c21c83a 	sub	r16,r3,r16
 8007a80:	80095740 	call	8009574 <__mulsi3>
 8007a84:	8809883a 	mov	r4,r17
 8007a88:	b80b883a 	mov	r5,r23
 8007a8c:	1029883a 	mov	r20,r2
 8007a90:	80095740 	call	8009574 <__mulsi3>
 8007a94:	980b883a 	mov	r5,r19
 8007a98:	a809883a 	mov	r4,r21
 8007a9c:	1023883a 	mov	r17,r2
 8007aa0:	80095740 	call	8009574 <__mulsi3>
 8007aa4:	a809883a 	mov	r4,r21
 8007aa8:	b80b883a 	mov	r5,r23
 8007aac:	1027883a 	mov	r19,r2
 8007ab0:	80095740 	call	8009574 <__mulsi3>
 8007ab4:	1009883a 	mov	r4,r2
 8007ab8:	a004d43a 	srli	r2,r20,16
 8007abc:	8ce3883a 	add	r17,r17,r19
 8007ac0:	1447883a 	add	r3,r2,r17
 8007ac4:	1cc0022e 	bgeu	r3,r19,8007ad0 <__udivdi3+0x4a0>
 8007ac8:	00800074 	movhi	r2,1
 8007acc:	2089883a 	add	r4,r4,r2
 8007ad0:	1804d43a 	srli	r2,r3,16
 8007ad4:	2085883a 	add	r2,r4,r2
 8007ad8:	80804436 	bltu	r16,r2,8007bec <__udivdi3+0x5bc>
 8007adc:	80803e26 	beq	r16,r2,8007bd8 <__udivdi3+0x5a8>
 8007ae0:	9005883a 	mov	r2,r18
 8007ae4:	0009883a 	mov	r4,zero
 8007ae8:	003f3a06 	br	80077d4 <__udivdi3+0x1a4>
 8007aec:	9d26983a 	sll	r19,r19,r20
 8007af0:	3505c83a 	sub	r2,r6,r20
 8007af4:	a8a2d83a 	srl	r17,r21,r2
 8007af8:	982ed43a 	srli	r23,r19,16
 8007afc:	e084d83a 	srl	r2,fp,r2
 8007b00:	ad06983a 	sll	r3,r21,r20
 8007b04:	8809883a 	mov	r4,r17
 8007b08:	b80b883a 	mov	r5,r23
 8007b0c:	1886b03a 	or	r3,r3,r2
 8007b10:	d8c00015 	stw	r3,0(sp)
 8007b14:	9dbfffcc 	andi	r22,r19,65535
 8007b18:	80095640 	call	8009564 <__udivsi3>
 8007b1c:	100b883a 	mov	r5,r2
 8007b20:	b009883a 	mov	r4,r22
 8007b24:	d8800215 	stw	r2,8(sp)
 8007b28:	80095740 	call	8009574 <__mulsi3>
 8007b2c:	8809883a 	mov	r4,r17
 8007b30:	b80b883a 	mov	r5,r23
 8007b34:	102b883a 	mov	r21,r2
 8007b38:	800956c0 	call	800956c <__umodsi3>
 8007b3c:	d9000017 	ldw	r4,0(sp)
 8007b40:	1004943a 	slli	r2,r2,16
 8007b44:	2006d43a 	srli	r3,r4,16
 8007b48:	10c4b03a 	or	r2,r2,r3
 8007b4c:	1540052e 	bgeu	r2,r21,8007b64 <__udivdi3+0x534>
 8007b50:	d9400217 	ldw	r5,8(sp)
 8007b54:	14c5883a 	add	r2,r2,r19
 8007b58:	297fffc4 	addi	r5,r5,-1
 8007b5c:	d9400215 	stw	r5,8(sp)
 8007b60:	14c0462e 	bgeu	r2,r19,8007c7c <__udivdi3+0x64c>
 8007b64:	1563c83a 	sub	r17,r2,r21
 8007b68:	8809883a 	mov	r4,r17
 8007b6c:	b80b883a 	mov	r5,r23
 8007b70:	80095640 	call	8009564 <__udivsi3>
 8007b74:	100b883a 	mov	r5,r2
 8007b78:	b009883a 	mov	r4,r22
 8007b7c:	1025883a 	mov	r18,r2
 8007b80:	80095740 	call	8009574 <__mulsi3>
 8007b84:	8809883a 	mov	r4,r17
 8007b88:	b80b883a 	mov	r5,r23
 8007b8c:	1021883a 	mov	r16,r2
 8007b90:	800956c0 	call	800956c <__umodsi3>
 8007b94:	da800017 	ldw	r10,0(sp)
 8007b98:	1004943a 	slli	r2,r2,16
 8007b9c:	50ffffcc 	andi	r3,r10,65535
 8007ba0:	10c6b03a 	or	r3,r2,r3
 8007ba4:	1c00062e 	bgeu	r3,r16,8007bc0 <__udivdi3+0x590>
 8007ba8:	1cc7883a 	add	r3,r3,r19
 8007bac:	94bfffc4 	addi	r18,r18,-1
 8007bb0:	1cc00336 	bltu	r3,r19,8007bc0 <__udivdi3+0x590>
 8007bb4:	1c00022e 	bgeu	r3,r16,8007bc0 <__udivdi3+0x590>
 8007bb8:	94bfffc4 	addi	r18,r18,-1
 8007bbc:	1cc7883a 	add	r3,r3,r19
 8007bc0:	d9000217 	ldw	r4,8(sp)
 8007bc4:	e538983a 	sll	fp,fp,r20
 8007bc8:	1c2bc83a 	sub	r21,r3,r16
 8007bcc:	2004943a 	slli	r2,r4,16
 8007bd0:	90a8b03a 	or	r20,r18,r2
 8007bd4:	003ebf06 	br	80076d4 <__udivdi3+0xa4>
 8007bd8:	1804943a 	slli	r2,r3,16
 8007bdc:	e588983a 	sll	r4,fp,r22
 8007be0:	a0ffffcc 	andi	r3,r20,65535
 8007be4:	10c5883a 	add	r2,r2,r3
 8007be8:	20bfbd2e 	bgeu	r4,r2,8007ae0 <__udivdi3+0x4b0>
 8007bec:	90bfffc4 	addi	r2,r18,-1
 8007bf0:	0009883a 	mov	r4,zero
 8007bf4:	003ef706 	br	80077d4 <__udivdi3+0x1a4>
 8007bf8:	01400204 	movi	r5,8
 8007bfc:	2805883a 	mov	r2,r5
 8007c00:	003ee706 	br	80077a0 <__udivdi3+0x170>
 8007c04:	01400604 	movi	r5,24
 8007c08:	2805883a 	mov	r2,r5
 8007c0c:	003ee406 	br	80077a0 <__udivdi3+0x170>
 8007c10:	01400204 	movi	r5,8
 8007c14:	2805883a 	mov	r2,r5
 8007c18:	003ea106 	br	80076a0 <__udivdi3+0x70>
 8007c1c:	01400604 	movi	r5,24
 8007c20:	2805883a 	mov	r2,r5
 8007c24:	003e9e06 	br	80076a0 <__udivdi3+0x70>
 8007c28:	01400204 	movi	r5,8
 8007c2c:	2805883a 	mov	r2,r5
 8007c30:	003eff06 	br	8007830 <__udivdi3+0x200>
 8007c34:	01400604 	movi	r5,24
 8007c38:	2805883a 	mov	r2,r5
 8007c3c:	003efc06 	br	8007830 <__udivdi3+0x200>
 8007c40:	1c3f862e 	bgeu	r3,r16,8007a5c <__udivdi3+0x42c>
 8007c44:	1dc7883a 	add	r3,r3,r23
 8007c48:	ad7fffc4 	addi	r21,r21,-1
 8007c4c:	003f8306 	br	8007a5c <__udivdi3+0x42c>
 8007c50:	157f6e2e 	bgeu	r2,r21,8007a0c <__udivdi3+0x3dc>
 8007c54:	a53fffc4 	addi	r20,r20,-1
 8007c58:	15c5883a 	add	r2,r2,r23
 8007c5c:	003f6b06 	br	8007a0c <__udivdi3+0x3dc>
 8007c60:	ad7fffc4 	addi	r21,r21,-1
 8007c64:	003ec206 	br	8007770 <__udivdi3+0x140>
 8007c68:	843fffc4 	addi	r16,r16,-1
 8007c6c:	14c5883a 	add	r2,r2,r19
 8007c70:	003f1306 	br	80078c0 <__udivdi3+0x290>
 8007c74:	ad7fffc4 	addi	r21,r21,-1
 8007c78:	003f2506 	br	8007910 <__udivdi3+0x2e0>
 8007c7c:	157fb92e 	bgeu	r2,r21,8007b64 <__udivdi3+0x534>
 8007c80:	297fffc4 	addi	r5,r5,-1
 8007c84:	14c5883a 	add	r2,r2,r19
 8007c88:	d9400215 	stw	r5,8(sp)
 8007c8c:	003fb506 	br	8007b64 <__udivdi3+0x534>
 8007c90:	843fffc4 	addi	r16,r16,-1
 8007c94:	14c5883a 	add	r2,r2,r19
 8007c98:	003ea106 	br	8007720 <__udivdi3+0xf0>

08007c9c <__umoddi3>:
 8007c9c:	defff004 	addi	sp,sp,-64
 8007ca0:	3011883a 	mov	r8,r6
 8007ca4:	000d883a 	mov	r6,zero
 8007ca8:	dd400b15 	stw	r21,44(sp)
 8007cac:	dcc00915 	stw	r19,36(sp)
 8007cb0:	dc000615 	stw	r16,24(sp)
 8007cb4:	dfc00f15 	stw	ra,60(sp)
 8007cb8:	df000e15 	stw	fp,56(sp)
 8007cbc:	ddc00d15 	stw	r23,52(sp)
 8007cc0:	dd800c15 	stw	r22,48(sp)
 8007cc4:	dd000a15 	stw	r20,40(sp)
 8007cc8:	dc800815 	stw	r18,32(sp)
 8007ccc:	dc400715 	stw	r17,28(sp)
 8007cd0:	2817883a 	mov	r11,r5
 8007cd4:	d9800415 	stw	r6,16(sp)
 8007cd8:	4027883a 	mov	r19,r8
 8007cdc:	d9800515 	stw	r6,20(sp)
 8007ce0:	2021883a 	mov	r16,r4
 8007ce4:	282b883a 	mov	r21,r5
 8007ce8:	38002c1e 	bne	r7,zero,8007d9c <__umoddi3+0x100>
 8007cec:	2a005636 	bltu	r5,r8,8007e48 <__umoddi3+0x1ac>
 8007cf0:	40009a26 	beq	r8,zero,8007f5c <__umoddi3+0x2c0>
 8007cf4:	00bfffd4 	movui	r2,65535
 8007cf8:	14c09236 	bltu	r2,r19,8007f44 <__umoddi3+0x2a8>
 8007cfc:	00803fc4 	movi	r2,255
 8007d00:	14c15c36 	bltu	r2,r19,8008274 <__umoddi3+0x5d8>
 8007d04:	000b883a 	mov	r5,zero
 8007d08:	0005883a 	mov	r2,zero
 8007d0c:	9884d83a 	srl	r2,r19,r2
 8007d10:	01020074 	movhi	r4,2049
 8007d14:	21330104 	addi	r4,r4,-13308
 8007d18:	01800804 	movi	r6,32
 8007d1c:	1105883a 	add	r2,r2,r4
 8007d20:	10c00003 	ldbu	r3,0(r2)
 8007d24:	28c7883a 	add	r3,r5,r3
 8007d28:	30e5c83a 	sub	r18,r6,r3
 8007d2c:	9000a41e 	bne	r18,zero,8007fc0 <__umoddi3+0x324>
 8007d30:	982ed43a 	srli	r23,r19,16
 8007d34:	acebc83a 	sub	r21,r21,r19
 8007d38:	9d3fffcc 	andi	r20,r19,65535
 8007d3c:	002d883a 	mov	r22,zero
 8007d40:	a809883a 	mov	r4,r21
 8007d44:	b80b883a 	mov	r5,r23
 8007d48:	80095640 	call	8009564 <__udivsi3>
 8007d4c:	100b883a 	mov	r5,r2
 8007d50:	a009883a 	mov	r4,r20
 8007d54:	80095740 	call	8009574 <__mulsi3>
 8007d58:	a809883a 	mov	r4,r21
 8007d5c:	b80b883a 	mov	r5,r23
 8007d60:	1023883a 	mov	r17,r2
 8007d64:	800956c0 	call	800956c <__umodsi3>
 8007d68:	1004943a 	slli	r2,r2,16
 8007d6c:	8006d43a 	srli	r3,r16,16
 8007d70:	10c4b03a 	or	r2,r2,r3
 8007d74:	1440032e 	bgeu	r2,r17,8007d84 <__umoddi3+0xe8>
 8007d78:	14c5883a 	add	r2,r2,r19
 8007d7c:	14c00136 	bltu	r2,r19,8007d84 <__umoddi3+0xe8>
 8007d80:	14415836 	bltu	r2,r17,80082e4 <__umoddi3+0x648>
 8007d84:	1463c83a 	sub	r17,r2,r17
 8007d88:	8809883a 	mov	r4,r17
 8007d8c:	b80b883a 	mov	r5,r23
 8007d90:	80095640 	call	8009564 <__udivsi3>
 8007d94:	a009883a 	mov	r4,r20
 8007d98:	00005306 	br	8007ee8 <__umoddi3+0x24c>
 8007d9c:	380d883a 	mov	r6,r7
 8007da0:	29c0132e 	bgeu	r5,r7,8007df0 <__umoddi3+0x154>
 8007da4:	d9000415 	stw	r4,16(sp)
 8007da8:	d9400515 	stw	r5,20(sp)
 8007dac:	d9400417 	ldw	r5,16(sp)
 8007db0:	5813883a 	mov	r9,r11
 8007db4:	2811883a 	mov	r8,r5
 8007db8:	4005883a 	mov	r2,r8
 8007dbc:	4807883a 	mov	r3,r9
 8007dc0:	dfc00f17 	ldw	ra,60(sp)
 8007dc4:	df000e17 	ldw	fp,56(sp)
 8007dc8:	ddc00d17 	ldw	r23,52(sp)
 8007dcc:	dd800c17 	ldw	r22,48(sp)
 8007dd0:	dd400b17 	ldw	r21,44(sp)
 8007dd4:	dd000a17 	ldw	r20,40(sp)
 8007dd8:	dcc00917 	ldw	r19,36(sp)
 8007ddc:	dc800817 	ldw	r18,32(sp)
 8007de0:	dc400717 	ldw	r17,28(sp)
 8007de4:	dc000617 	ldw	r16,24(sp)
 8007de8:	dec01004 	addi	sp,sp,64
 8007dec:	f800283a 	ret
 8007df0:	00bfffd4 	movui	r2,65535
 8007df4:	11c06636 	bltu	r2,r7,8007f90 <__umoddi3+0x2f4>
 8007df8:	00803fc4 	movi	r2,255
 8007dfc:	11c12036 	bltu	r2,r7,8008280 <__umoddi3+0x5e4>
 8007e00:	000b883a 	mov	r5,zero
 8007e04:	0005883a 	mov	r2,zero
 8007e08:	3084d83a 	srl	r2,r6,r2
 8007e0c:	01020074 	movhi	r4,2049
 8007e10:	21330104 	addi	r4,r4,-13308
 8007e14:	01c00804 	movi	r7,32
 8007e18:	1105883a 	add	r2,r2,r4
 8007e1c:	10c00003 	ldbu	r3,0(r2)
 8007e20:	28c7883a 	add	r3,r5,r3
 8007e24:	38e5c83a 	sub	r18,r7,r3
 8007e28:	9000941e 	bne	r18,zero,800807c <__umoddi3+0x3e0>
 8007e2c:	35405e36 	bltu	r6,r21,8007fa8 <__umoddi3+0x30c>
 8007e30:	84c05d2e 	bgeu	r16,r19,8007fa8 <__umoddi3+0x30c>
 8007e34:	8011883a 	mov	r8,r16
 8007e38:	a813883a 	mov	r9,r21
 8007e3c:	dc000415 	stw	r16,16(sp)
 8007e40:	dd400515 	stw	r21,20(sp)
 8007e44:	003fdc06 	br	8007db8 <__umoddi3+0x11c>
 8007e48:	00bfffd4 	movui	r2,65535
 8007e4c:	12004a36 	bltu	r2,r8,8007f78 <__umoddi3+0x2dc>
 8007e50:	00803fc4 	movi	r2,255
 8007e54:	12010d36 	bltu	r2,r8,800828c <__umoddi3+0x5f0>
 8007e58:	000b883a 	mov	r5,zero
 8007e5c:	0005883a 	mov	r2,zero
 8007e60:	9884d83a 	srl	r2,r19,r2
 8007e64:	01020074 	movhi	r4,2049
 8007e68:	21330104 	addi	r4,r4,-13308
 8007e6c:	01800804 	movi	r6,32
 8007e70:	1105883a 	add	r2,r2,r4
 8007e74:	10c00003 	ldbu	r3,0(r2)
 8007e78:	28c7883a 	add	r3,r5,r3
 8007e7c:	30c7c83a 	sub	r3,r6,r3
 8007e80:	1800dc1e 	bne	r3,zero,80081f4 <__umoddi3+0x558>
 8007e84:	002d883a 	mov	r22,zero
 8007e88:	982ed43a 	srli	r23,r19,16
 8007e8c:	a809883a 	mov	r4,r21
 8007e90:	9cbfffcc 	andi	r18,r19,65535
 8007e94:	b80b883a 	mov	r5,r23
 8007e98:	80095640 	call	8009564 <__udivsi3>
 8007e9c:	100b883a 	mov	r5,r2
 8007ea0:	9009883a 	mov	r4,r18
 8007ea4:	80095740 	call	8009574 <__mulsi3>
 8007ea8:	a809883a 	mov	r4,r21
 8007eac:	b80b883a 	mov	r5,r23
 8007eb0:	1023883a 	mov	r17,r2
 8007eb4:	800956c0 	call	800956c <__umodsi3>
 8007eb8:	1004943a 	slli	r2,r2,16
 8007ebc:	8006d43a 	srli	r3,r16,16
 8007ec0:	10c4b03a 	or	r2,r2,r3
 8007ec4:	1440032e 	bgeu	r2,r17,8007ed4 <__umoddi3+0x238>
 8007ec8:	14c5883a 	add	r2,r2,r19
 8007ecc:	14c00136 	bltu	r2,r19,8007ed4 <__umoddi3+0x238>
 8007ed0:	14410236 	bltu	r2,r17,80082dc <__umoddi3+0x640>
 8007ed4:	1463c83a 	sub	r17,r2,r17
 8007ed8:	8809883a 	mov	r4,r17
 8007edc:	b80b883a 	mov	r5,r23
 8007ee0:	80095640 	call	8009564 <__udivsi3>
 8007ee4:	9009883a 	mov	r4,r18
 8007ee8:	100b883a 	mov	r5,r2
 8007eec:	80095740 	call	8009574 <__mulsi3>
 8007ef0:	8809883a 	mov	r4,r17
 8007ef4:	b80b883a 	mov	r5,r23
 8007ef8:	102b883a 	mov	r21,r2
 8007efc:	800956c0 	call	800956c <__umodsi3>
 8007f00:	1004943a 	slli	r2,r2,16
 8007f04:	80ffffcc 	andi	r3,r16,65535
 8007f08:	10c4b03a 	or	r2,r2,r3
 8007f0c:	1540042e 	bgeu	r2,r21,8007f20 <__umoddi3+0x284>
 8007f10:	14c5883a 	add	r2,r2,r19
 8007f14:	14c00236 	bltu	r2,r19,8007f20 <__umoddi3+0x284>
 8007f18:	1540012e 	bgeu	r2,r21,8007f20 <__umoddi3+0x284>
 8007f1c:	14c5883a 	add	r2,r2,r19
 8007f20:	1545c83a 	sub	r2,r2,r21
 8007f24:	1584d83a 	srl	r2,r2,r22
 8007f28:	0013883a 	mov	r9,zero
 8007f2c:	d8800415 	stw	r2,16(sp)
 8007f30:	d8c00417 	ldw	r3,16(sp)
 8007f34:	0005883a 	mov	r2,zero
 8007f38:	d8800515 	stw	r2,20(sp)
 8007f3c:	1811883a 	mov	r8,r3
 8007f40:	003f9d06 	br	8007db8 <__umoddi3+0x11c>
 8007f44:	00804034 	movhi	r2,256
 8007f48:	10bfffc4 	addi	r2,r2,-1
 8007f4c:	14c0c636 	bltu	r2,r19,8008268 <__umoddi3+0x5cc>
 8007f50:	01400404 	movi	r5,16
 8007f54:	2805883a 	mov	r2,r5
 8007f58:	003f6c06 	br	8007d0c <__umoddi3+0x70>
 8007f5c:	01000044 	movi	r4,1
 8007f60:	000b883a 	mov	r5,zero
 8007f64:	80095640 	call	8009564 <__udivsi3>
 8007f68:	1027883a 	mov	r19,r2
 8007f6c:	00bfffd4 	movui	r2,65535
 8007f70:	14fff436 	bltu	r2,r19,8007f44 <__umoddi3+0x2a8>
 8007f74:	003f6106 	br	8007cfc <__umoddi3+0x60>
 8007f78:	00804034 	movhi	r2,256
 8007f7c:	10bfffc4 	addi	r2,r2,-1
 8007f80:	1200c536 	bltu	r2,r8,8008298 <__umoddi3+0x5fc>
 8007f84:	01400404 	movi	r5,16
 8007f88:	2805883a 	mov	r2,r5
 8007f8c:	003fb406 	br	8007e60 <__umoddi3+0x1c4>
 8007f90:	00804034 	movhi	r2,256
 8007f94:	10bfffc4 	addi	r2,r2,-1
 8007f98:	11c0c236 	bltu	r2,r7,80082a4 <__umoddi3+0x608>
 8007f9c:	01400404 	movi	r5,16
 8007fa0:	2805883a 	mov	r2,r5
 8007fa4:	003f9806 	br	8007e08 <__umoddi3+0x16c>
 8007fa8:	84c9c83a 	sub	r4,r16,r19
 8007fac:	8105803a 	cmpltu	r2,r16,r4
 8007fb0:	a987c83a 	sub	r3,r21,r6
 8007fb4:	18abc83a 	sub	r21,r3,r2
 8007fb8:	2021883a 	mov	r16,r4
 8007fbc:	003f9d06 	br	8007e34 <__umoddi3+0x198>
 8007fc0:	9ca6983a 	sll	r19,r19,r18
 8007fc4:	3485c83a 	sub	r2,r6,r18
 8007fc8:	a8a2d83a 	srl	r17,r21,r2
 8007fcc:	982ed43a 	srli	r23,r19,16
 8007fd0:	ac86983a 	sll	r3,r21,r18
 8007fd4:	8084d83a 	srl	r2,r16,r2
 8007fd8:	8809883a 	mov	r4,r17
 8007fdc:	b80b883a 	mov	r5,r23
 8007fe0:	18b8b03a 	or	fp,r3,r2
 8007fe4:	9d3fffcc 	andi	r20,r19,65535
 8007fe8:	80095640 	call	8009564 <__udivsi3>
 8007fec:	100b883a 	mov	r5,r2
 8007ff0:	a009883a 	mov	r4,r20
 8007ff4:	80095740 	call	8009574 <__mulsi3>
 8007ff8:	8809883a 	mov	r4,r17
 8007ffc:	b80b883a 	mov	r5,r23
 8008000:	102b883a 	mov	r21,r2
 8008004:	800956c0 	call	800956c <__umodsi3>
 8008008:	1004943a 	slli	r2,r2,16
 800800c:	e006d43a 	srli	r3,fp,16
 8008010:	902d883a 	mov	r22,r18
 8008014:	10c4b03a 	or	r2,r2,r3
 8008018:	1540022e 	bgeu	r2,r21,8008024 <__umoddi3+0x388>
 800801c:	14c5883a 	add	r2,r2,r19
 8008020:	14c0ab2e 	bgeu	r2,r19,80082d0 <__umoddi3+0x634>
 8008024:	1563c83a 	sub	r17,r2,r21
 8008028:	8809883a 	mov	r4,r17
 800802c:	b80b883a 	mov	r5,r23
 8008030:	80095640 	call	8009564 <__udivsi3>
 8008034:	100b883a 	mov	r5,r2
 8008038:	a009883a 	mov	r4,r20
 800803c:	80095740 	call	8009574 <__mulsi3>
 8008040:	8809883a 	mov	r4,r17
 8008044:	b80b883a 	mov	r5,r23
 8008048:	102b883a 	mov	r21,r2
 800804c:	800956c0 	call	800956c <__umodsi3>
 8008050:	1004943a 	slli	r2,r2,16
 8008054:	e0ffffcc 	andi	r3,fp,65535
 8008058:	10c4b03a 	or	r2,r2,r3
 800805c:	1540042e 	bgeu	r2,r21,8008070 <__umoddi3+0x3d4>
 8008060:	14c5883a 	add	r2,r2,r19
 8008064:	14c00236 	bltu	r2,r19,8008070 <__umoddi3+0x3d4>
 8008068:	1540012e 	bgeu	r2,r21,8008070 <__umoddi3+0x3d4>
 800806c:	14c5883a 	add	r2,r2,r19
 8008070:	84a0983a 	sll	r16,r16,r18
 8008074:	156bc83a 	sub	r21,r2,r21
 8008078:	003f3106 	br	8007d40 <__umoddi3+0xa4>
 800807c:	3c8fc83a 	sub	r7,r7,r18
 8008080:	3486983a 	sll	r3,r6,r18
 8008084:	99c4d83a 	srl	r2,r19,r7
 8008088:	a9e2d83a 	srl	r17,r21,r7
 800808c:	ac8c983a 	sll	r6,r21,r18
 8008090:	18acb03a 	or	r22,r3,r2
 8008094:	b02ed43a 	srli	r23,r22,16
 8008098:	81c4d83a 	srl	r2,r16,r7
 800809c:	8809883a 	mov	r4,r17
 80080a0:	b80b883a 	mov	r5,r23
 80080a4:	308cb03a 	or	r6,r6,r2
 80080a8:	d9c00315 	stw	r7,12(sp)
 80080ac:	d9800215 	stw	r6,8(sp)
 80080b0:	b53fffcc 	andi	r20,r22,65535
 80080b4:	80095640 	call	8009564 <__udivsi3>
 80080b8:	100b883a 	mov	r5,r2
 80080bc:	a009883a 	mov	r4,r20
 80080c0:	1039883a 	mov	fp,r2
 80080c4:	80095740 	call	8009574 <__mulsi3>
 80080c8:	8809883a 	mov	r4,r17
 80080cc:	b80b883a 	mov	r5,r23
 80080d0:	102b883a 	mov	r21,r2
 80080d4:	800956c0 	call	800956c <__umodsi3>
 80080d8:	d9000217 	ldw	r4,8(sp)
 80080dc:	1004943a 	slli	r2,r2,16
 80080e0:	9ca6983a 	sll	r19,r19,r18
 80080e4:	2006d43a 	srli	r3,r4,16
 80080e8:	84a0983a 	sll	r16,r16,r18
 80080ec:	dcc00015 	stw	r19,0(sp)
 80080f0:	10c4b03a 	or	r2,r2,r3
 80080f4:	dc000115 	stw	r16,4(sp)
 80080f8:	1540032e 	bgeu	r2,r21,8008108 <__umoddi3+0x46c>
 80080fc:	1585883a 	add	r2,r2,r22
 8008100:	e73fffc4 	addi	fp,fp,-1
 8008104:	15806e2e 	bgeu	r2,r22,80082c0 <__umoddi3+0x624>
 8008108:	1563c83a 	sub	r17,r2,r21
 800810c:	8809883a 	mov	r4,r17
 8008110:	b80b883a 	mov	r5,r23
 8008114:	80095640 	call	8009564 <__udivsi3>
 8008118:	100b883a 	mov	r5,r2
 800811c:	a009883a 	mov	r4,r20
 8008120:	1021883a 	mov	r16,r2
 8008124:	80095740 	call	8009574 <__mulsi3>
 8008128:	b80b883a 	mov	r5,r23
 800812c:	8809883a 	mov	r4,r17
 8008130:	1029883a 	mov	r20,r2
 8008134:	800956c0 	call	800956c <__umodsi3>
 8008138:	d9400217 	ldw	r5,8(sp)
 800813c:	1004943a 	slli	r2,r2,16
 8008140:	28ffffcc 	andi	r3,r5,65535
 8008144:	10c4b03a 	or	r2,r2,r3
 8008148:	1500032e 	bgeu	r2,r20,8008158 <__umoddi3+0x4bc>
 800814c:	1585883a 	add	r2,r2,r22
 8008150:	843fffc4 	addi	r16,r16,-1
 8008154:	1580562e 	bgeu	r2,r22,80082b0 <__umoddi3+0x614>
 8008158:	d9800017 	ldw	r6,0(sp)
 800815c:	e022943a 	slli	r17,fp,16
 8008160:	302ed43a 	srli	r23,r6,16
 8008164:	8462b03a 	or	r17,r16,r17
 8008168:	34ffffcc 	andi	r19,r6,65535
 800816c:	882ad43a 	srli	r21,r17,16
 8008170:	8c7fffcc 	andi	r17,r17,65535
 8008174:	8809883a 	mov	r4,r17
 8008178:	980b883a 	mov	r5,r19
 800817c:	1521c83a 	sub	r16,r2,r20
 8008180:	80095740 	call	8009574 <__mulsi3>
 8008184:	8809883a 	mov	r4,r17
 8008188:	b80b883a 	mov	r5,r23
 800818c:	1029883a 	mov	r20,r2
 8008190:	80095740 	call	8009574 <__mulsi3>
 8008194:	980b883a 	mov	r5,r19
 8008198:	a809883a 	mov	r4,r21
 800819c:	1023883a 	mov	r17,r2
 80081a0:	80095740 	call	8009574 <__mulsi3>
 80081a4:	a809883a 	mov	r4,r21
 80081a8:	b80b883a 	mov	r5,r23
 80081ac:	1027883a 	mov	r19,r2
 80081b0:	80095740 	call	8009574 <__mulsi3>
 80081b4:	100b883a 	mov	r5,r2
 80081b8:	a004d43a 	srli	r2,r20,16
 80081bc:	8ce3883a 	add	r17,r17,r19
 80081c0:	1449883a 	add	r4,r2,r17
 80081c4:	24c0022e 	bgeu	r4,r19,80081d0 <__umoddi3+0x534>
 80081c8:	00800074 	movhi	r2,1
 80081cc:	288b883a 	add	r5,r5,r2
 80081d0:	2004d43a 	srli	r2,r4,16
 80081d4:	2008943a 	slli	r4,r4,16
 80081d8:	a0ffffcc 	andi	r3,r20,65535
 80081dc:	288d883a 	add	r6,r5,r2
 80081e0:	20c9883a 	add	r4,r4,r3
 80081e4:	81800b36 	bltu	r16,r6,8008214 <__umoddi3+0x578>
 80081e8:	81804026 	beq	r16,r6,80082ec <__umoddi3+0x650>
 80081ec:	818dc83a 	sub	r6,r16,r6
 80081f0:	00000f06 	br	8008230 <__umoddi3+0x594>
 80081f4:	30c5c83a 	sub	r2,r6,r3
 80081f8:	182d883a 	mov	r22,r3
 80081fc:	8084d83a 	srl	r2,r16,r2
 8008200:	a8c6983a 	sll	r3,r21,r3
 8008204:	9da6983a 	sll	r19,r19,r22
 8008208:	85a0983a 	sll	r16,r16,r22
 800820c:	18aab03a 	or	r21,r3,r2
 8008210:	003f1d06 	br	8007e88 <__umoddi3+0x1ec>
 8008214:	d8c00017 	ldw	r3,0(sp)
 8008218:	20c5c83a 	sub	r2,r4,r3
 800821c:	2089803a 	cmpltu	r4,r4,r2
 8008220:	3587c83a 	sub	r3,r6,r22
 8008224:	1907c83a 	sub	r3,r3,r4
 8008228:	80cdc83a 	sub	r6,r16,r3
 800822c:	1009883a 	mov	r4,r2
 8008230:	d9400117 	ldw	r5,4(sp)
 8008234:	2905c83a 	sub	r2,r5,r4
 8008238:	2887803a 	cmpltu	r3,r5,r2
 800823c:	30c7c83a 	sub	r3,r6,r3
 8008240:	d9800317 	ldw	r6,12(sp)
 8008244:	1484d83a 	srl	r2,r2,r18
 8008248:	1988983a 	sll	r4,r3,r6
 800824c:	1c86d83a 	srl	r3,r3,r18
 8008250:	2088b03a 	or	r4,r4,r2
 8008254:	2011883a 	mov	r8,r4
 8008258:	1813883a 	mov	r9,r3
 800825c:	d9000415 	stw	r4,16(sp)
 8008260:	d8c00515 	stw	r3,20(sp)
 8008264:	003ed406 	br	8007db8 <__umoddi3+0x11c>
 8008268:	01400604 	movi	r5,24
 800826c:	2805883a 	mov	r2,r5
 8008270:	003ea606 	br	8007d0c <__umoddi3+0x70>
 8008274:	01400204 	movi	r5,8
 8008278:	2805883a 	mov	r2,r5
 800827c:	003ea306 	br	8007d0c <__umoddi3+0x70>
 8008280:	01400204 	movi	r5,8
 8008284:	2805883a 	mov	r2,r5
 8008288:	003edf06 	br	8007e08 <__umoddi3+0x16c>
 800828c:	01400204 	movi	r5,8
 8008290:	2805883a 	mov	r2,r5
 8008294:	003ef206 	br	8007e60 <__umoddi3+0x1c4>
 8008298:	01400604 	movi	r5,24
 800829c:	2805883a 	mov	r2,r5
 80082a0:	003eef06 	br	8007e60 <__umoddi3+0x1c4>
 80082a4:	01400604 	movi	r5,24
 80082a8:	2805883a 	mov	r2,r5
 80082ac:	003ed606 	br	8007e08 <__umoddi3+0x16c>
 80082b0:	153fa92e 	bgeu	r2,r20,8008158 <__umoddi3+0x4bc>
 80082b4:	843fffc4 	addi	r16,r16,-1
 80082b8:	1585883a 	add	r2,r2,r22
 80082bc:	003fa606 	br	8008158 <__umoddi3+0x4bc>
 80082c0:	157f912e 	bgeu	r2,r21,8008108 <__umoddi3+0x46c>
 80082c4:	e73fffc4 	addi	fp,fp,-1
 80082c8:	1585883a 	add	r2,r2,r22
 80082cc:	003f8e06 	br	8008108 <__umoddi3+0x46c>
 80082d0:	157f542e 	bgeu	r2,r21,8008024 <__umoddi3+0x388>
 80082d4:	14c5883a 	add	r2,r2,r19
 80082d8:	003f5206 	br	8008024 <__umoddi3+0x388>
 80082dc:	14c5883a 	add	r2,r2,r19
 80082e0:	003efc06 	br	8007ed4 <__umoddi3+0x238>
 80082e4:	14c5883a 	add	r2,r2,r19
 80082e8:	003ea606 	br	8007d84 <__umoddi3+0xe8>
 80082ec:	d8800117 	ldw	r2,4(sp)
 80082f0:	113fc836 	bltu	r2,r4,8008214 <__umoddi3+0x578>
 80082f4:	000d883a 	mov	r6,zero
 80082f8:	003fcd06 	br	8008230 <__umoddi3+0x594>

080082fc <_fpadd_parts>:
 80082fc:	defff804 	addi	sp,sp,-32
 8008300:	dcc00315 	stw	r19,12(sp)
 8008304:	2027883a 	mov	r19,r4
 8008308:	21000017 	ldw	r4,0(r4)
 800830c:	00c00044 	movi	r3,1
 8008310:	dd400515 	stw	r21,20(sp)
 8008314:	dd000415 	stw	r20,16(sp)
 8008318:	ddc00715 	stw	r23,28(sp)
 800831c:	dd800615 	stw	r22,24(sp)
 8008320:	dc800215 	stw	r18,8(sp)
 8008324:	dc400115 	stw	r17,4(sp)
 8008328:	dc000015 	stw	r16,0(sp)
 800832c:	282b883a 	mov	r21,r5
 8008330:	3029883a 	mov	r20,r6
 8008334:	1900632e 	bgeu	r3,r4,80084c4 <_fpadd_parts+0x1c8>
 8008338:	28800017 	ldw	r2,0(r5)
 800833c:	1880812e 	bgeu	r3,r2,8008544 <_fpadd_parts+0x248>
 8008340:	00c00104 	movi	r3,4
 8008344:	20c0dc26 	beq	r4,r3,80086b8 <_fpadd_parts+0x3bc>
 8008348:	10c07e26 	beq	r2,r3,8008544 <_fpadd_parts+0x248>
 800834c:	00c00084 	movi	r3,2
 8008350:	10c06726 	beq	r2,r3,80084f0 <_fpadd_parts+0x1f4>
 8008354:	20c07b26 	beq	r4,r3,8008544 <_fpadd_parts+0x248>
 8008358:	9dc00217 	ldw	r23,8(r19)
 800835c:	28c00217 	ldw	r3,8(r5)
 8008360:	9c400317 	ldw	r17,12(r19)
 8008364:	2bc00317 	ldw	r15,12(r5)
 8008368:	b8cdc83a 	sub	r6,r23,r3
 800836c:	9c800417 	ldw	r18,16(r19)
 8008370:	2c000417 	ldw	r16,16(r5)
 8008374:	3009883a 	mov	r4,r6
 8008378:	30009716 	blt	r6,zero,80085d8 <_fpadd_parts+0x2dc>
 800837c:	00800fc4 	movi	r2,63
 8008380:	11806b16 	blt	r2,r6,8008530 <_fpadd_parts+0x234>
 8008384:	0100a40e 	bge	zero,r4,8008618 <_fpadd_parts+0x31c>
 8008388:	35bff804 	addi	r22,r6,-32
 800838c:	b000bc16 	blt	r22,zero,8008680 <_fpadd_parts+0x384>
 8008390:	8596d83a 	srl	r11,r16,r22
 8008394:	0019883a 	mov	r12,zero
 8008398:	0013883a 	mov	r9,zero
 800839c:	01000044 	movi	r4,1
 80083a0:	0015883a 	mov	r10,zero
 80083a4:	b000be16 	blt	r22,zero,80086a0 <_fpadd_parts+0x3a4>
 80083a8:	2590983a 	sll	r8,r4,r22
 80083ac:	000f883a 	mov	r7,zero
 80083b0:	00bfffc4 	movi	r2,-1
 80083b4:	3889883a 	add	r4,r7,r2
 80083b8:	408b883a 	add	r5,r8,r2
 80083bc:	21cd803a 	cmpltu	r6,r4,r7
 80083c0:	314b883a 	add	r5,r6,r5
 80083c4:	7904703a 	and	r2,r15,r4
 80083c8:	8146703a 	and	r3,r16,r5
 80083cc:	10c4b03a 	or	r2,r2,r3
 80083d0:	10000226 	beq	r2,zero,80083dc <_fpadd_parts+0xe0>
 80083d4:	02400044 	movi	r9,1
 80083d8:	0015883a 	mov	r10,zero
 80083dc:	5a5eb03a 	or	r15,r11,r9
 80083e0:	62a0b03a 	or	r16,r12,r10
 80083e4:	99400117 	ldw	r5,4(r19)
 80083e8:	a8800117 	ldw	r2,4(r21)
 80083ec:	28806e26 	beq	r5,r2,80085a8 <_fpadd_parts+0x2ac>
 80083f0:	28006626 	beq	r5,zero,800858c <_fpadd_parts+0x290>
 80083f4:	7c45c83a 	sub	r2,r15,r17
 80083f8:	7889803a 	cmpltu	r4,r15,r2
 80083fc:	8487c83a 	sub	r3,r16,r18
 8008400:	1909c83a 	sub	r4,r3,r4
 8008404:	100d883a 	mov	r6,r2
 8008408:	200f883a 	mov	r7,r4
 800840c:	38007716 	blt	r7,zero,80085ec <_fpadd_parts+0x2f0>
 8008410:	a5c00215 	stw	r23,8(r20)
 8008414:	a1c00415 	stw	r7,16(r20)
 8008418:	a0000115 	stw	zero,4(r20)
 800841c:	a1800315 	stw	r6,12(r20)
 8008420:	a2000317 	ldw	r8,12(r20)
 8008424:	a2400417 	ldw	r9,16(r20)
 8008428:	00bfffc4 	movi	r2,-1
 800842c:	408b883a 	add	r5,r8,r2
 8008430:	2a09803a 	cmpltu	r4,r5,r8
 8008434:	488d883a 	add	r6,r9,r2
 8008438:	01c40034 	movhi	r7,4096
 800843c:	39ffffc4 	addi	r7,r7,-1
 8008440:	218d883a 	add	r6,r4,r6
 8008444:	39801736 	bltu	r7,r6,80084a4 <_fpadd_parts+0x1a8>
 8008448:	31c06526 	beq	r6,r7,80085e0 <_fpadd_parts+0x2e4>
 800844c:	a3000217 	ldw	r12,8(r20)
 8008450:	4209883a 	add	r4,r8,r8
 8008454:	00bfffc4 	movi	r2,-1
 8008458:	220f803a 	cmpltu	r7,r4,r8
 800845c:	4a4b883a 	add	r5,r9,r9
 8008460:	394f883a 	add	r7,r7,r5
 8008464:	2095883a 	add	r10,r4,r2
 8008468:	3897883a 	add	r11,r7,r2
 800846c:	510d803a 	cmpltu	r6,r10,r4
 8008470:	6099883a 	add	r12,r12,r2
 8008474:	32d7883a 	add	r11,r6,r11
 8008478:	00840034 	movhi	r2,4096
 800847c:	10bfffc4 	addi	r2,r2,-1
 8008480:	2011883a 	mov	r8,r4
 8008484:	3813883a 	mov	r9,r7
 8008488:	a1000315 	stw	r4,12(r20)
 800848c:	a1c00415 	stw	r7,16(r20)
 8008490:	a3000215 	stw	r12,8(r20)
 8008494:	12c00336 	bltu	r2,r11,80084a4 <_fpadd_parts+0x1a8>
 8008498:	58bfed1e 	bne	r11,r2,8008450 <_fpadd_parts+0x154>
 800849c:	00bfff84 	movi	r2,-2
 80084a0:	12bfeb2e 	bgeu	r2,r10,8008450 <_fpadd_parts+0x154>
 80084a4:	a2800417 	ldw	r10,16(r20)
 80084a8:	008000c4 	movi	r2,3
 80084ac:	00c80034 	movhi	r3,8192
 80084b0:	18ffffc4 	addi	r3,r3,-1
 80084b4:	a2400317 	ldw	r9,12(r20)
 80084b8:	a0800015 	stw	r2,0(r20)
 80084bc:	1a802336 	bltu	r3,r10,800854c <_fpadd_parts+0x250>
 80084c0:	a027883a 	mov	r19,r20
 80084c4:	9805883a 	mov	r2,r19
 80084c8:	ddc00717 	ldw	r23,28(sp)
 80084cc:	dd800617 	ldw	r22,24(sp)
 80084d0:	dd400517 	ldw	r21,20(sp)
 80084d4:	dd000417 	ldw	r20,16(sp)
 80084d8:	dcc00317 	ldw	r19,12(sp)
 80084dc:	dc800217 	ldw	r18,8(sp)
 80084e0:	dc400117 	ldw	r17,4(sp)
 80084e4:	dc000017 	ldw	r16,0(sp)
 80084e8:	dec00804 	addi	sp,sp,32
 80084ec:	f800283a 	ret
 80084f0:	20fff41e 	bne	r4,r3,80084c4 <_fpadd_parts+0x1c8>
 80084f4:	31000015 	stw	r4,0(r6)
 80084f8:	98800117 	ldw	r2,4(r19)
 80084fc:	30800115 	stw	r2,4(r6)
 8008500:	98c00217 	ldw	r3,8(r19)
 8008504:	30c00215 	stw	r3,8(r6)
 8008508:	98800317 	ldw	r2,12(r19)
 800850c:	30800315 	stw	r2,12(r6)
 8008510:	98c00417 	ldw	r3,16(r19)
 8008514:	30c00415 	stw	r3,16(r6)
 8008518:	98800117 	ldw	r2,4(r19)
 800851c:	28c00117 	ldw	r3,4(r5)
 8008520:	3027883a 	mov	r19,r6
 8008524:	10c4703a 	and	r2,r2,r3
 8008528:	30800115 	stw	r2,4(r6)
 800852c:	003fe506 	br	80084c4 <_fpadd_parts+0x1c8>
 8008530:	1dc02616 	blt	r3,r23,80085cc <_fpadd_parts+0x2d0>
 8008534:	0023883a 	mov	r17,zero
 8008538:	182f883a 	mov	r23,r3
 800853c:	0025883a 	mov	r18,zero
 8008540:	003fa806 	br	80083e4 <_fpadd_parts+0xe8>
 8008544:	a827883a 	mov	r19,r21
 8008548:	003fde06 	br	80084c4 <_fpadd_parts+0x1c8>
 800854c:	01800044 	movi	r6,1
 8008550:	500497fa 	slli	r2,r10,31
 8008554:	4808d07a 	srli	r4,r9,1
 8008558:	518ad83a 	srl	r5,r10,r6
 800855c:	a2000217 	ldw	r8,8(r20)
 8008560:	1108b03a 	or	r4,r2,r4
 8008564:	0007883a 	mov	r3,zero
 8008568:	4984703a 	and	r2,r9,r6
 800856c:	208cb03a 	or	r6,r4,r2
 8008570:	28ceb03a 	or	r7,r5,r3
 8008574:	42000044 	addi	r8,r8,1
 8008578:	a027883a 	mov	r19,r20
 800857c:	a1c00415 	stw	r7,16(r20)
 8008580:	a2000215 	stw	r8,8(r20)
 8008584:	a1800315 	stw	r6,12(r20)
 8008588:	003fce06 	br	80084c4 <_fpadd_parts+0x1c8>
 800858c:	8bc5c83a 	sub	r2,r17,r15
 8008590:	8889803a 	cmpltu	r4,r17,r2
 8008594:	9407c83a 	sub	r3,r18,r16
 8008598:	1909c83a 	sub	r4,r3,r4
 800859c:	100d883a 	mov	r6,r2
 80085a0:	200f883a 	mov	r7,r4
 80085a4:	003f9906 	br	800840c <_fpadd_parts+0x110>
 80085a8:	7c45883a 	add	r2,r15,r17
 80085ac:	13c9803a 	cmpltu	r4,r2,r15
 80085b0:	8487883a 	add	r3,r16,r18
 80085b4:	20c9883a 	add	r4,r4,r3
 80085b8:	a1400115 	stw	r5,4(r20)
 80085bc:	a5c00215 	stw	r23,8(r20)
 80085c0:	a0800315 	stw	r2,12(r20)
 80085c4:	a1000415 	stw	r4,16(r20)
 80085c8:	003fb606 	br	80084a4 <_fpadd_parts+0x1a8>
 80085cc:	001f883a 	mov	r15,zero
 80085d0:	0021883a 	mov	r16,zero
 80085d4:	003f8306 	br	80083e4 <_fpadd_parts+0xe8>
 80085d8:	018dc83a 	sub	r6,zero,r6
 80085dc:	003f6706 	br	800837c <_fpadd_parts+0x80>
 80085e0:	00bfff84 	movi	r2,-2
 80085e4:	117faf36 	bltu	r2,r5,80084a4 <_fpadd_parts+0x1a8>
 80085e8:	003f9806 	br	800844c <_fpadd_parts+0x150>
 80085ec:	0005883a 	mov	r2,zero
 80085f0:	1189c83a 	sub	r4,r2,r6
 80085f4:	1105803a 	cmpltu	r2,r2,r4
 80085f8:	01cbc83a 	sub	r5,zero,r7
 80085fc:	2885c83a 	sub	r2,r5,r2
 8008600:	01800044 	movi	r6,1
 8008604:	a1800115 	stw	r6,4(r20)
 8008608:	a5c00215 	stw	r23,8(r20)
 800860c:	a1000315 	stw	r4,12(r20)
 8008610:	a0800415 	stw	r2,16(r20)
 8008614:	003f8206 	br	8008420 <_fpadd_parts+0x124>
 8008618:	203f7226 	beq	r4,zero,80083e4 <_fpadd_parts+0xe8>
 800861c:	35bff804 	addi	r22,r6,-32
 8008620:	b9af883a 	add	r23,r23,r6
 8008624:	b0003116 	blt	r22,zero,80086ec <_fpadd_parts+0x3f0>
 8008628:	959ad83a 	srl	r13,r18,r22
 800862c:	001d883a 	mov	r14,zero
 8008630:	000f883a 	mov	r7,zero
 8008634:	01000044 	movi	r4,1
 8008638:	0011883a 	mov	r8,zero
 800863c:	b0002516 	blt	r22,zero,80086d4 <_fpadd_parts+0x3d8>
 8008640:	2594983a 	sll	r10,r4,r22
 8008644:	0013883a 	mov	r9,zero
 8008648:	00bfffc4 	movi	r2,-1
 800864c:	4889883a 	add	r4,r9,r2
 8008650:	508b883a 	add	r5,r10,r2
 8008654:	224d803a 	cmpltu	r6,r4,r9
 8008658:	314b883a 	add	r5,r6,r5
 800865c:	8904703a 	and	r2,r17,r4
 8008660:	9146703a 	and	r3,r18,r5
 8008664:	10c4b03a 	or	r2,r2,r3
 8008668:	10000226 	beq	r2,zero,8008674 <_fpadd_parts+0x378>
 800866c:	01c00044 	movi	r7,1
 8008670:	0011883a 	mov	r8,zero
 8008674:	69e2b03a 	or	r17,r13,r7
 8008678:	7224b03a 	or	r18,r14,r8
 800867c:	003f5906 	br	80083e4 <_fpadd_parts+0xe8>
 8008680:	8407883a 	add	r3,r16,r16
 8008684:	008007c4 	movi	r2,31
 8008688:	1185c83a 	sub	r2,r2,r6
 800868c:	1886983a 	sll	r3,r3,r2
 8008690:	7996d83a 	srl	r11,r15,r6
 8008694:	8198d83a 	srl	r12,r16,r6
 8008698:	1ad6b03a 	or	r11,r3,r11
 800869c:	003f3e06 	br	8008398 <_fpadd_parts+0x9c>
 80086a0:	2006d07a 	srli	r3,r4,1
 80086a4:	008007c4 	movi	r2,31
 80086a8:	1185c83a 	sub	r2,r2,r6
 80086ac:	1890d83a 	srl	r8,r3,r2
 80086b0:	218e983a 	sll	r7,r4,r6
 80086b4:	003f3e06 	br	80083b0 <_fpadd_parts+0xb4>
 80086b8:	113f821e 	bne	r2,r4,80084c4 <_fpadd_parts+0x1c8>
 80086bc:	28c00117 	ldw	r3,4(r5)
 80086c0:	98800117 	ldw	r2,4(r19)
 80086c4:	10ff7f26 	beq	r2,r3,80084c4 <_fpadd_parts+0x1c8>
 80086c8:	04c20074 	movhi	r19,2049
 80086cc:	9cf2fc04 	addi	r19,r19,-13328
 80086d0:	003f7c06 	br	80084c4 <_fpadd_parts+0x1c8>
 80086d4:	2006d07a 	srli	r3,r4,1
 80086d8:	008007c4 	movi	r2,31
 80086dc:	1185c83a 	sub	r2,r2,r6
 80086e0:	1894d83a 	srl	r10,r3,r2
 80086e4:	2192983a 	sll	r9,r4,r6
 80086e8:	003fd706 	br	8008648 <_fpadd_parts+0x34c>
 80086ec:	9487883a 	add	r3,r18,r18
 80086f0:	008007c4 	movi	r2,31
 80086f4:	1185c83a 	sub	r2,r2,r6
 80086f8:	1886983a 	sll	r3,r3,r2
 80086fc:	899ad83a 	srl	r13,r17,r6
 8008700:	919cd83a 	srl	r14,r18,r6
 8008704:	1b5ab03a 	or	r13,r3,r13
 8008708:	003fc906 	br	8008630 <_fpadd_parts+0x334>

0800870c <__subdf3>:
 800870c:	deffea04 	addi	sp,sp,-88
 8008710:	dcc01415 	stw	r19,80(sp)
 8008714:	dcc00404 	addi	r19,sp,16
 8008718:	2011883a 	mov	r8,r4
 800871c:	2813883a 	mov	r9,r5
 8008720:	dc401315 	stw	r17,76(sp)
 8008724:	d809883a 	mov	r4,sp
 8008728:	980b883a 	mov	r5,r19
 800872c:	dc400904 	addi	r17,sp,36
 8008730:	dfc01515 	stw	ra,84(sp)
 8008734:	da400115 	stw	r9,4(sp)
 8008738:	d9c00315 	stw	r7,12(sp)
 800873c:	da000015 	stw	r8,0(sp)
 8008740:	d9800215 	stw	r6,8(sp)
 8008744:	8009a640 	call	8009a64 <__unpack_d>
 8008748:	d9000204 	addi	r4,sp,8
 800874c:	880b883a 	mov	r5,r17
 8008750:	8009a640 	call	8009a64 <__unpack_d>
 8008754:	d8800a17 	ldw	r2,40(sp)
 8008758:	880b883a 	mov	r5,r17
 800875c:	9809883a 	mov	r4,r19
 8008760:	d9800e04 	addi	r6,sp,56
 8008764:	1080005c 	xori	r2,r2,1
 8008768:	d8800a15 	stw	r2,40(sp)
 800876c:	80082fc0 	call	80082fc <_fpadd_parts>
 8008770:	1009883a 	mov	r4,r2
 8008774:	80097500 	call	8009750 <__pack_d>
 8008778:	dfc01517 	ldw	ra,84(sp)
 800877c:	dcc01417 	ldw	r19,80(sp)
 8008780:	dc401317 	ldw	r17,76(sp)
 8008784:	dec01604 	addi	sp,sp,88
 8008788:	f800283a 	ret

0800878c <__adddf3>:
 800878c:	deffea04 	addi	sp,sp,-88
 8008790:	dcc01415 	stw	r19,80(sp)
 8008794:	dcc00404 	addi	r19,sp,16
 8008798:	2011883a 	mov	r8,r4
 800879c:	2813883a 	mov	r9,r5
 80087a0:	dc401315 	stw	r17,76(sp)
 80087a4:	d809883a 	mov	r4,sp
 80087a8:	980b883a 	mov	r5,r19
 80087ac:	dc400904 	addi	r17,sp,36
 80087b0:	dfc01515 	stw	ra,84(sp)
 80087b4:	da400115 	stw	r9,4(sp)
 80087b8:	d9c00315 	stw	r7,12(sp)
 80087bc:	da000015 	stw	r8,0(sp)
 80087c0:	d9800215 	stw	r6,8(sp)
 80087c4:	8009a640 	call	8009a64 <__unpack_d>
 80087c8:	d9000204 	addi	r4,sp,8
 80087cc:	880b883a 	mov	r5,r17
 80087d0:	8009a640 	call	8009a64 <__unpack_d>
 80087d4:	d9800e04 	addi	r6,sp,56
 80087d8:	9809883a 	mov	r4,r19
 80087dc:	880b883a 	mov	r5,r17
 80087e0:	80082fc0 	call	80082fc <_fpadd_parts>
 80087e4:	1009883a 	mov	r4,r2
 80087e8:	80097500 	call	8009750 <__pack_d>
 80087ec:	dfc01517 	ldw	ra,84(sp)
 80087f0:	dcc01417 	ldw	r19,80(sp)
 80087f4:	dc401317 	ldw	r17,76(sp)
 80087f8:	dec01604 	addi	sp,sp,88
 80087fc:	f800283a 	ret

08008800 <__muldf3>:
 8008800:	deffe004 	addi	sp,sp,-128
 8008804:	dc401815 	stw	r17,96(sp)
 8008808:	dc400404 	addi	r17,sp,16
 800880c:	2011883a 	mov	r8,r4
 8008810:	2813883a 	mov	r9,r5
 8008814:	dc001715 	stw	r16,92(sp)
 8008818:	d809883a 	mov	r4,sp
 800881c:	880b883a 	mov	r5,r17
 8008820:	dc000904 	addi	r16,sp,36
 8008824:	dfc01f15 	stw	ra,124(sp)
 8008828:	da400115 	stw	r9,4(sp)
 800882c:	d9c00315 	stw	r7,12(sp)
 8008830:	da000015 	stw	r8,0(sp)
 8008834:	d9800215 	stw	r6,8(sp)
 8008838:	ddc01e15 	stw	r23,120(sp)
 800883c:	dd801d15 	stw	r22,116(sp)
 8008840:	dd401c15 	stw	r21,112(sp)
 8008844:	dd001b15 	stw	r20,108(sp)
 8008848:	dcc01a15 	stw	r19,104(sp)
 800884c:	dc801915 	stw	r18,100(sp)
 8008850:	8009a640 	call	8009a64 <__unpack_d>
 8008854:	d9000204 	addi	r4,sp,8
 8008858:	800b883a 	mov	r5,r16
 800885c:	8009a640 	call	8009a64 <__unpack_d>
 8008860:	d9000417 	ldw	r4,16(sp)
 8008864:	00800044 	movi	r2,1
 8008868:	1100102e 	bgeu	r2,r4,80088ac <__muldf3+0xac>
 800886c:	d8c00917 	ldw	r3,36(sp)
 8008870:	10c0062e 	bgeu	r2,r3,800888c <__muldf3+0x8c>
 8008874:	00800104 	movi	r2,4
 8008878:	20800a26 	beq	r4,r2,80088a4 <__muldf3+0xa4>
 800887c:	1880cc26 	beq	r3,r2,8008bb0 <__muldf3+0x3b0>
 8008880:	00800084 	movi	r2,2
 8008884:	20800926 	beq	r4,r2,80088ac <__muldf3+0xac>
 8008888:	1880191e 	bne	r3,r2,80088f0 <__muldf3+0xf0>
 800888c:	d8c00a17 	ldw	r3,40(sp)
 8008890:	d8800517 	ldw	r2,20(sp)
 8008894:	8009883a 	mov	r4,r16
 8008898:	10c4c03a 	cmpne	r2,r2,r3
 800889c:	d8800a15 	stw	r2,40(sp)
 80088a0:	00000706 	br	80088c0 <__muldf3+0xc0>
 80088a4:	00800084 	movi	r2,2
 80088a8:	1880c326 	beq	r3,r2,8008bb8 <__muldf3+0x3b8>
 80088ac:	d8800517 	ldw	r2,20(sp)
 80088b0:	d8c00a17 	ldw	r3,40(sp)
 80088b4:	8809883a 	mov	r4,r17
 80088b8:	10c4c03a 	cmpne	r2,r2,r3
 80088bc:	d8800515 	stw	r2,20(sp)
 80088c0:	80097500 	call	8009750 <__pack_d>
 80088c4:	dfc01f17 	ldw	ra,124(sp)
 80088c8:	ddc01e17 	ldw	r23,120(sp)
 80088cc:	dd801d17 	ldw	r22,116(sp)
 80088d0:	dd401c17 	ldw	r21,112(sp)
 80088d4:	dd001b17 	ldw	r20,108(sp)
 80088d8:	dcc01a17 	ldw	r19,104(sp)
 80088dc:	dc801917 	ldw	r18,100(sp)
 80088e0:	dc401817 	ldw	r17,96(sp)
 80088e4:	dc001717 	ldw	r16,92(sp)
 80088e8:	dec02004 	addi	sp,sp,128
 80088ec:	f800283a 	ret
 80088f0:	dd800717 	ldw	r22,28(sp)
 80088f4:	dc800c17 	ldw	r18,48(sp)
 80088f8:	002b883a 	mov	r21,zero
 80088fc:	0023883a 	mov	r17,zero
 8008900:	a80b883a 	mov	r5,r21
 8008904:	b00d883a 	mov	r6,r22
 8008908:	880f883a 	mov	r7,r17
 800890c:	ddc00817 	ldw	r23,32(sp)
 8008910:	dcc00d17 	ldw	r19,52(sp)
 8008914:	9009883a 	mov	r4,r18
 8008918:	80095ac0 	call	80095ac <__muldi3>
 800891c:	001b883a 	mov	r13,zero
 8008920:	680f883a 	mov	r7,r13
 8008924:	b009883a 	mov	r4,r22
 8008928:	000b883a 	mov	r5,zero
 800892c:	980d883a 	mov	r6,r19
 8008930:	b82d883a 	mov	r22,r23
 8008934:	002f883a 	mov	r23,zero
 8008938:	db401615 	stw	r13,88(sp)
 800893c:	d8801315 	stw	r2,76(sp)
 8008940:	d8c01415 	stw	r3,80(sp)
 8008944:	dcc01515 	stw	r19,84(sp)
 8008948:	80095ac0 	call	80095ac <__muldi3>
 800894c:	b00d883a 	mov	r6,r22
 8008950:	000b883a 	mov	r5,zero
 8008954:	9009883a 	mov	r4,r18
 8008958:	b80f883a 	mov	r7,r23
 800895c:	1021883a 	mov	r16,r2
 8008960:	1823883a 	mov	r17,r3
 8008964:	80095ac0 	call	80095ac <__muldi3>
 8008968:	8085883a 	add	r2,r16,r2
 800896c:	140d803a 	cmpltu	r6,r2,r16
 8008970:	88c7883a 	add	r3,r17,r3
 8008974:	30cd883a 	add	r6,r6,r3
 8008978:	1029883a 	mov	r20,r2
 800897c:	302b883a 	mov	r21,r6
 8008980:	da801317 	ldw	r10,76(sp)
 8008984:	dac01417 	ldw	r11,80(sp)
 8008988:	db001517 	ldw	r12,84(sp)
 800898c:	db401617 	ldw	r13,88(sp)
 8008990:	3440612e 	bgeu	r6,r17,8008b18 <__muldf3+0x318>
 8008994:	0009883a 	mov	r4,zero
 8008998:	5105883a 	add	r2,r10,r4
 800899c:	128d803a 	cmpltu	r6,r2,r10
 80089a0:	5d07883a 	add	r3,r11,r20
 80089a4:	30cd883a 	add	r6,r6,r3
 80089a8:	0021883a 	mov	r16,zero
 80089ac:	04400044 	movi	r17,1
 80089b0:	1025883a 	mov	r18,r2
 80089b4:	3027883a 	mov	r19,r6
 80089b8:	32c06236 	bltu	r6,r11,8008b44 <__muldf3+0x344>
 80089bc:	59807a26 	beq	r11,r6,8008ba8 <__muldf3+0x3a8>
 80089c0:	680b883a 	mov	r5,r13
 80089c4:	b80f883a 	mov	r7,r23
 80089c8:	6009883a 	mov	r4,r12
 80089cc:	b00d883a 	mov	r6,r22
 80089d0:	80095ac0 	call	80095ac <__muldi3>
 80089d4:	1009883a 	mov	r4,r2
 80089d8:	000f883a 	mov	r7,zero
 80089dc:	1545883a 	add	r2,r2,r21
 80089e0:	1111803a 	cmpltu	r8,r2,r4
 80089e4:	19c7883a 	add	r3,r3,r7
 80089e8:	40c7883a 	add	r3,r8,r3
 80089ec:	88cb883a 	add	r5,r17,r3
 80089f0:	d8c00617 	ldw	r3,24(sp)
 80089f4:	8089883a 	add	r4,r16,r2
 80089f8:	d8800b17 	ldw	r2,44(sp)
 80089fc:	18c00104 	addi	r3,r3,4
 8008a00:	240d803a 	cmpltu	r6,r4,r16
 8008a04:	10c7883a 	add	r3,r2,r3
 8008a08:	2013883a 	mov	r9,r4
 8008a0c:	d8800a17 	ldw	r2,40(sp)
 8008a10:	d9000517 	ldw	r4,20(sp)
 8008a14:	314d883a 	add	r6,r6,r5
 8008a18:	3015883a 	mov	r10,r6
 8008a1c:	2088c03a 	cmpne	r4,r4,r2
 8008a20:	00880034 	movhi	r2,8192
 8008a24:	10bfffc4 	addi	r2,r2,-1
 8008a28:	d9000f15 	stw	r4,60(sp)
 8008a2c:	d8c01015 	stw	r3,64(sp)
 8008a30:	1180162e 	bgeu	r2,r6,8008a8c <__muldf3+0x28c>
 8008a34:	1811883a 	mov	r8,r3
 8008a38:	101f883a 	mov	r15,r2
 8008a3c:	980497fa 	slli	r2,r19,31
 8008a40:	9016d07a 	srli	r11,r18,1
 8008a44:	500697fa 	slli	r3,r10,31
 8008a48:	480cd07a 	srli	r6,r9,1
 8008a4c:	500ed07a 	srli	r7,r10,1
 8008a50:	12d6b03a 	or	r11,r2,r11
 8008a54:	00800044 	movi	r2,1
 8008a58:	198cb03a 	or	r6,r3,r6
 8008a5c:	4888703a 	and	r4,r9,r2
 8008a60:	9818d07a 	srli	r12,r19,1
 8008a64:	001b883a 	mov	r13,zero
 8008a68:	03a00034 	movhi	r14,32768
 8008a6c:	3013883a 	mov	r9,r6
 8008a70:	3815883a 	mov	r10,r7
 8008a74:	4091883a 	add	r8,r8,r2
 8008a78:	20000226 	beq	r4,zero,8008a84 <__muldf3+0x284>
 8008a7c:	5b64b03a 	or	r18,r11,r13
 8008a80:	63a6b03a 	or	r19,r12,r14
 8008a84:	7abfed36 	bltu	r15,r10,8008a3c <__muldf3+0x23c>
 8008a88:	da001015 	stw	r8,64(sp)
 8008a8c:	00840034 	movhi	r2,4096
 8008a90:	10bfffc4 	addi	r2,r2,-1
 8008a94:	12801436 	bltu	r2,r10,8008ae8 <__muldf3+0x2e8>
 8008a98:	da001017 	ldw	r8,64(sp)
 8008a9c:	101f883a 	mov	r15,r2
 8008aa0:	4a45883a 	add	r2,r9,r9
 8008aa4:	124d803a 	cmpltu	r6,r2,r9
 8008aa8:	5287883a 	add	r3,r10,r10
 8008aac:	9497883a 	add	r11,r18,r18
 8008ab0:	5c8f803a 	cmpltu	r7,r11,r18
 8008ab4:	9cd9883a 	add	r12,r19,r19
 8008ab8:	01000044 	movi	r4,1
 8008abc:	30cd883a 	add	r6,r6,r3
 8008ac0:	3b0f883a 	add	r7,r7,r12
 8008ac4:	423fffc4 	addi	r8,r8,-1
 8008ac8:	1013883a 	mov	r9,r2
 8008acc:	3015883a 	mov	r10,r6
 8008ad0:	111ab03a 	or	r13,r2,r4
 8008ad4:	98003016 	blt	r19,zero,8008b98 <__muldf3+0x398>
 8008ad8:	5825883a 	mov	r18,r11
 8008adc:	3827883a 	mov	r19,r7
 8008ae0:	7abfef2e 	bgeu	r15,r10,8008aa0 <__muldf3+0x2a0>
 8008ae4:	da001015 	stw	r8,64(sp)
 8008ae8:	00803fc4 	movi	r2,255
 8008aec:	488e703a 	and	r7,r9,r2
 8008af0:	00802004 	movi	r2,128
 8008af4:	0007883a 	mov	r3,zero
 8008af8:	0011883a 	mov	r8,zero
 8008afc:	38801826 	beq	r7,r2,8008b60 <__muldf3+0x360>
 8008b00:	008000c4 	movi	r2,3
 8008b04:	d9000e04 	addi	r4,sp,56
 8008b08:	da801215 	stw	r10,72(sp)
 8008b0c:	d8800e15 	stw	r2,56(sp)
 8008b10:	da401115 	stw	r9,68(sp)
 8008b14:	003f6a06 	br	80088c0 <__muldf3+0xc0>
 8008b18:	89802126 	beq	r17,r6,8008ba0 <__muldf3+0x3a0>
 8008b1c:	0009883a 	mov	r4,zero
 8008b20:	5105883a 	add	r2,r10,r4
 8008b24:	128d803a 	cmpltu	r6,r2,r10
 8008b28:	5d07883a 	add	r3,r11,r20
 8008b2c:	30cd883a 	add	r6,r6,r3
 8008b30:	0021883a 	mov	r16,zero
 8008b34:	0023883a 	mov	r17,zero
 8008b38:	1025883a 	mov	r18,r2
 8008b3c:	3027883a 	mov	r19,r6
 8008b40:	32ff9e2e 	bgeu	r6,r11,80089bc <__muldf3+0x1bc>
 8008b44:	00800044 	movi	r2,1
 8008b48:	8089883a 	add	r4,r16,r2
 8008b4c:	240d803a 	cmpltu	r6,r4,r16
 8008b50:	344d883a 	add	r6,r6,r17
 8008b54:	2021883a 	mov	r16,r4
 8008b58:	3023883a 	mov	r17,r6
 8008b5c:	003f9806 	br	80089c0 <__muldf3+0x1c0>
 8008b60:	403fe71e 	bne	r8,zero,8008b00 <__muldf3+0x300>
 8008b64:	01004004 	movi	r4,256
 8008b68:	4904703a 	and	r2,r9,r4
 8008b6c:	10c4b03a 	or	r2,r2,r3
 8008b70:	103fe31e 	bne	r2,zero,8008b00 <__muldf3+0x300>
 8008b74:	94c4b03a 	or	r2,r18,r19
 8008b78:	103fe126 	beq	r2,zero,8008b00 <__muldf3+0x300>
 8008b7c:	49c5883a 	add	r2,r9,r7
 8008b80:	1251803a 	cmpltu	r8,r2,r9
 8008b84:	4291883a 	add	r8,r8,r10
 8008b88:	013fc004 	movi	r4,-256
 8008b8c:	1112703a 	and	r9,r2,r4
 8008b90:	4015883a 	mov	r10,r8
 8008b94:	003fda06 	br	8008b00 <__muldf3+0x300>
 8008b98:	6813883a 	mov	r9,r13
 8008b9c:	003fce06 	br	8008ad8 <__muldf3+0x2d8>
 8008ba0:	143f7c36 	bltu	r2,r16,8008994 <__muldf3+0x194>
 8008ba4:	003fdd06 	br	8008b1c <__muldf3+0x31c>
 8008ba8:	12bf852e 	bgeu	r2,r10,80089c0 <__muldf3+0x1c0>
 8008bac:	003fe506 	br	8008b44 <__muldf3+0x344>
 8008bb0:	00800084 	movi	r2,2
 8008bb4:	20bf351e 	bne	r4,r2,800888c <__muldf3+0x8c>
 8008bb8:	01020074 	movhi	r4,2049
 8008bbc:	2132fc04 	addi	r4,r4,-13328
 8008bc0:	003f3f06 	br	80088c0 <__muldf3+0xc0>

08008bc4 <__divdf3>:
 8008bc4:	deffed04 	addi	sp,sp,-76
 8008bc8:	dcc01115 	stw	r19,68(sp)
 8008bcc:	dcc00404 	addi	r19,sp,16
 8008bd0:	2011883a 	mov	r8,r4
 8008bd4:	2813883a 	mov	r9,r5
 8008bd8:	dc000e15 	stw	r16,56(sp)
 8008bdc:	d809883a 	mov	r4,sp
 8008be0:	980b883a 	mov	r5,r19
 8008be4:	dc000904 	addi	r16,sp,36
 8008be8:	dfc01215 	stw	ra,72(sp)
 8008bec:	da400115 	stw	r9,4(sp)
 8008bf0:	d9c00315 	stw	r7,12(sp)
 8008bf4:	da000015 	stw	r8,0(sp)
 8008bf8:	d9800215 	stw	r6,8(sp)
 8008bfc:	dc801015 	stw	r18,64(sp)
 8008c00:	dc400f15 	stw	r17,60(sp)
 8008c04:	8009a640 	call	8009a64 <__unpack_d>
 8008c08:	d9000204 	addi	r4,sp,8
 8008c0c:	800b883a 	mov	r5,r16
 8008c10:	8009a640 	call	8009a64 <__unpack_d>
 8008c14:	d9000417 	ldw	r4,16(sp)
 8008c18:	00800044 	movi	r2,1
 8008c1c:	11000b2e 	bgeu	r2,r4,8008c4c <__divdf3+0x88>
 8008c20:	d9400917 	ldw	r5,36(sp)
 8008c24:	1140762e 	bgeu	r2,r5,8008e00 <__divdf3+0x23c>
 8008c28:	d8800517 	ldw	r2,20(sp)
 8008c2c:	d8c00a17 	ldw	r3,40(sp)
 8008c30:	01800104 	movi	r6,4
 8008c34:	10c4f03a 	xor	r2,r2,r3
 8008c38:	d8800515 	stw	r2,20(sp)
 8008c3c:	21800226 	beq	r4,r6,8008c48 <__divdf3+0x84>
 8008c40:	00800084 	movi	r2,2
 8008c44:	2080141e 	bne	r4,r2,8008c98 <__divdf3+0xd4>
 8008c48:	29000926 	beq	r5,r4,8008c70 <__divdf3+0xac>
 8008c4c:	9809883a 	mov	r4,r19
 8008c50:	80097500 	call	8009750 <__pack_d>
 8008c54:	dfc01217 	ldw	ra,72(sp)
 8008c58:	dcc01117 	ldw	r19,68(sp)
 8008c5c:	dc801017 	ldw	r18,64(sp)
 8008c60:	dc400f17 	ldw	r17,60(sp)
 8008c64:	dc000e17 	ldw	r16,56(sp)
 8008c68:	dec01304 	addi	sp,sp,76
 8008c6c:	f800283a 	ret
 8008c70:	01020074 	movhi	r4,2049
 8008c74:	2132fc04 	addi	r4,r4,-13328
 8008c78:	80097500 	call	8009750 <__pack_d>
 8008c7c:	dfc01217 	ldw	ra,72(sp)
 8008c80:	dcc01117 	ldw	r19,68(sp)
 8008c84:	dc801017 	ldw	r18,64(sp)
 8008c88:	dc400f17 	ldw	r17,60(sp)
 8008c8c:	dc000e17 	ldw	r16,56(sp)
 8008c90:	dec01304 	addi	sp,sp,76
 8008c94:	f800283a 	ret
 8008c98:	29805b26 	beq	r5,r6,8008e08 <__divdf3+0x244>
 8008c9c:	28802d26 	beq	r5,r2,8008d54 <__divdf3+0x190>
 8008ca0:	d8c00617 	ldw	r3,24(sp)
 8008ca4:	d8800b17 	ldw	r2,44(sp)
 8008ca8:	d9c00817 	ldw	r7,32(sp)
 8008cac:	dc400d17 	ldw	r17,52(sp)
 8008cb0:	188bc83a 	sub	r5,r3,r2
 8008cb4:	d9800717 	ldw	r6,28(sp)
 8008cb8:	dc000c17 	ldw	r16,48(sp)
 8008cbc:	d9400615 	stw	r5,24(sp)
 8008cc0:	3c403836 	bltu	r7,r17,8008da4 <__divdf3+0x1e0>
 8008cc4:	89c03626 	beq	r17,r7,8008da0 <__divdf3+0x1dc>
 8008cc8:	0015883a 	mov	r10,zero
 8008ccc:	001d883a 	mov	r14,zero
 8008cd0:	02c40034 	movhi	r11,4096
 8008cd4:	001f883a 	mov	r15,zero
 8008cd8:	003f883a 	mov	ra,zero
 8008cdc:	04800f44 	movi	r18,61
 8008ce0:	00000f06 	br	8008d20 <__divdf3+0x15c>
 8008ce4:	601d883a 	mov	r14,r12
 8008ce8:	681f883a 	mov	r15,r13
 8008cec:	400d883a 	mov	r6,r8
 8008cf0:	100f883a 	mov	r7,r2
 8008cf4:	3191883a 	add	r8,r6,r6
 8008cf8:	5808d07a 	srli	r4,r11,1
 8008cfc:	4185803a 	cmpltu	r2,r8,r6
 8008d00:	39d3883a 	add	r9,r7,r7
 8008d04:	28c6b03a 	or	r3,r5,r3
 8008d08:	1245883a 	add	r2,r2,r9
 8008d0c:	1815883a 	mov	r10,r3
 8008d10:	2017883a 	mov	r11,r4
 8008d14:	400d883a 	mov	r6,r8
 8008d18:	100f883a 	mov	r7,r2
 8008d1c:	fc801726 	beq	ra,r18,8008d7c <__divdf3+0x1b8>
 8008d20:	580a97fa 	slli	r5,r11,31
 8008d24:	5006d07a 	srli	r3,r10,1
 8008d28:	ffc00044 	addi	ra,ra,1
 8008d2c:	3c7ff136 	bltu	r7,r17,8008cf4 <__divdf3+0x130>
 8008d30:	3411c83a 	sub	r8,r6,r16
 8008d34:	3205803a 	cmpltu	r2,r6,r8
 8008d38:	3c53c83a 	sub	r9,r7,r17
 8008d3c:	7298b03a 	or	r12,r14,r10
 8008d40:	7adab03a 	or	r13,r15,r11
 8008d44:	4885c83a 	sub	r2,r9,r2
 8008d48:	89ffe61e 	bne	r17,r7,8008ce4 <__divdf3+0x120>
 8008d4c:	343fe936 	bltu	r6,r16,8008cf4 <__divdf3+0x130>
 8008d50:	003fe406 	br	8008ce4 <__divdf3+0x120>
 8008d54:	9809883a 	mov	r4,r19
 8008d58:	d9800415 	stw	r6,16(sp)
 8008d5c:	80097500 	call	8009750 <__pack_d>
 8008d60:	dfc01217 	ldw	ra,72(sp)
 8008d64:	dcc01117 	ldw	r19,68(sp)
 8008d68:	dc801017 	ldw	r18,64(sp)
 8008d6c:	dc400f17 	ldw	r17,60(sp)
 8008d70:	dc000e17 	ldw	r16,56(sp)
 8008d74:	dec01304 	addi	sp,sp,76
 8008d78:	f800283a 	ret
 8008d7c:	00803fc4 	movi	r2,255
 8008d80:	7090703a 	and	r8,r14,r2
 8008d84:	00802004 	movi	r2,128
 8008d88:	0007883a 	mov	r3,zero
 8008d8c:	0013883a 	mov	r9,zero
 8008d90:	40800d26 	beq	r8,r2,8008dc8 <__divdf3+0x204>
 8008d94:	dbc00815 	stw	r15,32(sp)
 8008d98:	db800715 	stw	r14,28(sp)
 8008d9c:	003fab06 	br	8008c4c <__divdf3+0x88>
 8008da0:	343fc92e 	bgeu	r6,r16,8008cc8 <__divdf3+0x104>
 8008da4:	3185883a 	add	r2,r6,r6
 8008da8:	1189803a 	cmpltu	r4,r2,r6
 8008dac:	39c7883a 	add	r3,r7,r7
 8008db0:	20c9883a 	add	r4,r4,r3
 8008db4:	297fffc4 	addi	r5,r5,-1
 8008db8:	100d883a 	mov	r6,r2
 8008dbc:	200f883a 	mov	r7,r4
 8008dc0:	d9400615 	stw	r5,24(sp)
 8008dc4:	003fc006 	br	8008cc8 <__divdf3+0x104>
 8008dc8:	483ff21e 	bne	r9,zero,8008d94 <__divdf3+0x1d0>
 8008dcc:	01004004 	movi	r4,256
 8008dd0:	7104703a 	and	r2,r14,r4
 8008dd4:	10c4b03a 	or	r2,r2,r3
 8008dd8:	103fee1e 	bne	r2,zero,8008d94 <__divdf3+0x1d0>
 8008ddc:	31c4b03a 	or	r2,r6,r7
 8008de0:	103fec26 	beq	r2,zero,8008d94 <__divdf3+0x1d0>
 8008de4:	7205883a 	add	r2,r14,r8
 8008de8:	1391803a 	cmpltu	r8,r2,r14
 8008dec:	43d1883a 	add	r8,r8,r15
 8008df0:	013fc004 	movi	r4,-256
 8008df4:	111c703a 	and	r14,r2,r4
 8008df8:	401f883a 	mov	r15,r8
 8008dfc:	003fe506 	br	8008d94 <__divdf3+0x1d0>
 8008e00:	8009883a 	mov	r4,r16
 8008e04:	003f9206 	br	8008c50 <__divdf3+0x8c>
 8008e08:	9809883a 	mov	r4,r19
 8008e0c:	d8000715 	stw	zero,28(sp)
 8008e10:	d8000815 	stw	zero,32(sp)
 8008e14:	d8000615 	stw	zero,24(sp)
 8008e18:	003f8d06 	br	8008c50 <__divdf3+0x8c>

08008e1c <__eqdf2>:
 8008e1c:	deffef04 	addi	sp,sp,-68
 8008e20:	dc400f15 	stw	r17,60(sp)
 8008e24:	dc400404 	addi	r17,sp,16
 8008e28:	2005883a 	mov	r2,r4
 8008e2c:	2807883a 	mov	r3,r5
 8008e30:	dc000e15 	stw	r16,56(sp)
 8008e34:	d809883a 	mov	r4,sp
 8008e38:	880b883a 	mov	r5,r17
 8008e3c:	dc000904 	addi	r16,sp,36
 8008e40:	d8c00115 	stw	r3,4(sp)
 8008e44:	d8800015 	stw	r2,0(sp)
 8008e48:	d9800215 	stw	r6,8(sp)
 8008e4c:	dfc01015 	stw	ra,64(sp)
 8008e50:	d9c00315 	stw	r7,12(sp)
 8008e54:	8009a640 	call	8009a64 <__unpack_d>
 8008e58:	d9000204 	addi	r4,sp,8
 8008e5c:	800b883a 	mov	r5,r16
 8008e60:	8009a640 	call	8009a64 <__unpack_d>
 8008e64:	d8800417 	ldw	r2,16(sp)
 8008e68:	00c00044 	movi	r3,1
 8008e6c:	180d883a 	mov	r6,r3
 8008e70:	1880062e 	bgeu	r3,r2,8008e8c <__eqdf2+0x70>
 8008e74:	d8800917 	ldw	r2,36(sp)
 8008e78:	8809883a 	mov	r4,r17
 8008e7c:	800b883a 	mov	r5,r16
 8008e80:	1880022e 	bgeu	r3,r2,8008e8c <__eqdf2+0x70>
 8008e84:	8009b9c0 	call	8009b9c <__fpcmp_parts_d>
 8008e88:	100d883a 	mov	r6,r2
 8008e8c:	3005883a 	mov	r2,r6
 8008e90:	dfc01017 	ldw	ra,64(sp)
 8008e94:	dc400f17 	ldw	r17,60(sp)
 8008e98:	dc000e17 	ldw	r16,56(sp)
 8008e9c:	dec01104 	addi	sp,sp,68
 8008ea0:	f800283a 	ret

08008ea4 <__nedf2>:
 8008ea4:	deffef04 	addi	sp,sp,-68
 8008ea8:	dc400f15 	stw	r17,60(sp)
 8008eac:	dc400404 	addi	r17,sp,16
 8008eb0:	2005883a 	mov	r2,r4
 8008eb4:	2807883a 	mov	r3,r5
 8008eb8:	dc000e15 	stw	r16,56(sp)
 8008ebc:	d809883a 	mov	r4,sp
 8008ec0:	880b883a 	mov	r5,r17
 8008ec4:	dc000904 	addi	r16,sp,36
 8008ec8:	d8c00115 	stw	r3,4(sp)
 8008ecc:	d8800015 	stw	r2,0(sp)
 8008ed0:	d9800215 	stw	r6,8(sp)
 8008ed4:	dfc01015 	stw	ra,64(sp)
 8008ed8:	d9c00315 	stw	r7,12(sp)
 8008edc:	8009a640 	call	8009a64 <__unpack_d>
 8008ee0:	d9000204 	addi	r4,sp,8
 8008ee4:	800b883a 	mov	r5,r16
 8008ee8:	8009a640 	call	8009a64 <__unpack_d>
 8008eec:	d8800417 	ldw	r2,16(sp)
 8008ef0:	00c00044 	movi	r3,1
 8008ef4:	180d883a 	mov	r6,r3
 8008ef8:	1880062e 	bgeu	r3,r2,8008f14 <__nedf2+0x70>
 8008efc:	d8800917 	ldw	r2,36(sp)
 8008f00:	8809883a 	mov	r4,r17
 8008f04:	800b883a 	mov	r5,r16
 8008f08:	1880022e 	bgeu	r3,r2,8008f14 <__nedf2+0x70>
 8008f0c:	8009b9c0 	call	8009b9c <__fpcmp_parts_d>
 8008f10:	100d883a 	mov	r6,r2
 8008f14:	3005883a 	mov	r2,r6
 8008f18:	dfc01017 	ldw	ra,64(sp)
 8008f1c:	dc400f17 	ldw	r17,60(sp)
 8008f20:	dc000e17 	ldw	r16,56(sp)
 8008f24:	dec01104 	addi	sp,sp,68
 8008f28:	f800283a 	ret

08008f2c <__gtdf2>:
 8008f2c:	deffef04 	addi	sp,sp,-68
 8008f30:	dc400f15 	stw	r17,60(sp)
 8008f34:	dc400404 	addi	r17,sp,16
 8008f38:	2005883a 	mov	r2,r4
 8008f3c:	2807883a 	mov	r3,r5
 8008f40:	dc000e15 	stw	r16,56(sp)
 8008f44:	d809883a 	mov	r4,sp
 8008f48:	880b883a 	mov	r5,r17
 8008f4c:	dc000904 	addi	r16,sp,36
 8008f50:	d8c00115 	stw	r3,4(sp)
 8008f54:	d8800015 	stw	r2,0(sp)
 8008f58:	d9800215 	stw	r6,8(sp)
 8008f5c:	dfc01015 	stw	ra,64(sp)
 8008f60:	d9c00315 	stw	r7,12(sp)
 8008f64:	8009a640 	call	8009a64 <__unpack_d>
 8008f68:	d9000204 	addi	r4,sp,8
 8008f6c:	800b883a 	mov	r5,r16
 8008f70:	8009a640 	call	8009a64 <__unpack_d>
 8008f74:	d8800417 	ldw	r2,16(sp)
 8008f78:	00c00044 	movi	r3,1
 8008f7c:	01bfffc4 	movi	r6,-1
 8008f80:	1880062e 	bgeu	r3,r2,8008f9c <__gtdf2+0x70>
 8008f84:	d8800917 	ldw	r2,36(sp)
 8008f88:	8809883a 	mov	r4,r17
 8008f8c:	800b883a 	mov	r5,r16
 8008f90:	1880022e 	bgeu	r3,r2,8008f9c <__gtdf2+0x70>
 8008f94:	8009b9c0 	call	8009b9c <__fpcmp_parts_d>
 8008f98:	100d883a 	mov	r6,r2
 8008f9c:	3005883a 	mov	r2,r6
 8008fa0:	dfc01017 	ldw	ra,64(sp)
 8008fa4:	dc400f17 	ldw	r17,60(sp)
 8008fa8:	dc000e17 	ldw	r16,56(sp)
 8008fac:	dec01104 	addi	sp,sp,68
 8008fb0:	f800283a 	ret

08008fb4 <__gedf2>:
 8008fb4:	deffef04 	addi	sp,sp,-68
 8008fb8:	dc400f15 	stw	r17,60(sp)
 8008fbc:	dc400404 	addi	r17,sp,16
 8008fc0:	2005883a 	mov	r2,r4
 8008fc4:	2807883a 	mov	r3,r5
 8008fc8:	dc000e15 	stw	r16,56(sp)
 8008fcc:	d809883a 	mov	r4,sp
 8008fd0:	880b883a 	mov	r5,r17
 8008fd4:	dc000904 	addi	r16,sp,36
 8008fd8:	d8c00115 	stw	r3,4(sp)
 8008fdc:	d8800015 	stw	r2,0(sp)
 8008fe0:	d9800215 	stw	r6,8(sp)
 8008fe4:	dfc01015 	stw	ra,64(sp)
 8008fe8:	d9c00315 	stw	r7,12(sp)
 8008fec:	8009a640 	call	8009a64 <__unpack_d>
 8008ff0:	d9000204 	addi	r4,sp,8
 8008ff4:	800b883a 	mov	r5,r16
 8008ff8:	8009a640 	call	8009a64 <__unpack_d>
 8008ffc:	d8800417 	ldw	r2,16(sp)
 8009000:	00c00044 	movi	r3,1
 8009004:	01bfffc4 	movi	r6,-1
 8009008:	1880062e 	bgeu	r3,r2,8009024 <__gedf2+0x70>
 800900c:	d8800917 	ldw	r2,36(sp)
 8009010:	8809883a 	mov	r4,r17
 8009014:	800b883a 	mov	r5,r16
 8009018:	1880022e 	bgeu	r3,r2,8009024 <__gedf2+0x70>
 800901c:	8009b9c0 	call	8009b9c <__fpcmp_parts_d>
 8009020:	100d883a 	mov	r6,r2
 8009024:	3005883a 	mov	r2,r6
 8009028:	dfc01017 	ldw	ra,64(sp)
 800902c:	dc400f17 	ldw	r17,60(sp)
 8009030:	dc000e17 	ldw	r16,56(sp)
 8009034:	dec01104 	addi	sp,sp,68
 8009038:	f800283a 	ret

0800903c <__ltdf2>:
 800903c:	deffef04 	addi	sp,sp,-68
 8009040:	dc400f15 	stw	r17,60(sp)
 8009044:	dc400404 	addi	r17,sp,16
 8009048:	2005883a 	mov	r2,r4
 800904c:	2807883a 	mov	r3,r5
 8009050:	dc000e15 	stw	r16,56(sp)
 8009054:	d809883a 	mov	r4,sp
 8009058:	880b883a 	mov	r5,r17
 800905c:	dc000904 	addi	r16,sp,36
 8009060:	d8c00115 	stw	r3,4(sp)
 8009064:	d8800015 	stw	r2,0(sp)
 8009068:	d9800215 	stw	r6,8(sp)
 800906c:	dfc01015 	stw	ra,64(sp)
 8009070:	d9c00315 	stw	r7,12(sp)
 8009074:	8009a640 	call	8009a64 <__unpack_d>
 8009078:	d9000204 	addi	r4,sp,8
 800907c:	800b883a 	mov	r5,r16
 8009080:	8009a640 	call	8009a64 <__unpack_d>
 8009084:	d8800417 	ldw	r2,16(sp)
 8009088:	00c00044 	movi	r3,1
 800908c:	180d883a 	mov	r6,r3
 8009090:	1880062e 	bgeu	r3,r2,80090ac <__ltdf2+0x70>
 8009094:	d8800917 	ldw	r2,36(sp)
 8009098:	8809883a 	mov	r4,r17
 800909c:	800b883a 	mov	r5,r16
 80090a0:	1880022e 	bgeu	r3,r2,80090ac <__ltdf2+0x70>
 80090a4:	8009b9c0 	call	8009b9c <__fpcmp_parts_d>
 80090a8:	100d883a 	mov	r6,r2
 80090ac:	3005883a 	mov	r2,r6
 80090b0:	dfc01017 	ldw	ra,64(sp)
 80090b4:	dc400f17 	ldw	r17,60(sp)
 80090b8:	dc000e17 	ldw	r16,56(sp)
 80090bc:	dec01104 	addi	sp,sp,68
 80090c0:	f800283a 	ret

080090c4 <__floatsidf>:
 80090c4:	2006d7fa 	srli	r3,r4,31
 80090c8:	defff604 	addi	sp,sp,-40
 80090cc:	008000c4 	movi	r2,3
 80090d0:	dfc00915 	stw	ra,36(sp)
 80090d4:	dcc00815 	stw	r19,32(sp)
 80090d8:	dc800715 	stw	r18,28(sp)
 80090dc:	dc400615 	stw	r17,24(sp)
 80090e0:	dc000515 	stw	r16,20(sp)
 80090e4:	d8800015 	stw	r2,0(sp)
 80090e8:	d8c00115 	stw	r3,4(sp)
 80090ec:	20000f1e 	bne	r4,zero,800912c <__floatsidf+0x68>
 80090f0:	00800084 	movi	r2,2
 80090f4:	d8800015 	stw	r2,0(sp)
 80090f8:	d809883a 	mov	r4,sp
 80090fc:	80097500 	call	8009750 <__pack_d>
 8009100:	1009883a 	mov	r4,r2
 8009104:	180b883a 	mov	r5,r3
 8009108:	2005883a 	mov	r2,r4
 800910c:	2807883a 	mov	r3,r5
 8009110:	dfc00917 	ldw	ra,36(sp)
 8009114:	dcc00817 	ldw	r19,32(sp)
 8009118:	dc800717 	ldw	r18,28(sp)
 800911c:	dc400617 	ldw	r17,24(sp)
 8009120:	dc000517 	ldw	r16,20(sp)
 8009124:	dec00a04 	addi	sp,sp,40
 8009128:	f800283a 	ret
 800912c:	00800f04 	movi	r2,60
 8009130:	1807003a 	cmpeq	r3,r3,zero
 8009134:	d8800215 	stw	r2,8(sp)
 8009138:	18001126 	beq	r3,zero,8009180 <__floatsidf+0xbc>
 800913c:	0027883a 	mov	r19,zero
 8009140:	2025883a 	mov	r18,r4
 8009144:	d9000315 	stw	r4,12(sp)
 8009148:	dcc00415 	stw	r19,16(sp)
 800914c:	80096d00 	call	80096d0 <__clzsi2>
 8009150:	11000744 	addi	r4,r2,29
 8009154:	013fe80e 	bge	zero,r4,80090f8 <__floatsidf+0x34>
 8009158:	10bfff44 	addi	r2,r2,-3
 800915c:	10000c16 	blt	r2,zero,8009190 <__floatsidf+0xcc>
 8009160:	90a2983a 	sll	r17,r18,r2
 8009164:	0021883a 	mov	r16,zero
 8009168:	d8800217 	ldw	r2,8(sp)
 800916c:	dc400415 	stw	r17,16(sp)
 8009170:	dc000315 	stw	r16,12(sp)
 8009174:	1105c83a 	sub	r2,r2,r4
 8009178:	d8800215 	stw	r2,8(sp)
 800917c:	003fde06 	br	80090f8 <__floatsidf+0x34>
 8009180:	00a00034 	movhi	r2,32768
 8009184:	20800a26 	beq	r4,r2,80091b0 <__floatsidf+0xec>
 8009188:	0109c83a 	sub	r4,zero,r4
 800918c:	003feb06 	br	800913c <__floatsidf+0x78>
 8009190:	9006d07a 	srli	r3,r18,1
 8009194:	008007c4 	movi	r2,31
 8009198:	1105c83a 	sub	r2,r2,r4
 800919c:	1886d83a 	srl	r3,r3,r2
 80091a0:	9922983a 	sll	r17,r19,r4
 80091a4:	9120983a 	sll	r16,r18,r4
 80091a8:	1c62b03a 	or	r17,r3,r17
 80091ac:	003fee06 	br	8009168 <__floatsidf+0xa4>
 80091b0:	0009883a 	mov	r4,zero
 80091b4:	01707834 	movhi	r5,49632
 80091b8:	003fd306 	br	8009108 <__floatsidf+0x44>

080091bc <__fixdfsi>:
 80091bc:	defff804 	addi	sp,sp,-32
 80091c0:	2005883a 	mov	r2,r4
 80091c4:	2807883a 	mov	r3,r5
 80091c8:	d809883a 	mov	r4,sp
 80091cc:	d9400204 	addi	r5,sp,8
 80091d0:	d8c00115 	stw	r3,4(sp)
 80091d4:	d8800015 	stw	r2,0(sp)
 80091d8:	dfc00715 	stw	ra,28(sp)
 80091dc:	8009a640 	call	8009a64 <__unpack_d>
 80091e0:	d8c00217 	ldw	r3,8(sp)
 80091e4:	00800084 	movi	r2,2
 80091e8:	1880051e 	bne	r3,r2,8009200 <__fixdfsi+0x44>
 80091ec:	0007883a 	mov	r3,zero
 80091f0:	1805883a 	mov	r2,r3
 80091f4:	dfc00717 	ldw	ra,28(sp)
 80091f8:	dec00804 	addi	sp,sp,32
 80091fc:	f800283a 	ret
 8009200:	00800044 	movi	r2,1
 8009204:	10fff92e 	bgeu	r2,r3,80091ec <__fixdfsi+0x30>
 8009208:	00800104 	movi	r2,4
 800920c:	18800426 	beq	r3,r2,8009220 <__fixdfsi+0x64>
 8009210:	d8c00417 	ldw	r3,16(sp)
 8009214:	183ff516 	blt	r3,zero,80091ec <__fixdfsi+0x30>
 8009218:	00800784 	movi	r2,30
 800921c:	10c0080e 	bge	r2,r3,8009240 <__fixdfsi+0x84>
 8009220:	d8800317 	ldw	r2,12(sp)
 8009224:	1000121e 	bne	r2,zero,8009270 <__fixdfsi+0xb4>
 8009228:	00e00034 	movhi	r3,32768
 800922c:	18ffffc4 	addi	r3,r3,-1
 8009230:	1805883a 	mov	r2,r3
 8009234:	dfc00717 	ldw	ra,28(sp)
 8009238:	dec00804 	addi	sp,sp,32
 800923c:	f800283a 	ret
 8009240:	00800f04 	movi	r2,60
 8009244:	10d1c83a 	sub	r8,r2,r3
 8009248:	40bff804 	addi	r2,r8,-32
 800924c:	d9800517 	ldw	r6,20(sp)
 8009250:	d9c00617 	ldw	r7,24(sp)
 8009254:	10000816 	blt	r2,zero,8009278 <__fixdfsi+0xbc>
 8009258:	3888d83a 	srl	r4,r7,r2
 800925c:	d8800317 	ldw	r2,12(sp)
 8009260:	2007883a 	mov	r3,r4
 8009264:	103fe226 	beq	r2,zero,80091f0 <__fixdfsi+0x34>
 8009268:	0107c83a 	sub	r3,zero,r4
 800926c:	003fe006 	br	80091f0 <__fixdfsi+0x34>
 8009270:	00e00034 	movhi	r3,32768
 8009274:	003fde06 	br	80091f0 <__fixdfsi+0x34>
 8009278:	39c7883a 	add	r3,r7,r7
 800927c:	008007c4 	movi	r2,31
 8009280:	1205c83a 	sub	r2,r2,r8
 8009284:	1886983a 	sll	r3,r3,r2
 8009288:	3208d83a 	srl	r4,r6,r8
 800928c:	1908b03a 	or	r4,r3,r4
 8009290:	003ff206 	br	800925c <__fixdfsi+0xa0>

08009294 <__floatunsidf>:
 8009294:	defff204 	addi	sp,sp,-56
 8009298:	dfc00d15 	stw	ra,52(sp)
 800929c:	ddc00c15 	stw	r23,48(sp)
 80092a0:	dd800b15 	stw	r22,44(sp)
 80092a4:	dd400a15 	stw	r21,40(sp)
 80092a8:	dd000915 	stw	r20,36(sp)
 80092ac:	dcc00815 	stw	r19,32(sp)
 80092b0:	dc800715 	stw	r18,28(sp)
 80092b4:	dc400615 	stw	r17,24(sp)
 80092b8:	dc000515 	stw	r16,20(sp)
 80092bc:	d8000115 	stw	zero,4(sp)
 80092c0:	20000f1e 	bne	r4,zero,8009300 <__floatunsidf+0x6c>
 80092c4:	00800084 	movi	r2,2
 80092c8:	d8800015 	stw	r2,0(sp)
 80092cc:	d809883a 	mov	r4,sp
 80092d0:	80097500 	call	8009750 <__pack_d>
 80092d4:	dfc00d17 	ldw	ra,52(sp)
 80092d8:	ddc00c17 	ldw	r23,48(sp)
 80092dc:	dd800b17 	ldw	r22,44(sp)
 80092e0:	dd400a17 	ldw	r21,40(sp)
 80092e4:	dd000917 	ldw	r20,36(sp)
 80092e8:	dcc00817 	ldw	r19,32(sp)
 80092ec:	dc800717 	ldw	r18,28(sp)
 80092f0:	dc400617 	ldw	r17,24(sp)
 80092f4:	dc000517 	ldw	r16,20(sp)
 80092f8:	dec00e04 	addi	sp,sp,56
 80092fc:	f800283a 	ret
 8009300:	008000c4 	movi	r2,3
 8009304:	00c00f04 	movi	r3,60
 8009308:	002f883a 	mov	r23,zero
 800930c:	202d883a 	mov	r22,r4
 8009310:	d8800015 	stw	r2,0(sp)
 8009314:	d8c00215 	stw	r3,8(sp)
 8009318:	d9000315 	stw	r4,12(sp)
 800931c:	ddc00415 	stw	r23,16(sp)
 8009320:	80096d00 	call	80096d0 <__clzsi2>
 8009324:	12400744 	addi	r9,r2,29
 8009328:	48000b16 	blt	r9,zero,8009358 <__floatunsidf+0xc4>
 800932c:	483fe726 	beq	r9,zero,80092cc <__floatunsidf+0x38>
 8009330:	10bfff44 	addi	r2,r2,-3
 8009334:	10002e16 	blt	r2,zero,80093f0 <__floatunsidf+0x15c>
 8009338:	b0a2983a 	sll	r17,r22,r2
 800933c:	0021883a 	mov	r16,zero
 8009340:	d8800217 	ldw	r2,8(sp)
 8009344:	dc400415 	stw	r17,16(sp)
 8009348:	dc000315 	stw	r16,12(sp)
 800934c:	1245c83a 	sub	r2,r2,r9
 8009350:	d8800215 	stw	r2,8(sp)
 8009354:	003fdd06 	br	80092cc <__floatunsidf+0x38>
 8009358:	0255c83a 	sub	r10,zero,r9
 800935c:	51bff804 	addi	r6,r10,-32
 8009360:	30001b16 	blt	r6,zero,80093d0 <__floatunsidf+0x13c>
 8009364:	b9a8d83a 	srl	r20,r23,r6
 8009368:	002b883a 	mov	r21,zero
 800936c:	000f883a 	mov	r7,zero
 8009370:	01000044 	movi	r4,1
 8009374:	0011883a 	mov	r8,zero
 8009378:	30002516 	blt	r6,zero,8009410 <__floatunsidf+0x17c>
 800937c:	21a6983a 	sll	r19,r4,r6
 8009380:	0025883a 	mov	r18,zero
 8009384:	00bfffc4 	movi	r2,-1
 8009388:	9089883a 	add	r4,r18,r2
 800938c:	988b883a 	add	r5,r19,r2
 8009390:	248d803a 	cmpltu	r6,r4,r18
 8009394:	314b883a 	add	r5,r6,r5
 8009398:	b104703a 	and	r2,r22,r4
 800939c:	b946703a 	and	r3,r23,r5
 80093a0:	10c4b03a 	or	r2,r2,r3
 80093a4:	10000226 	beq	r2,zero,80093b0 <__floatunsidf+0x11c>
 80093a8:	01c00044 	movi	r7,1
 80093ac:	0011883a 	mov	r8,zero
 80093b0:	d9000217 	ldw	r4,8(sp)
 80093b4:	a1c4b03a 	or	r2,r20,r7
 80093b8:	aa06b03a 	or	r3,r21,r8
 80093bc:	2249c83a 	sub	r4,r4,r9
 80093c0:	d8c00415 	stw	r3,16(sp)
 80093c4:	d9000215 	stw	r4,8(sp)
 80093c8:	d8800315 	stw	r2,12(sp)
 80093cc:	003fbf06 	br	80092cc <__floatunsidf+0x38>
 80093d0:	bdc7883a 	add	r3,r23,r23
 80093d4:	008007c4 	movi	r2,31
 80093d8:	1285c83a 	sub	r2,r2,r10
 80093dc:	1886983a 	sll	r3,r3,r2
 80093e0:	b2a8d83a 	srl	r20,r22,r10
 80093e4:	baaad83a 	srl	r21,r23,r10
 80093e8:	1d28b03a 	or	r20,r3,r20
 80093ec:	003fdf06 	br	800936c <__floatunsidf+0xd8>
 80093f0:	b006d07a 	srli	r3,r22,1
 80093f4:	008007c4 	movi	r2,31
 80093f8:	1245c83a 	sub	r2,r2,r9
 80093fc:	1886d83a 	srl	r3,r3,r2
 8009400:	ba62983a 	sll	r17,r23,r9
 8009404:	b260983a 	sll	r16,r22,r9
 8009408:	1c62b03a 	or	r17,r3,r17
 800940c:	003fcc06 	br	8009340 <__floatunsidf+0xac>
 8009410:	2006d07a 	srli	r3,r4,1
 8009414:	008007c4 	movi	r2,31
 8009418:	1285c83a 	sub	r2,r2,r10
 800941c:	18a6d83a 	srl	r19,r3,r2
 8009420:	22a4983a 	sll	r18,r4,r10
 8009424:	003fd706 	br	8009384 <__floatunsidf+0xf0>

08009428 <udivmodsi4>:
 8009428:	29001b2e 	bgeu	r5,r4,8009498 <udivmodsi4+0x70>
 800942c:	28001a16 	blt	r5,zero,8009498 <udivmodsi4+0x70>
 8009430:	00800044 	movi	r2,1
 8009434:	0007883a 	mov	r3,zero
 8009438:	01c007c4 	movi	r7,31
 800943c:	00000306 	br	800944c <udivmodsi4+0x24>
 8009440:	19c01326 	beq	r3,r7,8009490 <udivmodsi4+0x68>
 8009444:	18c00044 	addi	r3,r3,1
 8009448:	28000416 	blt	r5,zero,800945c <udivmodsi4+0x34>
 800944c:	294b883a 	add	r5,r5,r5
 8009450:	1085883a 	add	r2,r2,r2
 8009454:	293ffa36 	bltu	r5,r4,8009440 <udivmodsi4+0x18>
 8009458:	10000d26 	beq	r2,zero,8009490 <udivmodsi4+0x68>
 800945c:	0007883a 	mov	r3,zero
 8009460:	21400236 	bltu	r4,r5,800946c <udivmodsi4+0x44>
 8009464:	2149c83a 	sub	r4,r4,r5
 8009468:	1886b03a 	or	r3,r3,r2
 800946c:	1004d07a 	srli	r2,r2,1
 8009470:	280ad07a 	srli	r5,r5,1
 8009474:	103ffa1e 	bne	r2,zero,8009460 <udivmodsi4+0x38>
 8009478:	30000226 	beq	r6,zero,8009484 <udivmodsi4+0x5c>
 800947c:	2005883a 	mov	r2,r4
 8009480:	f800283a 	ret
 8009484:	1809883a 	mov	r4,r3
 8009488:	2005883a 	mov	r2,r4
 800948c:	f800283a 	ret
 8009490:	0007883a 	mov	r3,zero
 8009494:	003ff806 	br	8009478 <udivmodsi4+0x50>
 8009498:	00800044 	movi	r2,1
 800949c:	0007883a 	mov	r3,zero
 80094a0:	003fef06 	br	8009460 <udivmodsi4+0x38>

080094a4 <__divsi3>:
 80094a4:	defffe04 	addi	sp,sp,-8
 80094a8:	dc000015 	stw	r16,0(sp)
 80094ac:	dfc00115 	stw	ra,4(sp)
 80094b0:	0021883a 	mov	r16,zero
 80094b4:	20000c16 	blt	r4,zero,80094e8 <__divsi3+0x44>
 80094b8:	000d883a 	mov	r6,zero
 80094bc:	28000e16 	blt	r5,zero,80094f8 <__divsi3+0x54>
 80094c0:	80094280 	call	8009428 <udivmodsi4>
 80094c4:	1007883a 	mov	r3,r2
 80094c8:	8005003a 	cmpeq	r2,r16,zero
 80094cc:	1000011e 	bne	r2,zero,80094d4 <__divsi3+0x30>
 80094d0:	00c7c83a 	sub	r3,zero,r3
 80094d4:	1805883a 	mov	r2,r3
 80094d8:	dfc00117 	ldw	ra,4(sp)
 80094dc:	dc000017 	ldw	r16,0(sp)
 80094e0:	dec00204 	addi	sp,sp,8
 80094e4:	f800283a 	ret
 80094e8:	0109c83a 	sub	r4,zero,r4
 80094ec:	04000044 	movi	r16,1
 80094f0:	000d883a 	mov	r6,zero
 80094f4:	283ff20e 	bge	r5,zero,80094c0 <__divsi3+0x1c>
 80094f8:	014bc83a 	sub	r5,zero,r5
 80094fc:	8021003a 	cmpeq	r16,r16,zero
 8009500:	003fef06 	br	80094c0 <__divsi3+0x1c>

08009504 <__modsi3>:
 8009504:	deffff04 	addi	sp,sp,-4
 8009508:	dfc00015 	stw	ra,0(sp)
 800950c:	01800044 	movi	r6,1
 8009510:	2807883a 	mov	r3,r5
 8009514:	20000416 	blt	r4,zero,8009528 <__modsi3+0x24>
 8009518:	28000c16 	blt	r5,zero,800954c <__modsi3+0x48>
 800951c:	dfc00017 	ldw	ra,0(sp)
 8009520:	dec00104 	addi	sp,sp,4
 8009524:	80094281 	jmpi	8009428 <udivmodsi4>
 8009528:	0109c83a 	sub	r4,zero,r4
 800952c:	28000b16 	blt	r5,zero,800955c <__modsi3+0x58>
 8009530:	180b883a 	mov	r5,r3
 8009534:	01800044 	movi	r6,1
 8009538:	80094280 	call	8009428 <udivmodsi4>
 800953c:	0085c83a 	sub	r2,zero,r2
 8009540:	dfc00017 	ldw	ra,0(sp)
 8009544:	dec00104 	addi	sp,sp,4
 8009548:	f800283a 	ret
 800954c:	014bc83a 	sub	r5,zero,r5
 8009550:	dfc00017 	ldw	ra,0(sp)
 8009554:	dec00104 	addi	sp,sp,4
 8009558:	80094281 	jmpi	8009428 <udivmodsi4>
 800955c:	0147c83a 	sub	r3,zero,r5
 8009560:	003ff306 	br	8009530 <__modsi3+0x2c>

08009564 <__udivsi3>:
 8009564:	000d883a 	mov	r6,zero
 8009568:	80094281 	jmpi	8009428 <udivmodsi4>

0800956c <__umodsi3>:
 800956c:	01800044 	movi	r6,1
 8009570:	80094281 	jmpi	8009428 <udivmodsi4>

08009574 <__mulsi3>:
 8009574:	20000a26 	beq	r4,zero,80095a0 <__mulsi3+0x2c>
 8009578:	0007883a 	mov	r3,zero
 800957c:	2080004c 	andi	r2,r4,1
 8009580:	1005003a 	cmpeq	r2,r2,zero
 8009584:	2008d07a 	srli	r4,r4,1
 8009588:	1000011e 	bne	r2,zero,8009590 <__mulsi3+0x1c>
 800958c:	1947883a 	add	r3,r3,r5
 8009590:	294b883a 	add	r5,r5,r5
 8009594:	203ff91e 	bne	r4,zero,800957c <__mulsi3+0x8>
 8009598:	1805883a 	mov	r2,r3
 800959c:	f800283a 	ret
 80095a0:	0007883a 	mov	r3,zero
 80095a4:	1805883a 	mov	r2,r3
 80095a8:	f800283a 	ret

080095ac <__muldi3>:
 80095ac:	defff204 	addi	sp,sp,-56
 80095b0:	df000c15 	stw	fp,48(sp)
 80095b4:	3038d43a 	srli	fp,r6,16
 80095b8:	dd000815 	stw	r20,32(sp)
 80095bc:	dc400515 	stw	r17,20(sp)
 80095c0:	2028d43a 	srli	r20,r4,16
 80095c4:	247fffcc 	andi	r17,r4,65535
 80095c8:	dc000415 	stw	r16,16(sp)
 80095cc:	343fffcc 	andi	r16,r6,65535
 80095d0:	dcc00715 	stw	r19,28(sp)
 80095d4:	d9000015 	stw	r4,0(sp)
 80095d8:	2827883a 	mov	r19,r5
 80095dc:	8809883a 	mov	r4,r17
 80095e0:	d9400115 	stw	r5,4(sp)
 80095e4:	800b883a 	mov	r5,r16
 80095e8:	d9800215 	stw	r6,8(sp)
 80095ec:	dfc00d15 	stw	ra,52(sp)
 80095f0:	d9c00315 	stw	r7,12(sp)
 80095f4:	dd800a15 	stw	r22,40(sp)
 80095f8:	dd400915 	stw	r21,36(sp)
 80095fc:	302d883a 	mov	r22,r6
 8009600:	ddc00b15 	stw	r23,44(sp)
 8009604:	dc800615 	stw	r18,24(sp)
 8009608:	80095740 	call	8009574 <__mulsi3>
 800960c:	8809883a 	mov	r4,r17
 8009610:	e00b883a 	mov	r5,fp
 8009614:	102b883a 	mov	r21,r2
 8009618:	80095740 	call	8009574 <__mulsi3>
 800961c:	800b883a 	mov	r5,r16
 8009620:	a009883a 	mov	r4,r20
 8009624:	1023883a 	mov	r17,r2
 8009628:	80095740 	call	8009574 <__mulsi3>
 800962c:	a009883a 	mov	r4,r20
 8009630:	e00b883a 	mov	r5,fp
 8009634:	1021883a 	mov	r16,r2
 8009638:	80095740 	call	8009574 <__mulsi3>
 800963c:	a8ffffcc 	andi	r3,r21,65535
 8009640:	a82ad43a 	srli	r21,r21,16
 8009644:	8c23883a 	add	r17,r17,r16
 8009648:	1011883a 	mov	r8,r2
 800964c:	ac6b883a 	add	r21,r21,r17
 8009650:	a804943a 	slli	r2,r21,16
 8009654:	b009883a 	mov	r4,r22
 8009658:	980b883a 	mov	r5,r19
 800965c:	10c7883a 	add	r3,r2,r3
 8009660:	a812d43a 	srli	r9,r21,16
 8009664:	180d883a 	mov	r6,r3
 8009668:	ac00022e 	bgeu	r21,r16,8009674 <__muldi3+0xc8>
 800966c:	00800074 	movhi	r2,1
 8009670:	4091883a 	add	r8,r8,r2
 8009674:	4267883a 	add	r19,r8,r9
 8009678:	302d883a 	mov	r22,r6
 800967c:	80095740 	call	8009574 <__mulsi3>
 8009680:	d9400317 	ldw	r5,12(sp)
 8009684:	d9000017 	ldw	r4,0(sp)
 8009688:	1023883a 	mov	r17,r2
 800968c:	80095740 	call	8009574 <__mulsi3>
 8009690:	14cb883a 	add	r5,r2,r19
 8009694:	894b883a 	add	r5,r17,r5
 8009698:	b005883a 	mov	r2,r22
 800969c:	2807883a 	mov	r3,r5
 80096a0:	dfc00d17 	ldw	ra,52(sp)
 80096a4:	df000c17 	ldw	fp,48(sp)
 80096a8:	ddc00b17 	ldw	r23,44(sp)
 80096ac:	dd800a17 	ldw	r22,40(sp)
 80096b0:	dd400917 	ldw	r21,36(sp)
 80096b4:	dd000817 	ldw	r20,32(sp)
 80096b8:	dcc00717 	ldw	r19,28(sp)
 80096bc:	dc800617 	ldw	r18,24(sp)
 80096c0:	dc400517 	ldw	r17,20(sp)
 80096c4:	dc000417 	ldw	r16,16(sp)
 80096c8:	dec00e04 	addi	sp,sp,56
 80096cc:	f800283a 	ret

080096d0 <__clzsi2>:
 80096d0:	00bfffd4 	movui	r2,65535
 80096d4:	11000e36 	bltu	r2,r4,8009710 <__clzsi2+0x40>
 80096d8:	00803fc4 	movi	r2,255
 80096dc:	01400204 	movi	r5,8
 80096e0:	0007883a 	mov	r3,zero
 80096e4:	11001036 	bltu	r2,r4,8009728 <__clzsi2+0x58>
 80096e8:	000b883a 	mov	r5,zero
 80096ec:	20c6d83a 	srl	r3,r4,r3
 80096f0:	00820074 	movhi	r2,2049
 80096f4:	10b30104 	addi	r2,r2,-13308
 80096f8:	1887883a 	add	r3,r3,r2
 80096fc:	18800003 	ldbu	r2,0(r3)
 8009700:	00c00804 	movi	r3,32
 8009704:	2885883a 	add	r2,r5,r2
 8009708:	1885c83a 	sub	r2,r3,r2
 800970c:	f800283a 	ret
 8009710:	01400404 	movi	r5,16
 8009714:	00804034 	movhi	r2,256
 8009718:	10bfffc4 	addi	r2,r2,-1
 800971c:	2807883a 	mov	r3,r5
 8009720:	113ff22e 	bgeu	r2,r4,80096ec <__clzsi2+0x1c>
 8009724:	01400604 	movi	r5,24
 8009728:	2807883a 	mov	r3,r5
 800972c:	20c6d83a 	srl	r3,r4,r3
 8009730:	00820074 	movhi	r2,2049
 8009734:	10b30104 	addi	r2,r2,-13308
 8009738:	1887883a 	add	r3,r3,r2
 800973c:	18800003 	ldbu	r2,0(r3)
 8009740:	00c00804 	movi	r3,32
 8009744:	2885883a 	add	r2,r5,r2
 8009748:	1885c83a 	sub	r2,r3,r2
 800974c:	f800283a 	ret

08009750 <__pack_d>:
 8009750:	20c00017 	ldw	r3,0(r4)
 8009754:	defffd04 	addi	sp,sp,-12
 8009758:	dc000015 	stw	r16,0(sp)
 800975c:	dc800215 	stw	r18,8(sp)
 8009760:	dc400115 	stw	r17,4(sp)
 8009764:	00800044 	movi	r2,1
 8009768:	22000317 	ldw	r8,12(r4)
 800976c:	001f883a 	mov	r15,zero
 8009770:	22400417 	ldw	r9,16(r4)
 8009774:	24000117 	ldw	r16,4(r4)
 8009778:	10c0552e 	bgeu	r2,r3,80098d0 <__pack_d+0x180>
 800977c:	00800104 	movi	r2,4
 8009780:	18804f26 	beq	r3,r2,80098c0 <__pack_d+0x170>
 8009784:	00800084 	movi	r2,2
 8009788:	18800226 	beq	r3,r2,8009794 <__pack_d+0x44>
 800978c:	4244b03a 	or	r2,r8,r9
 8009790:	10001a1e 	bne	r2,zero,80097fc <__pack_d+0xac>
 8009794:	000d883a 	mov	r6,zero
 8009798:	000f883a 	mov	r7,zero
 800979c:	0011883a 	mov	r8,zero
 80097a0:	00800434 	movhi	r2,16
 80097a4:	10bfffc4 	addi	r2,r2,-1
 80097a8:	301d883a 	mov	r14,r6
 80097ac:	3884703a 	and	r2,r7,r2
 80097b0:	400a953a 	slli	r5,r8,20
 80097b4:	79bffc2c 	andhi	r6,r15,65520
 80097b8:	308cb03a 	or	r6,r6,r2
 80097bc:	00e00434 	movhi	r3,32784
 80097c0:	18ffffc4 	addi	r3,r3,-1
 80097c4:	800497fa 	slli	r2,r16,31
 80097c8:	30c6703a 	and	r3,r6,r3
 80097cc:	1946b03a 	or	r3,r3,r5
 80097d0:	01600034 	movhi	r5,32768
 80097d4:	297fffc4 	addi	r5,r5,-1
 80097d8:	194a703a 	and	r5,r3,r5
 80097dc:	288ab03a 	or	r5,r5,r2
 80097e0:	2807883a 	mov	r3,r5
 80097e4:	7005883a 	mov	r2,r14
 80097e8:	dc800217 	ldw	r18,8(sp)
 80097ec:	dc400117 	ldw	r17,4(sp)
 80097f0:	dc000017 	ldw	r16,0(sp)
 80097f4:	dec00304 	addi	sp,sp,12
 80097f8:	f800283a 	ret
 80097fc:	21000217 	ldw	r4,8(r4)
 8009800:	00bf0084 	movi	r2,-1022
 8009804:	20803f16 	blt	r4,r2,8009904 <__pack_d+0x1b4>
 8009808:	0080ffc4 	movi	r2,1023
 800980c:	11002c16 	blt	r2,r4,80098c0 <__pack_d+0x170>
 8009810:	00803fc4 	movi	r2,255
 8009814:	408c703a 	and	r6,r8,r2
 8009818:	00802004 	movi	r2,128
 800981c:	0007883a 	mov	r3,zero
 8009820:	000f883a 	mov	r7,zero
 8009824:	2280ffc4 	addi	r10,r4,1023
 8009828:	30801e26 	beq	r6,r2,80098a4 <__pack_d+0x154>
 800982c:	00801fc4 	movi	r2,127
 8009830:	4089883a 	add	r4,r8,r2
 8009834:	220d803a 	cmpltu	r6,r4,r8
 8009838:	324d883a 	add	r6,r6,r9
 800983c:	2011883a 	mov	r8,r4
 8009840:	3013883a 	mov	r9,r6
 8009844:	00880034 	movhi	r2,8192
 8009848:	10bfffc4 	addi	r2,r2,-1
 800984c:	12400d36 	bltu	r2,r9,8009884 <__pack_d+0x134>
 8009850:	4804963a 	slli	r2,r9,24
 8009854:	400cd23a 	srli	r6,r8,8
 8009858:	480ed23a 	srli	r7,r9,8
 800985c:	013fffc4 	movi	r4,-1
 8009860:	118cb03a 	or	r6,r2,r6
 8009864:	01400434 	movhi	r5,16
 8009868:	297fffc4 	addi	r5,r5,-1
 800986c:	3104703a 	and	r2,r6,r4
 8009870:	3946703a 	and	r3,r7,r5
 8009874:	5201ffcc 	andi	r8,r10,2047
 8009878:	100d883a 	mov	r6,r2
 800987c:	180f883a 	mov	r7,r3
 8009880:	003fc706 	br	80097a0 <__pack_d+0x50>
 8009884:	480897fa 	slli	r4,r9,31
 8009888:	4004d07a 	srli	r2,r8,1
 800988c:	4806d07a 	srli	r3,r9,1
 8009890:	52800044 	addi	r10,r10,1
 8009894:	2084b03a 	or	r2,r4,r2
 8009898:	1011883a 	mov	r8,r2
 800989c:	1813883a 	mov	r9,r3
 80098a0:	003feb06 	br	8009850 <__pack_d+0x100>
 80098a4:	383fe11e 	bne	r7,zero,800982c <__pack_d+0xdc>
 80098a8:	01004004 	movi	r4,256
 80098ac:	4104703a 	and	r2,r8,r4
 80098b0:	10c4b03a 	or	r2,r2,r3
 80098b4:	103fe326 	beq	r2,zero,8009844 <__pack_d+0xf4>
 80098b8:	3005883a 	mov	r2,r6
 80098bc:	003fdc06 	br	8009830 <__pack_d+0xe0>
 80098c0:	000d883a 	mov	r6,zero
 80098c4:	000f883a 	mov	r7,zero
 80098c8:	0201ffc4 	movi	r8,2047
 80098cc:	003fb406 	br	80097a0 <__pack_d+0x50>
 80098d0:	0005883a 	mov	r2,zero
 80098d4:	00c00234 	movhi	r3,8
 80098d8:	408cb03a 	or	r6,r8,r2
 80098dc:	48ceb03a 	or	r7,r9,r3
 80098e0:	013fffc4 	movi	r4,-1
 80098e4:	01400434 	movhi	r5,16
 80098e8:	297fffc4 	addi	r5,r5,-1
 80098ec:	3104703a 	and	r2,r6,r4
 80098f0:	3946703a 	and	r3,r7,r5
 80098f4:	100d883a 	mov	r6,r2
 80098f8:	180f883a 	mov	r7,r3
 80098fc:	0201ffc4 	movi	r8,2047
 8009900:	003fa706 	br	80097a0 <__pack_d+0x50>
 8009904:	1109c83a 	sub	r4,r2,r4
 8009908:	00800e04 	movi	r2,56
 800990c:	11004316 	blt	r2,r4,8009a1c <__pack_d+0x2cc>
 8009910:	21fff804 	addi	r7,r4,-32
 8009914:	38004516 	blt	r7,zero,8009a2c <__pack_d+0x2dc>
 8009918:	49d8d83a 	srl	r12,r9,r7
 800991c:	001b883a 	mov	r13,zero
 8009920:	0023883a 	mov	r17,zero
 8009924:	01400044 	movi	r5,1
 8009928:	0025883a 	mov	r18,zero
 800992c:	38004716 	blt	r7,zero,8009a4c <__pack_d+0x2fc>
 8009930:	29d6983a 	sll	r11,r5,r7
 8009934:	0015883a 	mov	r10,zero
 8009938:	00bfffc4 	movi	r2,-1
 800993c:	5089883a 	add	r4,r10,r2
 8009940:	588b883a 	add	r5,r11,r2
 8009944:	228d803a 	cmpltu	r6,r4,r10
 8009948:	314b883a 	add	r5,r6,r5
 800994c:	4104703a 	and	r2,r8,r4
 8009950:	4946703a 	and	r3,r9,r5
 8009954:	10c4b03a 	or	r2,r2,r3
 8009958:	10000226 	beq	r2,zero,8009964 <__pack_d+0x214>
 800995c:	04400044 	movi	r17,1
 8009960:	0025883a 	mov	r18,zero
 8009964:	00803fc4 	movi	r2,255
 8009968:	644eb03a 	or	r7,r12,r17
 800996c:	3892703a 	and	r9,r7,r2
 8009970:	00802004 	movi	r2,128
 8009974:	6c90b03a 	or	r8,r13,r18
 8009978:	0015883a 	mov	r10,zero
 800997c:	48801626 	beq	r9,r2,80099d8 <__pack_d+0x288>
 8009980:	01001fc4 	movi	r4,127
 8009984:	3905883a 	add	r2,r7,r4
 8009988:	11cd803a 	cmpltu	r6,r2,r7
 800998c:	320d883a 	add	r6,r6,r8
 8009990:	100f883a 	mov	r7,r2
 8009994:	00840034 	movhi	r2,4096
 8009998:	10bfffc4 	addi	r2,r2,-1
 800999c:	3011883a 	mov	r8,r6
 80099a0:	0007883a 	mov	r3,zero
 80099a4:	11801b36 	bltu	r2,r6,8009a14 <__pack_d+0x2c4>
 80099a8:	4004963a 	slli	r2,r8,24
 80099ac:	3808d23a 	srli	r4,r7,8
 80099b0:	400ad23a 	srli	r5,r8,8
 80099b4:	1813883a 	mov	r9,r3
 80099b8:	1108b03a 	or	r4,r2,r4
 80099bc:	00bfffc4 	movi	r2,-1
 80099c0:	00c00434 	movhi	r3,16
 80099c4:	18ffffc4 	addi	r3,r3,-1
 80099c8:	208c703a 	and	r6,r4,r2
 80099cc:	28ce703a 	and	r7,r5,r3
 80099d0:	4a01ffcc 	andi	r8,r9,2047
 80099d4:	003f7206 	br	80097a0 <__pack_d+0x50>
 80099d8:	503fe91e 	bne	r10,zero,8009980 <__pack_d+0x230>
 80099dc:	01004004 	movi	r4,256
 80099e0:	3904703a 	and	r2,r7,r4
 80099e4:	0007883a 	mov	r3,zero
 80099e8:	10c4b03a 	or	r2,r2,r3
 80099ec:	10000626 	beq	r2,zero,8009a08 <__pack_d+0x2b8>
 80099f0:	3a45883a 	add	r2,r7,r9
 80099f4:	11cd803a 	cmpltu	r6,r2,r7
 80099f8:	320d883a 	add	r6,r6,r8
 80099fc:	100f883a 	mov	r7,r2
 8009a00:	3011883a 	mov	r8,r6
 8009a04:	0007883a 	mov	r3,zero
 8009a08:	00840034 	movhi	r2,4096
 8009a0c:	10bfffc4 	addi	r2,r2,-1
 8009a10:	123fe52e 	bgeu	r2,r8,80099a8 <__pack_d+0x258>
 8009a14:	00c00044 	movi	r3,1
 8009a18:	003fe306 	br	80099a8 <__pack_d+0x258>
 8009a1c:	0009883a 	mov	r4,zero
 8009a20:	0013883a 	mov	r9,zero
 8009a24:	000b883a 	mov	r5,zero
 8009a28:	003fe406 	br	80099bc <__pack_d+0x26c>
 8009a2c:	4a47883a 	add	r3,r9,r9
 8009a30:	008007c4 	movi	r2,31
 8009a34:	1105c83a 	sub	r2,r2,r4
 8009a38:	1886983a 	sll	r3,r3,r2
 8009a3c:	4118d83a 	srl	r12,r8,r4
 8009a40:	491ad83a 	srl	r13,r9,r4
 8009a44:	1b18b03a 	or	r12,r3,r12
 8009a48:	003fb506 	br	8009920 <__pack_d+0x1d0>
 8009a4c:	2806d07a 	srli	r3,r5,1
 8009a50:	008007c4 	movi	r2,31
 8009a54:	1105c83a 	sub	r2,r2,r4
 8009a58:	1896d83a 	srl	r11,r3,r2
 8009a5c:	2914983a 	sll	r10,r5,r4
 8009a60:	003fb506 	br	8009938 <__pack_d+0x1e8>

08009a64 <__unpack_d>:
 8009a64:	20c00117 	ldw	r3,4(r4)
 8009a68:	22400017 	ldw	r9,0(r4)
 8009a6c:	00800434 	movhi	r2,16
 8009a70:	10bfffc4 	addi	r2,r2,-1
 8009a74:	1808d53a 	srli	r4,r3,20
 8009a78:	180cd7fa 	srli	r6,r3,31
 8009a7c:	1894703a 	and	r10,r3,r2
 8009a80:	2201ffcc 	andi	r8,r4,2047
 8009a84:	281b883a 	mov	r13,r5
 8009a88:	4817883a 	mov	r11,r9
 8009a8c:	29800115 	stw	r6,4(r5)
 8009a90:	5019883a 	mov	r12,r10
 8009a94:	40001e1e 	bne	r8,zero,8009b10 <__unpack_d+0xac>
 8009a98:	4a84b03a 	or	r2,r9,r10
 8009a9c:	10001926 	beq	r2,zero,8009b04 <__unpack_d+0xa0>
 8009aa0:	4804d63a 	srli	r2,r9,24
 8009aa4:	500c923a 	slli	r6,r10,8
 8009aa8:	013f0084 	movi	r4,-1022
 8009aac:	00c40034 	movhi	r3,4096
 8009ab0:	18ffffc4 	addi	r3,r3,-1
 8009ab4:	118cb03a 	or	r6,r2,r6
 8009ab8:	008000c4 	movi	r2,3
 8009abc:	480a923a 	slli	r5,r9,8
 8009ac0:	68800015 	stw	r2,0(r13)
 8009ac4:	69000215 	stw	r4,8(r13)
 8009ac8:	19800b36 	bltu	r3,r6,8009af8 <__unpack_d+0x94>
 8009acc:	200f883a 	mov	r7,r4
 8009ad0:	1811883a 	mov	r8,r3
 8009ad4:	2945883a 	add	r2,r5,r5
 8009ad8:	1149803a 	cmpltu	r4,r2,r5
 8009adc:	3187883a 	add	r3,r6,r6
 8009ae0:	20c9883a 	add	r4,r4,r3
 8009ae4:	100b883a 	mov	r5,r2
 8009ae8:	200d883a 	mov	r6,r4
 8009aec:	39ffffc4 	addi	r7,r7,-1
 8009af0:	413ff82e 	bgeu	r8,r4,8009ad4 <__unpack_d+0x70>
 8009af4:	69c00215 	stw	r7,8(r13)
 8009af8:	69800415 	stw	r6,16(r13)
 8009afc:	69400315 	stw	r5,12(r13)
 8009b00:	f800283a 	ret
 8009b04:	00800084 	movi	r2,2
 8009b08:	28800015 	stw	r2,0(r5)
 8009b0c:	f800283a 	ret
 8009b10:	0081ffc4 	movi	r2,2047
 8009b14:	40800f26 	beq	r8,r2,8009b54 <__unpack_d+0xf0>
 8009b18:	480cd63a 	srli	r6,r9,24
 8009b1c:	5006923a 	slli	r3,r10,8
 8009b20:	4804923a 	slli	r2,r9,8
 8009b24:	0009883a 	mov	r4,zero
 8009b28:	30c6b03a 	or	r3,r6,r3
 8009b2c:	01440034 	movhi	r5,4096
 8009b30:	110cb03a 	or	r6,r2,r4
 8009b34:	423f0044 	addi	r8,r8,-1023
 8009b38:	194eb03a 	or	r7,r3,r5
 8009b3c:	008000c4 	movi	r2,3
 8009b40:	69c00415 	stw	r7,16(r13)
 8009b44:	6a000215 	stw	r8,8(r13)
 8009b48:	68800015 	stw	r2,0(r13)
 8009b4c:	69800315 	stw	r6,12(r13)
 8009b50:	f800283a 	ret
 8009b54:	4a84b03a 	or	r2,r9,r10
 8009b58:	1000031e 	bne	r2,zero,8009b68 <__unpack_d+0x104>
 8009b5c:	00800104 	movi	r2,4
 8009b60:	28800015 	stw	r2,0(r5)
 8009b64:	f800283a 	ret
 8009b68:	0009883a 	mov	r4,zero
 8009b6c:	01400234 	movhi	r5,8
 8009b70:	4904703a 	and	r2,r9,r4
 8009b74:	5146703a 	and	r3,r10,r5
 8009b78:	10c4b03a 	or	r2,r2,r3
 8009b7c:	10000526 	beq	r2,zero,8009b94 <__unpack_d+0x130>
 8009b80:	00800044 	movi	r2,1
 8009b84:	68800015 	stw	r2,0(r13)
 8009b88:	6b000415 	stw	r12,16(r13)
 8009b8c:	6ac00315 	stw	r11,12(r13)
 8009b90:	f800283a 	ret
 8009b94:	68000015 	stw	zero,0(r13)
 8009b98:	003ffb06 	br	8009b88 <__unpack_d+0x124>

08009b9c <__fpcmp_parts_d>:
 8009b9c:	21800017 	ldw	r6,0(r4)
 8009ba0:	00c00044 	movi	r3,1
 8009ba4:	19800a2e 	bgeu	r3,r6,8009bd0 <__fpcmp_parts_d+0x34>
 8009ba8:	28800017 	ldw	r2,0(r5)
 8009bac:	1880082e 	bgeu	r3,r2,8009bd0 <__fpcmp_parts_d+0x34>
 8009bb0:	00c00104 	movi	r3,4
 8009bb4:	30c02626 	beq	r6,r3,8009c50 <__fpcmp_parts_d+0xb4>
 8009bb8:	10c02226 	beq	r2,r3,8009c44 <__fpcmp_parts_d+0xa8>
 8009bbc:	00c00084 	movi	r3,2
 8009bc0:	30c00526 	beq	r6,r3,8009bd8 <__fpcmp_parts_d+0x3c>
 8009bc4:	10c0071e 	bne	r2,r3,8009be4 <__fpcmp_parts_d+0x48>
 8009bc8:	20800117 	ldw	r2,4(r4)
 8009bcc:	1000091e 	bne	r2,zero,8009bf4 <__fpcmp_parts_d+0x58>
 8009bd0:	00800044 	movi	r2,1
 8009bd4:	f800283a 	ret
 8009bd8:	10c01a1e 	bne	r2,r3,8009c44 <__fpcmp_parts_d+0xa8>
 8009bdc:	0005883a 	mov	r2,zero
 8009be0:	f800283a 	ret
 8009be4:	22000117 	ldw	r8,4(r4)
 8009be8:	28800117 	ldw	r2,4(r5)
 8009bec:	40800326 	beq	r8,r2,8009bfc <__fpcmp_parts_d+0x60>
 8009bf0:	403ff726 	beq	r8,zero,8009bd0 <__fpcmp_parts_d+0x34>
 8009bf4:	00bfffc4 	movi	r2,-1
 8009bf8:	f800283a 	ret
 8009bfc:	20c00217 	ldw	r3,8(r4)
 8009c00:	28800217 	ldw	r2,8(r5)
 8009c04:	10fffa16 	blt	r2,r3,8009bf0 <__fpcmp_parts_d+0x54>
 8009c08:	18800916 	blt	r3,r2,8009c30 <__fpcmp_parts_d+0x94>
 8009c0c:	21c00417 	ldw	r7,16(r4)
 8009c10:	28c00417 	ldw	r3,16(r5)
 8009c14:	21800317 	ldw	r6,12(r4)
 8009c18:	28800317 	ldw	r2,12(r5)
 8009c1c:	19fff436 	bltu	r3,r7,8009bf0 <__fpcmp_parts_d+0x54>
 8009c20:	38c00526 	beq	r7,r3,8009c38 <__fpcmp_parts_d+0x9c>
 8009c24:	38c00236 	bltu	r7,r3,8009c30 <__fpcmp_parts_d+0x94>
 8009c28:	19ffec1e 	bne	r3,r7,8009bdc <__fpcmp_parts_d+0x40>
 8009c2c:	30bfeb2e 	bgeu	r6,r2,8009bdc <__fpcmp_parts_d+0x40>
 8009c30:	403fe71e 	bne	r8,zero,8009bd0 <__fpcmp_parts_d+0x34>
 8009c34:	003fef06 	br	8009bf4 <__fpcmp_parts_d+0x58>
 8009c38:	11bffa2e 	bgeu	r2,r6,8009c24 <__fpcmp_parts_d+0x88>
 8009c3c:	403fe426 	beq	r8,zero,8009bd0 <__fpcmp_parts_d+0x34>
 8009c40:	003fec06 	br	8009bf4 <__fpcmp_parts_d+0x58>
 8009c44:	28800117 	ldw	r2,4(r5)
 8009c48:	103fe11e 	bne	r2,zero,8009bd0 <__fpcmp_parts_d+0x34>
 8009c4c:	003fe906 	br	8009bf4 <__fpcmp_parts_d+0x58>
 8009c50:	11bfdd1e 	bne	r2,r6,8009bc8 <__fpcmp_parts_d+0x2c>
 8009c54:	28c00117 	ldw	r3,4(r5)
 8009c58:	20800117 	ldw	r2,4(r4)
 8009c5c:	1885c83a 	sub	r2,r3,r2
 8009c60:	f800283a 	ret

08009c64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8009c64:	defff804 	addi	sp,sp,-32
 8009c68:	dfc00715 	stw	ra,28(sp)
 8009c6c:	df000615 	stw	fp,24(sp)
 8009c70:	df000604 	addi	fp,sp,24
 8009c74:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8009c78:	e0bffc17 	ldw	r2,-16(fp)
 8009c7c:	1004803a 	cmplt	r2,r2,zero
 8009c80:	1000091e 	bne	r2,zero,8009ca8 <close+0x44>
 8009c84:	e13ffc17 	ldw	r4,-16(fp)
 8009c88:	01400304 	movi	r5,12
 8009c8c:	80095740 	call	8009574 <__mulsi3>
 8009c90:	1007883a 	mov	r3,r2
 8009c94:	00820074 	movhi	r2,2049
 8009c98:	10b57f04 	addi	r2,r2,-10756
 8009c9c:	1887883a 	add	r3,r3,r2
 8009ca0:	e0ffff15 	stw	r3,-4(fp)
 8009ca4:	00000106 	br	8009cac <close+0x48>
 8009ca8:	e03fff15 	stw	zero,-4(fp)
 8009cac:	e0bfff17 	ldw	r2,-4(fp)
 8009cb0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 8009cb4:	e0bffb17 	ldw	r2,-20(fp)
 8009cb8:	1005003a 	cmpeq	r2,r2,zero
 8009cbc:	10001d1e 	bne	r2,zero,8009d34 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8009cc0:	e0bffb17 	ldw	r2,-20(fp)
 8009cc4:	10800017 	ldw	r2,0(r2)
 8009cc8:	10800417 	ldw	r2,16(r2)
 8009ccc:	1005003a 	cmpeq	r2,r2,zero
 8009cd0:	1000071e 	bne	r2,zero,8009cf0 <close+0x8c>
 8009cd4:	e0bffb17 	ldw	r2,-20(fp)
 8009cd8:	10800017 	ldw	r2,0(r2)
 8009cdc:	10800417 	ldw	r2,16(r2)
 8009ce0:	e13ffb17 	ldw	r4,-20(fp)
 8009ce4:	103ee83a 	callr	r2
 8009ce8:	e0bffe15 	stw	r2,-8(fp)
 8009cec:	00000106 	br	8009cf4 <close+0x90>
 8009cf0:	e03ffe15 	stw	zero,-8(fp)
 8009cf4:	e0bffe17 	ldw	r2,-8(fp)
 8009cf8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8009cfc:	e13ffc17 	ldw	r4,-16(fp)
 8009d00:	800a4bc0 	call	800a4bc <alt_release_fd>
    if (rval < 0)
 8009d04:	e0bffa17 	ldw	r2,-24(fp)
 8009d08:	1004403a 	cmpge	r2,r2,zero
 8009d0c:	1000071e 	bne	r2,zero,8009d2c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 8009d10:	8009d640 	call	8009d64 <alt_get_errno>
 8009d14:	e0fffa17 	ldw	r3,-24(fp)
 8009d18:	00c7c83a 	sub	r3,zero,r3
 8009d1c:	10c00015 	stw	r3,0(r2)
      return -1;
 8009d20:	00bfffc4 	movi	r2,-1
 8009d24:	e0bffd15 	stw	r2,-12(fp)
 8009d28:	00000806 	br	8009d4c <close+0xe8>
    }
    return 0;
 8009d2c:	e03ffd15 	stw	zero,-12(fp)
 8009d30:	00000606 	br	8009d4c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8009d34:	8009d640 	call	8009d64 <alt_get_errno>
 8009d38:	1007883a 	mov	r3,r2
 8009d3c:	00801444 	movi	r2,81
 8009d40:	18800015 	stw	r2,0(r3)
    return -1;
 8009d44:	00bfffc4 	movi	r2,-1
 8009d48:	e0bffd15 	stw	r2,-12(fp)
 8009d4c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 8009d50:	e037883a 	mov	sp,fp
 8009d54:	dfc00117 	ldw	ra,4(sp)
 8009d58:	df000017 	ldw	fp,0(sp)
 8009d5c:	dec00204 	addi	sp,sp,8
 8009d60:	f800283a 	ret

08009d64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8009d64:	defffd04 	addi	sp,sp,-12
 8009d68:	dfc00215 	stw	ra,8(sp)
 8009d6c:	df000115 	stw	fp,4(sp)
 8009d70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8009d74:	00820074 	movhi	r2,2049
 8009d78:	10ba1f04 	addi	r2,r2,-6020
 8009d7c:	10800017 	ldw	r2,0(r2)
 8009d80:	1005003a 	cmpeq	r2,r2,zero
 8009d84:	1000061e 	bne	r2,zero,8009da0 <alt_get_errno+0x3c>
 8009d88:	00820074 	movhi	r2,2049
 8009d8c:	10ba1f04 	addi	r2,r2,-6020
 8009d90:	10800017 	ldw	r2,0(r2)
 8009d94:	103ee83a 	callr	r2
 8009d98:	e0bfff15 	stw	r2,-4(fp)
 8009d9c:	00000306 	br	8009dac <alt_get_errno+0x48>
 8009da0:	00820074 	movhi	r2,2049
 8009da4:	1080de04 	addi	r2,r2,888
 8009da8:	e0bfff15 	stw	r2,-4(fp)
 8009dac:	e0bfff17 	ldw	r2,-4(fp)
}
 8009db0:	e037883a 	mov	sp,fp
 8009db4:	dfc00117 	ldw	ra,4(sp)
 8009db8:	df000017 	ldw	fp,0(sp)
 8009dbc:	dec00204 	addi	sp,sp,8
 8009dc0:	f800283a 	ret

08009dc4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8009dc4:	defffc04 	addi	sp,sp,-16
 8009dc8:	df000315 	stw	fp,12(sp)
 8009dcc:	df000304 	addi	fp,sp,12
 8009dd0:	e13ffd15 	stw	r4,-12(fp)
 8009dd4:	e17ffe15 	stw	r5,-8(fp)
 8009dd8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8009ddc:	e0bfff17 	ldw	r2,-4(fp)
}
 8009de0:	e037883a 	mov	sp,fp
 8009de4:	df000017 	ldw	fp,0(sp)
 8009de8:	dec00104 	addi	sp,sp,4
 8009dec:	f800283a 	ret

08009df0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8009df0:	defff904 	addi	sp,sp,-28
 8009df4:	dfc00615 	stw	ra,24(sp)
 8009df8:	df000515 	stw	fp,20(sp)
 8009dfc:	df000504 	addi	fp,sp,20
 8009e00:	e13ffc15 	stw	r4,-16(fp)
 8009e04:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8009e08:	e0bffc17 	ldw	r2,-16(fp)
 8009e0c:	1004803a 	cmplt	r2,r2,zero
 8009e10:	1000091e 	bne	r2,zero,8009e38 <fstat+0x48>
 8009e14:	e13ffc17 	ldw	r4,-16(fp)
 8009e18:	01400304 	movi	r5,12
 8009e1c:	80095740 	call	8009574 <__mulsi3>
 8009e20:	1007883a 	mov	r3,r2
 8009e24:	00820074 	movhi	r2,2049
 8009e28:	10b57f04 	addi	r2,r2,-10756
 8009e2c:	1887883a 	add	r3,r3,r2
 8009e30:	e0ffff15 	stw	r3,-4(fp)
 8009e34:	00000106 	br	8009e3c <fstat+0x4c>
 8009e38:	e03fff15 	stw	zero,-4(fp)
 8009e3c:	e0bfff17 	ldw	r2,-4(fp)
 8009e40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8009e44:	e0bffb17 	ldw	r2,-20(fp)
 8009e48:	1005003a 	cmpeq	r2,r2,zero
 8009e4c:	1000121e 	bne	r2,zero,8009e98 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8009e50:	e0bffb17 	ldw	r2,-20(fp)
 8009e54:	10800017 	ldw	r2,0(r2)
 8009e58:	10800817 	ldw	r2,32(r2)
 8009e5c:	1005003a 	cmpeq	r2,r2,zero
 8009e60:	1000081e 	bne	r2,zero,8009e84 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 8009e64:	e0bffb17 	ldw	r2,-20(fp)
 8009e68:	10800017 	ldw	r2,0(r2)
 8009e6c:	10800817 	ldw	r2,32(r2)
 8009e70:	e13ffb17 	ldw	r4,-20(fp)
 8009e74:	e17ffd17 	ldw	r5,-12(fp)
 8009e78:	103ee83a 	callr	r2
 8009e7c:	e0bffe15 	stw	r2,-8(fp)
 8009e80:	00000b06 	br	8009eb0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8009e84:	e0fffd17 	ldw	r3,-12(fp)
 8009e88:	00880004 	movi	r2,8192
 8009e8c:	18800115 	stw	r2,4(r3)
      return 0;
 8009e90:	e03ffe15 	stw	zero,-8(fp)
 8009e94:	00000606 	br	8009eb0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8009e98:	8009ec80 	call	8009ec8 <alt_get_errno>
 8009e9c:	1007883a 	mov	r3,r2
 8009ea0:	00801444 	movi	r2,81
 8009ea4:	18800015 	stw	r2,0(r3)
    return -1;
 8009ea8:	00bfffc4 	movi	r2,-1
 8009eac:	e0bffe15 	stw	r2,-8(fp)
 8009eb0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 8009eb4:	e037883a 	mov	sp,fp
 8009eb8:	dfc00117 	ldw	ra,4(sp)
 8009ebc:	df000017 	ldw	fp,0(sp)
 8009ec0:	dec00204 	addi	sp,sp,8
 8009ec4:	f800283a 	ret

08009ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8009ec8:	defffd04 	addi	sp,sp,-12
 8009ecc:	dfc00215 	stw	ra,8(sp)
 8009ed0:	df000115 	stw	fp,4(sp)
 8009ed4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8009ed8:	00820074 	movhi	r2,2049
 8009edc:	10ba1f04 	addi	r2,r2,-6020
 8009ee0:	10800017 	ldw	r2,0(r2)
 8009ee4:	1005003a 	cmpeq	r2,r2,zero
 8009ee8:	1000061e 	bne	r2,zero,8009f04 <alt_get_errno+0x3c>
 8009eec:	00820074 	movhi	r2,2049
 8009ef0:	10ba1f04 	addi	r2,r2,-6020
 8009ef4:	10800017 	ldw	r2,0(r2)
 8009ef8:	103ee83a 	callr	r2
 8009efc:	e0bfff15 	stw	r2,-4(fp)
 8009f00:	00000306 	br	8009f10 <alt_get_errno+0x48>
 8009f04:	00820074 	movhi	r2,2049
 8009f08:	1080de04 	addi	r2,r2,888
 8009f0c:	e0bfff15 	stw	r2,-4(fp)
 8009f10:	e0bfff17 	ldw	r2,-4(fp)
}
 8009f14:	e037883a 	mov	sp,fp
 8009f18:	dfc00117 	ldw	ra,4(sp)
 8009f1c:	df000017 	ldw	fp,0(sp)
 8009f20:	dec00204 	addi	sp,sp,8
 8009f24:	f800283a 	ret

08009f28 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8009f28:	deffeb04 	addi	sp,sp,-84
 8009f2c:	dfc01415 	stw	ra,80(sp)
 8009f30:	df001315 	stw	fp,76(sp)
 8009f34:	df001304 	addi	fp,sp,76
 8009f38:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8009f3c:	e0bffd17 	ldw	r2,-12(fp)
 8009f40:	1004803a 	cmplt	r2,r2,zero
 8009f44:	1000091e 	bne	r2,zero,8009f6c <isatty+0x44>
 8009f48:	e13ffd17 	ldw	r4,-12(fp)
 8009f4c:	01400304 	movi	r5,12
 8009f50:	80095740 	call	8009574 <__mulsi3>
 8009f54:	1007883a 	mov	r3,r2
 8009f58:	00820074 	movhi	r2,2049
 8009f5c:	10b57f04 	addi	r2,r2,-10756
 8009f60:	1887883a 	add	r3,r3,r2
 8009f64:	e0ffff15 	stw	r3,-4(fp)
 8009f68:	00000106 	br	8009f70 <isatty+0x48>
 8009f6c:	e03fff15 	stw	zero,-4(fp)
 8009f70:	e0bfff17 	ldw	r2,-4(fp)
 8009f74:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 8009f78:	e0bfed17 	ldw	r2,-76(fp)
 8009f7c:	1005003a 	cmpeq	r2,r2,zero
 8009f80:	10000f1e 	bne	r2,zero,8009fc0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8009f84:	e0bfed17 	ldw	r2,-76(fp)
 8009f88:	10800017 	ldw	r2,0(r2)
 8009f8c:	10800817 	ldw	r2,32(r2)
 8009f90:	1004c03a 	cmpne	r2,r2,zero
 8009f94:	1000031e 	bne	r2,zero,8009fa4 <isatty+0x7c>
    {
      return 1;
 8009f98:	00800044 	movi	r2,1
 8009f9c:	e0bffe15 	stw	r2,-8(fp)
 8009fa0:	00000c06 	br	8009fd4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8009fa4:	e17fee04 	addi	r5,fp,-72
 8009fa8:	e13ffd17 	ldw	r4,-12(fp)
 8009fac:	8009df00 	call	8009df0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8009fb0:	e0bfef17 	ldw	r2,-68(fp)
 8009fb4:	10880020 	cmpeqi	r2,r2,8192
 8009fb8:	e0bffe15 	stw	r2,-8(fp)
 8009fbc:	00000506 	br	8009fd4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8009fc0:	8009fec0 	call	8009fec <alt_get_errno>
 8009fc4:	1007883a 	mov	r3,r2
 8009fc8:	00801444 	movi	r2,81
 8009fcc:	18800015 	stw	r2,0(r3)
    return 0;
 8009fd0:	e03ffe15 	stw	zero,-8(fp)
 8009fd4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 8009fd8:	e037883a 	mov	sp,fp
 8009fdc:	dfc00117 	ldw	ra,4(sp)
 8009fe0:	df000017 	ldw	fp,0(sp)
 8009fe4:	dec00204 	addi	sp,sp,8
 8009fe8:	f800283a 	ret

08009fec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8009fec:	defffd04 	addi	sp,sp,-12
 8009ff0:	dfc00215 	stw	ra,8(sp)
 8009ff4:	df000115 	stw	fp,4(sp)
 8009ff8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8009ffc:	00820074 	movhi	r2,2049
 800a000:	10ba1f04 	addi	r2,r2,-6020
 800a004:	10800017 	ldw	r2,0(r2)
 800a008:	1005003a 	cmpeq	r2,r2,zero
 800a00c:	1000061e 	bne	r2,zero,800a028 <alt_get_errno+0x3c>
 800a010:	00820074 	movhi	r2,2049
 800a014:	10ba1f04 	addi	r2,r2,-6020
 800a018:	10800017 	ldw	r2,0(r2)
 800a01c:	103ee83a 	callr	r2
 800a020:	e0bfff15 	stw	r2,-4(fp)
 800a024:	00000306 	br	800a034 <alt_get_errno+0x48>
 800a028:	00820074 	movhi	r2,2049
 800a02c:	1080de04 	addi	r2,r2,888
 800a030:	e0bfff15 	stw	r2,-4(fp)
 800a034:	e0bfff17 	ldw	r2,-4(fp)
}
 800a038:	e037883a 	mov	sp,fp
 800a03c:	dfc00117 	ldw	ra,4(sp)
 800a040:	df000017 	ldw	fp,0(sp)
 800a044:	dec00204 	addi	sp,sp,8
 800a048:	f800283a 	ret

0800a04c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800a04c:	defffe04 	addi	sp,sp,-8
 800a050:	dfc00115 	stw	ra,4(sp)
 800a054:	df000015 	stw	fp,0(sp)
 800a058:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800a05c:	01020074 	movhi	r4,2049
 800a060:	213a2404 	addi	r4,r4,-6000
 800a064:	01420074 	movhi	r5,2049
 800a068:	29737004 	addi	r5,r5,-12864
 800a06c:	01820074 	movhi	r6,2049
 800a070:	31ba2404 	addi	r6,r6,-6000
 800a074:	800a0cc0 	call	800a0cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800a078:	01020034 	movhi	r4,2048
 800a07c:	21000804 	addi	r4,r4,32
 800a080:	01420034 	movhi	r5,2048
 800a084:	29400804 	addi	r5,r5,32
 800a088:	01820034 	movhi	r6,2048
 800a08c:	31806d04 	addi	r6,r6,436
 800a090:	800a0cc0 	call	800a0cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800a094:	01020074 	movhi	r4,2049
 800a098:	21325604 	addi	r4,r4,-13992
 800a09c:	01420074 	movhi	r5,2049
 800a0a0:	29725604 	addi	r5,r5,-13992
 800a0a4:	01820074 	movhi	r6,2049
 800a0a8:	31b37004 	addi	r6,r6,-12864
 800a0ac:	800a0cc0 	call	800a0cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800a0b0:	800b7f00 	call	800b7f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800a0b4:	800ba7c0 	call	800ba7c <alt_icache_flush_all>
}
 800a0b8:	e037883a 	mov	sp,fp
 800a0bc:	dfc00117 	ldw	ra,4(sp)
 800a0c0:	df000017 	ldw	fp,0(sp)
 800a0c4:	dec00204 	addi	sp,sp,8
 800a0c8:	f800283a 	ret

0800a0cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800a0cc:	defffc04 	addi	sp,sp,-16
 800a0d0:	df000315 	stw	fp,12(sp)
 800a0d4:	df000304 	addi	fp,sp,12
 800a0d8:	e13ffd15 	stw	r4,-12(fp)
 800a0dc:	e17ffe15 	stw	r5,-8(fp)
 800a0e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800a0e4:	e0fffe17 	ldw	r3,-8(fp)
 800a0e8:	e0bffd17 	ldw	r2,-12(fp)
 800a0ec:	18800e26 	beq	r3,r2,800a128 <alt_load_section+0x5c>
  {
    while( to != end )
 800a0f0:	00000a06 	br	800a11c <alt_load_section+0x50>
    {
      *to++ = *from++;
 800a0f4:	e0bffd17 	ldw	r2,-12(fp)
 800a0f8:	10c00017 	ldw	r3,0(r2)
 800a0fc:	e0bffe17 	ldw	r2,-8(fp)
 800a100:	10c00015 	stw	r3,0(r2)
 800a104:	e0bffe17 	ldw	r2,-8(fp)
 800a108:	10800104 	addi	r2,r2,4
 800a10c:	e0bffe15 	stw	r2,-8(fp)
 800a110:	e0bffd17 	ldw	r2,-12(fp)
 800a114:	10800104 	addi	r2,r2,4
 800a118:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800a11c:	e0fffe17 	ldw	r3,-8(fp)
 800a120:	e0bfff17 	ldw	r2,-4(fp)
 800a124:	18bff31e 	bne	r3,r2,800a0f4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800a128:	e037883a 	mov	sp,fp
 800a12c:	df000017 	ldw	fp,0(sp)
 800a130:	dec00104 	addi	sp,sp,4
 800a134:	f800283a 	ret

0800a138 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800a138:	defff804 	addi	sp,sp,-32
 800a13c:	dfc00715 	stw	ra,28(sp)
 800a140:	df000615 	stw	fp,24(sp)
 800a144:	df000604 	addi	fp,sp,24
 800a148:	e13ffc15 	stw	r4,-16(fp)
 800a14c:	e17ffd15 	stw	r5,-12(fp)
 800a150:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800a154:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a158:	e0bffc17 	ldw	r2,-16(fp)
 800a15c:	1004803a 	cmplt	r2,r2,zero
 800a160:	1000091e 	bne	r2,zero,800a188 <lseek+0x50>
 800a164:	e13ffc17 	ldw	r4,-16(fp)
 800a168:	01400304 	movi	r5,12
 800a16c:	80095740 	call	8009574 <__mulsi3>
 800a170:	1007883a 	mov	r3,r2
 800a174:	00820074 	movhi	r2,2049
 800a178:	10b57f04 	addi	r2,r2,-10756
 800a17c:	1887883a 	add	r3,r3,r2
 800a180:	e0ffff15 	stw	r3,-4(fp)
 800a184:	00000106 	br	800a18c <lseek+0x54>
 800a188:	e03fff15 	stw	zero,-4(fp)
 800a18c:	e0bfff17 	ldw	r2,-4(fp)
 800a190:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 800a194:	e0bffb17 	ldw	r2,-20(fp)
 800a198:	1005003a 	cmpeq	r2,r2,zero
 800a19c:	1000111e 	bne	r2,zero,800a1e4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800a1a0:	e0bffb17 	ldw	r2,-20(fp)
 800a1a4:	10800017 	ldw	r2,0(r2)
 800a1a8:	10800717 	ldw	r2,28(r2)
 800a1ac:	1005003a 	cmpeq	r2,r2,zero
 800a1b0:	1000091e 	bne	r2,zero,800a1d8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800a1b4:	e0bffb17 	ldw	r2,-20(fp)
 800a1b8:	10800017 	ldw	r2,0(r2)
 800a1bc:	10800717 	ldw	r2,28(r2)
 800a1c0:	e13ffb17 	ldw	r4,-20(fp)
 800a1c4:	e17ffd17 	ldw	r5,-12(fp)
 800a1c8:	e1bffe17 	ldw	r6,-8(fp)
 800a1cc:	103ee83a 	callr	r2
 800a1d0:	e0bffa15 	stw	r2,-24(fp)
 800a1d4:	00000506 	br	800a1ec <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800a1d8:	00bfde84 	movi	r2,-134
 800a1dc:	e0bffa15 	stw	r2,-24(fp)
 800a1e0:	00000206 	br	800a1ec <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 800a1e4:	00bfebc4 	movi	r2,-81
 800a1e8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 800a1ec:	e0bffa17 	ldw	r2,-24(fp)
 800a1f0:	1004403a 	cmpge	r2,r2,zero
 800a1f4:	1000071e 	bne	r2,zero,800a214 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 800a1f8:	800a22c0 	call	800a22c <alt_get_errno>
 800a1fc:	1007883a 	mov	r3,r2
 800a200:	e0bffa17 	ldw	r2,-24(fp)
 800a204:	0085c83a 	sub	r2,zero,r2
 800a208:	18800015 	stw	r2,0(r3)
    rc = -1;
 800a20c:	00bfffc4 	movi	r2,-1
 800a210:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 800a214:	e0bffa17 	ldw	r2,-24(fp)
}
 800a218:	e037883a 	mov	sp,fp
 800a21c:	dfc00117 	ldw	ra,4(sp)
 800a220:	df000017 	ldw	fp,0(sp)
 800a224:	dec00204 	addi	sp,sp,8
 800a228:	f800283a 	ret

0800a22c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a22c:	defffd04 	addi	sp,sp,-12
 800a230:	dfc00215 	stw	ra,8(sp)
 800a234:	df000115 	stw	fp,4(sp)
 800a238:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800a23c:	00820074 	movhi	r2,2049
 800a240:	10ba1f04 	addi	r2,r2,-6020
 800a244:	10800017 	ldw	r2,0(r2)
 800a248:	1005003a 	cmpeq	r2,r2,zero
 800a24c:	1000061e 	bne	r2,zero,800a268 <alt_get_errno+0x3c>
 800a250:	00820074 	movhi	r2,2049
 800a254:	10ba1f04 	addi	r2,r2,-6020
 800a258:	10800017 	ldw	r2,0(r2)
 800a25c:	103ee83a 	callr	r2
 800a260:	e0bfff15 	stw	r2,-4(fp)
 800a264:	00000306 	br	800a274 <alt_get_errno+0x48>
 800a268:	00820074 	movhi	r2,2049
 800a26c:	1080de04 	addi	r2,r2,888
 800a270:	e0bfff15 	stw	r2,-4(fp)
 800a274:	e0bfff17 	ldw	r2,-4(fp)
}
 800a278:	e037883a 	mov	sp,fp
 800a27c:	dfc00117 	ldw	ra,4(sp)
 800a280:	df000017 	ldw	fp,0(sp)
 800a284:	dec00204 	addi	sp,sp,8
 800a288:	f800283a 	ret

0800a28c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800a28c:	defffd04 	addi	sp,sp,-12
 800a290:	dfc00215 	stw	ra,8(sp)
 800a294:	df000115 	stw	fp,4(sp)
 800a298:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800a29c:	0009883a 	mov	r4,zero
 800a2a0:	800a7740 	call	800a774 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800a2a4:	800a7a80 	call	800a7a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800a2a8:	01020074 	movhi	r4,2049
 800a2ac:	21334404 	addi	r4,r4,-13040
 800a2b0:	01420074 	movhi	r5,2049
 800a2b4:	29734404 	addi	r5,r5,-13040
 800a2b8:	01820074 	movhi	r6,2049
 800a2bc:	31b34404 	addi	r6,r6,-13040
 800a2c0:	800be3c0 	call	800be3c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800a2c4:	800b9200 	call	800b920 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800a2c8:	01020074 	movhi	r4,2049
 800a2cc:	212e6104 	addi	r4,r4,-18044
 800a2d0:	800c54c0 	call	800c54c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800a2d4:	d126cb17 	ldw	r4,-25812(gp)
 800a2d8:	d166cc17 	ldw	r5,-25808(gp)
 800a2dc:	d1a6cd17 	ldw	r6,-25804(gp)
 800a2e0:	80001f00 	call	80001f0 <main>
 800a2e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800a2e8:	01000044 	movi	r4,1
 800a2ec:	8009c640 	call	8009c64 <close>
  exit (result);
 800a2f0:	e13fff17 	ldw	r4,-4(fp)
 800a2f4:	800c5600 	call	800c560 <exit>

0800a2f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800a2f8:	defffe04 	addi	sp,sp,-8
 800a2fc:	df000115 	stw	fp,4(sp)
 800a300:	df000104 	addi	fp,sp,4
 800a304:	e13fff15 	stw	r4,-4(fp)
}
 800a308:	e037883a 	mov	sp,fp
 800a30c:	df000017 	ldw	fp,0(sp)
 800a310:	dec00104 	addi	sp,sp,4
 800a314:	f800283a 	ret

0800a318 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800a318:	defffe04 	addi	sp,sp,-8
 800a31c:	df000115 	stw	fp,4(sp)
 800a320:	df000104 	addi	fp,sp,4
 800a324:	e13fff15 	stw	r4,-4(fp)
}
 800a328:	e037883a 	mov	sp,fp
 800a32c:	df000017 	ldw	fp,0(sp)
 800a330:	dec00104 	addi	sp,sp,4
 800a334:	f800283a 	ret

0800a338 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800a338:	defff704 	addi	sp,sp,-36
 800a33c:	dfc00815 	stw	ra,32(sp)
 800a340:	df000715 	stw	fp,28(sp)
 800a344:	df000704 	addi	fp,sp,28
 800a348:	e13ffb15 	stw	r4,-20(fp)
 800a34c:	e17ffc15 	stw	r5,-16(fp)
 800a350:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a354:	e0bffb17 	ldw	r2,-20(fp)
 800a358:	1004803a 	cmplt	r2,r2,zero
 800a35c:	1000091e 	bne	r2,zero,800a384 <read+0x4c>
 800a360:	e13ffb17 	ldw	r4,-20(fp)
 800a364:	01400304 	movi	r5,12
 800a368:	80095740 	call	8009574 <__mulsi3>
 800a36c:	1007883a 	mov	r3,r2
 800a370:	00820074 	movhi	r2,2049
 800a374:	10b57f04 	addi	r2,r2,-10756
 800a378:	1887883a 	add	r3,r3,r2
 800a37c:	e0ffff15 	stw	r3,-4(fp)
 800a380:	00000106 	br	800a388 <read+0x50>
 800a384:	e03fff15 	stw	zero,-4(fp)
 800a388:	e0bfff17 	ldw	r2,-4(fp)
 800a38c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 800a390:	e0bffa17 	ldw	r2,-24(fp)
 800a394:	1005003a 	cmpeq	r2,r2,zero
 800a398:	1000241e 	bne	r2,zero,800a42c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800a39c:	e0bffa17 	ldw	r2,-24(fp)
 800a3a0:	10800217 	ldw	r2,8(r2)
 800a3a4:	108000cc 	andi	r2,r2,3
 800a3a8:	10800060 	cmpeqi	r2,r2,1
 800a3ac:	10001a1e 	bne	r2,zero,800a418 <read+0xe0>
 800a3b0:	e0bffa17 	ldw	r2,-24(fp)
 800a3b4:	10800017 	ldw	r2,0(r2)
 800a3b8:	10800517 	ldw	r2,20(r2)
 800a3bc:	1005003a 	cmpeq	r2,r2,zero
 800a3c0:	1000151e 	bne	r2,zero,800a418 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800a3c4:	e0bffa17 	ldw	r2,-24(fp)
 800a3c8:	10800017 	ldw	r2,0(r2)
 800a3cc:	10800517 	ldw	r2,20(r2)
 800a3d0:	e17ffc17 	ldw	r5,-16(fp)
 800a3d4:	e1bffd17 	ldw	r6,-12(fp)
 800a3d8:	e13ffa17 	ldw	r4,-24(fp)
 800a3dc:	103ee83a 	callr	r2
 800a3e0:	e0bff915 	stw	r2,-28(fp)
 800a3e4:	e0bff917 	ldw	r2,-28(fp)
 800a3e8:	1004403a 	cmpge	r2,r2,zero
 800a3ec:	1000071e 	bne	r2,zero,800a40c <read+0xd4>
        {
          ALT_ERRNO = -rval;
 800a3f0:	800a45c0 	call	800a45c <alt_get_errno>
 800a3f4:	e0fff917 	ldw	r3,-28(fp)
 800a3f8:	00c7c83a 	sub	r3,zero,r3
 800a3fc:	10c00015 	stw	r3,0(r2)
          return -1;
 800a400:	00bfffc4 	movi	r2,-1
 800a404:	e0bffe15 	stw	r2,-8(fp)
 800a408:	00000e06 	br	800a444 <read+0x10c>
        }
        return rval;
 800a40c:	e0bff917 	ldw	r2,-28(fp)
 800a410:	e0bffe15 	stw	r2,-8(fp)
 800a414:	00000b06 	br	800a444 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800a418:	800a45c0 	call	800a45c <alt_get_errno>
 800a41c:	1007883a 	mov	r3,r2
 800a420:	00800344 	movi	r2,13
 800a424:	18800015 	stw	r2,0(r3)
 800a428:	00000406 	br	800a43c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800a42c:	800a45c0 	call	800a45c <alt_get_errno>
 800a430:	1007883a 	mov	r3,r2
 800a434:	00801444 	movi	r2,81
 800a438:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800a43c:	00bfffc4 	movi	r2,-1
 800a440:	e0bffe15 	stw	r2,-8(fp)
 800a444:	e0bffe17 	ldw	r2,-8(fp)
}
 800a448:	e037883a 	mov	sp,fp
 800a44c:	dfc00117 	ldw	ra,4(sp)
 800a450:	df000017 	ldw	fp,0(sp)
 800a454:	dec00204 	addi	sp,sp,8
 800a458:	f800283a 	ret

0800a45c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a45c:	defffd04 	addi	sp,sp,-12
 800a460:	dfc00215 	stw	ra,8(sp)
 800a464:	df000115 	stw	fp,4(sp)
 800a468:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800a46c:	00820074 	movhi	r2,2049
 800a470:	10ba1f04 	addi	r2,r2,-6020
 800a474:	10800017 	ldw	r2,0(r2)
 800a478:	1005003a 	cmpeq	r2,r2,zero
 800a47c:	1000061e 	bne	r2,zero,800a498 <alt_get_errno+0x3c>
 800a480:	00820074 	movhi	r2,2049
 800a484:	10ba1f04 	addi	r2,r2,-6020
 800a488:	10800017 	ldw	r2,0(r2)
 800a48c:	103ee83a 	callr	r2
 800a490:	e0bfff15 	stw	r2,-4(fp)
 800a494:	00000306 	br	800a4a4 <alt_get_errno+0x48>
 800a498:	00820074 	movhi	r2,2049
 800a49c:	1080de04 	addi	r2,r2,888
 800a4a0:	e0bfff15 	stw	r2,-4(fp)
 800a4a4:	e0bfff17 	ldw	r2,-4(fp)
}
 800a4a8:	e037883a 	mov	sp,fp
 800a4ac:	dfc00117 	ldw	ra,4(sp)
 800a4b0:	df000017 	ldw	fp,0(sp)
 800a4b4:	dec00204 	addi	sp,sp,8
 800a4b8:	f800283a 	ret

0800a4bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800a4bc:	defffc04 	addi	sp,sp,-16
 800a4c0:	dfc00315 	stw	ra,12(sp)
 800a4c4:	df000215 	stw	fp,8(sp)
 800a4c8:	dc000115 	stw	r16,4(sp)
 800a4cc:	df000104 	addi	fp,sp,4
 800a4d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800a4d4:	e0bfff17 	ldw	r2,-4(fp)
 800a4d8:	108000d0 	cmplti	r2,r2,3
 800a4dc:	10000f1e 	bne	r2,zero,800a51c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 800a4e0:	e13fff17 	ldw	r4,-4(fp)
 800a4e4:	04020074 	movhi	r16,2049
 800a4e8:	84357f04 	addi	r16,r16,-10756
 800a4ec:	01400304 	movi	r5,12
 800a4f0:	80095740 	call	8009574 <__mulsi3>
 800a4f4:	1405883a 	add	r2,r2,r16
 800a4f8:	10800204 	addi	r2,r2,8
 800a4fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800a500:	e13fff17 	ldw	r4,-4(fp)
 800a504:	04020074 	movhi	r16,2049
 800a508:	84357f04 	addi	r16,r16,-10756
 800a50c:	01400304 	movi	r5,12
 800a510:	80095740 	call	8009574 <__mulsi3>
 800a514:	1405883a 	add	r2,r2,r16
 800a518:	10000015 	stw	zero,0(r2)
  }
}
 800a51c:	e037883a 	mov	sp,fp
 800a520:	dfc00217 	ldw	ra,8(sp)
 800a524:	df000117 	ldw	fp,4(sp)
 800a528:	dc000017 	ldw	r16,0(sp)
 800a52c:	dec00304 	addi	sp,sp,12
 800a530:	f800283a 	ret

0800a534 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800a534:	defff804 	addi	sp,sp,-32
 800a538:	df000715 	stw	fp,28(sp)
 800a53c:	df000704 	addi	fp,sp,28
 800a540:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800a544:	0005303a 	rdctl	r2,status
 800a548:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800a54c:	e0fffb17 	ldw	r3,-20(fp)
 800a550:	00bfff84 	movi	r2,-2
 800a554:	1884703a 	and	r2,r3,r2
 800a558:	1001703a 	wrctl	status,r2
  
  return context;
 800a55c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800a560:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800a564:	d0a00c17 	ldw	r2,-32720(gp)
 800a568:	10c000c4 	addi	r3,r2,3
 800a56c:	00bfff04 	movi	r2,-4
 800a570:	1884703a 	and	r2,r3,r2
 800a574:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800a578:	d0e00c17 	ldw	r3,-32720(gp)
 800a57c:	e0bffe17 	ldw	r2,-8(fp)
 800a580:	1887883a 	add	r3,r3,r2
 800a584:	00840034 	movhi	r2,4096
 800a588:	10800004 	addi	r2,r2,0
 800a58c:	10c0072e 	bgeu	r2,r3,800a5ac <sbrk+0x78>
 800a590:	e0bffd17 	ldw	r2,-12(fp)
 800a594:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800a598:	e0bffa17 	ldw	r2,-24(fp)
 800a59c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800a5a0:	00bfffc4 	movi	r2,-1
 800a5a4:	e0bfff15 	stw	r2,-4(fp)
 800a5a8:	00000c06 	br	800a5dc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 800a5ac:	d0a00c17 	ldw	r2,-32720(gp)
 800a5b0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 800a5b4:	d0e00c17 	ldw	r3,-32720(gp)
 800a5b8:	e0bffe17 	ldw	r2,-8(fp)
 800a5bc:	1885883a 	add	r2,r3,r2
 800a5c0:	d0a00c15 	stw	r2,-32720(gp)
 800a5c4:	e0bffd17 	ldw	r2,-12(fp)
 800a5c8:	e0bff915 	stw	r2,-28(fp)
 800a5cc:	e0bff917 	ldw	r2,-28(fp)
 800a5d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800a5d4:	e0bffc17 	ldw	r2,-16(fp)
 800a5d8:	e0bfff15 	stw	r2,-4(fp)
 800a5dc:	e0bfff17 	ldw	r2,-4(fp)
} 
 800a5e0:	e037883a 	mov	sp,fp
 800a5e4:	df000017 	ldw	fp,0(sp)
 800a5e8:	dec00104 	addi	sp,sp,4
 800a5ec:	f800283a 	ret

0800a5f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800a5f0:	defff704 	addi	sp,sp,-36
 800a5f4:	dfc00815 	stw	ra,32(sp)
 800a5f8:	df000715 	stw	fp,28(sp)
 800a5fc:	df000704 	addi	fp,sp,28
 800a600:	e13ffb15 	stw	r4,-20(fp)
 800a604:	e17ffc15 	stw	r5,-16(fp)
 800a608:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a60c:	e0bffb17 	ldw	r2,-20(fp)
 800a610:	1004803a 	cmplt	r2,r2,zero
 800a614:	1000091e 	bne	r2,zero,800a63c <write+0x4c>
 800a618:	e13ffb17 	ldw	r4,-20(fp)
 800a61c:	01400304 	movi	r5,12
 800a620:	80095740 	call	8009574 <__mulsi3>
 800a624:	1007883a 	mov	r3,r2
 800a628:	00820074 	movhi	r2,2049
 800a62c:	10b57f04 	addi	r2,r2,-10756
 800a630:	1887883a 	add	r3,r3,r2
 800a634:	e0ffff15 	stw	r3,-4(fp)
 800a638:	00000106 	br	800a640 <write+0x50>
 800a63c:	e03fff15 	stw	zero,-4(fp)
 800a640:	e0bfff17 	ldw	r2,-4(fp)
 800a644:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 800a648:	e0bffa17 	ldw	r2,-24(fp)
 800a64c:	1005003a 	cmpeq	r2,r2,zero
 800a650:	1000241e 	bne	r2,zero,800a6e4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800a654:	e0bffa17 	ldw	r2,-24(fp)
 800a658:	10800217 	ldw	r2,8(r2)
 800a65c:	108000cc 	andi	r2,r2,3
 800a660:	1005003a 	cmpeq	r2,r2,zero
 800a664:	10001a1e 	bne	r2,zero,800a6d0 <write+0xe0>
 800a668:	e0bffa17 	ldw	r2,-24(fp)
 800a66c:	10800017 	ldw	r2,0(r2)
 800a670:	10800617 	ldw	r2,24(r2)
 800a674:	1005003a 	cmpeq	r2,r2,zero
 800a678:	1000151e 	bne	r2,zero,800a6d0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800a67c:	e0bffa17 	ldw	r2,-24(fp)
 800a680:	10800017 	ldw	r2,0(r2)
 800a684:	10800617 	ldw	r2,24(r2)
 800a688:	e17ffc17 	ldw	r5,-16(fp)
 800a68c:	e1bffd17 	ldw	r6,-12(fp)
 800a690:	e13ffa17 	ldw	r4,-24(fp)
 800a694:	103ee83a 	callr	r2
 800a698:	e0bff915 	stw	r2,-28(fp)
 800a69c:	e0bff917 	ldw	r2,-28(fp)
 800a6a0:	1004403a 	cmpge	r2,r2,zero
 800a6a4:	1000071e 	bne	r2,zero,800a6c4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 800a6a8:	800a7140 	call	800a714 <alt_get_errno>
 800a6ac:	e0fff917 	ldw	r3,-28(fp)
 800a6b0:	00c7c83a 	sub	r3,zero,r3
 800a6b4:	10c00015 	stw	r3,0(r2)
        return -1;
 800a6b8:	00bfffc4 	movi	r2,-1
 800a6bc:	e0bffe15 	stw	r2,-8(fp)
 800a6c0:	00000e06 	br	800a6fc <write+0x10c>
      }
      return rval;
 800a6c4:	e0bff917 	ldw	r2,-28(fp)
 800a6c8:	e0bffe15 	stw	r2,-8(fp)
 800a6cc:	00000b06 	br	800a6fc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800a6d0:	800a7140 	call	800a714 <alt_get_errno>
 800a6d4:	1007883a 	mov	r3,r2
 800a6d8:	00800344 	movi	r2,13
 800a6dc:	18800015 	stw	r2,0(r3)
 800a6e0:	00000406 	br	800a6f4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800a6e4:	800a7140 	call	800a714 <alt_get_errno>
 800a6e8:	1007883a 	mov	r3,r2
 800a6ec:	00801444 	movi	r2,81
 800a6f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800a6f4:	00bfffc4 	movi	r2,-1
 800a6f8:	e0bffe15 	stw	r2,-8(fp)
 800a6fc:	e0bffe17 	ldw	r2,-8(fp)
}
 800a700:	e037883a 	mov	sp,fp
 800a704:	dfc00117 	ldw	ra,4(sp)
 800a708:	df000017 	ldw	fp,0(sp)
 800a70c:	dec00204 	addi	sp,sp,8
 800a710:	f800283a 	ret

0800a714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a714:	defffd04 	addi	sp,sp,-12
 800a718:	dfc00215 	stw	ra,8(sp)
 800a71c:	df000115 	stw	fp,4(sp)
 800a720:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800a724:	00820074 	movhi	r2,2049
 800a728:	10ba1f04 	addi	r2,r2,-6020
 800a72c:	10800017 	ldw	r2,0(r2)
 800a730:	1005003a 	cmpeq	r2,r2,zero
 800a734:	1000061e 	bne	r2,zero,800a750 <alt_get_errno+0x3c>
 800a738:	00820074 	movhi	r2,2049
 800a73c:	10ba1f04 	addi	r2,r2,-6020
 800a740:	10800017 	ldw	r2,0(r2)
 800a744:	103ee83a 	callr	r2
 800a748:	e0bfff15 	stw	r2,-4(fp)
 800a74c:	00000306 	br	800a75c <alt_get_errno+0x48>
 800a750:	00820074 	movhi	r2,2049
 800a754:	1080de04 	addi	r2,r2,888
 800a758:	e0bfff15 	stw	r2,-4(fp)
 800a75c:	e0bfff17 	ldw	r2,-4(fp)
}
 800a760:	e037883a 	mov	sp,fp
 800a764:	dfc00117 	ldw	ra,4(sp)
 800a768:	df000017 	ldw	fp,0(sp)
 800a76c:	dec00204 	addi	sp,sp,8
 800a770:	f800283a 	ret

0800a774 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800a774:	defffd04 	addi	sp,sp,-12
 800a778:	dfc00215 	stw	ra,8(sp)
 800a77c:	df000115 	stw	fp,4(sp)
 800a780:	df000104 	addi	fp,sp,4
 800a784:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 800a788:	800c33c0 	call	800c33c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800a78c:	00800044 	movi	r2,1
 800a790:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800a794:	e037883a 	mov	sp,fp
 800a798:	dfc00117 	ldw	ra,4(sp)
 800a79c:	df000017 	ldw	fp,0(sp)
 800a7a0:	dec00204 	addi	sp,sp,8
 800a7a4:	f800283a 	ret

0800a7a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800a7a8:	defffe04 	addi	sp,sp,-8
 800a7ac:	dfc00115 	stw	ra,4(sp)
 800a7b0:	df000015 	stw	fp,0(sp)
 800a7b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800a7b8:	01020074 	movhi	r4,2049
 800a7bc:	2135e904 	addi	r4,r4,-10332
 800a7c0:	000b883a 	mov	r5,zero
 800a7c4:	000d883a 	mov	r6,zero
 800a7c8:	800aa340 	call	800aa34 <altera_avalon_jtag_uart_init>
 800a7cc:	01020074 	movhi	r4,2049
 800a7d0:	2135df04 	addi	r4,r4,-10372
 800a7d4:	800a8b40 	call	800a8b4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 800a7d8:	00820074 	movhi	r2,2049
 800a7dc:	10b9f704 	addi	r2,r2,-6180
 800a7e0:	10800a17 	ldw	r2,40(r2)
 800a7e4:	10800104 	addi	r2,r2,4
 800a7e8:	10800017 	ldw	r2,0(r2)
 800a7ec:	10ffffcc 	andi	r3,r2,65535
 800a7f0:	00820074 	movhi	r2,2049
 800a7f4:	10b9f704 	addi	r2,r2,-6180
 800a7f8:	10c00c15 	stw	r3,48(r2)
 800a7fc:	00820074 	movhi	r2,2049
 800a800:	10b9f704 	addi	r2,r2,-6180
 800a804:	10800a17 	ldw	r2,40(r2)
 800a808:	10800104 	addi	r2,r2,4
 800a80c:	10800017 	ldw	r2,0(r2)
 800a810:	1005d43a 	srai	r2,r2,16
 800a814:	10ffffcc 	andi	r3,r2,65535
 800a818:	00820074 	movhi	r2,2049
 800a81c:	10b9f704 	addi	r2,r2,-6180
 800a820:	10c00d15 	stw	r3,52(r2)
 800a824:	00820074 	movhi	r2,2049
 800a828:	10b9f704 	addi	r2,r2,-6180
 800a82c:	10800c17 	ldw	r2,48(r2)
 800a830:	10801068 	cmpgeui	r2,r2,65
 800a834:	1000081e 	bne	r2,zero,800a858 <alt_sys_init+0xb0>
 800a838:	00c20074 	movhi	r3,2049
 800a83c:	18f9f704 	addi	r3,r3,-6180
 800a840:	00800fc4 	movi	r2,63
 800a844:	18800f15 	stw	r2,60(r3)
 800a848:	00c20074 	movhi	r3,2049
 800a84c:	18f9f704 	addi	r3,r3,-6180
 800a850:	00800184 	movi	r2,6
 800a854:	18801015 	stw	r2,64(r3)
 800a858:	00820074 	movhi	r2,2049
 800a85c:	10b9f704 	addi	r2,r2,-6180
 800a860:	10800d17 	ldw	r2,52(r2)
 800a864:	10800868 	cmpgeui	r2,r2,33
 800a868:	1000041e 	bne	r2,zero,800a87c <alt_sys_init+0xd4>
 800a86c:	00c20074 	movhi	r3,2049
 800a870:	18f9f704 	addi	r3,r3,-6180
 800a874:	008007c4 	movi	r2,31
 800a878:	18801115 	stw	r2,68(r3)
 800a87c:	01020074 	movhi	r4,2049
 800a880:	2139f704 	addi	r4,r4,-6180
 800a884:	800b3980 	call	800b398 <alt_up_char_buffer_init>
 800a888:	01020074 	movhi	r4,2049
 800a88c:	2139f704 	addi	r4,r4,-6180
 800a890:	800a8b40 	call	800a8b4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 800a894:	01020074 	movhi	r4,2049
 800a898:	213a0904 	addi	r4,r4,-6108
 800a89c:	800a8b40 	call	800a8b4 <alt_dev_reg>
}
 800a8a0:	e037883a 	mov	sp,fp
 800a8a4:	dfc00117 	ldw	ra,4(sp)
 800a8a8:	df000017 	ldw	fp,0(sp)
 800a8ac:	dec00204 	addi	sp,sp,8
 800a8b0:	f800283a 	ret

0800a8b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800a8b4:	defffd04 	addi	sp,sp,-12
 800a8b8:	dfc00215 	stw	ra,8(sp)
 800a8bc:	df000115 	stw	fp,4(sp)
 800a8c0:	df000104 	addi	fp,sp,4
 800a8c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800a8c8:	e13fff17 	ldw	r4,-4(fp)
 800a8cc:	01420074 	movhi	r5,2049
 800a8d0:	297a1c04 	addi	r5,r5,-6032
 800a8d4:	800b80c0 	call	800b80c <alt_dev_llist_insert>
}
 800a8d8:	e037883a 	mov	sp,fp
 800a8dc:	dfc00117 	ldw	ra,4(sp)
 800a8e0:	df000017 	ldw	fp,0(sp)
 800a8e4:	dec00204 	addi	sp,sp,8
 800a8e8:	f800283a 	ret

0800a8ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800a8ec:	defffa04 	addi	sp,sp,-24
 800a8f0:	dfc00515 	stw	ra,20(sp)
 800a8f4:	df000415 	stw	fp,16(sp)
 800a8f8:	df000404 	addi	fp,sp,16
 800a8fc:	e13ffd15 	stw	r4,-12(fp)
 800a900:	e17ffe15 	stw	r5,-8(fp)
 800a904:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800a908:	e0bffd17 	ldw	r2,-12(fp)
 800a90c:	10800017 	ldw	r2,0(r2)
 800a910:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800a914:	e0bffc17 	ldw	r2,-16(fp)
 800a918:	11000a04 	addi	r4,r2,40
 800a91c:	e0bffd17 	ldw	r2,-12(fp)
 800a920:	11c00217 	ldw	r7,8(r2)
 800a924:	e17ffe17 	ldw	r5,-8(fp)
 800a928:	e1bfff17 	ldw	r6,-4(fp)
 800a92c:	800af340 	call	800af34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800a930:	e037883a 	mov	sp,fp
 800a934:	dfc00117 	ldw	ra,4(sp)
 800a938:	df000017 	ldw	fp,0(sp)
 800a93c:	dec00204 	addi	sp,sp,8
 800a940:	f800283a 	ret

0800a944 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800a944:	defffa04 	addi	sp,sp,-24
 800a948:	dfc00515 	stw	ra,20(sp)
 800a94c:	df000415 	stw	fp,16(sp)
 800a950:	df000404 	addi	fp,sp,16
 800a954:	e13ffd15 	stw	r4,-12(fp)
 800a958:	e17ffe15 	stw	r5,-8(fp)
 800a95c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800a960:	e0bffd17 	ldw	r2,-12(fp)
 800a964:	10800017 	ldw	r2,0(r2)
 800a968:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800a96c:	e0bffc17 	ldw	r2,-16(fp)
 800a970:	11000a04 	addi	r4,r2,40
 800a974:	e0bffd17 	ldw	r2,-12(fp)
 800a978:	11c00217 	ldw	r7,8(r2)
 800a97c:	e17ffe17 	ldw	r5,-8(fp)
 800a980:	e1bfff17 	ldw	r6,-4(fp)
 800a984:	800b1580 	call	800b158 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800a988:	e037883a 	mov	sp,fp
 800a98c:	dfc00117 	ldw	ra,4(sp)
 800a990:	df000017 	ldw	fp,0(sp)
 800a994:	dec00204 	addi	sp,sp,8
 800a998:	f800283a 	ret

0800a99c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800a99c:	defffc04 	addi	sp,sp,-16
 800a9a0:	dfc00315 	stw	ra,12(sp)
 800a9a4:	df000215 	stw	fp,8(sp)
 800a9a8:	df000204 	addi	fp,sp,8
 800a9ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800a9b0:	e0bfff17 	ldw	r2,-4(fp)
 800a9b4:	10800017 	ldw	r2,0(r2)
 800a9b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800a9bc:	e0bffe17 	ldw	r2,-8(fp)
 800a9c0:	11000a04 	addi	r4,r2,40
 800a9c4:	e0bfff17 	ldw	r2,-4(fp)
 800a9c8:	11400217 	ldw	r5,8(r2)
 800a9cc:	800adcc0 	call	800adcc <altera_avalon_jtag_uart_close>
}
 800a9d0:	e037883a 	mov	sp,fp
 800a9d4:	dfc00117 	ldw	ra,4(sp)
 800a9d8:	df000017 	ldw	fp,0(sp)
 800a9dc:	dec00204 	addi	sp,sp,8
 800a9e0:	f800283a 	ret

0800a9e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800a9e4:	defffa04 	addi	sp,sp,-24
 800a9e8:	dfc00515 	stw	ra,20(sp)
 800a9ec:	df000415 	stw	fp,16(sp)
 800a9f0:	df000404 	addi	fp,sp,16
 800a9f4:	e13ffd15 	stw	r4,-12(fp)
 800a9f8:	e17ffe15 	stw	r5,-8(fp)
 800a9fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800aa00:	e0bffd17 	ldw	r2,-12(fp)
 800aa04:	10800017 	ldw	r2,0(r2)
 800aa08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800aa0c:	e0bffc17 	ldw	r2,-16(fp)
 800aa10:	11000a04 	addi	r4,r2,40
 800aa14:	e17ffe17 	ldw	r5,-8(fp)
 800aa18:	e1bfff17 	ldw	r6,-4(fp)
 800aa1c:	800ae400 	call	800ae40 <altera_avalon_jtag_uart_ioctl>
}
 800aa20:	e037883a 	mov	sp,fp
 800aa24:	dfc00117 	ldw	ra,4(sp)
 800aa28:	df000017 	ldw	fp,0(sp)
 800aa2c:	dec00204 	addi	sp,sp,8
 800aa30:	f800283a 	ret

0800aa34 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800aa34:	defffa04 	addi	sp,sp,-24
 800aa38:	dfc00515 	stw	ra,20(sp)
 800aa3c:	df000415 	stw	fp,16(sp)
 800aa40:	df000404 	addi	fp,sp,16
 800aa44:	e13ffd15 	stw	r4,-12(fp)
 800aa48:	e17ffe15 	stw	r5,-8(fp)
 800aa4c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800aa50:	e0fffd17 	ldw	r3,-12(fp)
 800aa54:	00800044 	movi	r2,1
 800aa58:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800aa5c:	e0bffd17 	ldw	r2,-12(fp)
 800aa60:	10800017 	ldw	r2,0(r2)
 800aa64:	11000104 	addi	r4,r2,4
 800aa68:	e0bffd17 	ldw	r2,-12(fp)
 800aa6c:	10800817 	ldw	r2,32(r2)
 800aa70:	1007883a 	mov	r3,r2
 800aa74:	2005883a 	mov	r2,r4
 800aa78:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800aa7c:	e13ffe17 	ldw	r4,-8(fp)
 800aa80:	e17fff17 	ldw	r5,-4(fp)
 800aa84:	d8000015 	stw	zero,0(sp)
 800aa88:	01820074 	movhi	r6,2049
 800aa8c:	31aabd04 	addi	r6,r6,-21772
 800aa90:	e1fffd17 	ldw	r7,-12(fp)
 800aa94:	800ba980 	call	800ba98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800aa98:	e0bffd17 	ldw	r2,-12(fp)
 800aa9c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800aaa0:	e0bffd17 	ldw	r2,-12(fp)
 800aaa4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800aaa8:	00820074 	movhi	r2,2049
 800aaac:	1080e304 	addi	r2,r2,908
 800aab0:	10800017 	ldw	r2,0(r2)
 800aab4:	100b883a 	mov	r5,r2
 800aab8:	01820074 	movhi	r6,2049
 800aabc:	31ab4704 	addi	r6,r6,-21220
 800aac0:	e1fffd17 	ldw	r7,-12(fp)
 800aac4:	800b69c0 	call	800b69c <alt_alarm_start>
 800aac8:	1004403a 	cmpge	r2,r2,zero
 800aacc:	1000041e 	bne	r2,zero,800aae0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800aad0:	e0fffd17 	ldw	r3,-12(fp)
 800aad4:	00a00034 	movhi	r2,32768
 800aad8:	10bfffc4 	addi	r2,r2,-1
 800aadc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800aae0:	e037883a 	mov	sp,fp
 800aae4:	dfc00117 	ldw	ra,4(sp)
 800aae8:	df000017 	ldw	fp,0(sp)
 800aaec:	dec00204 	addi	sp,sp,8
 800aaf0:	f800283a 	ret

0800aaf4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800aaf4:	defff804 	addi	sp,sp,-32
 800aaf8:	df000715 	stw	fp,28(sp)
 800aafc:	df000704 	addi	fp,sp,28
 800ab00:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800ab04:	e0bfff17 	ldw	r2,-4(fp)
 800ab08:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 800ab0c:	e0bffe17 	ldw	r2,-8(fp)
 800ab10:	10800017 	ldw	r2,0(r2)
 800ab14:	e0bffd15 	stw	r2,-12(fp)
 800ab18:	00000006 	br	800ab1c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800ab1c:	e0bffd17 	ldw	r2,-12(fp)
 800ab20:	10800104 	addi	r2,r2,4
 800ab24:	10800037 	ldwio	r2,0(r2)
 800ab28:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800ab2c:	e0bffc17 	ldw	r2,-16(fp)
 800ab30:	1080c00c 	andi	r2,r2,768
 800ab34:	1005003a 	cmpeq	r2,r2,zero
 800ab38:	1000741e 	bne	r2,zero,800ad0c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800ab3c:	e0bffc17 	ldw	r2,-16(fp)
 800ab40:	1080400c 	andi	r2,r2,256
 800ab44:	1005003a 	cmpeq	r2,r2,zero
 800ab48:	1000351e 	bne	r2,zero,800ac20 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800ab4c:	00800074 	movhi	r2,1
 800ab50:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ab54:	e0bffe17 	ldw	r2,-8(fp)
 800ab58:	10800a17 	ldw	r2,40(r2)
 800ab5c:	10800044 	addi	r2,r2,1
 800ab60:	1081ffcc 	andi	r2,r2,2047
 800ab64:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 800ab68:	e0bffe17 	ldw	r2,-8(fp)
 800ab6c:	10c00b17 	ldw	r3,44(r2)
 800ab70:	e0bffa17 	ldw	r2,-24(fp)
 800ab74:	18801626 	beq	r3,r2,800abd0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800ab78:	e0bffd17 	ldw	r2,-12(fp)
 800ab7c:	10800037 	ldwio	r2,0(r2)
 800ab80:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800ab84:	e0bffb17 	ldw	r2,-20(fp)
 800ab88:	10a0000c 	andi	r2,r2,32768
 800ab8c:	1005003a 	cmpeq	r2,r2,zero
 800ab90:	10000f1e 	bne	r2,zero,800abd0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800ab94:	e0bffe17 	ldw	r2,-8(fp)
 800ab98:	10c00a17 	ldw	r3,40(r2)
 800ab9c:	e0bffb17 	ldw	r2,-20(fp)
 800aba0:	1009883a 	mov	r4,r2
 800aba4:	e0bffe17 	ldw	r2,-8(fp)
 800aba8:	1885883a 	add	r2,r3,r2
 800abac:	10800e04 	addi	r2,r2,56
 800abb0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800abb4:	e0bffe17 	ldw	r2,-8(fp)
 800abb8:	10800a17 	ldw	r2,40(r2)
 800abbc:	10800044 	addi	r2,r2,1
 800abc0:	10c1ffcc 	andi	r3,r2,2047
 800abc4:	e0bffe17 	ldw	r2,-8(fp)
 800abc8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800abcc:	003fe106 	br	800ab54 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800abd0:	e0bffb17 	ldw	r2,-20(fp)
 800abd4:	10bfffec 	andhi	r2,r2,65535
 800abd8:	1005003a 	cmpeq	r2,r2,zero
 800abdc:	1000101e 	bne	r2,zero,800ac20 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800abe0:	e0bffe17 	ldw	r2,-8(fp)
 800abe4:	10c00817 	ldw	r3,32(r2)
 800abe8:	00bfff84 	movi	r2,-2
 800abec:	1886703a 	and	r3,r3,r2
 800abf0:	e0bffe17 	ldw	r2,-8(fp)
 800abf4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800abf8:	e0bffd17 	ldw	r2,-12(fp)
 800abfc:	11000104 	addi	r4,r2,4
 800ac00:	e0bffe17 	ldw	r2,-8(fp)
 800ac04:	10800817 	ldw	r2,32(r2)
 800ac08:	1007883a 	mov	r3,r2
 800ac0c:	2005883a 	mov	r2,r4
 800ac10:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800ac14:	e0bffd17 	ldw	r2,-12(fp)
 800ac18:	10800104 	addi	r2,r2,4
 800ac1c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800ac20:	e0bffc17 	ldw	r2,-16(fp)
 800ac24:	1080800c 	andi	r2,r2,512
 800ac28:	1005003a 	cmpeq	r2,r2,zero
 800ac2c:	103fbb1e 	bne	r2,zero,800ab1c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800ac30:	e0bffc17 	ldw	r2,-16(fp)
 800ac34:	10bfffec 	andhi	r2,r2,65535
 800ac38:	1004d43a 	srli	r2,r2,16
 800ac3c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800ac40:	00001506 	br	800ac98 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800ac44:	e13ffd17 	ldw	r4,-12(fp)
 800ac48:	e0bffe17 	ldw	r2,-8(fp)
 800ac4c:	10c00d17 	ldw	r3,52(r2)
 800ac50:	e0bffe17 	ldw	r2,-8(fp)
 800ac54:	1885883a 	add	r2,r3,r2
 800ac58:	10820e04 	addi	r2,r2,2104
 800ac5c:	10800003 	ldbu	r2,0(r2)
 800ac60:	10c03fcc 	andi	r3,r2,255
 800ac64:	18c0201c 	xori	r3,r3,128
 800ac68:	18ffe004 	addi	r3,r3,-128
 800ac6c:	2005883a 	mov	r2,r4
 800ac70:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ac74:	e0bffe17 	ldw	r2,-8(fp)
 800ac78:	10800d17 	ldw	r2,52(r2)
 800ac7c:	10800044 	addi	r2,r2,1
 800ac80:	10c1ffcc 	andi	r3,r2,2047
 800ac84:	e0bffe17 	ldw	r2,-8(fp)
 800ac88:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800ac8c:	e0bff917 	ldw	r2,-28(fp)
 800ac90:	10bfffc4 	addi	r2,r2,-1
 800ac94:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800ac98:	e0bff917 	ldw	r2,-28(fp)
 800ac9c:	1005003a 	cmpeq	r2,r2,zero
 800aca0:	1000051e 	bne	r2,zero,800acb8 <altera_avalon_jtag_uart_irq+0x1c4>
 800aca4:	e0bffe17 	ldw	r2,-8(fp)
 800aca8:	10c00d17 	ldw	r3,52(r2)
 800acac:	e0bffe17 	ldw	r2,-8(fp)
 800acb0:	10800c17 	ldw	r2,48(r2)
 800acb4:	18bfe31e 	bne	r3,r2,800ac44 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800acb8:	e0bff917 	ldw	r2,-28(fp)
 800acbc:	1005003a 	cmpeq	r2,r2,zero
 800acc0:	103f961e 	bne	r2,zero,800ab1c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800acc4:	e0bffe17 	ldw	r2,-8(fp)
 800acc8:	10c00817 	ldw	r3,32(r2)
 800accc:	00bfff44 	movi	r2,-3
 800acd0:	1886703a 	and	r3,r3,r2
 800acd4:	e0bffe17 	ldw	r2,-8(fp)
 800acd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800acdc:	e0bffe17 	ldw	r2,-8(fp)
 800ace0:	10800017 	ldw	r2,0(r2)
 800ace4:	11000104 	addi	r4,r2,4
 800ace8:	e0bffe17 	ldw	r2,-8(fp)
 800acec:	10800817 	ldw	r2,32(r2)
 800acf0:	1007883a 	mov	r3,r2
 800acf4:	2005883a 	mov	r2,r4
 800acf8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800acfc:	e0bffd17 	ldw	r2,-12(fp)
 800ad00:	10800104 	addi	r2,r2,4
 800ad04:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800ad08:	003f8406 	br	800ab1c <altera_avalon_jtag_uart_irq+0x28>
}
 800ad0c:	e037883a 	mov	sp,fp
 800ad10:	df000017 	ldw	fp,0(sp)
 800ad14:	dec00104 	addi	sp,sp,4
 800ad18:	f800283a 	ret

0800ad1c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800ad1c:	defffc04 	addi	sp,sp,-16
 800ad20:	df000315 	stw	fp,12(sp)
 800ad24:	df000304 	addi	fp,sp,12
 800ad28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800ad2c:	e0bfff17 	ldw	r2,-4(fp)
 800ad30:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800ad34:	e0bffe17 	ldw	r2,-8(fp)
 800ad38:	10800017 	ldw	r2,0(r2)
 800ad3c:	10800104 	addi	r2,r2,4
 800ad40:	10800037 	ldwio	r2,0(r2)
 800ad44:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800ad48:	e0bffd17 	ldw	r2,-12(fp)
 800ad4c:	1081000c 	andi	r2,r2,1024
 800ad50:	1005003a 	cmpeq	r2,r2,zero
 800ad54:	10000c1e 	bne	r2,zero,800ad88 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800ad58:	e0bffe17 	ldw	r2,-8(fp)
 800ad5c:	10800017 	ldw	r2,0(r2)
 800ad60:	11000104 	addi	r4,r2,4
 800ad64:	e0bffe17 	ldw	r2,-8(fp)
 800ad68:	10800817 	ldw	r2,32(r2)
 800ad6c:	10810014 	ori	r2,r2,1024
 800ad70:	1007883a 	mov	r3,r2
 800ad74:	2005883a 	mov	r2,r4
 800ad78:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 800ad7c:	e0bffe17 	ldw	r2,-8(fp)
 800ad80:	10000915 	stw	zero,36(r2)
 800ad84:	00000a06 	br	800adb0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800ad88:	e0bffe17 	ldw	r2,-8(fp)
 800ad8c:	10c00917 	ldw	r3,36(r2)
 800ad90:	00a00034 	movhi	r2,32768
 800ad94:	10bfff04 	addi	r2,r2,-4
 800ad98:	10c00536 	bltu	r2,r3,800adb0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 800ad9c:	e0bffe17 	ldw	r2,-8(fp)
 800ada0:	10800917 	ldw	r2,36(r2)
 800ada4:	10c00044 	addi	r3,r2,1
 800ada8:	e0bffe17 	ldw	r2,-8(fp)
 800adac:	10c00915 	stw	r3,36(r2)
 800adb0:	00820074 	movhi	r2,2049
 800adb4:	1080e304 	addi	r2,r2,908
 800adb8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800adbc:	e037883a 	mov	sp,fp
 800adc0:	df000017 	ldw	fp,0(sp)
 800adc4:	dec00104 	addi	sp,sp,4
 800adc8:	f800283a 	ret

0800adcc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800adcc:	defffc04 	addi	sp,sp,-16
 800add0:	df000315 	stw	fp,12(sp)
 800add4:	df000304 	addi	fp,sp,12
 800add8:	e13ffd15 	stw	r4,-12(fp)
 800addc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800ade0:	00000706 	br	800ae00 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 800ade4:	e0bffe17 	ldw	r2,-8(fp)
 800ade8:	1090000c 	andi	r2,r2,16384
 800adec:	1005003a 	cmpeq	r2,r2,zero
 800adf0:	1000031e 	bne	r2,zero,800ae00 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 800adf4:	00bffd44 	movi	r2,-11
 800adf8:	e0bfff15 	stw	r2,-4(fp)
 800adfc:	00000b06 	br	800ae2c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800ae00:	e0bffd17 	ldw	r2,-12(fp)
 800ae04:	10c00d17 	ldw	r3,52(r2)
 800ae08:	e0bffd17 	ldw	r2,-12(fp)
 800ae0c:	10800c17 	ldw	r2,48(r2)
 800ae10:	18800526 	beq	r3,r2,800ae28 <altera_avalon_jtag_uart_close+0x5c>
 800ae14:	e0bffd17 	ldw	r2,-12(fp)
 800ae18:	10c00917 	ldw	r3,36(r2)
 800ae1c:	e0bffd17 	ldw	r2,-12(fp)
 800ae20:	10800117 	ldw	r2,4(r2)
 800ae24:	18bfef36 	bltu	r3,r2,800ade4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800ae28:	e03fff15 	stw	zero,-4(fp)
 800ae2c:	e0bfff17 	ldw	r2,-4(fp)
}
 800ae30:	e037883a 	mov	sp,fp
 800ae34:	df000017 	ldw	fp,0(sp)
 800ae38:	dec00104 	addi	sp,sp,4
 800ae3c:	f800283a 	ret

0800ae40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800ae40:	defff804 	addi	sp,sp,-32
 800ae44:	df000715 	stw	fp,28(sp)
 800ae48:	df000704 	addi	fp,sp,28
 800ae4c:	e13ffb15 	stw	r4,-20(fp)
 800ae50:	e17ffc15 	stw	r5,-16(fp)
 800ae54:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 800ae58:	00bff9c4 	movi	r2,-25
 800ae5c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 800ae60:	e0bffc17 	ldw	r2,-16(fp)
 800ae64:	e0bfff15 	stw	r2,-4(fp)
 800ae68:	e0ffff17 	ldw	r3,-4(fp)
 800ae6c:	189a8060 	cmpeqi	r2,r3,27137
 800ae70:	1000041e 	bne	r2,zero,800ae84 <altera_avalon_jtag_uart_ioctl+0x44>
 800ae74:	e0ffff17 	ldw	r3,-4(fp)
 800ae78:	189a80a0 	cmpeqi	r2,r3,27138
 800ae7c:	10001b1e 	bne	r2,zero,800aeec <altera_avalon_jtag_uart_ioctl+0xac>
 800ae80:	00002706 	br	800af20 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800ae84:	e0bffb17 	ldw	r2,-20(fp)
 800ae88:	10c00117 	ldw	r3,4(r2)
 800ae8c:	00a00034 	movhi	r2,32768
 800ae90:	10bfffc4 	addi	r2,r2,-1
 800ae94:	18802226 	beq	r3,r2,800af20 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 800ae98:	e0bffd17 	ldw	r2,-12(fp)
 800ae9c:	10800017 	ldw	r2,0(r2)
 800aea0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800aea4:	e0bff917 	ldw	r2,-28(fp)
 800aea8:	10800090 	cmplti	r2,r2,2
 800aeac:	1000071e 	bne	r2,zero,800aecc <altera_avalon_jtag_uart_ioctl+0x8c>
 800aeb0:	e0fff917 	ldw	r3,-28(fp)
 800aeb4:	00a00034 	movhi	r2,32768
 800aeb8:	10bfffc4 	addi	r2,r2,-1
 800aebc:	18800326 	beq	r3,r2,800aecc <altera_avalon_jtag_uart_ioctl+0x8c>
 800aec0:	e0bff917 	ldw	r2,-28(fp)
 800aec4:	e0bffe15 	stw	r2,-8(fp)
 800aec8:	00000306 	br	800aed8 <altera_avalon_jtag_uart_ioctl+0x98>
 800aecc:	00e00034 	movhi	r3,32768
 800aed0:	18ffff84 	addi	r3,r3,-2
 800aed4:	e0fffe15 	stw	r3,-8(fp)
 800aed8:	e0bffb17 	ldw	r2,-20(fp)
 800aedc:	e0fffe17 	ldw	r3,-8(fp)
 800aee0:	10c00115 	stw	r3,4(r2)
      rc = 0;
 800aee4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 800aee8:	00000d06 	br	800af20 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800aeec:	e0bffb17 	ldw	r2,-20(fp)
 800aef0:	10c00117 	ldw	r3,4(r2)
 800aef4:	00a00034 	movhi	r2,32768
 800aef8:	10bfffc4 	addi	r2,r2,-1
 800aefc:	18800826 	beq	r3,r2,800af20 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800af00:	e13ffd17 	ldw	r4,-12(fp)
 800af04:	e0bffb17 	ldw	r2,-20(fp)
 800af08:	10c00917 	ldw	r3,36(r2)
 800af0c:	e0bffb17 	ldw	r2,-20(fp)
 800af10:	10800117 	ldw	r2,4(r2)
 800af14:	1885803a 	cmpltu	r2,r3,r2
 800af18:	20800015 	stw	r2,0(r4)
      rc = 0;
 800af1c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 800af20:	e0bffa17 	ldw	r2,-24(fp)
}
 800af24:	e037883a 	mov	sp,fp
 800af28:	df000017 	ldw	fp,0(sp)
 800af2c:	dec00104 	addi	sp,sp,4
 800af30:	f800283a 	ret

0800af34 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800af34:	defff204 	addi	sp,sp,-56
 800af38:	dfc00d15 	stw	ra,52(sp)
 800af3c:	df000c15 	stw	fp,48(sp)
 800af40:	df000c04 	addi	fp,sp,48
 800af44:	e13ffb15 	stw	r4,-20(fp)
 800af48:	e17ffc15 	stw	r5,-16(fp)
 800af4c:	e1bffd15 	stw	r6,-12(fp)
 800af50:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 800af54:	e0bffc17 	ldw	r2,-16(fp)
 800af58:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800af5c:	00004806 	br	800b080 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800af60:	e0bffb17 	ldw	r2,-20(fp)
 800af64:	10800a17 	ldw	r2,40(r2)
 800af68:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800af6c:	e0bffb17 	ldw	r2,-20(fp)
 800af70:	10800b17 	ldw	r2,44(r2)
 800af74:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 800af78:	e0fff717 	ldw	r3,-36(fp)
 800af7c:	e0bff617 	ldw	r2,-40(fp)
 800af80:	18800536 	bltu	r3,r2,800af98 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800af84:	e0bff717 	ldw	r2,-36(fp)
 800af88:	e0fff617 	ldw	r3,-40(fp)
 800af8c:	10c5c83a 	sub	r2,r2,r3
 800af90:	e0bff815 	stw	r2,-32(fp)
 800af94:	00000406 	br	800afa8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800af98:	00820004 	movi	r2,2048
 800af9c:	e0fff617 	ldw	r3,-40(fp)
 800afa0:	10c5c83a 	sub	r2,r2,r3
 800afa4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 800afa8:	e0bff817 	ldw	r2,-32(fp)
 800afac:	1005003a 	cmpeq	r2,r2,zero
 800afb0:	10001f1e 	bne	r2,zero,800b030 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 800afb4:	e0fffd17 	ldw	r3,-12(fp)
 800afb8:	e0bff817 	ldw	r2,-32(fp)
 800afbc:	1880022e 	bgeu	r3,r2,800afc8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800afc0:	e0bffd17 	ldw	r2,-12(fp)
 800afc4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800afc8:	e0bffb17 	ldw	r2,-20(fp)
 800afcc:	10c00e04 	addi	r3,r2,56
 800afd0:	e0bff617 	ldw	r2,-40(fp)
 800afd4:	1887883a 	add	r3,r3,r2
 800afd8:	e0bffa17 	ldw	r2,-24(fp)
 800afdc:	1009883a 	mov	r4,r2
 800afe0:	180b883a 	mov	r5,r3
 800afe4:	e1bff817 	ldw	r6,-32(fp)
 800afe8:	80055940 	call	8005594 <memcpy>
      ptr   += n;
 800afec:	e0fff817 	ldw	r3,-32(fp)
 800aff0:	e0bffa17 	ldw	r2,-24(fp)
 800aff4:	10c5883a 	add	r2,r2,r3
 800aff8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 800affc:	e0fffd17 	ldw	r3,-12(fp)
 800b000:	e0bff817 	ldw	r2,-32(fp)
 800b004:	1885c83a 	sub	r2,r3,r2
 800b008:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800b00c:	e0fff617 	ldw	r3,-40(fp)
 800b010:	e0bff817 	ldw	r2,-32(fp)
 800b014:	1885883a 	add	r2,r3,r2
 800b018:	10c1ffcc 	andi	r3,r2,2047
 800b01c:	e0bffb17 	ldw	r2,-20(fp)
 800b020:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800b024:	e0bffd17 	ldw	r2,-12(fp)
 800b028:	10800048 	cmpgei	r2,r2,1
 800b02c:	103fcc1e 	bne	r2,zero,800af60 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 800b030:	e0fffa17 	ldw	r3,-24(fp)
 800b034:	e0bffc17 	ldw	r2,-16(fp)
 800b038:	1880141e 	bne	r3,r2,800b08c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800b03c:	e0bffe17 	ldw	r2,-8(fp)
 800b040:	1090000c 	andi	r2,r2,16384
 800b044:	1004c03a 	cmpne	r2,r2,zero
 800b048:	1000101e 	bne	r2,zero,800b08c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800b04c:	e0bffb17 	ldw	r2,-20(fp)
 800b050:	10c00a17 	ldw	r3,40(r2)
 800b054:	e0bff717 	ldw	r2,-36(fp)
 800b058:	1880051e 	bne	r3,r2,800b070 <altera_avalon_jtag_uart_read+0x13c>
 800b05c:	e0bffb17 	ldw	r2,-20(fp)
 800b060:	10c00917 	ldw	r3,36(r2)
 800b064:	e0bffb17 	ldw	r2,-20(fp)
 800b068:	10800117 	ldw	r2,4(r2)
 800b06c:	18bff736 	bltu	r3,r2,800b04c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800b070:	e0bffb17 	ldw	r2,-20(fp)
 800b074:	10c00a17 	ldw	r3,40(r2)
 800b078:	e0bff717 	ldw	r2,-36(fp)
 800b07c:	18800326 	beq	r3,r2,800b08c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800b080:	e0bffd17 	ldw	r2,-12(fp)
 800b084:	10800048 	cmpgei	r2,r2,1
 800b088:	103fb51e 	bne	r2,zero,800af60 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800b08c:	e0fffa17 	ldw	r3,-24(fp)
 800b090:	e0bffc17 	ldw	r2,-16(fp)
 800b094:	18801926 	beq	r3,r2,800b0fc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b098:	0005303a 	rdctl	r2,status
 800b09c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b0a0:	e0fff517 	ldw	r3,-44(fp)
 800b0a4:	00bfff84 	movi	r2,-2
 800b0a8:	1884703a 	and	r2,r3,r2
 800b0ac:	1001703a 	wrctl	status,r2
  
  return context;
 800b0b0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800b0b4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800b0b8:	e0bffb17 	ldw	r2,-20(fp)
 800b0bc:	10800817 	ldw	r2,32(r2)
 800b0c0:	10c00054 	ori	r3,r2,1
 800b0c4:	e0bffb17 	ldw	r2,-20(fp)
 800b0c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800b0cc:	e0bffb17 	ldw	r2,-20(fp)
 800b0d0:	10800017 	ldw	r2,0(r2)
 800b0d4:	11000104 	addi	r4,r2,4
 800b0d8:	e0bffb17 	ldw	r2,-20(fp)
 800b0dc:	10800817 	ldw	r2,32(r2)
 800b0e0:	1007883a 	mov	r3,r2
 800b0e4:	2005883a 	mov	r2,r4
 800b0e8:	10c00035 	stwio	r3,0(r2)
 800b0ec:	e0bff917 	ldw	r2,-28(fp)
 800b0f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b0f4:	e0bff417 	ldw	r2,-48(fp)
 800b0f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800b0fc:	e0fffa17 	ldw	r3,-24(fp)
 800b100:	e0bffc17 	ldw	r2,-16(fp)
 800b104:	18800526 	beq	r3,r2,800b11c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 800b108:	e0fffa17 	ldw	r3,-24(fp)
 800b10c:	e0bffc17 	ldw	r2,-16(fp)
 800b110:	1887c83a 	sub	r3,r3,r2
 800b114:	e0ffff15 	stw	r3,-4(fp)
 800b118:	00000906 	br	800b140 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 800b11c:	e0bffe17 	ldw	r2,-8(fp)
 800b120:	1090000c 	andi	r2,r2,16384
 800b124:	1005003a 	cmpeq	r2,r2,zero
 800b128:	1000031e 	bne	r2,zero,800b138 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800b12c:	00bffd44 	movi	r2,-11
 800b130:	e0bfff15 	stw	r2,-4(fp)
 800b134:	00000206 	br	800b140 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 800b138:	00bffec4 	movi	r2,-5
 800b13c:	e0bfff15 	stw	r2,-4(fp)
 800b140:	e0bfff17 	ldw	r2,-4(fp)
}
 800b144:	e037883a 	mov	sp,fp
 800b148:	dfc00117 	ldw	ra,4(sp)
 800b14c:	df000017 	ldw	fp,0(sp)
 800b150:	dec00204 	addi	sp,sp,8
 800b154:	f800283a 	ret

0800b158 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800b158:	defff204 	addi	sp,sp,-56
 800b15c:	dfc00d15 	stw	ra,52(sp)
 800b160:	df000c15 	stw	fp,48(sp)
 800b164:	df000c04 	addi	fp,sp,48
 800b168:	e13ffb15 	stw	r4,-20(fp)
 800b16c:	e17ffc15 	stw	r5,-16(fp)
 800b170:	e1bffd15 	stw	r6,-12(fp)
 800b174:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800b178:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800b17c:	e0bffc17 	ldw	r2,-16(fp)
 800b180:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800b184:	00003a06 	br	800b270 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800b188:	e0bffb17 	ldw	r2,-20(fp)
 800b18c:	10800c17 	ldw	r2,48(r2)
 800b190:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 800b194:	e0bffb17 	ldw	r2,-20(fp)
 800b198:	10800d17 	ldw	r2,52(r2)
 800b19c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 800b1a0:	e0fffa17 	ldw	r3,-24(fp)
 800b1a4:	e0bff917 	ldw	r2,-28(fp)
 800b1a8:	1880062e 	bgeu	r3,r2,800b1c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800b1ac:	e0fff917 	ldw	r3,-28(fp)
 800b1b0:	e0bffa17 	ldw	r2,-24(fp)
 800b1b4:	1885c83a 	sub	r2,r3,r2
 800b1b8:	10bfffc4 	addi	r2,r2,-1
 800b1bc:	e0bff815 	stw	r2,-32(fp)
 800b1c0:	00000c06 	br	800b1f4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 800b1c4:	e0bff917 	ldw	r2,-28(fp)
 800b1c8:	1005003a 	cmpeq	r2,r2,zero
 800b1cc:	1000051e 	bne	r2,zero,800b1e4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800b1d0:	00820004 	movi	r2,2048
 800b1d4:	e0fffa17 	ldw	r3,-24(fp)
 800b1d8:	10c5c83a 	sub	r2,r2,r3
 800b1dc:	e0bff815 	stw	r2,-32(fp)
 800b1e0:	00000406 	br	800b1f4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800b1e4:	0081ffc4 	movi	r2,2047
 800b1e8:	e0fffa17 	ldw	r3,-24(fp)
 800b1ec:	10c5c83a 	sub	r2,r2,r3
 800b1f0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 800b1f4:	e0bff817 	ldw	r2,-32(fp)
 800b1f8:	1005003a 	cmpeq	r2,r2,zero
 800b1fc:	10001f1e 	bne	r2,zero,800b27c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 800b200:	e0fffd17 	ldw	r3,-12(fp)
 800b204:	e0bff817 	ldw	r2,-32(fp)
 800b208:	1880022e 	bgeu	r3,r2,800b214 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 800b20c:	e0bffd17 	ldw	r2,-12(fp)
 800b210:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800b214:	e0bffb17 	ldw	r2,-20(fp)
 800b218:	10c20e04 	addi	r3,r2,2104
 800b21c:	e0bffa17 	ldw	r2,-24(fp)
 800b220:	1885883a 	add	r2,r3,r2
 800b224:	e0fffc17 	ldw	r3,-16(fp)
 800b228:	1009883a 	mov	r4,r2
 800b22c:	180b883a 	mov	r5,r3
 800b230:	e1bff817 	ldw	r6,-32(fp)
 800b234:	80055940 	call	8005594 <memcpy>
      ptr   += n;
 800b238:	e0fff817 	ldw	r3,-32(fp)
 800b23c:	e0bffc17 	ldw	r2,-16(fp)
 800b240:	10c5883a 	add	r2,r2,r3
 800b244:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 800b248:	e0fffd17 	ldw	r3,-12(fp)
 800b24c:	e0bff817 	ldw	r2,-32(fp)
 800b250:	1885c83a 	sub	r2,r3,r2
 800b254:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800b258:	e0fffa17 	ldw	r3,-24(fp)
 800b25c:	e0bff817 	ldw	r2,-32(fp)
 800b260:	1885883a 	add	r2,r3,r2
 800b264:	10c1ffcc 	andi	r3,r2,2047
 800b268:	e0bffb17 	ldw	r2,-20(fp)
 800b26c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800b270:	e0bffd17 	ldw	r2,-12(fp)
 800b274:	10800048 	cmpgei	r2,r2,1
 800b278:	103fc31e 	bne	r2,zero,800b188 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b27c:	0005303a 	rdctl	r2,status
 800b280:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b284:	e0fff517 	ldw	r3,-44(fp)
 800b288:	00bfff84 	movi	r2,-2
 800b28c:	1884703a 	and	r2,r3,r2
 800b290:	1001703a 	wrctl	status,r2
  
  return context;
 800b294:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800b298:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800b29c:	e0bffb17 	ldw	r2,-20(fp)
 800b2a0:	10800817 	ldw	r2,32(r2)
 800b2a4:	10c00094 	ori	r3,r2,2
 800b2a8:	e0bffb17 	ldw	r2,-20(fp)
 800b2ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800b2b0:	e0bffb17 	ldw	r2,-20(fp)
 800b2b4:	10800017 	ldw	r2,0(r2)
 800b2b8:	11000104 	addi	r4,r2,4
 800b2bc:	e0bffb17 	ldw	r2,-20(fp)
 800b2c0:	10800817 	ldw	r2,32(r2)
 800b2c4:	1007883a 	mov	r3,r2
 800b2c8:	2005883a 	mov	r2,r4
 800b2cc:	10c00035 	stwio	r3,0(r2)
 800b2d0:	e0bff717 	ldw	r2,-36(fp)
 800b2d4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b2d8:	e0bff417 	ldw	r2,-48(fp)
 800b2dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800b2e0:	e0bffd17 	ldw	r2,-12(fp)
 800b2e4:	10800050 	cmplti	r2,r2,1
 800b2e8:	1000111e 	bne	r2,zero,800b330 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 800b2ec:	e0bffe17 	ldw	r2,-8(fp)
 800b2f0:	1090000c 	andi	r2,r2,16384
 800b2f4:	1004c03a 	cmpne	r2,r2,zero
 800b2f8:	1000101e 	bne	r2,zero,800b33c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800b2fc:	e0bffb17 	ldw	r2,-20(fp)
 800b300:	10c00d17 	ldw	r3,52(r2)
 800b304:	e0bff917 	ldw	r2,-28(fp)
 800b308:	1880051e 	bne	r3,r2,800b320 <altera_avalon_jtag_uart_write+0x1c8>
 800b30c:	e0bffb17 	ldw	r2,-20(fp)
 800b310:	10c00917 	ldw	r3,36(r2)
 800b314:	e0bffb17 	ldw	r2,-20(fp)
 800b318:	10800117 	ldw	r2,4(r2)
 800b31c:	18bff736 	bltu	r3,r2,800b2fc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 800b320:	e0bffb17 	ldw	r2,-20(fp)
 800b324:	10c00d17 	ldw	r3,52(r2)
 800b328:	e0bff917 	ldw	r2,-28(fp)
 800b32c:	18800326 	beq	r3,r2,800b33c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 800b330:	e0bffd17 	ldw	r2,-12(fp)
 800b334:	10800048 	cmpgei	r2,r2,1
 800b338:	103fcd1e 	bne	r2,zero,800b270 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800b33c:	e0fffc17 	ldw	r3,-16(fp)
 800b340:	e0bff617 	ldw	r2,-40(fp)
 800b344:	18800526 	beq	r3,r2,800b35c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 800b348:	e0fffc17 	ldw	r3,-16(fp)
 800b34c:	e0bff617 	ldw	r2,-40(fp)
 800b350:	1887c83a 	sub	r3,r3,r2
 800b354:	e0ffff15 	stw	r3,-4(fp)
 800b358:	00000906 	br	800b380 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 800b35c:	e0bffe17 	ldw	r2,-8(fp)
 800b360:	1090000c 	andi	r2,r2,16384
 800b364:	1005003a 	cmpeq	r2,r2,zero
 800b368:	1000031e 	bne	r2,zero,800b378 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 800b36c:	00bffd44 	movi	r2,-11
 800b370:	e0bfff15 	stw	r2,-4(fp)
 800b374:	00000206 	br	800b380 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 800b378:	00bffec4 	movi	r2,-5
 800b37c:	e0bfff15 	stw	r2,-4(fp)
 800b380:	e0bfff17 	ldw	r2,-4(fp)
}
 800b384:	e037883a 	mov	sp,fp
 800b388:	dfc00117 	ldw	ra,4(sp)
 800b38c:	df000017 	ldw	fp,0(sp)
 800b390:	dec00204 	addi	sp,sp,8
 800b394:	f800283a 	ret

0800b398 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 800b398:	defffc04 	addi	sp,sp,-16
 800b39c:	dfc00315 	stw	ra,12(sp)
 800b3a0:	df000215 	stw	fp,8(sp)
 800b3a4:	df000204 	addi	fp,sp,8
 800b3a8:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 800b3ac:	e0bfff17 	ldw	r2,-4(fp)
 800b3b0:	10800217 	ldw	r2,8(r2)
 800b3b4:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 800b3b8:	00000c06 	br	800b3ec <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 800b3bc:	e13ffe17 	ldw	r4,-8(fp)
 800b3c0:	01420074 	movhi	r5,2049
 800b3c4:	29736904 	addi	r5,r5,-12892
 800b3c8:	80070580 	call	8007058 <strcmp>
 800b3cc:	1004c03a 	cmpne	r2,r2,zero
 800b3d0:	1000031e 	bne	r2,zero,800b3e0 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 800b3d4:	e0bffe17 	ldw	r2,-8(fp)
 800b3d8:	10000005 	stb	zero,0(r2)
			break;
 800b3dc:	00000a06 	br	800b408 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 800b3e0:	e0bffe17 	ldw	r2,-8(fp)
 800b3e4:	10800044 	addi	r2,r2,1
 800b3e8:	e0bffe15 	stw	r2,-8(fp)
 800b3ec:	e0bffe17 	ldw	r2,-8(fp)
 800b3f0:	10800003 	ldbu	r2,0(r2)
 800b3f4:	10803fcc 	andi	r2,r2,255
 800b3f8:	1080201c 	xori	r2,r2,128
 800b3fc:	10bfe004 	addi	r2,r2,-128
 800b400:	1004c03a 	cmpne	r2,r2,zero
 800b404:	103fed1e 	bne	r2,zero,800b3bc <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 800b408:	e037883a 	mov	sp,fp
 800b40c:	dfc00117 	ldw	ra,4(sp)
 800b410:	df000017 	ldw	fp,0(sp)
 800b414:	dec00204 	addi	sp,sp,8
 800b418:	f800283a 	ret

0800b41c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 800b41c:	defffc04 	addi	sp,sp,-16
 800b420:	dfc00315 	stw	ra,12(sp)
 800b424:	df000215 	stw	fp,8(sp)
 800b428:	df000204 	addi	fp,sp,8
 800b42c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 800b430:	e13fff17 	ldw	r4,-4(fp)
 800b434:	01420074 	movhi	r5,2049
 800b438:	297a1c04 	addi	r5,r5,-6032
 800b43c:	800b9e80 	call	800b9e8 <alt_find_dev>
 800b440:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800b444:	e0bffe17 	ldw	r2,-8(fp)
}
 800b448:	e037883a 	mov	sp,fp
 800b44c:	dfc00117 	ldw	ra,4(sp)
 800b450:	df000017 	ldw	fp,0(sp)
 800b454:	dec00204 	addi	sp,sp,8
 800b458:	f800283a 	ret

0800b45c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 800b45c:	defff904 	addi	sp,sp,-28
 800b460:	df000615 	stw	fp,24(sp)
 800b464:	df000604 	addi	fp,sp,24
 800b468:	e13ffb15 	stw	r4,-20(fp)
 800b46c:	e1bffd15 	stw	r6,-12(fp)
 800b470:	e1fffe15 	stw	r7,-8(fp)
 800b474:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 800b478:	e0bffb17 	ldw	r2,-20(fp)
 800b47c:	10c00c17 	ldw	r3,48(r2)
 800b480:	e0bffd17 	ldw	r2,-12(fp)
 800b484:	10c0042e 	bgeu	r2,r3,800b498 <alt_up_char_buffer_draw+0x3c>
 800b488:	e0bffb17 	ldw	r2,-20(fp)
 800b48c:	10c00d17 	ldw	r3,52(r2)
 800b490:	e0bffe17 	ldw	r2,-8(fp)
 800b494:	10c00336 	bltu	r2,r3,800b4a4 <alt_up_char_buffer_draw+0x48>
		return -1;
 800b498:	00bfffc4 	movi	r2,-1
 800b49c:	e0bfff15 	stw	r2,-4(fp)
 800b4a0:	00001d06 	br	800b518 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 800b4a4:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 800b4a8:	e0bffb17 	ldw	r2,-20(fp)
 800b4ac:	10c00f17 	ldw	r3,60(r2)
 800b4b0:	e0bffd17 	ldw	r2,-12(fp)
 800b4b4:	1886703a 	and	r3,r3,r2
 800b4b8:	e0bffb17 	ldw	r2,-20(fp)
 800b4bc:	10800e17 	ldw	r2,56(r2)
 800b4c0:	1886983a 	sll	r3,r3,r2
 800b4c4:	e0bffa17 	ldw	r2,-24(fp)
 800b4c8:	10c4b03a 	or	r2,r2,r3
 800b4cc:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 800b4d0:	e0bffb17 	ldw	r2,-20(fp)
 800b4d4:	10c01117 	ldw	r3,68(r2)
 800b4d8:	e0bffe17 	ldw	r2,-8(fp)
 800b4dc:	1886703a 	and	r3,r3,r2
 800b4e0:	e0bffb17 	ldw	r2,-20(fp)
 800b4e4:	10801017 	ldw	r2,64(r2)
 800b4e8:	1886983a 	sll	r3,r3,r2
 800b4ec:	e0bffa17 	ldw	r2,-24(fp)
 800b4f0:	10c4b03a 	or	r2,r2,r3
 800b4f4:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 800b4f8:	e0bffb17 	ldw	r2,-20(fp)
 800b4fc:	10800b17 	ldw	r2,44(r2)
 800b500:	1007883a 	mov	r3,r2
 800b504:	e0bffa17 	ldw	r2,-24(fp)
 800b508:	1885883a 	add	r2,r3,r2
 800b50c:	e0fffc03 	ldbu	r3,-16(fp)
 800b510:	10c00025 	stbio	r3,0(r2)

	return 0;
 800b514:	e03fff15 	stw	zero,-4(fp)
 800b518:	e0bfff17 	ldw	r2,-4(fp)
}
 800b51c:	e037883a 	mov	sp,fp
 800b520:	df000017 	ldw	fp,0(sp)
 800b524:	dec00104 	addi	sp,sp,4
 800b528:	f800283a 	ret

0800b52c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 800b52c:	defff904 	addi	sp,sp,-28
 800b530:	df000615 	stw	fp,24(sp)
 800b534:	df000604 	addi	fp,sp,24
 800b538:	e13ffb15 	stw	r4,-20(fp)
 800b53c:	e17ffc15 	stw	r5,-16(fp)
 800b540:	e1bffd15 	stw	r6,-12(fp)
 800b544:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 800b548:	e0bffb17 	ldw	r2,-20(fp)
 800b54c:	10c00c17 	ldw	r3,48(r2)
 800b550:	e0bffd17 	ldw	r2,-12(fp)
 800b554:	10c0042e 	bgeu	r2,r3,800b568 <alt_up_char_buffer_string+0x3c>
 800b558:	e0bffb17 	ldw	r2,-20(fp)
 800b55c:	10c00d17 	ldw	r3,52(r2)
 800b560:	e0bffe17 	ldw	r2,-8(fp)
 800b564:	10c00336 	bltu	r2,r3,800b574 <alt_up_char_buffer_string+0x48>
		return -1;
 800b568:	00bfffc4 	movi	r2,-1
 800b56c:	e0bfff15 	stw	r2,-4(fp)
 800b570:	00002e06 	br	800b62c <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 800b574:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 800b578:	e0bffb17 	ldw	r2,-20(fp)
 800b57c:	10801017 	ldw	r2,64(r2)
 800b580:	1007883a 	mov	r3,r2
 800b584:	e0bffe17 	ldw	r2,-8(fp)
 800b588:	10c6983a 	sll	r3,r2,r3
 800b58c:	e0bffd17 	ldw	r2,-12(fp)
 800b590:	1885883a 	add	r2,r3,r2
 800b594:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 800b598:	00001c06 	br	800b60c <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 800b59c:	e0bffb17 	ldw	r2,-20(fp)
 800b5a0:	10800b17 	ldw	r2,44(r2)
 800b5a4:	1007883a 	mov	r3,r2
 800b5a8:	e0bffa17 	ldw	r2,-24(fp)
 800b5ac:	1889883a 	add	r4,r3,r2
 800b5b0:	e0bffc17 	ldw	r2,-16(fp)
 800b5b4:	10800003 	ldbu	r2,0(r2)
 800b5b8:	10c03fcc 	andi	r3,r2,255
 800b5bc:	18c0201c 	xori	r3,r3,128
 800b5c0:	18ffe004 	addi	r3,r3,-128
 800b5c4:	2005883a 	mov	r2,r4
 800b5c8:	10c00025 	stbio	r3,0(r2)
		++ptr;
 800b5cc:	e0bffc17 	ldw	r2,-16(fp)
 800b5d0:	10800044 	addi	r2,r2,1
 800b5d4:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 800b5d8:	e0bffd17 	ldw	r2,-12(fp)
 800b5dc:	10800044 	addi	r2,r2,1
 800b5e0:	e0bffd15 	stw	r2,-12(fp)
 800b5e4:	e0bffb17 	ldw	r2,-20(fp)
 800b5e8:	10c00c17 	ldw	r3,48(r2)
 800b5ec:	e0bffd17 	ldw	r2,-12(fp)
 800b5f0:	10c00336 	bltu	r2,r3,800b600 <alt_up_char_buffer_string+0xd4>
			return -1;
 800b5f4:	00bfffc4 	movi	r2,-1
 800b5f8:	e0bfff15 	stw	r2,-4(fp)
 800b5fc:	00000b06 	br	800b62c <alt_up_char_buffer_string+0x100>
		++offset;
 800b600:	e0bffa17 	ldw	r2,-24(fp)
 800b604:	10800044 	addi	r2,r2,1
 800b608:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 800b60c:	e0bffc17 	ldw	r2,-16(fp)
 800b610:	10800003 	ldbu	r2,0(r2)
 800b614:	10803fcc 	andi	r2,r2,255
 800b618:	1080201c 	xori	r2,r2,128
 800b61c:	10bfe004 	addi	r2,r2,-128
 800b620:	1004c03a 	cmpne	r2,r2,zero
 800b624:	103fdd1e 	bne	r2,zero,800b59c <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 800b628:	e03fff15 	stw	zero,-4(fp)
 800b62c:	e0bfff17 	ldw	r2,-4(fp)
}
 800b630:	e037883a 	mov	sp,fp
 800b634:	df000017 	ldw	fp,0(sp)
 800b638:	dec00104 	addi	sp,sp,4
 800b63c:	f800283a 	ret

0800b640 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 800b640:	defffe04 	addi	sp,sp,-8
 800b644:	df000115 	stw	fp,4(sp)
 800b648:	df000104 	addi	fp,sp,4
 800b64c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 800b650:	e0bfff17 	ldw	r2,-4(fp)
 800b654:	10800a17 	ldw	r2,40(r2)
 800b658:	10800084 	addi	r2,r2,2
 800b65c:	1007883a 	mov	r3,r2
 800b660:	00800044 	movi	r2,1
 800b664:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 800b668:	e0bfff17 	ldw	r2,-4(fp)
 800b66c:	10800a17 	ldw	r2,40(r2)
 800b670:	10800084 	addi	r2,r2,2
 800b674:	10800023 	ldbuio	r2,0(r2)
 800b678:	1080004c 	andi	r2,r2,1
 800b67c:	10803fcc 	andi	r2,r2,255
 800b680:	1004c03a 	cmpne	r2,r2,zero
 800b684:	103ff81e 	bne	r2,zero,800b668 <alt_up_char_buffer_clear+0x28>
	return 0;
 800b688:	0005883a 	mov	r2,zero
}
 800b68c:	e037883a 	mov	sp,fp
 800b690:	df000017 	ldw	fp,0(sp)
 800b694:	dec00104 	addi	sp,sp,4
 800b698:	f800283a 	ret

0800b69c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800b69c:	defff404 	addi	sp,sp,-48
 800b6a0:	df000b15 	stw	fp,44(sp)
 800b6a4:	df000b04 	addi	fp,sp,44
 800b6a8:	e13ffb15 	stw	r4,-20(fp)
 800b6ac:	e17ffc15 	stw	r5,-16(fp)
 800b6b0:	e1bffd15 	stw	r6,-12(fp)
 800b6b4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800b6b8:	e03ff915 	stw	zero,-28(fp)
 800b6bc:	00820074 	movhi	r2,2049
 800b6c0:	1080e304 	addi	r2,r2,908
 800b6c4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800b6c8:	1005003a 	cmpeq	r2,r2,zero
 800b6cc:	1000411e 	bne	r2,zero,800b7d4 <alt_alarm_start+0x138>
  {
    if (alarm)
 800b6d0:	e0bffb17 	ldw	r2,-20(fp)
 800b6d4:	1005003a 	cmpeq	r2,r2,zero
 800b6d8:	10003b1e 	bne	r2,zero,800b7c8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 800b6dc:	e0fffb17 	ldw	r3,-20(fp)
 800b6e0:	e0bffd17 	ldw	r2,-12(fp)
 800b6e4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 800b6e8:	e0fffb17 	ldw	r3,-20(fp)
 800b6ec:	e0bffe17 	ldw	r2,-8(fp)
 800b6f0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b6f4:	0005303a 	rdctl	r2,status
 800b6f8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b6fc:	e0fff817 	ldw	r3,-32(fp)
 800b700:	00bfff84 	movi	r2,-2
 800b704:	1884703a 	and	r2,r3,r2
 800b708:	1001703a 	wrctl	status,r2
  
  return context;
 800b70c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800b710:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800b714:	00820074 	movhi	r2,2049
 800b718:	1080e404 	addi	r2,r2,912
 800b71c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800b720:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800b724:	e0fffc17 	ldw	r3,-16(fp)
 800b728:	e0bff917 	ldw	r2,-28(fp)
 800b72c:	1885883a 	add	r2,r3,r2
 800b730:	10c00044 	addi	r3,r2,1
 800b734:	e0bffb17 	ldw	r2,-20(fp)
 800b738:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800b73c:	e0bffb17 	ldw	r2,-20(fp)
 800b740:	10c00217 	ldw	r3,8(r2)
 800b744:	e0bff917 	ldw	r2,-28(fp)
 800b748:	1880042e 	bgeu	r3,r2,800b75c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 800b74c:	e0fffb17 	ldw	r3,-20(fp)
 800b750:	00800044 	movi	r2,1
 800b754:	18800405 	stb	r2,16(r3)
 800b758:	00000206 	br	800b764 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 800b75c:	e0bffb17 	ldw	r2,-20(fp)
 800b760:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800b764:	e0fffb17 	ldw	r3,-20(fp)
 800b768:	00820074 	movhi	r2,2049
 800b76c:	10ba2204 	addi	r2,r2,-6008
 800b770:	e0bff615 	stw	r2,-40(fp)
 800b774:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800b778:	e0fff717 	ldw	r3,-36(fp)
 800b77c:	e0bff617 	ldw	r2,-40(fp)
 800b780:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 800b784:	e0bff617 	ldw	r2,-40(fp)
 800b788:	10c00017 	ldw	r3,0(r2)
 800b78c:	e0bff717 	ldw	r2,-36(fp)
 800b790:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800b794:	e0bff617 	ldw	r2,-40(fp)
 800b798:	10c00017 	ldw	r3,0(r2)
 800b79c:	e0bff717 	ldw	r2,-36(fp)
 800b7a0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 800b7a4:	e0fff617 	ldw	r3,-40(fp)
 800b7a8:	e0bff717 	ldw	r2,-36(fp)
 800b7ac:	18800015 	stw	r2,0(r3)
 800b7b0:	e0bffa17 	ldw	r2,-24(fp)
 800b7b4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b7b8:	e0bff517 	ldw	r2,-44(fp)
 800b7bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800b7c0:	e03fff15 	stw	zero,-4(fp)
 800b7c4:	00000506 	br	800b7dc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 800b7c8:	00bffa84 	movi	r2,-22
 800b7cc:	e0bfff15 	stw	r2,-4(fp)
 800b7d0:	00000206 	br	800b7dc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 800b7d4:	00bfde84 	movi	r2,-134
 800b7d8:	e0bfff15 	stw	r2,-4(fp)
 800b7dc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 800b7e0:	e037883a 	mov	sp,fp
 800b7e4:	df000017 	ldw	fp,0(sp)
 800b7e8:	dec00104 	addi	sp,sp,4
 800b7ec:	f800283a 	ret

0800b7f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800b7f0:	deffff04 	addi	sp,sp,-4
 800b7f4:	df000015 	stw	fp,0(sp)
 800b7f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800b7fc:	e037883a 	mov	sp,fp
 800b800:	df000017 	ldw	fp,0(sp)
 800b804:	dec00104 	addi	sp,sp,4
 800b808:	f800283a 	ret

0800b80c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800b80c:	defff904 	addi	sp,sp,-28
 800b810:	dfc00615 	stw	ra,24(sp)
 800b814:	df000515 	stw	fp,20(sp)
 800b818:	df000504 	addi	fp,sp,20
 800b81c:	e13ffd15 	stw	r4,-12(fp)
 800b820:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800b824:	e0bffd17 	ldw	r2,-12(fp)
 800b828:	1005003a 	cmpeq	r2,r2,zero
 800b82c:	1000041e 	bne	r2,zero,800b840 <alt_dev_llist_insert+0x34>
 800b830:	e0bffd17 	ldw	r2,-12(fp)
 800b834:	10800217 	ldw	r2,8(r2)
 800b838:	1004c03a 	cmpne	r2,r2,zero
 800b83c:	1000071e 	bne	r2,zero,800b85c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 800b840:	800b8c00 	call	800b8c0 <alt_get_errno>
 800b844:	1007883a 	mov	r3,r2
 800b848:	00800584 	movi	r2,22
 800b84c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800b850:	00bffa84 	movi	r2,-22
 800b854:	e0bfff15 	stw	r2,-4(fp)
 800b858:	00001306 	br	800b8a8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800b85c:	e0fffd17 	ldw	r3,-12(fp)
 800b860:	e0bffe17 	ldw	r2,-8(fp)
 800b864:	e0bffb15 	stw	r2,-20(fp)
 800b868:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800b86c:	e0fffc17 	ldw	r3,-16(fp)
 800b870:	e0bffb17 	ldw	r2,-20(fp)
 800b874:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 800b878:	e0bffb17 	ldw	r2,-20(fp)
 800b87c:	10c00017 	ldw	r3,0(r2)
 800b880:	e0bffc17 	ldw	r2,-16(fp)
 800b884:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800b888:	e0bffb17 	ldw	r2,-20(fp)
 800b88c:	10c00017 	ldw	r3,0(r2)
 800b890:	e0bffc17 	ldw	r2,-16(fp)
 800b894:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 800b898:	e0fffb17 	ldw	r3,-20(fp)
 800b89c:	e0bffc17 	ldw	r2,-16(fp)
 800b8a0:	18800015 	stw	r2,0(r3)

  return 0;  
 800b8a4:	e03fff15 	stw	zero,-4(fp)
 800b8a8:	e0bfff17 	ldw	r2,-4(fp)
}
 800b8ac:	e037883a 	mov	sp,fp
 800b8b0:	dfc00117 	ldw	ra,4(sp)
 800b8b4:	df000017 	ldw	fp,0(sp)
 800b8b8:	dec00204 	addi	sp,sp,8
 800b8bc:	f800283a 	ret

0800b8c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b8c0:	defffd04 	addi	sp,sp,-12
 800b8c4:	dfc00215 	stw	ra,8(sp)
 800b8c8:	df000115 	stw	fp,4(sp)
 800b8cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800b8d0:	00820074 	movhi	r2,2049
 800b8d4:	10ba1f04 	addi	r2,r2,-6020
 800b8d8:	10800017 	ldw	r2,0(r2)
 800b8dc:	1005003a 	cmpeq	r2,r2,zero
 800b8e0:	1000061e 	bne	r2,zero,800b8fc <alt_get_errno+0x3c>
 800b8e4:	00820074 	movhi	r2,2049
 800b8e8:	10ba1f04 	addi	r2,r2,-6020
 800b8ec:	10800017 	ldw	r2,0(r2)
 800b8f0:	103ee83a 	callr	r2
 800b8f4:	e0bfff15 	stw	r2,-4(fp)
 800b8f8:	00000306 	br	800b908 <alt_get_errno+0x48>
 800b8fc:	00820074 	movhi	r2,2049
 800b900:	1080de04 	addi	r2,r2,888
 800b904:	e0bfff15 	stw	r2,-4(fp)
 800b908:	e0bfff17 	ldw	r2,-4(fp)
}
 800b90c:	e037883a 	mov	sp,fp
 800b910:	dfc00117 	ldw	ra,4(sp)
 800b914:	df000017 	ldw	fp,0(sp)
 800b918:	dec00204 	addi	sp,sp,8
 800b91c:	f800283a 	ret

0800b920 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800b920:	defffd04 	addi	sp,sp,-12
 800b924:	dfc00215 	stw	ra,8(sp)
 800b928:	df000115 	stw	fp,4(sp)
 800b92c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800b930:	00bfff04 	movi	r2,-4
 800b934:	00c20074 	movhi	r3,2049
 800b938:	18f25604 	addi	r3,r3,-13992
 800b93c:	1885883a 	add	r2,r3,r2
 800b940:	e0bfff15 	stw	r2,-4(fp)
 800b944:	00000606 	br	800b960 <_do_ctors+0x40>
        (*ctor) (); 
 800b948:	e0bfff17 	ldw	r2,-4(fp)
 800b94c:	10800017 	ldw	r2,0(r2)
 800b950:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800b954:	e0bfff17 	ldw	r2,-4(fp)
 800b958:	10bfff04 	addi	r2,r2,-4
 800b95c:	e0bfff15 	stw	r2,-4(fp)
 800b960:	e0ffff17 	ldw	r3,-4(fp)
 800b964:	00820074 	movhi	r2,2049
 800b968:	10b25504 	addi	r2,r2,-13996
 800b96c:	18bff62e 	bgeu	r3,r2,800b948 <_do_ctors+0x28>
        (*ctor) (); 
}
 800b970:	e037883a 	mov	sp,fp
 800b974:	dfc00117 	ldw	ra,4(sp)
 800b978:	df000017 	ldw	fp,0(sp)
 800b97c:	dec00204 	addi	sp,sp,8
 800b980:	f800283a 	ret

0800b984 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800b984:	defffd04 	addi	sp,sp,-12
 800b988:	dfc00215 	stw	ra,8(sp)
 800b98c:	df000115 	stw	fp,4(sp)
 800b990:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800b994:	00bfff04 	movi	r2,-4
 800b998:	00c20074 	movhi	r3,2049
 800b99c:	18f25604 	addi	r3,r3,-13992
 800b9a0:	1885883a 	add	r2,r3,r2
 800b9a4:	e0bfff15 	stw	r2,-4(fp)
 800b9a8:	00000606 	br	800b9c4 <_do_dtors+0x40>
        (*dtor) (); 
 800b9ac:	e0bfff17 	ldw	r2,-4(fp)
 800b9b0:	10800017 	ldw	r2,0(r2)
 800b9b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800b9b8:	e0bfff17 	ldw	r2,-4(fp)
 800b9bc:	10bfff04 	addi	r2,r2,-4
 800b9c0:	e0bfff15 	stw	r2,-4(fp)
 800b9c4:	e0ffff17 	ldw	r3,-4(fp)
 800b9c8:	00820074 	movhi	r2,2049
 800b9cc:	10b25604 	addi	r2,r2,-13992
 800b9d0:	18bff62e 	bgeu	r3,r2,800b9ac <_do_dtors+0x28>
        (*dtor) (); 
}
 800b9d4:	e037883a 	mov	sp,fp
 800b9d8:	dfc00117 	ldw	ra,4(sp)
 800b9dc:	df000017 	ldw	fp,0(sp)
 800b9e0:	dec00204 	addi	sp,sp,8
 800b9e4:	f800283a 	ret

0800b9e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800b9e8:	defff904 	addi	sp,sp,-28
 800b9ec:	dfc00615 	stw	ra,24(sp)
 800b9f0:	df000515 	stw	fp,20(sp)
 800b9f4:	df000504 	addi	fp,sp,20
 800b9f8:	e13ffd15 	stw	r4,-12(fp)
 800b9fc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800ba00:	e0bffe17 	ldw	r2,-8(fp)
 800ba04:	10800017 	ldw	r2,0(r2)
 800ba08:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800ba0c:	e13ffd17 	ldw	r4,-12(fp)
 800ba10:	80071140 	call	8007114 <strlen>
 800ba14:	10800044 	addi	r2,r2,1
 800ba18:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800ba1c:	00000d06 	br	800ba54 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800ba20:	e0bffc17 	ldw	r2,-16(fp)
 800ba24:	11000217 	ldw	r4,8(r2)
 800ba28:	e1bffb17 	ldw	r6,-20(fp)
 800ba2c:	e17ffd17 	ldw	r5,-12(fp)
 800ba30:	800c5980 	call	800c598 <memcmp>
 800ba34:	1004c03a 	cmpne	r2,r2,zero
 800ba38:	1000031e 	bne	r2,zero,800ba48 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800ba3c:	e0bffc17 	ldw	r2,-16(fp)
 800ba40:	e0bfff15 	stw	r2,-4(fp)
 800ba44:	00000706 	br	800ba64 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800ba48:	e0bffc17 	ldw	r2,-16(fp)
 800ba4c:	10800017 	ldw	r2,0(r2)
 800ba50:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800ba54:	e0fffe17 	ldw	r3,-8(fp)
 800ba58:	e0bffc17 	ldw	r2,-16(fp)
 800ba5c:	10fff01e 	bne	r2,r3,800ba20 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800ba60:	e03fff15 	stw	zero,-4(fp)
 800ba64:	e0bfff17 	ldw	r2,-4(fp)
}
 800ba68:	e037883a 	mov	sp,fp
 800ba6c:	dfc00117 	ldw	ra,4(sp)
 800ba70:	df000017 	ldw	fp,0(sp)
 800ba74:	dec00204 	addi	sp,sp,8
 800ba78:	f800283a 	ret

0800ba7c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800ba7c:	deffff04 	addi	sp,sp,-4
 800ba80:	df000015 	stw	fp,0(sp)
 800ba84:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800ba88:	e037883a 	mov	sp,fp
 800ba8c:	df000017 	ldw	fp,0(sp)
 800ba90:	dec00104 	addi	sp,sp,4
 800ba94:	f800283a 	ret

0800ba98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800ba98:	defff904 	addi	sp,sp,-28
 800ba9c:	dfc00615 	stw	ra,24(sp)
 800baa0:	df000515 	stw	fp,20(sp)
 800baa4:	df000504 	addi	fp,sp,20
 800baa8:	e13ffc15 	stw	r4,-16(fp)
 800baac:	e17ffd15 	stw	r5,-12(fp)
 800bab0:	e1bffe15 	stw	r6,-8(fp)
 800bab4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800bab8:	e0800217 	ldw	r2,8(fp)
 800babc:	d8800015 	stw	r2,0(sp)
 800bac0:	e13ffc17 	ldw	r4,-16(fp)
 800bac4:	e17ffd17 	ldw	r5,-12(fp)
 800bac8:	e1bffe17 	ldw	r6,-8(fp)
 800bacc:	e1ffff17 	ldw	r7,-4(fp)
 800bad0:	800bc6c0 	call	800bc6c <alt_iic_isr_register>
}  
 800bad4:	e037883a 	mov	sp,fp
 800bad8:	dfc00117 	ldw	ra,4(sp)
 800badc:	df000017 	ldw	fp,0(sp)
 800bae0:	dec00204 	addi	sp,sp,8
 800bae4:	f800283a 	ret

0800bae8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800bae8:	defff904 	addi	sp,sp,-28
 800baec:	df000615 	stw	fp,24(sp)
 800baf0:	df000604 	addi	fp,sp,24
 800baf4:	e13ffe15 	stw	r4,-8(fp)
 800baf8:	e17fff15 	stw	r5,-4(fp)
 800bafc:	e0bfff17 	ldw	r2,-4(fp)
 800bb00:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800bb04:	0005303a 	rdctl	r2,status
 800bb08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800bb0c:	e0fffb17 	ldw	r3,-20(fp)
 800bb10:	00bfff84 	movi	r2,-2
 800bb14:	1884703a 	and	r2,r3,r2
 800bb18:	1001703a 	wrctl	status,r2
  
  return context;
 800bb1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800bb20:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 800bb24:	e0fffc17 	ldw	r3,-16(fp)
 800bb28:	00800044 	movi	r2,1
 800bb2c:	10c4983a 	sll	r2,r2,r3
 800bb30:	1007883a 	mov	r3,r2
 800bb34:	00820074 	movhi	r2,2049
 800bb38:	1080e204 	addi	r2,r2,904
 800bb3c:	10800017 	ldw	r2,0(r2)
 800bb40:	1886b03a 	or	r3,r3,r2
 800bb44:	00820074 	movhi	r2,2049
 800bb48:	1080e204 	addi	r2,r2,904
 800bb4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800bb50:	00820074 	movhi	r2,2049
 800bb54:	1080e204 	addi	r2,r2,904
 800bb58:	10800017 	ldw	r2,0(r2)
 800bb5c:	100170fa 	wrctl	ienable,r2
 800bb60:	e0bffd17 	ldw	r2,-12(fp)
 800bb64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800bb68:	e0bffa17 	ldw	r2,-24(fp)
 800bb6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800bb70:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 800bb74:	e037883a 	mov	sp,fp
 800bb78:	df000017 	ldw	fp,0(sp)
 800bb7c:	dec00104 	addi	sp,sp,4
 800bb80:	f800283a 	ret

0800bb84 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800bb84:	defff904 	addi	sp,sp,-28
 800bb88:	df000615 	stw	fp,24(sp)
 800bb8c:	df000604 	addi	fp,sp,24
 800bb90:	e13ffe15 	stw	r4,-8(fp)
 800bb94:	e17fff15 	stw	r5,-4(fp)
 800bb98:	e0bfff17 	ldw	r2,-4(fp)
 800bb9c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800bba0:	0005303a 	rdctl	r2,status
 800bba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800bba8:	e0fffb17 	ldw	r3,-20(fp)
 800bbac:	00bfff84 	movi	r2,-2
 800bbb0:	1884703a 	and	r2,r3,r2
 800bbb4:	1001703a 	wrctl	status,r2
  
  return context;
 800bbb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800bbbc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 800bbc0:	e0fffc17 	ldw	r3,-16(fp)
 800bbc4:	00800044 	movi	r2,1
 800bbc8:	10c4983a 	sll	r2,r2,r3
 800bbcc:	0084303a 	nor	r2,zero,r2
 800bbd0:	1007883a 	mov	r3,r2
 800bbd4:	00820074 	movhi	r2,2049
 800bbd8:	1080e204 	addi	r2,r2,904
 800bbdc:	10800017 	ldw	r2,0(r2)
 800bbe0:	1886703a 	and	r3,r3,r2
 800bbe4:	00820074 	movhi	r2,2049
 800bbe8:	1080e204 	addi	r2,r2,904
 800bbec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800bbf0:	00820074 	movhi	r2,2049
 800bbf4:	1080e204 	addi	r2,r2,904
 800bbf8:	10800017 	ldw	r2,0(r2)
 800bbfc:	100170fa 	wrctl	ienable,r2
 800bc00:	e0bffd17 	ldw	r2,-12(fp)
 800bc04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800bc08:	e0bffa17 	ldw	r2,-24(fp)
 800bc0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800bc10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 800bc14:	e037883a 	mov	sp,fp
 800bc18:	df000017 	ldw	fp,0(sp)
 800bc1c:	dec00104 	addi	sp,sp,4
 800bc20:	f800283a 	ret

0800bc24 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800bc24:	defffc04 	addi	sp,sp,-16
 800bc28:	df000315 	stw	fp,12(sp)
 800bc2c:	df000304 	addi	fp,sp,12
 800bc30:	e13ffe15 	stw	r4,-8(fp)
 800bc34:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800bc38:	000530fa 	rdctl	r2,ienable
 800bc3c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800bc40:	e0ffff17 	ldw	r3,-4(fp)
 800bc44:	00800044 	movi	r2,1
 800bc48:	10c4983a 	sll	r2,r2,r3
 800bc4c:	1007883a 	mov	r3,r2
 800bc50:	e0bffd17 	ldw	r2,-12(fp)
 800bc54:	1884703a 	and	r2,r3,r2
 800bc58:	1004c03a 	cmpne	r2,r2,zero
}
 800bc5c:	e037883a 	mov	sp,fp
 800bc60:	df000017 	ldw	fp,0(sp)
 800bc64:	dec00104 	addi	sp,sp,4
 800bc68:	f800283a 	ret

0800bc6c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800bc6c:	defff404 	addi	sp,sp,-48
 800bc70:	dfc00b15 	stw	ra,44(sp)
 800bc74:	df000a15 	stw	fp,40(sp)
 800bc78:	df000a04 	addi	fp,sp,40
 800bc7c:	e13ffb15 	stw	r4,-20(fp)
 800bc80:	e17ffc15 	stw	r5,-16(fp)
 800bc84:	e1bffd15 	stw	r6,-12(fp)
 800bc88:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 800bc8c:	00bffa84 	movi	r2,-22
 800bc90:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800bc94:	e0bffc17 	ldw	r2,-16(fp)
 800bc98:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800bc9c:	e0bff917 	ldw	r2,-28(fp)
 800bca0:	10800808 	cmpgei	r2,r2,32
 800bca4:	1000291e 	bne	r2,zero,800bd4c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800bca8:	0005303a 	rdctl	r2,status
 800bcac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800bcb0:	e0fff717 	ldw	r3,-36(fp)
 800bcb4:	00bfff84 	movi	r2,-2
 800bcb8:	1884703a 	and	r2,r3,r2
 800bcbc:	1001703a 	wrctl	status,r2
  
  return context;
 800bcc0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800bcc4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 800bcc8:	e0bff917 	ldw	r2,-28(fp)
 800bccc:	00c20074 	movhi	r3,2049
 800bcd0:	18c0ef04 	addi	r3,r3,956
 800bcd4:	100490fa 	slli	r2,r2,3
 800bcd8:	10c7883a 	add	r3,r2,r3
 800bcdc:	e0bffd17 	ldw	r2,-12(fp)
 800bce0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 800bce4:	e0bff917 	ldw	r2,-28(fp)
 800bce8:	00c20074 	movhi	r3,2049
 800bcec:	18c0ef04 	addi	r3,r3,956
 800bcf0:	100490fa 	slli	r2,r2,3
 800bcf4:	10c5883a 	add	r2,r2,r3
 800bcf8:	10c00104 	addi	r3,r2,4
 800bcfc:	e0bffe17 	ldw	r2,-8(fp)
 800bd00:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800bd04:	e0bffd17 	ldw	r2,-12(fp)
 800bd08:	1005003a 	cmpeq	r2,r2,zero
 800bd0c:	1000051e 	bne	r2,zero,800bd24 <alt_iic_isr_register+0xb8>
 800bd10:	e17ff917 	ldw	r5,-28(fp)
 800bd14:	e13ffb17 	ldw	r4,-20(fp)
 800bd18:	800bae80 	call	800bae8 <alt_ic_irq_enable>
 800bd1c:	e0bfff15 	stw	r2,-4(fp)
 800bd20:	00000406 	br	800bd34 <alt_iic_isr_register+0xc8>
 800bd24:	e17ff917 	ldw	r5,-28(fp)
 800bd28:	e13ffb17 	ldw	r4,-20(fp)
 800bd2c:	800bb840 	call	800bb84 <alt_ic_irq_disable>
 800bd30:	e0bfff15 	stw	r2,-4(fp)
 800bd34:	e0bfff17 	ldw	r2,-4(fp)
 800bd38:	e0bffa15 	stw	r2,-24(fp)
 800bd3c:	e0bff817 	ldw	r2,-32(fp)
 800bd40:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800bd44:	e0bff617 	ldw	r2,-40(fp)
 800bd48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800bd4c:	e0bffa17 	ldw	r2,-24(fp)
}
 800bd50:	e037883a 	mov	sp,fp
 800bd54:	dfc00117 	ldw	ra,4(sp)
 800bd58:	df000017 	ldw	fp,0(sp)
 800bd5c:	dec00204 	addi	sp,sp,8
 800bd60:	f800283a 	ret

0800bd64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800bd64:	defff804 	addi	sp,sp,-32
 800bd68:	dfc00715 	stw	ra,28(sp)
 800bd6c:	df000615 	stw	fp,24(sp)
 800bd70:	dc000515 	stw	r16,20(sp)
 800bd74:	df000504 	addi	fp,sp,20
 800bd78:	e13ffc15 	stw	r4,-16(fp)
 800bd7c:	e17ffd15 	stw	r5,-12(fp)
 800bd80:	e1bffe15 	stw	r6,-8(fp)
 800bd84:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 800bd88:	e13ffd17 	ldw	r4,-12(fp)
 800bd8c:	e17ffe17 	ldw	r5,-8(fp)
 800bd90:	e1bfff17 	ldw	r6,-4(fp)
 800bd94:	800bfac0 	call	800bfac <open>
 800bd98:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 800bd9c:	e0bffb17 	ldw	r2,-20(fp)
 800bda0:	1004803a 	cmplt	r2,r2,zero
 800bda4:	10001f1e 	bne	r2,zero,800be24 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 800bda8:	e13ffb17 	ldw	r4,-20(fp)
 800bdac:	04020074 	movhi	r16,2049
 800bdb0:	84357f04 	addi	r16,r16,-10756
 800bdb4:	01400304 	movi	r5,12
 800bdb8:	80095740 	call	8009574 <__mulsi3>
 800bdbc:	1405883a 	add	r2,r2,r16
 800bdc0:	10c00017 	ldw	r3,0(r2)
 800bdc4:	e0bffc17 	ldw	r2,-16(fp)
 800bdc8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800bdcc:	e13ffb17 	ldw	r4,-20(fp)
 800bdd0:	04020074 	movhi	r16,2049
 800bdd4:	84357f04 	addi	r16,r16,-10756
 800bdd8:	01400304 	movi	r5,12
 800bddc:	80095740 	call	8009574 <__mulsi3>
 800bde0:	1405883a 	add	r2,r2,r16
 800bde4:	10800104 	addi	r2,r2,4
 800bde8:	10c00017 	ldw	r3,0(r2)
 800bdec:	e0bffc17 	ldw	r2,-16(fp)
 800bdf0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800bdf4:	e13ffb17 	ldw	r4,-20(fp)
 800bdf8:	04020074 	movhi	r16,2049
 800bdfc:	84357f04 	addi	r16,r16,-10756
 800be00:	01400304 	movi	r5,12
 800be04:	80095740 	call	8009574 <__mulsi3>
 800be08:	1405883a 	add	r2,r2,r16
 800be0c:	10800204 	addi	r2,r2,8
 800be10:	10c00017 	ldw	r3,0(r2)
 800be14:	e0bffc17 	ldw	r2,-16(fp)
 800be18:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800be1c:	e13ffb17 	ldw	r4,-20(fp)
 800be20:	800a4bc0 	call	800a4bc <alt_release_fd>
  }
} 
 800be24:	e037883a 	mov	sp,fp
 800be28:	dfc00217 	ldw	ra,8(sp)
 800be2c:	df000117 	ldw	fp,4(sp)
 800be30:	dc000017 	ldw	r16,0(sp)
 800be34:	dec00304 	addi	sp,sp,12
 800be38:	f800283a 	ret

0800be3c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800be3c:	defffb04 	addi	sp,sp,-20
 800be40:	dfc00415 	stw	ra,16(sp)
 800be44:	df000315 	stw	fp,12(sp)
 800be48:	df000304 	addi	fp,sp,12
 800be4c:	e13ffd15 	stw	r4,-12(fp)
 800be50:	e17ffe15 	stw	r5,-8(fp)
 800be54:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800be58:	01020074 	movhi	r4,2049
 800be5c:	21358204 	addi	r4,r4,-10744
 800be60:	e17ffd17 	ldw	r5,-12(fp)
 800be64:	01800044 	movi	r6,1
 800be68:	01c07fc4 	movi	r7,511
 800be6c:	800bd640 	call	800bd64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800be70:	01020074 	movhi	r4,2049
 800be74:	21357f04 	addi	r4,r4,-10756
 800be78:	e17ffe17 	ldw	r5,-8(fp)
 800be7c:	000d883a 	mov	r6,zero
 800be80:	01c07fc4 	movi	r7,511
 800be84:	800bd640 	call	800bd64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800be88:	01020074 	movhi	r4,2049
 800be8c:	21358504 	addi	r4,r4,-10732
 800be90:	e17fff17 	ldw	r5,-4(fp)
 800be94:	01800044 	movi	r6,1
 800be98:	01c07fc4 	movi	r7,511
 800be9c:	800bd640 	call	800bd64 <alt_open_fd>
}  
 800bea0:	e037883a 	mov	sp,fp
 800bea4:	dfc00117 	ldw	ra,4(sp)
 800bea8:	df000017 	ldw	fp,0(sp)
 800beac:	dec00204 	addi	sp,sp,8
 800beb0:	f800283a 	ret

0800beb4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800beb4:	defffa04 	addi	sp,sp,-24
 800beb8:	dfc00515 	stw	ra,20(sp)
 800bebc:	df000415 	stw	fp,16(sp)
 800bec0:	dc000315 	stw	r16,12(sp)
 800bec4:	df000304 	addi	fp,sp,12
 800bec8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800becc:	e0bffe17 	ldw	r2,-8(fp)
 800bed0:	10800217 	ldw	r2,8(r2)
 800bed4:	10d00034 	orhi	r3,r2,16384
 800bed8:	e0bffe17 	ldw	r2,-8(fp)
 800bedc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800bee0:	e03ffd15 	stw	zero,-12(fp)
 800bee4:	00002306 	br	800bf74 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800bee8:	e13ffd17 	ldw	r4,-12(fp)
 800beec:	04020074 	movhi	r16,2049
 800bef0:	84357f04 	addi	r16,r16,-10756
 800bef4:	01400304 	movi	r5,12
 800bef8:	80095740 	call	8009574 <__mulsi3>
 800befc:	1405883a 	add	r2,r2,r16
 800bf00:	10c00017 	ldw	r3,0(r2)
 800bf04:	e0bffe17 	ldw	r2,-8(fp)
 800bf08:	10800017 	ldw	r2,0(r2)
 800bf0c:	1880161e 	bne	r3,r2,800bf68 <alt_file_locked+0xb4>
 800bf10:	e13ffd17 	ldw	r4,-12(fp)
 800bf14:	04020074 	movhi	r16,2049
 800bf18:	84357f04 	addi	r16,r16,-10756
 800bf1c:	01400304 	movi	r5,12
 800bf20:	80095740 	call	8009574 <__mulsi3>
 800bf24:	1405883a 	add	r2,r2,r16
 800bf28:	10800204 	addi	r2,r2,8
 800bf2c:	10800017 	ldw	r2,0(r2)
 800bf30:	1004403a 	cmpge	r2,r2,zero
 800bf34:	10000c1e 	bne	r2,zero,800bf68 <alt_file_locked+0xb4>
 800bf38:	e13ffd17 	ldw	r4,-12(fp)
 800bf3c:	01400304 	movi	r5,12
 800bf40:	80095740 	call	8009574 <__mulsi3>
 800bf44:	1007883a 	mov	r3,r2
 800bf48:	00820074 	movhi	r2,2049
 800bf4c:	10b57f04 	addi	r2,r2,-10756
 800bf50:	1887883a 	add	r3,r3,r2
 800bf54:	e0bffe17 	ldw	r2,-8(fp)
 800bf58:	18800326 	beq	r3,r2,800bf68 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800bf5c:	00bffcc4 	movi	r2,-13
 800bf60:	e0bfff15 	stw	r2,-4(fp)
 800bf64:	00000a06 	br	800bf90 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800bf68:	e0bffd17 	ldw	r2,-12(fp)
 800bf6c:	10800044 	addi	r2,r2,1
 800bf70:	e0bffd15 	stw	r2,-12(fp)
 800bf74:	00820074 	movhi	r2,2049
 800bf78:	10ba1e04 	addi	r2,r2,-6024
 800bf7c:	10800017 	ldw	r2,0(r2)
 800bf80:	1007883a 	mov	r3,r2
 800bf84:	e0bffd17 	ldw	r2,-12(fp)
 800bf88:	18bfd72e 	bgeu	r3,r2,800bee8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800bf8c:	e03fff15 	stw	zero,-4(fp)
 800bf90:	e0bfff17 	ldw	r2,-4(fp)
}
 800bf94:	e037883a 	mov	sp,fp
 800bf98:	dfc00217 	ldw	ra,8(sp)
 800bf9c:	df000117 	ldw	fp,4(sp)
 800bfa0:	dc000017 	ldw	r16,0(sp)
 800bfa4:	dec00304 	addi	sp,sp,12
 800bfa8:	f800283a 	ret

0800bfac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800bfac:	defff404 	addi	sp,sp,-48
 800bfb0:	dfc00b15 	stw	ra,44(sp)
 800bfb4:	df000a15 	stw	fp,40(sp)
 800bfb8:	df000a04 	addi	fp,sp,40
 800bfbc:	e13ffb15 	stw	r4,-20(fp)
 800bfc0:	e17ffc15 	stw	r5,-16(fp)
 800bfc4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800bfc8:	00bfffc4 	movi	r2,-1
 800bfcc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 800bfd0:	00bffb44 	movi	r2,-19
 800bfd4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 800bfd8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800bfdc:	e13ffb17 	ldw	r4,-20(fp)
 800bfe0:	01420074 	movhi	r5,2049
 800bfe4:	297a1c04 	addi	r5,r5,-6032
 800bfe8:	800b9e80 	call	800b9e8 <alt_find_dev>
 800bfec:	e0bffa15 	stw	r2,-24(fp)
 800bff0:	e0bffa17 	ldw	r2,-24(fp)
 800bff4:	1004c03a 	cmpne	r2,r2,zero
 800bff8:	1000051e 	bne	r2,zero,800c010 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800bffc:	e13ffb17 	ldw	r4,-20(fp)
 800c000:	800c35c0 	call	800c35c <alt_find_file>
 800c004:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 800c008:	00800044 	movi	r2,1
 800c00c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800c010:	e0bffa17 	ldw	r2,-24(fp)
 800c014:	1005003a 	cmpeq	r2,r2,zero
 800c018:	1000311e 	bne	r2,zero,800c0e0 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800c01c:	e13ffa17 	ldw	r4,-24(fp)
 800c020:	800c47c0 	call	800c47c <alt_get_fd>
 800c024:	e0bff815 	stw	r2,-32(fp)
 800c028:	e0bff817 	ldw	r2,-32(fp)
 800c02c:	1004403a 	cmpge	r2,r2,zero
 800c030:	1000031e 	bne	r2,zero,800c040 <open+0x94>
    {
      status = index;
 800c034:	e0bff817 	ldw	r2,-32(fp)
 800c038:	e0bff715 	stw	r2,-36(fp)
 800c03c:	00002a06 	br	800c0e8 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800c040:	e13ff817 	ldw	r4,-32(fp)
 800c044:	01400304 	movi	r5,12
 800c048:	80095740 	call	8009574 <__mulsi3>
 800c04c:	1007883a 	mov	r3,r2
 800c050:	00820074 	movhi	r2,2049
 800c054:	10b57f04 	addi	r2,r2,-10756
 800c058:	1885883a 	add	r2,r3,r2
 800c05c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800c060:	e0fffc17 	ldw	r3,-16(fp)
 800c064:	00900034 	movhi	r2,16384
 800c068:	10bfffc4 	addi	r2,r2,-1
 800c06c:	1886703a 	and	r3,r3,r2
 800c070:	e0bff917 	ldw	r2,-28(fp)
 800c074:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800c078:	e0bff617 	ldw	r2,-40(fp)
 800c07c:	1004c03a 	cmpne	r2,r2,zero
 800c080:	1000061e 	bne	r2,zero,800c09c <open+0xf0>
 800c084:	e13ff917 	ldw	r4,-28(fp)
 800c088:	800beb40 	call	800beb4 <alt_file_locked>
 800c08c:	e0bff715 	stw	r2,-36(fp)
 800c090:	e0bff717 	ldw	r2,-36(fp)
 800c094:	1004803a 	cmplt	r2,r2,zero
 800c098:	1000131e 	bne	r2,zero,800c0e8 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800c09c:	e0bffa17 	ldw	r2,-24(fp)
 800c0a0:	10800317 	ldw	r2,12(r2)
 800c0a4:	1005003a 	cmpeq	r2,r2,zero
 800c0a8:	1000091e 	bne	r2,zero,800c0d0 <open+0x124>
 800c0ac:	e0bffa17 	ldw	r2,-24(fp)
 800c0b0:	10800317 	ldw	r2,12(r2)
 800c0b4:	e13ff917 	ldw	r4,-28(fp)
 800c0b8:	e17ffb17 	ldw	r5,-20(fp)
 800c0bc:	e1bffc17 	ldw	r6,-16(fp)
 800c0c0:	e1fffd17 	ldw	r7,-12(fp)
 800c0c4:	103ee83a 	callr	r2
 800c0c8:	e0bfff15 	stw	r2,-4(fp)
 800c0cc:	00000106 	br	800c0d4 <open+0x128>
 800c0d0:	e03fff15 	stw	zero,-4(fp)
 800c0d4:	e0bfff17 	ldw	r2,-4(fp)
 800c0d8:	e0bff715 	stw	r2,-36(fp)
 800c0dc:	00000206 	br	800c0e8 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800c0e0:	00bffb44 	movi	r2,-19
 800c0e4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800c0e8:	e0bff717 	ldw	r2,-36(fp)
 800c0ec:	1004403a 	cmpge	r2,r2,zero
 800c0f0:	1000091e 	bne	r2,zero,800c118 <open+0x16c>
  {
    alt_release_fd (index);  
 800c0f4:	e13ff817 	ldw	r4,-32(fp)
 800c0f8:	800a4bc0 	call	800a4bc <alt_release_fd>
    ALT_ERRNO = -status;
 800c0fc:	800c1380 	call	800c138 <alt_get_errno>
 800c100:	e0fff717 	ldw	r3,-36(fp)
 800c104:	00c7c83a 	sub	r3,zero,r3
 800c108:	10c00015 	stw	r3,0(r2)
    return -1;
 800c10c:	00bfffc4 	movi	r2,-1
 800c110:	e0bffe15 	stw	r2,-8(fp)
 800c114:	00000206 	br	800c120 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 800c118:	e0bff817 	ldw	r2,-32(fp)
 800c11c:	e0bffe15 	stw	r2,-8(fp)
 800c120:	e0bffe17 	ldw	r2,-8(fp)
}
 800c124:	e037883a 	mov	sp,fp
 800c128:	dfc00117 	ldw	ra,4(sp)
 800c12c:	df000017 	ldw	fp,0(sp)
 800c130:	dec00204 	addi	sp,sp,8
 800c134:	f800283a 	ret

0800c138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c138:	defffd04 	addi	sp,sp,-12
 800c13c:	dfc00215 	stw	ra,8(sp)
 800c140:	df000115 	stw	fp,4(sp)
 800c144:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 800c148:	00820074 	movhi	r2,2049
 800c14c:	10ba1f04 	addi	r2,r2,-6020
 800c150:	10800017 	ldw	r2,0(r2)
 800c154:	1005003a 	cmpeq	r2,r2,zero
 800c158:	1000061e 	bne	r2,zero,800c174 <alt_get_errno+0x3c>
 800c15c:	00820074 	movhi	r2,2049
 800c160:	10ba1f04 	addi	r2,r2,-6020
 800c164:	10800017 	ldw	r2,0(r2)
 800c168:	103ee83a 	callr	r2
 800c16c:	e0bfff15 	stw	r2,-4(fp)
 800c170:	00000306 	br	800c180 <alt_get_errno+0x48>
 800c174:	00820074 	movhi	r2,2049
 800c178:	1080de04 	addi	r2,r2,888
 800c17c:	e0bfff15 	stw	r2,-4(fp)
 800c180:	e0bfff17 	ldw	r2,-4(fp)
}
 800c184:	e037883a 	mov	sp,fp
 800c188:	dfc00117 	ldw	ra,4(sp)
 800c18c:	df000017 	ldw	fp,0(sp)
 800c190:	dec00204 	addi	sp,sp,8
 800c194:	f800283a 	ret

0800c198 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800c198:	defffa04 	addi	sp,sp,-24
 800c19c:	df000515 	stw	fp,20(sp)
 800c1a0:	df000504 	addi	fp,sp,20
 800c1a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c1a8:	0005303a 	rdctl	r2,status
 800c1ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c1b0:	e0fffd17 	ldw	r3,-12(fp)
 800c1b4:	00bfff84 	movi	r2,-2
 800c1b8:	1884703a 	and	r2,r3,r2
 800c1bc:	1001703a 	wrctl	status,r2
  
  return context;
 800c1c0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800c1c4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 800c1c8:	e0bfff17 	ldw	r2,-4(fp)
 800c1cc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800c1d0:	e0bffc17 	ldw	r2,-16(fp)
 800c1d4:	10c00017 	ldw	r3,0(r2)
 800c1d8:	e0bffc17 	ldw	r2,-16(fp)
 800c1dc:	10800117 	ldw	r2,4(r2)
 800c1e0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 800c1e4:	e0bffc17 	ldw	r2,-16(fp)
 800c1e8:	10c00117 	ldw	r3,4(r2)
 800c1ec:	e0bffc17 	ldw	r2,-16(fp)
 800c1f0:	10800017 	ldw	r2,0(r2)
 800c1f4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800c1f8:	e0fffc17 	ldw	r3,-16(fp)
 800c1fc:	e0bffc17 	ldw	r2,-16(fp)
 800c200:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 800c204:	e0fffc17 	ldw	r3,-16(fp)
 800c208:	e0bffc17 	ldw	r2,-16(fp)
 800c20c:	18800015 	stw	r2,0(r3)
 800c210:	e0bffe17 	ldw	r2,-8(fp)
 800c214:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c218:	e0bffb17 	ldw	r2,-20(fp)
 800c21c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800c220:	e037883a 	mov	sp,fp
 800c224:	df000017 	ldw	fp,0(sp)
 800c228:	dec00104 	addi	sp,sp,4
 800c22c:	f800283a 	ret

0800c230 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800c230:	defffb04 	addi	sp,sp,-20
 800c234:	dfc00415 	stw	ra,16(sp)
 800c238:	df000315 	stw	fp,12(sp)
 800c23c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800c240:	d0a00e17 	ldw	r2,-32712(gp)
 800c244:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800c248:	d0a6d017 	ldw	r2,-25792(gp)
 800c24c:	10800044 	addi	r2,r2,1
 800c250:	d0a6d015 	stw	r2,-25792(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800c254:	00003106 	br	800c31c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 800c258:	e0bffe17 	ldw	r2,-8(fp)
 800c25c:	10800017 	ldw	r2,0(r2)
 800c260:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800c264:	e0bffe17 	ldw	r2,-8(fp)
 800c268:	10800403 	ldbu	r2,16(r2)
 800c26c:	10803fcc 	andi	r2,r2,255
 800c270:	1005003a 	cmpeq	r2,r2,zero
 800c274:	1000051e 	bne	r2,zero,800c28c <alt_tick+0x5c>
 800c278:	d0a6d017 	ldw	r2,-25792(gp)
 800c27c:	1004c03a 	cmpne	r2,r2,zero
 800c280:	1000021e 	bne	r2,zero,800c28c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 800c284:	e0bffe17 	ldw	r2,-8(fp)
 800c288:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800c28c:	e0bffe17 	ldw	r2,-8(fp)
 800c290:	10c00217 	ldw	r3,8(r2)
 800c294:	d0a6d017 	ldw	r2,-25792(gp)
 800c298:	10c01e36 	bltu	r2,r3,800c314 <alt_tick+0xe4>
 800c29c:	e0bffe17 	ldw	r2,-8(fp)
 800c2a0:	10800403 	ldbu	r2,16(r2)
 800c2a4:	10803fcc 	andi	r2,r2,255
 800c2a8:	1004c03a 	cmpne	r2,r2,zero
 800c2ac:	1000191e 	bne	r2,zero,800c314 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 800c2b0:	e0bffe17 	ldw	r2,-8(fp)
 800c2b4:	10c00317 	ldw	r3,12(r2)
 800c2b8:	e0bffe17 	ldw	r2,-8(fp)
 800c2bc:	11000517 	ldw	r4,20(r2)
 800c2c0:	183ee83a 	callr	r3
 800c2c4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800c2c8:	e0bffd17 	ldw	r2,-12(fp)
 800c2cc:	1004c03a 	cmpne	r2,r2,zero
 800c2d0:	1000031e 	bne	r2,zero,800c2e0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 800c2d4:	e13ffe17 	ldw	r4,-8(fp)
 800c2d8:	800c1980 	call	800c198 <alt_alarm_stop>
 800c2dc:	00000d06 	br	800c314 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 800c2e0:	e0bffe17 	ldw	r2,-8(fp)
 800c2e4:	10c00217 	ldw	r3,8(r2)
 800c2e8:	e0bffd17 	ldw	r2,-12(fp)
 800c2ec:	1887883a 	add	r3,r3,r2
 800c2f0:	e0bffe17 	ldw	r2,-8(fp)
 800c2f4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800c2f8:	e0bffe17 	ldw	r2,-8(fp)
 800c2fc:	10c00217 	ldw	r3,8(r2)
 800c300:	d0a6d017 	ldw	r2,-25792(gp)
 800c304:	1880032e 	bgeu	r3,r2,800c314 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 800c308:	e0fffe17 	ldw	r3,-8(fp)
 800c30c:	00800044 	movi	r2,1
 800c310:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 800c314:	e0bfff17 	ldw	r2,-4(fp)
 800c318:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800c31c:	d0e00e04 	addi	r3,gp,-32712
 800c320:	e0bffe17 	ldw	r2,-8(fp)
 800c324:	10ffcc1e 	bne	r2,r3,800c258 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 800c328:	e037883a 	mov	sp,fp
 800c32c:	dfc00117 	ldw	ra,4(sp)
 800c330:	df000017 	ldw	fp,0(sp)
 800c334:	dec00204 	addi	sp,sp,8
 800c338:	f800283a 	ret

0800c33c <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 800c33c:	deffff04 	addi	sp,sp,-4
 800c340:	df000015 	stw	fp,0(sp)
 800c344:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800c348:	000170fa 	wrctl	ienable,zero
}
 800c34c:	e037883a 	mov	sp,fp
 800c350:	df000017 	ldw	fp,0(sp)
 800c354:	dec00104 	addi	sp,sp,4
 800c358:	f800283a 	ret

0800c35c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800c35c:	defffa04 	addi	sp,sp,-24
 800c360:	dfc00515 	stw	ra,20(sp)
 800c364:	df000415 	stw	fp,16(sp)
 800c368:	df000404 	addi	fp,sp,16
 800c36c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800c370:	00820074 	movhi	r2,2049
 800c374:	10ba1a04 	addi	r2,r2,-6040
 800c378:	10800017 	ldw	r2,0(r2)
 800c37c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800c380:	00003306 	br	800c450 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 800c384:	e0bffd17 	ldw	r2,-12(fp)
 800c388:	11000217 	ldw	r4,8(r2)
 800c38c:	80071140 	call	8007114 <strlen>
 800c390:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 800c394:	e0bffd17 	ldw	r2,-12(fp)
 800c398:	10c00217 	ldw	r3,8(r2)
 800c39c:	e0bffc17 	ldw	r2,-16(fp)
 800c3a0:	1885883a 	add	r2,r3,r2
 800c3a4:	10bfffc4 	addi	r2,r2,-1
 800c3a8:	10800003 	ldbu	r2,0(r2)
 800c3ac:	10803fcc 	andi	r2,r2,255
 800c3b0:	1080201c 	xori	r2,r2,128
 800c3b4:	10bfe004 	addi	r2,r2,-128
 800c3b8:	10800bd8 	cmpnei	r2,r2,47
 800c3bc:	1000031e 	bne	r2,zero,800c3cc <alt_find_file+0x70>
    {
      len -= 1;
 800c3c0:	e0bffc17 	ldw	r2,-16(fp)
 800c3c4:	10bfffc4 	addi	r2,r2,-1
 800c3c8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800c3cc:	e0bffc17 	ldw	r2,-16(fp)
 800c3d0:	1007883a 	mov	r3,r2
 800c3d4:	e0bffe17 	ldw	r2,-8(fp)
 800c3d8:	1885883a 	add	r2,r3,r2
 800c3dc:	10800003 	ldbu	r2,0(r2)
 800c3e0:	10803fcc 	andi	r2,r2,255
 800c3e4:	1080201c 	xori	r2,r2,128
 800c3e8:	10bfe004 	addi	r2,r2,-128
 800c3ec:	10800be0 	cmpeqi	r2,r2,47
 800c3f0:	10000a1e 	bne	r2,zero,800c41c <alt_find_file+0xc0>
 800c3f4:	e0bffc17 	ldw	r2,-16(fp)
 800c3f8:	1007883a 	mov	r3,r2
 800c3fc:	e0bffe17 	ldw	r2,-8(fp)
 800c400:	1885883a 	add	r2,r3,r2
 800c404:	10800003 	ldbu	r2,0(r2)
 800c408:	10803fcc 	andi	r2,r2,255
 800c40c:	1080201c 	xori	r2,r2,128
 800c410:	10bfe004 	addi	r2,r2,-128
 800c414:	1004c03a 	cmpne	r2,r2,zero
 800c418:	10000a1e 	bne	r2,zero,800c444 <alt_find_file+0xe8>
 800c41c:	e0bffd17 	ldw	r2,-12(fp)
 800c420:	11000217 	ldw	r4,8(r2)
 800c424:	e1bffc17 	ldw	r6,-16(fp)
 800c428:	e17ffe17 	ldw	r5,-8(fp)
 800c42c:	800c5980 	call	800c598 <memcmp>
 800c430:	1004c03a 	cmpne	r2,r2,zero
 800c434:	1000031e 	bne	r2,zero,800c444 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800c438:	e0bffd17 	ldw	r2,-12(fp)
 800c43c:	e0bfff15 	stw	r2,-4(fp)
 800c440:	00000806 	br	800c464 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 800c444:	e0bffd17 	ldw	r2,-12(fp)
 800c448:	10800017 	ldw	r2,0(r2)
 800c44c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800c450:	00c20074 	movhi	r3,2049
 800c454:	18fa1a04 	addi	r3,r3,-6040
 800c458:	e0bffd17 	ldw	r2,-12(fp)
 800c45c:	10ffc91e 	bne	r2,r3,800c384 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800c460:	e03fff15 	stw	zero,-4(fp)
 800c464:	e0bfff17 	ldw	r2,-4(fp)
}
 800c468:	e037883a 	mov	sp,fp
 800c46c:	dfc00117 	ldw	ra,4(sp)
 800c470:	df000017 	ldw	fp,0(sp)
 800c474:	dec00204 	addi	sp,sp,8
 800c478:	f800283a 	ret

0800c47c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800c47c:	defffa04 	addi	sp,sp,-24
 800c480:	dfc00515 	stw	ra,20(sp)
 800c484:	df000415 	stw	fp,16(sp)
 800c488:	dc000315 	stw	r16,12(sp)
 800c48c:	df000304 	addi	fp,sp,12
 800c490:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 800c494:	00bffa04 	movi	r2,-24
 800c498:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800c49c:	e03ffe15 	stw	zero,-8(fp)
 800c4a0:	00002006 	br	800c524 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 800c4a4:	e13ffe17 	ldw	r4,-8(fp)
 800c4a8:	04020074 	movhi	r16,2049
 800c4ac:	84357f04 	addi	r16,r16,-10756
 800c4b0:	01400304 	movi	r5,12
 800c4b4:	80095740 	call	8009574 <__mulsi3>
 800c4b8:	1405883a 	add	r2,r2,r16
 800c4bc:	10800017 	ldw	r2,0(r2)
 800c4c0:	1004c03a 	cmpne	r2,r2,zero
 800c4c4:	1000141e 	bne	r2,zero,800c518 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 800c4c8:	e13ffe17 	ldw	r4,-8(fp)
 800c4cc:	04020074 	movhi	r16,2049
 800c4d0:	84357f04 	addi	r16,r16,-10756
 800c4d4:	01400304 	movi	r5,12
 800c4d8:	80095740 	call	8009574 <__mulsi3>
 800c4dc:	1407883a 	add	r3,r2,r16
 800c4e0:	e0bfff17 	ldw	r2,-4(fp)
 800c4e4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 800c4e8:	00820074 	movhi	r2,2049
 800c4ec:	10ba1e04 	addi	r2,r2,-6024
 800c4f0:	10c00017 	ldw	r3,0(r2)
 800c4f4:	e0bffe17 	ldw	r2,-8(fp)
 800c4f8:	1880040e 	bge	r3,r2,800c50c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 800c4fc:	00c20074 	movhi	r3,2049
 800c500:	18fa1e04 	addi	r3,r3,-6024
 800c504:	e0bffe17 	ldw	r2,-8(fp)
 800c508:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 800c50c:	e0bffe17 	ldw	r2,-8(fp)
 800c510:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800c514:	00000606 	br	800c530 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800c518:	e0bffe17 	ldw	r2,-8(fp)
 800c51c:	10800044 	addi	r2,r2,1
 800c520:	e0bffe15 	stw	r2,-8(fp)
 800c524:	e0bffe17 	ldw	r2,-8(fp)
 800c528:	10800810 	cmplti	r2,r2,32
 800c52c:	103fdd1e 	bne	r2,zero,800c4a4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800c530:	e0bffd17 	ldw	r2,-12(fp)
}
 800c534:	e037883a 	mov	sp,fp
 800c538:	dfc00217 	ldw	ra,8(sp)
 800c53c:	df000117 	ldw	fp,4(sp)
 800c540:	dc000017 	ldw	r16,0(sp)
 800c544:	dec00304 	addi	sp,sp,12
 800c548:	f800283a 	ret

0800c54c <atexit>:
 800c54c:	200b883a 	mov	r5,r4
 800c550:	000d883a 	mov	r6,zero
 800c554:	0009883a 	mov	r4,zero
 800c558:	000f883a 	mov	r7,zero
 800c55c:	800c60c1 	jmpi	800c60c <__register_exitproc>

0800c560 <exit>:
 800c560:	defffe04 	addi	sp,sp,-8
 800c564:	000b883a 	mov	r5,zero
 800c568:	dc000015 	stw	r16,0(sp)
 800c56c:	dfc00115 	stw	ra,4(sp)
 800c570:	2021883a 	mov	r16,r4
 800c574:	800c7440 	call	800c744 <__call_exitprocs>
 800c578:	00820074 	movhi	r2,2049
 800c57c:	10ba1504 	addi	r2,r2,-6060
 800c580:	11000017 	ldw	r4,0(r2)
 800c584:	20800f17 	ldw	r2,60(r4)
 800c588:	10000126 	beq	r2,zero,800c590 <exit+0x30>
 800c58c:	103ee83a 	callr	r2
 800c590:	8009883a 	mov	r4,r16
 800c594:	800c9340 	call	800c934 <_exit>

0800c598 <memcmp>:
 800c598:	00c000c4 	movi	r3,3
 800c59c:	1980032e 	bgeu	r3,r6,800c5ac <memcmp+0x14>
 800c5a0:	2144b03a 	or	r2,r4,r5
 800c5a4:	10c4703a 	and	r2,r2,r3
 800c5a8:	10000f26 	beq	r2,zero,800c5e8 <memcmp+0x50>
 800c5ac:	31ffffc4 	addi	r7,r6,-1
 800c5b0:	3000061e 	bne	r6,zero,800c5cc <memcmp+0x34>
 800c5b4:	00000a06 	br	800c5e0 <memcmp+0x48>
 800c5b8:	39ffffc4 	addi	r7,r7,-1
 800c5bc:	00bfffc4 	movi	r2,-1
 800c5c0:	21000044 	addi	r4,r4,1
 800c5c4:	29400044 	addi	r5,r5,1
 800c5c8:	38800526 	beq	r7,r2,800c5e0 <memcmp+0x48>
 800c5cc:	20c00003 	ldbu	r3,0(r4)
 800c5d0:	28800003 	ldbu	r2,0(r5)
 800c5d4:	18bff826 	beq	r3,r2,800c5b8 <memcmp+0x20>
 800c5d8:	1885c83a 	sub	r2,r3,r2
 800c5dc:	f800283a 	ret
 800c5e0:	0005883a 	mov	r2,zero
 800c5e4:	f800283a 	ret
 800c5e8:	180f883a 	mov	r7,r3
 800c5ec:	20c00017 	ldw	r3,0(r4)
 800c5f0:	28800017 	ldw	r2,0(r5)
 800c5f4:	18bfed1e 	bne	r3,r2,800c5ac <memcmp+0x14>
 800c5f8:	31bfff04 	addi	r6,r6,-4
 800c5fc:	21000104 	addi	r4,r4,4
 800c600:	29400104 	addi	r5,r5,4
 800c604:	39bff936 	bltu	r7,r6,800c5ec <memcmp+0x54>
 800c608:	003fe806 	br	800c5ac <memcmp+0x14>

0800c60c <__register_exitproc>:
 800c60c:	defffa04 	addi	sp,sp,-24
 800c610:	00820074 	movhi	r2,2049
 800c614:	10ba1504 	addi	r2,r2,-6060
 800c618:	dc000015 	stw	r16,0(sp)
 800c61c:	14000017 	ldw	r16,0(r2)
 800c620:	dd000415 	stw	r20,16(sp)
 800c624:	2829883a 	mov	r20,r5
 800c628:	81405217 	ldw	r5,328(r16)
 800c62c:	dcc00315 	stw	r19,12(sp)
 800c630:	dc800215 	stw	r18,8(sp)
 800c634:	dc400115 	stw	r17,4(sp)
 800c638:	dfc00515 	stw	ra,20(sp)
 800c63c:	2023883a 	mov	r17,r4
 800c640:	3027883a 	mov	r19,r6
 800c644:	3825883a 	mov	r18,r7
 800c648:	28002526 	beq	r5,zero,800c6e0 <__register_exitproc+0xd4>
 800c64c:	29000117 	ldw	r4,4(r5)
 800c650:	008007c4 	movi	r2,31
 800c654:	11002716 	blt	r2,r4,800c6f4 <__register_exitproc+0xe8>
 800c658:	8800101e 	bne	r17,zero,800c69c <__register_exitproc+0x90>
 800c65c:	2105883a 	add	r2,r4,r4
 800c660:	1085883a 	add	r2,r2,r2
 800c664:	20c00044 	addi	r3,r4,1
 800c668:	1145883a 	add	r2,r2,r5
 800c66c:	0009883a 	mov	r4,zero
 800c670:	15000215 	stw	r20,8(r2)
 800c674:	28c00115 	stw	r3,4(r5)
 800c678:	2005883a 	mov	r2,r4
 800c67c:	dfc00517 	ldw	ra,20(sp)
 800c680:	dd000417 	ldw	r20,16(sp)
 800c684:	dcc00317 	ldw	r19,12(sp)
 800c688:	dc800217 	ldw	r18,8(sp)
 800c68c:	dc400117 	ldw	r17,4(sp)
 800c690:	dc000017 	ldw	r16,0(sp)
 800c694:	dec00604 	addi	sp,sp,24
 800c698:	f800283a 	ret
 800c69c:	29802204 	addi	r6,r5,136
 800c6a0:	00800044 	movi	r2,1
 800c6a4:	110e983a 	sll	r7,r2,r4
 800c6a8:	30c04017 	ldw	r3,256(r6)
 800c6ac:	2105883a 	add	r2,r4,r4
 800c6b0:	1085883a 	add	r2,r2,r2
 800c6b4:	1185883a 	add	r2,r2,r6
 800c6b8:	19c6b03a 	or	r3,r3,r7
 800c6bc:	14802015 	stw	r18,128(r2)
 800c6c0:	14c00015 	stw	r19,0(r2)
 800c6c4:	00800084 	movi	r2,2
 800c6c8:	30c04015 	stw	r3,256(r6)
 800c6cc:	88bfe31e 	bne	r17,r2,800c65c <__register_exitproc+0x50>
 800c6d0:	30804117 	ldw	r2,260(r6)
 800c6d4:	11c4b03a 	or	r2,r2,r7
 800c6d8:	30804115 	stw	r2,260(r6)
 800c6dc:	003fdf06 	br	800c65c <__register_exitproc+0x50>
 800c6e0:	00820074 	movhi	r2,2049
 800c6e4:	10812f04 	addi	r2,r2,1212
 800c6e8:	100b883a 	mov	r5,r2
 800c6ec:	80805215 	stw	r2,328(r16)
 800c6f0:	003fd606 	br	800c64c <__register_exitproc+0x40>
 800c6f4:	00800034 	movhi	r2,0
 800c6f8:	10800004 	addi	r2,r2,0
 800c6fc:	1000021e 	bne	r2,zero,800c708 <__register_exitproc+0xfc>
 800c700:	013fffc4 	movi	r4,-1
 800c704:	003fdc06 	br	800c678 <__register_exitproc+0x6c>
 800c708:	01006404 	movi	r4,400
 800c70c:	103ee83a 	callr	r2
 800c710:	1007883a 	mov	r3,r2
 800c714:	103ffa26 	beq	r2,zero,800c700 <__register_exitproc+0xf4>
 800c718:	80805217 	ldw	r2,328(r16)
 800c71c:	180b883a 	mov	r5,r3
 800c720:	18000115 	stw	zero,4(r3)
 800c724:	18800015 	stw	r2,0(r3)
 800c728:	80c05215 	stw	r3,328(r16)
 800c72c:	18006215 	stw	zero,392(r3)
 800c730:	18006315 	stw	zero,396(r3)
 800c734:	0009883a 	mov	r4,zero
 800c738:	883fc826 	beq	r17,zero,800c65c <__register_exitproc+0x50>
 800c73c:	003fd706 	br	800c69c <__register_exitproc+0x90>

0800c740 <register_fini>:
 800c740:	f800283a 	ret

0800c744 <__call_exitprocs>:
 800c744:	00820074 	movhi	r2,2049
 800c748:	10ba1504 	addi	r2,r2,-6060
 800c74c:	10800017 	ldw	r2,0(r2)
 800c750:	defff304 	addi	sp,sp,-52
 800c754:	df000b15 	stw	fp,44(sp)
 800c758:	d8800115 	stw	r2,4(sp)
 800c75c:	00800034 	movhi	r2,0
 800c760:	10800004 	addi	r2,r2,0
 800c764:	1005003a 	cmpeq	r2,r2,zero
 800c768:	d8800215 	stw	r2,8(sp)
 800c76c:	d8800117 	ldw	r2,4(sp)
 800c770:	dd400815 	stw	r21,32(sp)
 800c774:	dd000715 	stw	r20,28(sp)
 800c778:	10805204 	addi	r2,r2,328
 800c77c:	dfc00c15 	stw	ra,48(sp)
 800c780:	ddc00a15 	stw	r23,40(sp)
 800c784:	dd800915 	stw	r22,36(sp)
 800c788:	dcc00615 	stw	r19,24(sp)
 800c78c:	dc800515 	stw	r18,20(sp)
 800c790:	dc400415 	stw	r17,16(sp)
 800c794:	dc000315 	stw	r16,12(sp)
 800c798:	282b883a 	mov	r21,r5
 800c79c:	2039883a 	mov	fp,r4
 800c7a0:	d8800015 	stw	r2,0(sp)
 800c7a4:	2829003a 	cmpeq	r20,r5,zero
 800c7a8:	d8800117 	ldw	r2,4(sp)
 800c7ac:	14405217 	ldw	r17,328(r2)
 800c7b0:	88001026 	beq	r17,zero,800c7f4 <__call_exitprocs+0xb0>
 800c7b4:	ddc00017 	ldw	r23,0(sp)
 800c7b8:	88800117 	ldw	r2,4(r17)
 800c7bc:	8c802204 	addi	r18,r17,136
 800c7c0:	143fffc4 	addi	r16,r2,-1
 800c7c4:	80000916 	blt	r16,zero,800c7ec <__call_exitprocs+0xa8>
 800c7c8:	05bfffc4 	movi	r22,-1
 800c7cc:	a000151e 	bne	r20,zero,800c824 <__call_exitprocs+0xe0>
 800c7d0:	8409883a 	add	r4,r16,r16
 800c7d4:	2105883a 	add	r2,r4,r4
 800c7d8:	1485883a 	add	r2,r2,r18
 800c7dc:	10c02017 	ldw	r3,128(r2)
 800c7e0:	a8c01126 	beq	r21,r3,800c828 <__call_exitprocs+0xe4>
 800c7e4:	843fffc4 	addi	r16,r16,-1
 800c7e8:	85bff81e 	bne	r16,r22,800c7cc <__call_exitprocs+0x88>
 800c7ec:	d8800217 	ldw	r2,8(sp)
 800c7f0:	10003126 	beq	r2,zero,800c8b8 <__call_exitprocs+0x174>
 800c7f4:	dfc00c17 	ldw	ra,48(sp)
 800c7f8:	df000b17 	ldw	fp,44(sp)
 800c7fc:	ddc00a17 	ldw	r23,40(sp)
 800c800:	dd800917 	ldw	r22,36(sp)
 800c804:	dd400817 	ldw	r21,32(sp)
 800c808:	dd000717 	ldw	r20,28(sp)
 800c80c:	dcc00617 	ldw	r19,24(sp)
 800c810:	dc800517 	ldw	r18,20(sp)
 800c814:	dc400417 	ldw	r17,16(sp)
 800c818:	dc000317 	ldw	r16,12(sp)
 800c81c:	dec00d04 	addi	sp,sp,52
 800c820:	f800283a 	ret
 800c824:	8409883a 	add	r4,r16,r16
 800c828:	88c00117 	ldw	r3,4(r17)
 800c82c:	2105883a 	add	r2,r4,r4
 800c830:	1445883a 	add	r2,r2,r17
 800c834:	18ffffc4 	addi	r3,r3,-1
 800c838:	11800217 	ldw	r6,8(r2)
 800c83c:	1c001526 	beq	r3,r16,800c894 <__call_exitprocs+0x150>
 800c840:	10000215 	stw	zero,8(r2)
 800c844:	303fe726 	beq	r6,zero,800c7e4 <__call_exitprocs+0xa0>
 800c848:	00c00044 	movi	r3,1
 800c84c:	1c06983a 	sll	r3,r3,r16
 800c850:	90804017 	ldw	r2,256(r18)
 800c854:	8cc00117 	ldw	r19,4(r17)
 800c858:	1884703a 	and	r2,r3,r2
 800c85c:	10001426 	beq	r2,zero,800c8b0 <__call_exitprocs+0x16c>
 800c860:	90804117 	ldw	r2,260(r18)
 800c864:	1884703a 	and	r2,r3,r2
 800c868:	10000c1e 	bne	r2,zero,800c89c <__call_exitprocs+0x158>
 800c86c:	2105883a 	add	r2,r4,r4
 800c870:	1485883a 	add	r2,r2,r18
 800c874:	11400017 	ldw	r5,0(r2)
 800c878:	e009883a 	mov	r4,fp
 800c87c:	303ee83a 	callr	r6
 800c880:	88800117 	ldw	r2,4(r17)
 800c884:	98bfc81e 	bne	r19,r2,800c7a8 <__call_exitprocs+0x64>
 800c888:	b8800017 	ldw	r2,0(r23)
 800c88c:	147fd526 	beq	r2,r17,800c7e4 <__call_exitprocs+0xa0>
 800c890:	003fc506 	br	800c7a8 <__call_exitprocs+0x64>
 800c894:	8c000115 	stw	r16,4(r17)
 800c898:	003fea06 	br	800c844 <__call_exitprocs+0x100>
 800c89c:	2105883a 	add	r2,r4,r4
 800c8a0:	1485883a 	add	r2,r2,r18
 800c8a4:	11000017 	ldw	r4,0(r2)
 800c8a8:	303ee83a 	callr	r6
 800c8ac:	003ff406 	br	800c880 <__call_exitprocs+0x13c>
 800c8b0:	303ee83a 	callr	r6
 800c8b4:	003ff206 	br	800c880 <__call_exitprocs+0x13c>
 800c8b8:	88800117 	ldw	r2,4(r17)
 800c8bc:	1000081e 	bne	r2,zero,800c8e0 <__call_exitprocs+0x19c>
 800c8c0:	89000017 	ldw	r4,0(r17)
 800c8c4:	20000726 	beq	r4,zero,800c8e4 <__call_exitprocs+0x1a0>
 800c8c8:	b9000015 	stw	r4,0(r23)
 800c8cc:	8809883a 	mov	r4,r17
 800c8d0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
 800c8d4:	bc400017 	ldw	r17,0(r23)
 800c8d8:	883fb71e 	bne	r17,zero,800c7b8 <__call_exitprocs+0x74>
 800c8dc:	003fc506 	br	800c7f4 <__call_exitprocs+0xb0>
 800c8e0:	89000017 	ldw	r4,0(r17)
 800c8e4:	882f883a 	mov	r23,r17
 800c8e8:	2023883a 	mov	r17,r4
 800c8ec:	883fb21e 	bne	r17,zero,800c7b8 <__call_exitprocs+0x74>
 800c8f0:	003fc006 	br	800c7f4 <__call_exitprocs+0xb0>

0800c8f4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 800c8f4:	defffd04 	addi	sp,sp,-12
 800c8f8:	df000215 	stw	fp,8(sp)
 800c8fc:	df000204 	addi	fp,sp,8
 800c900:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 800c904:	e0bfff17 	ldw	r2,-4(fp)
 800c908:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800c90c:	e0bffe17 	ldw	r2,-8(fp)
 800c910:	1005003a 	cmpeq	r2,r2,zero
 800c914:	1000021e 	bne	r2,zero,800c920 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 800c918:	002af070 	cmpltui	zero,zero,43969
 800c91c:	00000106 	br	800c924 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 800c920:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 800c924:	e037883a 	mov	sp,fp
 800c928:	df000017 	ldw	fp,0(sp)
 800c92c:	dec00104 	addi	sp,sp,4
 800c930:	f800283a 	ret

0800c934 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800c934:	defffd04 	addi	sp,sp,-12
 800c938:	dfc00215 	stw	ra,8(sp)
 800c93c:	df000115 	stw	fp,4(sp)
 800c940:	df000104 	addi	fp,sp,4
 800c944:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 800c948:	e13fff17 	ldw	r4,-4(fp)
 800c94c:	800c8f40 	call	800c8f4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800c950:	003fff06 	br	800c950 <_exit+0x1c>
 800c954:	0800c740 	call	800c74 <__alt_mem_onchip_memory2_0+0x7f0c74>
